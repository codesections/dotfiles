"76aa3204a6a71806fb00a6e37d2bde0e16ba1421"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#4=[nil nil ((2995 . 3002)) nil (23732 48515 953364 201000) 0 nil]) ((2745 . 2752)) nil (23732 48515 953372 964000) 0 nil] [nil nil ((2746 . 2753)) ((#("query::" 0 5 (fontified t face font-lock-type-face) 5 7 (fontified t)) . 2746) (undo-tree-id10614 . -6) (undo-tree-id10615 . -6) (undo-tree-id10616 . -1) (undo-tree-id10617 . -2) (undo-tree-id10618 . -3) (undo-tree-id10619 . -4) (undo-tree-id10620 . -5) (undo-tree-id10621 . -6) (undo-tree-id10622 . -7) (undo-tree-id10623 . -6) (undo-tree-id10624 . -6) (undo-tree-id10625 . -6) (undo-tree-id10626 . -6) (undo-tree-id10627 . -6) (undo-tree-id10628 . -6) (undo-tree-id10629 . -6) (undo-tree-id10630 . -6) (undo-tree-id10631 . -6) (undo-tree-id10632 . -6) (undo-tree-id10633 . -6) (undo-tree-id10634 . -6) (undo-tree-id10635 . -6)) (23732 48375 557899 474000) 0 nil]) ((2470 . 2477)) nil (23732 48375 560087 780000) 0 nil]) ((1798 . 1805)) nil (23732 48375 557908 208000) 0 nil]) ((1145 . 1146) (1139 . 1145)) nil (23732 48375 557911 648000) 0 nil]) ((#("s
" 0 1 (fontified t) 1 2 (fontified t)) . 79) (undo-tree-id10613 . 1)) nil (23732 48375 557921 135000) 0 nil]) ((79 . 80)) nil (23732 48375 557924 174000) 0 nil]) ((78 . 79) (t 23732 48271 883081 255000) 57) nil (23732 48375 557927 503000) 0 nil]) ((#("use serde_derive::Deserialize;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 16 (fontified t face font-lock-constant-face) 16 18 (fontified t) 18 29 (fontified t face font-lock-type-face) 29 30 (fontified t) 30 31 (fontified t)) . 53) (undo-tree-id10597 . -27) (undo-tree-id10598 . -27) (undo-tree-id10599 . -27) (undo-tree-id10600 . -9) (undo-tree-id10601 . -9) (undo-tree-id10602 . -9) (undo-tree-id10603 . -9)) nil (23732 48271 794936 804000) 0 nil]) ((#("#[derive(Deserialize)]
struct Media {
    only_media: String,
}
#[derive(Deserialize)]
struct Hashtag {
    tag: String,
}
#[derive(Deserialize)]
struct List {
    list: String,
}

" 0 22 (fontified t face font-lock-preprocessor-face) 22 23 (fontified t) 23 29 (fontified t face font-lock-keyword-face) 29 30 (fontified t) 30 35 (fontified t face font-lock-type-face) 35 42 (fontified t) 42 52 (fontified t face font-lock-variable-name-face) 52 54 (fontified t) 54 60 (fontified t face font-lock-type-face) 60 64 (fontified t) 64 86 (fontified t face font-lock-preprocessor-face) 86 87 (fontified t) 87 93 (fontified t face font-lock-keyword-face) 93 94 (fontified t) 94 101 (fontified t face font-lock-type-face) 101 108 (fontified t) 108 111 (fontified t face font-lock-variable-name-face) 111 113 (fontified t) 113 119 (fontified t face font-lock-type-face) 119 123 (fontified t) 123 145 (fontified t face font-lock-preprocessor-face) 145 146 (fontified t) 146 152 (fontified t face font-lock-keyword-face) 152 153 (fontified t) 153 157 (fontified t face font-lock-type-face) 157 164 (fontified t) 164 168 (fontified t face font-lock-variable-name-face) 168 170 (fontified t) 170 176 (fontified t face font-lock-type-face) 176 181 (fontified t)) . 111) (undo-tree-id10604 . -180) (undo-tree-id10605 . -9) (undo-tree-id10606 . -180) (undo-tree-id10607 . -9) (undo-tree-id10608 . -180) (undo-tree-id10609 . -180) (undo-tree-id10610 . -180) 291) nil (23732 48271 794973 937000) 0 nil]) ((15 . 23) (#("f" 0 1 (fontified t)) . -15) (undo-tree-id10611 . -1) (undo-tree-id10612 . -1) 16 (13 . 16) (12 . 13) (t 23732 47855 315225 831000) 1) nil (23732 48271 794997 37000) 0 nil]) ((1 . 4232) (#("mod pubsub;
use serde_derive::Deserialize;
use futures::stream::Stream;
use warp::{path, Filter};

#[derive(Deserialize)]
struct Media {
    only_media: String,
}
#[derive(Deserialize)]
struct Hashtag {
    tag: String,
}
#[derive(Deserialize)]
struct List {
    list: String,
}

fn main() {
    use warp::path;
    let base = path!(\"api\" / \"v1\" / \"streaming\");

    // GET /api/v1/streaming/user
    let user_timeline = base
        .and(path(\"user\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| pubsub::stream_from(\"1\".to_string()));

    // GET /api/v1/streaming/user/notification
    let user_timeline_notifications = base
        .and(path!(\"user\" / \"notification\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| {
            let full_stream = pubsub::stream_from(\"1\".to_string());
            // TODO: filter stream to just have notifications
            full_stream
        });

    // GET /api/v1/streaming/public
    let public_timeline = base
        .and(path(\"public\"))
        .and(path::end())
        .map(|| pubsub::stream_from(\"public\".to_string()));

    // GET /api/v1/streaming/public?only_media=true
    let public_timeline_media = base
        .and(path(\"public\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                pubsub::stream_from(\"public:media\".to_string())
            } else {
                pubsub::stream_from(\"public\".to_string())
            }
        });

    // GET /api/v1/streaming/public/local
    let local_timeline = base
        .and(path!(\"public\" / \"local\"))
        .and(path::end())
        .map(|| pubsub::stream_from(\"public:local\".to_string()));

    // GET /api/v1/streaming/public/local?only_media=true
    let local_timeline_media = base
        .and(path!(\"public\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                pubsub::stream_from(\"public:local:media\".to_string())
            } else {
                pubsub::stream_from(\"public:local\".to_string())
            }
        });

    // GET /api/v1/streaming/direct
    let direct_timeline = base
        .and(path(\"direct\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| pubsub::stream_from(\"direct:1\".to_string()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag
    let hashtag_timeline = base
        .and(path(\"hashtag\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| pubsub::stream_from(format!(\"hashtag:{}\", q.tag)));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag
    let hashtag_timeline_local = base
        .and(path!(\"hashtag\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| pubsub::stream_from(format!(\"hashtag:{}:local\", q.tag)));

    // GET /api/v1/streaming/list?list=:list_id
    let list_timeline = base
        .and(path(\"list\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: List| pubsub::stream_from(format!(\"list:{}\", q.list)));

    let routes = user_timeline
        .or(user_timeline_notifications)
        .unify()
        .or(public_timeline_media)
        .unify()
        .or(public_timeline)
        .unify()
        .or(local_timeline_media)
        .unify()
        .or(local_timeline)
        .unify()
        .or(direct_timeline)
        .unify()
        .or(hashtag_timeline)
        .unify()
        .or(hashtag_timeline_local)
        .unify()
        .or(list_timeline)
        .unify()
        .and_then(|event_stream| event_stream)
        .and(warp::sse())
        .map(|event_stream: pubsub::Receiver, sse: warp::sse::Sse| {
            sse.reply(warp::sse::keep(
                event_stream.map(|item| {
                    let payload = item[\"payload\"].clone();
                    let event = item[\"event\"].clone();
                    (warp::sse::event(event), warp::sse::data(payload))
                }),
                None,
            ))
        });

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 10 (fontified t face font-lock-constant-face) 10 11 (fontified t) 11 12 (fontified t) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 28 (fontified t face font-lock-constant-face) 28 30 (fontified t) 30 41 (fontified t face font-lock-type-face) 41 42 (fontified t) 42 43 (fontified t) 43 46 (fontified t face font-lock-keyword-face) 46 47 (fontified t) 47 54 (fontified t face font-lock-constant-face) 54 56 (fontified t) 56 62 (fontified t face font-lock-constant-face) 62 64 (fontified t) 64 70 (fontified t face font-lock-type-face) 70 71 (fontified t) 71 72 (fontified t) 72 75 (fontified t face font-lock-keyword-face) 75 76 (fontified t) 76 80 (fontified t face font-lock-constant-face) 80 89 (fontified t) 89 95 (fontified t face font-lock-type-face) 95 99 (fontified t) 99 121 (fontified t face font-lock-preprocessor-face) 121 122 (fontified t) 122 128 (fontified t face font-lock-keyword-face) 128 129 (fontified t) 129 134 (fontified t face font-lock-type-face) 134 141 (fontified t) 141 151 (fontified t face font-lock-variable-name-face) 151 153 (fontified t) 153 159 (fontified t face font-lock-type-face) 159 163 (fontified t) 163 185 (fontified t face font-lock-preprocessor-face) 185 186 (fontified t) 186 192 (fontified t face font-lock-keyword-face) 192 193 (fontified t) 193 200 (fontified t face font-lock-type-face) 200 207 (fontified t) 207 210 (fontified t face font-lock-variable-name-face) 210 212 (fontified t) 212 218 (fontified t face font-lock-type-face) 218 222 (fontified t) 222 244 (fontified t face font-lock-preprocessor-face) 244 245 (fontified t) 245 251 (fontified t face font-lock-keyword-face) 251 252 (fontified t) 252 256 (fontified t face font-lock-type-face) 256 263 (fontified t) 263 267 (fontified t face font-lock-variable-name-face) 267 269 (fontified t) 269 275 (fontified t face font-lock-type-face) 275 280 (fontified t) 280 282 (fontified t face font-lock-keyword-face) 282 283 (fontified t) 283 287 (fontified t face font-lock-function-name-face) 287 296 (fontified t) 296 299 (fontified t face font-lock-keyword-face) 299 300 (fontified t) 300 304 (fontified t face font-lock-constant-face) 304 316 (fontified t) 316 319 (fontified t face font-lock-keyword-face) 319 320 (fontified t) 320 324 (fontified t face font-lock-variable-name-face) 324 327 (fontified t) 327 332 (fontified t face font-lock-preprocessor-face) 332 333 (fontified t) 333 338 (fontified t face font-lock-string-face) 338 341 (fontified t) 341 345 (fontified t face font-lock-string-face) 345 348 (fontified t) 348 359 (fontified t face font-lock-string-face) 359 367 (fontified t) 367 370 (fontified t face font-lock-comment-delimiter-face) 370 397 (fontified t face font-lock-comment-face) 397 401 (fontified t) 401 404 (fontified t face font-lock-keyword-face) 404 405 (fontified t) 405 418 (fontified t face font-lock-variable-name-face) 418 444 (fontified t) 444 448 (fontified t face font-lock-string-face) 448 449 (syntax-table #1=(15) fontified t face font-lock-string-face) 449 450 (fontified t face font-lock-string-face) 450 466 (fontified t) 466 470 (fontified t face font-lock-constant-face) 470 487 (fontified t) 487 490 (fontified t face font-lock-comment-delimiter-face) 490 522 (fontified t face font-lock-comment-face) 522 538 (fontified t) 538 544 (fontified t face font-lock-constant-face) 544 558 (fontified t) 558 561 (fontified t face font-lock-string-face) 561 572 (fontified t) 572 576 (fontified t) 576 577 (fontified t) 577 582 (fontified t) 582 585 (fontified t face font-lock-comment-delimiter-face) 585 625 (fontified t face font-lock-comment-face) 625 629 (fontified t) 629 632 (fontified t face font-lock-keyword-face) 632 633 (fontified t) 633 660 (fontified t face font-lock-variable-name-face) 660 681 (fontified t) 681 686 (fontified t face font-lock-preprocessor-face) 686 687 (fontified t) 687 691 (fontified t face font-lock-string-face) 691 692 (fontified t syntax-table #1# face font-lock-string-face) 692 693 (fontified t face font-lock-string-face) 693 696 (fontified t) 696 710 (fontified t face font-lock-string-face) 710 726 (fontified t) 726 730 (fontified t face font-lock-constant-face) 730 747 (fontified t) 747 750 (fontified t face font-lock-comment-delimiter-face) 750 782 (fontified t face font-lock-comment-face) 782 800 (fontified t) 800 812 (fontified t) 812 815 (fontified t face font-lock-keyword-face) 815 816 (fontified t) 816 827 (fontified t face font-lock-variable-name-face) 827 830 (fontified t) 830 836 (fontified t face font-lock-constant-face) 836 850 (fontified t) 850 853 (fontified t face font-lock-string-face) 853 868 (fontified t) 868 880 (fontified t) 880 883 (fontified t face font-lock-comment-delimiter-face) 883 930 (fontified t face font-lock-comment-face) 930 971 (fontified t) 971 974 (fontified t face font-lock-comment-delimiter-face) 974 1003 (fontified t face font-lock-comment-face) 1003 1007 (fontified t) 1007 1010 (fontified t face font-lock-keyword-face) 1010 1011 (fontified t) 1011 1026 (fontified t face font-lock-variable-name-face) 1026 1038 (fontified t) 1038 1052 (fontified t) 1052 1060 (fontified t face font-lock-string-face) 1060 1063 (fontified t) 1063 1076 (fontified t) 1076 1077 (fontified t face font-lock-constant-face) 1077 1080 (face font-lock-constant-face fontified t) 1080 1084 (fontified t) 1084 1085 (fontified t) 1085 1089 (fontified t) 1105 1111 (face font-lock-constant-face) 1125 1133 (face font-lock-string-face) 1154 1157 (face font-lock-comment-delimiter-face) 1157 1202 (face font-lock-comment-face) 1206 1209 (face font-lock-keyword-face) 1210 1231 (face font-lock-variable-name-face) 1257 1265 (face font-lock-string-face) 1281 1285 (face font-lock-constant-face) 1309 1313 (face font-lock-constant-face) 1336 1337 (face font-lock-variable-name-face) 1339 1344 (face font-lock-type-face) 1360 1362 (face font-lock-keyword-face) 1379 1382 (face font-lock-string-face) 1402 1408 (face font-lock-string-face) 1427 1433 (face font-lock-constant-face) 1447 1461 (face font-lock-string-face) 1489 1493 (face font-lock-keyword-face) 1512 1518 (face font-lock-constant-face) 1532 1540 (face font-lock-string-face) 1585 1588 (face font-lock-comment-delimiter-face) 1588 1589 (face font-lock-comment-face) 1589 1623 (face font-lock-comment-face) 1627 1630 (face font-lock-keyword-face) 1631 1645 (face font-lock-variable-name-face) 1666 1671 (face font-lock-preprocessor-face) 1672 1680 (face font-lock-string-face) 1683 1690 (face font-lock-string-face) 1706 1710 (face font-lock-constant-face) 1735 1741 (face font-lock-constant-face) 1755 1769 (face font-lock-string-face) 1790 1793 (face font-lock-comment-delimiter-face) 1793 1844 (face font-lock-comment-face) 1848 1851 (face font-lock-keyword-face) 1852 1872 (face font-lock-variable-name-face) 1893 1898 (face font-lock-preprocessor-face) 1899 1907 (face font-lock-string-face) 1910 1917 (face font-lock-string-face) 1933 1935 (face font-lock-constant-face) 1935 1937 (face font-lock-constant-face) 1961 1965 (face font-lock-constant-face) 1988 1989 (face font-lock-variable-name-face) 1991 1996 (face font-lock-type-face) 2012 2014 (face font-lock-keyword-face) 2031 2034 (face font-lock-string-face) 2054 2060 (face font-lock-string-face) 2079 2085 (face font-lock-constant-face) 2099 2119 (face font-lock-string-face) 2147 2151 (face font-lock-keyword-face) 2170 2176 (face font-lock-constant-face) 2190 2204 (face font-lock-string-face) 2249 2252 (face font-lock-comment-delimiter-face) 2252 2281 (face font-lock-comment-face) 2285 2288 (face font-lock-keyword-face) 2289 2301 (face font-lock-variable-name-face) 2301 2304 (face font-lock-variable-name-face) 2330 2338 (face font-lock-string-face) 2354 2358 (face font-lock-constant-face) 2375 2378 (face font-lock-comment-delimiter-face) 2378 2410 (face font-lock-comment-face) 2426 2432 (face font-lock-constant-face) 2446 2456 (face font-lock-string-face) 2477 2480 (face font-lock-comment-delimiter-face) 2480 2523 (face font-lock-comment-face) 2527 2530 (face font-lock-keyword-face) 2531 2547 (face font-lock-variable-name-face) 2573 2582 (face font-lock-string-face) 2598 2602 (face font-lock-constant-face) 2626 2630 (face font-lock-constant-face) 2653 2654 (face font-lock-variable-name-face) 2656 2663 (face font-lock-type-face) 2665 2671 (face font-lock-constant-face) 2685 2692 (face rust-builtin-formatting-macro-face) 2693 2702 (face font-lock-string-face) 2702 2704 (face rust-string-interpolation-face) 2704 2705 (face font-lock-string-face) 2722 2725 (face font-lock-comment-delimiter-face) 2725 2774 (face font-lock-comment-face) 2778 2781 (face font-lock-keyword-face) 2782 2804 (face font-lock-variable-name-face) 2825 2828 (face font-lock-preprocessor-face) 2828 2830 (face font-lock-preprocessor-face) 2831 2840 (face font-lock-string-face) 2843 2850 (face font-lock-string-face) 2866 2870 (face font-lock-constant-face) 2894 2898 (face font-lock-constant-face) 2921 2922 (face font-lock-variable-name-face) 2924 2931 (face font-lock-type-face) 2933 2939 (face font-lock-constant-face) 2953 2960 (face rust-builtin-formatting-macro-face) 2961 2970 (face font-lock-string-face) 2970 2972 (face rust-string-interpolation-face) 2972 2979 (face font-lock-string-face) 2996 2999 (face font-lock-comment-delimiter-face) 2999 3040 (face font-lock-comment-face) 3044 3047 (face font-lock-keyword-face) 3048 3061 (face font-lock-variable-name-face) 3087 3093 (face font-lock-string-face) 3109 3113 (face font-lock-constant-face) 3137 3141 (face font-lock-constant-face) 3164 3165 (face font-lock-variable-name-face) 3167 3171 (face font-lock-type-face) 3173 3179 (face font-lock-constant-face) 3193 3200 (face rust-builtin-formatting-macro-face) 3201 3207 (face font-lock-string-face) 3207 3209 (face rust-string-interpolation-face) 3209 3210 (face font-lock-string-face) 3228 3231 (face font-lock-keyword-face) 3232 3233 (face font-lock-variable-name-face) 3233 3238 (face font-lock-variable-name-face) 3757 3761 (face font-lock-constant-face) 3784 3796 (face font-lock-variable-name-face) 3798 3804 (face font-lock-constant-face) 3806 3814 (face font-lock-type-face) 3816 3819 (face font-lock-variable-name-face) 3821 3825 (face font-lock-constant-face) 3827 3830 (face font-lock-constant-face) 3832 3835 (face font-lock-type-face) 3861 3865 (face font-lock-constant-face) 3867 3870 (face font-lock-constant-face) 3940 3943 (face font-lock-keyword-face) 3944 3951 (face font-lock-variable-name-face) 3959 3968 (face font-lock-string-face) 3999 4002 (face font-lock-keyword-face) 4003 4007 (face font-lock-variable-name-face) 4007 4008 (face font-lock-variable-name-face) 4016 4023 (face font-lock-string-face) 4055 4059 (face font-lock-constant-face) 4061 4064 (face font-lock-constant-face) 4080 4084 (face font-lock-constant-face) 4086 4089 (face font-lock-constant-face) 4142 4146 (face font-lock-type-face) 4180 4184 (face font-lock-constant-face)) . 1) (undo-tree-id10543 . 4160) (undo-tree-id10544 . -3870) (undo-tree-id10545 . -3069) (undo-tree-id10546 . -3908) (undo-tree-id10547 . -1105) (undo-tree-id10548 . -1105) (undo-tree-id10549 . -1105) (undo-tree-id10550 . -3806) (undo-tree-id10551 . -3805) (undo-tree-id10552 . -3069) (undo-tree-id10553 . -1105) (undo-tree-id10554 . -3806) (undo-tree-id10555 . -3908) (undo-tree-id10556 . -3909) (undo-tree-id10557 . -3069) (undo-tree-id10558 . -3806) (undo-tree-id10559 . -3908) (undo-tree-id10560 . -3908) (undo-tree-id10561 . -3908) (undo-tree-id10562 . -3908) (undo-tree-id10563 . -3069) (undo-tree-id10564 . -3908) (undo-tree-id10565 . -3908) (undo-tree-id10566 . -3069) (undo-tree-id10567 . -3908) (undo-tree-id10568 . -3908) (undo-tree-id10569 . -3069) (undo-tree-id10570 . -3908) (undo-tree-id10571 . -3908) (undo-tree-id10572 . -3069) (undo-tree-id10573 . -3908) (undo-tree-id10574 . -3950) (undo-tree-id10575 . -3950) (undo-tree-id10576 . -3870) (undo-tree-id10577 . -3870) (undo-tree-id10578 . -3223) (undo-tree-id10579 . -3950) (undo-tree-id10580 . -3870) (undo-tree-id10581 . -3870) (undo-tree-id10582 . -3223) (undo-tree-id10583 . -70) (undo-tree-id10584 . -67) (undo-tree-id10585 . -66) (undo-tree-id10586 . -68) (undo-tree-id10587 . -67) (undo-tree-id10588 . -69) (undo-tree-id10589 . -68) (undo-tree-id10590 . -70) (undo-tree-id10591 . -69) (undo-tree-id10592 . -71) (undo-tree-id10593 . -70) (undo-tree-id10594 . -70) (undo-tree-id10595 . -70) 71) nil (23732 47855 228924 94000) 0 nil]) ((55 . 72) (50 . 55) (#("r" 0 1 (fontified t face font-lock-constant-face)) . -50) (undo-tree-id10596 . -1) 51 (44 . 51) (43 . 44) (t 23732 47816 882091 510000) 13) nil (23732 47855 228957 735000) 0 nil]) ((2398 . 2406)) nil (23732 47816 809165 871000) 0 nil]) ((#("use pubsub;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 10 (fontified t face font-lock-constant-face) 10 12 (fontified t)) . 13) (t 23732 47704 519341 881000)) nil (23732 47816 809171 758000) 0 nil]) ((3774 . 3782)) nil (23732 47704 428885 187000) 0 nil]) ((3149 . 3157) (#("s" 0 1 (fontified nil)) . -3149) 3150 (3149 . 3150)) nil (23732 47704 428897 494000) 0 nil]) ((2909 . 2917) (#("s" 0 1 (fontified nil)) . -2909) (undo-tree-id10534 . -1) 2910 (2909 . 2910)) nil (23732 47704 428920 67000) 0 nil]) ((2641 . 2649) (#("s" 0 1 (fontified nil)) . -2641) 2642 (2641 . 2642)) nil (23732 47704 428926 799000) 0 nil]) ((2154 . 2162) (#("s" 0 1 (fontified nil)) . -2154) 2155 (2154 . 2155)) nil (23732 47704 428932 201000) 0 nil]) ((2063 . 2071) (#("s" 0 1 (fontified nil)) . -2063) 2064 (2063 . 2064)) nil (23732 47704 428937 315000) 0 nil]) ((1719 . 1727) (#("s" 0 1 (fontified nil)) . -1719) (undo-tree-id10535 . -1) 1720 (1719 . 1720)) nil (23732 47704 428945 617000) 0 nil]) ((1496 . 1504) (#("s" 0 1 (fontified nil)) . -1496) 1497 (1496 . 1497)) nil (23732 47704 428951 86000) 0 nil]) ((1411 . 1419) (#("s" 0 1 (fontified nil)) . -1411) (undo-tree-id10536 . -1) 1412 (1411 . 1412)) nil (23732 47704 428958 929000) 0 nil]) ((1089 . 1097) (#("s" 0 1 (fontified t)) . -1089) (undo-tree-id10537 . -1) (undo-tree-id10538 . -1) 1090 (1089 . 1090)) nil (23732 47704 428971 599000) 0 nil]) ((820 . 822) (#(";" 0 1 (fontified nil)) . -820) 821 (814 . 821)) nil (23732 47704 428977 432000) 0 nil]) ((528 . 530) (#(";" 0 1 (fontified t)) . -528) (undo-tree-id10539 . -1) (undo-tree-id10540 . -1) (undo-tree-id10541 . -1) (undo-tree-id10542 . -1) 529 (522 . 529) (t 23732 47586 556624 550000)) nil (23732 47704 428992 454000) 0 nil]) ((1 . 4111) (#("mod pubsub;
use serde_derive::Deserialize;
use warp::{path, Filter};
use pubsub;


#[derive(Deserialize)]
struct Media {
    only_media: String,
}
#[derive(Deserialize)]
struct Hashtag {
    tag: String,
}
#[derive(Deserialize)]
struct List {
    list: String,
}

fn main() {
    use warp::path;
    let base = path!(\"api\" / \"v1\" / \"streaming\");

    // GET /api/v1/streaming/user
    let user_timeline = base
        .and(path(\"user\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| stream_from(\"1\".to_string()));

    // GET /api/v1/streaming/user/notification
    let user_timeline_notifications = base
        .and(path!(\"user\" / \"notification\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| {
            let full_stream = stream_from(\"1\".to_string());
            // TODO: filter stream to just have notifications
            full_stream
        });

    // GET /api/v1/streaming/public
    let public_timeline = base
        .and(path(\"public\"))
        .and(path::end())
        .map(|| stream_from(\"public\".to_string()));

    // GET /api/v1/streaming/public?only_media=true
    let public_timeline_media = base
        .and(path(\"public\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                stream_from(\"public:media\".to_string())
            } else {
                stream_from(\"public\".to_string())
            }
        });

    // GET /api/v1/streaming/public/local
    let local_timeline = base
        .and(path!(\"public\" / \"local\"))
        .and(path::end())
        .map(|| stream_from(\"public:local\".to_string()));

    // GET /api/v1/streaming/public/local?only_media=true
    let local_timeline_media = base
        .and(path!(\"public\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                stream_from(\"public:local:media\".to_string())
            } else {
                stream_from(\"public:local\".to_string())
            }
        });

    // GET /api/v1/streaming/direct
    let direct_timeline = base
        .and(path(\"direct\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| stream_from(\"direct:1\".to_string()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag
    let hashtag_timeline = base
        .and(path(\"hashtag\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| stream_from(format!(\"hashtag:{}\", q.tag)));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag
    let hashtag_timeline_local = base
        .and(path!(\"hashtag\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| stream_from(format!(\"hashtag:{}:local\", q.tag)));

    // GET /api/v1/streaming/list?list=:list_id
    let list_timeline = base
        .and(path(\"list\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: List| stream_from(format!(\"list:{}\", q.list)));

    let routes = user_timeline
        .or(user_timeline_notifications)
        .unify()
        .or(public_timeline_media)
        .unify()
        .or(public_timeline)
        .unify()
        .or(local_timeline_media)
        .unify()
        .or(local_timeline)
        .unify()
        .or(direct_timeline)
        .unify()
        .or(hashtag_timeline)
        .unify()
        .or(hashtag_timeline_local)
        .unify()
        .or(list_timeline)
        .unify()
        .and_then(|event_stream| event_stream)
        .and(warp::sse())
        .map(|event_stream: Receiver, sse: warp::sse::Sse| {
            sse.reply(warp::sse::keep(
                event_stream.map(|item| {
                    let payload = item[\"payload\"].clone();
                    let event = item[\"event\"].clone();
                    (warp::sse::event(event), warp::sse::data(payload))
                }),
                None,
            ))
        });

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 10 (fontified t face font-lock-constant-face) 10 11 (fontified t) 11 12 (fontified t) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 28 (fontified t face font-lock-constant-face) 28 30 (fontified t) 30 41 (fontified t face font-lock-type-face) 41 43 (fontified t) 43 46 (fontified t face font-lock-keyword-face) 46 47 (fontified t) 47 51 (fontified t face font-lock-constant-face) 51 60 (fontified t) 60 66 (fontified t face font-lock-type-face) 66 68 (fontified t) 68 69 (fontified t) 69 72 (fontified t face font-lock-keyword-face) 72 73 (fontified t) 73 79 (fontified t face font-lock-constant-face) 79 80 (fontified t) 80 81 (fontified t) 81 82 (fontified t) 82 83 (fontified t) 83 105 (fontified t face font-lock-preprocessor-face) 105 106 (fontified t) 106 112 (fontified t face font-lock-keyword-face) 112 113 (fontified t) 113 118 (fontified t face font-lock-type-face) 118 121 (fontified t) 121 125 (fontified t) 125 135 (fontified t face font-lock-variable-name-face) 135 137 (fontified t) 137 143 (fontified t face font-lock-type-face) 143 145 (fontified t) 145 147 (fontified t) 147 169 (fontified t face font-lock-preprocessor-face) 169 170 (fontified t) 170 176 (fontified t face font-lock-keyword-face) 176 177 (fontified t) 177 184 (fontified t face font-lock-type-face) 184 191 (fontified t) 191 194 (fontified t face font-lock-variable-name-face) 194 196 (fontified t) 196 202 (fontified t face font-lock-type-face) 202 206 (fontified t) 206 217 (fontified t face font-lock-preprocessor-face) 217 228 (fontified t face font-lock-preprocessor-face) 228 229 (fontified t) 229 235 (fontified t face font-lock-keyword-face) 235 236 (fontified t) 236 240 (fontified t face font-lock-type-face) 240 247 (fontified t) 247 251 (fontified t face font-lock-variable-name-face) 251 253 (fontified t) 253 259 (fontified t face font-lock-type-face) 259 264 (fontified t) 264 266 (fontified t face font-lock-keyword-face) 266 267 (fontified t) 267 271 (fontified t face font-lock-function-name-face) 271 280 (fontified t) 280 283 (fontified t face font-lock-keyword-face) 283 284 (fontified t) 284 288 (fontified t face font-lock-constant-face) 288 300 (fontified t) 300 303 (fontified t face font-lock-keyword-face) 303 304 (fontified t) 304 308 (fontified t face font-lock-variable-name-face) 308 311 (fontified t) 311 316 (fontified t face font-lock-preprocessor-face) 316 317 (fontified t) 317 322 (fontified t face font-lock-string-face) 322 325 (fontified t) 325 329 (fontified t face font-lock-string-face) 329 332 (fontified t) 332 343 (fontified t face font-lock-string-face) 343 351 (fontified t) 351 354 (fontified t face font-lock-comment-delimiter-face) 354 381 (fontified t face font-lock-comment-face) 381 385 (fontified t) 385 388 (fontified t face font-lock-keyword-face) 388 389 (fontified t) 389 402 (fontified t face font-lock-variable-name-face) 402 428 (fontified t) 428 432 (fontified t face font-lock-string-face) 432 433 (syntax-table #1# fontified t face font-lock-string-face) 433 434 (fontified t face font-lock-string-face) 434 450 (fontified t) 450 454 (fontified t face font-lock-constant-face) 454 471 (fontified t) 471 474 (fontified t face font-lock-comment-delimiter-face) 474 506 (fontified t face font-lock-comment-face) 506 509 (fontified t) 509 534 (fontified t) 534 537 (fontified t face font-lock-string-face) 537 540 (fontified t) 540 553 (fontified t) 553 554 (fontified t) 554 555 (fontified t) 555 558 (fontified t) 558 561 (fontified t face font-lock-comment-delimiter-face) 561 580 (fontified t face font-lock-comment-face) 580 581 (fontified t face font-lock-comment-face) 581 583 (face font-lock-comment-face fontified t) 583 601 (face font-lock-comment-face fontified t) 601 605 (fontified t) 605 608 (fontified t face font-lock-keyword-face) 608 609 (fontified t) 609 636 (fontified t face font-lock-variable-name-face) 636 657 (fontified t) 657 662 (fontified t face font-lock-preprocessor-face) 662 663 (fontified t) 663 667 (fontified t face font-lock-string-face) 667 668 (fontified t syntax-table #1# face font-lock-string-face) 668 669 (fontified t face font-lock-string-face) 669 672 (fontified t) 672 686 (fontified t face font-lock-string-face) 686 702 (fontified t) 702 706 (fontified t face font-lock-constant-face) 706 723 (fontified t) 723 726 (fontified t face font-lock-comment-delimiter-face) 726 729 (fontified t face font-lock-comment-face) 729 758 (fontified t face font-lock-comment-face) 758 788 (fontified t) 788 791 (fontified t face font-lock-keyword-face) 791 792 (fontified t) 792 803 (fontified t face font-lock-variable-name-face) 803 818 (fontified t) 818 821 (fontified t face font-lock-string-face) 821 848 (fontified t) 848 851 (fontified t face font-lock-comment-delimiter-face) 851 898 (fontified t face font-lock-comment-face) 898 939 (fontified t) 939 942 (fontified t face font-lock-comment-delimiter-face) 942 971 (fontified t face font-lock-comment-face) 971 975 (fontified t) 975 978 (fontified t face font-lock-keyword-face) 978 979 (fontified t) 979 994 (fontified t face font-lock-variable-name-face) 994 1020 (fontified t) 1020 1028 (fontified t face font-lock-string-face) 1028 1044 (fontified t) 1044 1048 (fontified t face font-lock-constant-face) 1048 1053 (fontified t) 1053 1054 (fontified t) 1054 1057 (fontified t) 1057 1085 (fontified t) 1085 1093 (fontified t face font-lock-string-face) 1093 1101 (fontified t) 1101 1109 (fontified t) 1114 1117 (face font-lock-comment-delimiter-face) 1117 1162 (face font-lock-comment-face) 1166 1169 (face font-lock-keyword-face) 1170 1191 (face font-lock-variable-name-face) 1217 1225 (face font-lock-string-face) 1241 1245 (face font-lock-constant-face) 1269 1273 (face font-lock-constant-face) 1296 1297 (face font-lock-variable-name-face) 1299 1304 (face font-lock-type-face) 1320 1322 (face font-lock-keyword-face) 1339 1342 (face font-lock-string-face) 1362 1368 (face font-lock-string-face) 1399 1413 (face font-lock-string-face) 1441 1445 (face font-lock-keyword-face) 1476 1484 (face font-lock-string-face) 1529 1532 (face font-lock-comment-delimiter-face) 1532 1567 (face font-lock-comment-face) 1571 1574 (face font-lock-keyword-face) 1575 1589 (face font-lock-variable-name-face) 1610 1615 (face font-lock-preprocessor-face) 1616 1624 (face font-lock-string-face) 1627 1634 (face font-lock-string-face) 1650 1654 (face font-lock-constant-face) 1691 1705 (face font-lock-string-face) 1726 1729 (face font-lock-comment-delimiter-face) 1729 1756 (face font-lock-comment-face) 1756 1780 (face font-lock-comment-face) 1784 1787 (face font-lock-keyword-face) 1788 1808 (face font-lock-variable-name-face) 1829 1834 (face font-lock-preprocessor-face) 1835 1843 (face font-lock-string-face) 1846 1853 (face font-lock-string-face) 1869 1873 (face font-lock-constant-face) 1897 1901 (face font-lock-constant-face) 1924 1925 (face font-lock-variable-name-face) 1927 1932 (face font-lock-type-face) 1948 1950 (face font-lock-keyword-face) 1967 1970 (face font-lock-string-face) 1990 1996 (face font-lock-string-face) 2027 2047 (face font-lock-string-face) 2075 2079 (face font-lock-keyword-face) 2110 2124 (face font-lock-string-face) 2169 2172 (face font-lock-comment-delimiter-face) 2172 2201 (face font-lock-comment-face) 2205 2208 (face font-lock-keyword-face) 2209 2224 (face font-lock-variable-name-face) 2250 2258 (face font-lock-string-face) 2274 2278 (face font-lock-constant-face) 2295 2298 (face font-lock-comment-delimiter-face) 2298 2330 (face font-lock-comment-face) 2358 2368 (face font-lock-string-face) 2389 2392 (face font-lock-comment-delimiter-face) 2392 2435 (face font-lock-comment-face) 2439 2442 (face font-lock-keyword-face) 2443 2459 (face font-lock-variable-name-face) 2485 2494 (face font-lock-string-face) 2510 2514 (face font-lock-constant-face) 2538 2542 (face font-lock-constant-face) 2565 2566 (face font-lock-variable-name-face) 2568 2575 (face font-lock-type-face) 2589 2596 (face rust-builtin-formatting-macro-face) 2597 2606 (face font-lock-string-face) 2606 2608 (face rust-string-interpolation-face) 2608 2609 (face font-lock-string-face) 2626 2629 (face font-lock-comment-delimiter-face) 2629 2638 (face font-lock-comment-face) 2638 2678 (face font-lock-comment-face) 2682 2685 (face font-lock-keyword-face) 2686 2708 (face font-lock-variable-name-face) 2729 2734 (face font-lock-preprocessor-face) 2735 2744 (face font-lock-string-face) 2747 2754 (face font-lock-string-face) 2770 2774 (face font-lock-constant-face) 2798 2802 (face font-lock-constant-face) 2825 2826 (face font-lock-variable-name-face) 2828 2835 (face font-lock-type-face) 2849 2856 (face rust-builtin-formatting-macro-face) 2857 2866 (face font-lock-string-face) 2866 2868 (face rust-string-interpolation-face) 2868 2875 (face font-lock-string-face) 2892 2895 (face font-lock-comment-delimiter-face) 2895 2936 (face font-lock-comment-face) 2940 2943 (face font-lock-keyword-face) 2944 2957 (face font-lock-variable-name-face) 2983 2989 (face font-lock-string-face) 3005 3009 (face font-lock-constant-face) 3033 3037 (face font-lock-constant-face) 3060 3061 (face font-lock-variable-name-face) 3063 3067 (face font-lock-type-face) 3081 3088 (face rust-builtin-formatting-macro-face) 3089 3095 (face font-lock-string-face) 3095 3097 (face rust-string-interpolation-face) 3097 3098 (face font-lock-string-face) 3116 3119 (face font-lock-keyword-face) 3120 3122 (face font-lock-variable-name-face) 3122 3126 (face font-lock-variable-name-face) 3645 3649 (face font-lock-constant-face) 3672 3684 (face font-lock-variable-name-face) 3686 3694 (face font-lock-type-face) 3696 3699 (face font-lock-variable-name-face) 3701 3705 (face font-lock-constant-face) 3707 3710 (face font-lock-constant-face) 3712 3715 (face font-lock-type-face) 3741 3745 (face font-lock-constant-face) 3747 3750 (face font-lock-constant-face) 3820 3823 (face font-lock-keyword-face) 3824 3831 (face font-lock-variable-name-face) 3839 3848 (face font-lock-string-face) 3879 3882 (face font-lock-keyword-face) 3883 3888 (face font-lock-variable-name-face) 3896 3903 (face font-lock-string-face) 3935 3939 (face font-lock-constant-face) 3941 3944 (face font-lock-constant-face) 3960 3964 (face font-lock-constant-face) 3966 3969 (face font-lock-constant-face) 4022 4026 (face font-lock-type-face) 4060 4064 (face font-lock-constant-face)) . 1) (undo-tree-id10272 . 4031) (undo-tree-id10273 . -191) (undo-tree-id10274 . -12) (undo-tree-id10275 . 4068) (undo-tree-id10276 . -12) (undo-tree-id10277 . -43) (undo-tree-id10278 . -9) (undo-tree-id10279 . -9) (undo-tree-id10280 . -9) (undo-tree-id10281 . -9) (undo-tree-id10282 . -9) (undo-tree-id10283 . -191) (undo-tree-id10284 . -82) (undo-tree-id10285 . -82) (undo-tree-id10286 . -82) (undo-tree-id10287 . -82) (undo-tree-id10288 . -82) (undo-tree-id10289 . -82) (undo-tree-id10290 . -12) (undo-tree-id10291 . -43) (undo-tree-id10292 . -43) (undo-tree-id10293 . -12) (undo-tree-id10294 . -12) (undo-tree-id10295 . -12) (undo-tree-id10296 . -43) (undo-tree-id10297 . -43) (undo-tree-id10298 . -43) (undo-tree-id10299 . -43) (undo-tree-id10300 . -43) (undo-tree-id10301 . -43) (undo-tree-id10302 . -43) (undo-tree-id10303 . -191) (undo-tree-id10304 . -204) (undo-tree-id10305 . -43) (undo-tree-id10306 . -191) (undo-tree-id10307 . -191) (undo-tree-id10308 . -145) (undo-tree-id10309 . -168) (undo-tree-id10310 . -79) (undo-tree-id10311 . -79) (undo-tree-id10312 . -79) (undo-tree-id10313 . -79) (undo-tree-id10314 . -79) (undo-tree-id10315 . -79) (undo-tree-id10316 . -79) (undo-tree-id10317 . -317) (undo-tree-id10318 . -318) (undo-tree-id10319 . -317) (undo-tree-id10320 . -318) (undo-tree-id10321 . -317) (undo-tree-id10322 . -318) (undo-tree-id10323 . -317) (undo-tree-id10324 . -318) (undo-tree-id10325 . -317) (undo-tree-id10326 . -318) (undo-tree-id10327 . -317) (undo-tree-id10328 . -318) (undo-tree-id10329 . -317) (undo-tree-id10330 . -318) (undo-tree-id10331 . -317) (undo-tree-id10332 . -318) (undo-tree-id10333 . -317) (undo-tree-id10334 . -318) (undo-tree-id10335 . -69) (undo-tree-id10336 . -79) (undo-tree-id10337 . -78) (undo-tree-id10338 . -79) (undo-tree-id10339 . -78) (undo-tree-id10340 . -78) (undo-tree-id10341 . -79) (undo-tree-id10342 . -78) (undo-tree-id10343 . -78) (undo-tree-id10344 . -79) (undo-tree-id10345 . -78) (undo-tree-id10346 . -79) (undo-tree-id10347 . -78) (undo-tree-id10348 . -78) (undo-tree-id10349 . -78) (undo-tree-id10350 . -78) (undo-tree-id10351 . -79) (undo-tree-id10352 . -78) (undo-tree-id10353 . -79) (undo-tree-id10354 . -79) (undo-tree-id10355 . -78) (undo-tree-id10356 . -79) (undo-tree-id10357 . -79) (undo-tree-id10358 . -78) (undo-tree-id10359 . -79) (undo-tree-id10360 . -78) (undo-tree-id10361 . -79) (undo-tree-id10362 . -78) (undo-tree-id10363 . -79) (undo-tree-id10364 . -78) (undo-tree-id10365 . -80) (undo-tree-id10366 . -79) (undo-tree-id10367 . -80) (undo-tree-id10368 . -80) (undo-tree-id10369 . -79) (undo-tree-id10370 . -80) (undo-tree-id10371 . -80) (undo-tree-id10372 . -79) (undo-tree-id10373 . -80) (undo-tree-id10374 . -516) (undo-tree-id10375 . -80) (undo-tree-id10376 . -79) (undo-tree-id10377 . -79) (undo-tree-id10378 . -79) (undo-tree-id10379 . -81) (undo-tree-id10380 . -79) (undo-tree-id10381 . -82) (undo-tree-id10382 . -81) (undo-tree-id10383 . -93) (undo-tree-id10384 . -82) (undo-tree-id10385 . -116) (undo-tree-id10386 . -93) (undo-tree-id10387 . -131) (undo-tree-id10388 . -116) (undo-tree-id10389 . -145) (undo-tree-id10390 . -131) (undo-tree-id10391 . -157) (undo-tree-id10392 . -145) (undo-tree-id10393 . -180) (undo-tree-id10394 . -157) (undo-tree-id10395 . -197) (undo-tree-id10396 . -180) (undo-tree-id10397 . -204) (undo-tree-id10398 . -197) (undo-tree-id10399 . -216) (undo-tree-id10400 . -204) (undo-tree-id10401 . -239) (undo-tree-id10402 . -216) (undo-tree-id10403 . -253) (undo-tree-id10404 . -239) (undo-tree-id10405 . -261) (undo-tree-id10406 . -253) (undo-tree-id10407 . -263) (undo-tree-id10408 . -261) (undo-tree-id10409 . -274) (undo-tree-id10410 . -263) (undo-tree-id10411 . -286) (undo-tree-id10412 . -274) (undo-tree-id10413 . -306) (undo-tree-id10414 . -286) (undo-tree-id10415 . -346) (undo-tree-id10416 . -306) (undo-tree-id10417 . -357) (undo-tree-id10418 . -346) (undo-tree-id10419 . -391) (undo-tree-id10420 . -357) (undo-tree-id10421 . -420) (undo-tree-id10422 . -391) (undo-tree-id10423 . -447) (undo-tree-id10424 . -420) (undo-tree-id10425 . -473) (undo-tree-id10426 . -447) (undo-tree-id10427 . -516) (undo-tree-id10428 . -473) (undo-tree-id10429 . -73) (undo-tree-id10430 . -79) (undo-tree-id10431 . -3686) (undo-tree-id10432 . -3694) (undo-tree-id10433 . -3069) (undo-tree-id10434 . -3080) (undo-tree-id10435 . -2837) (undo-tree-id10436 . -2848) (undo-tree-id10437 . -2577) (undo-tree-id10438 . -2588) (undo-tree-id10439 . -2346) (undo-tree-id10440 . -2357) (undo-tree-id10441 . -2098) (undo-tree-id10442 . -2109) (undo-tree-id10443 . -2015) (undo-tree-id10444 . -2026) (undo-tree-id10445 . -1679) (undo-tree-id10446 . -1690) (undo-tree-id10447 . -1464) (undo-tree-id10448 . -1475) (undo-tree-id10449 . -1387) (undo-tree-id10450 . -1398) (undo-tree-id10451 . -1073) (undo-tree-id10452 . -1084) (undo-tree-id10453 . -806) (undo-tree-id10454 . -817) (undo-tree-id10455 . -522) (undo-tree-id10456 . -533) (undo-tree-id10457 . -3) (undo-tree-id10458 . -73) (undo-tree-id10459 . -79) (undo-tree-id10460 . -73) (undo-tree-id10461 . -79) (undo-tree-id10462 . -11) (undo-tree-id10463 . -522) (undo-tree-id10464 . -533) (undo-tree-id10465 . -806) (undo-tree-id10466 . -817) (undo-tree-id10467 . -1073) (undo-tree-id10468 . -1084) (undo-tree-id10469 . -1387) (undo-tree-id10470 . -1398) (undo-tree-id10471 . -1464) (undo-tree-id10472 . -1475) (undo-tree-id10473 . -1679) (undo-tree-id10474 . -1690) (undo-tree-id10475 . -2015) (undo-tree-id10476 . -2026) (undo-tree-id10477 . -2098) (undo-tree-id10478 . -2109) (undo-tree-id10479 . -2346) (undo-tree-id10480 . -2357) (undo-tree-id10481 . -2577) (undo-tree-id10482 . -2588) (undo-tree-id10483 . -2837) (undo-tree-id10484 . -2848) (undo-tree-id10485 . -3069) (undo-tree-id10486 . -3080) (undo-tree-id10487 . -3686) (undo-tree-id10488 . -3694) (undo-tree-id10489 . -73) (undo-tree-id10490 . -79) 517) nil (23732 47586 471010 403000) 0 nil]) ((80 . 81)) nil (23732 47586 471049 301000) 0 nil]) ((#("::stream_from;" 0 2 (fontified t) 2 14 (fontified t)) . 80) (undo-tree-id10491 . -11) (undo-tree-id10492 . -12) (undo-tree-id10493 . -11) (undo-tree-id10494 . -11) (undo-tree-id10495 . -1)) nil (23732 47586 471064 130000) 0 nil]) ((93 . 94) (82 . 93) (#("stream_from" 0 11 (fontified nil)) . 82) (82 . 93) (#("strea" 0 5 (fontified t)) . -82) (undo-tree-id10496 . -5) 87 (80 . 87) (74 . 80) (#("pubs" 0 4 (fontified t face font-lock-constant-face)) . -74) (undo-tree-id10497 . -4) 78 (70 . 78) (69 . 70) 48) nil (23732 47586 471082 16000) 0 nil]) ((#("use tokio::io;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 11 (fontified t) 11 13 (fontified t) 13 15 (fontified t)) . 44) (undo-tree-id10498 . -15) (undo-tree-id10499 . -15) (undo-tree-id10500 . -15) (undo-tree-id10501 . -15) (undo-tree-id10502 . -15) (undo-tree-id10503 . -15) (undo-tree-id10504 . -15) (undo-tree-id10505 . -15) (undo-tree-id10506 . -15) (undo-tree-id10507 . -15) (undo-tree-id10508 . -15) (undo-tree-id10509 . -15) (undo-tree-id10510 . -4) 48) nil (23732 47586 471110 743000) 0 nil]) ((#("use futures;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 12 (fontified t) 12 13 (fontified t)) . 13) (undo-tree-id10511 . 1) (undo-tree-id10512 . -9) (undo-tree-id10513 . -9) 22) nil (23732 47586 471123 128000) 0 nil]) ((24 . 25)) nil (23732 47586 471126 383000) 0 nil]) ((#("::{Async, Future, Poll};" 0 3 (fontified t) 3 8 (fontified t face font-lock-type-face) 8 10 (fontified t) 10 16 (fontified t face font-lock-type-face) 16 18 (fontified t) 18 22 (fontified t face font-lock-type-face) 22 24 (fontified t)) . 24)) nil (23732 47586 471128 869000) 0 nil]) ((#("use regex::Regex;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 11 (fontified t) 11 16 (fontified t face font-lock-type-face) 16 18 (fontified t)) . 49)) nil (23732 47586 471131 355000) 0 nil]) ((#("use serde_json::Value;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 14 (fontified t face font-lock-constant-face) 14 16 (fontified t) 16 21 (fontified t face font-lock-type-face) 21 23 (fontified t)) . 98) (undo-tree-id10514 . -13) 111) nil (23732 47586 471137 400000) 0 nil]) ((#("::{}" 0 3 (fontified t) 3 4 (fontified t)) . 134) (undo-tree-id10515 . -3)) nil (23732 47586 471142 272000) 0 nil]) ((#("AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf" 0 9 (fontified t face font-lock-type-face) 9 11 (fontified t) 11 21 (fontified t face font-lock-type-face) 21 23 (fontified t) 23 28 (fontified t face font-lock-type-face) 28 30 (fontified t) 30 38 (fontified t face font-lock-type-face) 38 40 (fontified t) 40 49 (fontified t face font-lock-type-face)) . 137)) nil (23732 47586 471145 142000) 0 nil]) ((#(", Stream" 0 2 (fontified t) 2 8 (fontified t face font-lock-type-face)) . 212)) nil (23732 47586 471148 11000) 0 nil]) ((#("use tokio::net::TcpStream;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 11 (fontified t) 11 14 (fontified t face font-lock-constant-face) 14 16 (fontified t) 16 25 (fontified t face font-lock-type-face) 25 27 (fontified t)) . 189) (undo-tree-id10516 . -27) (undo-tree-id10517 . -27) (undo-tree-id10518 . -27) (undo-tree-id10519 . -27) (undo-tree-id10520 . -27) (undo-tree-id10521 . -27) (undo-tree-id10522 . -27) (undo-tree-id10523 . -27) (undo-tree-id10524 . -27) (undo-tree-id10525 . -27) (undo-tree-id10526 . -3) 192) nil (23732 47586 471172 284000) 0 nil]) ((#("struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Stream for Receiver {
    type Item = Value;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<Value>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            let re = Regex::new(r\"(?x)(?P<json>\\{.*\\})\").unwrap();

            if let Some(cap) = re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read])) {
                let json_string = cap[\"json\"].to_string();
                let json: Value = serde_json::from_str(&json_string.clone())?;
                return Ok(Async::Ready(Some(json)));
            }
            return Ok(Async::NotReady);
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
    channel: String,
}
impl Future for Sender {
    type Item = ();
    type Error = Box<Error>;
    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        println!(\"Subscribing to {}\", &self.channel);
        let subscribe_cmd = format!(
            \"*2\\r\\n$9\\r\\nsubscribe\\r\\n${}\\r\\n{}\\r\\n\",
            self.channel.len(),
            self.channel
        );
        let mut buffer = subscribe_cmd.as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn get_socket() -> impl Future<Item = TcpStream, Error = Box<Error>> {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    connection
        .and_then(|socket| Ok(socket))
        .map_err(|e| Box::new(e))
}

fn send_subscribe_cmd(tx: WriteHalf<TcpStream>, channel: String) {
    let sender = Sender { tx, channel };
    tokio::spawn(sender.map_err(|e| eprintln!(\"{}\", e)));
}

fn stream_from(timeline: String) -> impl Future<Item = Receiver, Error = warp::reject::Rejection> {
    get_socket()
        .and_then(move |socket| {
            let (rx, tx) = socket.split();
            send_subscribe_cmd(tx, format!(\"timeline:{}\", timeline));
            let stream_of_data_from_redis = Receiver { rx };
            Ok(stream_of_data_from_redis)
        })
        .and_then(|stream| Ok(stream))
        .map_err(|e| warp::reject::custom(e))
}
" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 15 (fontified t face font-lock-type-face) 15 22 (fontified t) 22 24 (fontified t face font-lock-variable-name-face) 24 26 (fontified t) 26 34 (fontified t face font-lock-type-face) 34 35 (fontified t) 35 44 (fontified t face font-lock-type-face) 44 49 (fontified t) 49 53 (fontified t face font-lock-keyword-face) 53 54 (fontified t) 54 60 (fontified t face font-lock-type-face) 60 61 (fontified t) 61 64 (fontified t face font-lock-keyword-face) 64 65 (fontified t) 65 73 (fontified t face font-lock-type-face) 73 80 (fontified t) 80 84 (fontified t face font-lock-keyword-face) 84 85 (fontified t) 85 89 (fontified t face font-lock-type-face) 89 92 (fontified t) 92 97 (fontified t face font-lock-type-face) 97 103 (fontified t) 103 107 (fontified t face font-lock-keyword-face) 107 108 (fontified t) 108 113 (fontified t face font-lock-type-face) 113 116 (fontified t) 116 121 (fontified t face font-lock-type-face) 121 128 (fontified t) 128 130 (fontified t face font-lock-keyword-face) 130 131 (fontified t) 131 135 (fontified t face font-lock-function-name-face) 135 137 (fontified t) 137 140 (fontified t face font-lock-keyword-face) 140 141 (fontified t) 141 145 (fontified t face font-lock-keyword-face) 145 148 (fontified t) 148 149 (syntax-table #2=(1) fontified t) 149 150 (fontified t) 150 154 (fontified t face font-lock-type-face) 154 155 (fontified t) 155 161 (fontified t face font-lock-type-face) 161 162 (fontified t) 162 167 (fontified t face font-lock-type-face) 167 170 (fontified t) 170 174 (fontified t face font-lock-type-face) 174 176 (fontified t) 176 181 (fontified t face font-lock-type-face) 181 193 (fontified t) 193 196 (fontified t face font-lock-keyword-face) 196 197 (fontified t) 197 200 (fontified t face font-lock-keyword-face) 200 201 (fontified t) 201 207 (fontified t face font-lock-variable-name-face) 207 210 (fontified t) 210 214 (fontified t face font-lock-preprocessor-face) 214 235 (fontified t) 235 240 (fontified t face font-lock-keyword-face) 240 241 (fontified t) 241 244 (fontified t face font-lock-keyword-face) 244 245 (fontified t) 245 250 (fontified t face font-lock-type-face) 250 252 (fontified t) 252 257 (fontified t face font-lock-type-face) 257 262 (fontified t) 262 276 (fontified t) 276 280 (face font-lock-keyword-face fontified t) 280 295 (fontified t) 295 298 (face font-lock-keyword-face fontified t) 298 306 (fontified t) 306 307 (face rust-question-mark-face fontified t) 307 310 (fontified t) 310 322 (fontified t) 322 325 (fontified t face font-lock-keyword-face) 325 326 (fontified t) 326 328 (fontified t face font-lock-variable-name-face) 328 331 (fontified t) 331 336 (fontified t face font-lock-type-face) 336 342 (fontified t) 342 343 (fontified t syntax-table #1# face font-lock-string-face) 343 364 (fontified t face font-lock-string-face) 364 365 (fontified t syntax-table #3=(15) face font-lock-string-face) 365 370 (fontified t) 370 377 (fontified t) 377 390 (fontified t) 390 392 (fontified t face font-lock-keyword-face) 392 393 (fontified t) 393 396 (fontified t face font-lock-keyword-face) 396 397 (fontified t) 397 401 (fontified t face font-lock-type-face) 401 422 (fontified t) 422 428 (fontified t face font-lock-type-face) 428 492 (fontified t) 492 495 (fontified t face font-lock-keyword-face) 495 496 (fontified t) 496 507 (fontified t face font-lock-variable-name-face) 507 514 (fontified t) 514 520 (fontified t face font-lock-string-face) 520 535 (fontified t) 535 551 (fontified t) 551 554 (fontified t face font-lock-keyword-face) 554 555 (fontified t) 555 559 (fontified t face font-lock-variable-name-face) 559 561 (fontified t) 561 566 (fontified t face font-lock-type-face) 566 569 (fontified t) 569 579 (fontified t face font-lock-constant-face) 579 611 (fontified t) 611 612 (fontified t face rust-question-mark-face) 612 613 (fontified t) 613 614 (fontified t) 614 630 (fontified t) 630 636 (fontified t face font-lock-keyword-face) 636 637 (fontified t) 637 639 (fontified t face font-lock-type-face) 639 640 (fontified t) 640 645 (fontified t face font-lock-type-face) 645 647 (fontified t) 647 652 (fontified t face font-lock-type-face) 652 653 (fontified t) 653 657 (fontified t face font-lock-type-face) 657 667 (fontified t) 667 693 (fontified t) 693 699 (fontified t face font-lock-keyword-face) 699 700 (fontified t) 700 702 (fontified t face font-lock-type-face) 702 703 (fontified t) 703 708 (fontified t face font-lock-type-face) 708 710 (fontified t) 710 718 (fontified t face font-lock-type-face) 718 739 (fontified t) 739 745 (fontified t face font-lock-keyword-face) 745 746 (fontified t) 746 748 (fontified t face font-lock-type-face) 748 749 (fontified t) 749 752 (fontified t face font-lock-type-face) 752 754 (fontified t face font-lock-type-face) 754 756 (fontified t) 756 764 (fontified t face font-lock-type-face) 764 767 (fontified t) 767 776 (fontified t) 776 782 (fontified t face font-lock-keyword-face) 782 783 (fontified t) 783 789 (fontified t face font-lock-type-face) 789 796 (fontified t) 796 798 (fontified t face font-lock-variable-name-face) 798 800 (fontified t) 800 809 (fontified t face font-lock-type-face) 809 810 (fontified t) 810 819 (face font-lock-type-face fontified t) 819 822 (fontified t) 822 826 (fontified t) 826 833 (fontified t face font-lock-variable-name-face) 833 835 (fontified t) 835 841 (fontified t face font-lock-type-face) 841 845 (fontified t) 845 849 (fontified t face font-lock-keyword-face) 849 850 (fontified t) 850 856 (fontified t face font-lock-type-face) 856 857 (fontified t) 857 860 (fontified t face font-lock-keyword-face) 860 861 (fontified t) 861 867 (fontified t face font-lock-type-face) 867 874 (fontified t) 874 878 (fontified t face font-lock-keyword-face) 878 879 (fontified t) 879 883 (fontified t face font-lock-type-face) 883 894 (fontified t) 894 898 (fontified t face font-lock-keyword-face) 898 899 (fontified t) 899 904 (fontified t face font-lock-type-face) 904 907 (fontified t) 907 910 (fontified t face font-lock-type-face) 910 911 (fontified t) 911 916 (fontified t face font-lock-type-face) 916 923 (fontified t) 923 925 (fontified t face font-lock-keyword-face) 925 926 (fontified t) 926 930 (fontified t face font-lock-function-name-face) 930 932 (fontified t) 932 935 (fontified t face font-lock-keyword-face) 935 936 (fontified t) 936 940 (fontified t face font-lock-keyword-face) 940 943 (fontified t) 943 944 (fontified t syntax-table #2#) 944 945 (fontified t) 945 949 (fontified t face font-lock-type-face) 949 950 (fontified t) 950 954 (fontified t face font-lock-type-face) 954 956 (fontified t) 956 960 (fontified t face font-lock-type-face) 960 962 (fontified t) 962 966 (fontified t face font-lock-type-face) 966 968 (fontified t) 968 973 (fontified t face font-lock-type-face) 973 985 (fontified t) 985 993 (fontified t face rust-builtin-formatting-macro-face) 993 994 (fontified t) 994 1010 (fontified t face font-lock-string-face) 1010 1012 (fontified t face rust-string-interpolation-face) 1012 1013 (fontified t face font-lock-string-face) 1013 1016 (fontified t) 1016 1020 (fontified t face font-lock-keyword-face) 1020 1039 (fontified t) 1039 1042 (fontified t face font-lock-keyword-face) 1042 1043 (fontified t) 1043 1056 (fontified t face font-lock-variable-name-face) 1056 1059 (fontified t) 1059 1062 (fontified t face rust-builtin-formatting-macro-face) 1062 1066 (fontified t face rust-builtin-formatting-macro-face) 1066 1068 (fontified t) 1068 1080 (fontified t) 1080 1107 (fontified t face font-lock-string-face) 1107 1109 (fontified t face rust-string-interpolation-face) 1109 1113 (fontified t face font-lock-string-face) 1113 1114 (fontified t face rust-string-interpolation-face) 1114 1115 (fontified t face rust-string-interpolation-face) 1115 1120 (fontified t face font-lock-string-face) 1120 1122 (fontified t) 1122 1134 (fontified t) 1134 1138 (fontified t face font-lock-keyword-face) 1138 1166 (fontified t) 1166 1167 (fontified t face font-lock-keyword-face) 1167 1170 (fontified t face font-lock-keyword-face) 1170 1179 (fontified t) 1179 1198 (fontified t) 1198 1201 (fontified t face font-lock-keyword-face) 1201 1202 (fontified t) 1202 1205 (fontified t face font-lock-keyword-face) 1205 1206 (fontified t) 1206 1212 (fontified t face font-lock-variable-name-face) 1212 1249 (fontified t) 1249 1253 (fontified t face font-lock-keyword-face) 1253 1267 (fontified t) 1267 1269 (fontified t) 1269 1272 (fontified t face font-lock-keyword-face) 1272 1280 (fontified t) 1280 1281 (fontified t face rust-question-mark-face) 1281 1283 (fontified t) 1283 1291 (fontified t) 1291 1297 (fontified t face font-lock-keyword-face) 1297 1298 (fontified t) 1298 1300 (fontified t face font-lock-type-face) 1300 1301 (fontified t) 1301 1306 (fontified t face font-lock-type-face) 1306 1308 (fontified t) 1308 1316 (fontified t face font-lock-type-face) 1316 1322 (fontified t) 1322 1325 (fontified t) 1325 1328 (fontified t) 1328 1330 (fontified t face font-lock-keyword-face) 1330 1331 (fontified t) 1331 1341 (fontified t face font-lock-function-name-face) 1341 1345 (fontified t) 1345 1346 (fontified t syntax-table #2#) 1346 1347 (fontified t) 1347 1351 (fontified t face font-lock-keyword-face) 1351 1352 (fontified t) 1352 1358 (fontified t face font-lock-type-face) 1358 1359 (fontified t) 1359 1363 (fontified t face font-lock-type-face) 1363 1366 (fontified t) 1366 1375 (fontified t face font-lock-type-face) 1375 1377 (fontified t) 1377 1382 (fontified t face font-lock-type-face) 1382 1385 (fontified t) 1385 1388 (fontified t face font-lock-type-face) 1388 1389 (fontified t) 1389 1394 (fontified t face font-lock-type-face) 1394 1403 (fontified t) 1403 1406 (fontified t face font-lock-keyword-face) 1406 1407 (fontified t) 1407 1414 (fontified t face font-lock-variable-name-face) 1414 1417 (fontified t) 1417 1433 (fontified t face font-lock-string-face) 1433 1449 (fontified t) 1449 1474 (fontified t face font-lock-string-face) 1474 1481 (fontified t) 1481 1484 (fontified t face font-lock-keyword-face) 1484 1485 (fontified t) 1485 1495 (fontified t face font-lock-variable-name-face) 1495 1498 (fontified t) 1498 1507 (fontified t face font-lock-type-face) 1507 1570 (fontified t) 1570 1572 (fontified t face font-lock-type-face) 1572 1603 (fontified t) 1603 1606 (fontified t face font-lock-type-face) 1606 1616 (fontified t) 1616 1618 (fontified t) 1618 1619 (fontified t) 1619 1621 (fontified t face font-lock-keyword-face) 1621 1622 (fontified t) 1622 1640 (fontified t face font-lock-function-name-face) 1640 1641 (fontified t) 1641 1643 (fontified t face font-lock-variable-name-face) 1643 1645 (fontified t) 1645 1654 (fontified t face font-lock-type-face) 1654 1655 (fontified t) 1655 1664 (fontified t face font-lock-type-face) 1664 1667 (fontified t) 1667 1674 (fontified t face font-lock-variable-name-face) 1674 1676 (fontified t) 1676 1679 (fontified t face font-lock-type-face) 1679 1682 (fontified t face font-lock-type-face) 1682 1686 (fontified t) 1686 1690 (fontified t) 1690 1693 (fontified t face font-lock-keyword-face) 1693 1694 (fontified t) 1694 1700 (fontified t face font-lock-variable-name-face) 1700 1703 (fontified t) 1703 1709 (fontified t face font-lock-type-face) 1709 1715 (fontified t) 1715 1731 (fontified t) 1731 1736 (fontified t face font-lock-constant-face) 1736 1763 (fontified t) 1763 1772 (fontified t face rust-builtin-formatting-macro-face) 1772 1773 (fontified t) 1773 1774 (fontified t face font-lock-string-face) 1774 1776 (fontified t face rust-string-interpolation-face) 1776 1777 (fontified t face font-lock-string-face) 1777 1788 (fontified t) 1788 1790 (fontified t face font-lock-keyword-face) 1790 1791 (fontified t) 1791 1802 (fontified t face font-lock-function-name-face) 1802 1803 (fontified t) 1803 1811 (fontified t face font-lock-variable-name-face) 1811 1813 (fontified t) 1813 1819 (fontified t face font-lock-type-face) 1819 1822 (fontified t) 1822 1823 (fontified t syntax-table #2#) 1823 1824 (fontified t) 1824 1825 (fontified t face font-lock-keyword-face) 1825 1828 (face font-lock-keyword-face fontified t) 1828 1829 (fontified t) 1829 1835 (face font-lock-type-face fontified t) 1835 1836 (fontified t) 1836 1840 (face font-lock-type-face fontified t) 1840 1843 (fontified t) 1843 1851 (face font-lock-type-face fontified t) 1851 1853 (fontified t) 1853 1858 (face font-lock-type-face fontified t) 1858 1861 (fontified t) 1861 1865 (face font-lock-constant-face fontified t) 1865 1867 (fontified t) 1867 1873 (face font-lock-constant-face fontified t) 1873 1875 (fontified t) 1875 1884 (face font-lock-type-face fontified t) 1884 1888 (fontified t) 1888 1923 (fontified t) 1923 1927 (fontified t face font-lock-keyword-face) 1927 1951 (fontified t) 1951 1954 (fontified t face font-lock-keyword-face) 1954 2017 (fontified t) 2017 2024 (fontified t face rust-builtin-formatting-macro-face) 2024 2025 (fontified t) 2025 2035 (fontified t face font-lock-string-face) 2035 2037 (fontified t face rust-string-interpolation-face) 2037 2038 (fontified t face font-lock-string-face) 2038 2064 (fontified t) 2064 2067 (fontified t face font-lock-keyword-face) 2067 2068 (fontified t) 2068 2093 (fontified t face font-lock-variable-name-face) 2093 2096 (fontified t) 2096 2104 (fontified t face font-lock-type-face) 2104 2118 (fontified t) 2118 2125 (fontified t) 2125 2127 (fontified t face font-lock-type-face) 2127 2155 (fontified t) 2155 2193 (fontified t) 2193 2195 (fontified t face font-lock-type-face) 2195 2215 (fontified t) 2215 2226 (fontified t) 2226 2230 (fontified t face font-lock-constant-face) 2230 2232 (fontified t) 2232 2238 (fontified t face font-lock-constant-face) 2238 2251 (fontified t) 2251 2253 (fontified t)) . 251) (undo-tree-id10527 . -2252) (undo-tree-id10528 . -9) (undo-tree-id10529 . -2252) (undo-tree-id10530 . -9) (undo-tree-id10531 . -2252) (undo-tree-id10532 . -1727) (undo-tree-id10533 . -2252) 2503 (t 23732 47355 407844 701000)) nil (23732 47586 471190 904000) 0 nil]) ((8 . 12) (5 . 8) (1 . 5) (1 . 2)) nil (23732 47355 342148 900000) 0 nil]) ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id10270 . 1)) nil (23732 47355 342164 189000) 0 nil]) ((1 . 2) 29) nil (23732 47355 342168 449000) 0 nil]) ((#("                    .unwrap_or_else(|| return Err);
" 0 21 (fontified t) 21 35 (fontified t) 35 39 (fontified t) 39 45 (fontified t face font-lock-keyword-face) 45 46 (fontified t) 46 49 (fontified t face font-lock-type-face) 49 51 (fontified t) 51 52 (fontified t)) . 853) (undo-tree-id10271 . -50) 903) nil (23732 47355 342173 730000) 0 nil]) ((850 . 852)) nil (23732 47355 342176 581000) 0 nil] [nil nil ((888 . 889)) ((#("_" 0 1 (fontified t)) . 888) (undo-tree-id10248 . -1) (undo-tree-id10249 . -1) (undo-tree-id10250 . -1) (undo-tree-id10251 . -1) (undo-tree-id10252 . -1) (undo-tree-id10253 . -1) (undo-tree-id10254 . -1) (undo-tree-id10255 . -1) (undo-tree-id10256 . -1) (undo-tree-id10257 . -1) (undo-tree-id10258 . -1) (undo-tree-id10259 . -1) (undo-tree-id10260 . -1) (undo-tree-id10261 . -1) (undo-tree-id10262 . -1) (undo-tree-id10263 . -1) (undo-tree-id10264 . -1) (undo-tree-id10265 . -1) (undo-tree-id10266 . -1) (undo-tree-id10267 . -1) (undo-tree-id10268 . -1) (undo-tree-id10269 . -1)) (23732 46877 279427 493000) 0 nil]) ((901 . 902)) nil (23732 46877 285955 656000) 0 nil]) ((897 . 900) (#("O" 0 1 (fontified t face font-lock-type-face)) . -897) (undo-tree-id10232 . -1) (undo-tree-id10233 . -1) (undo-tree-id10234 . -1) (undo-tree-id10235 . -1) (undo-tree-id10236 . -1) (#("k" 0 1 (fontified t face font-lock-type-face)) . -898) (undo-tree-id10237 . -1) (undo-tree-id10238 . -1) (undo-tree-id10239 . -1) 899 (889 . 899) (887 . 889) (886 . 888) (#("(" 0 1 (fontified nil)) . -886) (886 . 887) (872 . 886) (#("un" 0 2 (fontified t)) . -872) (undo-tree-id10240 . -2) 874 (872 . 874) (#("expect(\"we just validated the JSON.\");" 0 7 (fontified t) 7 36 (fontified t face font-lock-string-face) 36 38 (fontified t)) . 872) (undo-tree-id10241 . -1) (undo-tree-id10242 . -1) (undo-tree-id10243 . -6) (undo-tree-id10244 . -7) (undo-tree-id10245 . -8)) nil (23732 46877 279536 571000) 0 nil]) ((#("Result, " 0 6 (fontified t face font-lock-type-face) 6 8 (fontified t)) . 102)) nil (23732 46877 279552 821000) 0 nil]) ((#("}" 0 1 (fontified nil)) . 115) (#("{" 0 1 (fontified t)) . -102) (undo-tree-id10246 . -1) (undo-tree-id10247 . -1) 103 (t 23732 45050 359991 616000)) nil (23732 46877 279569 652000) 0 nil]) ((1 . 6589) (#("use futures::{Async, Future, Poll};
use regex::Regex;
use serde_derive::Deserialize;
use serde_json::{Result, Value};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use warp::{path, Filter, Stream};

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Stream for Receiver {
    type Item = Value;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<Value>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            let re = Regex::new(r\"(?x)(?P<json>\\{.*\\})\").unwrap();

            if let Some(cap) = re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read])) {
                let json_string = cap[\"json\"].to_string();
                let json: Value = serde_json::from_str(&json_string.clone())
                    .expect(\"we just validated the JSON.\");
                return Ok(Async::Ready(Some(json)));
            }
            return Ok(Async::NotReady);
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
    channel: String,
}
impl Future for Sender {
    type Item = ();
    type Error = Box<Error>;
    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        println!(\"Subscribing to {}\", &self.channel);
        let subscribe_cmd = format!(
            \"*2\\r\\n$9\\r\\nsubscribe\\r\\n${}\\r\\n{}\\r\\n\",
            self.channel.len(),
            self.channel
        );
        let mut buffer = subscribe_cmd.as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn get_socket() -> impl Future<Item = TcpStream, Error = Box<Error>> {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    connection
        .and_then(|socket| Ok(socket))
        .map_err(|e| Box::new(e))
}

fn send_subscribe_cmd(tx: WriteHalf<TcpStream>, channel: String) {
    let sender = Sender { tx, channel };
    tokio::spawn(sender.map_err(|e| eprintln!(\"{}\", e)));
}

fn stream_from(timeline: String) -> impl Future<Item = Receiver, Error = warp::reject::Rejection> {
    get_socket()
        .and_then(move |socket| {
            let (rx, tx) = socket.split();
            send_subscribe_cmd(tx, format!(\"timeline:{}\", timeline));
            let stream_of_data_from_redis = Receiver { rx };
            Ok(stream_of_data_from_redis)
        })
        .and_then(|stream| Ok(stream))
        .map_err(|e| warp::reject::custom(e))
}

#[derive(Deserialize)]
struct Media {
    only_media: String,
}
#[derive(Deserialize)]
struct Hashtag {
    tag: String,
}
#[derive(Deserialize)]
struct List {
    list: String,
}

fn main() {
    use warp::path;
    let base = path!(\"api\" / \"v1\" / \"streaming\");

    // GET /api/v1/streaming/user
    let user_timeline = base
        .and(path(\"user\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| stream_from(\"1\".to_string()));

    // GET /api/v1/streaming/user/notification
    let user_timeline_notifications = base
        .and(path!(\"user\" / \"notification\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| {
            let full_stream = stream_from(\"1\".to_string());
            // TODO: filter stream to just have notifications
            full_stream
        });

    // GET /api/v1/streaming/public
    let public_timeline = base
        .and(path(\"public\"))
        .and(path::end())
        .map(|| stream_from(\"public\".to_string()));

    // GET /api/v1/streaming/public?only_media=true
    let public_timeline_media = base
        .and(path(\"public\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                stream_from(\"public:media\".to_string())
            } else {
                stream_from(\"public\".to_string())
            }
        });

    // GET /api/v1/streaming/public/local
    let local_timeline = base
        .and(path!(\"public\" / \"local\"))
        .and(path::end())
        .map(|| stream_from(\"public:local\".to_string()));

    // GET /api/v1/streaming/public/local?only_media=true
    let local_timeline_media = base
        .and(path!(\"public\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                stream_from(\"public:local:media\".to_string())
            } else {
                stream_from(\"public:local\".to_string())
            }
        });

    // GET /api/v1/streaming/direct
    let direct_timeline = base
        .and(path(\"direct\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| stream_from(\"direct:1\".to_string()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag
    let hashtag_timeline = base
        .and(path(\"hashtag\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| stream_from(format!(\"hashtag:{}\", q.tag)));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag
    let hashtag_timeline_local = base
        .and(path!(\"hashtag\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| stream_from(format!(\"hashtag:{}:local\", q.tag)));

    // GET /api/v1/streaming/list?list=:list_id
    let list_timeline = base
        .and(path(\"list\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: List| stream_from(format!(\"list:{}\", q.list)));

    let routes = user_timeline
        .or(user_timeline_notifications)
        .unify()
        .or(public_timeline_media)
        .unify()
        .or(public_timeline)
        .unify()
        .or(local_timeline_media)
        .unify()
        .or(local_timeline)
        .unify()
        .or(direct_timeline)
        .unify()
        .or(hashtag_timeline)
        .unify()
        .or(hashtag_timeline_local)
        .unify()
        .or(list_timeline)
        .unify()
        .and_then(|event_stream| event_stream)
        .and(warp::sse())
        .map(|event_stream: Receiver, sse: warp::sse::Sse| {
            sse.reply(warp::sse::keep(
                event_stream.map(|item| {
                    let payload = item[\"payload\"].clone();
                    let event = item[\"event\"].clone();
                    (warp::sse::event(event),
                     warp::sse::data(payload))
                }),
                None,
            ))
        });

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 19 (fontified t face font-lock-type-face) 19 21 (fontified t) 21 27 (fontified t face font-lock-type-face) 27 29 (fontified t) 29 33 (fontified t face font-lock-type-face) 33 35 (fontified t) 35 36 (fontified t) 36 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 45 (fontified t face font-lock-constant-face) 45 47 (fontified t) 47 52 (fontified t face font-lock-type-face) 52 54 (fontified t) 54 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t) 58 70 (fontified t face font-lock-constant-face) 70 72 (fontified t) 72 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 88 (fontified t face font-lock-keyword-face) 88 89 (fontified t) 89 99 (fontified t face font-lock-constant-face) 99 102 (fontified t) 102 108 (fontified t face font-lock-type-face) 108 110 (fontified t) 110 115 (fontified t face font-lock-type-face) 115 118 (fontified t) 118 121 (fontified t face font-lock-keyword-face) 121 122 (fontified t) 122 127 (fontified t face font-lock-constant-face) 127 129 (fontified t) 129 131 (fontified t face font-lock-constant-face) 131 134 (fontified t) 134 143 (fontified t face font-lock-type-face) 143 145 (fontified t) 145 155 (fontified t face font-lock-type-face) 155 157 (fontified t) 157 162 (fontified t face font-lock-type-face) 162 164 (fontified t) 164 172 (fontified t face font-lock-type-face) 172 174 (fontified t) 174 183 (fontified t face font-lock-type-face) 183 186 (fontified t) 186 189 (fontified t face font-lock-keyword-face) 189 190 (fontified t) 190 195 (fontified t face font-lock-constant-face) 195 197 (fontified t) 197 200 (fontified t face font-lock-constant-face) 200 202 (fontified t) 202 211 (fontified t face font-lock-type-face) 211 213 (fontified t) 213 216 (fontified t face font-lock-keyword-face) 216 217 (fontified t) 217 221 (fontified t face font-lock-constant-face) 221 230 (fontified t) 230 236 (fontified t face font-lock-type-face) 236 238 (fontified t) 238 244 (fontified t face font-lock-type-face) 244 248 (fontified t) 248 254 (fontified t face font-lock-keyword-face) 254 255 (fontified t) 255 263 (fontified t face font-lock-type-face) 263 270 (fontified t) 270 272 (fontified t face font-lock-variable-name-face) 272 274 (fontified t) 274 282 (fontified t face font-lock-type-face) 282 283 (fontified t) 283 292 (fontified t face font-lock-type-face) 292 297 (fontified t) 297 301 (fontified t face font-lock-keyword-face) 301 302 (fontified t) 302 308 (fontified t face font-lock-type-face) 308 309 (fontified t) 309 312 (fontified t face font-lock-keyword-face) 312 313 (fontified t) 313 321 (fontified t face font-lock-type-face) 321 324 (fontified t) 324 328 (fontified t) 328 332 (fontified t face font-lock-keyword-face) 332 333 (fontified t) 333 337 (fontified t face font-lock-type-face) 337 340 (fontified t) 340 345 (fontified t face font-lock-type-face) 345 346 (fontified t) 346 347 (fontified t) 347 351 (fontified t) 351 355 (fontified t face font-lock-keyword-face) 355 356 (fontified t) 356 361 (fontified t face font-lock-type-face) 361 364 (fontified t) 364 369 (fontified t face font-lock-type-face) 369 372 (fontified t) 372 376 (fontified t) 376 378 (fontified t face font-lock-keyword-face) 378 379 (fontified t) 379 383 (fontified t face font-lock-function-name-face) 383 385 (fontified t) 385 388 (fontified t face font-lock-keyword-face) 388 389 (fontified t) 389 393 (fontified t face font-lock-keyword-face) 393 396 (fontified t) 396 397 (syntax-table #2# fontified t) 397 398 (fontified t) 398 402 (fontified t face font-lock-type-face) 402 403 (fontified t) 403 409 (fontified t face font-lock-type-face) 409 410 (fontified t) 410 415 (fontified t face font-lock-type-face) 415 418 (fontified t) 418 422 (fontified t face font-lock-type-face) 422 424 (fontified t) 424 429 (fontified t face font-lock-type-face) 429 433 (fontified t) 433 441 (fontified t) 441 444 (fontified t face font-lock-keyword-face) 444 445 (fontified t) 445 448 (fontified t face font-lock-keyword-face) 448 449 (fontified t) 449 455 (fontified t face font-lock-variable-name-face) 455 458 (fontified t) 458 462 (fontified t face font-lock-preprocessor-face) 462 483 (fontified t) 483 488 (fontified t face font-lock-keyword-face) 488 489 (fontified t) 489 492 (fontified t face font-lock-keyword-face) 492 493 (fontified t) 493 498 (fontified t face font-lock-type-face) 498 500 (fontified t) 500 505 (fontified t face font-lock-type-face) 505 524 (fontified t) 524 528 (fontified t face font-lock-keyword-face) 528 533 (fontified t) 533 543 (fontified t) 543 546 (fontified t face font-lock-keyword-face) 546 554 (fontified t) 554 555 (fontified t face rust-question-mark-face) 555 558 (fontified t) 558 570 (fontified t) 570 573 (fontified t face font-lock-keyword-face) 573 574 (fontified t) 574 576 (fontified t face font-lock-variable-name-face) 576 579 (fontified t) 579 584 (fontified t face font-lock-type-face) 584 590 (fontified t) 590 591 (syntax-table #1# fontified t face font-lock-string-face) 591 612 (fontified t face font-lock-string-face) 612 613 (syntax-table #3# fontified t face font-lock-string-face) 613 625 (fontified t) 625 626 (fontified t) 626 638 (fontified t) 638 640 (fontified t face font-lock-keyword-face) 640 641 (fontified t) 641 644 (fontified t face font-lock-keyword-face) 644 645 (fontified t) 645 649 (fontified t face font-lock-type-face) 649 670 (fontified t) 670 676 (fontified t face font-lock-type-face) 676 724 (fontified t) 724 740 (fontified t) 740 743 (fontified t face font-lock-keyword-face) 743 744 (fontified t) 744 755 (fontified t face font-lock-variable-name-face) 755 762 (fontified t) 762 768 (fontified t face font-lock-string-face) 768 782 (fontified t) 782 783 (fontified t) 783 799 (fontified t) 799 802 (fontified t face font-lock-keyword-face) 802 803 (fontified t) 803 807 (fontified t face font-lock-variable-name-face) 807 809 (fontified t) 809 814 (fontified t face font-lock-type-face) 814 817 (fontified t) 817 827 (fontified t face font-lock-constant-face) 827 847 (fontified t) 847 859 (fontified t) 859 860 (fontified t) 860 888 (fontified t) 888 917 (fontified t face font-lock-string-face) 917 920 (fontified t) 920 933 (fontified t) 933 936 (fontified t) 936 942 (fontified t face font-lock-keyword-face) 942 943 (fontified t) 943 945 (fontified t face font-lock-type-face) 945 946 (fontified t) 946 951 (fontified t face font-lock-type-face) 951 953 (fontified t) 953 958 (fontified t face font-lock-type-face) 958 959 (fontified t) 959 963 (fontified t face font-lock-type-face) 963 972 (fontified t) 972 973 (fontified t) 973 986 (fontified t) 986 987 (fontified t) 987 999 (fontified t) 999 1005 (fontified t face font-lock-keyword-face) 1005 1006 (fontified t) 1006 1008 (fontified t face font-lock-type-face) 1008 1009 (fontified t) 1009 1014 (fontified t face font-lock-type-face) 1014 1016 (fontified t) 1016 1024 (fontified t face font-lock-type-face) 1024 1026 (fontified t) 1026 1027 (fontified t) 1027 1037 (fontified t) 1037 1045 (fontified t) 1045 1051 (fontified t face font-lock-keyword-face) 1051 1052 (fontified t) 1052 1054 (fontified t face font-lock-type-face) 1054 1055 (fontified t) 1055 1060 (fontified t face font-lock-type-face) 1060 1062 (fontified t) 1062 1070 (fontified t face font-lock-type-face) 1070 1082 (fontified t) 1082 1088 (fontified t face font-lock-keyword-face) 1088 1089 (fontified t) 1089 1095 (fontified t face font-lock-type-face) 1095 1102 (fontified t) 1102 1104 (fontified t face font-lock-variable-name-face) 1104 1106 (fontified t) 1106 1115 (fontified t face font-lock-type-face) 1115 1116 (fontified t) 1116 1125 (fontified t face font-lock-type-face) 1125 1132 (fontified t) 1132 1136 (fontified t face font-lock-variable-name-face) 1136 1139 (fontified t face font-lock-variable-name-face) 1139 1140 (fontified t) 1140 1141 (fontified t) 1141 1147 (fontified t face font-lock-type-face) 1147 1149 (fontified t) 1149 1151 (fontified t) 1151 1155 (fontified t face font-lock-keyword-face) 1155 1156 (fontified t) 1156 1162 (fontified t face font-lock-type-face) 1162 1163 (fontified t) 1163 1166 (fontified t face font-lock-keyword-face) 1166 1167 (fontified t) 1167 1173 (fontified t face font-lock-type-face) 1173 1180 (fontified t) 1180 1184 (fontified t face font-lock-keyword-face) 1184 1185 (fontified t) 1185 1189 (fontified t face font-lock-type-face) 1189 1200 (fontified t) 1200 1204 (fontified t face font-lock-keyword-face) 1204 1205 (fontified t) 1205 1210 (fontified t face font-lock-type-face) 1210 1213 (fontified t) 1213 1216 (fontified t face font-lock-type-face) 1216 1217 (fontified t) 1217 1222 (fontified t face font-lock-type-face) 1222 1229 (fontified t) 1229 1231 (fontified t face font-lock-keyword-face) 1231 1232 (fontified t) 1232 1236 (fontified t face font-lock-function-name-face) 1236 1238 (fontified t) 1238 1239 (fontified t face font-lock-keyword-face) 1239 1241 (fontified t face font-lock-keyword-face) 1241 1242 (fontified t) 1242 1246 (fontified t face font-lock-keyword-face) 1246 1249 (fontified t) 1249 1250 (fontified t syntax-table #2#) 1250 1251 (fontified t) 1251 1255 (fontified t face font-lock-type-face) 1255 1256 (fontified t) 1256 1260 (fontified t face font-lock-type-face) 1260 1262 (fontified t) 1262 1266 (fontified t face font-lock-type-face) 1266 1268 (fontified t) 1268 1272 (fontified t face font-lock-type-face) 1272 1274 (fontified t) 1274 1279 (fontified t face font-lock-type-face) 1279 1283 (fontified t) 1283 1291 (fontified t) 1291 1294 (fontified t face rust-builtin-formatting-macro-face) 1294 1298 (fontified t face rust-builtin-formatting-macro-face) 1298 1299 (fontified t face rust-builtin-formatting-macro-face) 1299 1300 (fontified t) 1300 1316 (fontified t face font-lock-string-face) 1316 1318 (fontified t face rust-string-interpolation-face) 1318 1319 (fontified t face font-lock-string-face) 1319 1322 (fontified t) 1322 1326 (fontified t face font-lock-keyword-face) 1326 1328 (fontified t) 1328 1337 (fontified t) 1337 1345 (fontified t) 1345 1348 (fontified t face font-lock-keyword-face) 1348 1349 (fontified t) 1349 1360 (fontified t face font-lock-variable-name-face) 1360 1362 (face font-lock-variable-name-face fontified t) 1362 1365 (fontified t) 1365 1371 (face rust-builtin-formatting-macro-face fontified t) 1371 1372 (face rust-builtin-formatting-macro-face fontified t) 1372 1374 (fontified t) 1374 1386 (fontified t) 1386 1389 (fontified t face font-lock-string-face) 1389 1413 (fontified t face font-lock-string-face) 1413 1415 (fontified t face font-lock-string-face) 1415 1419 (fontified t face font-lock-string-face) 1419 1421 (fontified t face font-lock-string-face) 1421 1426 (fontified t face font-lock-string-face) 1426 1428 (fontified t) 1428 1440 (fontified t) 1440 1444 (fontified t face font-lock-keyword-face) 1444 1457 (fontified t) 1457 1460 (fontified t) 1460 1472 (fontified t) 1472 1473 (fontified t face font-lock-keyword-face) 1473 1476 (fontified t face font-lock-keyword-face) 1476 1485 (fontified t) 1485 1504 (fontified t) 1504 1507 (fontified t face font-lock-keyword-face) 1507 1508 (fontified t) 1508 1511 (fontified t face font-lock-keyword-face) 1511 1512 (fontified t) 1512 1513 (fontified t face font-lock-variable-name-face) 1513 1518 (fontified t face font-lock-variable-name-face) 1518 1527 (fontified t) 1527 1547 (fontified t) 1547 1555 (fontified t) 1555 1559 (fontified t face font-lock-keyword-face) 1559 1575 (fontified t) 1575 1578 (fontified t face font-lock-keyword-face) 1578 1586 (fontified t) 1586 1587 (fontified t face rust-question-mark-face) 1587 1597 (fontified t) 1597 1603 (fontified t face font-lock-keyword-face) 1603 1604 (fontified t) 1604 1606 (fontified t face font-lock-type-face) 1606 1607 (fontified t) 1607 1612 (fontified t face font-lock-type-face) 1612 1614 (fontified t) 1614 1622 (fontified t face font-lock-type-face) 1622 1634 (fontified t) 1634 1636 (fontified t face font-lock-keyword-face) 1636 1637 (fontified t) 1637 1647 (fontified t face font-lock-function-name-face) 1647 1649 (fontified t) 1649 1651 (fontified t) 1651 1652 (syntax-table #2# fontified t) 1652 1653 (fontified t) 1653 1657 (fontified t face font-lock-keyword-face) 1657 1658 (fontified t) 1658 1664 (fontified t face font-lock-type-face) 1664 1665 (fontified t) 1665 1669 (fontified t face font-lock-type-face) 1669 1672 (fontified t) 1672 1681 (fontified t face font-lock-type-face) 1681 1683 (fontified t) 1683 1688 (fontified t face font-lock-type-face) 1688 1691 (fontified t) 1691 1694 (fontified t face font-lock-type-face) 1694 1695 (fontified t) 1695 1700 (fontified t face font-lock-type-face) 1700 1705 (fontified t) 1705 1709 (fontified t) 1709 1712 (fontified t face font-lock-keyword-face) 1712 1713 (fontified t) 1713 1720 (fontified t face font-lock-variable-name-face) 1720 1723 (fontified t) 1723 1739 (fontified t face font-lock-string-face) 1739 1755 (fontified t) 1755 1780 (fontified t face font-lock-string-face) 1780 1783 (fontified t) 1783 1787 (fontified t) 1787 1790 (fontified t face font-lock-keyword-face) 1790 1791 (fontified t) 1791 1801 (fontified t face font-lock-variable-name-face) 1801 1804 (fontified t) 1804 1813 (fontified t face font-lock-type-face) 1813 1837 (fontified t) 1837 1849 (fontified t) 1849 1874 (fontified t) 1874 1876 (fontified t) 1876 1878 (face font-lock-type-face fontified t) 1878 1888 (fontified t) 1888 1909 (fontified t) 1909 1912 (fontified t face font-lock-type-face) 1912 1925 (fontified t) 1925 1927 (fontified t face font-lock-keyword-face) 1927 1928 (fontified t) 1928 1946 (fontified t face font-lock-function-name-face) 1946 1947 (fontified t) 1947 1949 (fontified t face font-lock-variable-name-face) 1949 1951 (fontified t) 1951 1960 (fontified t face font-lock-type-face) 1960 1961 (fontified t) 1961 1970 (fontified t face font-lock-type-face) 1970 1973 (fontified t) 1973 1980 (fontified t face font-lock-variable-name-face) 1980 1982 (fontified t) 1982 1988 (fontified t face font-lock-type-face) 1988 1996 (fontified t) 1996 1999 (fontified t face font-lock-keyword-face) 1999 2000 (fontified t) 2000 2006 (fontified t face font-lock-variable-name-face) 2006 2009 (fontified t) 2009 2015 (fontified t face font-lock-type-face) 2015 2037 (fontified t) 2037 2042 (fontified t face font-lock-constant-face) 2042 2069 (fontified t) 2069 2078 (fontified t face rust-builtin-formatting-macro-face) 2078 2079 (fontified t) 2079 2080 (fontified t face font-lock-string-face) 2080 2082 (fontified t face rust-string-interpolation-face) 2082 2083 (fontified t face font-lock-string-face) 2083 2094 (fontified t) 2094 2096 (fontified t face font-lock-keyword-face) 2096 2097 (fontified t) 2097 2108 (fontified t face font-lock-function-name-face) 2108 2109 (fontified t) 2109 2117 (fontified t face font-lock-variable-name-face) 2117 2119 (fontified t) 2119 2125 (fontified t face font-lock-type-face) 2125 2128 (fontified t) 2128 2129 (syntax-table #2# fontified t) 2129 2130 (fontified t) 2130 2134 (fontified t face font-lock-keyword-face) 2134 2135 (fontified t) 2135 2141 (fontified t face font-lock-type-face) 2141 2142 (fontified t) 2142 2146 (fontified t face font-lock-type-face) 2146 2149 (fontified t) 2149 2157 (fontified t face font-lock-type-face) 2157 2159 (fontified t) 2159 2164 (fontified t face font-lock-type-face) 2164 2167 (fontified t) 2167 2171 (fontified t face font-lock-constant-face) 2171 2173 (fontified t) 2173 2179 (fontified t face font-lock-constant-face) 2179 2181 (fontified t) 2181 2190 (fontified t face font-lock-type-face) 2190 2229 (fontified t) 2229 2233 (fontified t face font-lock-keyword-face) 2233 2257 (fontified t) 2257 2260 (fontified t face font-lock-keyword-face) 2260 2323 (fontified t) 2323 2330 (fontified t face rust-builtin-formatting-macro-face) 2330 2331 (fontified t) 2331 2341 (fontified t face font-lock-string-face) 2341 2343 (fontified t face rust-string-interpolation-face) 2343 2344 (fontified t face font-lock-string-face) 2344 2370 (fontified t) 2370 2373 (fontified t face font-lock-keyword-face) 2373 2374 (fontified t) 2374 2388 (fontified t face font-lock-variable-name-face) 2388 2399 (face font-lock-variable-name-face fontified t) 2399 2402 (fontified t) 2402 2410 (face font-lock-type-face fontified t) 2410 2419 (fontified t) 2419 2431 (fontified t) 2431 2433 (fontified t face font-lock-type-face) 2433 2499 (fontified t) 2499 2501 (fontified t face font-lock-type-face) 2501 2532 (fontified t) 2532 2536 (fontified t face font-lock-constant-face) 2536 2538 (fontified t) 2538 2544 (fontified t face font-lock-constant-face) 2544 2560 (fontified t) 2560 2582 (fontified t face font-lock-preprocessor-face) 2582 2583 (fontified t) 2583 2589 (fontified t face font-lock-keyword-face) 2589 2590 (fontified t) 2590 2595 (fontified t face font-lock-type-face) 2595 2602 (fontified t) 2602 2612 (fontified t face font-lock-variable-name-face) 2612 2614 (fontified t) 2614 2620 (fontified t face font-lock-type-face) 2620 2624 (fontified t) 2624 2646 (fontified t face font-lock-preprocessor-face) 2646 2647 (fontified t) 2647 2653 (fontified t face font-lock-keyword-face) 2653 2654 (fontified t) 2654 2661 (fontified t face font-lock-type-face) 2661 2668 (fontified t) 2668 2671 (fontified t face font-lock-variable-name-face) 2671 2673 (fontified t) 2673 2679 (fontified t face font-lock-type-face) 2679 2683 (fontified t) 2683 2705 (fontified t face font-lock-preprocessor-face) 2705 2706 (fontified t) 2706 2712 (fontified t face font-lock-keyword-face) 2712 2713 (fontified t) 2713 2717 (fontified t face font-lock-type-face) 2717 2724 (fontified t) 2724 2728 (fontified t face font-lock-variable-name-face) 2728 2730 (fontified t) 2730 2736 (fontified t face font-lock-type-face) 2736 2741 (fontified t) 2741 2743 (fontified t face font-lock-keyword-face) 2743 2744 (fontified t) 2744 2748 (fontified t face font-lock-function-name-face) 2748 2757 (fontified t) 2757 2760 (fontified t face font-lock-keyword-face) 2760 2761 (fontified t) 2761 2765 (fontified t face font-lock-constant-face) 2765 2777 (fontified t) 2777 2780 (fontified t face font-lock-keyword-face) 2780 2781 (fontified t) 2781 2785 (fontified t face font-lock-variable-name-face) 2785 2788 (fontified t) 2788 2793 (fontified t face font-lock-preprocessor-face) 2793 2794 (fontified t) 2794 2799 (fontified t face font-lock-string-face) 2799 2802 (fontified t) 2802 2806 (fontified t face font-lock-string-face) 2806 2809 (fontified t) 2809 2820 (fontified t face font-lock-string-face) 2820 2828 (fontified t) 2828 2831 (fontified t face font-lock-comment-delimiter-face) 2831 2858 (fontified t face font-lock-comment-face) 2858 2862 (fontified t) 2862 2865 (fontified t face font-lock-keyword-face) 2865 2866 (fontified t) 2866 2879 (fontified t face font-lock-variable-name-face) 2879 2905 (fontified t) 2905 2909 (fontified t face font-lock-string-face) 2909 2910 (syntax-table #1# fontified t face font-lock-string-face) 2910 2911 (fontified t face font-lock-string-face) 2911 2919 (fontified t) 2919 2927 (fontified t) 2927 2931 (face font-lock-constant-face fontified t) 2931 2940 (fontified t) 2940 2948 (fontified t) 2948 2951 (fontified t face font-lock-comment-delimiter-face) 2951 2983 (fontified t face font-lock-comment-face) 2983 3011 (fontified t) 3011 3014 (fontified t face font-lock-string-face) 3014 3035 (fontified t) 3035 3038 (fontified t face font-lock-comment-delimiter-face) 3038 3078 (fontified t face font-lock-comment-face) 3078 3082 (fontified t) 3082 3085 (fontified t face font-lock-keyword-face) 3085 3086 (fontified t) 3086 3113 (fontified t face font-lock-variable-name-face) 3113 3134 (fontified t) 3134 3139 (fontified t face font-lock-preprocessor-face) 3139 3140 (fontified t) 3140 3144 (fontified t face font-lock-string-face) 3144 3145 (syntax-table #1# fontified t face font-lock-string-face) 3145 3146 (fontified t face font-lock-string-face) 3146 3149 (fontified t) 3149 3163 (fontified t face font-lock-string-face) 3163 3179 (fontified t) 3179 3183 (fontified t face font-lock-constant-face) 3183 3200 (fontified t) 3200 3203 (fontified t face font-lock-comment-delimiter-face) 3203 3235 (fontified t face font-lock-comment-face) 3235 3265 (fontified t) 3265 3268 (fontified t face font-lock-keyword-face) 3268 3269 (fontified t) 3269 3280 (fontified t face font-lock-variable-name-face) 3280 3295 (fontified t) 3295 3298 (fontified t face font-lock-string-face) 3298 3325 (fontified t) 3325 3328 (fontified t face font-lock-comment-delimiter-face) 3328 3375 (fontified t face font-lock-comment-face) 3375 3416 (fontified t) 3416 3419 (fontified t face font-lock-comment-delimiter-face) 3419 3440 (fontified t face font-lock-comment-face) 3440 3448 (face font-lock-comment-face fontified t) 3448 3452 (fontified t) 3452 3455 (fontified t face font-lock-keyword-face) 3455 3456 (fontified t) 3456 3471 (fontified t face font-lock-variable-name-face) 3471 3497 (fontified t) 3497 3505 (fontified t face font-lock-string-face) 3505 3521 (fontified t) 3521 3525 (fontified t face font-lock-constant-face) 3525 3562 (fontified t) 3562 3570 (fontified t face font-lock-string-face) 3570 3591 (fontified t) 3591 3594 (fontified t face font-lock-comment-delimiter-face) 3594 3639 (fontified t face font-lock-comment-face) 3639 3643 (fontified t) 3643 3646 (fontified t face font-lock-keyword-face) 3646 3647 (fontified t) 3647 3668 (fontified t face font-lock-variable-name-face) 3668 3694 (fontified t) 3694 3702 (fontified t face font-lock-string-face) 3702 3718 (fontified t) 3718 3722 (fontified t face font-lock-constant-face) 3722 3746 (fontified t) 3746 3750 (fontified t face font-lock-constant-face) 3750 3773 (fontified t) 3773 3774 (fontified t face font-lock-variable-name-face) 3774 3776 (fontified t) 3776 3781 (fontified t face font-lock-type-face) 3781 3797 (fontified t) 3797 3799 (fontified t face font-lock-keyword-face) 3799 3816 (fontified t) 3816 3819 (fontified t face font-lock-string-face) 3819 3839 (fontified t) 3839 3845 (fontified t face font-lock-string-face) 3845 3876 (fontified t) 3876 3890 (fontified t face font-lock-string-face) 3890 3918 (fontified t) 3918 3922 (fontified t face font-lock-keyword-face) 3922 3948 (fontified t) 3948 3953 (fontified t) 3953 3961 (face font-lock-string-face fontified t) 3961 3975 (fontified t) 3975 4006 (fontified t) 4006 4009 (fontified t face font-lock-comment-delimiter-face) 4009 4044 (fontified t face font-lock-comment-face) 4044 4048 (fontified t) 4048 4051 (fontified t face font-lock-keyword-face) 4051 4052 (fontified t) 4052 4066 (fontified t face font-lock-variable-name-face) 4066 4087 (fontified t) 4087 4092 (fontified t face font-lock-preprocessor-face) 4092 4093 (fontified t) 4093 4101 (fontified t face font-lock-string-face) 4101 4104 (fontified t) 4104 4111 (fontified t face font-lock-string-face) 4111 4127 (fontified t) 4127 4131 (fontified t face font-lock-constant-face) 4131 4168 (fontified t) 4168 4182 (fontified t face font-lock-string-face) 4182 4203 (fontified t) 4203 4206 (fontified t face font-lock-comment-delimiter-face) 4206 4257 (fontified t face font-lock-comment-face) 4257 4261 (fontified t) 4261 4264 (fontified t face font-lock-keyword-face) 4264 4265 (fontified t) 4265 4285 (fontified t face font-lock-variable-name-face) 4285 4306 (fontified t) 4306 4311 (fontified t face font-lock-preprocessor-face) 4311 4312 (fontified t) 4312 4320 (fontified t face font-lock-string-face) 4320 4323 (fontified t) 4323 4330 (fontified t face font-lock-string-face) 4330 4346 (fontified t) 4346 4350 (fontified t face font-lock-constant-face) 4350 4374 (fontified t) 4374 4378 (fontified t face font-lock-constant-face) 4378 4401 (fontified t) 4401 4402 (fontified t face font-lock-variable-name-face) 4402 4404 (fontified t) 4404 4409 (fontified t face font-lock-type-face) 4409 4425 (fontified t) 4425 4427 (fontified t face font-lock-keyword-face) 4427 4444 (fontified t) 4444 4447 (fontified t face font-lock-string-face) 4447 4467 (fontified t) 4467 4473 (fontified t face font-lock-string-face) 4473 4475 (fontified t) 4475 4476 (fontified t) 4476 4504 (fontified t) 4504 4524 (fontified t face font-lock-string-face) 4524 4552 (fontified t) 4552 4556 (fontified t face font-lock-keyword-face) 4556 4587 (fontified t) 4587 4601 (fontified t face font-lock-string-face) 4601 4646 (fontified t) 4646 4649 (fontified t face font-lock-comment-delimiter-face) 4649 4678 (fontified t face font-lock-comment-face) 4678 4682 (fontified t) 4682 4685 (fontified t face font-lock-keyword-face) 4685 4686 (fontified t) 4686 4701 (fontified t face font-lock-variable-name-face) 4701 4727 (fontified t) 4727 4735 (fontified t face font-lock-string-face) 4735 4751 (fontified t) 4751 4755 (fontified t face font-lock-constant-face) 4755 4772 (fontified t) 4772 4775 (fontified t face font-lock-comment-delimiter-face) 4775 4807 (fontified t face font-lock-comment-face) 4807 4835 (fontified t) 4835 4845 (fontified t face font-lock-string-face) 4845 4866 (fontified t) 4866 4869 (fontified t face font-lock-comment-delimiter-face) 4869 4912 (fontified t face font-lock-comment-face) 4912 4916 (fontified t) 4916 4919 (fontified t face font-lock-keyword-face) 4919 4920 (fontified t) 4920 4936 (fontified t face font-lock-variable-name-face) 4936 4962 (fontified t) 4962 4971 (fontified t face font-lock-string-face) 4971 4976 (fontified t) 4976 4987 (fontified t) 4987 4991 (face font-lock-constant-face fontified t) 4991 5002 (fontified t) 5002 5015 (fontified t) 5015 5019 (fontified t face font-lock-constant-face) 5019 5042 (fontified t) 5042 5043 (fontified t face font-lock-variable-name-face) 5043 5045 (fontified t) 5045 5052 (fontified t face font-lock-type-face) 5052 5066 (fontified t) 5066 5073 (fontified t face rust-builtin-formatting-macro-face) 5073 5074 (fontified t) 5074 5083 (fontified t face font-lock-string-face) 5083 5085 (fontified t face rust-string-interpolation-face) 5085 5086 (fontified t face font-lock-string-face) 5086 5103 (fontified t) 5103 5106 (fontified t face font-lock-comment-delimiter-face) 5106 5155 (fontified t face font-lock-comment-face) 5155 5159 (fontified t) 5159 5162 (fontified t face font-lock-keyword-face) 5162 5163 (fontified t) 5163 5185 (fontified t face font-lock-variable-name-face) 5185 5206 (fontified t) 5206 5211 (fontified t face font-lock-preprocessor-face) 5211 5212 (fontified t) 5212 5221 (fontified t face font-lock-string-face) 5221 5224 (fontified t) 5224 5231 (fontified t face font-lock-string-face) 5231 5247 (fontified t) 5247 5251 (fontified t face font-lock-constant-face) 5251 5275 (fontified t) 5275 5279 (fontified t face font-lock-constant-face) 5279 5302 (fontified t) 5302 5303 (fontified t face font-lock-variable-name-face) 5303 5305 (fontified t) 5305 5312 (fontified t face font-lock-type-face) 5312 5326 (fontified t) 5326 5333 (fontified t face rust-builtin-formatting-macro-face) 5333 5334 (fontified t) 5334 5343 (fontified t face font-lock-string-face) 5343 5345 (fontified t face rust-string-interpolation-face) 5345 5352 (fontified t face font-lock-string-face) 5352 5369 (fontified t) 5369 5372 (fontified t face font-lock-comment-delimiter-face) 5372 5413 (fontified t face font-lock-comment-face) 5413 5417 (fontified t) 5417 5420 (fontified t face font-lock-keyword-face) 5420 5421 (fontified t) 5421 5434 (fontified t face font-lock-variable-name-face) 5434 5460 (fontified t) 5460 5466 (fontified t face font-lock-string-face) 5466 5482 (fontified t) 5482 5486 (fontified t face font-lock-constant-face) 5486 5502 (fontified t) 5502 5510 (fontified t) 5510 5514 (face font-lock-constant-face fontified t) 5514 5523 (fontified t) 5523 5537 (fontified t) 5537 5538 (fontified t face font-lock-variable-name-face) 5538 5540 (fontified t) 5540 5544 (fontified t face font-lock-type-face) 5544 5558 (fontified t) 5558 5565 (fontified t face rust-builtin-formatting-macro-face) 5565 5566 (fontified t) 5566 5572 (fontified t face font-lock-string-face) 5572 5574 (fontified t face rust-string-interpolation-face) 5574 5575 (fontified t face font-lock-string-face) 5575 5593 (fontified t) 5593 5596 (fontified t face font-lock-keyword-face) 5596 5597 (fontified t) 5597 5603 (fontified t face font-lock-variable-name-face) 5603 6023 (fontified t) 6023 6045 (fontified t) 6045 6122 (fontified t) 6122 6126 (fontified t face font-lock-constant-face) 6126 6149 (fontified t) 6149 6161 (fontified t face font-lock-variable-name-face) 6161 6163 (fontified t) 6163 6171 (fontified t face font-lock-type-face) 6171 6173 (fontified t) 6173 6176 (fontified t face font-lock-variable-name-face) 6176 6178 (fontified t) 6178 6182 (fontified t face font-lock-constant-face) 6182 6184 (fontified t) 6184 6187 (fontified t face font-lock-constant-face) 6187 6189 (fontified t) 6189 6192 (fontified t face font-lock-type-face) 6192 6218 (fontified t) 6218 6222 (fontified t face font-lock-constant-face) 6222 6224 (fontified t) 6224 6227 (fontified t face font-lock-constant-face) 6227 6277 (fontified t) 6277 6297 (fontified t) 6297 6300 (fontified t face font-lock-keyword-face) 6300 6301 (fontified t) 6301 6308 (fontified t face font-lock-variable-name-face) 6308 6315 (fontified t) 6315 6316 (fontified t) 6316 6324 (fontified t face font-lock-string-face) 6324 6325 (fontified t face font-lock-string-face) 6325 6332 (fontified t) 6332 6335 (fontified t) 6335 6336 (fontified t) 6336 6355 (fontified t) 6355 6356 (fontified t rear-nonsticky t) 6356 6359 (fontified t face font-lock-keyword-face) 6359 6360 (fontified t) 6360 6365 (fontified t face font-lock-variable-name-face) 6365 6372 (fontified t) 6372 6373 (fontified t) 6373 6379 (fontified t face font-lock-string-face) 6379 6380 (fontified t face font-lock-string-face) 6380 6387 (fontified t) 6387 6390 (fontified t) 6390 6391 (fontified t) 6391 6411 (fontified t) 6411 6412 (fontified t) 6412 6416 (fontified t face font-lock-constant-face) 6416 6418 (fontified t) 6418 6421 (fontified t face font-lock-constant-face) 6421 6428 (fontified t) 6428 6434 (fontified t) 6434 6436 (fontified t) 6436 6437 (fontified t) 6437 6458 (fontified t) 6458 6462 (fontified t face font-lock-constant-face) 6462 6464 (fontified t) 6464 6467 (fontified t face font-lock-constant-face) 6467 6473 (fontified t) 6473 6481 (fontified t) 6481 6482 (fontified t) 6482 6483 (fontified t) 6483 6484 (fontified t) 6484 6520 (fontified t) 6520 6524 (fontified t face font-lock-type-face) 6524 6558 (fontified t) 6558 6562 (fontified t face font-lock-constant-face) 6562 6593 (fontified t) 6593 6607 (fontified t) 6607 6609 (fontified t)) . 1) (undo-tree-id10156 . 173) (undo-tree-id10157 . -6390) (undo-tree-id10158 . -6336) (undo-tree-id10159 . -6390) (undo-tree-id10160 . -972) (undo-tree-id10161 . 5698) (undo-tree-id10162 . -915) (undo-tree-id10163 . 6009) (undo-tree-id10164 . -604) (undo-tree-id10165 . -6481) (undo-tree-id10166 . -6481) (undo-tree-id10167 . -5827) (undo-tree-id10168 . -102) (undo-tree-id10169 . -108) (undo-tree-id10170 . -102) (undo-tree-id10171 . -108) (undo-tree-id10172 . -6481) (undo-tree-id10173 . -6481) (undo-tree-id10174 . -5827) (undo-tree-id10175 . -6435) (undo-tree-id10176 . -6481) (undo-tree-id10177 . -5827) (undo-tree-id10178 . -6435) (undo-tree-id10179 . -5827) (undo-tree-id10180 . -6435) (undo-tree-id10181 . -6435) (undo-tree-id10182 . -6435) (undo-tree-id10183 . -6481) (undo-tree-id10184 . -5827) (undo-tree-id10185 . -6434) (undo-tree-id10186 . -6435) (undo-tree-id10187 . -6434) (undo-tree-id10188 . -6435) (undo-tree-id10189 . -6434) (undo-tree-id10190 . -6435) (undo-tree-id10191 . -6379) (undo-tree-id10192 . -6380) (undo-tree-id10193 . -6379) (undo-tree-id10194 . -6380) (undo-tree-id10195 . -6434) (undo-tree-id10196 . -6435) (undo-tree-id10197 . -6434) (undo-tree-id10198 . -6435) (undo-tree-id10199 . -6428) (undo-tree-id10200 . -6429) (undo-tree-id10201 . -6435) (undo-tree-id10202 . -6435) (undo-tree-id10203 . -5827) (undo-tree-id10204 . -6435) (undo-tree-id10205 . -6435) (undo-tree-id10206 . -5827) (undo-tree-id10207 . -6434) (undo-tree-id10208 . -6435) (undo-tree-id10209 . -6434) (undo-tree-id10210 . -6435) (undo-tree-id10211 . -6434) (undo-tree-id10212 . -6435) (undo-tree-id10213 . -6434) (undo-tree-id10214 . -6435) (undo-tree-id10215 . -6379) (undo-tree-id10216 . -6380) (undo-tree-id10217 . -6379) (undo-tree-id10218 . -6380) (undo-tree-id10219 . -6434) (undo-tree-id10220 . -6435) (undo-tree-id10221 . -6434) (undo-tree-id10222 . -6435) (undo-tree-id10223 . -6428) (undo-tree-id10224 . -6429) (undo-tree-id10225 . 181) (undo-tree-id10226 . -6429) (undo-tree-id10227 . 180) (undo-tree-id10228 . -6434) (undo-tree-id10229 . 175) (undo-tree-id10230 . -6435) 6436) nil (23732 45050 293404 791000) 0 nil]) ((6436 . 6437)) nil (23732 45050 293416 873000) 0 nil]) ((6482 . 6483) (#(")" 0 1 (fontified t)) . -6473) (6473 . 6474) (#(")" 0 1 (fontified t)) . -6467) 6413 (6467 . 6468) (#(")" 0 1 (fontified t)) . -6462) (6457 . 6458) (6461 . 6462) (#(")" 0 1 (fontified t)) . -6436) (6436 . 6437) (#(")" 0 1 (fontified t)) . -6429) (6429 . 6430) (#(")" 0 1 (fontified t)) . -6422) (6422 . 6423) (#(")" 0 1 (fontified t)) . -6417) (6417 . 6418) (#(")" 0 1 (fontified t)) . -6413) (6412 . 6414) (#("(" 0 1 (fontified nil)) . -6412) (6412 . 6413)) nil (23732 45050 293428 249000) 0 nil]) (6433) nil (23732 45050 293433 457000) 0 nil]) ((6429 . 6434) (6428 . 6430) (#("(" 0 1 (fontified nil)) . -6428) (6428 . 6429) (6412 . 6428) (6391 . 6412) 6379) nil (23732 45050 293437 837000) 0 nil]) ((6376 . 6380) (#("e" 0 1 (fontified t face font-lock-string-face)) . -6376) (undo-tree-id10231 . -1) 6377 (6375 . 6377) (#("payload" 0 7 (fontified t face font-lock-string-face)) . 6375)) nil (23732 45050 293443 672000) 0 nil]) ((6362 . 6366) (6361 . 6362) (#("payload" 0 7 (fontified t face font-lock-variable-name-face)) . 6361)) nil (23732 45050 293446 785000) 0 nil]) ((nil rear-nonsticky nil 6356 . 6357) (#("
" 0 1 (fontified nil)) . -6395) (6336 . 6396) 6321 (t 23732 44686 468622 621000)) nil (23732 45050 293450 430000) 0 nil]) ((6373 . 6380) (#("item" 0 4 (fontified t)) . 6373) (undo-tree-id10151 . -3) (undo-tree-id10152 . -2) 6375) nil (23732 44686 399566 377000) 0 nil]) ((6335 . 6336) (#(")" 0 1 (fontified nil)) . 6335) (6334 . 6335) (6333 . 6335) (#("(" 0 1 (fontified nil)) . -6333) (6327 . 6334) (#(";" 0 1 (fontified t)) . -6327) (undo-tree-id10153 . -1) (undo-tree-id10154 . -1) 6328) nil (23732 44686 399577 86000) 0 nil]) ((6327 . 6328)) nil (23732 44686 399580 459000) 0 nil]) ((6324 . 6325) (6319 . 6324) (6318 . 6319) (6317 . 6319) (#("\"" 0 1 (fontified nil)) . -6317) (6317 . 6318) (6316 . 6318) (#("[" 0 1 (fontified nil)) . -6316) (6298 . 6317) (6278 . 6298) (6278 . 6279)) nil (23732 44686 399586 854000) 0 nil]) ((#("                    dbg!(&item);
" 0 20 (fontified t) 20 24 (fontified t face font-lock-preprocessor-face) 24 33 (fontified t)) . 6278) (undo-tree-id10155 . -31) (t 23732 44527 842858 859000)) nil (23732 44686 399591 457000) 0 nil] [nil ([nil ([nil ([nil nil ((#(")" 0 1 (fontified nil)) . 6338) (6337 . 6338) (6336 . 6338) (#("(" 0 1 (fontified nil)) . -6336) (6330 . 6337)) ((#(".clone(" 0 6 (fontified nil) 6 7 (fontified nil)) . 6330) (undo-tree-id10114 . -6) (undo-tree-id10115 . -6) (undo-tree-id10116 . -6) (undo-tree-id10117 . -6) (undo-tree-id10118 . -6) (undo-tree-id10119 . -6) (undo-tree-id10120 . -6) (undo-tree-id10121 . -6) (undo-tree-id10122 . -5) (undo-tree-id10123 . -6) (undo-tree-id10124 . -4) (undo-tree-id10125 . -5) (undo-tree-id10126 . -3) (undo-tree-id10127 . -4) (undo-tree-id10128 . -2) (undo-tree-id10129 . -3) (undo-tree-id10130 . -1) (undo-tree-id10131 . -2) (undo-tree-id10132 . -1) (undo-tree-id10133 . -6) (6336 . 6337) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 6336) (undo-tree-id10134 . -1) (undo-tree-id10135 . -1) (undo-tree-id10136 . -1) (undo-tree-id10137 . -1) (undo-tree-id10138 . -1) (undo-tree-id10139 . -1) (undo-tree-id10140 . -1) (#(")" 0 1 (fontified nil)) . 6337) (undo-tree-id10141 . -1) (undo-tree-id10142 . -1) (undo-tree-id10143 . -1) (6338 . 6339)) (23732 44629 911918 202000) 0 nil]) ((#("                    dbg!(&item);
" 0 20 (fontified t) 20 24 (fontified t face font-lock-preprocessor-face) 24 33 (fontified t)) . 6278) (undo-tree-id10110 . -31) (undo-tree-id10111 . -31) (undo-tree-id10112 . -31) 6309) ((6278 . 6311)) (23732 44629 940329 641000) 0 nil]) ((6347 . 6348)) ((#("&" 0 1 (fontified t)) . 6347) (undo-tree-id10144 . -1) (undo-tree-id10145 . -1) (undo-tree-id10146 . -1) (undo-tree-id10147 . -1)) (23732 44630 304662 605000) 0 nil]) ((6353 . 6360) (6352 . 6354) (#("\"" 0 1 (fontified nil)) . -6352) (6352 . 6353) (6351 . 6353) (#("[" 0 1 (fontified nil)) . -6351) (6351 . 6352) (#("." 0 1 (fontified t)) . -6351) (undo-tree-id10113 . -1) 6352 (6351 . 6352) (t 23732 44527 842858 859000)) ((#("." 0 1 (fontified nil)) . 6351) (6351 . 6352) (#("[" 0 1 (fontified nil)) . 6351) (6351 . 6352) (#("[]" 0 1 (fontified nil) 1 2 (fontified nil)) . 6351) (undo-tree-id10148 . -2) (undo-tree-id10149 . -1) (undo-tree-id10150 . -2) (#("\"" 0 1 (fontified nil)) . 6352) (6352 . 6353) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 6352) (#("payload" 0 7 (fontified t face font-lock-string-face)) . 6353)) (23732 44631 551001 423000) 0 nil]) ((#("                    // let v: Value = serde_json::from_str(item.as_str()).unwrap();
" 0 20 (fontified t) 20 23 (fontified t face font-lock-comment-delimiter-face) 23 84 (fontified t face font-lock-comment-face)) . 6278) (t 23732 44498 96365 954000)) nil (23732 44633 150974 106000) 0 nil]) ((341 . 347) (#("String;" 0 6 (fontified t face font-lock-type-face) 6 7 (fontified t)) . 341) (undo-tree-id10097 . -6)) nil (23732 44498 22366 341000) 0 nil]) ((412 . 417) (#("String" 0 6 (fontified t face font-lock-type-face)) . 412) (undo-tree-id10098 . -5) (undo-tree-id10099 . -5) 417) nil (23732 44498 22382 162000) 0 nil]) ((#("string" 0 6 (fontified t)) . 971)) nil (23732 44498 22386 745000) 0 nil]) ((#("_" 0 1 (fontified t)) . 971) (undo-tree-id10100 . -1) (undo-tree-id10101 . -1) (undo-tree-id10102 . -1) (undo-tree-id10103 . -1)) nil (23732 44498 22397 292000) 0 nil]) ((#("                dbg!();
" 0 16 (fontified t) 16 20 (fontified t face font-lock-preprocessor-face) 20 23 (fontified t) 23 24 (fontified t)) . 923) (undo-tree-id10104 . 3) (undo-tree-id10105 . -21) (undo-tree-id10106 . -20) 943) nil (23732 44498 22407 394000) 0 nil]) ((#("v" 0 1 (fontified t)) . 944)) nil (23732 44498 22410 620000) 0 nil]) ((806 . 810) (#("v" 0 1 (fontified t face font-lock-variable-name-face)) . -806) (undo-tree-id10107 . -1) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -807) (undo-tree-id10108 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -808) (undo-tree-id10109 . -1) 809 (806 . 809) (#("v" 0 1 (fontified t face font-lock-variable-name-face)) . 806) (t 23732 44246 740913 315000)) nil (23732 44498 22422 32000) 0 nil]) ((#("          " 0 10 (fontified nil)) . -1031) (undo-tree-id10095 . -10) (1019 . 1031) 1029) nil (23732 44246 678507 28000) 0 nil]) ((#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -1029) (undo-tree-id10096 . -8) (1019 . 1029) 1027) nil (23732 44246 678514 446000) 0 nil]) ((nil rear-nonsticky nil 1026 . 1027) (#("
" 0 1 (fontified nil)) . -1054) (1018 . 1055) 1017) nil (23732 44246 678518 540000) 0 nil]) ((743 . 747)) ((#("let " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 743) (undo-tree-id9984 . -3) (undo-tree-id9986 . -3) (undo-tree-id9988 . -3) (undo-tree-id9990 . -3) (undo-tree-id9992 . -3) (undo-tree-id9994 . -3) (undo-tree-id9996 . -3) (undo-tree-id9998 . -3) (undo-tree-id10000 . -3) (undo-tree-id10001 . -3) (undo-tree-id10002 . -3) (undo-tree-id10004 . -3) (t 23732 44133 798114 718000)) (23732 44233 468333 359000) 0 nil] [nil nil ((nil rear-nonsticky nil 793 . 794) (#("
" 0 1 (fontified nil)) . -831) (781 . 832) 727) ((#("
            let mut json_string = \"\".to_string();
" 0 1 (fontified t) 1 12 (fontified nil) 12 13 (fontified nil rear-nonsticky nil) 13 16 (fontified nil face font-lock-keyword-face) 16 17 (fontified nil) 17 20 (fontified nil face font-lock-keyword-face) 20 21 (fontified nil) 21 32 (fontified nil face font-lock-variable-name-face) 32 35 (fontified nil) 35 37 (fontified nil face font-lock-string-face) 37 50 (fontified nil) 50 51 (fontified nil)) . 781) (undo-tree-id9976 . -50) (undo-tree-id9977 . -1) (undo-tree-id9978 . -50) (undo-tree-id9979 . -13) (undo-tree-id9980 . -13) (undo-tree-id9981 . -13) (undo-tree-id9982 . -13) (831 . 832) (nil rear-nonsticky t 793 . 794)) (23732 44125 204867 997000) 0 nil] [nil nil ((nil rear-nonsticky nil 640 . 641) (629 . 679)) ((#("            let mut json_string = \"\".to_string();
" 0 11 (fontified nil) 11 12 (fontified nil rear-nonsticky nil) 12 15 (fontified nil face font-lock-keyword-face) 15 16 (fontified nil) 16 19 (fontified nil face font-lock-keyword-face) 19 20 (fontified nil) 20 31 (fontified nil face font-lock-variable-name-face) 31 34 (fontified nil) 34 36 (fontified nil face font-lock-string-face) 36 50 (fontified nil)) . 629) (undo-tree-id9972 . -50) (undo-tree-id9973 . -49) (undo-tree-id9974 . -12) (undo-tree-id9975 . -12) (nil rear-nonsticky t 640 . 641)) (23732 44123 139554 483000) 0 nil]) ((#("            let mut json_string = \"\".to_string();
" 0 12 (fontified t) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 19 (fontified t face font-lock-keyword-face) 19 20 (fontified t) 20 31 (fontified t face font-lock-variable-name-face) 31 34 (fontified t) 34 36 (fontified t face font-lock-string-face) 36 50 (fontified t)) . 561) (undo-tree-id10091 . -20) (undo-tree-id10092 . -31) (undo-tree-id10093 . -20) (undo-tree-id10094 . -31)) ((561 . 611)) (23732 44233 66977 74000) 0 nil]) ((#("              " 0 14 (fontified nil)) . 1007) (undo-tree-id10089 . -14) (undo-tree-id10090 . -14) (991 . 1007)) ((#("                " 0 16 (fontified nil)) . 991) (1007 . 1021)) (23732 44232 776794 63000) 0 nil]) ((#("            " 0 11 (fontified nil) 11 12 (fontified nil rear-nonsticky t)) . 1005) (991 . 1005)) ((#("              " 0 14 (fontified nil)) . 991) (1005 . 1017)) (23732 44232 497331 383000) 0 nil]) ((nil rear-nonsticky nil 1002 . 1003) (#("
" 0 1 (fontified nil)) . 1046) (990 . 1047)) ((#("
            return Ok(Async::Ready(Some(json_string)));
" 0 1 (fontified t) 1 12 (fontified nil) 12 13 (fontified nil rear-nonsticky nil) 13 19 (fontified nil face font-lock-keyword-face) 19 20 (fontified nil) 20 22 (fontified nil face font-lock-type-face) 22 23 (fontified nil) 23 28 (fontified nil face font-lock-type-face) 28 30 (fontified nil) 30 35 (fontified nil face font-lock-type-face) 35 36 (fontified nil) 36 40 (fontified nil face font-lock-type-face) 40 56 (fontified nil) 56 57 (fontified nil)) . 990) (undo-tree-id10006 . -56) (undo-tree-id10007 . -13) (undo-tree-id10009 . -13) (1046 . 1047) (nil rear-nonsticky t 1002 . 1003)) (23732 44232 158077 235000) 0 nil]) ((#("            return Ok(Async::Ready(Some(json_string)));
" 0 12 (fontified t) 12 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 21 (fontified t face font-lock-type-face) 21 22 (fontified t) 22 27 (fontified t face font-lock-type-face) 27 29 (fontified t) 29 34 (fontified t face font-lock-type-face) 34 35 (fontified t) 35 39 (fontified t face font-lock-type-face) 39 56 (fontified t)) . 1005) (undo-tree-id10080 . -16) (undo-tree-id10081 . -16) (undo-tree-id10082 . -16) (undo-tree-id10083 . -16) (undo-tree-id10084 . -16) (undo-tree-id10085 . -16) (undo-tree-id10086 . -16) (undo-tree-id10087 . -16) (undo-tree-id10088 . -16) (t 23732 44193 97834 210000)) ((1005 . 1061)) (23732 44231 958700 678000) 0 nil]) ((1 . 6595) (#("use futures::{Async, Future, Poll};
use regex::Regex;
use serde_derive::Deserialize;
use serde_json::{Result, Value};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use warp::{path, Filter, Stream};

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Stream for Receiver {
    type Item = String;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<String>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            let mut json_string = \"\".to_string();
            let re = Regex::new(r\"(?x)(?P<json>\\{.*\\})\").unwrap();

            if let Some(cap) = re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read])) {
                json_string = cap[\"json\"].to_string();
            let v: Value =
                serde_json::from_str(&json_string.clone()).expect(\"we just validated the JSON.\");
            dbg!(v);
            }
            return Ok(Async::Ready(Some(json_string)));
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
    channel: String,
}
impl Future for Sender {
    type Item = ();
    type Error = Box<Error>;
    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        println!(\"Subscribing to {}\", &self.channel);
        let subscribe_cmd = format!(
            \"*2\\r\\n$9\\r\\nsubscribe\\r\\n${}\\r\\n{}\\r\\n\",
            self.channel.len(),
            self.channel
        );
        let mut buffer = subscribe_cmd.as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn get_socket() -> impl Future<Item = TcpStream, Error = Box<Error>> {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    connection
        .and_then(|socket| Ok(socket))
        .map_err(|e| Box::new(e))
}

fn send_subscribe_cmd(tx: WriteHalf<TcpStream>, channel: String) {
    let sender = Sender { tx, channel };
    tokio::spawn(sender.map_err(|e| eprintln!(\"{}\", e)));
}

fn stream_from(timeline: String) -> impl Future<Item = Receiver, Error = warp::reject::Rejection> {
    get_socket()
        .and_then(move |socket| {
            let (rx, tx) = socket.split();
            send_subscribe_cmd(tx, format!(\"timeline:{}\", timeline));
            let stream_of_data_from_redis = Receiver { rx };
            Ok(stream_of_data_from_redis)
        })
        .and_then(|stream| Ok(stream))
        .map_err(|e| warp::reject::custom(e))
}

#[derive(Deserialize)]
struct Media {
    only_media: String,
}
#[derive(Deserialize)]
struct Hashtag {
    tag: String,
}
#[derive(Deserialize)]
struct List {
    list: String,
}

fn main() {
    use warp::path;
    let base = path!(\"api\" / \"v1\" / \"streaming\");

    // GET /api/v1/streaming/user
    let user_timeline = base
        .and(path(\"user\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| stream_from(\"1\".to_string()));

    // GET /api/v1/streaming/user/notification
    let user_timeline_notifications = base
        .and(path!(\"user\" / \"notification\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| {
            let full_stream = stream_from(\"1\".to_string());
            // TODO: filter stream to just have notifications
            full_stream
        });

    // GET /api/v1/streaming/public
    let public_timeline = base
        .and(path(\"public\"))
        .and(path::end())
        .map(|| stream_from(\"public\".to_string()));

    // GET /api/v1/streaming/public?only_media=true
    let public_timeline_media = base
        .and(path(\"public\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                stream_from(\"public:media\".to_string())
            } else {
                stream_from(\"public\".to_string())
            }
        });

    // GET /api/v1/streaming/public/local
    let local_timeline = base
        .and(path!(\"public\" / \"local\"))
        .and(path::end())
        .map(|| stream_from(\"public:local\".to_string()));

    // GET /api/v1/streaming/public/local?only_media=true
    let local_timeline_media = base
        .and(path!(\"public\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                stream_from(\"public:local:media\".to_string())
            } else {
                stream_from(\"public:local\".to_string())
            }
        });

    // GET /api/v1/streaming/direct
    let direct_timeline = base
        .and(path(\"direct\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| stream_from(\"direct:1\".to_string()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag
    let hashtag_timeline = base
        .and(path(\"hashtag\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| stream_from(format!(\"hashtag:{}\", q.tag)));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag
    let hashtag_timeline_local = base
        .and(path!(\"hashtag\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| stream_from(format!(\"hashtag:{}:local\", q.tag)));

    // GET /api/v1/streaming/list?list=:list_id
    let list_timeline = base
        .and(path(\"list\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: List| stream_from(format!(\"list:{}\", q.list)));

    let routes = user_timeline
        .or(user_timeline_notifications)
        .unify()
        .or(public_timeline_media)
        .unify()
        .or(public_timeline)
        .unify()
        .or(local_timeline_media)
        .unify()
        .or(local_timeline)
        .unify()
        .or(direct_timeline)
        .unify()
        .or(hashtag_timeline)
        .unify()
        .or(hashtag_timeline_local)
        .unify()
        .or(list_timeline)
        .unify()
        .and_then(|event_stream| event_stream)
        .and(warp::sse())
        .map(|event_stream: Receiver, sse: warp::sse::Sse| {
            sse.reply(warp::sse::keep(
                event_stream.map(|item| {
                    // let v: Value = serde_json::from_str(item.as_str()).unwrap();
                    dbg!(&item);
                    warp::sse::data(item)
                }),
                None,
            ))
        });

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 19 (fontified t face font-lock-type-face) 19 21 (fontified t) 21 27 (fontified t face font-lock-type-face) 27 29 (fontified t) 29 33 (fontified t face font-lock-type-face) 33 36 (fontified t) 36 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 45 (fontified t face font-lock-constant-face) 45 47 (fontified t) 47 52 (fontified t face font-lock-type-face) 52 54 (fontified t) 54 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t) 58 70 (fontified t face font-lock-constant-face) 70 72 (fontified t) 72 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 88 (fontified t face font-lock-keyword-face) 88 89 (fontified t) 89 99 (fontified t face font-lock-constant-face) 99 102 (fontified t) 102 108 (fontified t face font-lock-type-face) 108 110 (fontified t) 110 115 (fontified t face font-lock-type-face) 115 118 (fontified t) 118 121 (fontified t face font-lock-keyword-face) 121 122 (fontified t) 122 127 (fontified t face font-lock-constant-face) 127 129 (fontified t) 129 131 (fontified t face font-lock-constant-face) 131 134 (fontified t) 134 143 (fontified t face font-lock-type-face) 143 145 (fontified t) 145 155 (fontified t face font-lock-type-face) 155 157 (fontified t) 157 162 (fontified t face font-lock-type-face) 162 164 (fontified t) 164 172 (fontified t face font-lock-type-face) 172 174 (fontified t) 174 183 (fontified t face font-lock-type-face) 183 186 (fontified t) 186 189 (fontified t face font-lock-keyword-face) 189 190 (fontified t) 190 195 (fontified t face font-lock-constant-face) 195 197 (fontified t) 197 200 (fontified t face font-lock-constant-face) 200 202 (fontified t) 202 211 (fontified t face font-lock-type-face) 211 213 (fontified t) 213 216 (fontified t face font-lock-keyword-face) 216 217 (fontified t) 217 221 (fontified t face font-lock-constant-face) 221 230 (fontified t) 230 236 (fontified t face font-lock-type-face) 236 238 (fontified t) 238 244 (fontified t face font-lock-type-face) 244 248 (fontified t) 248 254 (fontified t face font-lock-keyword-face) 254 255 (fontified t) 255 263 (fontified t face font-lock-type-face) 263 270 (fontified t) 270 272 (fontified t face font-lock-variable-name-face) 272 274 (fontified t) 274 282 (fontified t face font-lock-type-face) 282 283 (fontified t) 283 292 (fontified t face font-lock-type-face) 292 297 (fontified t) 297 301 (fontified t face font-lock-keyword-face) 301 302 (fontified t) 302 308 (fontified t face font-lock-type-face) 308 309 (fontified t) 309 312 (fontified t face font-lock-keyword-face) 312 313 (fontified t) 313 321 (fontified t face font-lock-type-face) 321 328 (fontified t) 328 332 (fontified t face font-lock-keyword-face) 332 333 (fontified t) 333 337 (fontified t face font-lock-type-face) 337 340 (fontified t) 340 346 (fontified t face font-lock-type-face) 346 352 (fontified t) 352 356 (fontified t face font-lock-keyword-face) 356 357 (fontified t) 357 362 (fontified t face font-lock-type-face) 362 365 (fontified t) 365 370 (fontified t face font-lock-type-face) 370 373 (fontified t) 373 377 (fontified t) 377 379 (fontified t face font-lock-keyword-face) 379 380 (fontified t) 380 384 (fontified t face font-lock-function-name-face) 384 386 (fontified t) 386 389 (fontified t face font-lock-keyword-face) 389 390 (fontified t) 390 394 (fontified t face font-lock-keyword-face) 394 397 (fontified t) 397 398 (fontified t syntax-table #2#) 398 399 (fontified t) 399 403 (fontified t face font-lock-type-face) 403 404 (fontified t) 404 410 (fontified t face font-lock-type-face) 410 411 (fontified t) 411 417 (fontified t face font-lock-type-face) 417 420 (fontified t) 420 424 (fontified t face font-lock-type-face) 424 426 (fontified t) 426 431 (fontified t face font-lock-type-face) 431 434 (fontified t) 434 443 (fontified t) 443 446 (fontified t face font-lock-keyword-face) 446 447 (fontified t) 447 450 (fontified t face font-lock-keyword-face) 450 451 (fontified t) 451 457 (fontified t face font-lock-variable-name-face) 457 460 (fontified t) 460 464 (fontified t face font-lock-preprocessor-face) 464 485 (fontified t) 485 490 (fontified t face font-lock-keyword-face) 490 491 (fontified t) 491 494 (fontified t face font-lock-keyword-face) 494 495 (fontified t) 495 500 (fontified t face font-lock-type-face) 500 502 (fontified t) 502 507 (fontified t face font-lock-type-face) 507 526 (fontified t) 526 530 (fontified t face font-lock-keyword-face) 530 545 (fontified t) 545 548 (fontified t face font-lock-keyword-face) 548 556 (fontified t) 556 557 (fontified t face rust-question-mark-face) 557 560 (fontified t) 560 572 (fontified t) 572 575 (fontified t face font-lock-keyword-face) 575 576 (fontified t) 576 579 (fontified t face font-lock-keyword-face) 579 580 (fontified t) 580 591 (fontified t face font-lock-variable-name-face) 591 594 (fontified t) 594 596 (fontified t face font-lock-string-face) 596 622 (fontified t) 622 625 (fontified t face font-lock-keyword-face) 625 626 (fontified t) 626 628 (fontified t face font-lock-variable-name-face) 628 631 (fontified t) 631 636 (fontified t face font-lock-type-face) 636 642 (fontified t) 642 643 (fontified t syntax-table #1# face font-lock-string-face) 643 664 (fontified t face font-lock-string-face) 664 665 (fontified t syntax-table #3# face font-lock-string-face) 665 690 (fontified t) 690 692 (fontified t face font-lock-keyword-face) 692 693 (fontified t) 693 696 (fontified t face font-lock-keyword-face) 696 697 (fontified t) 697 701 (fontified t face font-lock-type-face) 701 722 (fontified t) 722 728 (fontified t face font-lock-type-face) 728 776 (fontified t) 776 810 (fontified t) 810 816 (fontified t face font-lock-string-face) 816 830 (fontified t) 830 831 (fontified t) 831 842 (fontified t) 842 843 (fontified t rear-nonsticky t) 843 846 (fontified t face font-lock-keyword-face) 846 847 (fontified t) 847 848 (fontified t face font-lock-variable-name-face) 848 850 (fontified t) 850 855 (fontified t face font-lock-type-face) 855 857 (fontified t) 857 858 (fontified t) 858 859 (fontified t) 859 874 (fontified t) 874 884 (fontified t face font-lock-constant-face) 884 924 (fontified t) 924 953 (fontified t face font-lock-string-face) 953 956 (fontified t) 956 968 (fontified t) 968 972 (fontified t face font-lock-preprocessor-face) 972 976 (fontified t) 976 977 (fontified t) 977 991 (fontified t) 991 1003 (fontified t) 1003 1009 (fontified t face font-lock-keyword-face) 1009 1010 (fontified t) 1010 1012 (fontified t face font-lock-type-face) 1012 1013 (fontified t) 1013 1018 (fontified t face font-lock-type-face) 1018 1020 (fontified t) 1020 1025 (fontified t face font-lock-type-face) 1025 1026 (fontified t) 1026 1030 (fontified t face font-lock-type-face) 1030 1047 (fontified t) 1047 1060 (fontified t) 1060 1065 (fontified t) 1065 1071 (fontified t face font-lock-keyword-face) 1071 1072 (fontified t) 1072 1074 (fontified t face font-lock-type-face) 1074 1075 (fontified t) 1075 1080 (fontified t face font-lock-type-face) 1080 1082 (fontified t) 1082 1090 (fontified t face font-lock-type-face) 1090 1093 (fontified t) 1093 1102 (fontified t) 1102 1108 (fontified t face font-lock-keyword-face) 1108 1109 (fontified t) 1109 1115 (fontified t face font-lock-type-face) 1115 1122 (fontified t) 1122 1124 (fontified t face font-lock-variable-name-face) 1124 1126 (fontified t) 1126 1135 (fontified t face font-lock-type-face) 1135 1136 (fontified t) 1136 1145 (fontified t face font-lock-type-face) 1145 1152 (fontified t) 1152 1159 (fontified t face font-lock-variable-name-face) 1159 1161 (fontified t) 1161 1167 (fontified t face font-lock-type-face) 1167 1171 (fontified t) 1171 1175 (fontified t face font-lock-keyword-face) 1175 1176 (fontified t) 1176 1182 (fontified t face font-lock-type-face) 1182 1183 (fontified t) 1183 1186 (fontified t face font-lock-keyword-face) 1186 1187 (fontified t) 1187 1193 (fontified t face font-lock-type-face) 1193 1200 (fontified t) 1200 1204 (fontified t face font-lock-keyword-face) 1204 1205 (fontified t) 1205 1209 (fontified t face font-lock-type-face) 1209 1220 (fontified t) 1220 1224 (fontified t face font-lock-keyword-face) 1224 1225 (fontified t) 1225 1230 (fontified t face font-lock-type-face) 1230 1233 (fontified t) 1233 1236 (fontified t face font-lock-type-face) 1236 1237 (fontified t) 1237 1242 (fontified t face font-lock-type-face) 1242 1249 (fontified t) 1249 1251 (fontified t face font-lock-keyword-face) 1251 1252 (fontified t) 1252 1256 (fontified t face font-lock-function-name-face) 1256 1258 (fontified t) 1258 1261 (fontified t face font-lock-keyword-face) 1261 1262 (fontified t) 1262 1266 (fontified t face font-lock-keyword-face) 1266 1269 (fontified t) 1269 1270 (fontified t syntax-table #2#) 1270 1271 (fontified t) 1271 1275 (fontified t face font-lock-type-face) 1275 1276 (fontified t) 1276 1280 (fontified t face font-lock-type-face) 1280 1282 (fontified t) 1282 1286 (fontified t face font-lock-type-face) 1286 1288 (fontified t) 1288 1292 (fontified t face font-lock-type-face) 1292 1294 (fontified t) 1294 1299 (fontified t face font-lock-type-face) 1299 1311 (fontified t) 1311 1319 (fontified t face rust-builtin-formatting-macro-face) 1319 1320 (fontified t) 1320 1336 (fontified t face font-lock-string-face) 1336 1338 (fontified t face rust-string-interpolation-face) 1338 1339 (fontified t face font-lock-string-face) 1339 1342 (fontified t) 1342 1345 (fontified t face font-lock-keyword-face) 1345 1346 (fontified t face font-lock-keyword-face) 1346 1357 (fontified t) 1357 1365 (fontified t) 1365 1368 (fontified t face font-lock-keyword-face) 1368 1369 (fontified t) 1369 1371 (fontified t face font-lock-variable-name-face) 1371 1372 (fontified t face font-lock-variable-name-face) 1372 1382 (fontified t face font-lock-variable-name-face) 1382 1385 (fontified t) 1385 1392 (fontified t face rust-builtin-formatting-macro-face) 1392 1394 (fontified t) 1394 1406 (fontified t) 1406 1433 (fontified t face font-lock-string-face) 1433 1435 (fontified t face rust-string-interpolation-face) 1435 1439 (fontified t face font-lock-string-face) 1439 1441 (fontified t face rust-string-interpolation-face) 1441 1446 (fontified t face font-lock-string-face) 1446 1460 (fontified t) 1460 1464 (fontified t face font-lock-keyword-face) 1464 1470 (fontified t) 1470 1477 (fontified t) 1477 1480 (fontified t) 1492 1496 (face font-lock-keyword-face) 1524 1527 (face font-lock-keyword-face) 1528 1531 (face font-lock-keyword-face) 1532 1538 (face font-lock-variable-name-face) 1575 1579 (face font-lock-keyword-face) 1595 1598 (face font-lock-keyword-face) 1606 1607 (face rust-question-mark-face) 1671 1672 (syntax-table #2#) 2148 2149 (syntax-table #2#) 2929 2930 (syntax-table #1#) 3164 3165 (syntax-table #1#)) . 1) (undo-tree-id10036 . 5590) (undo-tree-id10037 . -976) (undo-tree-id10038 . -831) (undo-tree-id10039 . -976) (undo-tree-id10040 . -991) (undo-tree-id10041 . 5590) (undo-tree-id10042 . -991) (undo-tree-id10043 . -991) (undo-tree-id10044 . -991) (undo-tree-id10045 . -991) (undo-tree-id10046 . -843) (undo-tree-id10047 . -975) (undo-tree-id10048 . -843) (undo-tree-id10049 . -843) (undo-tree-id10050 . -776) (undo-tree-id10051 . -830) (undo-tree-id10052 . -956) (undo-tree-id10053 . -976) (undo-tree-id10054 . -975) (undo-tree-id10055 . -776) (undo-tree-id10056 . -974) (undo-tree-id10057 . -975) (undo-tree-id10058 . -974) (undo-tree-id10059 . -975) (undo-tree-id10060 . -974) (undo-tree-id10061 . -975) (undo-tree-id10062 . -974) (undo-tree-id10063 . -975) (undo-tree-id10064 . -952) (undo-tree-id10065 . -953) (undo-tree-id10066 . -952) (undo-tree-id10067 . -953) (undo-tree-id10068 . -974) (undo-tree-id10069 . -975) (undo-tree-id10070 . -974) (undo-tree-id10071 . -975) (undo-tree-id10072 . -972) (undo-tree-id10073 . -973) (undo-tree-id10074 . 5609) (undo-tree-id10075 . -973) (undo-tree-id10076 . 5608) (undo-tree-id10077 . -974) (undo-tree-id10078 . 5607) (undo-tree-id10079 . -975)) ((1 . 6582) (#("use futures::{Async, Future, Poll};
use regex::Regex;
use serde_derive::Deserialize;
use serde_json::{Result, Value};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use warp::{path, Filter, Stream};

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Stream for Receiver {
    type Item = String;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<String>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            let mut json_string = \"\".to_string();
            let re = Regex::new(r\"(?x)(?P<json>\\{.*\\})\").unwrap();

            if let Some(cap) = re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read])) {
                json_string = cap[\"json\"].to_string();
                let v: Value = serde_json::from_str(&json_string.clone())
                    .expect(\"we just validated the JSON.\");
                dbg!(v);
            }
            return Ok(Async::Ready(Some(json_string)));
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
    channel: String,
}
impl Future for Sender {
    type Item = ();
    type Error = Box<Error>;
    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        println!(\"Subscribing to {}\", &self.channel);
        let subscribe_cmd = format!(
            \"*2\\r\\n$9\\r\\nsubscribe\\r\\n${}\\r\\n{}\\r\\n\",
            self.channel.len(),
            self.channel
        );
        let mut buffer = subscribe_cmd.as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn get_socket() -> impl Future<Item = TcpStream, Error = Box<Error>> {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    connection
        .and_then(|socket| Ok(socket))
        .map_err(|e| Box::new(e))
}

fn send_subscribe_cmd(tx: WriteHalf<TcpStream>, channel: String) {
    let sender = Sender { tx, channel };
    tokio::spawn(sender.map_err(|e| eprintln!(\"{}\", e)));
}

fn stream_from(timeline: String) -> impl Future<Item = Receiver, Error = warp::reject::Rejection> {
    get_socket()
        .and_then(move |socket| {
            let (rx, tx) = socket.split();
            send_subscribe_cmd(tx, format!(\"timeline:{}\", timeline));
            let stream_of_data_from_redis = Receiver { rx };
            Ok(stream_of_data_from_redis)
        })
        .and_then(|stream| Ok(stream))
        .map_err(|e| warp::reject::custom(e))
}

#[derive(Deserialize)]
struct Media {
    only_media: String,
}
#[derive(Deserialize)]
struct Hashtag {
    tag: String,
}
#[derive(Deserialize)]
struct List {
    list: String,
}

fn main() {
    use warp::path;
    let base = path!(\"api\" / \"v1\" / \"streaming\");

    // GET /api/v1/streaming/user
    let user_timeline = base
        .and(path(\"user\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| stream_from(\"1\".to_string()));

    // GET /api/v1/streaming/user/notification
    let user_timeline_notifications = base
        .and(path!(\"user\" / \"notification\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| {
            let full_stream = stream_from(\"1\".to_string());
            // TODO: filter stream to just have notifications
            full_stream
        });

    // GET /api/v1/streaming/public
    let public_timeline = base
        .and(path(\"public\"))
        .and(path::end())
        .map(|| stream_from(\"public\".to_string()));

    // GET /api/v1/streaming/public?only_media=true
    let public_timeline_media = base
        .and(path(\"public\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                stream_from(\"public:media\".to_string())
            } else {
                stream_from(\"public\".to_string())
            }
        });

    // GET /api/v1/streaming/public/local
    let local_timeline = base
        .and(path!(\"public\" / \"local\"))
        .and(path::end())
        .map(|| stream_from(\"public:local\".to_string()));

    // GET /api/v1/streaming/public/local?only_media=true
    let local_timeline_media = base
        .and(path!(\"public\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                stream_from(\"public:local:media\".to_string())
            } else {
                stream_from(\"public:local\".to_string())
            }
        });

    // GET /api/v1/streaming/direct
    let direct_timeline = base
        .and(path(\"direct\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| stream_from(\"direct:1\".to_string()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag
    let hashtag_timeline = base
        .and(path(\"hashtag\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| stream_from(format!(\"hashtag:{}\", q.tag)));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag
    let hashtag_timeline_local = base
        .and(path!(\"hashtag\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| stream_from(format!(\"hashtag:{}:local\", q.tag)));

    // GET /api/v1/streaming/list?list=:list_id
    let list_timeline = base
        .and(path(\"list\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: List| stream_from(format!(\"list:{}\", q.list)));

    let routes = user_timeline
        .or(user_timeline_notifications)
        .unify()
        .or(public_timeline_media)
        .unify()
        .or(public_timeline)
        .unify()
        .or(local_timeline_media)
        .unify()
        .or(local_timeline)
        .unify()
        .or(direct_timeline)
        .unify()
        .or(hashtag_timeline)
        .unify()
        .or(hashtag_timeline_local)
        .unify()
        .or(list_timeline)
        .unify()
        .and_then(|event_stream| event_stream)
        .and(warp::sse())
        .map(|event_stream: Receiver, sse: warp::sse::Sse| {
            sse.reply(warp::sse::keep(
                event_stream.map(|item| {
                    // let v: Value = serde_json::from_str(item.as_str()).unwrap();
                    dbg!(&item);
                    warp::sse::data(item)
                }),
                None,
            ))
        });

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 19 (fontified t face font-lock-type-face) 19 21 (fontified t) 21 27 (fontified t face font-lock-type-face) 27 29 (fontified t) 29 33 (fontified t face font-lock-type-face) 33 35 (fontified t) 35 36 (fontified t) 36 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 45 (fontified t face font-lock-constant-face) 45 47 (fontified t) 47 52 (fontified t face font-lock-type-face) 52 54 (fontified t) 54 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t) 58 70 (fontified t face font-lock-constant-face) 70 72 (fontified t) 72 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 88 (fontified t face font-lock-keyword-face) 88 89 (fontified t) 89 99 (fontified t face font-lock-constant-face) 99 102 (fontified t) 102 108 (fontified t face font-lock-type-face) 108 110 (fontified t) 110 115 (fontified t face font-lock-type-face) 115 118 (fontified t) 118 121 (fontified t face font-lock-keyword-face) 121 122 (fontified t) 122 127 (fontified t face font-lock-constant-face) 127 129 (fontified t) 129 131 (fontified t face font-lock-constant-face) 131 134 (fontified t) 134 143 (fontified t face font-lock-type-face) 143 145 (fontified t) 145 155 (fontified t face font-lock-type-face) 155 157 (fontified t) 157 162 (fontified t face font-lock-type-face) 162 164 (fontified t) 164 172 (fontified t face font-lock-type-face) 172 174 (fontified t) 174 183 (fontified t face font-lock-type-face) 183 186 (fontified t) 186 189 (fontified t face font-lock-keyword-face) 189 190 (fontified t) 190 195 (fontified t face font-lock-constant-face) 195 197 (fontified t) 197 200 (fontified t face font-lock-constant-face) 200 202 (fontified t) 202 211 (fontified t face font-lock-type-face) 211 213 (fontified t) 213 216 (fontified t face font-lock-keyword-face) 216 217 (fontified t) 217 221 (fontified t face font-lock-constant-face) 221 230 (fontified t) 230 236 (fontified t face font-lock-type-face) 236 238 (fontified t) 238 244 (fontified t face font-lock-type-face) 244 248 (fontified t) 248 254 (fontified t face font-lock-keyword-face) 254 255 (fontified t) 255 263 (fontified t face font-lock-type-face) 263 270 (fontified t) 270 272 (fontified t face font-lock-variable-name-face) 272 274 (fontified t) 274 282 (fontified t face font-lock-type-face) 282 283 (fontified t) 283 292 (fontified t face font-lock-type-face) 292 297 (fontified t) 297 301 (fontified t face font-lock-keyword-face) 301 302 (fontified t) 302 308 (fontified t face font-lock-type-face) 308 309 (fontified t) 309 312 (fontified t face font-lock-keyword-face) 312 313 (fontified t) 313 321 (fontified t face font-lock-type-face) 321 328 (fontified t) 328 332 (fontified t face font-lock-keyword-face) 332 333 (fontified t) 333 337 (fontified t face font-lock-type-face) 337 340 (fontified t) 340 346 (fontified t face font-lock-type-face) 346 352 (fontified t) 352 356 (fontified t face font-lock-keyword-face) 356 357 (fontified t) 357 362 (fontified t face font-lock-type-face) 362 365 (fontified t) 365 370 (fontified t face font-lock-type-face) 370 377 (fontified t) 377 379 (fontified t face font-lock-keyword-face) 379 380 (fontified t) 380 384 (fontified t face font-lock-function-name-face) 384 386 (fontified t) 386 389 (fontified t face font-lock-keyword-face) 389 390 (fontified t) 390 394 (fontified t face font-lock-keyword-face) 394 397 (fontified t) 397 398 (fontified t syntax-table #2#) 398 399 (fontified t) 399 403 (fontified t face font-lock-type-face) 403 404 (fontified t) 404 410 (fontified t face font-lock-type-face) 410 411 (fontified t) 411 417 (fontified t face font-lock-type-face) 417 420 (fontified t) 420 424 (fontified t face font-lock-type-face) 424 426 (fontified t) 426 431 (fontified t face font-lock-type-face) 431 443 (fontified t) 443 446 (fontified t face font-lock-keyword-face) 446 447 (fontified t) 447 450 (fontified t face font-lock-keyword-face) 450 451 (fontified t) 451 457 (fontified t face font-lock-variable-name-face) 457 460 (fontified t) 460 464 (fontified t face font-lock-preprocessor-face) 464 485 (fontified t) 485 490 (fontified t face font-lock-keyword-face) 490 491 (fontified t) 491 494 (fontified t face font-lock-keyword-face) 494 495 (fontified t) 495 500 (fontified t face font-lock-type-face) 500 502 (fontified t) 502 507 (fontified t face font-lock-type-face) 507 526 (fontified t) 526 530 (fontified t face font-lock-keyword-face) 530 535 (fontified t) 535 545 (fontified t) 545 548 (fontified t face font-lock-keyword-face) 548 556 (fontified t) 556 557 (fontified t face rust-question-mark-face) 557 560 (fontified t) 560 572 (fontified t) 572 575 (fontified t face font-lock-keyword-face) 575 576 (fontified t) 576 579 (fontified t face font-lock-keyword-face) 579 580 (fontified t) 580 591 (fontified t face font-lock-variable-name-face) 591 594 (fontified t) 594 596 (fontified t face font-lock-string-face) 596 610 (fontified t) 610 622 (fontified t) 622 625 (fontified t face font-lock-keyword-face) 625 626 (fontified t) 626 628 (fontified t face font-lock-variable-name-face) 628 631 (fontified t) 631 636 (fontified t face font-lock-type-face) 636 642 (fontified t) 642 643 (fontified t syntax-table #1# face font-lock-string-face) 643 664 (fontified t face font-lock-string-face) 664 665 (fontified t syntax-table #3# face font-lock-string-face) 665 677 (fontified t) 677 678 (fontified t) 678 690 (fontified t) 690 692 (fontified t face font-lock-keyword-face) 692 693 (fontified t) 693 696 (fontified t face font-lock-keyword-face) 696 697 (fontified t) 697 701 (fontified t face font-lock-type-face) 701 722 (fontified t) 722 728 (fontified t face font-lock-type-face) 728 776 (fontified t) 776 792 (fontified t) 792 803 (fontified t) 803 810 (fontified t) 810 816 (fontified t face font-lock-string-face) 816 830 (fontified t) 830 831 (fontified t) 831 847 (fontified t) 847 850 (fontified t face font-lock-keyword-face) 850 851 (fontified t) 851 852 (fontified t face font-lock-variable-name-face) 852 854 (fontified t) 854 859 (fontified t face font-lock-type-face) 859 862 (fontified t) 862 872 (fontified t face font-lock-constant-face) 872 904 (fontified t) 904 933 (fontified t) 933 962 (fontified t face font-lock-string-face) 962 965 (fontified t) 965 981 (fontified t) 981 985 (fontified t face font-lock-preprocessor-face) 985 989 (fontified t) 989 990 (fontified t) 990 1004 (fontified t) 1004 1016 (fontified t) 1016 1022 (fontified t face font-lock-keyword-face) 1022 1023 (fontified t) 1023 1025 (fontified t face font-lock-type-face) 1025 1026 (fontified t) 1026 1031 (fontified t face font-lock-type-face) 1031 1033 (fontified t) 1033 1038 (fontified t face font-lock-type-face) 1038 1039 (fontified t) 1039 1043 (fontified t face font-lock-type-face) 1043 1060 (fontified t) 1060 1070 (fontified t) 1070 1078 (fontified t) 1078 1084 (fontified t face font-lock-keyword-face) 1084 1085 (fontified t) 1085 1087 (fontified t face font-lock-type-face) 1087 1088 (fontified t) 1088 1093 (fontified t face font-lock-type-face) 1093 1095 (fontified t) 1095 1103 (fontified t face font-lock-type-face) 1103 1115 (fontified t) 1115 1121 (fontified t face font-lock-keyword-face) 1121 1122 (fontified t) 1122 1128 (fontified t face font-lock-type-face) 1128 1135 (fontified t) 1135 1137 (fontified t face font-lock-variable-name-face) 1137 1139 (fontified t) 1139 1148 (fontified t face font-lock-type-face) 1148 1149 (fontified t) 1149 1158 (fontified t face font-lock-type-face) 1158 1165 (fontified t) 1165 1172 (fontified t face font-lock-variable-name-face) 1172 1173 (fontified t) 1173 1174 (fontified t) 1174 1180 (fontified t face font-lock-type-face) 1180 1182 (fontified t) 1182 1184 (fontified t) 1184 1188 (fontified t face font-lock-keyword-face) 1188 1189 (fontified t) 1189 1195 (fontified t face font-lock-type-face) 1195 1196 (fontified t) 1196 1199 (fontified t face font-lock-keyword-face) 1199 1200 (fontified t) 1200 1206 (fontified t face font-lock-type-face) 1206 1213 (fontified t) 1213 1217 (fontified t face font-lock-keyword-face) 1217 1218 (fontified t) 1218 1222 (fontified t face font-lock-type-face) 1222 1233 (fontified t) 1233 1237 (fontified t face font-lock-keyword-face) 1237 1238 (fontified t) 1238 1243 (fontified t face font-lock-type-face) 1243 1246 (fontified t) 1246 1249 (fontified t face font-lock-type-face) 1249 1250 (fontified t) 1250 1255 (fontified t face font-lock-type-face) 1255 1262 (fontified t) 1262 1264 (fontified t face font-lock-keyword-face) 1264 1265 (fontified t) 1265 1269 (fontified t face font-lock-function-name-face) 1269 1271 (fontified t) 1271 1272 (fontified t face font-lock-keyword-face) 1272 1274 (fontified t face font-lock-keyword-face) 1274 1275 (fontified t) 1275 1279 (fontified t face font-lock-keyword-face) 1279 1282 (fontified t) 1282 1283 (syntax-table #2# fontified t) 1283 1284 (fontified t) 1284 1288 (fontified t face font-lock-type-face) 1288 1289 (fontified t) 1289 1293 (fontified t face font-lock-type-face) 1293 1295 (fontified t) 1295 1299 (fontified t face font-lock-type-face) 1299 1301 (fontified t) 1301 1305 (fontified t face font-lock-type-face) 1305 1307 (fontified t) 1307 1312 (fontified t face font-lock-type-face) 1312 1316 (fontified t) 1316 1324 (fontified t) 1324 1327 (fontified t face rust-builtin-formatting-macro-face) 1327 1331 (fontified t face rust-builtin-formatting-macro-face) 1331 1332 (fontified t face rust-builtin-formatting-macro-face) 1332 1333 (fontified t) 1333 1349 (fontified t face font-lock-string-face) 1349 1351 (fontified t face rust-string-interpolation-face) 1351 1352 (fontified t face font-lock-string-face) 1352 1355 (fontified t) 1355 1359 (fontified t face font-lock-keyword-face) 1359 1370 (fontified t) 1370 1378 (fontified t) 1378 1381 (fontified t face font-lock-keyword-face) 1381 1382 (fontified t) 1382 1395 (fontified t face font-lock-variable-name-face) 1395 1398 (fontified t) 1398 1404 (fontified t face rust-builtin-formatting-macro-face) 1404 1405 (fontified t face rust-builtin-formatting-macro-face) 1405 1407 (fontified t) 1407 1419 (fontified t) 1419 1446 (fontified t face font-lock-string-face) 1446 1448 (fontified t face rust-string-interpolation-face) 1448 1452 (fontified t face font-lock-string-face) 1452 1454 (fontified t face rust-string-interpolation-face) 1454 1459 (fontified t face font-lock-string-face) 1459 1473 (fontified t) 1473 1477 (fontified t face font-lock-keyword-face) 1477 1490 (fontified t) 1490 1493 (fontified t) 1505 1509 (face font-lock-keyword-face) 1537 1540 (face font-lock-keyword-face) 1541 1544 (face font-lock-keyword-face) 1545 1546 (face font-lock-variable-name-face) 1546 1551 (face font-lock-variable-name-face) 1588 1592 (face font-lock-keyword-face) 1608 1611 (face font-lock-keyword-face) 1619 1620 (face rust-question-mark-face) 1630 1636 (face font-lock-keyword-face) 1637 1639 (face font-lock-type-face) 1640 1645 (face font-lock-type-face) 1647 1655 (face font-lock-type-face) 1667 1669 (face font-lock-keyword-face) 1670 1680 (face font-lock-function-name-face) 1684 1685 (syntax-table #2#) 1686 1690 (face font-lock-keyword-face) 1691 1697 (face font-lock-type-face) 1698 1702 (face font-lock-type-face) 1705 1714 (face font-lock-type-face) 1716 1721 (face font-lock-type-face) 1724 1727 (face font-lock-type-face) 1728 1733 (face font-lock-type-face) 1742 1745 (face font-lock-keyword-face) 1746 1753 (face font-lock-variable-name-face) 1756 1772 (face font-lock-string-face) 1788 1813 (face font-lock-string-face) 1820 1823 (face font-lock-keyword-face) 1824 1834 (face font-lock-variable-name-face) 1837 1846 (face font-lock-type-face) 2161 2162 (syntax-table #2#) 2942 2943 (syntax-table #1#) 3177 3178 (syntax-table #1#)) . 1) (undo-tree-id10011 . 5802) (undo-tree-id10012 . -830) (undo-tree-id10013 . -830) (undo-tree-id10014 . -830) (undo-tree-id10015 . -989) (undo-tree-id10016 . 5638) (undo-tree-id10017 . -960) (undo-tree-id10018 . -1020) (undo-tree-id10019 . -1020) (undo-tree-id10020 . -102) (undo-tree-id10021 . -108) (undo-tree-id10022 . -1020) (undo-tree-id10023 . -1020) (undo-tree-id10024 . -1020) (undo-tree-id10025 . -1020) (undo-tree-id10026 . -1020) (undo-tree-id10027 . -1020) (undo-tree-id10028 . -1020) (t 23732 44193 97834 210000)) (23732 44231 786376 540000) 0 nil]) ((nil rear-nonsticky nil 843 . 844) (#("
" 0 1 (fontified nil)) . 977) (831 . 978)) ((#("
            let v: Value =
                serde_json::from_str(&json_string.clone()).expect(\"we just validated the JSON.\");
            dbg!(v);
" 0 1 (fontified t) 1 12 (fontified nil) 12 13 (fontified nil rear-nonsticky nil) 13 16 (fontified nil face font-lock-keyword-face) 16 17 (fontified nil) 17 18 (fontified nil face font-lock-variable-name-face) 18 20 (fontified nil) 20 25 (fontified nil face font-lock-type-face) 25 27 (fontified nil) 27 28 (fontified nil) 28 29 (fontified t) 29 44 (fontified t) 44 54 (fontified t face font-lock-constant-face) 54 94 (fontified t) 94 123 (fontified t face font-lock-string-face) 123 126 (fontified t) 126 138 (fontified nil) 138 142 (fontified nil face font-lock-preprocessor-face) 142 146 (fontified nil) 146 147 (fontified nil)) . 831) (undo-tree-id10029 . -146) (undo-tree-id10030 . -1) (undo-tree-id10031 . -146) (undo-tree-id10032 . -13) (undo-tree-id10033 . -13) (undo-tree-id10034 . -13) (undo-tree-id10035 . -13) (977 . 978) (nil rear-nonsticky t 843 . 844)) (23732 44231 601421 394000) 0 nil]) ((#("            let v: Value =
                serde_json::from_str(&json_string.clone()).expect(\"we just validated the JSON.\");
            dbg!(v);
" 0 12 (fontified t) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 17 (fontified t face font-lock-variable-name-face) 17 19 (fontified t) 19 24 (fontified t face font-lock-type-face) 24 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t) 28 43 (fontified t) 43 53 (fontified t face font-lock-constant-face) 53 93 (fontified t) 93 122 (fontified t face font-lock-string-face) 122 125 (fontified t) 125 137 (fontified t) 137 141 (fontified t face font-lock-preprocessor-face) 141 146 (fontified t)) . 846) (undo-tree-id9922 . 146) (undo-tree-id9923 . -138) (undo-tree-id9924 . -13) (undo-tree-id9925 . -138) (undo-tree-id9926 . -13) (undo-tree-id9927 . -138) (undo-tree-id9928 . -138) (undo-tree-id9929 . -138) 984) nil (23732 44230 844662 370000) 0 nil]) ((#("            
" 0 12 (fontified t) 12 13 (fontified t)) . 846) (undo-tree-id9930 . 1) (undo-tree-id9931 . -12) (undo-tree-id9932 . -12) (undo-tree-id9933 . -11) (undo-tree-id9934 . -11) 857) nil (23732 44026 329527 700000) 0 nil]) ((#("d" 0 1 (fontified t)) . -858) (undo-tree-id9935 . -1) (#("b" 0 1 (fontified t)) . -859) (undo-tree-id9936 . -1) (#("j" 0 1 (fontified t)) . -860) (undo-tree-id9937 . -1) 861 (858 . 861) (846 . 858) (846 . 847) 871 (t 23732 43966 52237 790000)) nil (23732 44026 329534 891000) 0 nil]) ((1 . 6582) (#("use futures::{Async, Future, Poll};
use regex::Regex;
use serde_derive::Deserialize;
use serde_json::{Result, Value};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use warp::{path, Filter, Stream};

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Stream for Receiver {
    type Item = String;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<String>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            let mut json_string = \"\".to_string();
            let re = Regex::new(r\"(?x)(?P<json>\\{.*\\})\").unwrap();

            if let Some(cap) = re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read])) {
                json_string = cap[\"json\"].to_string();
            }
            let v: Value = serde_json::from_str(&json_string.clone()).expect(\"we just validated the JSON.\");
            dbg!(v);
            return Ok(Async::Ready(Some(json_string)));
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
    channel: String,
}
impl Future for Sender {
    type Item = ();
    type Error = Box<Error>;
    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        println!(\"Subscribing to {}\", &self.channel);
        let subscribe_cmd = format!(
            \"*2\\r\\n$9\\r\\nsubscribe\\r\\n${}\\r\\n{}\\r\\n\",
            self.channel.len(),
            self.channel
        );
        let mut buffer = subscribe_cmd.as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn get_socket() -> impl Future<Item = TcpStream, Error = Box<Error>> {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    connection
        .and_then(|socket| Ok(socket))
        .map_err(|e| Box::new(e))
}

fn send_subscribe_cmd(tx: WriteHalf<TcpStream>, channel: String) {
    let sender = Sender { tx, channel };
    tokio::spawn(sender.map_err(|e| eprintln!(\"{}\", e)));
}

fn stream_from(timeline: String) -> impl Future<Item = Receiver, Error = warp::reject::Rejection> {
    get_socket()
        .and_then(move |socket| {
            let (rx, tx) = socket.split();
            send_subscribe_cmd(tx, format!(\"timeline:{}\", timeline));
            let stream_of_data_from_redis = Receiver { rx };
            Ok(stream_of_data_from_redis)
        })
        .and_then(|stream| Ok(stream))
        .map_err(|e| warp::reject::custom(e))
}

#[derive(Deserialize)]
struct Media {
    only_media: String,
}
#[derive(Deserialize)]
struct Hashtag {
    tag: String,
}
#[derive(Deserialize)]
struct List {
    list: String,
}

fn main() {
    use warp::path;
    let base = path!(\"api\" / \"v1\" / \"streaming\");

    // GET /api/v1/streaming/user
    let user_timeline = base
        .and(path(\"user\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| stream_from(\"1\".to_string()));

    // GET /api/v1/streaming/user/notification
    let user_timeline_notifications = base
        .and(path!(\"user\" / \"notification\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| {
            let full_stream = stream_from(\"1\".to_string());
            // TODO: filter stream to just have notifications
            full_stream
        });

    // GET /api/v1/streaming/public
    let public_timeline = base
        .and(path(\"public\"))
        .and(path::end())
        .map(|| stream_from(\"public\".to_string()));

    // GET /api/v1/streaming/public?only_media=true
    let public_timeline_media = base
        .and(path(\"public\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                stream_from(\"public:media\".to_string())
            } else {
                stream_from(\"public\".to_string())
            }
        });

    // GET /api/v1/streaming/public/local
    let local_timeline = base
        .and(path!(\"public\" / \"local\"))
        .and(path::end())
        .map(|| stream_from(\"public:local\".to_string()));

    // GET /api/v1/streaming/public/local?only_media=true
    let local_timeline_media = base
        .and(path!(\"public\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                stream_from(\"public:local:media\".to_string())
            } else {
                stream_from(\"public:local\".to_string())
            }
        });

    // GET /api/v1/streaming/direct
    let direct_timeline = base
        .and(path(\"direct\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| stream_from(\"direct:1\".to_string()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag
    let hashtag_timeline = base
        .and(path(\"hashtag\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| stream_from(format!(\"hashtag:{}\", q.tag)));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag
    let hashtag_timeline_local = base
        .and(path!(\"hashtag\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| stream_from(format!(\"hashtag:{}:local\", q.tag)));

    // GET /api/v1/streaming/list?list=:list_id
    let list_timeline = base
        .and(path(\"list\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: List| stream_from(format!(\"list:{}\", q.list)));

    let routes = user_timeline
        .or(user_timeline_notifications)
        .unify()
        .or(public_timeline_media)
        .unify()
        .or(public_timeline)
        .unify()
        .or(local_timeline_media)
        .unify()
        .or(local_timeline)
        .unify()
        .or(direct_timeline)
        .unify()
        .or(hashtag_timeline)
        .unify()
        .or(hashtag_timeline_local)
        .unify()
        .or(list_timeline)
        .unify()
        .and_then(|event_stream| event_stream)
        .and(warp::sse())
        .map(|event_stream: Receiver, sse: warp::sse::Sse| {
            sse.reply(warp::sse::keep(
                event_stream.map(|item| {
                    // let v: Value = serde_json::from_str(item.as_str()).unwrap();
                    dbg!(&item);
                    warp::sse::data(item)
                }),
                None,
            ))
        });

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 19 (fontified t face font-lock-type-face) 19 21 (fontified t) 21 27 (fontified t face font-lock-type-face) 27 29 (fontified t) 29 33 (fontified t face font-lock-type-face) 33 35 (fontified t) 35 36 (fontified t) 36 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 45 (fontified t face font-lock-constant-face) 45 47 (fontified t) 47 52 (fontified t face font-lock-type-face) 52 54 (fontified t) 54 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t) 58 70 (fontified t face font-lock-constant-face) 70 72 (fontified t) 72 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 88 (fontified t face font-lock-keyword-face) 88 89 (fontified t) 89 99 (fontified t face font-lock-constant-face) 99 102 (fontified t) 102 108 (fontified t face font-lock-type-face) 108 110 (fontified t) 110 115 (fontified t face font-lock-type-face) 115 118 (fontified t) 118 121 (fontified t face font-lock-keyword-face) 121 122 (fontified t) 122 127 (fontified t face font-lock-constant-face) 127 129 (fontified t) 129 131 (fontified t face font-lock-constant-face) 131 134 (fontified t) 134 143 (fontified t face font-lock-type-face) 143 145 (fontified t) 145 155 (fontified t face font-lock-type-face) 155 157 (fontified t) 157 162 (fontified t face font-lock-type-face) 162 164 (fontified t) 164 172 (fontified t face font-lock-type-face) 172 174 (fontified t) 174 183 (fontified t face font-lock-type-face) 183 186 (fontified t) 186 189 (fontified t face font-lock-keyword-face) 189 190 (fontified t) 190 195 (fontified t face font-lock-constant-face) 195 197 (fontified t) 197 200 (fontified t face font-lock-constant-face) 200 202 (fontified t) 202 211 (fontified t face font-lock-type-face) 211 213 (fontified t) 213 216 (fontified t face font-lock-keyword-face) 216 217 (fontified t) 217 221 (fontified t face font-lock-constant-face) 221 230 (fontified t) 230 236 (fontified t face font-lock-type-face) 236 238 (fontified t) 238 244 (fontified t face font-lock-type-face) 244 248 (fontified t) 248 254 (fontified t face font-lock-keyword-face) 254 255 (fontified t) 255 263 (fontified t face font-lock-type-face) 263 270 (fontified t) 270 272 (fontified t face font-lock-variable-name-face) 272 274 (fontified t) 274 282 (fontified t face font-lock-type-face) 282 283 (fontified t) 283 292 (fontified t face font-lock-type-face) 292 297 (fontified t) 297 301 (fontified t face font-lock-keyword-face) 301 302 (fontified t) 302 308 (fontified t face font-lock-type-face) 308 309 (fontified t) 309 312 (fontified t face font-lock-keyword-face) 312 313 (fontified t) 313 321 (fontified t face font-lock-type-face) 321 328 (fontified t) 328 332 (fontified t face font-lock-keyword-face) 332 333 (fontified t) 333 337 (fontified t face font-lock-type-face) 337 340 (fontified t) 340 346 (fontified t face font-lock-type-face) 346 352 (fontified t) 352 356 (fontified t face font-lock-keyword-face) 356 357 (fontified t) 357 362 (fontified t face font-lock-type-face) 362 365 (fontified t) 365 370 (fontified t face font-lock-type-face) 370 377 (fontified t) 377 379 (fontified t face font-lock-keyword-face) 379 380 (fontified t) 380 384 (fontified t face font-lock-function-name-face) 384 386 (fontified t) 386 389 (fontified t face font-lock-keyword-face) 389 390 (fontified t) 390 394 (fontified t face font-lock-keyword-face) 394 397 (fontified t) 397 398 (fontified t syntax-table #2#) 398 399 (fontified t) 399 403 (fontified t face font-lock-type-face) 403 404 (fontified t) 404 410 (fontified t face font-lock-type-face) 410 411 (fontified t) 411 417 (fontified t face font-lock-type-face) 417 420 (fontified t) 420 424 (fontified t face font-lock-type-face) 424 426 (fontified t) 426 431 (fontified t face font-lock-type-face) 431 443 (fontified t) 443 446 (fontified t face font-lock-keyword-face) 446 447 (fontified t) 447 450 (fontified t face font-lock-keyword-face) 450 451 (fontified t) 451 457 (fontified t face font-lock-variable-name-face) 457 460 (fontified t) 460 464 (fontified t face font-lock-preprocessor-face) 464 485 (fontified t) 485 490 (fontified t face font-lock-keyword-face) 490 491 (fontified t) 491 494 (fontified t face font-lock-keyword-face) 494 495 (fontified t) 495 500 (fontified t face font-lock-type-face) 500 502 (fontified t) 502 507 (fontified t face font-lock-type-face) 507 526 (fontified t) 526 530 (fontified t face font-lock-keyword-face) 530 535 (fontified t) 535 545 (fontified t) 545 548 (fontified t face font-lock-keyword-face) 548 556 (fontified t) 556 557 (fontified t face rust-question-mark-face) 557 560 (fontified t) 560 572 (fontified t) 572 575 (fontified t face font-lock-keyword-face) 575 576 (fontified t) 576 579 (fontified t face font-lock-keyword-face) 579 580 (fontified t) 580 591 (fontified t face font-lock-variable-name-face) 591 594 (fontified t) 594 596 (fontified t face font-lock-string-face) 596 622 (fontified t) 622 625 (fontified t face font-lock-keyword-face) 625 626 (fontified t) 626 628 (fontified t face font-lock-variable-name-face) 628 631 (fontified t) 631 636 (fontified t face font-lock-type-face) 636 642 (fontified t) 642 643 (fontified t syntax-table #1# face font-lock-string-face) 643 664 (fontified t face font-lock-string-face) 664 665 (fontified t syntax-table #3# face font-lock-string-face) 665 690 (fontified t) 690 692 (fontified t face font-lock-keyword-face) 692 693 (fontified t) 693 696 (fontified t face font-lock-keyword-face) 696 697 (fontified t) 697 701 (fontified t face font-lock-type-face) 701 722 (fontified t) 722 728 (fontified t face font-lock-type-face) 728 810 (fontified t) 810 816 (fontified t face font-lock-string-face) 816 845 (fontified t) 845 857 (fontified t) 857 860 (fontified t face font-lock-keyword-face) 860 861 (fontified t) 861 862 (fontified t face font-lock-variable-name-face) 862 864 (fontified t) 864 869 (fontified t face font-lock-type-face) 869 872 (fontified t) 872 882 (fontified t face font-lock-constant-face) 882 894 (fontified t) 894 911 (fontified t) 911 913 (fontified t) 913 921 (fontified t) 921 922 (fontified t) 922 950 (fontified t face font-lock-string-face) 950 951 (fontified t face font-lock-string-face) 951 953 (fontified t) 953 954 (fontified t) 954 966 (fontified t) 966 970 (fontified t face font-lock-preprocessor-face) 970 974 (fontified t) 974 975 (fontified t) 975 987 (fontified t) 987 993 (fontified t face font-lock-keyword-face) 993 994 (fontified t) 994 996 (fontified t face font-lock-type-face) 996 997 (fontified t) 997 1002 (fontified t face font-lock-type-face) 1002 1004 (fontified t) 1004 1009 (fontified t face font-lock-type-face) 1009 1010 (fontified t) 1010 1014 (fontified t face font-lock-type-face) 1014 1049 (fontified t) 1049 1055 (fontified t face font-lock-keyword-face) 1055 1056 (fontified t) 1056 1058 (fontified t face font-lock-type-face) 1058 1059 (fontified t) 1059 1064 (fontified t face font-lock-type-face) 1064 1066 (fontified t) 1066 1074 (fontified t face font-lock-type-face) 1074 1086 (fontified t) 1086 1092 (fontified t face font-lock-keyword-face) 1092 1093 (fontified t) 1093 1099 (fontified t face font-lock-type-face) 1099 1106 (fontified t) 1106 1108 (fontified t face font-lock-variable-name-face) 1108 1110 (fontified t) 1110 1119 (fontified t face font-lock-type-face) 1119 1120 (fontified t) 1120 1129 (fontified t face font-lock-type-face) 1129 1130 (fontified t) 1130 1136 (fontified t) 1136 1143 (fontified t face font-lock-variable-name-face) 1143 1145 (fontified t) 1145 1151 (fontified t face font-lock-type-face) 1151 1155 (fontified t) 1155 1159 (fontified t face font-lock-keyword-face) 1159 1160 (fontified t) 1160 1166 (fontified t face font-lock-type-face) 1166 1167 (fontified t) 1167 1170 (fontified t face font-lock-keyword-face) 1170 1171 (fontified t) 1171 1177 (fontified t face font-lock-type-face) 1177 1184 (fontified t) 1184 1188 (fontified t face font-lock-keyword-face) 1188 1189 (fontified t) 1189 1193 (fontified t face font-lock-type-face) 1193 1204 (fontified t) 1204 1208 (fontified t face font-lock-keyword-face) 1208 1209 (fontified t) 1209 1214 (fontified t face font-lock-type-face) 1214 1217 (fontified t) 1217 1220 (fontified t face font-lock-type-face) 1220 1221 (fontified t) 1221 1226 (fontified t face font-lock-type-face) 1226 1227 (fontified t) 1227 1233 (fontified t) 1233 1235 (fontified t face font-lock-keyword-face) 1235 1236 (fontified t) 1236 1240 (fontified t face font-lock-function-name-face) 1240 1242 (fontified t) 1242 1245 (fontified t face font-lock-keyword-face) 1245 1246 (fontified t) 1246 1250 (fontified t face font-lock-keyword-face) 1250 1253 (fontified t) 1253 1254 (syntax-table #2# fontified t) 1254 1255 (fontified t) 1255 1259 (fontified t face font-lock-type-face) 1259 1260 (fontified t) 1260 1264 (fontified t face font-lock-type-face) 1264 1266 (fontified t) 1266 1270 (fontified t face font-lock-type-face) 1270 1272 (fontified t) 1272 1276 (fontified t face font-lock-type-face) 1276 1278 (fontified t) 1278 1283 (fontified t face font-lock-type-face) 1283 1284 (fontified t) 1284 1295 (fontified t) 1295 1303 (fontified t face rust-builtin-formatting-macro-face) 1303 1304 (fontified t) 1304 1320 (fontified t face font-lock-string-face) 1320 1322 (fontified t face rust-string-interpolation-face) 1322 1323 (fontified t face font-lock-string-face) 1323 1326 (fontified t) 1326 1330 (fontified t face font-lock-keyword-face) 1330 1349 (fontified t) 1349 1352 (fontified t face font-lock-keyword-face) 1352 1353 (fontified t) 1353 1366 (fontified t face font-lock-variable-name-face) 1366 1369 (fontified t) 1369 1376 (fontified t face rust-builtin-formatting-macro-face) 1376 1390 (fontified t) 1390 1417 (fontified t face font-lock-string-face) 1417 1419 (fontified t face rust-string-interpolation-face) 1419 1423 (fontified t face font-lock-string-face) 1423 1425 (fontified t face rust-string-interpolation-face) 1425 1430 (fontified t face font-lock-string-face) 1430 1432 (fontified t) 1432 1444 (fontified t) 1444 1448 (fontified t face font-lock-keyword-face) 1448 1454 (fontified t) 1454 1464 (fontified t) 1464 1474 (fontified t) 1474 1475 (fontified t) 1475 1476 (fontified t) 1476 1480 (fontified t face font-lock-keyword-face) 1480 1489 (fontified t) 1489 1508 (fontified t) 1508 1511 (fontified t face font-lock-keyword-face) 1511 1512 (fontified t) 1512 1515 (fontified t face font-lock-keyword-face) 1515 1516 (fontified t) 1516 1522 (fontified t face font-lock-variable-name-face) 1522 1559 (fontified t) 1559 1563 (fontified t face font-lock-keyword-face) 1563 1579 (fontified t) 1579 1582 (fontified t face font-lock-keyword-face) 1582 1590 (fontified t) 1590 1591 (fontified t face rust-question-mark-face) 1591 1601 (fontified t) 1601 1607 (fontified t face font-lock-keyword-face) 1607 1608 (fontified t) 1608 1610 (fontified t face font-lock-type-face) 1610 1611 (fontified t) 1611 1616 (fontified t face font-lock-type-face) 1616 1618 (fontified t) 1618 1626 (fontified t face font-lock-type-face) 1626 1638 (fontified t) 1638 1640 (fontified t face font-lock-keyword-face) 1640 1641 (fontified t) 1641 1651 (fontified t face font-lock-function-name-face) 1651 1655 (fontified t) 1655 1656 (fontified t syntax-table #2#) 1656 1657 (fontified t) 1657 1661 (fontified t face font-lock-keyword-face) 1661 1662 (fontified t) 1662 1668 (fontified t face font-lock-type-face) 1668 1669 (fontified t) 1669 1673 (fontified t face font-lock-type-face) 1673 1676 (fontified t) 1676 1685 (fontified t face font-lock-type-face) 1685 1687 (fontified t) 1687 1692 (fontified t face font-lock-type-face) 1692 1695 (fontified t) 1695 1698 (fontified t face font-lock-type-face) 1698 1699 (fontified t) 1699 1704 (fontified t face font-lock-type-face) 1704 1713 (fontified t) 1713 1716 (fontified t face font-lock-keyword-face) 1716 1717 (fontified t) 1717 1724 (fontified t face font-lock-variable-name-face) 1724 1727 (fontified t) 1727 1743 (fontified t face font-lock-string-face) 1743 1759 (fontified t) 1759 1784 (fontified t face font-lock-string-face) 1784 1791 (fontified t) 1791 1794 (fontified t face font-lock-keyword-face) 1794 1795 (fontified t) 1795 1805 (fontified t face font-lock-variable-name-face) 1805 1808 (fontified t) 1808 1817 (fontified t face font-lock-type-face) 1817 1880 (fontified t) 1880 1882 (fontified t face font-lock-type-face) 1882 1913 (fontified t) 1913 1916 (fontified t face font-lock-type-face) 1916 1929 (fontified t) 1929 1931 (fontified t face font-lock-keyword-face) 1931 1932 (fontified t) 1932 1950 (fontified t face font-lock-function-name-face) 1950 1951 (fontified t) 1951 1953 (fontified t face font-lock-variable-name-face) 1953 1955 (fontified t) 1955 1964 (fontified t face font-lock-type-face) 1964 1965 (fontified t) 1965 1974 (face font-lock-type-face fontified t) 1974 1977 (fontified t) 1977 1984 (face font-lock-variable-name-face fontified t) 1984 1986 (fontified t) 1986 1992 (face font-lock-type-face fontified t) 1992 1996 (fontified t) 2132 2133 (syntax-table #2#) 2913 2914 (syntax-table #1#)) . 1) (undo-tree-id9829 . 5612) (undo-tree-id9830 . -952) (undo-tree-id9831 . 5620) (undo-tree-id9832 . -949) (undo-tree-id9833 . -102) (undo-tree-id9834 . -108) (undo-tree-id9835 . -102) (undo-tree-id9836 . -108) (undo-tree-id9837 . -952) (undo-tree-id9838 . -951) (undo-tree-id9839 . -952) (undo-tree-id9840 . -373) (undo-tree-id9841 . -952) (undo-tree-id9842 . -952) (undo-tree-id9843 . -952) (undo-tree-id9844 . -951) (undo-tree-id9845 . 5644) (undo-tree-id9846 . -922) (undo-tree-id9847 . 5643) (undo-tree-id9848 . -951) (undo-tree-id9849 . 5614) (undo-tree-id9850 . -952) (undo-tree-id9851 . -952) (undo-tree-id9852 . -952) (undo-tree-id9853 . -952) (undo-tree-id9854 . -373) (undo-tree-id9855 . -952) (undo-tree-id9856 . -952) (undo-tree-id9857 . -373) (undo-tree-id9858 . -952) (undo-tree-id9859 . -952) (undo-tree-id9860 . -373) (undo-tree-id9861 . -952) (undo-tree-id9862 . -952) (undo-tree-id9863 . -373) (undo-tree-id9864 . -952) (undo-tree-id9865 . -952) (undo-tree-id9866 . -373) (undo-tree-id9867 . -952) (undo-tree-id9868 . -952) (undo-tree-id9869 . -373) (undo-tree-id9870 . -952) (undo-tree-id9871 . -952) (undo-tree-id9872 . -373) (undo-tree-id9873 . -952) (undo-tree-id9874 . -952) (undo-tree-id9875 . -373) (undo-tree-id9876 . -952) (undo-tree-id9877 . -952) (undo-tree-id9878 . -373) 953) nil (23732 43965 992332 964000) 0 nil]) ((953 . 954)) nil (23732 43965 992340 211000) 0 nil]) ((947 . 951) (932 . 947) (#("b" 0 1 (fontified t face font-lock-string-face)) . -932) (undo-tree-id9879 . -1) 933 (924 . 933) (923 . 925) (#("\"" 0 1 (fontified nil)) . -923) (923 . 924) (922 . 924) (#("(" 0 1 (fontified nil)) . -922) (922 . 923) (#("\"\"" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 922) (undo-tree-id9880 . -1) 923 (922 . 924) (#("\"" 0 1 (fontified nil)) . -922) (920 . 923) (915 . 920) (#("?;" 0 1 (fontified t face rust-question-mark-face) 1 2 (fontified t)) . 915) (t 23732 43890 52593 356000)) nil (23732 43965 992348 856000) 0 nil]) ((937 . 938) (#(")" 0 1 (fontified nil)) . 937) (935 . 937) (934 . 936) (#("(" 0 1 (fontified nil)) . -934) (931 . 935) (#("b" 0 1 (fontified t)) . -931) (undo-tree-id9821 . -1) (#("j" 0 1 (fontified t)) . -932) (undo-tree-id9822 . -1) (#("!" 0 1 (fontified t)) . -933) (undo-tree-id9823 . -1) 934 (930 . 934) (917 . 930) 892) nil (23732 43889 985184 506000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 914) (913 . 914) (912 . 914) (#("(" 0 1 (fontified nil)) . -912) (907 . 913) (#("l" 0 1 (fontified t)) . -907) (undo-tree-id9824 . -1) (#("o" 0 1 (fontified t)) . -908) (undo-tree-id9825 . -1) 909 (906 . 909) (895 . 906) (#("json_" 0 5 (fontified t)) . -895) (undo-tree-id9826 . -1) (undo-tree-id9827 . -5) 900 (897 . 900) (894 . 897) (#("data" 0 4 (fontified t)) . 894) (undo-tree-id9828 . -2) 896 (t 23732 43858 709406 194000)) nil (23732 43889 985203 655000) 0 nil]) ((1 . 6492) (#("use futures::{Async, Future, Poll};
use regex::Regex;
use serde_derive::Deserialize;
use serde_json::{Result, Value};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use warp::{path, Filter, Stream};

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Stream for Receiver {
    type Item = String;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<String>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            let mut json_string = \"\".to_string();
            let re = Regex::new(r\"(?x)(?P<json>\\{.*\\})\").unwrap();

            if let Some(cap) = re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read])) {
                json_string = cap[\"json\"].to_string();
            }
let v: Value = serde_json::from_str(data)?;
            return Ok(Async::Ready(Some(json_string)));
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
    channel: String,
}
impl Future for Sender {
    type Item = ();
    type Error = Box<Error>;
    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        println!(\"Subscribing to {}\", &self.channel);
        let subscribe_cmd = format!(
            \"*2\\r\\n$9\\r\\nsubscribe\\r\\n${}\\r\\n{}\\r\\n\",
            self.channel.len(),
            self.channel
        );
        let mut buffer = subscribe_cmd.as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn get_socket() -> impl Future<Item = TcpStream, Error = Box<Error>> {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    connection
        .and_then(|socket| Ok(socket))
        .map_err(|e| Box::new(e))
}

fn send_subscribe_cmd(tx: WriteHalf<TcpStream>, channel: String) {
    let sender = Sender { tx, channel };
    tokio::spawn(sender.map_err(|e| eprintln!(\"{}\", e)));
}

fn stream_from(timeline: String) -> impl Future<Item = Receiver, Error = warp::reject::Rejection> {
    get_socket()
        .and_then(move |socket| {
            let (rx, tx) = socket.split();
            send_subscribe_cmd(tx, format!(\"timeline:{}\", timeline));
            let stream_of_data_from_redis = Receiver { rx };
            Ok(stream_of_data_from_redis)
        })
        .and_then(|stream| Ok(stream))
        .map_err(|e| warp::reject::custom(e))
}

#[derive(Deserialize)]
struct Media {
    only_media: String,
}
#[derive(Deserialize)]
struct Hashtag {
    tag: String,
}
#[derive(Deserialize)]
struct List {
    list: String,
}

fn main() {
    use warp::path;
    let base = path!(\"api\" / \"v1\" / \"streaming\");

    // GET /api/v1/streaming/user
    let user_timeline = base
        .and(path(\"user\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| stream_from(\"1\".to_string()));

    // GET /api/v1/streaming/user/notification
    let user_timeline_notifications = base
        .and(path!(\"user\" / \"notification\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| {
            let full_stream = stream_from(\"1\".to_string());
            // TODO: filter stream to just have notifications
            full_stream
        });

    // GET /api/v1/streaming/public
    let public_timeline = base
        .and(path(\"public\"))
        .and(path::end())
        .map(|| stream_from(\"public\".to_string()));

    // GET /api/v1/streaming/public?only_media=true
    let public_timeline_media = base
        .and(path(\"public\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                stream_from(\"public:media\".to_string())
            } else {
                stream_from(\"public\".to_string())
            }
        });

    // GET /api/v1/streaming/public/local
    let local_timeline = base
        .and(path!(\"public\" / \"local\"))
        .and(path::end())
        .map(|| stream_from(\"public:local\".to_string()));

    // GET /api/v1/streaming/public/local?only_media=true
    let local_timeline_media = base
        .and(path!(\"public\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                stream_from(\"public:local:media\".to_string())
            } else {
                stream_from(\"public:local\".to_string())
            }
        });

    // GET /api/v1/streaming/direct
    let direct_timeline = base
        .and(path(\"direct\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| stream_from(\"direct:1\".to_string()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag
    let hashtag_timeline = base
        .and(path(\"hashtag\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| stream_from(format!(\"hashtag:{}\", q.tag)));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag
    let hashtag_timeline_local = base
        .and(path!(\"hashtag\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| stream_from(format!(\"hashtag:{}:local\", q.tag)));

    // GET /api/v1/streaming/list?list=:list_id
    let list_timeline = base
        .and(path(\"list\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: List| stream_from(format!(\"list:{}\", q.list)));

    let routes = user_timeline
        .or(user_timeline_notifications)
        .unify()
        .or(public_timeline_media)
        .unify()
        .or(public_timeline)
        .unify()
        .or(local_timeline_media)
        .unify()
        .or(local_timeline)
        .unify()
        .or(direct_timeline)
        .unify()
        .or(hashtag_timeline)
        .unify()
        .or(hashtag_timeline_local)
        .unify()
        .or(list_timeline)
        .unify()
        .and_then(|event_stream| event_stream)
        .and(warp::sse())
        .map(|event_stream: Receiver, sse: warp::sse::Sse| {
            sse.reply(warp::sse::keep(
                event_stream.map(|item| {
                    // let v: Value = serde_json::from_str(item.as_str()).unwrap();
                    dbg!(&item);
                    warp::sse::data(item)
                }),
                None,
            ))
        });

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 19 (fontified t face font-lock-type-face) 19 21 (fontified t) 21 27 (fontified t face font-lock-type-face) 27 29 (fontified t) 29 33 (fontified t face font-lock-type-face) 33 35 (fontified t) 35 36 (fontified t) 36 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 45 (fontified t face font-lock-constant-face) 45 47 (fontified t) 47 52 (fontified t face font-lock-type-face) 52 54 (fontified t) 54 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t) 58 70 (fontified t face font-lock-constant-face) 70 72 (fontified t) 72 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 88 (fontified t face font-lock-keyword-face) 88 89 (fontified t) 89 99 (fontified t face font-lock-constant-face) 99 102 (fontified t) 102 108 (fontified t face font-lock-type-face) 108 110 (fontified t) 110 115 (fontified t face font-lock-type-face) 115 118 (fontified t) 118 121 (fontified t face font-lock-keyword-face) 121 122 (fontified t) 122 127 (fontified t face font-lock-constant-face) 127 129 (fontified t) 129 131 (fontified t face font-lock-constant-face) 131 134 (fontified t) 134 143 (fontified t face font-lock-type-face) 143 145 (fontified t) 145 155 (fontified t face font-lock-type-face) 155 157 (fontified t) 157 162 (fontified t face font-lock-type-face) 162 164 (fontified t) 164 172 (fontified t face font-lock-type-face) 172 174 (fontified t) 174 183 (fontified t face font-lock-type-face) 183 186 (fontified t) 186 189 (fontified t face font-lock-keyword-face) 189 190 (fontified t) 190 195 (fontified t face font-lock-constant-face) 195 197 (fontified t) 197 200 (fontified t face font-lock-constant-face) 200 202 (fontified t) 202 211 (fontified t face font-lock-type-face) 211 213 (fontified t) 213 216 (fontified t face font-lock-keyword-face) 216 217 (fontified t) 217 221 (fontified t face font-lock-constant-face) 221 230 (fontified t) 230 236 (fontified t face font-lock-type-face) 236 238 (fontified t) 238 244 (fontified t face font-lock-type-face) 244 248 (fontified t) 248 254 (fontified t face font-lock-keyword-face) 254 255 (fontified t) 255 263 (fontified t face font-lock-type-face) 263 270 (fontified t) 270 272 (fontified t face font-lock-variable-name-face) 272 274 (fontified t) 274 282 (fontified t face font-lock-type-face) 282 283 (fontified t) 283 292 (fontified t face font-lock-type-face) 292 297 (fontified t) 297 301 (fontified t face font-lock-keyword-face) 301 302 (fontified t) 302 308 (fontified t face font-lock-type-face) 308 309 (fontified t) 309 312 (fontified t face font-lock-keyword-face) 312 313 (fontified t) 313 321 (fontified t face font-lock-type-face) 321 328 (fontified t) 328 332 (fontified t face font-lock-keyword-face) 332 333 (fontified t) 333 337 (fontified t face font-lock-type-face) 337 340 (fontified t) 340 346 (fontified t face font-lock-type-face) 346 352 (fontified t) 352 356 (fontified t face font-lock-keyword-face) 356 357 (fontified t) 357 362 (fontified t face font-lock-type-face) 362 365 (fontified t) 365 370 (fontified t face font-lock-type-face) 370 377 (fontified t) 377 379 (fontified t face font-lock-keyword-face) 379 380 (fontified t) 380 384 (fontified t face font-lock-function-name-face) 384 386 (fontified t) 386 389 (fontified t face font-lock-keyword-face) 389 390 (fontified t) 390 394 (fontified t face font-lock-keyword-face) 394 397 (fontified t) 397 398 (fontified t syntax-table #2#) 398 399 (fontified t) 399 403 (fontified t face font-lock-type-face) 403 404 (fontified t) 404 410 (fontified t face font-lock-type-face) 410 411 (fontified t) 411 417 (fontified t face font-lock-type-face) 417 420 (fontified t) 420 424 (fontified t face font-lock-type-face) 424 426 (fontified t) 426 431 (fontified t face font-lock-type-face) 431 443 (fontified t) 443 446 (fontified t face font-lock-keyword-face) 446 447 (fontified t) 447 450 (fontified t face font-lock-keyword-face) 450 451 (fontified t) 451 457 (fontified t face font-lock-variable-name-face) 457 460 (fontified t) 460 464 (fontified t face font-lock-preprocessor-face) 464 485 (fontified t) 485 490 (fontified t face font-lock-keyword-face) 490 491 (fontified t) 491 494 (fontified t face font-lock-keyword-face) 494 495 (fontified t) 495 500 (fontified t face font-lock-type-face) 500 502 (fontified t) 502 507 (fontified t face font-lock-type-face) 507 526 (fontified t) 526 530 (fontified t face font-lock-keyword-face) 530 535 (fontified t) 535 545 (fontified t) 545 548 (fontified t face font-lock-keyword-face) 548 556 (fontified t) 556 557 (fontified t face rust-question-mark-face) 557 560 (fontified t) 560 572 (fontified t) 572 575 (fontified t face font-lock-keyword-face) 575 576 (fontified t) 576 579 (fontified t face font-lock-keyword-face) 579 580 (fontified t) 580 591 (fontified t face font-lock-variable-name-face) 591 594 (fontified t) 594 596 (fontified t face font-lock-string-face) 596 622 (fontified t) 622 625 (fontified t face font-lock-keyword-face) 625 626 (fontified t) 626 628 (fontified t face font-lock-variable-name-face) 628 631 (fontified t) 631 636 (fontified t face font-lock-type-face) 636 642 (fontified t) 642 643 (fontified t syntax-table #1# face font-lock-string-face) 643 664 (fontified t face font-lock-string-face) 664 665 (fontified t syntax-table #3# face font-lock-string-face) 665 690 (fontified t) 690 692 (fontified t face font-lock-keyword-face) 692 693 (fontified t) 693 696 (fontified t face font-lock-keyword-face) 696 697 (fontified t) 697 701 (fontified t face font-lock-type-face) 701 722 (fontified t) 722 728 (fontified t face font-lock-type-face) 728 810 (fontified t) 810 816 (fontified t face font-lock-string-face) 816 831 (fontified t) 831 845 (fontified t) 845 848 (fontified t face font-lock-keyword-face) 848 849 (fontified t) 849 850 (fontified t face font-lock-variable-name-face) 850 852 (fontified t) 852 857 (fontified t face font-lock-type-face) 857 860 (fontified t) 860 870 (fontified t face font-lock-constant-face) 870 886 (fontified t) 886 887 (fontified t face rust-question-mark-face) 887 888 (fontified t rear-nonsticky t) 888 889 (fontified t) 889 901 (fontified t) 901 907 (fontified t face font-lock-keyword-face) 907 908 (fontified t) 908 910 (fontified t face font-lock-type-face) 910 911 (fontified t) 911 916 (fontified t face font-lock-type-face) 916 918 (fontified t) 918 923 (fontified t face font-lock-type-face) 923 924 (fontified t) 924 928 (fontified t face font-lock-type-face) 928 963 (fontified t) 963 969 (fontified t face font-lock-keyword-face) 969 970 (fontified t) 970 972 (fontified t face font-lock-type-face) 972 973 (fontified t) 973 978 (fontified t face font-lock-type-face) 978 980 (fontified t) 980 988 (fontified t face font-lock-type-face) 988 1000 (fontified t) 1000 1006 (fontified t face font-lock-keyword-face) 1006 1007 (fontified t) 1007 1013 (fontified t face font-lock-type-face) 1013 1020 (fontified t) 1020 1022 (fontified t face font-lock-variable-name-face) 1022 1024 (fontified t) 1024 1033 (fontified t face font-lock-type-face) 1033 1034 (fontified t) 1034 1043 (fontified t face font-lock-type-face) 1043 1050 (fontified t) 1050 1057 (fontified t face font-lock-variable-name-face) 1057 1059 (fontified t) 1059 1065 (fontified t face font-lock-type-face) 1065 1069 (fontified t) 1069 1073 (fontified t face font-lock-keyword-face) 1073 1074 (fontified t) 1074 1080 (fontified t face font-lock-type-face) 1080 1081 (fontified t) 1081 1084 (fontified t face font-lock-keyword-face) 1084 1085 (fontified t) 1085 1091 (fontified t face font-lock-type-face) 1091 1098 (fontified t) 1098 1102 (fontified t face font-lock-keyword-face) 1102 1103 (fontified t) 1103 1107 (fontified t face font-lock-type-face) 1107 1114 (fontified t) 1114 1118 (fontified t) 1118 1122 (fontified t face font-lock-keyword-face) 1122 1123 (fontified t) 1123 1128 (fontified t face font-lock-type-face) 1128 1131 (fontified t) 1131 1134 (fontified t face font-lock-type-face) 1134 1135 (fontified t) 1135 1140 (fontified t face font-lock-type-face) 1140 1147 (fontified t) 1147 1149 (fontified t face font-lock-keyword-face) 1149 1150 (fontified t) 1150 1154 (fontified t face font-lock-function-name-face) 1154 1156 (fontified t) 1156 1159 (fontified t face font-lock-keyword-face) 1159 1160 (fontified t) 1160 1164 (fontified t face font-lock-keyword-face) 1164 1167 (fontified t) 1167 1168 (syntax-table #2# fontified t) 1168 1169 (fontified t) 1169 1173 (fontified t face font-lock-type-face) 1173 1174 (fontified t) 1174 1178 (fontified t face font-lock-type-face) 1178 1180 (fontified t) 1180 1184 (fontified t face font-lock-type-face) 1184 1186 (fontified t) 1186 1190 (fontified t face font-lock-type-face) 1190 1192 (fontified t) 1192 1197 (fontified t face font-lock-type-face) 1197 1209 (fontified t) 1209 1217 (fontified t face rust-builtin-formatting-macro-face) 1217 1218 (fontified t) 1218 1234 (fontified t face font-lock-string-face) 1234 1236 (fontified t face rust-string-interpolation-face) 1236 1237 (fontified t face font-lock-string-face) 1237 1240 (fontified t) 1240 1244 (fontified t face font-lock-keyword-face) 1244 1263 (fontified t) 1263 1266 (fontified t face font-lock-keyword-face) 1266 1267 (fontified t) 1267 1280 (fontified t face font-lock-variable-name-face) 1280 1283 (fontified t) 1283 1290 (fontified t face rust-builtin-formatting-macro-face) 1290 1304 (fontified t) 1304 1331 (fontified t face font-lock-string-face) 1331 1333 (fontified t face rust-string-interpolation-face) 1333 1337 (fontified t face font-lock-string-face) 1337 1339 (fontified t face rust-string-interpolation-face) 1339 1344 (fontified t face font-lock-string-face) 1344 1358 (fontified t) 1358 1362 (fontified t face font-lock-keyword-face) 1362 1374 (fontified t) 1374 1378 (fontified t) 1378 1388 (fontified t) 1388 1389 (fontified t) 1389 1390 (fontified t) 1390 1394 (face font-lock-keyword-face fontified t) 1394 1403 (fontified t) 1422 1425 (face font-lock-keyword-face) 1426 1429 (face font-lock-keyword-face) 1430 1436 (face font-lock-variable-name-face) 1473 1477 (face font-lock-keyword-face) 1493 1496 (face font-lock-keyword-face) 1504 1505 (face rust-question-mark-face) 1515 1521 (face font-lock-keyword-face) 1522 1524 (face font-lock-type-face) 1525 1530 (face font-lock-type-face) 1532 1540 (face font-lock-type-face) 1552 1554 (face font-lock-keyword-face) 1555 1565 (face font-lock-function-name-face) 1569 1570 (syntax-table #2#) 1571 1575 (face font-lock-keyword-face) 1576 1582 (face font-lock-type-face) 1583 1587 (face font-lock-type-face) 1590 1599 (face font-lock-type-face) 1601 1606 (face font-lock-type-face) 1609 1612 (face font-lock-type-face) 1613 1614 (face font-lock-type-face) 1614 1618 (face font-lock-type-face)) . 1) (undo-tree-id9803 . -845) (undo-tree-id9804 . -845) (undo-tree-id9805 . -887) (undo-tree-id9806 . -845) (undo-tree-id9807 . -845) (undo-tree-id9808 . -845) (undo-tree-id9809 . -845) (undo-tree-id9810 . -845) (undo-tree-id9811 . -845) (undo-tree-id9812 . -887) (undo-tree-id9813 . -887) (undo-tree-id9814 . -845) (undo-tree-id9815 . -102) (undo-tree-id9816 . -108) (undo-tree-id9817 . -881) (undo-tree-id9818 . -885) (undo-tree-id9819 . -102) (undo-tree-id9820 . -108) 888) nil (23732 43858 652720 256000) 0 nil]) ((nil rear-nonsticky nil 888 . 889) (nil fontified nil 846 . 889) (846 . 889) (t 23732 43758 409871 819000)) nil (23732 43858 652727 560000) 0 nil]) ((1 . 6437) (#("use futures::{Async, Future, Poll};
use regex::Regex;
use serde_derive::Deserialize;
use serde_json::{Result, Value};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use warp::{path, Filter, Stream};

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Stream for Receiver {
    type Item = String;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<String>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            let mut json_string = \"\".to_string();
            let re = Regex::new(r\"(?x)(?P<json>\\{.*\\})\").unwrap();

            if let Some(cap) = re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read])) {
                json_string = cap[\"json\"].to_string();
            }
            
            return Ok(Async::Ready(Some(json_string)));
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
    channel: String,
}
impl Future for Sender {
    type Item = ();
    type Error = Box<Error>;
    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        println!(\"Subscribing to {}\", &self.channel);
        let subscribe_cmd = format!(
            \"*2\\r\\n$9\\r\\nsubscribe\\r\\n${}\\r\\n{}\\r\\n\",
            self.channel.len(),
            self.channel
        );
        let mut buffer = subscribe_cmd.as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn get_socket() -> impl Future<Item = TcpStream, Error = Box<Error>> {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    connection
        .and_then(|socket| Ok(socket))
        .map_err(|e| Box::new(e))
}

fn send_subscribe_cmd(tx: WriteHalf<TcpStream>, channel: String) {
    let sender = Sender { tx, channel };
    tokio::spawn(sender.map_err(|e| eprintln!(\"{}\", e)));
}

fn stream_from(timeline: String) -> impl Future<Item = Receiver, Error = warp::reject::Rejection> {
    get_socket()
        .and_then(move |socket| {
            let (rx, tx) = socket.split();
            send_subscribe_cmd(tx, format!(\"timeline:{}\", timeline));
            let stream_of_data_from_redis = Receiver { rx };
            Ok(stream_of_data_from_redis)
        })
        .and_then(|stream| Ok(stream))
        .map_err(|e| warp::reject::custom(e))
}

#[derive(Deserialize)]
struct Media {
    only_media: String,
}
#[derive(Deserialize)]
struct Hashtag {
    tag: String,
}
#[derive(Deserialize)]
struct List {
    list: String,
}

fn main() {
    use warp::path;
    let base = path!(\"api\" / \"v1\" / \"streaming\");

    // GET /api/v1/streaming/user
    let user_timeline = base
        .and(path(\"user\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| stream_from(\"1\".to_string()));

    // GET /api/v1/streaming/user/notification
    let user_timeline_notifications = base
        .and(path!(\"user\" / \"notification\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| {
            let full_stream = stream_from(\"1\".to_string());
            // TODO: filter stream to just have notifications
            full_stream
        });

    // GET /api/v1/streaming/public
    let public_timeline = base
        .and(path(\"public\"))
        .and(path::end())
        .map(|| stream_from(\"public\".to_string()));

    // GET /api/v1/streaming/public?only_media=true
    let public_timeline_media = base
        .and(path(\"public\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                stream_from(\"public:media\".to_string())
            } else {
                stream_from(\"public\".to_string())
            }
        });

    // GET /api/v1/streaming/public/local
    let local_timeline = base
        .and(path!(\"public\" / \"local\"))
        .and(path::end())
        .map(|| stream_from(\"public:local\".to_string()));

    // GET /api/v1/streaming/public/local?only_media=true
    let local_timeline_media = base
        .and(path!(\"public\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                stream_from(\"public:local:media\".to_string())
            } else {
                stream_from(\"public:local\".to_string())
            }
        });

    // GET /api/v1/streaming/direct
    let direct_timeline = base
        .and(path(\"direct\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| stream_from(\"direct:1\".to_string()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag
    let hashtag_timeline = base
        .and(path(\"hashtag\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| stream_from(format!(\"hashtag:{}\", q.tag)));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag
    let hashtag_timeline_local = base
        .and(path!(\"hashtag\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| stream_from(format!(\"hashtag:{}:local\", q.tag)));

    // GET /api/v1/streaming/list?list=:list_id
    let list_timeline = base
        .and(path(\"list\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: List| stream_from(format!(\"list:{}\", q.list)));

    let routes = user_timeline
        .or(user_timeline_notifications)
        .unify()
        .or(public_timeline_media)
        .unify()
        .or(public_timeline)
        .unify()
        .or(local_timeline_media)
        .unify()
        .or(local_timeline)
        .unify()
        .or(direct_timeline)
        .unify()
        .or(hashtag_timeline)
        .unify()
        .or(hashtag_timeline_local)
        .unify()
        .or(list_timeline)
        .unify()
        .and_then(|event_stream| event_stream)
        .and(warp::sse())
        .map(|event_stream: Receiver, sse: warp::sse::Sse| {
            sse.reply(warp::sse::keep(
                event_stream.map(|item| {
                    // let v: Value = serde_json::from_str(item.as_str()).unwrap();
                    dbg!(&item);
                    warp::sse::data(item)
                }),
                None,
            ))
        });

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 19 (fontified t face font-lock-type-face) 19 21 (fontified t) 21 27 (fontified t face font-lock-type-face) 27 29 (fontified t) 29 33 (fontified t face font-lock-type-face) 33 35 (fontified t) 35 36 (fontified t) 36 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 45 (fontified t face font-lock-constant-face) 45 47 (fontified t) 47 52 (fontified t face font-lock-type-face) 52 54 (fontified t) 54 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t) 58 70 (fontified t face font-lock-constant-face) 70 72 (fontified t) 72 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 88 (fontified t face font-lock-keyword-face) 88 89 (fontified t) 89 99 (fontified t face font-lock-constant-face) 99 102 (fontified t) 102 108 (fontified t face font-lock-type-face) 108 110 (fontified t) 110 115 (fontified t face font-lock-type-face) 115 118 (fontified t) 118 121 (fontified t face font-lock-keyword-face) 121 122 (fontified t) 122 127 (fontified t face font-lock-constant-face) 127 129 (fontified t) 129 131 (fontified t face font-lock-constant-face) 131 134 (fontified t) 134 143 (fontified t face font-lock-type-face) 143 145 (fontified t) 145 155 (fontified t face font-lock-type-face) 155 157 (fontified t) 157 162 (fontified t face font-lock-type-face) 162 164 (fontified t) 164 172 (fontified t face font-lock-type-face) 172 174 (fontified t) 174 183 (fontified t face font-lock-type-face) 183 186 (fontified t) 186 189 (fontified t face font-lock-keyword-face) 189 190 (fontified t) 190 195 (fontified t face font-lock-constant-face) 195 197 (fontified t) 197 200 (fontified t face font-lock-constant-face) 200 202 (fontified t) 202 211 (fontified t face font-lock-type-face) 211 213 (fontified t) 213 216 (fontified t face font-lock-keyword-face) 216 217 (fontified t) 217 221 (fontified t face font-lock-constant-face) 221 230 (fontified t) 230 236 (fontified t face font-lock-type-face) 236 238 (fontified t) 238 244 (fontified t face font-lock-type-face) 244 248 (fontified t) 248 254 (fontified t face font-lock-keyword-face) 254 255 (fontified t) 255 263 (fontified t face font-lock-type-face) 263 270 (fontified t) 270 272 (fontified t face font-lock-variable-name-face) 272 274 (fontified t) 274 282 (fontified t face font-lock-type-face) 282 283 (fontified t) 283 292 (fontified t face font-lock-type-face) 292 297 (fontified t) 297 301 (fontified t face font-lock-keyword-face) 301 302 (fontified t) 302 308 (fontified t face font-lock-type-face) 308 309 (fontified t) 309 312 (fontified t face font-lock-keyword-face) 312 313 (fontified t) 313 321 (fontified t face font-lock-type-face) 321 328 (fontified t) 328 332 (fontified t face font-lock-keyword-face) 332 333 (fontified t) 333 337 (fontified t face font-lock-type-face) 337 340 (fontified t) 340 346 (fontified t face font-lock-type-face) 346 352 (fontified t) 352 356 (fontified t face font-lock-keyword-face) 356 357 (fontified t) 357 362 (fontified t face font-lock-type-face) 362 365 (fontified t) 365 370 (fontified t face font-lock-type-face) 370 377 (fontified t) 377 379 (fontified t face font-lock-keyword-face) 379 380 (fontified t) 380 384 (fontified t face font-lock-function-name-face) 384 386 (fontified t) 386 389 (fontified t face font-lock-keyword-face) 389 390 (fontified t) 390 394 (fontified t face font-lock-keyword-face) 394 397 (fontified t) 397 398 (fontified t syntax-table #2#) 398 399 (fontified t) 399 403 (fontified t face font-lock-type-face) 403 404 (fontified t) 404 410 (fontified t face font-lock-type-face) 410 411 (fontified t) 411 417 (fontified t face font-lock-type-face) 417 420 (fontified t) 420 424 (fontified t face font-lock-type-face) 424 426 (fontified t) 426 431 (fontified t face font-lock-type-face) 431 443 (fontified t) 443 446 (fontified t face font-lock-keyword-face) 446 447 (fontified t) 447 450 (fontified t face font-lock-keyword-face) 450 451 (fontified t) 451 457 (fontified t face font-lock-variable-name-face) 457 460 (fontified t) 460 464 (fontified t face font-lock-preprocessor-face) 464 485 (fontified t) 485 490 (fontified t face font-lock-keyword-face) 490 491 (fontified t) 491 494 (fontified t face font-lock-keyword-face) 494 495 (fontified t) 495 500 (fontified t face font-lock-type-face) 500 502 (fontified t) 502 507 (fontified t face font-lock-type-face) 507 526 (fontified t) 526 530 (fontified t face font-lock-keyword-face) 530 535 (fontified t) 535 545 (fontified t) 545 548 (fontified t face font-lock-keyword-face) 548 556 (fontified t) 556 557 (fontified t face rust-question-mark-face) 557 560 (fontified t) 560 572 (fontified t) 572 575 (fontified t face font-lock-keyword-face) 575 576 (fontified t) 576 579 (fontified t face font-lock-keyword-face) 579 580 (fontified t) 580 591 (fontified t face font-lock-variable-name-face) 591 594 (fontified t) 594 596 (fontified t face font-lock-string-face) 596 610 (fontified t) 610 622 (fontified t) 622 625 (fontified t face font-lock-keyword-face) 625 626 (fontified t) 626 628 (fontified t face font-lock-variable-name-face) 628 631 (fontified t) 631 636 (fontified t face font-lock-type-face) 636 642 (fontified t) 642 643 (fontified t syntax-table #1# face font-lock-string-face) 643 648 (fontified t face font-lock-string-face) 648 651 (fontified t face font-lock-string-face) 651 652 (fontified t face font-lock-string-face) 652 656 (fontified t face font-lock-string-face) 656 657 (fontified t face font-lock-string-face) 657 658 (fontified t face font-lock-string-face) 658 664 (fontified t face font-lock-string-face) 664 665 (fontified t syntax-table #3# face font-lock-string-face) 665 666 (fontified t) 666 676 (fontified t) 676 677 (fontified t) 677 678 (fontified t) 678 690 (fontified t) 690 692 (fontified t face font-lock-keyword-face) 692 693 (fontified t) 693 696 (fontified t face font-lock-keyword-face) 696 697 (fontified t) 697 701 (fontified t face font-lock-type-face) 701 722 (fontified t) 722 728 (fontified t face font-lock-type-face) 728 774 (fontified t) 774 776 (fontified t) 776 792 (fontified t) 792 810 (fontified t) 810 816 (fontified t face font-lock-string-face) 816 831 (fontified t) 831 844 (fontified t) 844 845 (fontified t) 845 857 (fontified t) 857 858 (fontified t) 858 870 (fontified t) 870 876 (fontified t face font-lock-keyword-face) 876 877 (fontified t) 877 879 (fontified t face font-lock-type-face) 879 880 (fontified t) 880 885 (fontified t face font-lock-type-face) 885 887 (fontified t) 887 892 (fontified t face font-lock-type-face) 892 893 (fontified t) 893 897 (fontified t face font-lock-type-face) 897 932 (fontified t) 932 938 (fontified t face font-lock-keyword-face) 938 939 (fontified t) 939 941 (fontified t face font-lock-type-face) 941 942 (fontified t) 942 947 (fontified t face font-lock-type-face) 947 949 (fontified t) 949 957 (fontified t face font-lock-type-face) 957 960 (fontified t) 960 965 (fontified t) 965 969 (fontified t) 969 975 (fontified t face font-lock-keyword-face) 975 976 (fontified t) 976 982 (fontified t face font-lock-type-face) 982 989 (fontified t) 989 991 (fontified t face font-lock-variable-name-face) 991 993 (fontified t) 993 1002 (fontified t face font-lock-type-face) 1002 1003 (fontified t) 1003 1012 (fontified t face font-lock-type-face) 1012 1019 (fontified t) 1019 1026 (fontified t face font-lock-variable-name-face) 1026 1028 (fontified t) 1028 1034 (fontified t face font-lock-type-face) 1034 1038 (fontified t) 1038 1042 (fontified t face font-lock-keyword-face) 1042 1043 (fontified t) 1043 1049 (fontified t face font-lock-type-face) 1049 1050 (fontified t) 1050 1053 (fontified t face font-lock-keyword-face) 1053 1054 (fontified t) 1054 1060 (fontified t face font-lock-type-face) 1060 1063 (fontified t) 1063 1067 (fontified t) 1067 1071 (fontified t face font-lock-keyword-face) 1071 1072 (fontified t) 1072 1076 (fontified t face font-lock-type-face) 1076 1087 (fontified t) 1087 1091 (fontified t face font-lock-keyword-face) 1091 1092 (fontified t) 1092 1097 (fontified t face font-lock-type-face) 1097 1100 (fontified t) 1100 1103 (fontified t face font-lock-type-face) 1103 1104 (fontified t) 1104 1109 (fontified t face font-lock-type-face) 1109 1110 (fontified t) 1110 1112 (fontified t) 1112 1116 (fontified t) 1116 1118 (fontified t face font-lock-keyword-face) 1118 1119 (fontified t) 1119 1123 (fontified t face font-lock-function-name-face) 1123 1125 (fontified t) 1125 1128 (fontified t face font-lock-keyword-face) 1128 1129 (fontified t) 1129 1132 (fontified t face font-lock-keyword-face) 1132 1133 (fontified t face font-lock-keyword-face) 1133 1136 (fontified t) 1136 1137 (fontified t syntax-table #2#) 1137 1138 (fontified t) 1138 1142 (fontified t face font-lock-type-face) 1142 1143 (fontified t) 1143 1147 (fontified t face font-lock-type-face) 1147 1149 (fontified t) 1149 1150 (fontified t face font-lock-type-face) 1150 1153 (fontified t face font-lock-type-face) 1153 1155 (fontified t) 1155 1159 (fontified t face font-lock-type-face) 1159 1161 (fontified t) 1161 1166 (fontified t face font-lock-type-face) 1166 1167 (fontified t) 1167 1170 (fontified t) 1170 1178 (fontified t) 1178 1186 (fontified t face rust-builtin-formatting-macro-face) 1186 1187 (fontified t) 1187 1190 (fontified t face font-lock-string-face) 1190 1191 (face font-lock-string-face fontified t) 1191 1203 (face font-lock-string-face fontified t) 1203 1205 (face rust-string-interpolation-face fontified t) 1205 1206 (face font-lock-string-face fontified t) 1206 1209 (fontified t) 1209 1213 (face font-lock-keyword-face fontified t) 1213 1224 (fontified t) 1224 1232 (fontified t) 1232 1235 (fontified t face font-lock-keyword-face) 1235 1236 (fontified t) 1236 1249 (fontified t face font-lock-variable-name-face) 1249 1252 (fontified t) 1252 1259 (fontified t face rust-builtin-formatting-macro-face) 1259 1273 (fontified t) 1273 1289 (fontified t face font-lock-string-face) 1289 1300 (fontified t face font-lock-string-face) 1300 1302 (fontified t face rust-string-interpolation-face) 1302 1306 (fontified t face font-lock-string-face) 1306 1308 (fontified t face rust-string-interpolation-face) 1308 1313 (fontified t face font-lock-string-face) 1313 1315 (fontified t) 1315 1327 (fontified t) 1327 1331 (fontified t face font-lock-keyword-face) 1331 1357 (fontified t) 1357 1358 (fontified t) 1358 1359 (fontified t) 1359 1363 (fontified t face font-lock-keyword-face) 1363 1372 (fontified t) 1372 1391 (fontified t) 1391 1394 (fontified t face font-lock-keyword-face) 1394 1395 (fontified t) 1395 1398 (fontified t face font-lock-keyword-face) 1398 1399 (fontified t) 1399 1405 (fontified t face font-lock-variable-name-face) 1405 1442 (fontified t) 1442 1446 (fontified t face font-lock-keyword-face) 1446 1460 (fontified t) 1460 1462 (fontified t) 1462 1465 (fontified t face font-lock-keyword-face) 1465 1473 (fontified t) 1473 1474 (fontified t face rust-question-mark-face) 1474 1476 (fontified t) 1476 1484 (fontified t) 1484 1490 (fontified t face font-lock-keyword-face) 1490 1491 (fontified t) 1491 1493 (fontified t face font-lock-type-face) 1493 1494 (fontified t) 1494 1499 (fontified t face font-lock-type-face) 1499 1501 (fontified t) 1501 1509 (fontified t face font-lock-type-face) 1509 1521 (fontified t) 1521 1523 (fontified t face font-lock-keyword-face) 1523 1524 (fontified t) 1524 1534 (fontified t face font-lock-function-name-face) 1534 1538 (fontified t) 1538 1539 (fontified t syntax-table #2#) 1539 1540 (fontified t) 1540 1544 (fontified t face font-lock-keyword-face) 1544 1545 (fontified t) 1545 1551 (fontified t face font-lock-type-face) 1551 1552 (fontified t) 1552 1556 (fontified t face font-lock-type-face) 1556 1559 (fontified t) 1559 1563 (fontified t face font-lock-type-face) 1563 1568 (fontified t face font-lock-type-face) 1568 1570 (fontified t) 1570 1575 (fontified t face font-lock-type-face) 1575 1578 (fontified t) 1578 1581 (fontified t face font-lock-type-face) 1581 1582 (fontified t) 1582 1587 (fontified t face font-lock-type-face) 1587 1592 (fontified t) 1592 1596 (fontified t) 1596 1599 (fontified t face font-lock-keyword-face) 1599 1600 (fontified t) 1600 1607 (fontified t face font-lock-variable-name-face) 1607 1610 (fontified t) 1610 1626 (fontified t face font-lock-string-face) 1626 1642 (fontified t) 1642 1667 (fontified t face font-lock-string-face) 1667 1670 (fontified t) 1670 1674 (fontified t) 1674 1677 (fontified t face font-lock-keyword-face) 1677 1678 (fontified t) 1678 1688 (fontified t face font-lock-variable-name-face) 1688 1691 (fontified t) 1691 1700 (fontified t face font-lock-type-face) 1700 1724 (fontified t) 1724 1736 (fontified t) 1763 1765 (face font-lock-type-face) 1796 1799 (face font-lock-type-face) 1812 1814 (face font-lock-keyword-face) 1815 1833 (face font-lock-function-name-face) 1834 1836 (face font-lock-variable-name-face) 1838 1847 (face font-lock-type-face) 1848 1857 (face font-lock-type-face) 1860 1867 (face font-lock-variable-name-face) 1869 1872 (face font-lock-type-face) 1872 1875 (face font-lock-type-face) 2015 2016 (syntax-table #2#) 2796 2797 (syntax-table #1#)) . 1) (undo-tree-id9725 . 5591) (undo-tree-id9726 . -857) (undo-tree-id9727 . -857) (undo-tree-id9728 . -857) (undo-tree-id9729 . -698) (undo-tree-id9730 . -698) (undo-tree-id9731 . -857) (undo-tree-id9732 . -856) (undo-tree-id9733 . -856) (undo-tree-id9734 . -856) (undo-tree-id9735 . -843) (undo-tree-id9736 . -844) (undo-tree-id9737 . -1187) (undo-tree-id9738 . -1188) (undo-tree-id9739 . -774) (undo-tree-id9740 . -775) (undo-tree-id9741 . -666) (undo-tree-id9742 . -843) (undo-tree-id9743 . 5796) (undo-tree-id9744 . -656) (undo-tree-id9745 . -665) (undo-tree-id9746 . -666) (undo-tree-id9747 . -665) (undo-tree-id9748 . -666) (undo-tree-id9749 . -665) (undo-tree-id9750 . -666) (undo-tree-id9751 . -665) (undo-tree-id9752 . -666) (undo-tree-id9753 . -664) (undo-tree-id9754 . -665) (undo-tree-id9755 . -664) (undo-tree-id9756 . -665) (undo-tree-id9757 . -665) (undo-tree-id9758 . -666) (undo-tree-id9759 . -665) (undo-tree-id9760 . -666) (undo-tree-id9761 . -663) (undo-tree-id9762 . -664) (undo-tree-id9763 . -648) (undo-tree-id9764 . -649) (undo-tree-id9765 . -647) (undo-tree-id9766 . -648) (undo-tree-id9767 . -644) (undo-tree-id9768 . -645) (undo-tree-id9769 . -641) (undo-tree-id9770 . -642) (undo-tree-id9771 . -666) (undo-tree-id9772 . -666) (undo-tree-id9773 . -665) (undo-tree-id9774 . -666) (undo-tree-id9775 . -665) (undo-tree-id9776 . -666) (undo-tree-id9777 . -665) (undo-tree-id9778 . -666) (undo-tree-id9779 . -665) (undo-tree-id9780 . -666) (undo-tree-id9781 . -664) (undo-tree-id9782 . -665) (undo-tree-id9783 . -664) (undo-tree-id9784 . -665) (undo-tree-id9785 . -665) (undo-tree-id9786 . -666) (undo-tree-id9787 . -665) (undo-tree-id9788 . -666) (undo-tree-id9789 . -663) (undo-tree-id9790 . -664) (undo-tree-id9791 . -648) (undo-tree-id9792 . -649) (undo-tree-id9793 . -647) (undo-tree-id9794 . -648) (undo-tree-id9795 . -644) (undo-tree-id9796 . -645) (undo-tree-id9797 . -641) (undo-tree-id9798 . -642) (undo-tree-id9799 . -845) (undo-tree-id9800 . -857) (undo-tree-id9801 . -856) (undo-tree-id9802 . -666)) ((1 . 6449) (#("use futures::{Async, Future, Poll};
use regex::Regex;
use serde_derive::Deserialize;
use serde_json::{Result, Value};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use warp::{path, Filter, Stream};

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Stream for Receiver {
    type Item = String;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<String>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            let mut json_string = \"\".to_string();
            let re = Regex::new(r\"(?x)(?P<json>\\{.*\\})\").unwrap();

            if let Some(cap) = re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read])) {
                json_string = cap[\"json\"].to_string();
            }

            return Ok(Async::Ready(Some(json_string)));
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
    channel: String,
}
impl Future for Sender {
    type Item = ();
    type Error = Box<Error>;
    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        println!(\"Subscribing to {}\", &self.channel);
        let subscribe_cmd = format!(
            \"*2\\r\\n$9\\r\\nsubscribe\\r\\n${}\\r\\n{}\\r\\n\",
            self.channel.len(),
            self.channel
        );
        let mut buffer = subscribe_cmd.as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn get_socket() -> impl Future<Item = TcpStream, Error = Box<Error>> {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    connection
        .and_then(|socket| Ok(socket))
        .map_err(|e| Box::new(e))
}

fn send_subscribe_cmd(tx: WriteHalf<TcpStream>, channel: String) {
    let sender = Sender { tx, channel };
    tokio::spawn(sender.map_err(|e| eprintln!(\"{}\", e)));
}

fn stream_from(timeline: String) -> impl Future<Item = Receiver, Error = warp::reject::Rejection> {
    get_socket()
        .and_then(move |socket| {
            let (rx, tx) = socket.split();
            send_subscribe_cmd(tx, format!(\"timeline:{}\", timeline));
            let stream_of_data_from_redis = Receiver { rx };
            Ok(stream_of_data_from_redis)
        })
        .and_then(|stream| Ok(stream))
        .map_err(|e| warp::reject::custom(e))
}

#[derive(Deserialize)]
struct Media {
    only_media: String,
}
#[derive(Deserialize)]
struct Hashtag {
    tag: String,
}
#[derive(Deserialize)]
struct List {
    list: String,
}

fn main() {
    use warp::path;
    let base = path!(\"api\" / \"v1\" / \"streaming\");

    // GET /api/v1/streaming/user
    let user_timeline = base
        .and(path(\"user\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| stream_from(\"1\".to_string()));

    // GET /api/v1/streaming/user/notification
    let user_timeline_notifications = base
        .and(path!(\"user\" / \"notification\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| {
            let full_stream = stream_from(\"1\".to_string());
            // TODO: filter stream to just have notifications
            full_stream
        });

    // GET /api/v1/streaming/public
    let public_timeline = base
        .and(path(\"public\"))
        .and(path::end())
        .map(|| stream_from(\"public\".to_string()));

    // GET /api/v1/streaming/public?only_media=true
    let public_timeline_media = base
        .and(path(\"public\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                stream_from(\"public:media\".to_string())
            } else {
                stream_from(\"public\".to_string())
            }
        });

    // GET /api/v1/streaming/public/local
    let local_timeline = base
        .and(path!(\"public\" / \"local\"))
        .and(path::end())
        .map(|| stream_from(\"public:local\".to_string()));

    // GET /api/v1/streaming/public/local?only_media=true
    let local_timeline_media = base
        .and(path!(\"public\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                stream_from(\"public:local:media\".to_string())
            } else {
                stream_from(\"public:local\".to_string())
            }
        });

    // GET /api/v1/streaming/direct
    let direct_timeline = base
        .and(path(\"direct\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| stream_from(\"direct:1\".to_string()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag
    let hashtag_timeline = base
        .and(path(\"hashtag\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| stream_from(format!(\"hashtag:{}\", q.tag)));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag
    let hashtag_timeline_local = base
        .and(path!(\"hashtag\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| stream_from(format!(\"hashtag:{}:local\", q.tag)));

    // GET /api/v1/streaming/list?list=:list_id
    let list_timeline = base
        .and(path(\"list\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: List| stream_from(format!(\"list:{}\", q.list)));

    let routes = user_timeline
        .or(user_timeline_notifications)
        .unify()
        .or(public_timeline_media)
        .unify()
        .or(public_timeline)
        .unify()
        .or(local_timeline_media)
        .unify()
        .or(local_timeline)
        .unify()
        .or(direct_timeline)
        .unify()
        .or(hashtag_timeline)
        .unify()
        .or(hashtag_timeline_local)
        .unify()
        .or(list_timeline)
        .unify()
        .and_then(|event_stream| event_stream)
        .and(warp::sse())
        .map(|event_stream: Receiver, sse: warp::sse::Sse| {
            sse.reply(warp::sse::keep(
                event_stream.map(|item| {
                    // let v: Value = serde_json::from_str(item.as_str()).unwrap();
                    dbg!(&item);
                    warp::sse::data(item)
                }),
                None,
            ))
        });

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 19 (fontified t face font-lock-type-face) 19 21 (fontified t) 21 27 (fontified t face font-lock-type-face) 27 29 (fontified t) 29 33 (fontified t face font-lock-type-face) 33 35 (fontified t) 35 36 (fontified t) 36 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 45 (fontified t face font-lock-constant-face) 45 47 (fontified t) 47 52 (fontified t face font-lock-type-face) 52 54 (fontified t) 54 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t) 58 70 (fontified t face font-lock-constant-face) 70 72 (fontified t) 72 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 88 (fontified t face font-lock-keyword-face) 88 89 (fontified t) 89 99 (fontified t face font-lock-constant-face) 99 102 (fontified t) 102 108 (fontified t face font-lock-type-face) 108 110 (fontified t) 110 115 (fontified t face font-lock-type-face) 115 118 (fontified t) 118 121 (fontified t face font-lock-keyword-face) 121 122 (fontified t) 122 127 (fontified t face font-lock-constant-face) 127 129 (fontified t) 129 131 (fontified t face font-lock-constant-face) 131 134 (fontified t) 134 143 (fontified t face font-lock-type-face) 143 145 (fontified t) 145 155 (fontified t face font-lock-type-face) 155 157 (fontified t) 157 162 (fontified t face font-lock-type-face) 162 164 (fontified t) 164 172 (fontified t face font-lock-type-face) 172 174 (fontified t) 174 183 (fontified t face font-lock-type-face) 183 186 (fontified t) 186 189 (fontified t face font-lock-keyword-face) 189 190 (fontified t) 190 195 (fontified t face font-lock-constant-face) 195 197 (fontified t) 197 200 (fontified t face font-lock-constant-face) 200 202 (fontified t) 202 211 (fontified t face font-lock-type-face) 211 213 (fontified t) 213 216 (fontified t face font-lock-keyword-face) 216 217 (fontified t) 217 221 (fontified t face font-lock-constant-face) 221 230 (fontified t) 230 236 (fontified t face font-lock-type-face) 236 238 (fontified t) 238 244 (fontified t face font-lock-type-face) 244 248 (fontified t) 248 254 (fontified t face font-lock-keyword-face) 254 255 (fontified t) 255 263 (fontified t face font-lock-type-face) 263 270 (fontified t) 270 272 (fontified t face font-lock-variable-name-face) 272 274 (fontified t) 274 282 (fontified t face font-lock-type-face) 282 283 (fontified t) 283 292 (fontified t face font-lock-type-face) 292 297 (fontified t) 297 301 (fontified t face font-lock-keyword-face) 301 302 (fontified t) 302 308 (fontified t face font-lock-type-face) 308 309 (fontified t) 309 312 (fontified t face font-lock-keyword-face) 312 313 (fontified t) 313 321 (fontified t face font-lock-type-face) 321 328 (fontified t) 328 332 (fontified t face font-lock-keyword-face) 332 333 (fontified t) 333 337 (fontified t face font-lock-type-face) 337 340 (fontified t) 340 346 (fontified t face font-lock-type-face) 346 352 (fontified t) 352 356 (fontified t face font-lock-keyword-face) 356 357 (fontified t) 357 362 (fontified t face font-lock-type-face) 362 365 (fontified t) 365 370 (fontified t face font-lock-type-face) 370 377 (fontified t) 377 379 (fontified t face font-lock-keyword-face) 379 380 (fontified t) 380 384 (fontified t face font-lock-function-name-face) 384 386 (fontified t) 386 389 (fontified t face font-lock-keyword-face) 389 390 (fontified t) 390 394 (fontified t face font-lock-keyword-face) 394 397 (fontified t) 397 398 (fontified t syntax-table #2#) 398 399 (fontified t) 399 403 (fontified t face font-lock-type-face) 403 404 (fontified t) 404 410 (fontified t face font-lock-type-face) 410 411 (fontified t) 411 417 (fontified t face font-lock-type-face) 417 420 (fontified t) 420 424 (fontified t face font-lock-type-face) 424 426 (fontified t) 426 431 (fontified t face font-lock-type-face) 431 443 (fontified t) 443 446 (fontified t face font-lock-keyword-face) 446 447 (fontified t) 447 450 (fontified t face font-lock-keyword-face) 450 451 (fontified t) 451 457 (fontified t face font-lock-variable-name-face) 457 460 (fontified t) 460 464 (fontified t face font-lock-preprocessor-face) 464 485 (fontified t) 485 490 (fontified t face font-lock-keyword-face) 490 491 (fontified t) 491 494 (fontified t face font-lock-keyword-face) 494 495 (fontified t) 495 500 (fontified t face font-lock-type-face) 500 502 (fontified t) 502 507 (fontified t face font-lock-type-face) 507 526 (fontified t) 526 530 (fontified t face font-lock-keyword-face) 530 535 (fontified t) 535 545 (fontified t) 545 548 (fontified t face font-lock-keyword-face) 548 556 (fontified t) 556 557 (fontified t face rust-question-mark-face) 557 560 (fontified t) 560 572 (fontified t) 572 575 (fontified t face font-lock-keyword-face) 575 576 (fontified t) 576 579 (fontified t face font-lock-keyword-face) 579 580 (fontified t) 580 591 (fontified t face font-lock-variable-name-face) 591 594 (fontified t) 594 596 (fontified t face font-lock-string-face) 596 622 (fontified t) 622 625 (fontified t face font-lock-keyword-face) 625 626 (fontified t) 626 628 (fontified t face font-lock-variable-name-face) 628 631 (fontified t) 631 636 (fontified t face font-lock-type-face) 636 642 (fontified t) 642 643 (fontified t syntax-table #1# face font-lock-string-face) 643 664 (fontified t face font-lock-string-face) 664 665 (fontified t syntax-table #3# face font-lock-string-face) 665 690 (fontified t) 690 692 (fontified t face font-lock-keyword-face) 692 693 (fontified t) 693 696 (fontified t face font-lock-keyword-face) 696 697 (fontified t) 697 701 (fontified t face font-lock-type-face) 701 722 (fontified t) 722 728 (fontified t face font-lock-type-face) 728 810 (fontified t) 810 816 (fontified t face font-lock-string-face) 816 831 (fontified t) 831 845 (fontified t) 845 858 (fontified t) 858 864 (fontified t face font-lock-keyword-face) 864 865 (fontified t) 865 867 (fontified t face font-lock-type-face) 867 868 (fontified t) 868 873 (fontified t face font-lock-type-face) 873 875 (fontified t) 875 880 (fontified t face font-lock-type-face) 880 881 (fontified t) 881 885 (fontified t face font-lock-type-face) 885 920 (fontified t) 920 926 (fontified t face font-lock-keyword-face) 926 927 (fontified t) 927 929 (fontified t face font-lock-type-face) 929 930 (fontified t) 930 935 (fontified t face font-lock-type-face) 935 937 (fontified t) 937 945 (fontified t face font-lock-type-face) 945 957 (fontified t) 957 963 (fontified t face font-lock-keyword-face) 963 964 (fontified t) 964 970 (fontified t face font-lock-type-face) 970 977 (fontified t) 977 979 (fontified t face font-lock-variable-name-face) 979 981 (fontified t) 981 990 (fontified t face font-lock-type-face) 990 991 (fontified t) 991 1000 (fontified t face font-lock-type-face) 1000 1007 (fontified t) 1007 1014 (fontified t face font-lock-variable-name-face) 1014 1016 (fontified t) 1016 1022 (fontified t face font-lock-type-face) 1022 1026 (fontified t) 1026 1030 (fontified t face font-lock-keyword-face) 1030 1031 (fontified t) 1031 1037 (fontified t face font-lock-type-face) 1037 1038 (fontified t) 1038 1041 (fontified t face font-lock-keyword-face) 1041 1042 (fontified t) 1042 1048 (fontified t face font-lock-type-face) 1048 1055 (fontified t) 1055 1059 (fontified t face font-lock-keyword-face) 1059 1060 (fontified t) 1060 1064 (fontified t face font-lock-type-face) 1064 1075 (fontified t) 1075 1079 (fontified t face font-lock-keyword-face) 1079 1080 (fontified t) 1080 1085 (fontified t face font-lock-type-face) 1085 1088 (fontified t) 1088 1091 (fontified t face font-lock-type-face) 1091 1092 (fontified t) 1092 1097 (fontified t face font-lock-type-face) 1097 1104 (fontified t) 1104 1106 (fontified t face font-lock-keyword-face) 1106 1107 (fontified t) 1107 1111 (fontified t face font-lock-function-name-face) 1111 1113 (fontified t) 1113 1116 (fontified t face font-lock-keyword-face) 1116 1117 (fontified t) 1117 1121 (fontified t face font-lock-keyword-face) 1121 1124 (fontified t) 1124 1125 (syntax-table #2# fontified t) 1125 1126 (fontified t) 1126 1130 (fontified t face font-lock-type-face) 1130 1131 (fontified t) 1131 1135 (fontified t face font-lock-type-face) 1135 1137 (fontified t) 1137 1141 (fontified t face font-lock-type-face) 1141 1143 (fontified t) 1143 1147 (fontified t face font-lock-type-face) 1147 1149 (fontified t) 1149 1154 (fontified t face font-lock-type-face) 1154 1166 (fontified t) 1166 1174 (fontified t face rust-builtin-formatting-macro-face) 1174 1175 (fontified t) 1175 1191 (fontified t face font-lock-string-face) 1191 1193 (fontified t face rust-string-interpolation-face) 1193 1194 (fontified t face font-lock-string-face) 1194 1197 (fontified t) 1197 1201 (fontified t face font-lock-keyword-face) 1201 1220 (fontified t) 1220 1223 (fontified t face font-lock-keyword-face) 1223 1224 (fontified t) 1224 1237 (fontified t face font-lock-variable-name-face) 1237 1240 (fontified t) 1240 1247 (fontified t face rust-builtin-formatting-macro-face) 1247 1261 (fontified t) 1261 1288 (fontified t face font-lock-string-face) 1288 1290 (fontified t face rust-string-interpolation-face) 1290 1294 (fontified t face font-lock-string-face) 1294 1296 (fontified t face rust-string-interpolation-face) 1296 1301 (fontified t face font-lock-string-face) 1301 1315 (fontified t) 1315 1319 (fontified t face font-lock-keyword-face) 1319 1331 (fontified t) 1331 1335 (fontified t) 1347 1351 (face font-lock-keyword-face)) . 1) (undo-tree-id9641 . -110) (undo-tree-id9642 . -115) (undo-tree-id9643 . -102) (undo-tree-id9644 . -108) (undo-tree-id9645 . -845) (undo-tree-id9646 . -845) (undo-tree-id9647 . -845) (undo-tree-id9648 . -845) (undo-tree-id9649 . -845) (undo-tree-id9650 . -845) (undo-tree-id9651 . -845) (undo-tree-id9652 . -845) (undo-tree-id9653 . -845) (undo-tree-id9654 . -845) (undo-tree-id9655 . -845) (undo-tree-id9656 . -845) (undo-tree-id9657 . -845) (undo-tree-id9658 . -845) (undo-tree-id9659 . -845) (undo-tree-id9660 . -845) (undo-tree-id9661 . -845) (undo-tree-id9662 . -845) (undo-tree-id9663 . -845) (undo-tree-id9664 . -845) (undo-tree-id9665 . -845) (undo-tree-id9666 . -845) (undo-tree-id9667 . -845) (undo-tree-id9668 . -845) (undo-tree-id9669 . -845) (undo-tree-id9670 . -845) (undo-tree-id9671 . -845) (undo-tree-id9672 . -845) (undo-tree-id9673 . -845) (undo-tree-id9674 . -845) (undo-tree-id9675 . -845) (undo-tree-id9676 . -845) (undo-tree-id9677 . -845) (undo-tree-id9678 . -845) (undo-tree-id9679 . -845) (undo-tree-id9680 . -845) (undo-tree-id9681 . -845) (undo-tree-id9682 . -845) (undo-tree-id9683 . -845) (undo-tree-id9684 . -845) (undo-tree-id9685 . -845) (undo-tree-id9686 . -845) (undo-tree-id9687 . -845) (undo-tree-id9688 . -845) (undo-tree-id9689 . -845) (undo-tree-id9690 . -845) (undo-tree-id9691 . -845) (undo-tree-id9692 . -845) (undo-tree-id9693 . -845) (undo-tree-id9694 . -845) (undo-tree-id9695 . -845) (undo-tree-id9696 . -845) (undo-tree-id9697 . -831) (undo-tree-id9698 . -845) (undo-tree-id9699 . -845) (undo-tree-id9700 . -831) (undo-tree-id9701 . -845) (undo-tree-id9702 . -776) (undo-tree-id9703 . -831) (undo-tree-id9704 . -678) (undo-tree-id9705 . -776) (undo-tree-id9706 . -776) (undo-tree-id9707 . -678) (undo-tree-id9708 . -831) (undo-tree-id9709 . -776) (undo-tree-id9710 . -831) (undo-tree-id9711 . -831) (undo-tree-id9712 . -831) (undo-tree-id9713 . -831) (undo-tree-id9714 . -831) (undo-tree-id9715 . -831) (t 23732 43758 409871 819000)) (23732 43845 248606 569000) 0 nil] [nil ([nil ([nil ([nil nil ((929 . 930) (#(")" 0 1 (fontified nil)) . 929) (927 . 929) (926 . 928) (#("(" 0 1 (fontified nil)) . -926) (922 . 927) (909 . 922) 893) ((#("
            " 0 1 (fontified t) 1 13 (fontified nil)) . 909) (undo-tree-id9416 . -13) (undo-tree-id9417 . -13) (undo-tree-id9418 . -13) (undo-tree-id9419 . -13) (undo-tree-id9420 . -13) (undo-tree-id9421 . -13) (undo-tree-id9422 . -13) (undo-tree-id9423 . -13) (undo-tree-id9424 . -13) (undo-tree-id9425 . -13) (undo-tree-id9426 . -13) (undo-tree-id9427 . -13) (undo-tree-id9428 . -13) (undo-tree-id9429 . -13) (undo-tree-id9430 . -13) (undo-tree-id9431 . -13) (undo-tree-id9432 . -13) (undo-tree-id9433 . -13) (undo-tree-id9434 . -13) (undo-tree-id9435 . -13) (undo-tree-id9436 . -13) (undo-tree-id9437 . -13) (undo-tree-id9438 . -13) (undo-tree-id9439 . -13) (undo-tree-id9440 . -13) (undo-tree-id9441 . -13) (undo-tree-id9442 . -13) (undo-tree-id9443 . -13) (undo-tree-id9444 . -13) (undo-tree-id9445 . -13) (undo-tree-id9446 . -13) (undo-tree-id9447 . -13) (undo-tree-id9448 . -13) (undo-tree-id9449 . -13) (undo-tree-id9450 . -13) (undo-tree-id9451 . -13) (undo-tree-id9452 . -13) (undo-tree-id9453 . -13) (undo-tree-id9454 . -13) (#("dbg!(" 0 4 (fontified nil face font-lock-preprocessor-face) 4 5 (fontified nil)) . 922) (undo-tree-id9455 . -4) (undo-tree-id9456 . -4) (undo-tree-id9457 . -4) (undo-tree-id9458 . -4) (undo-tree-id9459 . -4) (undo-tree-id9460 . -4) (undo-tree-id9461 . -4) (undo-tree-id9462 . -4) (undo-tree-id9463 . -4) (undo-tree-id9464 . -4) (undo-tree-id9465 . -4) (undo-tree-id9466 . -4) (undo-tree-id9467 . -4) (undo-tree-id9468 . -4) (undo-tree-id9469 . -4) (undo-tree-id9470 . -4) (undo-tree-id9471 . -4) (undo-tree-id9472 . -4) (undo-tree-id9473 . -4) (undo-tree-id9474 . -4) (undo-tree-id9475 . -4) (undo-tree-id9476 . -4) (undo-tree-id9477 . -4) (undo-tree-id9478 . -4) (undo-tree-id9479 . -4) (undo-tree-id9480 . -4) (undo-tree-id9481 . -4) (undo-tree-id9482 . -4) (undo-tree-id9483 . -4) (undo-tree-id9484 . -4) (undo-tree-id9485 . -4) (undo-tree-id9486 . -4) (undo-tree-id9487 . -4) (undo-tree-id9488 . -4) (undo-tree-id9489 . -4) (undo-tree-id9490 . -4) (undo-tree-id9491 . 1) (undo-tree-id9492 . -4) (undo-tree-id9493 . 1) (undo-tree-id9494 . -4) (undo-tree-id9495 . 1) (undo-tree-id9496 . -4) (926 . 927) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 926) (undo-tree-id9497 . -1) (undo-tree-id9498 . -1) (undo-tree-id9499 . -1) (undo-tree-id9500 . -1) (undo-tree-id9501 . -1) (undo-tree-id9502 . -1) (undo-tree-id9503 . -1) (undo-tree-id9504 . -1) (undo-tree-id9505 . -1) (undo-tree-id9506 . -1) (undo-tree-id9507 . -1) (undo-tree-id9508 . -1) (undo-tree-id9509 . -1) (undo-tree-id9510 . -1) (undo-tree-id9511 . -1) (undo-tree-id9512 . -1) (undo-tree-id9513 . -1) (undo-tree-id9514 . -1) (undo-tree-id9515 . -1) (undo-tree-id9516 . -1) (undo-tree-id9517 . -1) (undo-tree-id9518 . -1) (undo-tree-id9519 . -1) (undo-tree-id9520 . -1) (undo-tree-id9521 . -1) (undo-tree-id9522 . -1) (undo-tree-id9523 . -1) (undo-tree-id9524 . -1) (undo-tree-id9525 . -1) (undo-tree-id9526 . -1) (undo-tree-id9527 . -1) (undo-tree-id9528 . -1) (undo-tree-id9529 . -1) (undo-tree-id9530 . -1) (undo-tree-id9531 . -1) (undo-tree-id9532 . 2) (undo-tree-id9533 . -1) (undo-tree-id9534 . 1) (undo-tree-id9535 . -1) (undo-tree-id9536 . 1) (undo-tree-id9537 . -1) (#("v)" 0 2 (fontified nil)) . 927) (undo-tree-id9538 . -2) (undo-tree-id9539 . -2) (undo-tree-id9540 . -2) (undo-tree-id9541 . -2) (undo-tree-id9542 . -2) (undo-tree-id9543 . -2) (undo-tree-id9544 . -2) (undo-tree-id9545 . -2) (undo-tree-id9546 . -2) (undo-tree-id9547 . -2) (undo-tree-id9548 . -2) (undo-tree-id9549 . -2) (undo-tree-id9550 . -2) (undo-tree-id9551 . -2) (undo-tree-id9552 . -2) (undo-tree-id9553 . -2) (undo-tree-id9554 . -2) (undo-tree-id9555 . -2) (undo-tree-id9556 . -2) (undo-tree-id9557 . -2) (undo-tree-id9558 . -2) (undo-tree-id9559 . -2) (undo-tree-id9560 . -1) (undo-tree-id9561 . -2) (undo-tree-id9562 . -1) (undo-tree-id9563 . -2) (undo-tree-id9564 . -1) (undo-tree-id9565 . -2) (undo-tree-id9566 . -1) (undo-tree-id9567 . -2) (undo-tree-id9568 . -1) (undo-tree-id9569 . -2) (undo-tree-id9570 . -1) (undo-tree-id9571 . -2) (undo-tree-id9572 . 2) (undo-tree-id9573 . -1) (undo-tree-id9574 . 1) (undo-tree-id9575 . -2) (929 . 930) (#(";" 0 1 (fontified t)) . 929) (t 23732 43661 93653 286000)) (23732 43661 19636 604000) 0 nil]) ((894 . 895)) ((#("&" 0 1 (fontified t)) . 894) (undo-tree-id9576 . 1)) (23732 43755 707418 131000) 0 nil] [nil nil ((#(")" 0 1 (fontified nil)) . 917) (916 . 917) (915 . 917) (#("(" 0 1 (fontified nil)) . -915) (915 . 916) (905 . 915)) ((#(".to_string" 0 10 (fontified nil)) . 905) (undo-tree-id9405 . -1) (undo-tree-id9406 . -3) (undo-tree-id9407 . -1) (undo-tree-id9408 . -4) (undo-tree-id9409 . -1) (undo-tree-id9410 . -5) (undo-tree-id9411 . -1) (undo-tree-id9412 . -10) (undo-tree-id9413 . -10) (#("(" 0 1 (fontified nil)) . 915) (915 . 916) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 915) (undo-tree-id9414 . -1) (#(")" 0 1 (fontified nil)) . 916) (undo-tree-id9415 . -1) (917 . 918)) (23732 43632 430071 812000) 0 nil]) ((899 . 905) (897 . 899) (#("t" 0 1 (fontified t)) . -897) (undo-tree-id9393 . -1) (undo-tree-id9394 . -1) 898 (894 . 898) (#("data" 0 4 (fontified t)) . 894) (undo-tree-id9395 . -2) (undo-tree-id9396 . -2) 896) ((894 . 898) (#("jsot" 0 3 (fontified nil) 3 4 (fontified nil)) . 894) (897 . 898) (#("n_" 0 2 (fontified nil)) . 897) (#("string" 0 6 (fontified t)) . 899)) (23732 43756 84555 921000) 0 nil]) ((nil rear-nonsticky nil 900 . 901) (nil fontified nil 858 . 901) (858 . 901) 857) ((#("let v: Value = serde_json::from_str(data)?;" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil) 4 5 (fontified nil face font-lock-variable-name-face) 5 7 (fontified nil) 7 12 (fontified nil face font-lock-type-face) 12 15 (fontified nil) 15 25 (fontified nil face font-lock-constant-face) 25 36 (fontified nil) 36 40 (fontified nil) 40 41 (fontified nil) 41 42 (fontified nil face rust-question-mark-face) 42 43 (fontified nil rear-nonsticky nil)) . 858) (undo-tree-id9577 . -42) (undo-tree-id9578 . -43) (undo-tree-id9579 . -43) (undo-tree-id9580 . -43) (undo-tree-id9581 . -43) (undo-tree-id9582 . -43) (undo-tree-id9583 . -43) (undo-tree-id9584 . -43) (undo-tree-id9585 . -43) (undo-tree-id9586 . -43) (undo-tree-id9587 . -43) (undo-tree-id9588 . -43) (undo-tree-id9589 . -43) (undo-tree-id9590 . -43) (undo-tree-id9591 . -43) (undo-tree-id9592 . -43) (undo-tree-id9593 . -43) (undo-tree-id9594 . -43) (undo-tree-id9595 . -43) (undo-tree-id9596 . -43) (undo-tree-id9597 . -38) (undo-tree-id9598 . -43) (undo-tree-id9599 . -43) (undo-tree-id9600 . -43) (undo-tree-id9601 . -43) (undo-tree-id9602 . -43) (undo-tree-id9603 . -43) (undo-tree-id9604 . -43) (undo-tree-id9605 . -43) (undo-tree-id9606 . -43) (undo-tree-id9607 . -43) (undo-tree-id9608 . -43) (undo-tree-id9609 . -43) (undo-tree-id9610 . -43) (undo-tree-id9611 . -43) (undo-tree-id9612 . -43) (undo-tree-id9613 . -43) (undo-tree-id9614 . -35) (undo-tree-id9615 . -43) (undo-tree-id9616 . -36) (undo-tree-id9617 . -35) (undo-tree-id9618 . -38) (undo-tree-id9619 . -38) (nil rear-nonsticky t 900 . 901)) (23732 43756 441552 794000) 0 nil]) ((#("dbg!" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 858) (undo-tree-id9724 . -4) (845 . 862)) ((#("
            " 0 1 (fontified t) 1 13 (fontified nil)) . 845) (undo-tree-id9716 . -13) (undo-tree-id9717 . -13) (undo-tree-id9718 . -13) (undo-tree-id9719 . -13) (undo-tree-id9720 . -12) (undo-tree-id9721 . -12) (undo-tree-id9722 . -12) (#("dbg!" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 858) (undo-tree-id9723 . -4) (858 . 862)) (23732 43845 74225 690000) 0 nil] [nil ([nil ([nil nil ((#("
" 0 1 (fontified t)) . 678) (undo-tree-id9379 . -1) (undo-tree-id9380 . -1) (undo-tree-id9381 . -1) (undo-tree-id9382 . -1)) ((678 . 679)) (23732 43564 665105 134000) 0 nil]) ((#("            }" 0 13 (fontified t)) . 730) (undo-tree-id9383 . 13) (#("{
                " 0 2 (fontified t) 2 18 (fontified t)) . 691) (undo-tree-id9384 . -2) (undo-tree-id9385 . -2) (undo-tree-id9386 . -2) (undo-tree-id9387 . -18) 693) ((691 . 709) (730 . 743)) (23732 43564 674916 486000) 0 nil]) ((#("if let Some(cap) = re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read])) " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 11 (fontified t face font-lock-type-face) 11 32 (fontified t) 32 38 (fontified t face font-lock-type-face) 38 84 (fontified t)) . 691) (undo-tree-id9388 . -44) (undo-tree-id9389 . -40) (undo-tree-id9390 . -55) (undo-tree-id9391 . -44) (undo-tree-id9392 . -44) 735 (t 23732 43445 34631 303000)) ((691 . 775)) (23732 43565 47072 968000) 0 nil]) ((#(" " 0 1 (fontified t)) . 667)) ((667 . 668)) (23732 43844 876176 681000) 0 nil]) ((667 . 668) (#("            " 0 12 (fontified nil)) . 667) (undo-tree-id9377 . 12) (#("
" 0 1 (fontified t)) . -667) (undo-tree-id9378 . 1) 666) nil (23732 43844 60042 723000) 0 nil] [nil ([nil ([nil nil ((#("
" 0 1 (fontified t)) . -679) 668) ((679 . 680)) (23732 43428 512632 552000) 0 nil]) ((668 . 669) (#("            " 0 12 (fontified nil)) . 668) (undo-tree-id9356 . 12) (#("
" 0 1 (fontified t)) . -668) (undo-tree-id9357 . 1) 667) ((668 . 669) (668 . 680) (#(" " 0 1 (fontified t)) . 668)) (23732 43428 514635 973000) 0 nil]) ((666 . 667)) ((#("
" 0 1 (fontified t)) . 666) (undo-tree-id9364 . -1) (undo-tree-id9365 . -1) (undo-tree-id9366 . -1) (undo-tree-id9367 . -1) (undo-tree-id9368 . -1) (undo-tree-id9369 . -1) (undo-tree-id9370 . -1) (undo-tree-id9371 . -1) (undo-tree-id9372 . -1) (undo-tree-id9373 . -1) (undo-tree-id9374 . -1) (undo-tree-id9375 . -1) (undo-tree-id9376 . -1)) (23732 43428 958215 330000) 0 nil]) ((#("," 0 1 (fontified t)) . 666)) nil (23732 43429 791332 124000) 0 nil]) ((#("            " 0 12 (fontified nil)) . 667) (#("
" 0 1 (fontified t)) . -667) 643) nil (23732 43428 512650 588000) 0 nil]) ((#("                " 0 16 (fontified nil)) . 643) (undo-tree-id9358 . -16) (undo-tree-id9359 . -16) (undo-tree-id9360 . -16) (undo-tree-id9361 . -16) (undo-tree-id9362 . -16) (undo-tree-id9363 . -16) (#("
" 0 1 (fontified t)) . -643) 642) nil (23732 43428 512659 584000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 682)) nil (23732 43428 512661 730000) 0 nil]) ((682 . 683) (#(" " 0 1 (fontified nil face font-lock-string-face)) . 682) (#("
" 0 1 (fontified t face font-lock-string-face)) . -683) 666) nil (23732 43428 512664 135000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 666)) nil (23732 43428 512665 892000) 0 nil]) ((666 . 667) (#("
" 0 1 (fontified t face font-lock-string-face)) . -666) 660 (t 23732 43181 829109 815000)) nil (23732 43428 512667 899000) 0 nil] [nil nil ((660 . 661) (t 23732 43181 829109 815000)) ((#("
" 0 1 (fontified t)) . 660) (undo-tree-id9354 . -1) (undo-tree-id9355 . -1)) (23732 43417 128564 235000) 0 nil] [nil ([nil nil ((661 . 662)) ((#("
" 0 1 (fontified t)) . 661) (undo-tree-id9324 . -1) (undo-tree-id9325 . -1) (undo-tree-id9326 . -1) (undo-tree-id9327 . -1) (undo-tree-id9328 . -1) (undo-tree-id9329 . -1) (undo-tree-id9330 . -1) (undo-tree-id9331 . -1)) (23732 43415 30586 99000) 0 nil]) ((660 . 661) (t 23732 43181 829109 815000)) ((#("
" 0 1 (fontified t)) . 660) (undo-tree-id9332 . -1) (undo-tree-id9333 . -1) (undo-tree-id9334 . -1) (undo-tree-id9335 . -1) (undo-tree-id9336 . -1) (undo-tree-id9337 . -1) (undo-tree-id9338 . -1) (undo-tree-id9339 . -1) (undo-tree-id9340 . -1) (undo-tree-id9341 . -1) (undo-tree-id9342 . -1) (undo-tree-id9343 . -1) (undo-tree-id9344 . -1) (undo-tree-id9345 . -1) (undo-tree-id9346 . -1) (undo-tree-id9347 . -1) (undo-tree-id9348 . -1) (undo-tree-id9349 . -1) (undo-tree-id9350 . -1) (undo-tree-id9351 . -1) (undo-tree-id9352 . -1) (undo-tree-id9353 . -1)) (23732 43415 32006 102000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((665 . 666)) ((#(";" 0 1 (fontified t)) . 665)) (23732 43404 182261 374000) 0 nil]) ((#("\\{\\}" 0 2 (fontified t face font-lock-string-face) 2 4 (fontified t face font-lock-string-face)) . 657) (undo-tree-id9319 . -2) (undo-tree-id9320 . -2) 659 (657 . 661) (#("\\{" 0 2 (fontified nil face font-lock-string-face)) . -657) (undo-tree-id9321 . -1) (undo-tree-id9322 . -1) (658 . 659)) ((#("{" 0 1 (fontified nil face font-lock-string-face)) . 658) (657 . 659) (#("\\{\\}" 0 2 (fontified nil face font-lock-string-face) 2 4 (fontified nil face font-lock-string-face)) . 657) (657 . 661)) (23732 43404 188405 772000) 0 nil]) ((626 . 627) (#(" " 0 1 (fontified nil)) . 626) (#("
" 0 1 (fontified t)) . -627) 626) ((626 . 628) (#(" " 0 1 (fontified t)) . 626)) (23732 43404 564894 727000) 0 nil]) ((#("," 0 1 (fontified t)) . 666)) ((666 . 667)) (23732 43405 12742 615000) 0 nil]) ((#("            " 0 12 (fontified nil)) . 667) (#("
" 0 1 (fontified t)) . -667) 644) ((667 . 668) (667 . 679)) (23732 43406 596338 262000) 0 nil]) ((#("                " 0 16 (fontified nil)) . 644) (undo-tree-id9323 . -10) (#("
" 0 1 (fontified t)) . -644) 643) ((644 . 645) (644 . 660)) (23732 43407 278283 26000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 682)) ((682 . 683)) (23732 43407 793305 804000) 0 nil]) ((682 . 683) (#(" " 0 1 (fontified nil face font-lock-string-face)) . 682) (#("
" 0 1 (fontified t face font-lock-string-face)) . -683) 666) ((682 . 684) (#(" " 0 1 (fontified t face font-lock-string-face)) . 682)) (23732 43408 760842 995000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 666)) ((666 . 667)) (23732 43409 255184 603000) 0 nil]) ((666 . 667) (#("
" 0 1 (fontified t face font-lock-string-face)) . -666) 655) ((666 . 667) (#(" " 0 1 (fontified t face font-lock-string-face)) . 666)) (23732 43409 624164 554000) 0 nil]) ((627 . 628)) ((#("
" 0 1 (fontified t)) . 627)) (23732 43409 942486 169000) 0 nil]) ((#("e" 0 1 (fontified t)) . 660)) ((660 . 661)) (23732 43410 480425 774000) 0 nil]) ((660 . 661) (#("r" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . 660) (t 23732 43181 829109 815000)) ((660 . 661) (#("e" 0 1 (fontified t)) . 660)) (23732 43411 636677 262000) 0 nil]) ((1 . 6483) (#("use futures::{Async, Future, Poll};
use regex::Regex;
use serde_derive::Deserialize;
use serde_json::{Result, Value};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use warp::{path, Filter, Stream};

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Stream for Receiver {
    type Item = String;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<String>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            let mut json_string = \"\".to_string();
            let re = Regex::new(
                r\"(?x)
(?P<json>\\{.*\\}) 
\",
            )
            .unwrap();

            if let Some(cap) =
                re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read]))
            {
                json_string = cap[\"json\"].to_string();
            }
            return Ok(Async::Ready(Some(
                json_string
            )));
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
    channel: String,
}
impl Future for Sender {
    type Item = ();
    type Error = Box<Error>;
    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        println!(\"Subscribing to {}\", &self.channel);
        let subscribe_cmd = format!(
            \"*2\\r\\n$9\\r\\nsubscribe\\r\\n${}\\r\\n{}\\r\\n\",
            self.channel.len(),
            self.channel
        );
        let mut buffer = subscribe_cmd.as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn get_socket() -> impl Future<Item = TcpStream, Error = Box<Error>> {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    connection
        .and_then(|socket| Ok(socket))
        .map_err(|e| Box::new(e))
}

fn send_subscribe_cmd(tx: WriteHalf<TcpStream>, channel: String) {
    let sender = Sender { tx, channel };
    tokio::spawn(sender.map_err(|e| eprintln!(\"{}\", e)));
}

fn stream_from(timeline: String) -> impl Future<Item = Receiver, Error = warp::reject::Rejection> {
    get_socket()
        .and_then(move |socket| {
            let (rx, tx) = socket.split();
            send_subscribe_cmd(tx, format!(\"timeline:{}\", timeline));
            let stream_of_data_from_redis = Receiver { rx };
            Ok(stream_of_data_from_redis)
        })
        .and_then(|stream| Ok(stream))
        .map_err(|e| warp::reject::custom(e))
}

#[derive(Deserialize)]
struct Media {
    only_media: String,
}
#[derive(Deserialize)]
struct Hashtag {
    tag: String,
}
#[derive(Deserialize)]
struct List {
    list: String,
}

fn main() {
    use warp::path;
    let base = path!(\"api\" / \"v1\" / \"streaming\");

    // GET /api/v1/streaming/user
    let user_timeline = base
        .and(path(\"user\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| stream_from(\"1\".to_string()));

    // GET /api/v1/streaming/user/notification
    let user_timeline_notifications = base
        .and(path!(\"user\" / \"notification\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| {
            let full_stream = stream_from(\"1\".to_string());
            // TODO: filter stream to just have notifications
            full_stream
        });

    // GET /api/v1/streaming/public
    let public_timeline = base
        .and(path(\"public\"))
        .and(path::end())
        .map(|| stream_from(\"public\".to_string()));

    // GET /api/v1/streaming/public?only_media=true
    let public_timeline_media = base
        .and(path(\"public\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                stream_from(\"public:media\".to_string())
            } else {
                stream_from(\"public\".to_string())
            }
        });

    // GET /api/v1/streaming/public/local
    let local_timeline = base
        .and(path!(\"public\" / \"local\"))
        .and(path::end())
        .map(|| stream_from(\"public:local\".to_string()));

    // GET /api/v1/streaming/public/local?only_media=true
    let local_timeline_media = base
        .and(path!(\"public\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Media| {
            if q.only_media == \"1\" || q.only_media == \"true\" {
                stream_from(\"public:local:media\".to_string())
            } else {
                stream_from(\"public:local\".to_string())
            }
        });

    // GET /api/v1/streaming/direct
    let direct_timeline = base
        .and(path(\"direct\"))
        .and(path::end())
        // TODO get user id from postgress
        .map(|| stream_from(\"direct:1\".to_string()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag
    let hashtag_timeline = base
        .and(path(\"hashtag\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| stream_from(format!(\"hashtag:{}\", q.tag)));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag
    let hashtag_timeline_local = base
        .and(path!(\"hashtag\" / \"local\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: Hashtag| stream_from(format!(\"hashtag:{}:local\", q.tag)));

    // GET /api/v1/streaming/list?list=:list_id
    let list_timeline = base
        .and(path(\"list\"))
        .and(warp::query())
        .and(path::end())
        .map(|q: List| stream_from(format!(\"list:{}\", q.list)));

    let routes = user_timeline
        .or(user_timeline_notifications)
        .unify()
        .or(public_timeline_media)
        .unify()
        .or(public_timeline)
        .unify()
        .or(local_timeline_media)
        .unify()
        .or(local_timeline)
        .unify()
        .or(direct_timeline)
        .unify()
        .or(hashtag_timeline)
        .unify()
        .or(hashtag_timeline_local)
        .unify()
        .or(list_timeline)
        .unify()
        .and_then(|event_stream| event_stream)
        .and(warp::sse())
        .map(|event_stream: Receiver, sse: warp::sse::Sse| {
            sse.reply(warp::sse::keep(
                event_stream.map(|item| {
                    // let v: Value = serde_json::from_str(item.as_str()).unwrap();
                    dbg!(&item);
                    warp::sse::data(item)
                }),
                None,
            ))
        });

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 19 (fontified t face font-lock-type-face) 19 21 (fontified t) 21 27 (fontified t face font-lock-type-face) 27 29 (fontified t) 29 33 (fontified t face font-lock-type-face) 33 35 (fontified t) 35 36 (fontified t) 36 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 45 (fontified t face font-lock-constant-face) 45 47 (fontified t) 47 52 (fontified t face font-lock-type-face) 52 54 (fontified t) 54 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t) 58 70 (fontified t face font-lock-constant-face) 70 72 (fontified t) 72 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 88 (fontified t face font-lock-keyword-face) 88 89 (fontified t) 89 99 (fontified t face font-lock-constant-face) 99 102 (fontified t) 102 108 (fontified t face font-lock-type-face) 108 110 (fontified t) 110 115 (fontified t face font-lock-type-face) 115 118 (fontified t) 118 121 (fontified t face font-lock-keyword-face) 121 122 (fontified t) 122 127 (fontified t face font-lock-constant-face) 127 129 (fontified t) 129 131 (fontified t face font-lock-constant-face) 131 134 (fontified t) 134 143 (fontified t face font-lock-type-face) 143 145 (fontified t) 145 155 (fontified t face font-lock-type-face) 155 157 (fontified t) 157 162 (fontified t face font-lock-type-face) 162 164 (fontified t) 164 172 (fontified t face font-lock-type-face) 172 174 (fontified t) 174 183 (fontified t face font-lock-type-face) 183 186 (fontified t) 186 189 (fontified t face font-lock-keyword-face) 189 190 (fontified t) 190 195 (fontified t face font-lock-constant-face) 195 197 (fontified t) 197 200 (fontified t face font-lock-constant-face) 200 202 (fontified t) 202 211 (fontified t face font-lock-type-face) 211 213 (fontified t) 213 216 (fontified t face font-lock-keyword-face) 216 217 (fontified t) 217 221 (fontified t face font-lock-constant-face) 221 230 (fontified t) 230 236 (fontified t face font-lock-type-face) 236 238 (fontified t) 238 244 (fontified t face font-lock-type-face) 244 248 (fontified t) 248 254 (fontified t face font-lock-keyword-face) 254 255 (fontified t) 255 263 (fontified t face font-lock-type-face) 263 270 (fontified t) 270 272 (fontified t face font-lock-variable-name-face) 272 274 (fontified t) 274 282 (fontified t face font-lock-type-face) 282 283 (fontified t) 283 292 (fontified t face font-lock-type-face) 292 297 (fontified t) 297 301 (fontified t face font-lock-keyword-face) 301 302 (fontified t) 302 308 (fontified t face font-lock-type-face) 308 309 (fontified t) 309 312 (fontified t face font-lock-keyword-face) 312 313 (fontified t) 313 321 (fontified t face font-lock-type-face) 321 328 (fontified t) 328 332 (fontified t face font-lock-keyword-face) 332 333 (fontified t) 333 337 (fontified t face font-lock-type-face) 337 340 (fontified t) 340 346 (fontified t face font-lock-type-face) 346 352 (fontified t) 352 356 (fontified t face font-lock-keyword-face) 356 357 (fontified t) 357 362 (fontified t face font-lock-type-face) 362 365 (fontified t) 365 370 (fontified t face font-lock-type-face) 370 377 (fontified t) 377 379 (fontified t face font-lock-keyword-face) 379 380 (fontified t) 380 384 (fontified t face font-lock-function-name-face) 384 386 (fontified t) 386 389 (fontified t face font-lock-keyword-face) 389 390 (fontified t) 390 394 (fontified t face font-lock-keyword-face) 394 397 (fontified t) 397 398 (fontified t syntax-table #2#) 398 399 (fontified t) 399 403 (fontified t face font-lock-type-face) 403 404 (fontified t) 404 410 (fontified t face font-lock-type-face) 410 411 (fontified t) 411 417 (fontified t face font-lock-type-face) 417 420 (fontified t) 420 424 (fontified t face font-lock-type-face) 424 426 (fontified t) 426 431 (fontified t face font-lock-type-face) 431 443 (fontified t) 443 446 (fontified t face font-lock-keyword-face) 446 447 (fontified t) 447 450 (fontified t face font-lock-keyword-face) 450 451 (fontified t) 451 457 (fontified t face font-lock-variable-name-face) 457 460 (fontified t) 460 464 (fontified t face font-lock-preprocessor-face) 464 485 (fontified t) 485 490 (fontified t face font-lock-keyword-face) 490 491 (fontified t) 491 494 (fontified t face font-lock-keyword-face) 494 495 (fontified t) 495 500 (fontified t face font-lock-type-face) 500 502 (fontified t) 502 507 (fontified t face font-lock-type-face) 507 526 (fontified t) 526 530 (fontified t face font-lock-keyword-face) 530 535 (fontified t) 535 545 (fontified t) 545 548 (fontified t face font-lock-keyword-face) 548 556 (fontified t) 556 557 (fontified t face rust-question-mark-face) 557 560 (fontified t) 560 572 (fontified t) 572 575 (fontified t face font-lock-keyword-face) 575 576 (fontified t) 576 579 (fontified t face font-lock-keyword-face) 579 580 (fontified t) 580 591 (fontified t face font-lock-variable-name-face) 591 594 (fontified t) 594 596 (fontified t face font-lock-string-face) 596 622 (fontified t) 622 625 (fontified t face font-lock-keyword-face) 625 626 (fontified t) 626 628 (fontified t face font-lock-variable-name-face) 628 631 (fontified t) 631 636 (fontified t face font-lock-type-face) 636 659 (fontified t) 659 660 (fontified t syntax-table #1# face font-lock-string-face) 660 684 (fontified t face font-lock-string-face) 684 685 (fontified t syntax-table #3# face font-lock-string-face) 685 725 (fontified t) 725 737 (fontified t) 737 739 (fontified t face font-lock-keyword-face) 739 740 (fontified t) 740 743 (fontified t face font-lock-keyword-face) 743 744 (fontified t) 744 748 (fontified t face font-lock-type-face) 748 755 (fontified t) 755 756 (fontified t) 756 785 (fontified t) 785 791 (fontified t face font-lock-type-face) 791 835 (fontified t) 835 837 (fontified t) 837 885 (fontified t) 885 891 (fontified t face font-lock-string-face) 891 932 (fontified t) 932 938 (fontified t face font-lock-keyword-face) 938 939 (fontified t) 939 941 (fontified t face font-lock-type-face) 941 942 (fontified t) 942 947 (fontified t face font-lock-type-face) 947 949 (fontified t) 949 954 (fontified t face font-lock-type-face) 954 955 (fontified t) 955 959 (fontified t face font-lock-type-face) 959 961 (fontified t) 961 988 (fontified t) 988 989 (fontified t) 989 1024 (fontified t) 1024 1030 (fontified t face font-lock-keyword-face) 1030 1031 (fontified t) 1031 1033 (fontified t face font-lock-type-face) 1033 1034 (fontified t) 1034 1039 (fontified t face font-lock-type-face) 1039 1041 (fontified t) 1041 1049 (fontified t face font-lock-type-face) 1049 1061 (fontified t) 1061 1067 (fontified t face font-lock-keyword-face) 1067 1068 (fontified t) 1068 1074 (fontified t face font-lock-type-face) 1074 1081 (fontified t) 1081 1083 (fontified t face font-lock-variable-name-face) 1083 1085 (fontified t) 1085 1094 (fontified t face font-lock-type-face) 1094 1095 (fontified t) 1095 1104 (fontified t face font-lock-type-face) 1104 1111 (fontified t) 1111 1118 (fontified t face font-lock-variable-name-face) 1118 1120 (fontified t) 1120 1126 (fontified t face font-lock-type-face) 1126 1130 (fontified t) 1130 1134 (fontified t face font-lock-keyword-face) 1134 1135 (fontified t) 1135 1141 (fontified t face font-lock-type-face) 1141 1142 (fontified t) 1142 1145 (fontified t face font-lock-keyword-face) 1145 1146 (fontified t) 1146 1152 (fontified t face font-lock-type-face) 1152 1159 (fontified t) 1159 1162 (fontified t face font-lock-keyword-face) 1162 1163 (fontified t face font-lock-keyword-face) 1163 1164 (fontified t) 1164 1168 (fontified t face font-lock-type-face) 1168 1175 (fontified t) 1175 1179 (fontified t) 1179 1183 (fontified t face font-lock-keyword-face) 1183 1184 (fontified t) 1184 1189 (fontified t face font-lock-type-face) 1189 1192 (fontified t) 1192 1195 (fontified t face font-lock-type-face) 1195 1196 (fontified t) 1196 1201 (fontified t face font-lock-type-face) 1201 1204 (fontified t) 1204 1208 (fontified t) 1208 1210 (fontified t face font-lock-keyword-face) 1210 1211 (fontified t) 1211 1215 (fontified t face font-lock-function-name-face) 1215 1217 (fontified t) 1217 1220 (fontified t face font-lock-keyword-face) 1220 1221 (fontified t) 1221 1225 (fontified t face font-lock-keyword-face) 1225 1228 (fontified t) 1228 1229 (syntax-table #2# fontified t) 1229 1230 (fontified t) 1230 1234 (fontified t face font-lock-type-face) 1234 1235 (fontified t) 1235 1239 (fontified t face font-lock-type-face) 1239 1241 (fontified t) 1241 1245 (fontified t face font-lock-type-face) 1245 1247 (fontified t) 1247 1251 (fontified t face font-lock-type-face) 1251 1253 (fontified t) 1253 1258 (fontified t face font-lock-type-face) 1258 1270 (fontified t) 1270 1278 (fontified t face rust-builtin-formatting-macro-face) 1278 1279 (fontified t) 1279 1285 (fontified t face font-lock-string-face) 1285 1295 (fontified t face font-lock-string-face) 1295 1297 (fontified t face rust-string-interpolation-face) 1297 1298 (fontified t face font-lock-string-face) 1298 1301 (fontified t) 1301 1305 (fontified t face font-lock-keyword-face) 1305 1316 (fontified t) 1316 1324 (fontified t) 1324 1327 (fontified t face font-lock-keyword-face) 1327 1328 (fontified t) 1328 1341 (fontified t face font-lock-variable-name-face) 1341 1344 (fontified t) 1344 1351 (fontified t face rust-builtin-formatting-macro-face) 1351 1365 (fontified t) 1365 1392 (fontified t face font-lock-string-face) 1392 1394 (fontified t face rust-string-interpolation-face) 1394 1398 (fontified t face font-lock-string-face) 1398 1400 (fontified t face rust-string-interpolation-face) 1400 1405 (fontified t face font-lock-string-face) 1405 1419 (fontified t) 1419 1423 (fontified t face font-lock-keyword-face) 1423 1451 (fontified t) 1451 1455 (fontified t face font-lock-keyword-face) 1455 1472 (fontified t) 1472 1475 (fontified t) 1475 1483 (fontified t) 1483 1486 (fontified t face font-lock-keyword-face) 1486 1487 (fontified t) 1487 1489 (fontified t face font-lock-keyword-face) 1489 1490 (face font-lock-keyword-face fontified t) 1490 1491 (fontified t) 1491 1497 (face font-lock-variable-name-face fontified t) 1497 1526 (fontified t) 1630 1631 (syntax-table #2#)) . 1) (undo-tree-id9294 . 5552) (undo-tree-id9295 . -110) (undo-tree-id9296 . -115) (undo-tree-id9297 . -102) (undo-tree-id9298 . -108) (undo-tree-id9299 . -102) (undo-tree-id9300 . -108) (undo-tree-id9301 . -110) (undo-tree-id9302 . -115) (undo-tree-id9303 . -918) (undo-tree-id9304 . -946) (undo-tree-id9305 . -918) (undo-tree-id9306 . -918) (undo-tree-id9307 . -987) (undo-tree-id9308 . -987) (undo-tree-id9309 . -946) (undo-tree-id9310 . -867) (undo-tree-id9311 . -878) (undo-tree-id9312 . -977) (undo-tree-id9313 . -988) (undo-tree-id9314 . -987) (undo-tree-id9315 . -987) 988) nil (23732 43417 130140 937000) 0 nil]) ((978 . 989) (#("String::from_utf8_lossy(&buffer[..num_bytes_read]).to_string()," 0 6 (fontified t face font-lock-type-face) 6 63 (fontified t)) . 978) (undo-tree-id9316 . -8)) nil (23732 43181 711757 776000) 0 nil]) ((785 . 786) (#("$" 0 1 (fontified t)) . -785) (undo-tree-id9317 . -1) (undo-tree-id9318 . -1) 786 (785 . 786)) nil (23732 43181 711773 72000) 0 nil] [nil nil ((#(")" 0 1 (fontified nil)) . 844) (843 . 844) (842 . 844) (#("(" 0 1 (fontified nil)) . -842) (838 . 843) (835 . 838)) ((#(".as" 0 1 (fontified nil) 1 3 (fontified nil)) . 835) (undo-tree-id9113 . -1) (undo-tree-id9114 . -3) (undo-tree-id9115 . -1) (undo-tree-id9116 . -3) (undo-tree-id9117 . -3) (undo-tree-id9118 . -3) (undo-tree-id9119 . -1) (undo-tree-id9120 . -3) (undo-tree-id9121 . -3) (undo-tree-id9122 . -3) (undo-tree-id9123 . -1) (undo-tree-id9124 . -3) (undo-tree-id9125 . -3) (undo-tree-id9126 . -3) (undo-tree-id9127 . -3) (undo-tree-id9128 . -3) (undo-tree-id9129 . -3) (undo-tree-id9130 . -3) (undo-tree-id9131 . -3) (undo-tree-id9132 . -3) (undo-tree-id9133 . -3) (undo-tree-id9134 . -3) (undo-tree-id9135 . -3) (undo-tree-id9136 . -3) (undo-tree-id9137 . -3) (undo-tree-id9138 . -3) (undo-tree-id9139 . -3) (undo-tree-id9140 . -3) (undo-tree-id9141 . -3) (undo-tree-id9142 . -3) (undo-tree-id9143 . -3) (undo-tree-id9144 . -3) (undo-tree-id9145 . -3) (undo-tree-id9146 . -3) (undo-tree-id9147 . -3) (undo-tree-id9148 . -3) (undo-tree-id9149 . -3) (undo-tree-id9150 . -3) (undo-tree-id9151 . -3) (undo-tree-id9152 . -3) (undo-tree-id9153 . -3) (undo-tree-id9154 . -3) (undo-tree-id9155 . -3) (undo-tree-id9156 . -3) (undo-tree-id9157 . -3) (undo-tree-id9158 . -3) (undo-tree-id9159 . -3) (undo-tree-id9160 . -3) (undo-tree-id9161 . -3) (undo-tree-id9162 . -3) (undo-tree-id9163 . -3) (undo-tree-id9164 . -3) (undo-tree-id9165 . -3) (undo-tree-id9166 . -3) (undo-tree-id9167 . -3) (undo-tree-id9168 . -3) (undo-tree-id9169 . -3) (undo-tree-id9170 . -3) (undo-tree-id9171 . -3) (undo-tree-id9172 . -3) (undo-tree-id9173 . -3) (undo-tree-id9174 . -3) (undo-tree-id9175 . -3) (undo-tree-id9176 . -3) (undo-tree-id9177 . -3) (undo-tree-id9178 . -3) (undo-tree-id9179 . -3) (undo-tree-id9180 . -3) (undo-tree-id9181 . -3) (undo-tree-id9182 . -3) (undo-tree-id9183 . -3) (undo-tree-id9184 . -3) (undo-tree-id9185 . -3) (undo-tree-id9186 . -3) (undo-tree-id9187 . -3) (undo-tree-id9188 . -3) (undo-tree-id9189 . -3) (undo-tree-id9190 . -3) (undo-tree-id9191 . -3) (undo-tree-id9192 . -3) (undo-tree-id9193 . -3) (undo-tree-id9194 . -3) (undo-tree-id9195 . -2) (undo-tree-id9196 . -3) (undo-tree-id9197 . -2) (undo-tree-id9198 . -2) (undo-tree-id9199 . -2) (undo-tree-id9200 . -2) (undo-tree-id9201 . -2) (undo-tree-id9202 . -2) (undo-tree-id9203 . -2) (undo-tree-id9204 . -2) (undo-tree-id9205 . -1) (undo-tree-id9206 . -2) (undo-tree-id9207 . -1) (undo-tree-id9208 . -1) (undo-tree-id9209 . -2) (undo-tree-id9210 . -1) (undo-tree-id9211 . -1) (undo-tree-id9212 . -2) (undo-tree-id9213 . -1) (undo-tree-id9214 . -1) (undo-tree-id9215 . -1) (undo-tree-id9216 . -2) (#("_str(" 0 4 (fontified nil) 4 5 (fontified nil)) . 838) (undo-tree-id9217 . -4) (undo-tree-id9218 . -4) (undo-tree-id9219 . -3) (undo-tree-id9220 . -4) (undo-tree-id9221 . -4) (undo-tree-id9222 . -3) (undo-tree-id9223 . -3) (undo-tree-id9224 . -4) (undo-tree-id9225 . -3) (undo-tree-id9226 . -3) (undo-tree-id9227 . -3) (undo-tree-id9228 . -3) (undo-tree-id9229 . -2) (undo-tree-id9230 . -3) (undo-tree-id9231 . -2) (undo-tree-id9232 . -2) (undo-tree-id9233 . -3) (undo-tree-id9234 . -2) (undo-tree-id9235 . -2) (undo-tree-id9236 . -3) (undo-tree-id9237 . -2) (undo-tree-id9238 . -3) (undo-tree-id9239 . -2) (undo-tree-id9240 . -2) (undo-tree-id9241 . -2) (undo-tree-id9242 . -2) (undo-tree-id9243 . -2) (undo-tree-id9244 . -2) (undo-tree-id9245 . -2) (undo-tree-id9246 . -2) (undo-tree-id9247 . -3) (undo-tree-id9248 . -2) (undo-tree-id9249 . -3) (undo-tree-id9250 . -3) (undo-tree-id9251 . -2) (undo-tree-id9252 . -3) (undo-tree-id9253 . -3) (undo-tree-id9254 . -2) (undo-tree-id9255 . -3) (undo-tree-id9256 . -2) (undo-tree-id9257 . -3) (undo-tree-id9258 . -3) (undo-tree-id9259 . -3) (undo-tree-id9260 . -3) (undo-tree-id9261 . -3) (undo-tree-id9262 . -3) (undo-tree-id9263 . -3) (undo-tree-id9264 . -3) (undo-tree-id9265 . -2) (undo-tree-id9266 . -3) (undo-tree-id9267 . -2) (undo-tree-id9268 . -2) (undo-tree-id9269 . -3) (undo-tree-id9270 . -2) (undo-tree-id9271 . -2) (undo-tree-id9272 . -3) (undo-tree-id9273 . -2) (undo-tree-id9274 . -3) (undo-tree-id9275 . -2) (undo-tree-id9276 . -2) (undo-tree-id9277 . -2) (undo-tree-id9278 . -2) (undo-tree-id9279 . -2) (undo-tree-id9280 . -2) (undo-tree-id9281 . -2) (undo-tree-id9282 . -2) (undo-tree-id9283 . -1) (undo-tree-id9284 . -2) (undo-tree-id9285 . -1) (undo-tree-id9286 . -1) (undo-tree-id9287 . -2) (undo-tree-id9288 . -1) (undo-tree-id9289 . -1) (undo-tree-id9290 . -2) (undo-tree-id9291 . -1) (undo-tree-id9292 . -2) (undo-tree-id9293 . -1) (842 . 843) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 842) (#(")" 0 1 (fontified nil)) . 843) (844 . 845)) (23732 43142 506934 372000) 0 nil]) nil nil (23732 43142 541901 791000) 0 nil] #4# 80762 143 nil)