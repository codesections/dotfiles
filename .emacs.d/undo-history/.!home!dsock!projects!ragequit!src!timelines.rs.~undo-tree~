"97b3f336b61b066eacd3e6953109627575c78a5f"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#3=[nil nil ((#("use warp::reject::Rejection;
use warp::Reply;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 10 (fontified t) 10 16 (fontified t face font-lock-constant-face) 16 18 (fontified t) 18 27 (fontified t face font-lock-type-face) 27 28 (fontified t) 28 29 (fontified t) 29 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 37 (fontified t face font-lock-constant-face) 37 39 (fontified t) 39 44 (fontified t face font-lock-type-face) 44 46 (fontified t)) . 100) (undo-tree-id1612 . -44) (undo-tree-id1613 . -15) (undo-tree-id1614 . -44) (undo-tree-id1615 . -33) (undo-tree-id1616 . -37) (undo-tree-id1617 . -4) (undo-tree-id1618 . -8) (undo-tree-id1619 . -4) (undo-tree-id1620 . -27) (undo-tree-id1621 . -33) (undo-tree-id1622 . -44) (undo-tree-id1623 . -44) (undo-tree-id1624 . -15) (undo-tree-id1625 . -44) (undo-tree-id1626 . -15) (undo-tree-id1627 . -15) (undo-tree-id1628 . -15) (undo-tree-id1629 . -15) (undo-tree-id1630 . -46) (undo-tree-id1631 . -15) (undo-tree-id1632 . -15) (undo-tree-id1633 . -15) (undo-tree-id1634 . -15) (undo-tree-id1635 . -15) (undo-tree-id1636 . -15) (undo-tree-id1637 . -15) (undo-tree-id1638 . -15) (undo-tree-id1639 . -15) (undo-tree-id1640 . -44) (undo-tree-id1641 . -15) (undo-tree-id1642 . -15) (undo-tree-id1643 . -15) (undo-tree-id1644 . -44) (undo-tree-id1645 . -44) (undo-tree-id1646 . -15) 144) nil (23752 29013 894867 535000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 4978) (4977 . 4978) (4976 . 4978) (#("(" 0 1 (fontified nil)) . -4976) (4970 . 4977) (#("b" 0 1 (fontified nil)) . -4970) (#("o" 0 1 (fontified nil)) . -4971) (#("s" 0 1 (fontified nil)) . -4972) 4973 (4970 . 4973) (4961 . 4970) 4889) nil (23752 29013 894877 917000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 4400) (4399 . 4400) (4398 . 4400) (#("(" 0 1 (fontified nil)) . -4398) (4392 . 4399) (#("b" 0 1 (fontified nil)) . -4392) (#("o" 0 1 (fontified nil)) . -4393) (#("s" 0 1 (fontified nil)) . -4394) 4395 (4392 . 4395) (4383 . 4392) 4312) nil (23752 29013 894885 297000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 4042) (undo-tree-id1647 . -1) (4041 . 4042) (4040 . 4042) (#("(" 0 1 (fontified nil)) . -4040) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (4034 . 4041) (#("b" 0 1 (fontified nil)) . -4034) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (#("o" 0 1 (fontified nil)) . -4035) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (#("s" 0 1 (fontified nil)) . -4036) (undo-tree-id1658 . -1) 4037 (4034 . 4037) (4025 . 4034) 3960) nil (23752 29013 894906 170000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 3706) (3705 . 3706) (3704 . 3706) (#("(" 0 1 (fontified nil)) . -3704) (3698 . 3705) (#("b" 0 1 (fontified nil)) . -3698) (#("o" 0 1 (fontified nil)) . -3699) (#("s" 0 1 (fontified nil)) . -3700) 3701 (3698 . 3701) (3689 . 3698) 3623) nil (23752 29013 894914 196000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 3275) (3274 . 3275) (3273 . 3275) (#("(" 0 1 (fontified nil)) . -3273) (3267 . 3274) (#("b" 0 1 (fontified nil)) . -3267) (#("o" 0 1 (fontified nil)) . -3268) (#("s" 0 1 (fontified nil)) . -3269) 3270 (3267 . 3270) (3258 . 3267) 3257) nil (23752 29013 894920 750000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 2618) (undo-tree-id1659 . -1) (2617 . 2618) (2616 . 2618) (#("(" 0 1 (fontified nil)) . -2616) (2610 . 2617) (#("b" 0 1 (fontified nil)) . -2610) (#("o" 0 1 (fontified nil)) . -2611) (#("s" 0 1 (fontified nil)) . -2612) 2613 (2610 . 2613) (2601 . 2610) 2533) nil (23752 29013 894928 196000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 2162) (undo-tree-id1660 . -1) (2161 . 2162) (2160 . 2162) (#("(" 0 1 (fontified nil)) . -2160) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (2154 . 2161) (#("b" 0 1 (fontified nil)) . -2154) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (#("o" 0 1 (fontified nil)) . -2155) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (#("s" 0 1 (fontified nil)) . -2156) (undo-tree-id1671 . -1) 2157 (2154 . 2157) (2145 . 2154) 2144) nil (23752 29013 894946 536000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 1533) (1532 . 1533) (1531 . 1533) (#("(" 0 1 (fontified nil)) . -1531) (1525 . 1532) (#("b" 0 1 (fontified t)) . -1525) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (#("o" 0 1 (fontified t)) . -1526) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (#("s" 0 1 (fontified t)) . -1527) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) 1528 (1525 . 1528) (1516 . 1525) 1439) nil (23752 29013 894958 917000) 0 nil]) ((4411 . 4412) (#(">" 0 1 (fontified nil syntax-table #1=(1))) . 4411) (4410 . 4411) (#(" " 0 1 (fontified nil)) . -4410) (4410 . 4411) (#(">" 0 1 (fontified nil)) . -4410) (4401 . 4411) (#("l" 0 1 (fontified nil)) . -4401) 4402 (4398 . 4402) (4397 . 4399) (#("<" 0 1 (fontified nil)) . -4397) (4386 . 4398) (#("impl Filter<Extract = TimelineUser, Error = Rejection> " 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 11 (fontified t face font-lock-type-face) 11 12 (fontified t) 12 19 (fontified t face font-lock-type-face) 19 22 (fontified t) 22 34 (fontified t face font-lock-type-face) 34 36 (fontified t) 36 41 (fontified t face font-lock-type-face) 41 44 (fontified t) 44 53 (fontified t face font-lock-type-face) 53 55 (fontified t)) . 4386)) nil (23752 29013 894967 988000) 0 nil]) ((4078 . 4079) (#(">" 0 1 (fontified nil syntax-table #1#)) . 4078) (4077 . 4078) (#(" " 0 1 (fontified nil)) . -4077) (4077 . 4078) (#(">" 0 1 (fontified nil)) . -4077) (4068 . 4078) (#("l" 0 1 (fontified nil)) . -4068) 4069 (4065 . 4069) (4064 . 4066) (#("<" 0 1 (fontified nil)) . -4064) (4053 . 4065) (#("impl Filter<Extract = TimelineUser, Error = Rejection> " 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 11 (fontified t face font-lock-type-face) 11 12 (fontified t) 12 19 (fontified t face font-lock-type-face) 19 22 (fontified t) 22 34 (fontified t face font-lock-type-face) 34 36 (fontified t) 36 41 (fontified t face font-lock-type-face) 41 44 (fontified t) 44 53 (fontified t face font-lock-type-face) 53 55 (fontified t)) . 4053)) nil (23752 29013 894975 511000) 0 nil]) ((3753 . 3754) (#(">" 0 1 (fontified nil syntax-table #1#)) . 3753) (3752 . 3753) (#(" " 0 1 (fontified nil)) . -3752) (3752 . 3753) (#(">" 0 1 (fontified nil)) . -3752) (3743 . 3753) (#("l" 0 1 (fontified nil)) . -3743) (undo-tree-id1678 . -1) 3744 (3740 . 3744) (3739 . 3741) (#("<" 0 1 (fontified nil)) . -3739) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (3728 . 3740) (#("impl Filter<Extract = TimelineUser, Error = Rejection> " 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 11 (fontified t face font-lock-type-face) 11 12 (fontified t) 12 19 (fontified t face font-lock-type-face) 19 22 (fontified t) 22 34 (fontified t face font-lock-type-face) 34 36 (fontified t) 36 40 (fontified t face font-lock-type-face) 40 41 (face font-lock-type-face fontified t) 41 44 (fontified t) 44 53 (face font-lock-type-face fontified t) 53 55 (fontified t)) . 3728)) nil (23752 29013 894988 130000) 0 nil]) ((3341 . 3342) (#(">" 0 1 (fontified nil syntax-table #1#)) . 3341) (3340 . 3341) (#(" " 0 1 (fontified nil)) . -3340) (3340 . 3341) (#(">" 0 1 (fontified nil)) . -3340) (3331 . 3341) (#("l" 0 1 (fontified nil)) . -3331) (undo-tree-id1681 . -1) 3332 (3328 . 3332) (3327 . 3329) (#("<" 0 1 (fontified nil)) . -3327) (undo-tree-id1682 . -1) (undo-tree-id1683 . -1) (3316 . 3328) (#("impl Filter<Extract = TimelineUser, Error = Rejection> " 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 11 (fontified t face font-lock-type-face) 11 12 (fontified t) 12 19 (fontified t face font-lock-type-face) 19 22 (fontified t) 22 34 (fontified t face font-lock-type-face) 34 36 (fontified t) 36 41 (fontified t face font-lock-type-face) 41 44 (fontified t) 44 53 (fontified t face font-lock-type-face) 53 55 (fontified t)) . 3316)) nil (23752 29013 895000 114000) 0 nil]) ((2716 . 2717) (#(">" 0 1 (fontified nil syntax-table #1#)) . 2716) (2715 . 2716) (#(" " 0 1 (fontified nil)) . -2715) (2715 . 2716) (#(">" 0 1 (fontified nil)) . -2715) (2706 . 2716) (#("l" 0 1 (fontified nil)) . -2706) (undo-tree-id1684 . -1) 2707 (2703 . 2707) (2702 . 2704) (#("<" 0 1 (fontified nil)) . -2702) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (2691 . 2703) (#("impl Filter<Extract = TimelineUser, Error = Rejection> " 0 1 (fontified t face font-lock-keyword-face) 1 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t) 5 11 (face font-lock-type-face fontified t) 11 12 (fontified t) 12 19 (face font-lock-type-face fontified t) 19 22 (fontified t) 22 26 (face font-lock-type-face fontified t) 26 34 (face font-lock-type-face fontified t) 34 36 (fontified t) 36 41 (face font-lock-type-face fontified t) 41 44 (fontified t) 44 53 (face font-lock-type-face fontified t) 53 55 (fontified t)) . 2691)) nil (23752 29013 895009 808000) 0 nil]) ((2271 . 2272) (#(">" 0 1 (fontified nil syntax-table #1#)) . 2271) (2270 . 2271) (#(" " 0 1 (fontified nil)) . -2270) (2270 . 2271) (#(">" 0 1 (fontified nil)) . -2270) (2261 . 2271) (#("l" 0 1 (fontified nil)) . -2261) (undo-tree-id1687 . -1) 2262 (2258 . 2262) (2257 . 2259) (#("<" 0 1 (fontified nil)) . -2257) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (2246 . 2258) (#("impl Filter<Extract = TimelineUser, Error = Rejection> " 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 11 (fontified t face font-lock-type-face) 11 12 (fontified t) 12 19 (fontified t face font-lock-type-face) 19 22 (fontified t) 22 34 (fontified t face font-lock-type-face) 34 36 (fontified t) 36 41 (fontified t face font-lock-type-face) 41 44 (fontified t) 44 53 (fontified t face font-lock-type-face) 53 55 (fontified t)) . 2246)) nil (23752 29013 895019 929000) 0 nil]) ((1659 . 1660) (#(">" 0 1 (fontified nil syntax-table #1#)) . 1659) (1658 . 1659) (#(" " 0 1 (fontified nil)) . -1658) (1658 . 1659) (#(">" 0 1 (fontified nil)) . -1658) (1649 . 1659) (#("l" 0 1 (fontified nil)) . -1649) (undo-tree-id1690 . -1) 1650 (1646 . 1650) (1645 . 1647) (#("<" 0 1 (fontified nil)) . -1645) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (1634 . 1646) (#("impl Filter<Extract = TimelineUser, Error = Rejection> " 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 11 (fontified t face font-lock-type-face) 11 12 (fontified t) 12 19 (fontified t face font-lock-type-face) 19 22 (fontified t) 22 29 (fontified t face font-lock-type-face) 29 34 (fontified t face font-lock-type-face) 34 36 (fontified t) 36 41 (fontified t face font-lock-type-face) 41 44 (fontified t) 44 53 (fontified t face font-lock-type-face) 53 55 (fontified t)) . 1634)) nil (23752 29013 895031 727000) 0 nil]) ((1236 . 1237) (#(">" 0 1 (fontified nil syntax-table #1#)) . 1236) (1235 . 1236) (#(" " 0 1 (fontified nil)) . -1235) (1235 . 1236) (#(">" 0 1 (fontified nil face font-lock-type-face)) . -1235) (1226 . 1236) (#("l" 0 1 (fontified t face font-lock-type-face)) . -1226) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) 1227 (1224 . 1227) (1223 . 1224) (1222 . 1224) (#("<" 0 1 (fontified nil face font-lock-type-face)) . -1222) (1211 . 1223) (#("impl Filter<Extract = TimelineUser, Error = Rejection> " 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 11 (fontified t face font-lock-type-face) 11 12 (fontified t) 12 19 (fontified t face font-lock-type-face) 19 22 (fontified t) 22 34 (fontified t face font-lock-type-face) 34 36 (fontified t) 36 41 (fontified t face font-lock-type-face) 41 44 (fontified t) 44 53 (fontified t face font-lock-type-face) 53 55 (fontified t)) . 1211) (undo-tree-id1695 . 51)) nil (23752 29013 895041 923000) 0 nil] [nil nil ((#("impl" 0 4 (fontified t face font-lock-keyword-face)) . 1211)) ((1211 . 1215)) (23752 28947 732128 358000) 0 nil] [nil ([nil ([nil ([nil ([nil nil ((1588 . 1594) (1584 . 1588) (#("    " 0 4 (fontified nil)) . 1583) (undo-tree-id1496 . -4) (1582 . 1588) (1581 . 1582)) ((#(";" 0 1 (fontified nil)) . 1581) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (#("
    
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil)) . 1582) (undo-tree-id1503 . -6) (undo-tree-id1504 . -6) (1583 . 1587) (#("    " 0 4 (fontified nil)) . 1584) (undo-tree-id1505 . -4) (undo-tree-id1506 . -4) (#("filter" 0 6 (fontified t)) . 1588) (undo-tree-id1507 . -6)) (23752 28923 925020 816000) 0 nil]) ((1328 . 1337) (#("p" 0 1 (fontified t face font-lock-preprocessor-face)) . -1328) (undo-tree-id1497 . -1) (#("a" 0 1 (fontified t face font-lock-preprocessor-face)) . -1329) (undo-tree-id1498 . -1) (#("t" 0 1 (fontified t face font-lock-preprocessor-face)) . -1330) (undo-tree-id1499 . -1) (#("h" 0 1 (fontified t face font-lock-preprocessor-face)) . -1331) (undo-tree-id1500 . -1) 1332 (1324 . 1332)) ((#("let path" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil) 4 5 (fontified nil face font-lock-preprocessor-face) 5 6 (fontified nil face font-lock-preprocessor-face) 6 7 (fontified nil face font-lock-preprocessor-face) 7 8 (fontified nil face font-lock-preprocessor-face)) . 1324) (undo-tree-id1508 . -4) (undo-tree-id1509 . -4) (undo-tree-id1510 . -4) (undo-tree-id1511 . -4) (undo-tree-id1512 . -4) (undo-tree-id1513 . -4) (undo-tree-id1514 . -4) (undo-tree-id1515 . -4) (undo-tree-id1516 . -4) (undo-tree-id1517 . -4) (undo-tree-id1518 . -4) (undo-tree-id1519 . -4) (undo-tree-id1520 . -4) (undo-tree-id1521 . -4) (undo-tree-id1522 . -4) (undo-tree-id1523 . -4) (undo-tree-id1524 . -4) (undo-tree-id1525 . -4) (undo-tree-id1526 . -4) (undo-tree-id1527 . -4) (undo-tree-id1528 . -4) (1328 . 1332) (#("filter = " 0 6 (fontified t face font-lock-variable-name-face) 6 9 (fontified t)) . 1328) (undo-tree-id1529 . -6) (undo-tree-id1530 . -1) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1)) (23752 28923 951433 793000) 0 nil]) (1325) (nil undo-tree-canary) (23752 28924 269652 8000) 0 nil] [nil nil ((#("        " 0 8 (fontified t)) . -1367) (undo-tree-id1490 . -8) (undo-tree-id1491 . -8) 1375 (1366 . 1375) 1325) ((#("
        " 0 1 (fontified t) 1 9 (fontified nil)) . 1366) (undo-tree-id1492 . -9) (undo-tree-id1493 . -9) (undo-tree-id1494 . -1) (undo-tree-id1495 . -1) (1367 . 1375)) (23752 28886 355988 674000) 0 nil]) ((1151 . 1154) (1131 . 1134) (1046 . 1049) (975 . 978) (919 . 922) (890 . 893) (823 . 826) (761 . 764) (664 . 667) (658 . 661) (638 . 641) (580 . 583) (509 . 512) (453 . 456) (424 . 427) (374 . 377) (326 . 329) (233 . 236)) ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 233) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 326) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 374) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 424) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 453) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 509) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 580) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 638) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 658) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 664) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 761) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 823) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 890) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 919) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 975) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 1046) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 1131) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 1151)) (23752 28924 588049 670000) 0 nil]) ((nil rear-nonsticky nil 1101 . 1102) (#("
" 0 1 (fontified nil)) . -1994) (1101 . 1995) 1100) ((#("
// GET /api/v1/streaming/user                                  [private; language filter]
pub fn user() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user))
}

// GET /api/v1/streaming/user/notification                     [private; notification filter]
pub fn user_notifications() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user.with_notification_filter()))
}
" 0 1 (rear-nonsticky nil fontified nil) 1 4 (fontified nil face font-lock-comment-delimiter-face) 4 8 (fontified nil face font-lock-comment-face) 8 35 (fontified nil face font-lock-comment-face) 35 91 (face font-lock-comment-face fontified nil) 91 94 (fontified t face font-lock-keyword-face) 94 95 (fontified t) 95 97 (fontified t face font-lock-keyword-face) 97 98 (fontified t) 98 102 (fontified t face font-lock-function-name-face) 102 106 (fontified t) 106 107 (syntax-table #1# fontified t) 107 108 (fontified t) 108 112 (fontified t face font-lock-keyword-face) 112 113 (fontified t) 113 119 (fontified t face font-lock-type-face) 119 120 (fontified t) 120 127 (fontified t face font-lock-type-face) 127 130 (fontified t) 130 142 (fontified t face font-lock-type-face) 142 144 (fontified t) 144 149 (fontified t face font-lock-type-face) 149 152 (fontified t) 152 161 (fontified t face font-lock-type-face) 161 163 (fontified t) 163 165 (fontified t) 165 169 (fontified t) 169 174 (fontified t face font-lock-preprocessor-face) 174 175 (fontified t) 175 180 (fontified t face font-lock-string-face) 180 183 (fontified t) 183 187 (fontified t face font-lock-string-face) 187 190 (fontified t) 190 201 (fontified t face font-lock-string-face) 201 204 (fontified t) 204 208 (fontified t face font-lock-string-face) 208 209 (syntax-table #2=(15) fontified t face font-lock-string-face) 209 210 (fontified t face font-lock-string-face) 210 211 (fontified t) 211 212 (fontified t) 212 225 (fontified t) 225 229 (fontified t face font-lock-constant-face) 229 251 (fontified t) 251 255 (fontified t face font-lock-constant-face) 255 274 (fontified t) 274 279 (fontified t face font-lock-type-face) 279 281 (fontified t) 281 288 (fontified t face font-lock-type-face) 288 317 (fontified t) 317 318 (fontified t face font-lock-constant-face) 318 321 (fontified t face font-lock-constant-face) 321 342 (fontified t) 342 347 (fontified t face font-lock-type-face) 347 349 (fontified t) 349 356 (fontified t face font-lock-type-face) 356 359 (fontified t) 359 373 (fontified t) 373 377 (fontified t face font-lock-variable-name-face) 377 379 (fontified t) 379 383 (fontified t face font-lock-type-face) 383 395 (fontified t) 395 413 (fontified t) 413 414 (fontified t) 414 417 (fontified t) 417 420 (fontified t face font-lock-comment-delimiter-face) 420 472 (fontified t face font-lock-comment-face) 472 493 (fontified t face font-lock-comment-face) 493 499 (fontified t face font-lock-comment-face) 499 511 (fontified t face font-lock-comment-face) 511 514 (fontified t face font-lock-keyword-face) 514 515 (fontified t) 515 517 (fontified t face font-lock-keyword-face) 517 518 (fontified t) 518 536 (fontified t face font-lock-function-name-face) 536 540 (fontified t) 540 541 (fontified t syntax-table #1#) 541 542 (fontified t) 542 546 (fontified t face font-lock-keyword-face) 546 547 (fontified t) 547 553 (fontified t face font-lock-type-face) 553 554 (fontified t) 554 561 (fontified t face font-lock-type-face) 561 564 (fontified t) 564 576 (fontified t face font-lock-type-face) 576 578 (fontified t) 578 583 (fontified t face font-lock-type-face) 583 586 (fontified t) 586 591 (fontified t face font-lock-type-face) 591 595 (face font-lock-type-face fontified t) 595 596 (fontified t) 596 597 (fontified t) 597 599 (fontified t) 599 603 (fontified t) 603 608 (fontified t face font-lock-preprocessor-face) 608 609 (fontified t) 609 614 (fontified t face font-lock-string-face) 614 617 (fontified t) 617 621 (fontified t face font-lock-string-face) 621 624 (fontified t) 624 635 (fontified t face font-lock-string-face) 635 638 (fontified t) 638 642 (fontified t face font-lock-string-face) 642 643 (syntax-table #2# fontified t face font-lock-string-face) 643 644 (fontified t face font-lock-string-face) 644 647 (fontified t) 647 657 (fontified t face font-lock-string-face) 657 661 (fontified t face font-lock-string-face) 661 663 (fontified t) 663 665 (fontified t) 665 676 (fontified t) 676 680 (fontified t face font-lock-constant-face) 680 689 (fontified t) 689 702 (fontified t) 702 706 (fontified t face font-lock-constant-face) 706 712 (fontified t) 712 725 (fontified t) 725 730 (fontified t face font-lock-type-face) 730 732 (fontified t) 732 739 (fontified t face font-lock-type-face) 739 742 (fontified t) 742 768 (fontified t) 768 772 (fontified t face font-lock-constant-face) 772 793 (fontified t) 793 798 (fontified t face font-lock-type-face) 798 800 (fontified t) 800 807 (fontified t face font-lock-type-face) 807 810 (fontified t) 810 824 (fontified t) 824 828 (fontified t face font-lock-variable-name-face) 828 830 (fontified t) 830 834 (fontified t face font-lock-type-face) 834 859 (fontified t) 859 891 (fontified t) 891 892 (fontified t) 892 893 (fontified nil) 893 894 (fontified nil)) . 1101) (undo-tree-id1549 . -110) (undo-tree-id1550 . -110) (undo-tree-id1551 . -1) (undo-tree-id1552 . -893) (undo-tree-id1553 . 481) (undo-tree-id1554 . 893) (undo-tree-id1555 . -110) (undo-tree-id1556 . -111) (undo-tree-id1557 . -110) (undo-tree-id1558 . -110) (undo-tree-id1559 . -169) (undo-tree-id1560 . -169) (undo-tree-id1561 . -413) (undo-tree-id1562 . -413) (undo-tree-id1563 . -169) (undo-tree-id1564 . -169) (undo-tree-id1565 . -169) (undo-tree-id1566 . -169) (undo-tree-id1567 . -169) (undo-tree-id1568 . -169) (undo-tree-id1569 . -169) (undo-tree-id1570 . -175) (undo-tree-id1571 . -176) (undo-tree-id1572 . -169) (undo-tree-id1573 . -169) (undo-tree-id1574 . -169) (undo-tree-id1575 . -169) (undo-tree-id1576 . -169) (undo-tree-id1577 . -169) (undo-tree-id1578 . -169) (undo-tree-id1579 . -169) (undo-tree-id1580 . -169) (undo-tree-id1581 . -169) (undo-tree-id1582 . -169) (undo-tree-id1583 . -359) (undo-tree-id1584 . -413) (undo-tree-id1585 . -412) (undo-tree-id1586 . -169) (undo-tree-id1587 . -609) (undo-tree-id1588 . -610) (undo-tree-id1589 . -411) (undo-tree-id1590 . -412) (undo-tree-id1591 . -404) (undo-tree-id1592 . -405) (undo-tree-id1593 . -403) (undo-tree-id1594 . -404) (undo-tree-id1595 . -385) (undo-tree-id1596 . -386) (undo-tree-id1597 . -371) (undo-tree-id1598 . -372) (undo-tree-id1599 . -169) (undo-tree-id1600 . -412) (undo-tree-id1601 . -170) (undo-tree-id1602 . -169) (undo-tree-id1603 . -170) (undo-tree-id1604 . -511) (undo-tree-id1605 . -514) (undo-tree-id1606 . -91) (undo-tree-id1607 . -94) (undo-tree-id1608 . -91) (undo-tree-id1609 . -162) (undo-tree-id1610 . -511) (undo-tree-id1611 . -596) (1994 . 1995) (nil rear-nonsticky t 1101 . 1102)) (23752 28924 907353 891000) 0 nil]) ((1 . 5728) (#("use crate::query;
use crate::user;
use crate::user::{Scope, User};
use warp::reject::Rejection;
use warp::{path, Filter};
use warp::filters::BoxedFilter;
use warp::Reply;

#[allow(dead_code)]
type TimelineUser = ((String, User),);

// GET /api/v1/streaming/user                                  [private; language filter]
pub fn user() -> BoxedFilter<TimelineUser>{
    path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user)).boxed()
}

// GET /api/v1/streaming/user/notification                     [private; notification filter]
pub fn user_notifications() -> BoxedFilter<TimelineUser>{
    path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user.with_notification_filter())).boxed()
}

// GET /api/v1/streaming/public                                [public; language filter]
pub fn public() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| (\"public\".to_owned(), user.with_language_filter()))
}

// GET /api/v1/streaming/public?only_media=true                [public; language filter]
pub fn public_media() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => (\"public:media\".to_owned(), user.with_language_filter()),
            _ => (\"public\".to_owned(), user.with_language_filter()),
        })
}

// GET /api/v1/streaming/public/local                          [public; language filter]
pub fn public_local() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| (\"public:local\".to_owned(), user.with_language_filter()))
}

// GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
pub fn public_local_media() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .and(path::end())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => (\"public:local:media\".to_owned(), user.with_language_filter()),
            _ => (\"public:local\".to_owned(), user.with_language_filter()),
        })
}

// GET /api/v1/streaming/direct                                [private; *no* filter]
pub fn direct() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"direct\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (format!(\"direct:{}\", user.id), user.with_no_filter()))
}

// GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
pub fn hashtag() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| (format!(\"hashtag:{}\", q.tag), User::public()))
}

// GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
pub fn hashtag_local() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\" / \"local\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| (format!(\"hashtag:{}:local\", q.tag), User::public()))
}

// GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
pub fn list() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"list\")
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .and(warp::query())
        .and_then(|user: User, q: query::List| (user.is_authorized_for_list(q.list), Ok(user)))
        .untuple_one()
        .and(path::end())
        .map(|list: i64, user: User| (format!(\"list:{}\", list), user.with_no_filter()))
}
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn public_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/public\")
            .filter(&public())
            .unwrap();

        assert_eq!(value.0, \"public\".to_string());
        assert_eq!(value.1, User::public().with_language_filter());
    }

    #[test]
    fn hashtag_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/hashtag?tag=a\")
            .filter(&hashtag())
            .unwrap();

        assert_eq!(value.0, \"hashtag:a\".to_string());
        assert_eq!(value.1, User::public());
    }

}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 18 (fontified t) 18 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 27 (fontified t face font-lock-keyword-face) 27 35 (fontified t) 35 38 (fontified t face font-lock-keyword-face) 38 39 (fontified t) 39 44 (fontified t face font-lock-keyword-face) 44 46 (fontified t) 46 50 (fontified t face font-lock-constant-face) 50 53 (fontified t) 53 58 (fontified t face font-lock-type-face) 58 60 (fontified t) 60 64 (fontified t face font-lock-type-face) 64 67 (fontified t) 67 70 (fontified t face font-lock-keyword-face) 70 71 (fontified t) 71 75 (fontified t face font-lock-constant-face) 75 77 (fontified t) 77 83 (fontified t face font-lock-constant-face) 83 85 (fontified t) 85 94 (fontified t face font-lock-type-face) 94 96 (fontified t) 96 99 (fontified t face font-lock-keyword-face) 99 100 (fontified t) 100 104 (fontified t face font-lock-constant-face) 104 113 (fontified t) 113 119 (fontified t face font-lock-type-face) 119 121 (fontified t) 121 122 (fontified t) 122 125 (fontified t face font-lock-keyword-face) 125 126 (fontified t) 126 130 (fontified t face font-lock-constant-face) 130 132 (fontified t) 132 139 (fontified t face font-lock-constant-face) 139 141 (fontified t) 141 152 (fontified t face font-lock-type-face) 152 153 (fontified t) 153 154 (fontified t) 154 157 (fontified t face font-lock-keyword-face) 157 158 (fontified t) 158 162 (fontified t face font-lock-constant-face) 162 164 (fontified t) 164 169 (fontified t face font-lock-type-face) 169 170 (fontified t) 170 171 (fontified t) 171 172 (fontified t) 172 191 (fontified t face font-lock-preprocessor-face) 191 192 (fontified t) 192 196 (fontified t face font-lock-keyword-face) 196 197 (fontified t) 197 209 (fontified t face font-lock-type-face) 209 214 (fontified t) 214 220 (fontified t face font-lock-type-face) 220 222 (fontified t) 222 226 (fontified t face font-lock-type-face) 226 232 (fontified t) 232 235 (fontified t face font-lock-comment-delimiter-face) 235 322 (fontified t face font-lock-comment-face) 322 325 (fontified t face font-lock-keyword-face) 325 326 (fontified t) 326 328 (fontified t face font-lock-keyword-face) 328 329 (fontified t) 329 333 (fontified t face font-lock-function-name-face) 333 337 (fontified t) 337 338 (fontified t syntax-table #1#) 338 339 (fontified t) 339 350 (fontified t face font-lock-type-face) 350 351 (fontified t) 351 363 (fontified t face font-lock-type-face) 363 364 (fontified t) 364 366 (fontified t) 366 370 (fontified t) 370 375 (fontified t face font-lock-preprocessor-face) 375 376 (fontified t) 376 381 (fontified t face font-lock-string-face) 381 384 (fontified t) 384 388 (fontified t face font-lock-string-face) 388 391 (fontified t) 391 402 (fontified t face font-lock-string-face) 402 405 (fontified t) 405 409 (fontified t face font-lock-string-face) 409 410 (fontified t face font-lock-string-face syntax-table #2#) 410 411 (fontified t face font-lock-string-face) 411 426 (fontified t) 426 430 (fontified t face font-lock-constant-face) 430 452 (fontified t) 452 456 (fontified t face font-lock-constant-face) 456 475 (fontified t) 475 480 (fontified t face font-lock-type-face) 480 482 (fontified t) 482 489 (fontified t face font-lock-type-face) 489 518 (fontified t) 518 519 (fontified t face font-lock-constant-face) 519 522 (fontified t face font-lock-constant-face) 522 543 (fontified t) 543 548 (fontified t face font-lock-type-face) 548 550 (fontified t) 550 557 (fontified t face font-lock-type-face) 557 560 (fontified t) 560 574 (fontified t) 574 578 (fontified t face font-lock-variable-name-face) 578 580 (fontified t) 580 584 (fontified t face font-lock-type-face) 584 596 (fontified t) 596 614 (fontified t) 614 615 (fontified t) 615 617 (fontified t) 617 620 (fontified t) 620 621 (fontified t) 621 622 (fontified t) 622 623 (fontified t) 623 626 (fontified t) 626 629 (fontified t face font-lock-comment-delimiter-face) 629 681 (fontified t face font-lock-comment-face) 681 702 (fontified t face font-lock-comment-face) 702 720 (fontified t face font-lock-comment-face) 720 723 (fontified t face font-lock-keyword-face) 723 724 (fontified t) 724 726 (fontified t face font-lock-keyword-face) 726 727 (fontified t) 727 745 (fontified t face font-lock-function-name-face) 745 749 (fontified t) 749 750 (fontified t syntax-table #1#) 750 751 (fontified t) 751 762 (fontified t face font-lock-type-face) 762 763 (fontified t) 763 775 (fontified t face font-lock-type-face) 775 776 (fontified t) 776 778 (fontified t) 778 782 (fontified t) 782 787 (fontified t face font-lock-preprocessor-face) 787 788 (fontified t) 788 793 (fontified t face font-lock-string-face) 793 796 (fontified t) 796 800 (fontified t face font-lock-string-face) 800 803 (fontified t) 803 814 (fontified t face font-lock-string-face) 814 817 (fontified t) 817 821 (fontified t face font-lock-string-face) 821 822 (fontified t face font-lock-string-face syntax-table #2#) 822 823 (fontified t face font-lock-string-face) 823 826 (fontified t) 826 836 (fontified t face font-lock-string-face) 836 840 (fontified t face font-lock-string-face) 840 842 (fontified t) 842 844 (fontified t) 844 855 (fontified t) 855 859 (face font-lock-constant-face fontified t) 859 868 (fontified t) 868 881 (fontified t) 881 885 (fontified t face font-lock-constant-face) 885 904 (fontified t) 904 909 (fontified t face font-lock-type-face) 909 911 (fontified t) 911 918 (fontified t face font-lock-type-face) 918 947 (fontified t) 947 951 (fontified t face font-lock-constant-face) 951 972 (fontified t) 972 977 (fontified t face font-lock-type-face) 977 979 (fontified t) 979 986 (fontified t face font-lock-type-face) 986 989 (fontified t) 989 1003 (fontified t) 1003 1007 (fontified t face font-lock-variable-name-face) 1007 1009 (fontified t) 1009 1013 (fontified t face font-lock-type-face) 1013 1038 (fontified t) 1038 1070 (fontified t) 1070 1071 (fontified t) 1071 1076 (fontified t) 1076 1077 (fontified t) 1077 1078 (fontified t) 1078 1079 (fontified t) 1079 1082 (fontified t) 1082 1085 (fontified t face font-lock-comment-delimiter-face) 1085 1101 (fontified t face font-lock-comment-face) 1101 1123 (fontified t face font-lock-comment-face) 1123 1171 (fontified t face font-lock-comment-face) 1171 1174 (fontified t face font-lock-keyword-face) 1174 1175 (fontified t) 1175 1177 (fontified t face font-lock-keyword-face) 1177 1178 (fontified t) 1178 1184 (fontified t face font-lock-function-name-face) 1184 1188 (fontified t) 1188 1189 (fontified t syntax-table #1#) 1189 1190 (fontified t) 1190 1194 (fontified t face font-lock-keyword-face) 1194 1195 (fontified t) 1195 1198 (fontified t face font-lock-type-face) 1198 1201 (fontified t face font-lock-type-face) 1201 1202 (fontified t) 1202 1209 (fontified t face font-lock-type-face) 1209 1212 (fontified t) 1212 1224 (fontified t face font-lock-type-face) 1224 1226 (fontified t) 1226 1231 (fontified t face font-lock-type-face) 1231 1234 (fontified t) 1234 1243 (fontified t face font-lock-type-face) 1243 1244 (fontified t) 1244 1247 (fontified t) 1247 1251 (fontified t) 1251 1256 (fontified t face font-lock-preprocessor-face) 1256 1257 (fontified t) 1257 1262 (fontified t face font-lock-string-face) 1262 1265 (fontified t) 1265 1269 (fontified t face font-lock-string-face) 1269 1272 (fontified t) 1272 1283 (fontified t face font-lock-string-face) 1283 1285 (fontified t) 1285 1286 (fontified t) 1286 1294 (fontified t face font-lock-string-face) 1294 1296 (fontified t) 1296 1309 (fontified t) 1309 1313 (fontified t face font-lock-constant-face) 1313 1335 (fontified t) 1335 1339 (fontified t face font-lock-constant-face) 1339 1350 (fontified t) 1350 1358 (fontified t) 1358 1362 (fontified t face font-lock-constant-face) 1362 1364 (fontified t) 1364 1369 (fontified t face font-lock-type-face) 1369 1371 (fontified t) 1371 1376 (fontified t face font-lock-type-face) 1376 1377 (face font-lock-type-face fontified t) 1377 1380 (fontified t) 1380 1406 (fontified t) 1406 1410 (fontified t face font-lock-constant-face) 1410 1431 (fontified t) 1431 1436 (fontified t face font-lock-type-face) 1436 1438 (fontified t) 1438 1444 (fontified t face font-lock-type-face) 1444 1461 (fontified t) 1461 1465 (fontified t face font-lock-variable-name-face) 1465 1467 (fontified t) 1467 1471 (fontified t face font-lock-type-face) 1471 1474 (fontified t) 1474 1482 (fontified t face font-lock-string-face) 1482 1528 (fontified t) 1528 1531 (fontified t face font-lock-comment-delimiter-face) 1531 1579 (fontified t face font-lock-comment-face) 1579 1617 (fontified t face font-lock-comment-face) 1617 1620 (fontified t face font-lock-keyword-face) 1620 1621 (fontified t) 1621 1623 (fontified t face font-lock-keyword-face) 1623 1624 (fontified t) 1624 1636 (fontified t face font-lock-function-name-face) 1636 1640 (fontified t) 1640 1641 (fontified t syntax-table #1#) 1641 1642 (fontified t) 1642 1646 (fontified t face font-lock-keyword-face) 1646 1647 (fontified t) 1647 1653 (fontified t face font-lock-type-face) 1653 1654 (fontified t) 1654 1661 (fontified t face font-lock-type-face) 1661 1664 (fontified t) 1664 1671 (fontified t face font-lock-type-face) 1671 1676 (fontified t face font-lock-type-face) 1676 1678 (fontified t) 1678 1683 (fontified t face font-lock-type-face) 1683 1686 (fontified t) 1686 1695 (fontified t face font-lock-type-face) 1695 1699 (fontified t) 1699 1703 (fontified t) 1703 1708 (fontified t face font-lock-preprocessor-face) 1708 1709 (fontified t) 1709 1714 (fontified t face font-lock-string-face) 1714 1717 (fontified t) 1717 1721 (fontified t face font-lock-string-face) 1721 1724 (fontified t) 1724 1735 (fontified t face font-lock-string-face) 1735 1738 (fontified t) 1738 1746 (fontified t face font-lock-string-face) 1746 1747 (fontified t) 1747 1748 (fontified t) 1748 1761 (fontified t) 1761 1765 (fontified t face font-lock-constant-face) 1765 1787 (fontified t) 1787 1791 (fontified t face font-lock-constant-face) 1791 1796 (fontified t) 1796 1810 (fontified t) 1810 1814 (fontified t face font-lock-constant-face) 1814 1816 (fontified t) 1816 1821 (fontified t face font-lock-type-face) 1821 1823 (fontified t) 1823 1829 (fontified t face font-lock-type-face) 1829 1832 (fontified t) 1832 1858 (fontified t) 1858 1862 (fontified t face font-lock-constant-face) 1862 1880 (fontified t) 1880 1883 (fontified t) 1883 1888 (face font-lock-type-face fontified t) 1888 1890 (fontified t) 1890 1896 (face font-lock-type-face fontified t) 1896 1899 (fontified t) 1899 1912 (fontified t) 1912 1916 (fontified t face font-lock-constant-face) 1916 1941 (fontified t) 1941 1945 (fontified t face font-lock-variable-name-face) 1945 1947 (fontified t) 1947 1951 (fontified t face font-lock-type-face) 1951 1953 (fontified t) 1953 1954 (fontified t face font-lock-variable-name-face) 1954 1956 (fontified t) 1956 1961 (fontified t face font-lock-constant-face) 1961 1963 (fontified t) 1963 1968 (fontified t face font-lock-type-face) 1968 1970 (fontified t) 1970 1975 (fontified t face font-lock-keyword-face) 1975 2012 (fontified t) 2012 2015 (fontified t face font-lock-string-face) 2015 2018 (fontified t) 2018 2024 (fontified t face font-lock-string-face) 2024 2026 (fontified t) 2026 2027 (fontified t syntax-table #1#) 2027 2029 (fontified t) 2029 2043 (fontified t face font-lock-string-face) 2043 2101 (fontified t) 2101 2102 (fontified t syntax-table #1#) 2102 2104 (fontified t) 2104 2112 (fontified t face font-lock-string-face) 2112 2117 (fontified t) 2117 2155 (fontified t) 2155 2169 (fontified t) 2169 2172 (fontified t face font-lock-comment-delimiter-face) 2172 2199 (fontified t face font-lock-comment-face) 2199 2248 (fontified t face font-lock-comment-face) 2248 2258 (fontified t face font-lock-comment-face) 2258 2261 (fontified t face font-lock-keyword-face) 2261 2262 (fontified t) 2262 2264 (fontified t face font-lock-keyword-face) 2264 2265 (fontified t) 2265 2277 (fontified t face font-lock-function-name-face) 2277 2281 (fontified t) 2281 2282 (fontified t syntax-table #1#) 2282 2283 (fontified t) 2283 2287 (fontified t face font-lock-keyword-face) 2287 2288 (fontified t) 2288 2294 (fontified t face font-lock-type-face) 2294 2295 (fontified t) 2295 2302 (fontified t face font-lock-type-face) 2302 2305 (fontified t) 2305 2317 (fontified t face font-lock-type-face) 2317 2319 (fontified t) 2319 2324 (fontified t face font-lock-type-face) 2324 2327 (fontified t) 2327 2332 (fontified t face font-lock-type-face) 2332 2336 (fontified t face font-lock-type-face) 2336 2340 (fontified t) 2340 2344 (fontified t) 2344 2349 (fontified t face font-lock-preprocessor-face) 2349 2350 (fontified t) 2350 2355 (fontified t face font-lock-string-face) 2355 2358 (fontified t) 2358 2362 (fontified t face font-lock-string-face) 2362 2365 (fontified t) 2365 2376 (fontified t face font-lock-string-face) 2376 2379 (fontified t) 2379 2387 (fontified t face font-lock-string-face) 2387 2390 (fontified t) 2390 2397 (fontified t face font-lock-string-face) 2397 2399 (fontified t) 2412 2416 (face font-lock-constant-face) 2438 2442 (face font-lock-constant-face) 2461 2465 (face font-lock-constant-face) 2467 2472 (face font-lock-type-face) 2474 2480 (face font-lock-type-face) 2509 2513 (face font-lock-constant-face) 2534 2539 (face font-lock-type-face) 2541 2547 (face font-lock-type-face) 2564 2568 (face font-lock-variable-name-face) 2570 2574 (face font-lock-type-face) 2577 2591 (face font-lock-string-face) 2637 2640 (face font-lock-comment-delimiter-face) 2640 2655 (face font-lock-comment-face) 2655 2726 (face font-lock-comment-face) 2726 2729 (face font-lock-keyword-face) 2730 2732 (face font-lock-keyword-face) 2733 2751 (face font-lock-function-name-face) 2755 2756 (syntax-table #1#) 2757 2758 (face font-lock-keyword-face) 2758 2761 (face font-lock-keyword-face) 2762 2768 (face font-lock-type-face) 2769 2776 (face font-lock-type-face) 2779 2791 (face font-lock-type-face) 2793 2798 (face font-lock-type-face) 2801 2810 (face font-lock-type-face) 2818 2823 (face font-lock-preprocessor-face) 2824 2829 (face font-lock-string-face) 2832 2836 (face font-lock-string-face) 2839 2850 (face font-lock-string-face) 2853 2861 (face font-lock-string-face) 2864 2871 (face font-lock-string-face) 2886 2890 (face font-lock-constant-face) 2909 2913 (face font-lock-constant-face) 2915 2920 (face font-lock-type-face) 2922 2928 (face font-lock-type-face) 2957 2961 (face font-lock-constant-face) 2982 2987 (face font-lock-type-face) 2989 2995 (face font-lock-type-face) 3011 3015 (face font-lock-constant-face) 3039 3043 (face font-lock-constant-face) 3066 3070 (face font-lock-variable-name-face) 3072 3076 (face font-lock-type-face) 3078 3079 (face font-lock-variable-name-face) 3081 3086 (face font-lock-constant-face) 3088 3093 (face font-lock-type-face) 3095 3100 (face font-lock-keyword-face) 3137 3140 (face font-lock-string-face) 3143 3149 (face font-lock-string-face) 3151 3152 (syntax-table #1#) 3154 3174 (face font-lock-string-face) 3232 3233 (syntax-table #1#) 3235 3249 (face font-lock-string-face) 3306 3309 (face font-lock-comment-delimiter-face) 3309 3392 (face font-lock-comment-face) 3392 3395 (face font-lock-keyword-face) 3396 3398 (face font-lock-keyword-face) 3399 3405 (face font-lock-function-name-face) 3409 3410 (syntax-table #1#) 3411 3415 (face font-lock-keyword-face) 3416 3422 (face font-lock-type-face) 3423 3430 (face font-lock-type-face) 3433 3445 (face font-lock-type-face) 3447 3452 (face font-lock-type-face) 3455 3464 (face font-lock-type-face) 3472 3477 (face font-lock-preprocessor-face) 3478 3483 (face font-lock-string-face) 3486 3490 (face font-lock-string-face) 3493 3504 (face font-lock-string-face) 3507 3515 (face font-lock-string-face) 3530 3534 (face font-lock-constant-face) 3556 3560 (face font-lock-constant-face) 3579 3584 (face font-lock-type-face) 3586 3593 (face font-lock-type-face) 3622 3626 (face font-lock-constant-face) 3647 3652 (face font-lock-type-face) 3654 3661 (face font-lock-type-face) 3678 3682 (face font-lock-variable-name-face) 3684 3688 (face font-lock-type-face) 3691 3698 (face rust-builtin-formatting-macro-face) 3699 3707 (face font-lock-string-face) 3707 3709 (face rust-string-interpolation-face) 3709 3710 (face font-lock-string-face) 3749 3752 (face font-lock-comment-delimiter-face) 3752 3832 (face font-lock-comment-face) 3832 3835 (face font-lock-keyword-face) 3836 3838 (face font-lock-keyword-face) 3839 3846 (face font-lock-function-name-face) 3850 3851 (syntax-table #1#) 3852 3856 (face font-lock-keyword-face) 3857 3863 (face font-lock-type-face) 3864 3871 (face font-lock-type-face) 3874 3886 (face font-lock-type-face) 3888 3893 (face font-lock-type-face) 3896 3905 (face font-lock-type-face) 3913 3918 (face font-lock-preprocessor-face) 3919 3924 (face font-lock-string-face) 3927 3931 (face font-lock-string-face) 3934 3945 (face font-lock-string-face) 3948 3957 (face font-lock-string-face) 3972 3976 (face font-lock-constant-face) 4000 4004 (face font-lock-constant-face) 4027 4028 (face font-lock-variable-name-face) 4030 4035 (face font-lock-constant-face) 4037 4044 (face font-lock-type-face) 4047 4054 (face rust-builtin-formatting-macro-face) 4055 4064 (face font-lock-string-face) 4064 4066 (face rust-string-interpolation-face) 4066 4067 (face font-lock-string-face) 4077 4081 (face font-lock-type-face) 4097 4100 (face font-lock-comment-delimiter-face) 4100 4180 (face font-lock-comment-face) 4180 4183 (face font-lock-keyword-face) 4184 4186 (face font-lock-keyword-face) 4187 4200 (face font-lock-function-name-face) 4204 4205 (syntax-table #1#) 4206 4210 (face font-lock-keyword-face) 4211 4217 (face font-lock-type-face) 4218 4225 (face font-lock-type-face) 4228 4240 (face font-lock-type-face) 4242 4247 (face font-lock-type-face) 4250 4259 (face font-lock-type-face) 4267 4272 (face font-lock-preprocessor-face) 4273 4278 (face font-lock-string-face) 4281 4285 (face font-lock-string-face) 4288 4299 (face font-lock-string-face) 4302 4311 (face font-lock-string-face) 4314 4321 (face font-lock-string-face) 4336 4340 (face font-lock-constant-face) 4364 4368 (face font-lock-constant-face) 4391 4392 (face font-lock-variable-name-face) 4394 4399 (face font-lock-constant-face) 4401 4408 (face font-lock-type-face) 4411 4418 (face rust-builtin-formatting-macro-face) 4419 4428 (face font-lock-string-face) 4428 4430 (face rust-string-interpolation-face) 4430 4437 (face font-lock-string-face) 4447 4451 (face font-lock-type-face) 4467 4470 (face font-lock-comment-delimiter-face) 4470 4551 (face font-lock-comment-face) 4551 4554 (face font-lock-keyword-face) 4555 4557 (face font-lock-keyword-face) 4558 4562 (face font-lock-function-name-face) 4566 4567 (syntax-table #1#) 4568 4572 (face font-lock-keyword-face) 4573 4579 (face font-lock-type-face) 4580 4587 (face font-lock-type-face) 4590 4596 (face font-lock-type-face) 4596 4602 (face font-lock-type-face) 4604 4609 (face font-lock-type-face) 4612 4621 (face font-lock-type-face) 4629 4634 (face font-lock-preprocessor-face) 4635 4640 (face font-lock-string-face) 4643 4647 (face font-lock-string-face) 4650 4661 (face font-lock-string-face) 4664 4670 (face font-lock-string-face) 4685 4689 (face font-lock-constant-face) 4708 4713 (face font-lock-type-face) 4715 4722 (face font-lock-type-face) 4751 4755 (face font-lock-constant-face) 4776 4781 (face font-lock-type-face) 4783 4790 (face font-lock-type-face) 4806 4810 (face font-lock-constant-face) 4840 4844 (face font-lock-variable-name-face) 4846 4850 (face font-lock-type-face) 4852 4853 (face font-lock-variable-name-face) 4855 4860 (face font-lock-constant-face) 4862 4866 (face font-lock-type-face) 4906 4908 (face font-lock-type-face) 4953 4957 (face font-lock-constant-face) 4980 4984 (face font-lock-variable-name-face) 4986 4989 (face font-lock-type-face) 4991 4995 (face font-lock-variable-name-face) 4997 5001 (face font-lock-type-face) 5004 5011 (face rust-builtin-formatting-macro-face) 5012 5018 (face font-lock-string-face) 5018 5020 (face rust-string-interpolation-face) 5020 5021 (face font-lock-string-face) 5056 5068 (face font-lock-preprocessor-face) 5069 5072 (face font-lock-keyword-face) 5073 5078 (face font-lock-constant-face) 5085 5088 (face font-lock-keyword-face) 5089 5094 (face font-lock-keyword-face) 5104 5111 (face font-lock-preprocessor-face) 5116 5118 (face font-lock-keyword-face) 5119 5125 (face font-lock-function-name-face) 5125 5134 (face font-lock-function-name-face) 5147 5150 (face font-lock-keyword-face) 5151 5156 (face font-lock-variable-name-face) 5159 5163 (face font-lock-constant-face) 5165 5169 (face font-lock-constant-face) 5199 5224 (face font-lock-string-face) 5224 5225 (face font-lock-string-face) 5290 5300 (face font-lock-preprocessor-face) 5310 5318 (face font-lock-string-face) 5341 5351 (face font-lock-preprocessor-face) 5361 5365 (face font-lock-type-face) 5412 5419 (face font-lock-preprocessor-face) 5424 5426 (face font-lock-keyword-face) 5427 5443 (face font-lock-function-name-face) 5456 5459 (face font-lock-keyword-face) 5460 5465 (face font-lock-variable-name-face) 5468 5472 (face font-lock-constant-face) 5474 5478 (face font-lock-constant-face) 5508 5541 (face font-lock-string-face) 5607 5617 (face font-lock-preprocessor-face) 5627 5638 (face font-lock-string-face) 5661 5671 (face font-lock-preprocessor-face) 5681 5685 (face font-lock-type-face)) . 1) (undo-tree-id1447 . -1080) (undo-tree-id1448 . -339) (undo-tree-id1449 . 4629) (undo-tree-id1450 . -232) (undo-tree-id1451 . 4626) (undo-tree-id1452 . -249) (undo-tree-id1453 . -1080) (undo-tree-id1454 . -565) (undo-tree-id1455 . -623) (undo-tree-id1456 . -96) (undo-tree-id1457 . -565) (undo-tree-id1458 . -565) (undo-tree-id1459 . -565) (undo-tree-id1460 . -565) (undo-tree-id1461 . -565) (undo-tree-id1462 . -119) (undo-tree-id1463 . -119) (undo-tree-id1464 . -96) (undo-tree-id1465 . -119) (undo-tree-id1466 . -119) (undo-tree-id1467 . -96) (undo-tree-id1468 . -339) (undo-tree-id1469 . -339) (undo-tree-id1470 . -565) (undo-tree-id1471 . -339) (undo-tree-id1472 . -339) (undo-tree-id1473 . -339) (undo-tree-id1474 . -339) (undo-tree-id1475 . -249) (undo-tree-id1476 . -339) (undo-tree-id1477 . -249) (undo-tree-id1478 . -249) (undo-tree-id1479 . -763) (undo-tree-id1480 . -560) (undo-tree-id1481 . -622) (undo-tree-id1482 . -751) (undo-tree-id1483 . -351) (undo-tree-id1484 . -763) (undo-tree-id1485 . -751) (undo-tree-id1486 . -989) (undo-tree-id1487 . -1078) (undo-tree-id1488 . -1077) (undo-tree-id1489 . -763)) ((1 . 5708) (#("use crate::query;
use crate::user;
use crate::user::{Scope, User};
use warp::filters::BoxedFilter;
use warp::reject::Rejection;
use warp::Reply;
use warp::{path, Filter};

#[allow(dead_code)]
type TimelineUser = ((String, User),);

// GET /api/v1/streaming/user                                  [private; language filter]
pub fn user() -> BoxedFilter<TimelineUser> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user))
        .boxed()
}

// GET /api/v1/streaming/user/notification                     [private; notification filter]
pub fn user_notifications() -> BoxedFilter<TimelineUser> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user.with_notification_filter()))
        .boxed()
}

// GET /api/v1/streaming/public                                [public; language filter]
pub fn public() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| (\"public\".to_owned(), user.with_language_filter()))
}

// GET /api/v1/streaming/public?only_media=true                [public; language filter]
pub fn public_media() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => (\"public:media\".to_owned(), user.with_language_filter()),
            _ => (\"public\".to_owned(), user.with_language_filter()),
        })
}

// GET /api/v1/streaming/public/local                          [public; language filter]
pub fn public_local() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| (\"public:local\".to_owned(), user.with_language_filter()))
}

// GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
pub fn public_local_media() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .and(path::end())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => (\"public:local:media\".to_owned(), user.with_language_filter()),
            _ => (\"public:local\".to_owned(), user.with_language_filter()),
        })
}

// GET /api/v1/streaming/direct                                [private; *no* filter]
pub fn direct() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"direct\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (format!(\"direct:{}\", user.id), user.with_no_filter()))
}

// GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
pub fn hashtag() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| (format!(\"hashtag:{}\", q.tag), User::public()))
}

// GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
pub fn hashtag_local() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\" / \"local\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| (format!(\"hashtag:{}:local\", q.tag), User::public()))
}

// GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
pub fn list() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"list\")
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .and(warp::query())
        .and_then(|user: User, q: query::List| (user.is_authorized_for_list(q.list), Ok(user)))
        .untuple_one()
        .and(path::end())
        .map(|list: i64, user: User| (format!(\"list:{}\", list), user.with_no_filter()))
}
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn public_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/public\")
            .filter(&public())
            .unwrap();

        assert_eq!(value.0, \"public\".to_string());
        assert_eq!(value.1, User::public().with_language_filter());
    }

    #[test]
    fn hashtag_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/hashtag?tag=a\")
            .filter(&hashtag())
            .unwrap();

        assert_eq!(value.0, \"hashtag:a\".to_string());
        assert_eq!(value.1, User::public());
    }

}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 18 (fontified t) 18 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 27 (fontified t face font-lock-keyword-face) 27 35 (fontified t) 35 38 (fontified t face font-lock-keyword-face) 38 39 (fontified t) 39 44 (fontified t face font-lock-keyword-face) 44 46 (fontified t) 46 50 (fontified t face font-lock-constant-face) 50 53 (fontified t) 53 58 (fontified t face font-lock-type-face) 58 60 (fontified t) 60 64 (fontified t face font-lock-type-face) 64 67 (fontified t) 67 70 (fontified t face font-lock-keyword-face) 70 71 (fontified t) 71 75 (fontified t face font-lock-constant-face) 75 77 (fontified t) 77 84 (fontified t face font-lock-constant-face) 84 86 (fontified t) 86 97 (fontified t face font-lock-type-face) 97 99 (fontified t) 99 102 (fontified t face font-lock-keyword-face) 102 103 (fontified t) 103 107 (fontified t face font-lock-constant-face) 107 109 (fontified t) 109 115 (fontified t face font-lock-constant-face) 115 117 (fontified t) 117 126 (fontified t face font-lock-type-face) 126 127 (fontified t) 127 128 (fontified t) 128 131 (fontified t face font-lock-keyword-face) 131 132 (fontified t) 132 136 (fontified t face font-lock-constant-face) 136 138 (fontified t) 138 143 (fontified t face font-lock-type-face) 143 145 (fontified t) 145 148 (fontified t face font-lock-keyword-face) 148 149 (fontified t) 149 153 (fontified t face font-lock-constant-face) 153 162 (fontified t) 162 168 (fontified t face font-lock-type-face) 168 172 (fontified t) 172 191 (fontified t face font-lock-preprocessor-face) 191 192 (fontified t) 192 196 (fontified t face font-lock-keyword-face) 196 197 (fontified t) 197 209 (fontified t face font-lock-type-face) 209 214 (fontified t) 214 220 (fontified t face font-lock-type-face) 220 222 (fontified t) 222 226 (fontified t face font-lock-type-face) 226 232 (fontified t) 232 235 (fontified t face font-lock-comment-delimiter-face) 235 322 (fontified t face font-lock-comment-face) 322 325 (fontified t face font-lock-keyword-face) 325 326 (fontified t) 326 328 (fontified t face font-lock-keyword-face) 328 329 (fontified t) 329 333 (fontified t face font-lock-function-name-face) 333 337 (fontified t) 337 338 (syntax-table #1# fontified t) 338 339 (fontified t) 339 350 (fontified t face font-lock-type-face) 350 351 (fontified t) 351 363 (fontified t face font-lock-type-face) 363 371 (fontified t) 371 376 (fontified t face font-lock-preprocessor-face) 376 377 (fontified t) 377 382 (fontified t face font-lock-string-face) 382 385 (fontified t) 385 389 (fontified t face font-lock-string-face) 389 392 (fontified t) 392 403 (fontified t face font-lock-string-face) 403 406 (fontified t) 406 410 (fontified t face font-lock-string-face) 410 411 (syntax-table #2# fontified t face font-lock-string-face) 411 412 (fontified t face font-lock-string-face) 412 427 (fontified t) 427 431 (fontified t face font-lock-constant-face) 431 453 (fontified t) 453 457 (fontified t face font-lock-constant-face) 457 476 (fontified t) 476 481 (fontified t face font-lock-type-face) 481 483 (fontified t) 483 490 (fontified t face font-lock-type-face) 490 519 (fontified t) 519 523 (fontified t face font-lock-constant-face) 523 544 (fontified t) 544 549 (fontified t face font-lock-type-face) 549 551 (fontified t) 551 558 (fontified t face font-lock-type-face) 558 575 (fontified t) 575 579 (fontified t face font-lock-variable-name-face) 579 581 (fontified t) 581 585 (fontified t face font-lock-type-face) 585 599 (fontified t) 599 616 (fontified t) 616 627 (fontified t) 627 633 (fontified t) 633 636 (fontified t) 636 639 (fontified t face font-lock-comment-delimiter-face) 639 730 (fontified t face font-lock-comment-face) 730 733 (fontified t face font-lock-keyword-face) 733 734 (fontified t) 734 736 (fontified t face font-lock-keyword-face) 736 737 (fontified t) 737 755 (fontified t face font-lock-function-name-face) 755 759 (fontified t) 759 760 (syntax-table #1# fontified t) 760 761 (fontified t) 761 772 (fontified t face font-lock-type-face) 772 773 (fontified t) 773 785 (fontified t face font-lock-type-face) 785 793 (fontified t) 793 798 (fontified t face font-lock-preprocessor-face) 798 799 (fontified t) 799 804 (fontified t face font-lock-string-face) 804 807 (fontified t) 807 811 (fontified t face font-lock-string-face) 811 814 (fontified t) 814 825 (fontified t face font-lock-string-face) 825 828 (fontified t) 828 832 (fontified t face font-lock-string-face) 832 833 (syntax-table #2# fontified t face font-lock-string-face) 833 834 (fontified t face font-lock-string-face) 834 837 (fontified t) 837 851 (fontified t face font-lock-string-face) 851 866 (fontified t) 866 870 (fontified t face font-lock-constant-face) 870 892 (fontified t) 892 896 (fontified t face font-lock-constant-face) 896 915 (fontified t) 915 920 (fontified t face font-lock-type-face) 920 922 (fontified t) 922 929 (fontified t face font-lock-type-face) 929 958 (fontified t) 958 962 (fontified t face font-lock-constant-face) 962 983 (fontified t) 983 988 (fontified t face font-lock-type-face) 988 990 (fontified t) 990 997 (fontified t face font-lock-type-face) 997 1000 (fontified t) 1000 1014 (fontified t) 1014 1018 (fontified t face font-lock-variable-name-face) 1018 1020 (fontified t) 1020 1024 (fontified t face font-lock-type-face) 1024 1081 (fontified t) 1081 1102 (fontified t) 1102 1105 (fontified t face font-lock-comment-delimiter-face) 1105 1116 (fontified t face font-lock-comment-face) 1116 1191 (face font-lock-comment-face fontified t) 1191 1194 (fontified t face font-lock-keyword-face) 1194 1195 (fontified t) 1195 1197 (fontified t face font-lock-keyword-face) 1197 1198 (fontified t) 1198 1204 (fontified t face font-lock-function-name-face) 1204 1208 (fontified t) 1208 1209 (syntax-table #1# fontified t) 1209 1210 (fontified t) 1210 1214 (fontified t face font-lock-keyword-face) 1214 1215 (fontified t) 1215 1221 (fontified t face font-lock-type-face) 1221 1222 (fontified t) 1222 1229 (fontified t face font-lock-type-face) 1229 1232 (fontified t) 1232 1244 (fontified t face font-lock-type-face) 1244 1246 (fontified t) 1246 1251 (fontified t face font-lock-type-face) 1251 1254 (fontified t) 1254 1263 (fontified t face font-lock-type-face) 1263 1271 (fontified t) 1271 1276 (fontified t face font-lock-preprocessor-face) 1276 1277 (fontified t) 1277 1282 (fontified t face font-lock-string-face) 1282 1285 (fontified t) 1285 1289 (fontified t face font-lock-string-face) 1289 1292 (fontified t) 1292 1303 (fontified t face font-lock-string-face) 1303 1306 (fontified t) 1306 1314 (fontified t face font-lock-string-face) 1314 1329 (fontified t) 1329 1333 (fontified t face font-lock-constant-face) 1333 1355 (fontified t) 1355 1359 (fontified t face font-lock-constant-face) 1359 1378 (fontified t) 1378 1382 (fontified t face font-lock-constant-face) 1382 1384 (fontified t) 1384 1389 (fontified t face font-lock-type-face) 1389 1391 (fontified t) 1391 1397 (fontified t face font-lock-type-face) 1397 1426 (fontified t) 1426 1430 (fontified t face font-lock-constant-face) 1430 1451 (fontified t) 1451 1456 (fontified t face font-lock-type-face) 1456 1458 (fontified t) 1458 1464 (fontified t face font-lock-type-face) 1464 1481 (fontified t) 1481 1485 (fontified t face font-lock-variable-name-face) 1485 1487 (fontified t) 1487 1491 (fontified t face font-lock-type-face) 1491 1494 (fontified t) 1494 1502 (fontified t face font-lock-string-face) 1502 1548 (fontified t) 1548 1551 (fontified t face font-lock-comment-delimiter-face) 1551 1581 (fontified t face font-lock-comment-face) 1581 1637 (fontified t face font-lock-comment-face) 1637 1640 (fontified t face font-lock-keyword-face) 1640 1641 (fontified t) 1641 1643 (fontified t face font-lock-keyword-face) 1643 1644 (fontified t) 1644 1656 (fontified t face font-lock-function-name-face) 1656 1660 (fontified t) 1660 1661 (syntax-table #1# fontified t) 1661 1662 (fontified t) 1662 1666 (fontified t face font-lock-keyword-face) 1666 1667 (fontified t) 1667 1673 (fontified t face font-lock-type-face) 1673 1674 (fontified t) 1674 1681 (fontified t face font-lock-type-face) 1681 1684 (fontified t) 1684 1691 (fontified t face font-lock-type-face) 1691 1696 (face font-lock-type-face fontified t) 1696 1698 (fontified t) 1698 1703 (face font-lock-type-face fontified t) 1703 1706 (fontified t) 1706 1715 (face font-lock-type-face fontified t) 1715 1719 (fontified t) 1719 1723 (fontified t) 1723 1728 (fontified t face font-lock-preprocessor-face) 1728 1729 (fontified t) 1729 1734 (fontified t face font-lock-string-face) 1734 1737 (fontified t) 1737 1741 (fontified t face font-lock-string-face) 1741 1744 (fontified t) 1744 1755 (fontified t face font-lock-string-face) 1755 1758 (fontified t) 1758 1766 (fontified t face font-lock-string-face) 1766 1781 (fontified t) 1781 1785 (fontified t face font-lock-constant-face) 1785 1807 (fontified t) 1807 1811 (fontified t face font-lock-constant-face) 1811 1830 (fontified t) 1830 1834 (fontified t face font-lock-constant-face) 1834 1836 (fontified t) 1836 1841 (fontified t face font-lock-type-face) 1841 1843 (fontified t) 1843 1849 (fontified t face font-lock-type-face) 1849 1878 (fontified t) 1878 1882 (fontified t face font-lock-constant-face) 1882 1903 (fontified t) 1903 1908 (fontified t face font-lock-type-face) 1908 1910 (fontified t) 1910 1916 (fontified t face font-lock-type-face) 1916 1932 (fontified t) 1932 1936 (fontified t face font-lock-constant-face) 1936 1961 (fontified t) 1961 1965 (fontified t face font-lock-variable-name-face) 1965 1967 (fontified t) 1967 1971 (fontified t face font-lock-type-face) 1971 1973 (fontified t) 1973 1974 (fontified t face font-lock-variable-name-face) 1974 1976 (fontified t) 1976 1981 (fontified t face font-lock-constant-face) 1981 1983 (fontified t) 1983 1988 (fontified t face font-lock-type-face) 1988 1990 (fontified t) 1990 1995 (fontified t face font-lock-keyword-face) 1995 2032 (fontified t) 2032 2035 (fontified t face font-lock-string-face) 2035 2038 (fontified t) 2038 2044 (fontified t face font-lock-string-face) 2044 2046 (fontified t) 2046 2047 (syntax-table #1# fontified t) 2047 2049 (fontified t) 2049 2063 (fontified t face font-lock-string-face) 2063 2121 (fontified t) 2121 2122 (syntax-table #1# fontified t) 2122 2124 (fontified t) 2124 2132 (fontified t face font-lock-string-face) 2132 2137 (fontified t) 2137 2175 (fontified t) 2175 2189 (fontified t) 2189 2192 (fontified t face font-lock-comment-delimiter-face) 2192 2219 (fontified t face font-lock-comment-face) 2219 2278 (face font-lock-comment-face fontified t) 2301 2302 (syntax-table #1#)) . 1) (undo-tree-id1172 . -851) (undo-tree-id1173 . -851) (undo-tree-id1175 . -143) (undo-tree-id1176 . -851) (undo-tree-id1177 . -877) (undo-tree-id1178 . -851) (undo-tree-id1179 . -851) (undo-tree-id1181 . -143) (undo-tree-id1183 . -143) (undo-tree-id1185 . -143) (undo-tree-id1187 . -143) (undo-tree-id1189 . -143) (undo-tree-id1191 . -143) (undo-tree-id1193 . -143) (undo-tree-id1195 . -136) (undo-tree-id1197 . -143) (undo-tree-id1199 . -851) (undo-tree-id1201 . -851) (undo-tree-id1203 . -851) (undo-tree-id1205 . -851) (undo-tree-id1207 . -851) (undo-tree-id1209 . -851) (undo-tree-id1211 . -851) (undo-tree-id1212 . -851) (undo-tree-id1213 . -851) (undo-tree-id1215 . -851) (undo-tree-id1217 . -1278) (undo-tree-id1219 . -799) (undo-tree-id1221 . -799) (undo-tree-id1223 . -851) (undo-tree-id1225 . -852) (t 23752 28353 740665 897000)) (23752 28947 733995 355000) 0 nil]) ((#(";" 0 1 (fontified nil)) . 1079) (1079 . 1080) (#(")" 0 1 (fontified nil)) . 1079) (1078 . 1079) (1077 . 1079) (#("(" 0 1 (fontified nil)) . 1077) (1071 . 1078)) ((#(".boxed(" 0 1 (fontified nil) 1 6 (fontified nil) 6 7 (fontified nil)) . 1071) (undo-tree-id1226 . -6) (undo-tree-id1228 . -6) (undo-tree-id1230 . -6) (undo-tree-id1232 . -6) (undo-tree-id1234 . -6) (undo-tree-id1236 . -6) (1077 . 1078) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 1077) (undo-tree-id1237 . -1) (undo-tree-id1239 . -1) (undo-tree-id1241 . 2) (undo-tree-id1243 . 1) (undo-tree-id1245 . 1) (#(")" 0 1 (fontified nil)) . 1078) (undo-tree-id1248 . 1) (1079 . 1080) (#(";" 0 1 (fontified nil)) . 1079) (1079 . 1080)) (23752 28601 288023 929000) 0 nil]) ((764 . 776) (#("Time" 0 4 (fontified nil face font-lock-type-face)) . 764) (764 . 768) (763 . 765) (#("<" 0 1 (fontified nil face font-lock-type-face)) . 763) (752 . 764) (#("Boxe" 0 2 (fontified nil face font-lock-type-face) 2 4 (fontified nil face font-lock-type-face)) . 752) (754 . 756) (#("s" 0 1 (fontified nil face font-lock-type-face)) . 754) (752 . 755) (#(" Filter<Extract = TimelineUser, Error = Rejection> " 0 1 (fontified t) 1 7 (fontified t face font-lock-type-face) 7 8 (fontified t) 8 15 (fontified t face font-lock-type-face) 15 18 (fontified t) 18 30 (fontified t face font-lock-type-face) 30 32 (fontified t) 32 37 (fontified t face font-lock-type-face) 37 40 (fontified t) 40 49 (fontified t face font-lock-type-face) 49 50 (fontified t) 50 51 (fontified t)) . 752)) ((752 . 803) (#("Bos" 0 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face)) . 752) (754 . 755) (#("xe" 0 2 (fontified nil face font-lock-type-face)) . 754) (752 . 756) (#("BoxedFilter" 0 11 (fontified nil face font-lock-type-face)) . 752) (#("<" 0 1 (fontified nil face font-lock-type-face)) . 763) (763 . 764) (#("<>" 0 1 (fontified nil) 1 2 (fontified nil)) . 763) (#("Time" 0 4 (fontified nil face font-lock-type-face)) . 764) (764 . 768) (#("TimelineUser" 0 12 (fontified t face font-lock-type-face)) . 764)) (23752 28601 268272 76000) 0 nil]) ((#("impl" 0 4 (fontified t face font-lock-keyword-face)) . 752)) ((752 . 756)) (23752 28601 122311 14000) 0 nil]) ((352 . 364) (#("Time" 0 4 (fontified nil face font-lock-type-face)) . 352) (352 . 356) (#("(impl Reply)" 0 1 (fontified t) 1 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 11 (fontified t face font-lock-type-face) 11 12 (fontified t)) . 352) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -12) (undo-tree-id1446 . -12)) ((352 . 364) (#("Time" 0 4 (fontified nil face font-lock-type-face)) . 352) (352 . 356) (#("TimelineUser" 0 12 (fontified t face font-lock-type-face)) . 352) (undo-tree-id1250 . -4)) (23752 28601 86576 486000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 623) (622 . 623) (621 . 623) (#("(" 0 1 (fontified nil)) . 621) (618 . 622) (#("c" 0 1 (fontified nil)) . 618) (616 . 619) (#("c" 0 1 (fontified nil)) . 616) (615 . 617)) ((#(".c" 0 1 (fontified nil) 1 2 (fontified nil)) . 615) (616 . 617) (#("bo" 0 2 (fontified nil)) . 616) (#("c" 0 1 (fontified nil)) . 618) (618 . 619) (#("xed(" 0 3 (fontified nil) 3 4 (fontified nil)) . 618) (621 . 622) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 621) (#(")" 0 1 (fontified nil)) . 622) (623 . 624)) (23752 28601 56389 822000) 0 nil]) ((364 . 365) (#(">" 0 1 (fontified nil)) . 352) (351 . 353) (#("<" 0 1 (fontified nil face font-lock-type-face)) . 351) (351 . 352)) ((#("<" 0 1 (fontified nil face font-lock-type-face)) . 351) (351 . 352) (#("<>" 0 1 (fontified nil) 1 2 (fontified nil)) . 351) (undo-tree-id1251 . -1) (undo-tree-id1253 . -1) (352 . 353) (#(">" 0 1 (fontified t)) . 364)) (23752 28601 8686 872000) 0 nil]) ((165 . 171) (#("R" 0 1 (fontified nil face font-lock-type-face)) . 165) (159 . 166) (#("parp" 0 1 (fontified nil face font-lock-constant-face) 1 2 (fontified nil face font-lock-constant-face) 2 3 (fontified nil face font-lock-constant-face) 3 4 (fontified nil face font-lock-constant-face)) . 159) (154 . 163)) ((#("
" 0 1 (fontified t)) . 154) (#("use parp" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil) 4 5 (fontified nil face font-lock-constant-face) 5 6 (fontified nil face font-lock-constant-face) 6 7 (fontified nil face font-lock-constant-face) 7 8 (fontified nil face font-lock-constant-face)) . 155) (159 . 163) (#("warp::R" 0 4 (fontified nil face font-lock-constant-face) 4 6 (fontified nil) 6 7 (fontified nil face font-lock-type-face)) . 159) (165 . 166) (#("Reply" 0 5 (fontified nil face font-lock-type-face)) . 165) (#(";" 0 1 (fontified t)) . 170)) (23752 28600 974824 966000) 0 nil]) ((335 . 345) (334 . 336) (#("(" 0 1 (fontified nil face font-lock-type-face)) . 334) (323 . 335) (#("Boxe" 0 4 (fontified nil face font-lock-type-face)) . 323) (323 . 327) (#("Bo" 0 2 (fontified t face font-lock-type-face)) . 323)) ((323 . 325) (#("Boxe" 0 4 (fontified nil face font-lock-type-face)) . 323) (323 . 327) (#("BoxedFilter" 0 11 (fontified nil face font-lock-type-face)) . 323) (undo-tree-id1254 . -11) (undo-tree-id1256 . -11) (undo-tree-id1258 . -11) (#("(" 0 1 (fontified nil face font-lock-type-face)) . 334) (334 . 335) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 334) (#("impl Reply" 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 10 (fontified t face font-lock-type-face)) . 335)) (23752 28600 932886 258000) 0 nil]) ((142 . 154) (#("B" 0 1 (fontified nil face font-lock-type-face)) . 142) (133 . 143) (#("f" 0 1 (fontified nil)) . 133) (122 . 134)) ((#("
" 0 1 (fontified t)) . 122) (#("use warp::f" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil) 4 8 (fontified nil face font-lock-constant-face) 8 10 (fontified nil) 10 11 (fontified nil)) . 123) (133 . 134) (#("filters" 0 7 (fontified nil face font-lock-constant-face)) . 133) (#("::B" 0 2 (fontified nil) 2 3 (fontified nil face font-lock-type-face)) . 140) (142 . 143) (#("BoxedFilter" 0 11 (fontified nil face font-lock-type-face)) . 142) (#(";" 0 1 (fontified t)) . 153)) (23752 28600 892287 822000) 0 nil] [nil nil ((120 . 133)) ((#(", BoxedFilter" 0 2 (fontified t) 2 13 (fontified t face font-lock-type-face)) . 120) (undo-tree-id1041 . -9) (undo-tree-id1042 . -8) (undo-tree-id1043 . -10) (undo-tree-id1044 . -9) (undo-tree-id1045 . -11) (undo-tree-id1046 . -10) (undo-tree-id1047 . -12) (undo-tree-id1048 . -11) (undo-tree-id1049 . -13) (undo-tree-id1050 . -12) (undo-tree-id1051 . -12) (undo-tree-id1052 . -12) (undo-tree-id1053 . -11) (undo-tree-id1054 . -12) (undo-tree-id1055 . -11) (undo-tree-id1056 . -11) (undo-tree-id1057 . -11) (undo-tree-id1058 . -11) (undo-tree-id1059 . -11) (undo-tree-id1060 . -11) (undo-tree-id1061 . -11) (undo-tree-id1062 . -11) (undo-tree-id1063 . -11) (undo-tree-id1064 . -11) (undo-tree-id1065 . -10) (undo-tree-id1066 . -11) (undo-tree-id1067 . -10) (undo-tree-id1068 . -10) (undo-tree-id1069 . -11) (undo-tree-id1070 . -10) (undo-tree-id1071 . -10) (undo-tree-id1072 . -11) (undo-tree-id1073 . -10) (undo-tree-id1074 . -3) (undo-tree-id1075 . -10) (undo-tree-id1076 . -11) (undo-tree-id1077 . -9) (undo-tree-id1078 . -10) (undo-tree-id1079 . -8) (undo-tree-id1080 . -9) (undo-tree-id1081 . -7) (undo-tree-id1082 . -8) (undo-tree-id1083 . -6) (undo-tree-id1084 . -7) (undo-tree-id1085 . -5) (undo-tree-id1086 . -6) (undo-tree-id1087 . -4) (undo-tree-id1088 . -5) (undo-tree-id1089 . -3) (undo-tree-id1090 . -4) (undo-tree-id1091 . -2) (undo-tree-id1092 . -13) (undo-tree-id1093 . -2) (undo-tree-id1094 . -13) (undo-tree-id1095 . -2) (undo-tree-id1096 . -13) (undo-tree-id1097 . -2) (undo-tree-id1098 . -13)) (23752 28214 90612 959000) 0 nil]) ((291 . 293) (#("impl Filter<Extract = TimelineUser, Error = Rejection> " 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 11 (fontified t face font-lock-type-face) 11 12 (fontified t) 12 19 (fontified t face font-lock-type-face) 19 22 (fontified t) 22 34 (fontified t face font-lock-type-face) 34 36 (fontified t) 36 41 (fontified t face font-lock-type-face) 41 44 (fontified t) 44 53 (fontified t face font-lock-type-face) 53 55 (fontified t)) . 291) (t 23752 28498 267985 895000)) ((291 . 346) (#("Bo" 0 2 (fontified t face font-lock-type-face)) . 291)) (23752 28600 232803 546000) 0 nil]) ((1 . 5703) (#("use crate::query;
use crate::user;
use crate::user::{Scope, User};
use warp::reject::Rejection;
use warp::{path, Filter};

#[allow(dead_code)]
type TimelineUser = ((String, User),);

// GET /api/v1/streaming/user                                  [private; language filter]
pub fn user() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user))
}

// GET /api/v1/streaming/user/notification                     [private; notification filter]
pub fn user_notifications() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user.with_notification_filter()))
}

// GET /api/v1/streaming/public                                [public; language filter]
pub fn public() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| (\"public\".to_owned(), user.with_language_filter()))
}

// GET /api/v1/streaming/public?only_media=true                [public; language filter]
pub fn public_media() -> impl Filter<Extract = TimelineUser, Error = Rejection> {

     path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => (\"public:media\".to_owned(), user.with_language_filter()),
            _ => (\"public\".to_owned(), user.with_language_filter()),
        })
}

// GET /api/v1/streaming/public/local                          [public; language filter]
pub fn public_local() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
     path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| (\"public:local\".to_owned(), user.with_language_filter()))
}

// GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
pub fn public_local_media() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
     path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .and(path::end())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => (\"public:local:media\".to_owned(), user.with_language_filter()),
            _ => (\"public:local\".to_owned(), user.with_language_filter()),
        })
}

// GET /api/v1/streaming/direct                                [private; *no* filter]
pub fn direct() -> impl Filter<Extract = TimelineUser, Error = Rejection> {

     path!(\"api\" / \"v1\" / \"streaming\" / \"direct\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (format!(\"direct:{}\", user.id), user.with_no_filter()))
}

// GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
pub fn hashtag() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| (format!(\"hashtag:{}\", q.tag), User::public()))
}

// GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
pub fn hashtag_local() -> impl Filter<Extract = TimelineUser, Error = Rejection> {

     path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\" / \"local\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| (format!(\"hashtag:{}:local\", q.tag), User::public()))
}

// GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
pub fn list() -> impl Filter<Extract = TimelineUser, Error = Rejection> {

     path!(\"api\" / \"v1\" / \"streaming\" / \"list\")
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .and(warp::query())
        .and_then(|user: User, q: query::List| (user.is_authorized_for_list(q.list), Ok(user)))
        .untuple_one()
        .and(path::end())
        .map(|list: i64, user: User| (format!(\"list:{}\", list), user.with_no_filter()))
}
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn public_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/public\")
            .filter(&public())
            .unwrap();

        assert_eq!(value.0, \"public\".to_string());
        assert_eq!(value.1, User::public().with_language_filter());
    }

    #[test]
    fn hashtag_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/hashtag?tag=a\")
            .filter(&hashtag())
            .unwrap();

        assert_eq!(value.0, \"hashtag:a\".to_string());
        assert_eq!(value.1, User::public());
    }

}
" 0 3 (face font-lock-keyword-face) 4 9 (face font-lock-keyword-face) 18 21 (face font-lock-keyword-face) 22 27 (face font-lock-keyword-face) 35 38 (face font-lock-keyword-face) 39 44 (face font-lock-keyword-face) 46 50 (face font-lock-constant-face) 53 58 (face font-lock-type-face) 60 64 (face font-lock-type-face) 67 70 (face font-lock-keyword-face) 71 75 (face font-lock-constant-face) 77 83 (face font-lock-constant-face) 85 94 (face font-lock-type-face) 96 99 (face font-lock-keyword-face) 100 104 (face font-lock-constant-face) 113 119 (face font-lock-type-face) 123 142 (face font-lock-preprocessor-face) 143 147 (face font-lock-keyword-face) 148 160 (face font-lock-type-face) 165 171 (face font-lock-type-face) 173 177 (face font-lock-type-face) 183 186 (face font-lock-comment-delimiter-face) 186 273 (face font-lock-comment-face) 273 276 (face font-lock-keyword-face) 277 279 (face font-lock-keyword-face) 280 284 (face font-lock-function-name-face) 288 289 (syntax-table #1#) 290 294 (face font-lock-keyword-face) 295 301 (face font-lock-type-face) 302 309 (face font-lock-type-face) 312 324 (face font-lock-type-face) 326 331 (face font-lock-type-face) 334 343 (face font-lock-type-face) 351 356 (face font-lock-preprocessor-face) 357 362 (face font-lock-string-face) 365 369 (face font-lock-string-face) 372 383 (face font-lock-string-face) 386 390 (face font-lock-string-face) 390 391 (face font-lock-string-face syntax-table #2#) 391 392 (face font-lock-string-face) 407 411 (face font-lock-constant-face) 433 437 (face font-lock-constant-face) 456 461 (face font-lock-type-face) 463 470 (face font-lock-type-face) 499 500 (face font-lock-constant-face) 500 503 (face font-lock-constant-face) 524 529 (face font-lock-type-face) 531 538 (face font-lock-type-face) 555 559 (face font-lock-variable-name-face) 561 565 (face font-lock-type-face) 599 602 (face font-lock-comment-delimiter-face) 602 693 (face font-lock-comment-face) 693 696 (face font-lock-keyword-face) 697 699 (face font-lock-keyword-face) 700 718 (face font-lock-function-name-face) 722 723 (syntax-table #1#) 724 728 (face font-lock-keyword-face) 729 735 (face font-lock-type-face) 736 743 (face font-lock-type-face) 746 758 (face font-lock-type-face) 760 765 (face font-lock-type-face) 768 777 (face font-lock-type-face) 785 790 (face font-lock-preprocessor-face) 791 796 (face font-lock-string-face) 799 803 (face font-lock-string-face) 806 817 (face font-lock-string-face) 820 824 (face font-lock-string-face) 824 825 (face font-lock-string-face syntax-table #2#) 825 826 (face font-lock-string-face) 829 843 (face font-lock-string-face) 858 862 (face font-lock-constant-face) 884 888 (face font-lock-constant-face) 907 912 (face font-lock-type-face) 914 921 (face font-lock-type-face) 950 954 (face font-lock-constant-face) 975 980 (face font-lock-type-face) 982 989 (face font-lock-type-face) 1006 1010 (face font-lock-variable-name-face) 1012 1016 (face font-lock-type-face) 1077 1080 (face font-lock-comment-delimiter-face) 1080 1166 (face font-lock-comment-face) 1166 1169 (face font-lock-keyword-face) 1170 1172 (face font-lock-keyword-face) 1173 1179 (face font-lock-function-name-face) 1183 1184 (syntax-table #1#) 1185 1189 (face font-lock-keyword-face) 1190 1196 (face font-lock-type-face) 1197 1204 (face font-lock-type-face) 1207 1219 (face font-lock-type-face) 1221 1226 (face font-lock-type-face) 1229 1238 (face font-lock-type-face) 1246 1251 (face font-lock-preprocessor-face) 1252 1257 (face font-lock-string-face) 1260 1264 (face font-lock-string-face) 1267 1278 (face font-lock-string-face) 1281 1289 (face font-lock-string-face) 1304 1308 (face font-lock-constant-face) 1330 1334 (face font-lock-constant-face) 1353 1357 (face font-lock-constant-face) 1359 1364 (face font-lock-type-face) 1366 1372 (face font-lock-type-face) 1401 1405 (face font-lock-constant-face) 1426 1431 (face font-lock-type-face) 1433 1439 (face font-lock-type-face) 1456 1460 (face font-lock-variable-name-face) 1462 1466 (face font-lock-type-face) 1469 1477 (face font-lock-string-face) 1523 1526 (face font-lock-comment-delimiter-face) 1526 1573 (face font-lock-comment-face) 1573 1611 (face font-lock-comment-face) 1611 1612 (face font-lock-comment-face) 1612 1615 (face font-lock-keyword-face) 1616 1618 (face font-lock-keyword-face) 1619 1631 (face font-lock-function-name-face) 1635 1636 (syntax-table #1#) 1637 1641 (face font-lock-keyword-face) 1642 1648 (face font-lock-type-face) 1649 1656 (face font-lock-type-face) 1659 1671 (face font-lock-type-face) 1673 1678 (face font-lock-type-face) 1681 1690 (face font-lock-type-face) 1691 1692 (rear-nonsticky t) 1699 1700 (rear-nonsticky t) 1700 1705 (face font-lock-preprocessor-face) 1706 1711 (face font-lock-string-face) 1714 1718 (face font-lock-string-face) 1721 1732 (face font-lock-string-face) 1735 1743 (face font-lock-string-face) 1758 1762 (face font-lock-constant-face) 1784 1788 (face font-lock-constant-face) 1807 1811 (face font-lock-constant-face) 1813 1818 (face font-lock-type-face) 1820 1826 (face font-lock-type-face) 1855 1859 (face font-lock-constant-face) 1880 1885 (face font-lock-type-face) 1887 1893 (face font-lock-type-face) 1909 1913 (face font-lock-constant-face) 1938 1942 (face font-lock-variable-name-face) 1944 1948 (face font-lock-type-face) 1950 1951 (face font-lock-variable-name-face) 1953 1958 (face font-lock-constant-face) 1960 1965 (face font-lock-type-face) 1967 1972 (face font-lock-keyword-face) 2009 2012 (face font-lock-string-face) 2015 2021 (face font-lock-string-face) 2023 2024 (syntax-table #1#) 2026 2040 (face font-lock-string-face) 2098 2099 (syntax-table #1#) 2101 2109 (face font-lock-string-face) 2166 2169 (face font-lock-comment-delimiter-face) 2169 2254 (face font-lock-comment-face) 2254 2255 (face font-lock-comment-face) 2255 2258 (face font-lock-keyword-face) 2259 2261 (face font-lock-keyword-face) 2262 2274 (face font-lock-function-name-face) 2278 2279 (syntax-table #1#) 2280 2284 (face font-lock-keyword-face) 2285 2291 (face font-lock-type-face) 2292 2299 (face font-lock-type-face) 2302 2314 (face font-lock-type-face) 2316 2321 (face font-lock-type-face) 2324 2333 (face font-lock-type-face) 2334 2335 (rear-nonsticky t) 2341 2342 (rear-nonsticky t) 2342 2347 (face font-lock-preprocessor-face) 2348 2353 (face font-lock-string-face) 2356 2360 (face font-lock-string-face) 2363 2374 (face font-lock-string-face) 2377 2385 (face font-lock-string-face) 2388 2395 (face font-lock-string-face) 2410 2414 (face font-lock-constant-face) 2436 2440 (face font-lock-constant-face) 2459 2463 (face font-lock-constant-face) 2465 2470 (face font-lock-type-face) 2472 2478 (face font-lock-type-face) 2507 2511 (face font-lock-constant-face) 2532 2537 (face font-lock-type-face) 2539 2545 (face font-lock-type-face) 2562 2566 (face font-lock-variable-name-face) 2568 2572 (face font-lock-type-face) 2575 2589 (face font-lock-string-face) 2635 2638 (face font-lock-comment-delimiter-face) 2638 2723 (face font-lock-comment-face) 2723 2724 (face font-lock-comment-face) 2724 2727 (face font-lock-keyword-face) 2728 2730 (face font-lock-keyword-face) 2731 2749 (face font-lock-function-name-face) 2753 2754 (syntax-table #1#) 2755 2759 (face font-lock-keyword-face) 2760 2766 (face font-lock-type-face) 2767 2774 (face font-lock-type-face) 2777 2789 (face font-lock-type-face) 2791 2796 (face font-lock-type-face) 2799 2808 (face font-lock-type-face) 2809 2810 (rear-nonsticky t) 2816 2817 (rear-nonsticky t) 2817 2822 (face font-lock-preprocessor-face) 2823 2828 (face font-lock-string-face) 2831 2835 (face font-lock-string-face) 2838 2849 (face font-lock-string-face) 2852 2860 (face font-lock-string-face) 2863 2870 (face font-lock-string-face) 2885 2889 (face font-lock-constant-face) 2908 2912 (face font-lock-constant-face) 2914 2919 (face font-lock-type-face) 2921 2927 (face font-lock-type-face) 2956 2960 (face font-lock-constant-face) 2981 2986 (face font-lock-type-face) 2988 2994 (face font-lock-type-face) 3010 3014 (face font-lock-constant-face) 3038 3040 (face font-lock-constant-face) 3040 3042 (face font-lock-constant-face) 3065 3069 (face font-lock-variable-name-face) 3071 3075 (face font-lock-type-face) 3077 3078 (face font-lock-variable-name-face) 3080 3085 (face font-lock-constant-face) 3087 3092 (face font-lock-type-face) 3094 3099 (face font-lock-keyword-face) 3136 3139 (face font-lock-string-face) 3142 3148 (face font-lock-string-face) 3150 3151 (syntax-table #1#) 3153 3173 (face font-lock-string-face) 3231 3232 (syntax-table #1#) 3234 3248 (face font-lock-string-face) 3305 3308 (face font-lock-comment-delimiter-face) 3308 3329 (face font-lock-comment-face) 3329 3390 (face font-lock-comment-face) 3390 3391 (face font-lock-comment-face) 3391 3394 (face font-lock-keyword-face) 3395 3397 (face font-lock-keyword-face) 3398 3404 (face font-lock-function-name-face) 3408 3409 (syntax-table #1#) 3410 3414 (face font-lock-keyword-face) 3415 3421 (face font-lock-type-face) 3422 3429 (face font-lock-type-face) 3432 3444 (face font-lock-type-face) 3446 3448 (face font-lock-type-face) 3448 3451 (face font-lock-type-face) 3454 3463 (face font-lock-type-face) 3464 3465 (rear-nonsticky t) 3472 3473 (rear-nonsticky t) 3473 3478 (face font-lock-preprocessor-face) 3479 3483 (face font-lock-string-face) 3483 3484 (face font-lock-string-face) 3487 3491 (face font-lock-string-face) 3494 3505 (face font-lock-string-face) 3508 3516 (face font-lock-string-face) 3531 3535 (face font-lock-constant-face) 3557 3561 (face font-lock-constant-face) 3580 3585 (face font-lock-type-face) 3587 3594 (face font-lock-type-face) 3623 3627 (face font-lock-constant-face) 3648 3653 (face font-lock-type-face) 3655 3662 (face font-lock-type-face) 3665 3679 (fontified t) 3679 3683 (fontified t face font-lock-variable-name-face) 3683 3685 (fontified t) 3685 3689 (fontified t face font-lock-type-face) 3689 3692 (fontified t) 3692 3699 (fontified t face rust-builtin-formatting-macro-face) 3699 3700 (fontified t) 3700 3708 (fontified t face font-lock-string-face) 3708 3710 (fontified t face rust-string-interpolation-face) 3710 3711 (fontified t face font-lock-string-face) 3711 3746 (fontified t) 3746 3747 (fontified t) 3747 3748 (fontified t) 3748 3749 (fontified t) 3749 3750 (fontified t) 3750 3753 (fontified t face font-lock-comment-delimiter-face) 3753 3833 (fontified t face font-lock-comment-face) 3833 3836 (fontified t face font-lock-keyword-face) 3836 3837 (fontified t) 3837 3839 (fontified t face font-lock-keyword-face) 3839 3840 (fontified t) 3840 3847 (fontified t face font-lock-function-name-face) 3847 3851 (fontified t) 3851 3852 (syntax-table #1# fontified t) 3852 3853 (fontified t) 3853 3857 (fontified t face font-lock-keyword-face) 3857 3858 (fontified t) 3858 3864 (fontified t face font-lock-type-face) 3864 3865 (fontified t) 3865 3872 (fontified t face font-lock-type-face) 3872 3875 (fontified t) 3875 3887 (fontified t face font-lock-type-face) 3887 3889 (fontified t) 3889 3894 (fontified t face font-lock-type-face) 3894 3897 (fontified t) 3897 3903 (fontified t face font-lock-type-face) 3903 3906 (fontified t face font-lock-type-face) 3906 3907 (fontified t) 3907 3910 (fontified t) 3910 3914 (fontified t) 3914 3919 (fontified t face font-lock-preprocessor-face) 3919 3920 (fontified t) 3920 3925 (fontified t face font-lock-string-face) 3925 3928 (fontified t) 3928 3932 (fontified t face font-lock-string-face) 3932 3935 (fontified t) 3935 3946 (fontified t face font-lock-string-face) 3946 3949 (fontified t) 3949 3958 (fontified t face font-lock-string-face) 3958 3973 (fontified t) 3973 3977 (fontified t face font-lock-constant-face) 3977 3980 (fontified t) 3980 3982 (fontified t) 3982 3983 (fontified t) 3983 3988 (fontified t) 3988 4001 (fontified t) 4001 4005 (fontified t face font-lock-constant-face) 4005 4028 (fontified t) 4028 4029 (fontified t face font-lock-variable-name-face) 4029 4031 (fontified t) 4031 4036 (fontified t face font-lock-constant-face) 4036 4038 (fontified t) 4038 4045 (fontified t face font-lock-type-face) 4045 4048 (fontified t) 4048 4055 (fontified t face rust-builtin-formatting-macro-face) 4055 4056 (fontified t) 4056 4065 (fontified t face font-lock-string-face) 4065 4067 (fontified t face rust-string-interpolation-face) 4067 4068 (fontified t face font-lock-string-face) 4068 4071 (fontified t) 4071 4072 (fontified t) 4072 4078 (fontified t) 4078 4082 (fontified t face font-lock-type-face) 4082 4083 (fontified t) 4083 4095 (fontified t) 4095 4098 (fontified t) 4098 4101 (fontified t face font-lock-comment-delimiter-face) 4101 4160 (fontified t face font-lock-comment-face) 4160 4161 (fontified t face font-lock-comment-face) 4161 4162 (fontified t face font-lock-comment-face) 4162 4165 (fontified t face font-lock-comment-face) 4165 4171 (face font-lock-comment-face fontified t) 4171 4180 (face font-lock-comment-face fontified t) 4180 4181 (face font-lock-comment-face fontified t) 4181 4184 (fontified t face font-lock-keyword-face) 4184 4185 (fontified t) 4185 4187 (fontified t face font-lock-keyword-face) 4187 4188 (fontified t) 4188 4201 (fontified t face font-lock-function-name-face) 4201 4205 (fontified t) 4205 4206 (syntax-table #1# fontified t) 4206 4207 (fontified t) 4207 4211 (fontified t face font-lock-keyword-face) 4211 4212 (fontified t) 4212 4218 (fontified t face font-lock-type-face) 4218 4219 (fontified t) 4219 4226 (fontified t face font-lock-type-face) 4226 4229 (fontified t) 4229 4241 (fontified t face font-lock-type-face) 4241 4243 (fontified t) 4243 4246 (fontified t face font-lock-type-face) 4246 4247 (fontified t face font-lock-type-face) 4247 4248 (fontified t face font-lock-type-face) 4248 4251 (fontified t) 4251 4260 (fontified t face font-lock-type-face) 4260 4261 (fontified t) 4261 4262 (rear-nonsticky t fontified t) 4262 4264 (fontified t) 4264 4265 (fontified t) 4265 4269 (fontified t) 4269 4270 (rear-nonsticky t fontified t) 4270 4275 (fontified t face font-lock-preprocessor-face) 4275 4276 (fontified t) 4276 4281 (fontified t face font-lock-string-face) 4281 4282 (fontified t) 4282 4283 (fontified t) 4283 4284 (fontified t) 4284 4288 (fontified t face font-lock-string-face) 4288 4291 (fontified t) 4291 4302 (fontified t face font-lock-string-face) 4302 4305 (fontified t) 4305 4314 (fontified t face font-lock-string-face) 4314 4317 (fontified t) 4317 4324 (fontified t face font-lock-string-face) 4324 4326 (fontified t) 4326 4339 (fontified t) 4339 4343 (fontified t face font-lock-constant-face) 4343 4367 (fontified t) 4367 4371 (fontified t face font-lock-constant-face) 4371 4380 (fontified t) 4380 4394 (fontified t) 4394 4395 (fontified t face font-lock-variable-name-face) 4395 4397 (fontified t) 4397 4402 (fontified t face font-lock-constant-face) 4402 4404 (fontified t) 4404 4411 (fontified t face font-lock-type-face) 4411 4414 (fontified t) 4414 4421 (fontified t face rust-builtin-formatting-macro-face) 4421 4422 (fontified t) 4422 4431 (fontified t face font-lock-string-face) 4431 4433 (fontified t face rust-string-interpolation-face) 4433 4440 (fontified t face font-lock-string-face) 4440 4450 (fontified t) 4450 4454 (fontified t face font-lock-type-face) 4454 4466 (fontified t) 4466 4467 (fontified t) 4467 4468 (fontified t) 4468 4469 (fontified t) 4469 4470 (fontified t) 4470 4473 (fontified t face font-lock-comment-delimiter-face) 4473 4535 (fontified t face font-lock-comment-face) 4535 4537 (fontified t face font-lock-comment-face) 4537 4553 (fontified t face font-lock-comment-face) 4553 4554 (fontified t face font-lock-comment-face) 4554 4557 (fontified t face font-lock-keyword-face) 4557 4558 (fontified t) 4558 4560 (fontified t face font-lock-keyword-face) 4560 4561 (fontified t) 4561 4565 (fontified t face font-lock-function-name-face) 4565 4569 (fontified t) 4569 4570 (syntax-table #1# fontified t) 4570 4571 (fontified t) 4571 4575 (fontified t face font-lock-keyword-face) 4575 4576 (fontified t) 4576 4582 (fontified t face font-lock-type-face) 4582 4583 (fontified t) 4583 4590 (fontified t face font-lock-type-face) 4590 4593 (fontified t) 4593 4605 (fontified t face font-lock-type-face) 4605 4607 (fontified t) 4607 4612 (fontified t face font-lock-type-face) 4612 4614 (fontified t) 4614 4615 (fontified t) 4615 4624 (fontified t face font-lock-type-face) 4624 4625 (fontified t) 4625 4626 (rear-nonsticky t fontified t) 4626 4627 (fontified t) 4627 4628 (fontified t) 4628 4629 (fontified t) 4629 4633 (fontified t) 4633 4634 (fontified t rear-nonsticky t) 4634 4635 (fontified t face font-lock-preprocessor-face) 4635 4636 (fontified t face font-lock-preprocessor-face) 4636 4639 (fontified t face font-lock-preprocessor-face) 4639 4640 (fontified t) 4640 4645 (fontified t face font-lock-string-face) 4645 4648 (fontified t) 4648 4652 (fontified t face font-lock-string-face) 4652 4655 (fontified t) 4655 4666 (fontified t face font-lock-string-face) 4666 4669 (fontified t) 4669 4675 (fontified t face font-lock-string-face) 4675 4677 (fontified t) 4677 4681 (fontified t) 4681 4690 (fontified t) 4690 4694 (fontified t face font-lock-constant-face) 4694 4702 (fontified t) 4702 4713 (fontified t) 4713 4718 (fontified t face font-lock-type-face) 4718 4720 (fontified t) 4720 4727 (fontified t face font-lock-type-face) 4727 4730 (fontified t) 4730 4756 (fontified t) 4756 4760 (fontified t face font-lock-constant-face) 4760 4781 (fontified t) 4781 4786 (fontified t face font-lock-type-face) 4786 4788 (fontified t) 4788 4790 (fontified t face font-lock-type-face) 4790 4795 (fontified t face font-lock-type-face) 4795 4798 (fontified t) 4798 4811 (fontified t) 4811 4815 (fontified t face font-lock-constant-face) 4815 4838 (fontified t) 4838 4845 (fontified t) 4845 4849 (fontified t face font-lock-variable-name-face) 4849 4851 (fontified t) 4851 4855 (fontified t face font-lock-type-face) 4855 4857 (fontified t) 4857 4858 (fontified t face font-lock-variable-name-face) 4858 4860 (fontified t) 4860 4865 (fontified t face font-lock-constant-face) 4865 4867 (fontified t) 4867 4871 (fontified t face font-lock-type-face) 4871 4879 (fontified t) 4879 4911 (fontified t) 4911 4913 (fontified t face font-lock-type-face) 4913 4922 (fontified t) 4922 4958 (fontified t) 4958 4962 (fontified t face font-lock-constant-face) 4962 4971 (fontified t) 4971 4985 (fontified t) 4985 4989 (fontified t face font-lock-variable-name-face) 4989 4991 (fontified t) 4991 4994 (fontified t face font-lock-type-face) 4994 4996 (fontified t) 4996 5000 (fontified t face font-lock-variable-name-face) 5000 5002 (fontified t) 5002 5006 (fontified t face font-lock-type-face) 5006 5009 (fontified t) 5009 5016 (fontified t face rust-builtin-formatting-macro-face) 5016 5017 (fontified t) 5017 5023 (fontified t face font-lock-string-face) 5023 5025 (fontified t face rust-string-interpolation-face) 5025 5026 (fontified t face font-lock-string-face) 5026 5041 (fontified t) 5041 5058 (fontified t) 5058 5059 (fontified t) 5059 5060 (fontified t) 5060 5061 (fontified t) 5061 5073 (fontified t face font-lock-preprocessor-face) 5073 5074 (fontified t) 5074 5077 (fontified t face font-lock-keyword-face) 5077 5078 (fontified t) 5078 5083 (fontified t face font-lock-constant-face) 5083 5090 (fontified t) 5090 5093 (fontified t face font-lock-keyword-face) 5093 5094 (fontified t) 5094 5099 (fontified t face font-lock-keyword-face) 5099 5109 (fontified t) 5109 5111 (fontified t face font-lock-preprocessor-face) 5111 5116 (fontified t face font-lock-preprocessor-face) 5116 5117 (fontified t) 5117 5121 (fontified t) 5121 5123 (fontified t face font-lock-keyword-face) 5123 5124 (fontified t) 5124 5139 (fontified t face font-lock-function-name-face) 5139 5152 (fontified t) 5152 5155 (fontified t face font-lock-keyword-face) 5155 5156 (fontified t) 5156 5161 (fontified t face font-lock-variable-name-face) 5161 5164 (fontified t) 5164 5168 (fontified t face font-lock-constant-face) 5168 5170 (fontified t) 5170 5174 (fontified t face font-lock-constant-face) 5174 5204 (fontified t) 5204 5230 (fontified t face font-lock-string-face) 5230 5232 (fontified t) 5232 5283 (fontified t) 5283 5286 (fontified t) 5286 5295 (fontified t) 5295 5305 (fontified t face font-lock-preprocessor-face) 5305 5315 (fontified t) 5315 5323 (fontified t face font-lock-string-face) 5323 5346 (fontified t) 5346 5356 (fontified t face font-lock-preprocessor-face) 5356 5366 (fontified t) 5366 5370 (fontified t face font-lock-type-face) 5370 5390 (fontified t) 5390 5398 (fontified t) 5398 5400 (fontified t) 5400 5406 (fontified t) 5406 5417 (fontified t) 5417 5424 (fontified t face font-lock-preprocessor-face) 5424 5429 (fontified t) 5429 5431 (fontified t face font-lock-keyword-face) 5431 5432 (fontified t) 5432 5448 (fontified t face font-lock-function-name-face) 5448 5461 (fontified t) 5461 5464 (fontified t face font-lock-keyword-face) 5464 5465 (fontified t) 5465 5468 (fontified t face font-lock-variable-name-face) 5468 5470 (fontified t face font-lock-variable-name-face) 5470 5471 (fontified t) 5471 5473 (fontified t) 5473 5476 (face font-lock-constant-face fontified t) 5476 5477 (face font-lock-constant-face fontified t) 5477 5479 (fontified t) 5479 5480 (face font-lock-constant-face fontified t) 5480 5483 (face font-lock-constant-face fontified t) 5483 5495 (fontified t) 5513 5546 (face font-lock-string-face) 5612 5617 (face font-lock-preprocessor-face) 5617 5622 (face font-lock-preprocessor-face) 5632 5643 (face font-lock-string-face) 5666 5676 (face font-lock-preprocessor-face) 5686 5690 (face font-lock-type-face)) . 1) (undo-tree-id1354 . -5058) (undo-tree-id1355 . -2481) (undo-tree-id1356 . -4628) (undo-tree-id1357 . -4629) (undo-tree-id1358 . -5058) (undo-tree-id1359 . 654) (undo-tree-id1360 . -4469) (undo-tree-id1361 . -4474) (undo-tree-id1362 . -1317) (undo-tree-id1363 . -4469) (undo-tree-id1364 . -2274) (undo-tree-id1365 . -2274) (undo-tree-id1366 . -2749) (undo-tree-id1367 . -3404) (undo-tree-id1368 . -4201) (undo-tree-id1369 . -4565) (undo-tree-id1370 . -4565) (undo-tree-id1371 . -4554) (undo-tree-id1372 . -5059) (undo-tree-id1373 . -1317) (undo-tree-id1374 . -4565) (undo-tree-id1375 . -4554) (undo-tree-id1376 . -2255) (undo-tree-id1377 . -2166) (undo-tree-id1378 . -143) (undo-tree-id1379 . -2162) (undo-tree-id1380 . -2255) (undo-tree-id1381 . -2342) (undo-tree-id1382 . -2255) (undo-tree-id1383 . -143) (undo-tree-id1384 . -2631) (undo-tree-id1385 . -2342) (undo-tree-id1386 . -2817) (undo-tree-id1387 . -2729) (undo-tree-id1388 . -1317) (undo-tree-id1389 . -3301) (undo-tree-id1390 . -2817) (undo-tree-id1391 . -3473) (undo-tree-id1392 . -3467) (undo-tree-id1393 . -1317) (undo-tree-id1394 . -3746) (undo-tree-id1395 . -3473) (undo-tree-id1396 . -3473) (undo-tree-id1397 . -4628) (undo-tree-id1398 . -4628) (undo-tree-id1399 . -2481) (undo-tree-id1400 . -4466) (undo-tree-id1401 . -4628) (undo-tree-id1402 . -4628) (undo-tree-id1403 . -3665) (undo-tree-id1404 . -4628) (undo-tree-id1405 . -5057) (undo-tree-id1406 . -4634) (undo-tree-id1407 . -4634) (undo-tree-id1408 . -3665) (undo-tree-id1409 . -4628) (undo-tree-id1410 . -4628) (undo-tree-id1411 . -3665) (undo-tree-id1412 . -4971) (undo-tree-id1413 . -5058) (undo-tree-id1414 . -5057) (undo-tree-id1415 . -4634) (undo-tree-id1416 . -3665) (undo-tree-id1417 . -5204) (undo-tree-id1418 . -5205) (undo-tree-id1419 . -5056) (undo-tree-id1420 . -5057) (undo-tree-id1421 . -5055) (undo-tree-id1422 . -5056) (undo-tree-id1423 . -5054) (undo-tree-id1424 . -5055) (undo-tree-id1425 . -5032) (undo-tree-id1426 . -5033) (undo-tree-id1427 . -5016) (undo-tree-id1428 . -5017) (undo-tree-id1429 . -5008) (undo-tree-id1430 . -5009) (undo-tree-id1431 . -4983) (undo-tree-id1432 . -4984) (undo-tree-id1433 . 729) (undo-tree-id1434 . -4984) (undo-tree-id1435 . 728) (undo-tree-id1436 . -5057) (undo-tree-id1437 . 655) (undo-tree-id1438 . -5058) (undo-tree-id1439 . -4571) (undo-tree-id1440 . -4575) (undo-tree-id1441 . -4571) (undo-tree-id1442 . -4625)) ((1 . 5713) (#("use crate::query;
use crate::user;
use crate::user::{Scope, User};
use warp::reject::Rejection;
use warp::{path, Filter};

#[allow(dead_code)]
type TimelineUser = ((String, User),);

// GET /api/v1/streaming/user                                  [private; language filter]
pub fn user() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user))
}

// GET /api/v1/streaming/user/notification                     [private; notification filter]
pub fn user_notifications() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user.with_notification_filter()))
}

// GET /api/v1/streaming/public                                [public; language filter]
pub fn public() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| (\"public\".to_owned(), user.with_language_filter()))
}

// GET /api/v1/streaming/public?only_media=true                [public; language filter]
pub fn public_media() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => (\"public:media\".to_owned(), user.with_language_filter()),
            _ => (\"public\".to_owned(), user.with_language_filter()),
        })
}

// GET /api/v1/streaming/public/local                          [public; language filter]
pub fn public_local() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| (\"public:local\".to_owned(), user.with_language_filter()))
}

// GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
pub fn public_local_media() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .and(path::end())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => (\"public:local:media\".to_owned(), user.with_language_filter()),
            _ => (\"public:local\".to_owned(), user.with_language_filter()),
        })
}

// GET /api/v1/streaming/direct                                [private; *no* filter]
pub fn direct() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"direct\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (format!(\"direct:{}\", user.id), user.with_no_filter()))
}

// GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
pub fn hashtag() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| (format!(\"hashtag:{}\", q.tag), User::public()))
}

// GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
pub fn hashtag_local() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\" / \"local\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| (format!(\"hashtag:{}:local\", q.tag), User::public()))
}

// GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
pub fn list() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"list\")
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .and(warp::query())
        .and_then(|user: User, q: query::List| (user.is_authorized_for_list(q.list), Ok(user)))
        .untuple_one()
        .and(path::end())
        .map(|list: i64, user: User| (format!(\"list:{}\", list), user.with_no_filter()))
}
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn public_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/public\")
            .filter(&public())
            .unwrap();

        assert_eq!(value.0, \"public\".to_string());
        assert_eq!(value.1, User::public().with_language_filter());
    }

    #[test]
    fn hashtag_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/hashtag?tag=a\")
            .filter(&hashtag())
            .unwrap();

        assert_eq!(value.0, \"hashtag:a\".to_string());
        assert_eq!(value.1, User::public());
    }

}
" 0 3 (face font-lock-keyword-face) 4 9 (face font-lock-keyword-face) 18 21 (face font-lock-keyword-face) 22 27 (face font-lock-keyword-face) 35 38 (face font-lock-keyword-face) 39 44 (face font-lock-keyword-face) 46 50 (face font-lock-constant-face) 53 58 (face font-lock-type-face) 60 64 (face font-lock-type-face) 67 70 (face font-lock-keyword-face) 71 75 (face font-lock-constant-face) 77 83 (face font-lock-constant-face) 85 94 (face font-lock-type-face) 96 99 (fontified t face font-lock-keyword-face) 99 100 (fontified t) 100 104 (fontified t face font-lock-constant-face) 104 113 (fontified t) 113 119 (fontified t face font-lock-type-face) 119 121 (fontified t) 121 122 (fontified t) 122 123 (fontified t) 123 142 (fontified t face font-lock-preprocessor-face) 142 143 (fontified t) 143 147 (fontified t face font-lock-keyword-face) 147 148 (fontified t) 148 160 (fontified t face font-lock-type-face) 160 165 (fontified t) 165 171 (fontified t face font-lock-type-face) 171 173 (fontified t) 173 177 (fontified t face font-lock-type-face) 177 183 (fontified t) 183 186 (fontified t face font-lock-comment-delimiter-face) 186 273 (fontified t face font-lock-comment-face) 273 276 (fontified t face font-lock-keyword-face) 276 277 (fontified t) 277 279 (fontified t face font-lock-keyword-face) 279 280 (fontified t) 280 284 (fontified t face font-lock-function-name-face) 284 288 (fontified t) 288 289 (fontified t syntax-table #1#) 289 290 (fontified t) 290 294 (fontified t face font-lock-keyword-face) 294 295 (fontified t) 295 301 (fontified t face font-lock-type-face) 301 302 (fontified t) 302 309 (fontified t face font-lock-type-face) 309 312 (fontified t) 312 324 (fontified t face font-lock-type-face) 324 326 (fontified t) 326 331 (fontified t face font-lock-type-face) 331 334 (fontified t) 334 343 (fontified t face font-lock-type-face) 343 345 (fontified t) 345 347 (fontified t) 347 351 (fontified t) 351 356 (fontified t face font-lock-preprocessor-face) 356 357 (fontified t) 357 362 (fontified t face font-lock-string-face) 362 365 (fontified t) 365 369 (fontified t face font-lock-string-face) 369 372 (fontified t) 372 383 (fontified t face font-lock-string-face) 383 386 (fontified t) 386 390 (fontified t face font-lock-string-face) 390 391 (fontified t face font-lock-string-face syntax-table #2#) 391 392 (fontified t face font-lock-string-face) 392 407 (fontified t) 407 411 (fontified t face font-lock-constant-face) 411 433 (fontified t) 433 437 (fontified t face font-lock-constant-face) 437 456 (fontified t) 456 461 (fontified t face font-lock-type-face) 461 463 (fontified t) 463 470 (fontified t face font-lock-type-face) 470 499 (fontified t) 499 500 (fontified t face font-lock-constant-face) 500 503 (fontified t face font-lock-constant-face) 503 524 (fontified t) 524 529 (fontified t face font-lock-type-face) 529 531 (fontified t) 531 538 (fontified t face font-lock-type-face) 538 541 (fontified t) 541 555 (fontified t) 555 559 (fontified t face font-lock-variable-name-face) 559 561 (fontified t) 561 565 (fontified t face font-lock-type-face) 565 577 (fontified t) 577 595 (fontified t) 595 596 (fontified t) 596 599 (fontified t) 599 602 (fontified t face font-lock-comment-delimiter-face) 602 654 (fontified t face font-lock-comment-face) 654 675 (face font-lock-comment-face fontified t) 675 693 (face font-lock-comment-face fontified t) 693 696 (fontified t face font-lock-keyword-face) 696 697 (fontified t) 697 699 (fontified t face font-lock-keyword-face) 699 700 (fontified t) 700 718 (fontified t face font-lock-function-name-face) 718 722 (fontified t) 722 723 (fontified t syntax-table #1#) 723 724 (fontified t) 724 728 (fontified t face font-lock-keyword-face) 728 729 (fontified t) 729 735 (fontified t face font-lock-type-face) 735 736 (fontified t) 736 743 (fontified t face font-lock-type-face) 743 746 (fontified t) 746 758 (fontified t face font-lock-type-face) 758 760 (fontified t) 760 765 (fontified t face font-lock-type-face) 765 768 (fontified t) 768 777 (fontified t face font-lock-type-face) 777 778 (fontified t) 778 779 (fontified t) 779 781 (fontified t) 781 785 (fontified t) 785 790 (fontified t face font-lock-preprocessor-face) 790 791 (fontified t) 791 796 (fontified t face font-lock-string-face) 796 799 (fontified t) 799 803 (fontified t face font-lock-string-face) 803 806 (fontified t) 806 817 (fontified t face font-lock-string-face) 817 820 (fontified t) 820 824 (fontified t face font-lock-string-face) 824 825 (fontified t face font-lock-string-face syntax-table #2#) 825 826 (fontified t face font-lock-string-face) 826 829 (fontified t) 829 839 (fontified t face font-lock-string-face) 839 843 (fontified t face font-lock-string-face) 843 845 (fontified t) 845 847 (fontified t) 847 858 (fontified t) 858 862 (fontified t face font-lock-constant-face) 862 871 (fontified t) 871 884 (fontified t) 884 888 (fontified t face font-lock-constant-face) 888 907 (fontified t) 907 912 (fontified t face font-lock-type-face) 912 914 (fontified t) 914 921 (fontified t face font-lock-type-face) 921 950 (fontified t) 950 954 (fontified t face font-lock-constant-face) 954 975 (fontified t) 975 980 (fontified t face font-lock-type-face) 980 982 (fontified t) 982 989 (fontified t face font-lock-type-face) 989 992 (fontified t) 992 1006 (fontified t) 1006 1010 (fontified t face font-lock-variable-name-face) 1010 1012 (fontified t) 1012 1016 (fontified t face font-lock-type-face) 1016 1041 (fontified t) 1041 1073 (fontified t) 1073 1074 (fontified t) 1074 1077 (fontified t) 1077 1080 (fontified t face font-lock-comment-delimiter-face) 1080 1096 (fontified t face font-lock-comment-face) 1096 1118 (fontified t face font-lock-comment-face) 1118 1166 (fontified t face font-lock-comment-face) 1166 1169 (fontified t face font-lock-keyword-face) 1169 1170 (fontified t) 1170 1172 (fontified t face font-lock-keyword-face) 1172 1173 (fontified t) 1173 1179 (fontified t face font-lock-function-name-face) 1179 1183 (fontified t) 1183 1184 (fontified t syntax-table #1#) 1184 1185 (fontified t) 1185 1189 (fontified t face font-lock-keyword-face) 1189 1190 (fontified t) 1190 1193 (fontified t face font-lock-type-face) 1193 1196 (face font-lock-type-face fontified t) 1196 1197 (fontified t) 1197 1204 (face font-lock-type-face fontified t) 1204 1207 (fontified t) 1207 1219 (face font-lock-type-face fontified t) 1219 1221 (fontified t) 1221 1226 (face font-lock-type-face fontified t) 1226 1229 (fontified t) 1229 1238 (face font-lock-type-face fontified t) 1238 1239 (fontified t) 1239 1242 (fontified t) 1242 1246 (fontified t) 1246 1251 (fontified t face font-lock-preprocessor-face) 1251 1252 (fontified t) 1252 1257 (fontified t face font-lock-string-face) 1257 1260 (fontified t) 1260 1264 (fontified t face font-lock-string-face) 1264 1267 (fontified t) 1267 1278 (fontified t face font-lock-string-face) 1278 1280 (fontified t) 1280 1281 (fontified t) 1281 1289 (fontified t face font-lock-string-face) 1289 1291 (fontified t) 1291 1304 (fontified t) 1304 1308 (fontified t face font-lock-constant-face) 1308 1330 (fontified t) 1330 1334 (fontified t face font-lock-constant-face) 1334 1345 (fontified t) 1345 1353 (fontified t) 1353 1357 (fontified t face font-lock-constant-face) 1357 1359 (fontified t) 1359 1364 (fontified t face font-lock-type-face) 1364 1366 (fontified t) 1366 1371 (fontified t face font-lock-type-face) 1371 1372 (fontified t face font-lock-type-face) 1372 1375 (fontified t) 1375 1401 (fontified t) 1401 1405 (fontified t face font-lock-constant-face) 1405 1426 (fontified t) 1426 1431 (fontified t face font-lock-type-face) 1431 1433 (fontified t) 1433 1439 (fontified t face font-lock-type-face) 1439 1456 (fontified t) 1456 1460 (fontified t face font-lock-variable-name-face) 1460 1462 (fontified t) 1462 1466 (fontified t face font-lock-type-face) 1466 1469 (fontified t) 1469 1477 (fontified t face font-lock-string-face) 1477 1523 (fontified t) 1523 1526 (fontified t face font-lock-comment-delimiter-face) 1526 1574 (fontified t face font-lock-comment-face) 1574 1612 (fontified t face font-lock-comment-face) 1612 1615 (fontified t face font-lock-keyword-face) 1615 1616 (fontified t) 1616 1618 (fontified t face font-lock-keyword-face) 1618 1619 (fontified t) 1619 1631 (fontified t face font-lock-function-name-face) 1631 1635 (fontified t) 1635 1636 (fontified t syntax-table #1#) 1636 1637 (fontified t) 1637 1641 (fontified t face font-lock-keyword-face) 1641 1642 (fontified t) 1642 1648 (fontified t face font-lock-type-face) 1648 1649 (fontified t) 1649 1656 (fontified t face font-lock-type-face) 1656 1659 (fontified t) 1659 1666 (fontified t face font-lock-type-face) 1666 1671 (fontified t face font-lock-type-face) 1671 1673 (fontified t) 1673 1678 (fontified t face font-lock-type-face) 1678 1681 (fontified t) 1681 1690 (fontified t face font-lock-type-face) 1690 1694 (fontified t) 1694 1698 (fontified t) 1698 1703 (fontified t face font-lock-preprocessor-face) 1703 1704 (fontified t) 1704 1709 (fontified t face font-lock-string-face) 1709 1712 (fontified t) 1712 1716 (fontified t face font-lock-string-face) 1716 1719 (fontified t) 1719 1730 (fontified t face font-lock-string-face) 1730 1733 (fontified t) 1733 1741 (fontified t face font-lock-string-face) 1741 1742 (fontified t) 1742 1743 (fontified t) 1743 1756 (fontified t) 1756 1760 (fontified t face font-lock-constant-face) 1760 1782 (fontified t) 1782 1786 (fontified t face font-lock-constant-face) 1786 1791 (fontified t) 1791 1805 (fontified t) 1805 1809 (fontified t face font-lock-constant-face) 1809 1811 (fontified t) 1811 1816 (fontified t face font-lock-type-face) 1816 1818 (fontified t) 1818 1824 (fontified t face font-lock-type-face) 1824 1827 (fontified t) 1827 1853 (fontified t) 1853 1857 (fontified t face font-lock-constant-face) 1857 1875 (fontified t) 1875 1878 (fontified t) 1878 1883 (fontified t face font-lock-type-face) 1883 1885 (fontified t) 1885 1891 (fontified t face font-lock-type-face) 1891 1894 (fontified t) 1894 1907 (fontified t) 1907 1911 (fontified t face font-lock-constant-face) 1911 1936 (fontified t) 1936 1940 (fontified t face font-lock-variable-name-face) 1940 1942 (fontified t) 1942 1946 (fontified t face font-lock-type-face) 1946 1948 (fontified t) 1948 1949 (fontified t face font-lock-variable-name-face) 1949 1951 (fontified t) 1951 1956 (fontified t face font-lock-constant-face) 1956 1958 (fontified t) 1958 1963 (fontified t face font-lock-type-face) 1963 1965 (fontified t) 1965 1970 (fontified t face font-lock-keyword-face) 1970 2007 (fontified t) 2007 2010 (fontified t face font-lock-string-face) 2010 2013 (fontified t) 2013 2019 (fontified t face font-lock-string-face) 2019 2021 (fontified t) 2021 2022 (fontified t syntax-table #1#) 2022 2024 (fontified t) 2024 2038 (fontified t face font-lock-string-face) 2038 2096 (fontified t) 2096 2097 (fontified t syntax-table #1#) 2097 2099 (fontified t) 2099 2107 (fontified t face font-lock-string-face) 2107 2112 (fontified t) 2112 2150 (fontified t) 2150 2164 (fontified t) 2164 2167 (fontified t face font-lock-comment-delimiter-face) 2167 2194 (fontified t face font-lock-comment-face) 2194 2243 (fontified t face font-lock-comment-face) 2243 2253 (face font-lock-comment-face fontified t) 2253 2256 (fontified t face font-lock-keyword-face) 2256 2257 (fontified t) 2257 2259 (fontified t face font-lock-keyword-face) 2259 2260 (fontified t) 2260 2272 (fontified t face font-lock-function-name-face) 2272 2276 (fontified t) 2276 2277 (fontified t syntax-table #1#) 2277 2278 (fontified t) 2278 2282 (fontified t face font-lock-keyword-face) 2282 2283 (fontified t) 2283 2289 (fontified t face font-lock-type-face) 2289 2290 (fontified t) 2290 2297 (fontified t face font-lock-type-face) 2297 2300 (fontified t) 2300 2312 (fontified t face font-lock-type-face) 2312 2314 (fontified t) 2314 2319 (fontified t face font-lock-type-face) 2319 2322 (fontified t) 2322 2327 (fontified t face font-lock-type-face) 2327 2331 (fontified t face font-lock-type-face) 2331 2335 (fontified t) 2335 2339 (fontified t) 2339 2344 (fontified t face font-lock-preprocessor-face) 2344 2345 (fontified t) 2345 2350 (fontified t face font-lock-string-face) 2350 2353 (fontified t) 2353 2357 (fontified t face font-lock-string-face) 2357 2360 (fontified t) 2360 2371 (fontified t face font-lock-string-face) 2371 2374 (fontified t) 2374 2382 (fontified t face font-lock-string-face) 2382 2385 (fontified t) 2385 2392 (fontified t face font-lock-string-face) 2392 2394 (fontified t) 2394 2407 (fontified t) 2407 2411 (fontified t face font-lock-constant-face) 2411 2433 (fontified t) 2433 2437 (fontified t face font-lock-constant-face) 2437 2456 (fontified t) 2456 2460 (fontified t face font-lock-constant-face) 2460 2462 (fontified t) 2462 2467 (fontified t face font-lock-type-face) 2467 2469 (fontified t) 2469 2475 (fontified t face font-lock-type-face) 2475 2504 (fontified t) 2504 2508 (fontified t face font-lock-constant-face) 2508 2529 (fontified t) 2529 2534 (fontified t face font-lock-type-face) 2534 2536 (fontified t) 2536 2542 (fontified t face font-lock-type-face) 2542 2559 (fontified t) 2559 2563 (fontified t face font-lock-variable-name-face) 2563 2565 (fontified t) 2565 2569 (fontified t face font-lock-type-face) 2569 2572 (fontified t) 2572 2586 (fontified t face font-lock-string-face) 2586 2632 (fontified t) 2632 2635 (fontified t face font-lock-comment-delimiter-face) 2635 2650 (fontified t face font-lock-comment-face) 2650 2721 (fontified t face font-lock-comment-face) 2721 2724 (fontified t face font-lock-keyword-face) 2724 2725 (fontified t) 2725 2727 (fontified t face font-lock-keyword-face) 2727 2728 (fontified t) 2728 2746 (fontified t face font-lock-function-name-face) 2746 2750 (fontified t) 2750 2751 (fontified t syntax-table #1#) 2751 2752 (fontified t) 2752 2753 (fontified t face font-lock-keyword-face) 2753 2756 (face font-lock-keyword-face fontified t) 2756 2757 (fontified t) 2757 2763 (face font-lock-type-face fontified t) 2763 2764 (fontified t) 2764 2771 (face font-lock-type-face fontified t) 2771 2774 (fontified t) 2774 2786 (face font-lock-type-face fontified t) 2786 2788 (fontified t) 2788 2793 (face font-lock-type-face fontified t) 2793 2796 (fontified t) 2796 2805 (face font-lock-type-face fontified t) 2805 2809 (fontified t) 2813 2818 (face font-lock-preprocessor-face) 2819 2824 (face font-lock-string-face) 2827 2831 (face font-lock-string-face) 2834 2845 (face font-lock-string-face) 2848 2856 (face font-lock-string-face) 2859 2866 (face font-lock-string-face) 2881 2885 (face font-lock-constant-face) 2904 2908 (face font-lock-constant-face) 2910 2915 (face font-lock-type-face) 2917 2923 (face font-lock-type-face) 2952 2956 (face font-lock-constant-face) 2977 2982 (face font-lock-type-face) 2984 2990 (face font-lock-type-face) 3006 3010 (face font-lock-constant-face) 3034 3038 (face font-lock-constant-face) 3061 3065 (face font-lock-variable-name-face) 3067 3071 (face font-lock-type-face) 3073 3074 (face font-lock-variable-name-face) 3076 3081 (face font-lock-constant-face) 3083 3088 (face font-lock-type-face) 3090 3095 (face font-lock-keyword-face) 3132 3135 (face font-lock-string-face) 3138 3144 (face font-lock-string-face) 3146 3147 (syntax-table #1#) 3149 3169 (face font-lock-string-face) 3227 3228 (syntax-table #1#) 3230 3244 (face font-lock-string-face) 3301 3304 (face font-lock-comment-delimiter-face) 3304 3387 (face font-lock-comment-face) 3387 3390 (face font-lock-keyword-face) 3391 3393 (face font-lock-keyword-face) 3394 3400 (face font-lock-function-name-face) 3404 3405 (syntax-table #1#) 3406 3410 (face font-lock-keyword-face) 3411 3417 (face font-lock-type-face) 3418 3425 (face font-lock-type-face) 3428 3440 (face font-lock-type-face) 3442 3447 (face font-lock-type-face) 3450 3459 (face font-lock-type-face) 3467 3472 (face font-lock-preprocessor-face) 3473 3478 (face font-lock-string-face) 3481 3485 (face font-lock-string-face) 3488 3499 (face font-lock-string-face) 3502 3510 (face font-lock-string-face) 3525 3529 (face font-lock-constant-face) 3551 3555 (face font-lock-constant-face) 3574 3579 (face font-lock-type-face) 3581 3588 (face font-lock-type-face) 3617 3621 (face font-lock-constant-face) 3642 3647 (face font-lock-type-face) 3649 3656 (face font-lock-type-face) 3673 3677 (face font-lock-variable-name-face) 3679 3683 (face font-lock-type-face) 3686 3693 (face rust-builtin-formatting-macro-face) 3694 3702 (face font-lock-string-face) 3702 3704 (face rust-string-interpolation-face) 3704 3705 (face font-lock-string-face) 3744 3747 (face font-lock-comment-delimiter-face) 3747 3827 (face font-lock-comment-face) 3827 3830 (face font-lock-keyword-face) 3831 3833 (face font-lock-keyword-face) 3834 3841 (face font-lock-function-name-face) 3845 3846 (syntax-table #1#) 3847 3851 (face font-lock-keyword-face) 3852 3858 (face font-lock-type-face) 3859 3866 (face font-lock-type-face) 3869 3881 (face font-lock-type-face) 3883 3888 (face font-lock-type-face) 3891 3900 (face font-lock-type-face) 3908 3913 (face font-lock-preprocessor-face) 3914 3919 (face font-lock-string-face) 3922 3926 (face font-lock-string-face) 3929 3940 (face font-lock-string-face) 3943 3952 (face font-lock-string-face) 3967 3971 (face font-lock-constant-face) 3995 3999 (face font-lock-constant-face) 4022 4023 (face font-lock-variable-name-face) 4025 4030 (face font-lock-constant-face) 4032 4039 (face font-lock-type-face) 4042 4049 (face rust-builtin-formatting-macro-face) 4050 4059 (face font-lock-string-face) 4059 4061 (face rust-string-interpolation-face) 4061 4062 (face font-lock-string-face) 4072 4076 (face font-lock-type-face) 4092 4095 (face font-lock-comment-delimiter-face) 4095 4175 (face font-lock-comment-face) 4175 4178 (face font-lock-keyword-face) 4179 4181 (face font-lock-keyword-face) 4182 4195 (face font-lock-function-name-face) 4199 4200 (syntax-table #1#) 4201 4205 (face font-lock-keyword-face) 4206 4212 (face font-lock-type-face) 4213 4220 (face font-lock-type-face) 4223 4235 (face font-lock-type-face) 4237 4242 (face font-lock-type-face) 4245 4254 (face font-lock-type-face) 4262 4267 (face font-lock-preprocessor-face) 4268 4273 (face font-lock-string-face) 4276 4280 (face font-lock-string-face) 4283 4294 (face font-lock-string-face) 4297 4306 (face font-lock-string-face) 4309 4316 (face font-lock-string-face) 4331 4335 (face font-lock-constant-face) 4359 4363 (face font-lock-constant-face) 4386 4387 (face font-lock-variable-name-face) 4389 4394 (face font-lock-constant-face) 4396 4403 (face font-lock-type-face) 4406 4413 (face rust-builtin-formatting-macro-face) 4414 4423 (face font-lock-string-face) 4423 4425 (face rust-string-interpolation-face) 4425 4432 (face font-lock-string-face) 4442 4446 (face font-lock-type-face) 4462 4465 (face font-lock-comment-delimiter-face) 4465 4546 (face font-lock-comment-face) 4546 4549 (face font-lock-keyword-face) 4550 4552 (face font-lock-keyword-face) 4553 4557 (face font-lock-function-name-face) 4561 4562 (syntax-table #1#) 4563 4567 (face font-lock-keyword-face) 4568 4574 (face font-lock-type-face) 4575 4582 (face font-lock-type-face) 4585 4591 (face font-lock-type-face) 4591 4597 (face font-lock-type-face) 4599 4604 (face font-lock-type-face) 4607 4616 (face font-lock-type-face) 4624 4629 (face font-lock-preprocessor-face) 4630 4635 (face font-lock-string-face) 4638 4642 (face font-lock-string-face) 4645 4656 (face font-lock-string-face) 4659 4665 (face font-lock-string-face) 4680 4684 (face font-lock-constant-face) 4703 4708 (face font-lock-type-face) 4710 4717 (face font-lock-type-face) 4746 4750 (face font-lock-constant-face) 4771 4776 (face font-lock-type-face) 4778 4785 (face font-lock-type-face) 4801 4805 (face font-lock-constant-face) 4835 4839 (face font-lock-variable-name-face) 4841 4845 (face font-lock-type-face) 4847 4848 (face font-lock-variable-name-face) 4850 4855 (face font-lock-constant-face) 4857 4861 (face font-lock-type-face) 4901 4903 (face font-lock-type-face) 4948 4952 (face font-lock-constant-face) 4975 4979 (face font-lock-variable-name-face) 4981 4984 (face font-lock-type-face) 4986 4990 (face font-lock-variable-name-face) 4992 4996 (face font-lock-type-face) 4999 5006 (face rust-builtin-formatting-macro-face) 5007 5013 (face font-lock-string-face) 5013 5015 (face rust-string-interpolation-face) 5015 5016 (face font-lock-string-face) 5051 5063 (face font-lock-preprocessor-face) 5064 5067 (face font-lock-keyword-face) 5068 5073 (face font-lock-constant-face) 5080 5083 (face font-lock-keyword-face) 5084 5089 (face font-lock-keyword-face) 5099 5106 (face font-lock-preprocessor-face) 5111 5113 (face font-lock-keyword-face) 5114 5120 (face font-lock-function-name-face) 5120 5129 (face font-lock-function-name-face) 5142 5145 (face font-lock-keyword-face) 5146 5151 (face font-lock-variable-name-face) 5154 5158 (face font-lock-constant-face) 5160 5164 (face font-lock-constant-face) 5194 5219 (face font-lock-string-face) 5219 5220 (face font-lock-string-face) 5285 5295 (face font-lock-preprocessor-face) 5305 5313 (face font-lock-string-face) 5336 5346 (face font-lock-preprocessor-face) 5356 5360 (face font-lock-type-face) 5407 5414 (face font-lock-preprocessor-face) 5419 5421 (face font-lock-keyword-face) 5422 5438 (face font-lock-function-name-face) 5451 5454 (face font-lock-keyword-face) 5455 5460 (face font-lock-variable-name-face) 5463 5467 (face font-lock-constant-face) 5469 5473 (face font-lock-constant-face) 5503 5536 (face font-lock-string-face) 5602 5612 (face font-lock-preprocessor-face) 5622 5633 (face font-lock-string-face) 5656 5666 (face font-lock-preprocessor-face) 5676 5680 (face font-lock-type-face)) . 1) (undo-tree-id1265 . -546) (undo-tree-id1266 . -96) (undo-tree-id1267 . -546) (undo-tree-id1268 . 4629) (undo-tree-id1269 . -546) (undo-tree-id1270 . -596) (undo-tree-id1271 . -96) (undo-tree-id1272 . -546) (undo-tree-id1273 . -546) (undo-tree-id1274 . -546) (undo-tree-id1275 . -546) (undo-tree-id1276 . -546) (undo-tree-id1277 . -119) (undo-tree-id1278 . -119) (undo-tree-id1279 . -96) (undo-tree-id1280 . -119) (undo-tree-id1281 . -119) (undo-tree-id1282 . -96) (undo-tree-id1283 . -290) (undo-tree-id1284 . -121) (undo-tree-id1285 . -96) (undo-tree-id1286 . -290) (undo-tree-id1287 . -290) (undo-tree-id1288 . -346) (undo-tree-id1289 . -347) (undo-tree-id1290 . -346) (undo-tree-id1291 . -347) (undo-tree-id1292 . -290) (undo-tree-id1293 . -290) (undo-tree-id1294 . -96) (undo-tree-id1295 . -290) (undo-tree-id1296 . -290) (undo-tree-id1297 . -96) (undo-tree-id1298 . -290) (undo-tree-id1299 . -290) (undo-tree-id1300 . -96) (undo-tree-id1301 . -360) (undo-tree-id1302 . -365) (undo-tree-id1303 . -354) (undo-tree-id1304 . -366) (undo-tree-id1305 . -290) (undo-tree-id1306 . -366) (undo-tree-id1307 . -119) (undo-tree-id1308 . -290) (undo-tree-id1309 . -96) (undo-tree-id1310 . -119) (undo-tree-id1311 . -119) (undo-tree-id1312 . -290) (undo-tree-id1313 . -96) (undo-tree-id1314 . -119) (undo-tree-id1315 . -119) (undo-tree-id1316 . -290) (undo-tree-id1317 . -96) (undo-tree-id1318 . -119) (undo-tree-id1319 . -290) (undo-tree-id1320 . -96) (undo-tree-id1321 . -119) (undo-tree-id1322 . -290) (undo-tree-id1323 . -96) (undo-tree-id1324 . -119) (undo-tree-id1325 . -290) (undo-tree-id1326 . -96) (undo-tree-id1327 . -357) (undo-tree-id1328 . -358) (undo-tree-id1329 . -106) (undo-tree-id1330 . -107) (undo-tree-id1331 . -290) (undo-tree-id1332 . -119) (undo-tree-id1333 . -96) (undo-tree-id1334 . -290) (undo-tree-id1335 . -290) (undo-tree-id1336 . -119) (undo-tree-id1337 . -96) (undo-tree-id1338 . -290) (undo-tree-id1339 . -290) (undo-tree-id1340 . -119) (undo-tree-id1341 . -96) (undo-tree-id1342 . -96) (undo-tree-id1343 . -290) (undo-tree-id1344 . -290) (undo-tree-id1345 . -290) (undo-tree-id1346 . -119) (undo-tree-id1347 . -96)) (23752 28497 230249 942000) 0 nil]) ((nil rear-nonsticky nil 4634 . 4635) (#("
" 0 1 (fontified nil)) . 5059) (4629 . 5060)) ((#("
     path!(\"api\" / \"v1\" / \"streaming\" / \"list\")
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .and(warp::query())
        .and_then(|user: User, q: query::List| (user.is_authorized_for_list(q.list), Ok(user)))
        .untuple_one()
        .and(path::end())
        .map(|list: i64, user: User| (format!(\"list:{}\", list), user.with_no_filter()))
" 0 1 (fontified t) 1 5 (fontified nil) 5 6 (fontified nil rear-nonsticky nil) 6 7 (fontified nil face font-lock-preprocessor-face) 7 8 (fontified nil face font-lock-preprocessor-face) 8 11 (fontified nil face font-lock-preprocessor-face) 11 12 (fontified nil) 12 17 (fontified nil face font-lock-string-face) 17 20 (fontified nil) 20 24 (fontified nil face font-lock-string-face) 24 27 (fontified nil) 27 38 (fontified nil face font-lock-string-face) 38 41 (fontified nil) 41 47 (fontified nil face font-lock-string-face) 47 49 (fontified nil) 49 53 (fontified t) 53 62 (fontified t) 62 66 (fontified t face font-lock-constant-face) 66 74 (fontified t) 74 85 (fontified t) 85 90 (fontified t face font-lock-type-face) 90 92 (fontified t) 92 99 (fontified t face font-lock-type-face) 99 102 (fontified t) 102 128 (fontified t) 128 132 (fontified t face font-lock-constant-face) 132 153 (fontified t) 153 158 (fontified t face font-lock-type-face) 158 160 (fontified t) 160 162 (fontified t face font-lock-type-face) 162 167 (fontified t face font-lock-type-face) 167 170 (fontified t) 170 183 (fontified t) 183 187 (fontified t face font-lock-constant-face) 187 210 (fontified t) 210 217 (fontified t) 217 221 (fontified t face font-lock-variable-name-face) 221 223 (fontified t) 223 227 (fontified t face font-lock-type-face) 227 229 (fontified t) 229 230 (fontified t face font-lock-variable-name-face) 230 232 (fontified t) 232 237 (fontified t face font-lock-constant-face) 237 239 (fontified t) 239 243 (fontified t face font-lock-type-face) 243 251 (fontified t) 251 283 (fontified t) 283 285 (fontified t face font-lock-type-face) 285 294 (fontified t) 294 330 (fontified t) 330 334 (fontified t face font-lock-constant-face) 334 343 (fontified t) 343 357 (fontified nil) 357 361 (fontified nil face font-lock-variable-name-face) 361 363 (fontified nil) 363 366 (fontified nil face font-lock-type-face) 366 368 (fontified nil) 368 372 (fontified nil face font-lock-variable-name-face) 372 374 (fontified nil) 374 378 (fontified nil face font-lock-type-face) 378 381 (fontified nil) 381 388 (fontified nil face rust-builtin-formatting-macro-face) 388 389 (fontified nil) 389 395 (fontified nil face font-lock-string-face) 395 397 (fontified nil face rust-string-interpolation-face) 397 398 (fontified nil face font-lock-string-face) 398 413 (fontified nil) 413 430 (fontified nil) 430 431 (fontified nil)) . 4629) (undo-tree-id1348 . -430) (undo-tree-id1349 . -1) (undo-tree-id1350 . -430) (undo-tree-id1351 . -6) (undo-tree-id1352 . -6) (undo-tree-id1353 . -6) (5059 . 5060) (nil rear-nonsticky t 4634 . 4635)) (23752 28493 353866 702000) 0 nil]) ((#("    " 0 4 (fontified t)) . -4629) (undo-tree-id1039 . -4) 4633 (4628 . 4633) 4560) nil (23752 28491 940855 743000) 0 nil]) ((nil rear-nonsticky nil 4270 . 4271) (#("
" 0 1 (fontified nil)) . -4467) (4265 . 4468)) nil (23752 27294 818709 942000) 0 nil]) ((#("    " 0 4 (fontified nil)) . 4265) (4265 . 4269) (4264 . 4266) (#("o" 0 1 (fontified t)) . -4264) (undo-tree-id1040 . -1) 4265 (4264 . 4265)) nil (23752 27294 818714 321000) 0 nil]) ((nil rear-nonsticky nil 3473 . 3474) (#("
" 0 1 (fontified nil)) . -3747) (3468 . 3748)) nil (23752 27294 818717 22000) 0 nil]) ((#("    " 0 4 (fontified nil)) . 3468) (3468 . 3472) (3467 . 3469)) nil (23752 27294 818719 86000) 0 nil]) ((nil rear-nonsticky nil 2817 . 2818) (#("
" 0 1 (fontified nil)) . -3302) (2812 . 3303) 2730) nil (23752 27294 818734 524000) 0 nil]) ((nil rear-nonsticky nil 2342 . 2343) (#("
" 0 1 (fontified nil)) . -2632) (2337 . 2633) 2256) nil (23752 27294 818736 848000) 0 nil]) ((nil rear-nonsticky nil 1700 . 1701) (#("
" 0 1 (fontified nil)) . -2163) (1695 . 2164)) nil (23752 27294 818739 4000) 0 nil]) ((2890 . 2891) (2889 . 2891) (#("{" 0 1 (fontified nil)) . -2889) (2889 . 2890)) nil (23752 27294 818741 260000) 0 nil]) ((nil rear-nonsticky nil 2888 . 2889) (nil fontified nil 2828 . 2889) (2828 . 2889) 2827) nil (23752 27294 818743 763000) 0 nil] [nil ([nil nil ((nil rear-nonsticky nil 2829 . 2830) (nil fontified nil 2829 . 2830) (2829 . 2830) 2828) ((#(";" 0 1 (fontified nil rear-nonsticky nil)) . 2829) (nil rear-nonsticky t 2829 . 2830)) (23752 27203 277797 694000) 0 nil]) ((nil rear-nonsticky nil 2828 . 2829) (nil fontified nil 2828 . 2829) (2828 . 2829) 2827) ((#(";" 0 1 (fontified nil rear-nonsticky nil)) . 2828) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (nil rear-nonsticky t 2828 . 2829)) (23752 27203 289229 933000) 0 nil]) ((2824 . 2828) (#("h" 0 1 (fontified t face font-lock-function-name-face)) . -2824) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (#("a" 0 1 (fontified t face font-lock-function-name-face)) . -2825) (undo-tree-id939 . -1) (undo-tree-id940 . -1) 2826 (2817 . 2826) (2816 . 2817) 2814) nil (23752 27204 124989 667000) 0 nil]) ((2729 . 2731) (#("{" 0 1 (fontified nil)) . -2729) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (2729 . 2730)) nil (23752 27203 277901 658000) 0 nil]) ((nil rear-nonsticky nil 2728 . 2729) (nil fontified nil 2668 . 2729) (2668 . 2729) 2667) nil (23752 27203 277910 761000) 0 nil]) ((2658 . 2668) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -2658) (undo-tree-id943 . -1) 2659 (2655 . 2659) (2650 . 2655) (#("g" 0 1 (fontified t)) . -2650) (undo-tree-id944 . -1) 2651 (2648 . 2651) (2647 . 2648) 2639) nil (23752 27203 277931 573000) 0 nil]) ((2213 . 2215) (#("{" 0 1 (fontified nil)) . -2213) (2213 . 2214)) nil (23752 27203 277940 957000) 0 nil]) ((nil rear-nonsticky nil 2212 . 2213) (nil fontified nil 2152 . 2213) (2152 . 2213) 2151) nil (23752 27203 277948 833000) 0 nil]) ((2148 . 2152) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -2148) (undo-tree-id945 . -1) 2149 (2144 . 2149) (#("u" 0 1 (fontified t)) . -2144) (undo-tree-id946 . -1) (#("n" 0 1 (fontified t)) . -2145) (undo-tree-id947 . -1) (#(" " 0 1 (fontified t)) . -2146) (undo-tree-id948 . -1) 2147 (2139 . 2147) (2138 . 2139) 2053) nil (23752 27203 277975 988000) 0 nil]) ((2049 . 2050) (2048 . 2050) (#("{" 0 1 (fontified nil)) . -2048) (2048 . 2049) (#("P" 0 1 (fontified t face font-lock-type-face)) . -2048) (undo-tree-id949 . -1) (undo-tree-id950 . -1) 2049 (2048 . 2049)) nil (23752 27203 277998 14000) 0 nil]) ((nil rear-nonsticky nil 2047 . 2048) (nil fontified nil 1987 . 2048) (1987 . 2048) 1986) nil (23752 27203 278008 79000) 0 nil]) ((1976 . 1987) (1962 . 1976) (1961 . 1962) 1873) nil (23752 27203 278015 721000) 0 nil]) ((1869 . 1870) (1868 . 1870) (#("{" 0 1 (fontified nil)) . -1868) (1868 . 1869) (#("i" 0 1 (fontified t)) . -1868) (undo-tree-id951 . -1) 1869 (1868 . 1869)) nil (23752 27203 278029 606000) 0 nil]) ((nil rear-nonsticky nil 1867 . 1868) (nil fontified nil 1807 . 1868) (1807 . 1868) 1806) nil (23752 27203 278038 994000) 0 nil] [nil nil ((nil rear-nonsticky nil 1807 . 1808) (nil fontified nil 1807 . 1808) (1807 . 1808) 1806) ((#(";" 0 1 (fontified nil rear-nonsticky nil)) . 1807) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (nil rear-nonsticky t 1807 . 1808)) (23752 27129 398270 125000) 0 nil]) ((1804 . 1807) (#("g" 0 1 (fontified t face font-lock-function-name-face)) . -1804) (undo-tree-id913 . -1) 1805 (1798 . 1805) (1791 . 1798) (#(" " 0 1 (fontified t)) . -1791) (undo-tree-id914 . -1) 1792 (1788 . 1792) (1787 . 1788) 1699) nil (23752 27129 405219 84000) 0 nil]) ((#("    " 0 4 (fontified t)) . -1695) (undo-tree-id915 . -4) 1699 (1694 . 1699) 1632) nil (23752 27129 398331 505000) 0 nil]) ((#("()" 0 2 (fontified t)) . 1632) (undo-tree-id916 . -2) (undo-tree-id917 . -2) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1)) nil (23752 27129 398364 301000) 0 nil]) ((1696 . 1697) (1695 . 1697) (#("{" 0 1 (fontified nil)) . -1695) (1695 . 1696) (#("i" 0 1 (fontified t)) . -1695) (undo-tree-id924 . -1) 1696 (1695 . 1696)) nil (23752 27129 398381 56000) 0 nil]) ((nil rear-nonsticky nil 1694 . 1695) (nil fontified nil 1634 . 1695) (1634 . 1695) 1633) nil (23752 27129 398390 992000) 0 nil]) ((#("\"\"" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 1634) (undo-tree-id925 . -1) (undo-tree-id926 . -1) 1635 (1634 . 1636) (#("\"" 0 1 (fontified nil)) . -1634) (1634 . 1635) (#(")" 0 1 (fontified nil)) . 1634) (1633 . 1634) (1632 . 1634) (#("(" 0 1 (fontified nil face font-lock-function-name-face)) . -1632) (1620 . 1633) (1613 . 1620) (1612 . 1613) (t 23752 27024 938313 866000) 1611) nil (23752 27129 398414 983000) 0 nil] [nil nil ((nil rear-nonsticky nil 1613 . 1614) (nil fontified nil 1613 . 1614) (1613 . 1614) (t 23752 27024 938313 866000)) ((#(";" 0 1 (fontified nil rear-nonsticky nil)) . 1613) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (nil rear-nonsticky t 1613 . 1614)) (23752 27086 438287 540000) 0 nil] [nil nil ((nil rear-nonsticky nil 1613 . 1614) (nil fontified nil 1613 . 1614) (1613 . 1614) (t 23752 27024 938313 866000)) ((#(";" 0 1 (fontified nil rear-nonsticky nil)) . 1613) (nil rear-nonsticky t 1613 . 1614)) (23752 27085 381298 497000) 0 nil]) ((1 . 3048) (#("use crate::query;
use crate::user;
use crate::user::{Scope, User};
use warp::reject::Rejection;
use warp::{path, Filter};

#[allow(dead_code)]
type TimelineUser = ((String, User),);

// GET /api/v1/streaming/user                                  [private; language filter]
pub fn user() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user))
}

// GET /api/v1/streaming/user/notification                     [private; notification filter]
pub fn user_notifications() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user.with_notification_filter()))
}

// GET /api/v1/streaming/public                                [public; language filter]
pub fn public() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| (\"public\".to_owned(), user.with_language_filter()))
}

// GET /api/v1/streaming/public?only_media=true                [public; language filter]



    // GET /api/v1/streaming/public/local                          [public; language filter]



    // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]




    // GET /api/v1/streaming/direct                                [private; *no* filter]

    // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
pub fn hashtag() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| (format!(\"hashtag:{}\", q.tag), User::public()))
}

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]

    // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn public_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/public\")
            .filter(&public())
            .unwrap();

        assert_eq!(value.0, \"public\".to_string());
        assert_eq!(value.1, User::public().with_language_filter());
    }

    #[test]
    fn hashtag_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/hashtag?tag=a\")
            .filter(&hashtag())
            .unwrap();

        assert_eq!(value.0, \"hashtag:a\".to_string());
        assert_eq!(value.1, User::public());
    }

}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 17 (fontified t) 17 18 (fontified t) 18 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 27 (fontified t face font-lock-keyword-face) 27 35 (fontified t) 35 38 (fontified t face font-lock-keyword-face) 38 39 (fontified t) 39 44 (fontified t face font-lock-keyword-face) 44 46 (fontified t) 46 50 (fontified t face font-lock-constant-face) 50 53 (fontified t) 53 58 (fontified t face font-lock-type-face) 58 60 (fontified t) 60 64 (fontified t face font-lock-type-face) 64 67 (fontified t) 67 70 (fontified t face font-lock-keyword-face) 70 71 (fontified t) 71 75 (fontified t face font-lock-constant-face) 75 77 (fontified t) 77 83 (fontified t face font-lock-constant-face) 83 85 (fontified t) 85 94 (fontified t face font-lock-type-face) 94 96 (fontified t) 96 99 (fontified t face font-lock-keyword-face) 99 100 (fontified t) 100 104 (fontified t face font-lock-constant-face) 104 113 (fontified t) 113 119 (fontified t face font-lock-type-face) 119 123 (fontified t) 123 142 (fontified t face font-lock-preprocessor-face) 142 143 (fontified t) 143 147 (fontified t face font-lock-keyword-face) 147 148 (fontified t) 148 160 (fontified t face font-lock-type-face) 160 165 (fontified t) 165 171 (fontified t face font-lock-type-face) 171 173 (fontified t) 173 177 (fontified t face font-lock-type-face) 177 183 (fontified t) 183 186 (fontified t face font-lock-comment-delimiter-face) 186 273 (fontified t face font-lock-comment-face) 273 276 (fontified t face font-lock-keyword-face) 276 277 (fontified t) 277 279 (fontified t face font-lock-keyword-face) 279 280 (fontified t) 280 284 (fontified t face font-lock-function-name-face) 284 288 (fontified t) 288 289 (fontified t syntax-table #1#) 289 290 (fontified t) 290 294 (fontified t face font-lock-keyword-face) 294 295 (fontified t) 295 301 (fontified t face font-lock-type-face) 301 302 (fontified t) 302 309 (fontified t face font-lock-type-face) 309 312 (fontified t) 312 324 (fontified t face font-lock-type-face) 324 326 (fontified t) 326 331 (fontified t face font-lock-type-face) 331 334 (fontified t) 334 343 (fontified t face font-lock-type-face) 343 351 (fontified t) 351 356 (fontified t face font-lock-preprocessor-face) 356 357 (fontified t) 357 362 (fontified t face font-lock-string-face) 362 365 (fontified t) 365 369 (fontified t face font-lock-string-face) 369 372 (fontified t) 372 383 (fontified t face font-lock-string-face) 383 386 (fontified t) 386 390 (fontified t face font-lock-string-face) 390 391 (fontified t syntax-table #2# face font-lock-string-face) 391 392 (fontified t face font-lock-string-face) 392 407 (fontified t) 407 411 (fontified t face font-lock-constant-face) 411 433 (fontified t) 433 437 (fontified t face font-lock-constant-face) 437 456 (fontified t) 456 461 (fontified t face font-lock-type-face) 461 463 (fontified t) 463 470 (fontified t face font-lock-type-face) 470 499 (fontified t) 499 503 (fontified t face font-lock-constant-face) 503 517 (fontified t) 517 524 (fontified t) 524 529 (fontified t face font-lock-type-face) 529 531 (fontified t) 531 538 (fontified t face font-lock-type-face) 538 541 (fontified t) 541 555 (fontified t) 555 559 (fontified t face font-lock-variable-name-face) 559 561 (fontified t) 561 565 (fontified t face font-lock-type-face) 565 599 (fontified t) 599 602 (fontified t face font-lock-comment-delimiter-face) 602 693 (fontified t face font-lock-comment-face) 693 696 (fontified t face font-lock-keyword-face) 696 697 (fontified t) 697 699 (fontified t face font-lock-keyword-face) 699 700 (fontified t) 700 718 (fontified t face font-lock-function-name-face) 718 722 (fontified t) 722 723 (fontified t syntax-table #1#) 723 724 (fontified t) 724 728 (fontified t face font-lock-keyword-face) 728 729 (fontified t) 729 735 (fontified t face font-lock-type-face) 735 736 (fontified t) 736 743 (fontified t face font-lock-type-face) 743 746 (fontified t) 746 758 (fontified t face font-lock-type-face) 758 760 (fontified t) 760 765 (fontified t face font-lock-type-face) 765 768 (fontified t) 768 777 (fontified t face font-lock-type-face) 777 785 (fontified t) 785 790 (fontified t face font-lock-preprocessor-face) 790 791 (fontified t) 791 796 (fontified t face font-lock-string-face) 796 799 (fontified t) 799 803 (fontified t face font-lock-string-face) 803 806 (fontified t) 806 817 (fontified t face font-lock-string-face) 817 820 (fontified t) 820 824 (fontified t face font-lock-string-face) 824 825 (fontified t syntax-table #2# face font-lock-string-face) 825 826 (fontified t face font-lock-string-face) 826 829 (fontified t) 829 843 (fontified t face font-lock-string-face) 843 858 (fontified t) 858 862 (fontified t face font-lock-constant-face) 862 884 (fontified t) 884 888 (fontified t face font-lock-constant-face) 888 907 (fontified t) 907 912 (fontified t face font-lock-type-face) 912 914 (fontified t) 914 921 (fontified t face font-lock-type-face) 921 950 (fontified t) 950 954 (fontified t face font-lock-constant-face) 954 975 (fontified t) 975 980 (fontified t face font-lock-type-face) 980 982 (fontified t) 982 989 (fontified t face font-lock-type-face) 989 1006 (fontified t) 1006 1010 (fontified t face font-lock-variable-name-face) 1010 1012 (fontified t) 1012 1016 (fontified t face font-lock-type-face) 1016 1041 (fontified t) 1041 1074 (fontified t) 1074 1077 (fontified t) 1077 1080 (fontified t face font-lock-comment-delimiter-face) 1080 1166 (fontified t face font-lock-comment-face) 1166 1169 (fontified t face font-lock-keyword-face) 1169 1170 (fontified t) 1170 1172 (fontified t face font-lock-keyword-face) 1172 1173 (fontified t) 1173 1179 (fontified t face font-lock-function-name-face) 1179 1183 (fontified t) 1183 1184 (fontified t syntax-table #1#) 1184 1185 (fontified t) 1185 1189 (fontified t face font-lock-keyword-face) 1189 1190 (fontified t) 1190 1196 (fontified t face font-lock-type-face) 1196 1197 (fontified t) 1197 1204 (fontified t face font-lock-type-face) 1204 1207 (fontified t) 1207 1219 (fontified t face font-lock-type-face) 1219 1221 (fontified t) 1221 1226 (fontified t face font-lock-type-face) 1226 1229 (fontified t) 1229 1238 (fontified t face font-lock-type-face) 1238 1246 (fontified t) 1246 1251 (fontified t face font-lock-preprocessor-face) 1251 1252 (fontified t) 1252 1257 (fontified t face font-lock-string-face) 1257 1260 (fontified t) 1260 1264 (fontified t face font-lock-string-face) 1264 1267 (fontified t) 1267 1278 (fontified t face font-lock-string-face) 1278 1281 (fontified t) 1281 1289 (fontified t face font-lock-string-face) 1289 1304 (fontified t) 1304 1308 (fontified t face font-lock-constant-face) 1308 1330 (fontified t) 1330 1334 (fontified t face font-lock-constant-face) 1334 1353 (fontified t) 1353 1357 (fontified t face font-lock-constant-face) 1357 1359 (fontified t) 1359 1364 (fontified t face font-lock-type-face) 1364 1366 (fontified t) 1366 1372 (fontified t face font-lock-type-face) 1372 1401 (fontified t) 1401 1405 (fontified t face font-lock-constant-face) 1405 1426 (fontified t) 1426 1431 (fontified t face font-lock-type-face) 1431 1433 (fontified t) 1433 1439 (fontified t face font-lock-type-face) 1439 1456 (fontified t) 1456 1460 (fontified t face font-lock-variable-name-face) 1460 1462 (fontified t) 1462 1466 (fontified t face font-lock-type-face) 1466 1469 (fontified t) 1469 1477 (fontified t face font-lock-string-face) 1477 1523 (fontified t) 1523 1526 (fontified t face font-lock-comment-delimiter-face) 1526 1611 (fontified t face font-lock-comment-face) 1611 1612 (fontified t face font-lock-comment-face) 1612 1613 (fontified t) 1613 1614 (fontified t) 1614 1615 (fontified t) 1615 1618 (fontified t) 1618 1619 (fontified t rear-nonsticky t) 1619 1622 (fontified t face font-lock-comment-delimiter-face) 1622 1695 (fontified t face font-lock-comment-face) 1695 1707 (fontified t face font-lock-comment-face) 1707 1708 (fontified t face font-lock-comment-face) 1708 1709 (fontified t) 1709 1710 (fontified t) 1710 1711 (fontified t) 1711 1714 (fontified t) 1714 1715 (fontified t rear-nonsticky t) 1715 1718 (fontified t face font-lock-comment-delimiter-face) 1718 1719 (fontified t face font-lock-comment-face) 1719 1803 (fontified t face font-lock-comment-face) 1803 1804 (fontified t face font-lock-comment-face) 1804 1805 (fontified t) 1805 1806 (fontified t) 1806 1807 (fontified t) 1807 1808 (fontified t) 1808 1811 (fontified t) 1811 1812 (fontified t rear-nonsticky t) 1812 1815 (fontified t face font-lock-comment-delimiter-face) 1815 1897 (fontified t face font-lock-comment-face) 1897 1898 (fontified t face font-lock-comment-face) 1898 1899 (fontified t) 1899 1902 (fontified t) 1902 1903 (rear-nonsticky t fontified t) 1903 1906 (fontified t face font-lock-comment-delimiter-face) 1906 1985 (fontified t face font-lock-comment-face) 1985 1986 (fontified t face font-lock-comment-face) 1986 1989 (fontified t face font-lock-keyword-face) 1989 1990 (fontified t) 1990 1992 (fontified t face font-lock-keyword-face) 1992 1993 (fontified t) 1993 2000 (fontified t face font-lock-function-name-face) 2000 2004 (fontified t) 2004 2005 (fontified t syntax-table #1#) 2005 2006 (fontified t) 2006 2010 (fontified t face font-lock-keyword-face) 2010 2011 (fontified t) 2011 2017 (fontified t face font-lock-type-face) 2017 2018 (fontified t) 2018 2025 (fontified t face font-lock-type-face) 2025 2028 (fontified t) 2028 2040 (fontified t face font-lock-type-face) 2040 2042 (fontified t) 2042 2047 (fontified t face font-lock-type-face) 2047 2050 (fontified t) 2050 2059 (fontified t face font-lock-type-face) 2059 2062 (fontified t) 2062 2063 (fontified t) 2063 2067 (fontified t) 2067 2072 (fontified t face font-lock-preprocessor-face) 2072 2073 (fontified t) 2073 2078 (fontified t face font-lock-string-face) 2078 2081 (fontified t) 2081 2085 (fontified t face font-lock-string-face) 2085 2088 (fontified t) 2088 2099 (fontified t face font-lock-string-face) 2099 2102 (fontified t) 2102 2111 (fontified t face font-lock-string-face) 2111 2126 (fontified t) 2126 2130 (fontified t face font-lock-constant-face) 2130 2154 (fontified t) 2154 2158 (fontified t face font-lock-constant-face) 2158 2181 (fontified t) 2181 2182 (fontified t face font-lock-variable-name-face) 2182 2184 (fontified t) 2184 2189 (fontified t face font-lock-constant-face) 2189 2191 (fontified t) 2191 2198 (fontified t face font-lock-type-face) 2198 2201 (fontified t) 2201 2208 (fontified t face rust-builtin-formatting-macro-face) 2208 2209 (fontified t) 2209 2218 (fontified t face font-lock-string-face) 2218 2220 (fontified t face rust-string-interpolation-face) 2220 2221 (fontified t face font-lock-string-face) 2221 2231 (fontified t) 2231 2235 (fontified t face font-lock-type-face) 2235 2248 (fontified t) 2248 2249 (fontified t) 2249 2250 (fontified t) 2250 2251 (fontified t) 2251 2254 (fontified t) 2254 2255 (rear-nonsticky t fontified t) 2255 2258 (fontified t face font-lock-comment-delimiter-face) 2258 2337 (fontified t face font-lock-comment-face) 2337 2338 (fontified t face font-lock-comment-face) 2338 2339 (fontified t) 2339 2342 (fontified t) 2342 2343 (fontified t rear-nonsticky t) 2343 2346 (fontified t face font-lock-comment-delimiter-face) 2346 2383 (fontified t face font-lock-comment-face) 2383 2426 (fontified t face font-lock-comment-face) 2426 2427 (fontified t face font-lock-comment-face) 2427 2439 (fontified t face font-lock-preprocessor-face) 2439 2440 (fontified t) 2440 2443 (fontified t face font-lock-keyword-face) 2443 2444 (fontified t) 2444 2449 (fontified t face font-lock-constant-face) 2449 2456 (fontified t) 2456 2459 (fontified t face font-lock-keyword-face) 2459 2460 (fontified t) 2460 2465 (fontified t face font-lock-keyword-face) 2465 2475 (fontified t) 2475 2482 (fontified t face font-lock-preprocessor-face) 2482 2487 (fontified t) 2487 2489 (fontified t face font-lock-keyword-face) 2489 2490 (fontified t) 2490 2505 (fontified t face font-lock-function-name-face) 2505 2518 (fontified t) 2518 2521 (fontified t face font-lock-keyword-face) 2521 2522 (fontified t) 2522 2527 (fontified t face font-lock-variable-name-face) 2527 2530 (fontified t) 2530 2534 (fontified t face font-lock-constant-face) 2534 2536 (fontified t) 2536 2540 (fontified t face font-lock-constant-face) 2540 2570 (fontified t) 2570 2573 (fontified t face font-lock-string-face) 2573 2575 (fontified t face font-lock-string-face) 2575 2596 (fontified t face font-lock-string-face) 2596 2598 (fontified t) 2598 2660 (fontified t) 2660 2661 (fontified t) 2661 2662 (fontified t face font-lock-preprocessor-face) 2662 2671 (fontified t face font-lock-preprocessor-face) 2671 2681 (fontified t) 2681 2689 (fontified t face font-lock-string-face) 2689 2704 (fontified t) 2704 2712 (fontified t) 2712 2722 (fontified t face font-lock-preprocessor-face) 2722 2732 (fontified t) 2732 2736 (fontified t face font-lock-type-face) 2736 2739 (fontified t) 2739 2772 (fontified t) 2772 2783 (fontified t) 2783 2790 (fontified t face font-lock-preprocessor-face) 2790 2795 (fontified t) 2795 2797 (fontified t face font-lock-keyword-face) 2797 2798 (fontified t) 2798 2814 (fontified t face font-lock-function-name-face) 2814 2827 (fontified t) 2827 2830 (fontified t face font-lock-keyword-face) 2830 2831 (fontified t) 2831 2836 (fontified t face font-lock-variable-name-face) 2836 2837 (fontified t) 2837 2839 (fontified t) 2839 2843 (fontified t face font-lock-constant-face) 2843 2845 (fontified t) 2845 2849 (fontified t face font-lock-constant-face) 2849 2861 (fontified t) 2861 2879 (fontified t) 2879 2912 (fontified t face font-lock-string-face) 2912 2927 (fontified t) 2927 2946 (fontified t) 2978 2988 (face font-lock-preprocessor-face) 2998 3009 (face font-lock-string-face) 3032 3042 (face font-lock-preprocessor-face) 3052 3056 (face font-lock-type-face)) . 1) (undo-tree-id830 . -2426) (undo-tree-id831 . -992) (undo-tree-id832 . -2250) (undo-tree-id833 . -2339) (undo-tree-id834 . -2426) (undo-tree-id835 . 828) (undo-tree-id836 . -1614) (undo-tree-id837 . -1614) (undo-tree-id838 . -1614) (undo-tree-id839 . -1614) (undo-tree-id840 . -1710) (undo-tree-id841 . -1710) (undo-tree-id842 . -1707) (undo-tree-id843 . -1710) (undo-tree-id844 . -1710) (undo-tree-id845 . -1807) (undo-tree-id846 . -1807) (undo-tree-id847 . -992) (undo-tree-id848 . -1803) (undo-tree-id849 . -1807) (undo-tree-id850 . -1807) (undo-tree-id851 . -1812) (undo-tree-id852 . -1807) (undo-tree-id853 . -992) (undo-tree-id854 . -1897) (undo-tree-id855 . -1812) (undo-tree-id856 . -1812) (undo-tree-id857 . -1899) (undo-tree-id858 . -1898) (undo-tree-id859 . -1898) (undo-tree-id860 . -2062) (undo-tree-id861 . -1899) (undo-tree-id862 . -2248) (undo-tree-id863 . -2171) (undo-tree-id864 . -992) (undo-tree-id865 . -1986) (undo-tree-id866 . -2248) (undo-tree-id867 . -2250) (undo-tree-id868 . -2250) (undo-tree-id869 . -992) (undo-tree-id870 . -2337) (undo-tree-id871 . -2250) (undo-tree-id872 . -2250) (undo-tree-id873 . -2250) (undo-tree-id874 . -2250) (undo-tree-id875 . -992) (undo-tree-id876 . -2250) (undo-tree-id877 . -2250) (undo-tree-id878 . -992) (undo-tree-id879 . -2250) (undo-tree-id880 . -2250) (undo-tree-id881 . -992) (undo-tree-id882 . -2250) (undo-tree-id883 . -2250) (undo-tree-id884 . -992) (undo-tree-id885 . -2250) (undo-tree-id886 . -2250) (undo-tree-id887 . -2250) (undo-tree-id888 . -992) (undo-tree-id889 . -2250) (undo-tree-id890 . -2250) (undo-tree-id891 . -2250) (undo-tree-id892 . -992) (undo-tree-id893 . -992) (undo-tree-id894 . -2250) (undo-tree-id895 . -2343) (undo-tree-id896 . -2250) (undo-tree-id897 . -2250) (undo-tree-id898 . -992) (undo-tree-id899 . -2251) (undo-tree-id900 . -2250) (undo-tree-id901 . -992) (undo-tree-id902 . -2338) (undo-tree-id903 . -2251) (undo-tree-id904 . -992) (undo-tree-id905 . -2343) (undo-tree-id906 . -2338) (undo-tree-id907 . -992) (undo-tree-id908 . -2343) (undo-tree-id909 . -2343) (undo-tree-id910 . -992) 2344) nil (23752 27086 450133 479000) 0 nil]) ((nil rear-nonsticky nil 2343 . 2344) (#("
" 0 1 (face font-lock-comment-face fontified nil)) . -2427) (2339 . 2428)) nil (23752 27024 914470 935000) 0 nil]) ((2250 . 2251) 2249) nil (23752 27024 914475 654000) 0 nil]) ((nil rear-nonsticky nil 2254 . 2255) (#("
" 0 1 (face font-lock-comment-face fontified nil)) . -2337) (2250 . 2338) 2249) nil (23752 27024 914479 863000) 0 nil]) ((1900 . 1987)) nil (23752 27024 914482 699000) 0 nil] [nil nil ((#("
" 0 1 (face font-lock-comment-face fontified nil)) . -2063) (1976 . 2064) 1900) ((#("
    // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
" 0 1 (fontified t) 1 4 (fontified nil) 4 5 (rear-nonsticky t fontified nil) 5 8 (fontified nil face font-lock-comment-delimiter-face) 8 87 (fontified nil face font-lock-comment-face) 87 88 (face font-lock-comment-face fontified nil)) . 1976) (undo-tree-id823 . -87) (undo-tree-id824 . -1) (undo-tree-id825 . -87) (undo-tree-id826 . -5) (undo-tree-id827 . -5) (undo-tree-id828 . -5) (undo-tree-id829 . -5) (2063 . 2064)) (23752 26947 86346 440000) 0 nil]) ((#("    // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
" 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t) 4 7 (fontified t face font-lock-comment-delimiter-face) 7 86 (fontified t face font-lock-comment-face) 86 87 (fontified t face font-lock-comment-face)) . 1900) (undo-tree-id819 . -86) (undo-tree-id820 . -4) (undo-tree-id821 . -4) (undo-tree-id822 . -86)) nil (23752 26947 89439 155000) 0 nil]) ((1898 . 1899) 1813) nil (23752 26947 86361 10000) 0 nil]) ((nil rear-nonsticky nil 1902 . 1903) (#("
" 0 1 (face font-lock-comment-face fontified nil)) . -1985) (1898 . 1986) 1813) nil (23752 26947 86363 531000) 0 nil]) ((nil rear-nonsticky nil 1812 . 1813) (#("
" 0 1 (face font-lock-comment-face fontified nil)) . -1898) (1808 . 1899)) nil (23752 26947 86365 581000) 0 nil]) ((1805 . 1808) (1804 . 1805) 1716) nil (23752 26947 86367 670000) 0 nil]) ((nil rear-nonsticky nil 1715 . 1716) (#("
" 0 1 (face font-lock-comment-face fontified nil)) . -1804) (1711 . 1805)) nil (23752 26947 86369 461000) 0 nil]) ((1709 . 1711) (1708 . 1709) 1620) nil (23752 26947 86371 266000) 0 nil]) ((nil rear-nonsticky nil 1619 . 1620) (#("
" 0 1 (face font-lock-comment-face fontified nil)) . -1708) (1615 . 1709)) nil (23752 26947 86373 204000) 0 nil]) ((1613 . 1615) (1612 . 1613) (t 23752 26912 122578 262000) 1528) nil (23752 26947 86375 271000) 0 nil]) ((1 . 2529) (#("use crate::query;
use crate::user;
use crate::user::{Scope, User};
use warp::reject::Rejection;
use warp::{path, Filter};

#[allow(dead_code)]
type TimelineUser = ((String, User),);

// GET /api/v1/streaming/user                                  [private; language filter]
pub fn user() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user))
}

// GET /api/v1/streaming/user/notification                     [private; notification filter]
pub fn user_notifications() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user.with_notification_filter()))
}

// GET /api/v1/streaming/public                                [public; language filter]
pub fn public() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| (\"public\".to_owned(), user.with_language_filter()))
}

    // GET /api/v1/streaming/public?only_media=true                [public; language filter]
pub fn hashtag() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| (format!(\"hashtag:{}\", q.tag), User::public()))
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn public_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/public\")
            .filter(&public())
            .unwrap();

        assert_eq!(value.0, \"public\".to_string());
        assert_eq!(value.1, User::public().with_language_filter());
    }

    #[test]
    fn hashtag_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/hashtag?tag=a\")
            .filter(&hashtag())
            .unwrap();

        assert_eq!(value.0, \"hashtag:a\".to_string());
        assert_eq!(value.1, User::public());
    }

}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 17 (fontified t) 17 18 (fontified t) 18 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 27 (fontified t face font-lock-keyword-face) 27 35 (fontified t) 35 38 (fontified t face font-lock-keyword-face) 38 39 (fontified t) 39 44 (fontified t face font-lock-keyword-face) 44 46 (fontified t) 46 50 (fontified t face font-lock-constant-face) 50 53 (fontified t) 53 58 (fontified t face font-lock-type-face) 58 60 (fontified t) 60 64 (fontified t face font-lock-type-face) 64 67 (fontified t) 67 70 (fontified t face font-lock-keyword-face) 70 71 (fontified t) 71 75 (fontified t face font-lock-constant-face) 75 77 (fontified t) 77 83 (fontified t face font-lock-constant-face) 83 85 (fontified t) 85 94 (fontified t face font-lock-type-face) 94 96 (fontified t) 96 99 (fontified t face font-lock-keyword-face) 99 100 (fontified t) 100 104 (fontified t face font-lock-constant-face) 104 113 (fontified t) 113 119 (fontified t face font-lock-type-face) 119 123 (fontified t) 123 142 (fontified t face font-lock-preprocessor-face) 142 143 (fontified t) 143 147 (fontified t face font-lock-keyword-face) 147 148 (fontified t) 148 160 (fontified t face font-lock-type-face) 160 165 (fontified t) 165 171 (fontified t face font-lock-type-face) 171 173 (fontified t) 173 177 (fontified t face font-lock-type-face) 177 183 (fontified t) 183 186 (fontified t face font-lock-comment-delimiter-face) 186 273 (fontified t face font-lock-comment-face) 273 276 (fontified t face font-lock-keyword-face) 276 277 (fontified t) 277 279 (fontified t face font-lock-keyword-face) 279 280 (fontified t) 280 284 (fontified t face font-lock-function-name-face) 284 288 (fontified t) 288 289 (fontified t syntax-table #1#) 289 290 (fontified t) 290 294 (fontified t face font-lock-keyword-face) 294 295 (fontified t) 295 301 (fontified t face font-lock-type-face) 301 302 (fontified t) 302 309 (fontified t face font-lock-type-face) 309 312 (fontified t) 312 324 (fontified t face font-lock-type-face) 324 326 (fontified t) 326 331 (fontified t face font-lock-type-face) 331 334 (fontified t) 334 343 (fontified t face font-lock-type-face) 343 351 (fontified t) 351 356 (fontified t face font-lock-preprocessor-face) 356 357 (fontified t) 357 362 (fontified t face font-lock-string-face) 362 365 (fontified t) 365 369 (fontified t face font-lock-string-face) 369 372 (fontified t) 372 383 (fontified t face font-lock-string-face) 383 386 (fontified t) 386 390 (fontified t face font-lock-string-face) 390 391 (fontified t syntax-table #2# face font-lock-string-face) 391 392 (fontified t face font-lock-string-face) 392 407 (fontified t) 407 411 (fontified t face font-lock-constant-face) 411 433 (fontified t) 433 437 (fontified t face font-lock-constant-face) 437 456 (fontified t) 456 461 (fontified t face font-lock-type-face) 461 463 (fontified t) 463 470 (fontified t face font-lock-type-face) 470 499 (fontified t) 499 503 (fontified t face font-lock-constant-face) 503 517 (fontified t) 517 524 (fontified t) 524 529 (fontified t face font-lock-type-face) 529 531 (fontified t) 531 538 (fontified t face font-lock-type-face) 538 541 (fontified t) 541 555 (fontified t) 555 559 (fontified t face font-lock-variable-name-face) 559 561 (fontified t) 561 565 (fontified t face font-lock-type-face) 565 599 (fontified t) 599 602 (fontified t face font-lock-comment-delimiter-face) 602 693 (fontified t face font-lock-comment-face) 693 696 (fontified t face font-lock-keyword-face) 696 697 (fontified t) 697 699 (fontified t face font-lock-keyword-face) 699 700 (fontified t) 700 718 (fontified t face font-lock-function-name-face) 718 722 (fontified t) 722 723 (fontified t syntax-table #1#) 723 724 (fontified t) 724 728 (fontified t face font-lock-keyword-face) 728 729 (fontified t) 729 735 (fontified t face font-lock-type-face) 735 736 (fontified t) 736 743 (fontified t face font-lock-type-face) 743 746 (fontified t) 746 758 (fontified t face font-lock-type-face) 758 760 (fontified t) 760 765 (fontified t face font-lock-type-face) 765 768 (fontified t) 768 777 (fontified t face font-lock-type-face) 777 785 (fontified t) 785 790 (fontified t face font-lock-preprocessor-face) 790 791 (fontified t) 791 796 (fontified t face font-lock-string-face) 796 799 (fontified t) 799 803 (fontified t face font-lock-string-face) 803 806 (fontified t) 806 817 (fontified t face font-lock-string-face) 817 820 (fontified t) 820 824 (fontified t face font-lock-string-face) 824 825 (fontified t syntax-table #2# face font-lock-string-face) 825 826 (fontified t face font-lock-string-face) 826 829 (fontified t) 829 843 (fontified t face font-lock-string-face) 843 858 (fontified t) 858 862 (fontified t face font-lock-constant-face) 862 884 (fontified t) 884 888 (fontified t face font-lock-constant-face) 888 907 (fontified t) 907 912 (fontified t face font-lock-type-face) 912 914 (fontified t) 914 921 (fontified t face font-lock-type-face) 921 950 (fontified t) 950 954 (fontified t face font-lock-constant-face) 954 975 (fontified t) 975 980 (fontified t face font-lock-type-face) 980 982 (fontified t) 982 989 (fontified t face font-lock-type-face) 989 1006 (fontified t) 1006 1010 (fontified t face font-lock-variable-name-face) 1010 1012 (fontified t) 1012 1016 (fontified t face font-lock-type-face) 1016 1041 (fontified t) 1041 1074 (fontified t) 1074 1075 (fontified t) 1075 1076 (fontified t) 1076 1077 (fontified t) 1077 1080 (fontified t face font-lock-comment-delimiter-face) 1080 1089 (fontified t face font-lock-comment-face) 1089 1146 (fontified t face font-lock-comment-face) 1146 1165 (fontified t face font-lock-comment-face) 1165 1166 (fontified t face font-lock-comment-face) 1166 1169 (fontified t face font-lock-keyword-face) 1169 1170 (fontified t) 1170 1172 (fontified t face font-lock-keyword-face) 1172 1173 (fontified t) 1173 1179 (fontified t face font-lock-function-name-face) 1179 1183 (fontified t) 1183 1184 (syntax-table #1# fontified t) 1184 1185 (fontified t) 1185 1189 (fontified t face font-lock-keyword-face) 1189 1190 (fontified t) 1190 1196 (fontified t face font-lock-type-face) 1196 1197 (fontified t) 1197 1204 (fontified t face font-lock-type-face) 1204 1207 (fontified t) 1207 1219 (fontified t face font-lock-type-face) 1219 1221 (fontified t) 1221 1226 (fontified t face font-lock-type-face) 1226 1229 (fontified t) 1229 1238 (fontified t face font-lock-type-face) 1238 1246 (fontified t) 1246 1251 (fontified t face font-lock-preprocessor-face) 1251 1252 (fontified t) 1252 1257 (fontified t face font-lock-string-face) 1257 1260 (fontified t) 1260 1264 (fontified t face font-lock-string-face) 1264 1267 (fontified t) 1267 1278 (fontified t face font-lock-string-face) 1278 1281 (fontified t) 1281 1289 (fontified t face font-lock-string-face) 1289 1304 (fontified t) 1304 1308 (fontified t face font-lock-constant-face) 1308 1330 (fontified t) 1330 1334 (fontified t face font-lock-constant-face) 1334 1353 (fontified t) 1353 1357 (fontified t face font-lock-constant-face) 1357 1359 (fontified t) 1359 1364 (fontified t face font-lock-type-face) 1364 1366 (fontified t) 1366 1372 (fontified t face font-lock-type-face) 1372 1401 (fontified t) 1401 1405 (fontified t face font-lock-constant-face) 1405 1426 (fontified t) 1426 1431 (fontified t face font-lock-type-face) 1431 1433 (fontified t) 1433 1439 (fontified t face font-lock-type-face) 1439 1456 (fontified t) 1456 1460 (fontified t face font-lock-variable-name-face) 1460 1462 (fontified t) 1462 1466 (fontified t face font-lock-type-face) 1466 1469 (fontified t) 1469 1477 (fontified t face font-lock-string-face) 1477 1522 (fontified t) 1522 1523 (fontified t) 1523 1526 (fontified t) 1526 1527 (fontified t rear-nonsticky t) 1527 1530 (fontified t face font-lock-comment-delimiter-face) 1530 1615 (fontified t face font-lock-comment-face) 1615 1616 (fontified t face font-lock-comment-face) 1616 1619 (fontified t face font-lock-keyword-face) 1619 1620 (fontified t) 1620 1622 (fontified t face font-lock-keyword-face) 1622 1623 (fontified t) 1623 1630 (fontified t face font-lock-function-name-face) 1630 1634 (fontified t) 1634 1635 (syntax-table #1# fontified t) 1635 1636 (fontified t) 1636 1640 (fontified t face font-lock-keyword-face) 1640 1641 (fontified t) 1641 1647 (fontified t face font-lock-type-face) 1647 1648 (fontified t) 1648 1655 (fontified t face font-lock-type-face) 1655 1658 (fontified t) 1658 1670 (fontified t face font-lock-type-face) 1670 1672 (fontified t) 1672 1677 (fontified t face font-lock-type-face) 1677 1680 (fontified t) 1680 1689 (fontified t face font-lock-type-face) 1689 1697 (fontified t) 1697 1702 (fontified t face font-lock-preprocessor-face) 1702 1703 (fontified t) 1703 1708 (fontified t face font-lock-string-face) 1708 1711 (fontified t) 1711 1715 (fontified t face font-lock-string-face) 1715 1718 (fontified t) 1718 1729 (fontified t face font-lock-string-face) 1729 1732 (fontified t) 1732 1741 (fontified t face font-lock-string-face) 1741 1756 (fontified t) 1756 1757 (fontified t face font-lock-constant-face) 1757 1758 (fontified t face font-lock-constant-face) 1758 1759 (fontified t face font-lock-constant-face) 1759 1760 (fontified t face font-lock-constant-face) 1760 1771 (fontified t) 1771 1784 (fontified t) 1784 1788 (fontified t face font-lock-constant-face) 1788 1811 (fontified t) 1811 1812 (fontified t face font-lock-variable-name-face) 1812 1814 (fontified t) 1814 1819 (fontified t face font-lock-constant-face) 1819 1821 (fontified t) 1821 1828 (fontified t face font-lock-type-face) 1828 1831 (fontified t) 1831 1838 (fontified t face rust-builtin-formatting-macro-face) 1838 1839 (fontified t) 1839 1848 (fontified t face font-lock-string-face) 1848 1850 (fontified t face rust-string-interpolation-face) 1850 1851 (fontified t face font-lock-string-face) 1851 1861 (fontified t) 1861 1865 (fontified t face font-lock-type-face) 1865 1881 (fontified t) 1881 1893 (fontified t face font-lock-preprocessor-face) 1893 1894 (fontified t) 1894 1897 (fontified t face font-lock-keyword-face) 1897 1898 (fontified t) 1898 1903 (fontified t face font-lock-constant-face) 1903 1910 (fontified t) 1910 1913 (fontified t face font-lock-keyword-face) 1913 1914 (fontified t) 1914 1919 (fontified t face font-lock-keyword-face) 1919 1929 (fontified t) 1929 1936 (fontified t face font-lock-preprocessor-face) 1936 1941 (fontified t) 1941 1943 (fontified t face font-lock-keyword-face) 1943 1944 (fontified t) 1944 1959 (fontified t face font-lock-function-name-face) 1959 1972 (fontified t) 1972 1975 (fontified t face font-lock-keyword-face) 1975 1976 (fontified t) 1976 1981 (fontified t face font-lock-variable-name-face) 1981 1984 (fontified t) 1984 1988 (fontified t face font-lock-constant-face) 1988 1990 (fontified t) 1990 1994 (fontified t face font-lock-constant-face) 1994 2024 (fontified t) 2024 2050 (fontified t face font-lock-string-face) 2050 2115 (fontified t) 2115 2116 (fontified t face font-lock-preprocessor-face) 2116 2125 (face font-lock-preprocessor-face fontified t) 2125 2135 (fontified t) 2135 2143 (face font-lock-string-face fontified t) 2143 2158 (fontified t) 2166 2176 (face font-lock-preprocessor-face) 2186 2190 (face font-lock-type-face) 2237 2244 (face font-lock-preprocessor-face) 2249 2251 (face font-lock-keyword-face) 2252 2268 (face font-lock-function-name-face)) . 1) (undo-tree-id797 . -1615) (undo-tree-id798 . -1375) (undo-tree-id799 . -1523) (undo-tree-id800 . -1615) (undo-tree-id801 . 1456) (undo-tree-id802 . -599) (undo-tree-id803 . -693) (undo-tree-id804 . -599) (undo-tree-id805 . -1375) (undo-tree-id806 . -1317) (undo-tree-id807 . -1165) (undo-tree-id808 . -1375) (undo-tree-id809 . -1375) (undo-tree-id810 . -1375) (undo-tree-id811 . -1375) (undo-tree-id812 . -1375) (undo-tree-id813 . -1375) (undo-tree-id814 . -1375) (undo-tree-id815 . -1375) (undo-tree-id816 . -1527) (undo-tree-id817 . -1527) (undo-tree-id818 . -1522) 1528) nil (23752 26912 105344 587000) 0 nil]) ((nil rear-nonsticky nil 1527 . 1528) (#("
" 0 1 (face font-lock-comment-face fontified nil)) . -1616) (1523 . 1617) (t 23752 26837 476567 849000)) nil (23752 26912 105352 915000) 0 nil]) ((#(" " 0 1 (fontified t rear-nonsticky t)) . 1078)) nil (23752 26837 463554 363000) 0 nil]) ((#(" " 0 1 (fontified t)) . 1078)) nil (23752 26837 463559 228000) 0 nil]) ((#(" " 0 1 (fontified t)) . 1078)) nil (23752 26837 463561 386000) 0 nil]) ((#(" " 0 1 (fontified t)) . 1078)) nil (23752 26837 463563 100000) 0 nil]) ((1077 . 1078) 1081) nil (23752 26837 463564 838000) 0 nil]) ((nil rear-nonsticky nil 1080 . 1081) (#("
" 0 1 (face font-lock-comment-face fontified nil)) . -1169) (1076 . 1170) 1075 (t 23752 26770 420522 877000)) nil (23752 26837 463567 372000) 0 nil]) ((1 . 2350) (#("use crate::query;
use crate::user;
use crate::user::{Scope, User};
use warp::reject::Rejection;
use warp::{path, Filter};

#[allow(dead_code)]
type TimelineUser = ((String, User),);


// GET /api/v1/streaming/user                                  [private; language filter]
pub fn user() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user))
}


    // GET /api/v1/streaming/user/notification                     [private; notification filter]
pub fn user_notifications() -> impl Filter<Extract = TimelineUser, Error = Rejection> {

    path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user.with_notification_filter()))
}
pub fn public() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| (\"public\".to_owned(), user.with_language_filter()))
}

pub fn hashtag() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| (format!(\"hashtag:{}\", q.tag), User::public()))
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn public_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/public\")
            .filter(&public())
            .unwrap();

        assert_eq!(value.0, \"public\".to_string());
        assert_eq!(value.1, User::public().with_language_filter());
    }

    #[test]
    fn hashtag_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/hashtag?tag=a\")
            .filter(&hashtag())
            .unwrap();

        assert_eq!(value.0, \"hashtag:a\".to_string());
        assert_eq!(value.1, User::public());
    }

}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 17 (fontified t) 17 18 (fontified t) 18 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 27 (fontified t face font-lock-keyword-face) 27 35 (fontified t) 35 38 (fontified t face font-lock-keyword-face) 38 39 (fontified t) 39 44 (fontified t face font-lock-keyword-face) 44 46 (fontified t) 46 50 (fontified t face font-lock-constant-face) 50 53 (fontified t) 53 58 (fontified t face font-lock-type-face) 58 60 (fontified t) 60 64 (fontified t face font-lock-type-face) 64 67 (fontified t) 67 70 (fontified t face font-lock-keyword-face) 70 71 (fontified t) 71 75 (fontified t face font-lock-constant-face) 75 77 (fontified t) 77 83 (fontified t face font-lock-constant-face) 83 85 (fontified t) 85 94 (fontified t face font-lock-type-face) 94 96 (fontified t) 96 99 (fontified t face font-lock-keyword-face) 99 100 (fontified t) 100 104 (fontified t face font-lock-constant-face) 104 113 (fontified t) 113 119 (fontified t face font-lock-type-face) 119 123 (fontified t) 123 142 (fontified t face font-lock-preprocessor-face) 142 143 (fontified t) 143 147 (fontified t face font-lock-keyword-face) 147 148 (fontified t) 148 160 (fontified t face font-lock-type-face) 160 165 (fontified t) 165 171 (fontified t face font-lock-type-face) 171 173 (fontified t) 173 177 (fontified t face font-lock-type-face) 177 181 (fontified t) 181 182 (fontified t) 182 183 (fontified t) 183 184 (fontified t) 184 187 (fontified t face font-lock-comment-delimiter-face) 187 273 (fontified t face font-lock-comment-face) 273 274 (fontified t face font-lock-comment-face) 274 277 (fontified t face font-lock-keyword-face) 277 278 (fontified t) 278 280 (fontified t face font-lock-keyword-face) 280 281 (fontified t) 281 285 (fontified t face font-lock-function-name-face) 285 289 (fontified t) 289 290 (syntax-table #1# fontified t) 290 291 (fontified t) 291 295 (fontified t face font-lock-keyword-face) 295 296 (fontified t) 296 302 (fontified t face font-lock-type-face) 302 303 (fontified t) 303 310 (fontified t face font-lock-type-face) 310 313 (fontified t) 313 325 (fontified t face font-lock-type-face) 325 327 (fontified t) 327 332 (fontified t face font-lock-type-face) 332 335 (fontified t) 335 344 (fontified t face font-lock-type-face) 344 352 (fontified t) 352 357 (fontified t face font-lock-preprocessor-face) 357 358 (fontified t) 358 363 (fontified t face font-lock-string-face) 363 366 (fontified t) 366 370 (fontified t face font-lock-string-face) 370 373 (fontified t) 373 384 (fontified t face font-lock-string-face) 384 387 (fontified t) 387 391 (fontified t face font-lock-string-face) 391 392 (syntax-table #2# fontified t face font-lock-string-face) 392 393 (fontified t face font-lock-string-face) 393 408 (fontified t) 408 412 (fontified t face font-lock-constant-face) 412 434 (fontified t) 434 438 (fontified t face font-lock-constant-face) 438 457 (fontified t) 457 462 (fontified t face font-lock-type-face) 462 464 (fontified t) 464 471 (fontified t face font-lock-type-face) 471 500 (fontified t) 500 504 (fontified t face font-lock-constant-face) 504 525 (fontified t) 525 530 (fontified t face font-lock-type-face) 530 532 (fontified t) 532 539 (fontified t face font-lock-type-face) 539 556 (fontified t) 556 560 (fontified t face font-lock-variable-name-face) 560 562 (fontified t) 562 566 (fontified t face font-lock-type-face) 566 597 (fontified t) 597 598 (fontified t) 598 599 (fontified t) 599 600 (fontified t) 600 601 (fontified t) 601 604 (fontified t) 604 605 (fontified t rear-nonsticky t) 605 608 (fontified t face font-lock-comment-delimiter-face) 608 698 (fontified t face font-lock-comment-face) 698 699 (fontified t face font-lock-comment-face) 699 702 (fontified t face font-lock-keyword-face) 702 703 (fontified t) 703 705 (fontified t face font-lock-keyword-face) 705 706 (fontified t) 706 724 (fontified t face font-lock-function-name-face) 724 728 (fontified t) 728 729 (fontified t syntax-table #1#) 729 730 (fontified t) 730 734 (fontified t face font-lock-keyword-face) 734 735 (fontified t) 735 741 (fontified t face font-lock-type-face) 741 742 (fontified t) 742 749 (fontified t face font-lock-type-face) 749 752 (fontified t) 752 764 (fontified t face font-lock-type-face) 764 766 (fontified t) 766 771 (fontified t face font-lock-type-face) 771 774 (fontified t) 774 783 (fontified t face font-lock-type-face) 783 784 (fontified t) 784 785 (fontified t rear-nonsticky t) 785 787 (fontified t) 787 788 (fontified t) 788 791 (fontified t) 791 792 (fontified t rear-nonsticky t) 792 797 (fontified t face font-lock-preprocessor-face) 797 798 (fontified t) 798 803 (fontified t face font-lock-string-face) 803 806 (fontified t) 806 810 (fontified t face font-lock-string-face) 810 813 (fontified t) 813 824 (fontified t face font-lock-string-face) 824 827 (fontified t) 827 831 (fontified t face font-lock-string-face) 831 832 (fontified t syntax-table #2# face font-lock-string-face) 832 833 (fontified t face font-lock-string-face) 833 836 (fontified t) 836 850 (fontified t face font-lock-string-face) 850 852 (fontified t) 852 865 (fontified t) 865 869 (fontified t face font-lock-constant-face) 869 891 (fontified t) 891 895 (fontified t face font-lock-constant-face) 895 914 (fontified t) 914 919 (fontified t face font-lock-type-face) 919 921 (fontified t) 921 928 (fontified t face font-lock-type-face) 928 957 (fontified t) 957 961 (fontified t face font-lock-constant-face) 961 982 (fontified t) 982 987 (fontified t face font-lock-type-face) 987 989 (fontified t) 989 996 (fontified t face font-lock-type-face) 996 999 (fontified t) 999 1013 (fontified t) 1013 1017 (fontified t face font-lock-variable-name-face) 1017 1019 (fontified t) 1019 1023 (fontified t face font-lock-type-face) 1023 1080 (fontified t) 1080 1081 (fontified t) 1081 1082 (fontified t) 1082 1083 (fontified t) 1083 1086 (fontified t face font-lock-keyword-face) 1086 1087 (fontified t) 1087 1089 (fontified t face font-lock-keyword-face) 1089 1090 (fontified t) 1090 1096 (fontified t face font-lock-function-name-face) 1096 1100 (fontified t) 1100 1101 (syntax-table #1# fontified t) 1101 1102 (fontified t) 1102 1106 (fontified t face font-lock-keyword-face) 1106 1107 (fontified t) 1107 1113 (fontified t face font-lock-type-face) 1113 1114 (fontified t) 1114 1121 (fontified t face font-lock-type-face) 1121 1124 (fontified t) 1124 1136 (fontified t face font-lock-type-face) 1136 1138 (fontified t) 1138 1143 (fontified t face font-lock-type-face) 1143 1146 (fontified t) 1146 1155 (fontified t face font-lock-type-face) 1155 1156 (fontified t) 1156 1159 (fontified t) 1159 1163 (fontified t) 1163 1167 (fontified t face font-lock-preprocessor-face) 1167 1168 (fontified t face font-lock-preprocessor-face) 1168 1169 (fontified t) 1169 1174 (fontified t face font-lock-string-face) 1174 1177 (fontified t) 1177 1181 (fontified t face font-lock-string-face) 1181 1184 (fontified t) 1184 1195 (fontified t face font-lock-string-face) 1195 1198 (fontified t) 1198 1206 (fontified t face font-lock-string-face) 1206 1208 (fontified t) 1208 1221 (fontified t) 1221 1225 (fontified t face font-lock-constant-face) 1225 1247 (fontified t) 1247 1251 (fontified t face font-lock-constant-face) 1251 1255 (fontified t) 1255 1257 (fontified t) 1257 1270 (fontified t) 1270 1274 (fontified t face font-lock-constant-face) 1274 1276 (fontified t) 1276 1281 (fontified t face font-lock-type-face) 1281 1283 (fontified t) 1283 1289 (fontified t face font-lock-type-face) 1289 1292 (fontified t) 1292 1318 (fontified t) 1318 1322 (fontified t face font-lock-constant-face) 1322 1343 (fontified t) 1343 1348 (fontified t face font-lock-type-face) 1348 1350 (fontified t) 1350 1353 (fontified t face font-lock-type-face) 1353 1356 (fontified t face font-lock-type-face) 1356 1359 (fontified t) 1359 1373 (fontified t) 1373 1377 (fontified t face font-lock-variable-name-face) 1377 1379 (fontified t) 1379 1383 (fontified t face font-lock-type-face) 1383 1386 (fontified t) 1386 1394 (fontified t face font-lock-string-face) 1394 1440 (fontified t) 1440 1443 (fontified t face font-lock-keyword-face) 1443 1444 (fontified t) 1444 1446 (fontified t face font-lock-keyword-face) 1446 1447 (fontified t) 1447 1454 (fontified t face font-lock-function-name-face) 1454 1458 (fontified t) 1458 1459 (syntax-table #1# fontified t) 1459 1460 (fontified t) 1460 1464 (fontified t face font-lock-keyword-face) 1464 1465 (fontified t) 1465 1471 (fontified t face font-lock-type-face) 1471 1472 (fontified t) 1472 1479 (fontified t face font-lock-type-face) 1479 1482 (fontified t) 1482 1494 (fontified t face font-lock-type-face) 1494 1496 (fontified t) 1496 1501 (fontified t face font-lock-type-face) 1501 1504 (fontified t) 1504 1513 (fontified t face font-lock-type-face) 1513 1521 (fontified t) 1521 1526 (fontified t face font-lock-preprocessor-face) 1526 1527 (fontified t) 1527 1532 (fontified t face font-lock-string-face) 1532 1535 (fontified t) 1535 1539 (fontified t face font-lock-string-face) 1539 1542 (fontified t) 1542 1553 (fontified t face font-lock-string-face) 1553 1556 (fontified t) 1556 1565 (fontified t face font-lock-string-face) 1565 1580 (fontified t) 1580 1581 (fontified t face font-lock-constant-face) 1581 1583 (face font-lock-constant-face fontified t) 1583 1584 (face font-lock-constant-face fontified t) 1584 1595 (fontified t) 1595 1608 (fontified t) 1608 1612 (fontified t face font-lock-constant-face) 1612 1635 (fontified t) 1635 1636 (fontified t face font-lock-variable-name-face) 1636 1638 (fontified t) 1638 1643 (fontified t face font-lock-constant-face) 1643 1645 (fontified t) 1645 1652 (fontified t face font-lock-type-face) 1652 1655 (fontified t) 1655 1662 (fontified t face rust-builtin-formatting-macro-face) 1662 1663 (fontified t) 1663 1672 (fontified t face font-lock-string-face) 1672 1674 (fontified t face rust-string-interpolation-face) 1674 1675 (fontified t face font-lock-string-face) 1675 1685 (fontified t) 1685 1689 (fontified t face font-lock-type-face) 1689 1705 (fontified t) 1705 1708 (fontified t face font-lock-preprocessor-face) 1708 1717 (fontified t face font-lock-preprocessor-face) 1717 1718 (fontified t) 1718 1721 (fontified t face font-lock-keyword-face) 1721 1722 (fontified t) 1722 1727 (fontified t face font-lock-constant-face) 1727 1734 (fontified t) 1734 1737 (fontified t face font-lock-keyword-face) 1737 1738 (fontified t) 1738 1743 (fontified t face font-lock-keyword-face) 1743 1753 (fontified t) 1753 1760 (fontified t face font-lock-preprocessor-face) 1760 1765 (fontified t) 1765 1767 (fontified t face font-lock-keyword-face) 1767 1768 (fontified t) 1768 1783 (fontified t face font-lock-function-name-face) 1783 1792 (fontified t) 1792 1796 (fontified t) 1796 1799 (fontified t face font-lock-keyword-face) 1799 1800 (fontified t) 1800 1805 (fontified t face font-lock-variable-name-face) 1805 1808 (fontified t) 1808 1812 (fontified t face font-lock-constant-face) 1812 1814 (fontified t) 1814 1818 (fontified t face font-lock-constant-face) 1818 1830 (fontified t) 1830 1848 (fontified t) 1848 1859 (fontified t face font-lock-string-face) 1859 1874 (fontified t face font-lock-string-face) 1874 1876 (fontified t) 1876 1939 (fontified t) 1939 1949 (fontified t face font-lock-preprocessor-face) 1949 1959 (fontified t) 1959 1967 (fontified t face font-lock-string-face) 1967 1990 (fontified t) 1990 2000 (fontified t face font-lock-preprocessor-face) 2000 2010 (fontified t) 2010 2014 (fontified t face font-lock-type-face) 2014 2061 (fontified t) 2061 2068 (fontified t face font-lock-preprocessor-face) 2068 2073 (fontified t) 2073 2075 (fontified t face font-lock-keyword-face) 2075 2076 (fontified t) 2076 2092 (fontified t face font-lock-function-name-face) 2092 2095 (fontified t) 2095 2097 (fontified t) 2105 2108 (face font-lock-keyword-face) 2109 2114 (face font-lock-variable-name-face) 2117 2121 (face font-lock-constant-face) 2123 2127 (face font-lock-constant-face) 2157 2190 (face font-lock-string-face) 2256 2266 (face font-lock-preprocessor-face) 2276 2287 (face font-lock-string-face) 2310 2320 (face font-lock-preprocessor-face) 2330 2334 (face font-lock-type-face)) . 1) (undo-tree-id620 . -1080) (undo-tree-id621 . -600) (undo-tree-id622 . -788) (undo-tree-id623 . -1080) (undo-tree-id624 . 1276) (undo-tree-id625 . -1083) (undo-tree-id626 . 1273) (undo-tree-id627 . -1083) (undo-tree-id628 . -1083) (undo-tree-id629 . -182) (undo-tree-id630 . -182) (undo-tree-id631 . -182) (undo-tree-id632 . -182) (undo-tree-id633 . -599) (undo-tree-id634 . -597) (undo-tree-id635 . -273) (undo-tree-id636 . -599) (undo-tree-id637 . -599) (undo-tree-id638 . -599) (undo-tree-id639 . -599) (undo-tree-id640 . -599) (undo-tree-id641 . -600) (undo-tree-id642 . -600) (undo-tree-id643 . -599) (undo-tree-id644 . -600) (undo-tree-id645 . -600) (undo-tree-id646 . -345) (undo-tree-id647 . -345) (undo-tree-id648 . -724) (undo-tree-id649 . -784) (undo-tree-id650 . -784) (undo-tree-id651 . -785) (undo-tree-id652 . -784) (undo-tree-id653 . -785) (undo-tree-id654 . -785) (undo-tree-id655 . -1079) (undo-tree-id656 . -1083) (undo-tree-id657 . -1083) (undo-tree-id658 . -1083) (undo-tree-id659 . -1083) (undo-tree-id660 . -1083) (undo-tree-id661 . -1083) (undo-tree-id662 . -1083) (undo-tree-id663 . -1083) (undo-tree-id664 . -1083) (undo-tree-id665 . -1083) (undo-tree-id666 . -1083) (undo-tree-id667 . -1083) (undo-tree-id668 . -1083) (undo-tree-id669 . -1083) (undo-tree-id670 . -1083) (undo-tree-id671 . -1083) (undo-tree-id672 . -1080) (undo-tree-id673 . -1003) (undo-tree-id674 . -1080) (undo-tree-id675 . -1080) (undo-tree-id676 . -1079) (undo-tree-id677 . -1080) (undo-tree-id678 . -1079) (undo-tree-id679 . -1080) (undo-tree-id680 . -1079) (undo-tree-id681 . -1080) (undo-tree-id682 . -1079) (undo-tree-id683 . -1080) (undo-tree-id684 . -849) (undo-tree-id685 . -850) (undo-tree-id686 . -849) (undo-tree-id687 . -850) (undo-tree-id688 . -1079) (undo-tree-id689 . -1080) (undo-tree-id690 . -1079) (undo-tree-id691 . -1080) (undo-tree-id692 . -1078) (undo-tree-id693 . -1079) (undo-tree-id694 . -1077) (undo-tree-id695 . -1078) (undo-tree-id696 . -1076) (undo-tree-id697 . -1077) (undo-tree-id698 . -1044) (undo-tree-id699 . -1045) (undo-tree-id700 . -1043) (undo-tree-id701 . -1044) (undo-tree-id702 . -1025) (undo-tree-id703 . -1026) (undo-tree-id704 . -1011) (undo-tree-id705 . -1012) (undo-tree-id706 . -1079) (undo-tree-id707 . -1079) (undo-tree-id708 . -1169) (undo-tree-id709 . -1170) (undo-tree-id710 . -1078) (undo-tree-id711 . -1079) (undo-tree-id712 . -1077) (undo-tree-id713 . -1078) (undo-tree-id714 . -1076) (undo-tree-id715 . -1077) (undo-tree-id716 . -1044) (undo-tree-id717 . -1045) (undo-tree-id718 . -1043) (undo-tree-id719 . -1044) (undo-tree-id720 . -1025) (undo-tree-id721 . -1026) (undo-tree-id722 . -1011) (undo-tree-id723 . -1012) (undo-tree-id724 . -730) (undo-tree-id725 . -734) (undo-tree-id726 . -730) (undo-tree-id727 . -784) (undo-tree-id728 . -1169) (undo-tree-id729 . -1170) (undo-tree-id730 . -1078) (undo-tree-id731 . -1079) (undo-tree-id732 . -1077) (undo-tree-id733 . -1078) (undo-tree-id734 . -1076) (undo-tree-id735 . -1077) (undo-tree-id736 . -1044) (undo-tree-id737 . -1045) (undo-tree-id738 . -1043) (undo-tree-id739 . -1044) (undo-tree-id740 . -1025) (undo-tree-id741 . -1026) (undo-tree-id742 . -1011) (undo-tree-id743 . -1012) (undo-tree-id744 . 1345) (undo-tree-id745 . -1012) (undo-tree-id746 . 1344) (undo-tree-id747 . -1079) (undo-tree-id748 . 1277) (undo-tree-id749 . -1080) 1080) nil (23752 26770 405126 814000) 0 nil]) ((#(";" 0 1 (fontified t)) . -1081) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) 1082) nil (23752 26770 405160 670000) 0 nil]) ((nil rear-nonsticky nil 792 . 793) (#("
" 0 1 (fontified nil)) . -1082) (788 . 1083)) nil (23752 26770 405166 921000) 0 nil]) ((#("    path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user.with_notification_filter()));
" 0 3 (fontified t) 3 4 (fontified t) 4 9 (fontified t face font-lock-preprocessor-face) 9 10 (fontified t) 10 15 (fontified t face font-lock-string-face) 15 18 (fontified t) 18 22 (fontified t face font-lock-string-face) 22 25 (fontified t) 25 36 (fontified t face font-lock-string-face) 36 39 (fontified t) 39 43 (fontified t face font-lock-string-face) 43 44 (fontified t syntax-table #2# face font-lock-string-face) 44 45 (fontified t face font-lock-string-face) 45 48 (fontified t) 48 62 (fontified t face font-lock-string-face) 62 64 (fontified t) 64 77 (fontified t) 77 81 (fontified t face font-lock-constant-face) 81 103 (fontified t) 103 107 (fontified t face font-lock-constant-face) 107 126 (fontified t) 126 131 (fontified t face font-lock-type-face) 131 133 (fontified t) 133 140 (fontified t face font-lock-type-face) 140 169 (fontified t) 169 173 (fontified t face font-lock-constant-face) 173 194 (fontified t) 194 199 (fontified t face font-lock-type-face) 199 201 (fontified t) 201 208 (fontified t face font-lock-type-face) 208 225 (fontified t) 225 229 (fontified t face font-lock-variable-name-face) 229 231 (fontified t) 231 235 (fontified t face font-lock-type-face) 235 293 (fontified t) 293 294 (fontified t)) . 791) (undo-tree-id754 . -214) (undo-tree-id755 . -3) (undo-tree-id756 . -214) (undo-tree-id757 . -214) (undo-tree-id758 . -3) (undo-tree-id759 . -2) (undo-tree-id760 . -3) (undo-tree-id761 . -3) (undo-tree-id762 . -9) (undo-tree-id763 . -10) (undo-tree-id764 . -9) (undo-tree-id765 . -63) (undo-tree-id766 . -294) (undo-tree-id767 . -3) (undo-tree-id768 . -3) (undo-tree-id769 . -3) (undo-tree-id770 . -214) (undo-tree-id771 . -67) (undo-tree-id772 . -3) (undo-tree-id773 . -93) (undo-tree-id774 . -67) (undo-tree-id775 . -146) (undo-tree-id776 . -93) (undo-tree-id777 . -214) (undo-tree-id778 . -146) (undo-tree-id779 . -10) (undo-tree-id780 . -11) 1005) nil (23752 26770 405218 643000) 0 nil]) ((#(" let user_timeline_notifications =" 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 32 (fontified t face font-lock-variable-name-face) 32 34 (fontified t)) . 794) (undo-tree-id781 . -2) (undo-tree-id782 . -1) (undo-tree-id783 . -4)) nil (23752 26770 405230 871000) 0 nil]) ((#("    " 0 4 (fontified nil)) . 788) (788 . 792) (787 . 789) (786 . 788) (#("{" 0 1 (fontified nil)) . -786) (786 . 787)) nil (23752 26770 405237 379000) 0 nil]) ((nil rear-nonsticky nil 785 . 786) (nil fontified nil 725 . 786) (725 . 786) 724) nil (23752 26770 405242 779000) 0 nil]) ((#("()" 0 2 (fontified t)) . 725) (undo-tree-id784 . -1) (undo-tree-id785 . -1) 726 (#(" " 0 1 (fontified t)) . -727) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (#("-" 0 1 (fontified t)) . -728) (undo-tree-id788 . -1) (#(">" 0 1 (fontified t syntax-table #1#)) . -729) (undo-tree-id789 . -1) (#(" " 0 1 (fontified t)) . -730) (undo-tree-id790 . -1) 731 (729 . 731) (#(" " 0 1 (fontified nil)) . -729) (729 . 730) (#(">" 0 1 (fontified nil syntax-table #1#)) . -729) (729 . 730) (#("0" 0 1 (fontified t)) . -729) (undo-tree-id791 . -1) 730 (#(">" 0 1 (fontified nil syntax-table #1#)) . -730) (730 . 731) (#(" " 0 1 (fontified nil)) . -730) (730 . 731) (#(">" 0 1 (fontified nil syntax-table #1#)) . -730) (728 . 731) (#("=" 0 1 (fontified t)) . -728) (undo-tree-id792 . -1) (undo-tree-id793 . -1) 729 (727 . 729) (#(")" 0 1 (fontified nil)) . 727) (726 . 727) (725 . 727) (#("(" 0 1 (fontified nil face font-lock-function-name-face)) . -725) (725 . 726) (#(" " 0 1 (fontified t)) . -725) (undo-tree-id794 . -1) 726 (712 . 726) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -712) (undo-tree-id795 . -1) (undo-tree-id796 . -1) 713 (711 . 713) (700 . 711) (699 . 700) 606) nil (23752 26770 405291 851000) 0 nil]) ((nil rear-nonsticky nil 605 . 606) (#("
" 0 1 (fontified nil)) . -1027) (601 . 1028)) nil (23752 26770 405306 944000) 0 nil]) ((600 . 601) 600) nil (23752 26770 405310 519000) 0 nil] [nil ([nil nil ((#("p" 0 1 (fontified t)) . -699) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (#("u" 0 1 (fontified t)) . -700) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (#("v" 0 1 (fontified t)) . -701) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) 702 (699 . 702) (#("l" 0 1 (fontified t)) . -699) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) 700 (699 . 700) (699 . 700) 703 (t 23752 26674 551473 529000)) ((#("
" 0 1 (fontified nil)) . 699) (undo-tree-id552 . 1) (#("l" 0 1 (fontified nil)) . 699) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (699 . 700) (#("puv" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 699) (undo-tree-id557 . -3) (undo-tree-id558 . -1) (undo-tree-id559 . -2) (undo-tree-id560 . -1) (undo-tree-id561 . -3) (undo-tree-id562 . -2) (undo-tree-id563 . -2) (undo-tree-id564 . -2) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (699 . 702)) (23752 26693 377972 94000) 0 nil]) ((nil rear-nonsticky nil 604 . 605) (#("
" 0 1 (fontified nil)) . -1026) (600 . 1027)) ((#("
    // GET /api/v1/streaming/user/notification                     [private; notification filter]
    let user_timeline_notifications = path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user.with_notification_filter()));
" 0 1 (fontified t) 1 4 (fontified nil) 4 5 (fontified nil rear-nonsticky nil) 5 8 (fontified nil face font-lock-comment-delimiter-face) 8 99 (fontified nil face font-lock-comment-face) 99 103 (fontified t) 103 106 (fontified t face font-lock-keyword-face) 106 107 (fontified t) 107 134 (fontified t face font-lock-variable-name-face) 134 137 (fontified t) 137 142 (fontified t face font-lock-preprocessor-face) 142 143 (fontified t) 143 148 (fontified t face font-lock-string-face) 148 151 (fontified t) 151 155 (fontified t face font-lock-string-face) 155 158 (fontified t) 158 169 (fontified t face font-lock-string-face) 169 172 (fontified t) 172 176 (fontified t face font-lock-string-face) 176 177 (fontified t syntax-table #2# face font-lock-string-face) 177 178 (fontified t face font-lock-string-face) 178 181 (fontified t) 181 195 (fontified t face font-lock-string-face) 195 197 (fontified t) 197 210 (fontified t) 210 214 (fontified t face font-lock-constant-face) 214 236 (fontified t) 236 240 (fontified t face font-lock-constant-face) 240 259 (fontified t) 259 264 (fontified t face font-lock-type-face) 264 266 (fontified t) 266 273 (fontified t face font-lock-type-face) 273 302 (fontified t) 302 306 (fontified t face font-lock-constant-face) 306 327 (fontified t) 327 332 (fontified t face font-lock-type-face) 332 334 (fontified t) 334 341 (fontified t face font-lock-type-face) 341 344 (fontified t) 344 358 (fontified nil) 358 362 (fontified nil face font-lock-variable-name-face) 362 364 (fontified nil) 364 368 (fontified nil face font-lock-type-face) 368 426 (fontified nil) 426 427 (fontified nil)) . 600) (undo-tree-id567 . -426) (undo-tree-id568 . -1) (undo-tree-id569 . -426) (undo-tree-id570 . 328) (undo-tree-id571 . -99) (undo-tree-id572 . -103) (undo-tree-id573 . -99) (undo-tree-id574 . -99) (undo-tree-id575 . -99) (undo-tree-id576 . -99) (undo-tree-id577 . -103) (undo-tree-id578 . -99) (undo-tree-id579 . -99) (undo-tree-id580 . -99) (undo-tree-id581 . -99) (undo-tree-id582 . -99) (undo-tree-id583 . -99) (undo-tree-id584 . -99) (undo-tree-id585 . -99) (undo-tree-id586 . -99) (undo-tree-id587 . -99) (undo-tree-id588 . -99) (undo-tree-id589 . -99) (undo-tree-id590 . -103) (undo-tree-id591 . -106) (undo-tree-id592 . -99) (undo-tree-id593 . -99) (undo-tree-id594 . -103) (undo-tree-id595 . -106) (undo-tree-id596 . -99) (undo-tree-id597 . -99) (undo-tree-id598 . -103) (undo-tree-id599 . -99) (undo-tree-id600 . -99) (undo-tree-id601 . -100) (undo-tree-id602 . -201) (undo-tree-id603 . -204) (undo-tree-id604 . -101) (undo-tree-id605 . -102) (undo-tree-id606 . -201) (undo-tree-id607 . -204) (undo-tree-id608 . -103) (undo-tree-id609 . -103) (undo-tree-id610 . -103) (undo-tree-id611 . -103) (undo-tree-id612 . -201) (undo-tree-id613 . -204) (undo-tree-id614 . -103) (undo-tree-id615 . -106) (undo-tree-id616 . -103) (undo-tree-id617 . -106) (undo-tree-id618 . -103) (undo-tree-id619 . -106) (1026 . 1027) (nil rear-nonsticky t 604 . 605) (t 23752 26674 551473 529000)) (23752 26693 421246 322000) 0 nil]) ((183 . 184) 183) nil (23752 26694 35260 375000) 0 nil]) ((#("  " 0 2 (fontified t)) . -184)) nil (23752 26674 543238 539000) 0 nil]) ((#("    " 0 3 (fontified nil) 3 4 (fontified nil rear-nonsticky t)) . -186) (undo-tree-id522 . -4) (184 . 186) 188) nil (23752 26674 543248 389000) 0 nil]) ((nil rear-nonsticky nil 187 . 188) (#("
" 0 1 (face font-lock-comment-face fontified nil)) . -277) (183 . 278)) nil (23752 26674 543252 633000) 0 nil]) ((182 . 183) (t 23752 26597 95637 58000) 164) nil (23752 26674 543255 964000) 0 nil]) ((1 . 1782) (#("use crate::query;
use crate::user;
use crate::user::{Scope, User};
use warp::reject::Rejection;
use warp::{path, Filter};

#[allow(dead_code)]
type TimelineUser = ((String, User),);
pub fn user() -> impl Filter<Extract = TimelineUser, Error = Rejection> {

     path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user))
}

pub fn public() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| (\"public\".to_owned(), user.with_language_filter()))
}


pub fn hashtag() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| (format!(\"hashtag:{}\", q.tag), User::public()))
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn public_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/public\")
            .filter(&public())
            .unwrap();

        assert_eq!(value.0, \"public\".to_string());
        assert_eq!(value.1, User::public().with_language_filter());
    }

    #[test]
    fn hashtag_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/hashtag?tag=a\")
            .filter(&hashtag())
            .unwrap();

        assert_eq!(value.0, \"hashtag:a\".to_string());
        assert_eq!(value.1, User::public());
    }

}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 17 (fontified t) 17 18 (fontified t) 18 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 27 (fontified t face font-lock-keyword-face) 27 34 (fontified t) 34 35 (fontified t) 35 38 (fontified t face font-lock-keyword-face) 38 39 (fontified t) 39 44 (fontified t face font-lock-keyword-face) 44 46 (fontified t) 46 50 (fontified t face font-lock-constant-face) 50 53 (fontified t) 53 58 (fontified t face font-lock-type-face) 58 60 (fontified t) 60 64 (fontified t face font-lock-type-face) 64 67 (fontified t) 67 70 (fontified t face font-lock-keyword-face) 70 71 (fontified t) 71 75 (fontified t face font-lock-constant-face) 75 77 (fontified t) 77 83 (fontified t face font-lock-constant-face) 83 85 (fontified t) 85 94 (fontified t face font-lock-type-face) 94 96 (fontified t) 96 99 (fontified t face font-lock-keyword-face) 99 100 (fontified t) 100 104 (fontified t face font-lock-constant-face) 104 113 (fontified t) 113 119 (fontified t face font-lock-type-face) 119 123 (fontified t) 123 142 (fontified t face font-lock-preprocessor-face) 142 143 (fontified t) 143 147 (fontified t face font-lock-keyword-face) 147 148 (fontified t) 148 160 (fontified t face font-lock-type-face) 160 165 (fontified t) 165 171 (fontified t face font-lock-type-face) 171 173 (fontified t) 173 177 (fontified t face font-lock-type-face) 177 181 (fontified t) 181 182 (fontified t) 182 185 (fontified t face font-lock-keyword-face) 185 186 (fontified t) 186 188 (fontified t face font-lock-keyword-face) 188 189 (fontified t) 189 193 (fontified t face font-lock-function-name-face) 193 197 (fontified t) 197 198 (fontified t syntax-table #1#) 198 199 (fontified t) 199 203 (fontified t face font-lock-keyword-face) 203 204 (fontified t) 204 210 (fontified t face font-lock-type-face) 210 211 (fontified t) 211 218 (fontified t face font-lock-type-face) 218 221 (fontified t) 221 233 (fontified t face font-lock-type-face) 233 235 (fontified t) 235 240 (fontified t face font-lock-type-face) 240 243 (fontified t) 243 252 (fontified t face font-lock-type-face) 252 254 (fontified t) 254 256 (fontified t) 256 257 (fontified t) 257 260 (fontified t) 260 261 (rear-nonsticky t fontified t) 261 262 (fontified t rear-nonsticky t) 262 267 (fontified t face font-lock-preprocessor-face) 267 268 (fontified t) 268 273 (fontified t face font-lock-string-face) 273 276 (fontified t) 276 280 (fontified t face font-lock-string-face) 280 283 (fontified t) 283 294 (fontified t face font-lock-string-face) 294 297 (fontified t) 297 301 (fontified t face font-lock-string-face) 301 302 (fontified t syntax-table #2# face font-lock-string-face) 302 303 (fontified t face font-lock-string-face) 303 304 (fontified t) 304 305 (fontified t) 305 318 (fontified t) 318 322 (fontified t face font-lock-constant-face) 322 344 (fontified t) 344 348 (fontified t face font-lock-constant-face) 348 367 (fontified t) 367 372 (fontified t face font-lock-type-face) 372 374 (fontified t) 374 381 (fontified t face font-lock-type-face) 381 410 (fontified t) 410 414 (fontified t face font-lock-constant-face) 414 435 (fontified t) 435 440 (fontified t face font-lock-type-face) 440 442 (fontified t) 442 445 (fontified t face font-lock-type-face) 445 449 (fontified t face font-lock-type-face) 449 452 (fontified t) 452 466 (fontified t) 466 470 (fontified t face font-lock-variable-name-face) 470 472 (fontified t) 472 476 (fontified t face font-lock-type-face) 476 506 (fontified t) 506 507 (fontified t) 507 508 (fontified t) 508 509 (fontified t) 509 510 (fontified t) 510 513 (fontified t face font-lock-keyword-face) 513 514 (fontified t) 514 516 (fontified t face font-lock-keyword-face) 516 517 (fontified t) 517 523 (fontified t face font-lock-function-name-face) 523 527 (fontified t) 527 528 (syntax-table #1# fontified t) 528 529 (fontified t) 529 533 (fontified t face font-lock-keyword-face) 533 534 (fontified t) 534 540 (fontified t face font-lock-type-face) 540 541 (fontified t) 541 548 (fontified t face font-lock-type-face) 548 551 (fontified t) 551 563 (fontified t face font-lock-type-face) 563 565 (fontified t) 565 570 (fontified t face font-lock-type-face) 570 573 (fontified t) 573 582 (fontified t face font-lock-type-face) 582 583 (fontified t) 583 590 (fontified t) 590 595 (fontified t face font-lock-preprocessor-face) 595 596 (fontified t) 596 601 (fontified t face font-lock-string-face) 601 604 (fontified t) 604 608 (fontified t face font-lock-string-face) 608 611 (fontified t) 611 622 (fontified t face font-lock-string-face) 622 625 (fontified t) 625 633 (fontified t face font-lock-string-face) 633 648 (fontified t) 648 652 (fontified t face font-lock-constant-face) 652 674 (fontified t) 674 678 (fontified t face font-lock-constant-face) 678 697 (fontified t) 697 701 (fontified t face font-lock-constant-face) 701 703 (fontified t) 703 708 (fontified t face font-lock-type-face) 708 710 (fontified t) 710 716 (fontified t face font-lock-type-face) 716 739 (fontified t) 739 745 (fontified t) 745 749 (fontified t face font-lock-constant-face) 749 770 (fontified t) 770 775 (fontified t face font-lock-type-face) 775 777 (fontified t) 777 783 (fontified t face font-lock-type-face) 783 786 (fontified t) 786 800 (fontified t) 800 804 (fontified t face font-lock-variable-name-face) 804 806 (fontified t) 806 810 (fontified t face font-lock-type-face) 810 813 (fontified t) 813 821 (fontified t face font-lock-string-face) 821 845 (fontified t) 845 861 (fontified t) 861 864 (fontified t) 864 865 (fontified t) 865 866 (fontified t) 866 867 (fontified t) 867 868 (fontified t) 868 871 (fontified t face font-lock-keyword-face) 871 872 (fontified t) 872 874 (fontified t face font-lock-keyword-face) 874 875 (fontified t) 875 882 (fontified t face font-lock-function-name-face) 882 886 (fontified t) 886 887 (syntax-table #1# fontified t) 887 888 (fontified t) 888 892 (fontified t face font-lock-keyword-face) 892 893 (fontified t) 893 899 (fontified t face font-lock-type-face) 899 900 (fontified t) 900 907 (fontified t face font-lock-type-face) 907 910 (fontified t) 910 922 (fontified t face font-lock-type-face) 922 924 (fontified t) 924 929 (fontified t face font-lock-type-face) 929 932 (fontified t) 932 941 (fontified t face font-lock-type-face) 941 949 (fontified t) 949 954 (fontified t face font-lock-preprocessor-face) 954 955 (fontified t) 955 960 (fontified t face font-lock-string-face) 960 963 (fontified t) 963 967 (fontified t face font-lock-string-face) 967 970 (fontified t) 970 981 (fontified t face font-lock-string-face) 981 984 (fontified t) 984 993 (fontified t face font-lock-string-face) 993 1007 (fontified t) 1007 1008 (fontified t) 1008 1009 (face font-lock-constant-face fontified t) 1009 1012 (face font-lock-constant-face fontified t) 1012 1023 (fontified t) 1023 1036 (fontified t) 1036 1040 (fontified t face font-lock-constant-face) 1040 1063 (fontified t) 1063 1064 (fontified t face font-lock-variable-name-face) 1064 1066 (fontified t) 1066 1071 (fontified t face font-lock-constant-face) 1071 1073 (fontified t) 1073 1080 (fontified t face font-lock-type-face) 1080 1083 (fontified t) 1083 1090 (fontified t face rust-builtin-formatting-macro-face) 1090 1091 (fontified t) 1091 1100 (fontified t face font-lock-string-face) 1100 1102 (fontified t face rust-string-interpolation-face) 1102 1103 (fontified t face font-lock-string-face) 1103 1113 (fontified t) 1113 1117 (fontified t face font-lock-type-face) 1117 1133 (fontified t) 1133 1145 (fontified t face font-lock-preprocessor-face) 1145 1146 (fontified t) 1146 1149 (fontified t face font-lock-keyword-face) 1149 1150 (fontified t) 1150 1155 (fontified t face font-lock-constant-face) 1155 1162 (fontified t) 1162 1165 (fontified t face font-lock-keyword-face) 1165 1166 (fontified t) 1166 1171 (fontified t face font-lock-keyword-face) 1171 1181 (fontified t) 1181 1188 (fontified t face font-lock-preprocessor-face) 1188 1193 (fontified t) 1193 1195 (fontified t face font-lock-keyword-face) 1195 1196 (fontified t) 1196 1211 (fontified t face font-lock-function-name-face) 1211 1224 (fontified t) 1224 1227 (fontified t face font-lock-keyword-face) 1227 1228 (fontified t) 1228 1233 (fontified t face font-lock-variable-name-face) 1233 1236 (fontified t) 1236 1240 (fontified t face font-lock-constant-face) 1240 1242 (fontified t) 1242 1246 (fontified t face font-lock-constant-face) 1246 1276 (fontified t) 1276 1286 (fontified t face font-lock-string-face) 1286 1302 (fontified t face font-lock-string-face) 1302 1304 (fontified t) 1304 1364 (fontified t) 1364 1366 (fontified t) 1366 1367 (fontified t) 1367 1368 (fontified t face font-lock-preprocessor-face) 1368 1377 (fontified t face font-lock-preprocessor-face) 1377 1387 (fontified t) 1387 1395 (fontified t face font-lock-string-face) 1395 1410 (fontified t) 1410 1418 (fontified t) 1418 1428 (fontified t face font-lock-preprocessor-face) 1428 1438 (fontified t) 1438 1442 (fontified t face font-lock-type-face) 1442 1489 (fontified t) 1489 1496 (fontified t face font-lock-preprocessor-face) 1496 1501 (fontified t) 1501 1503 (fontified t face font-lock-keyword-face) 1503 1504 (fontified t) 1504 1520 (fontified t face font-lock-function-name-face) 1520 1523 (fontified t) 1523 1525 (fontified t) 1533 1536 (face font-lock-keyword-face) 1537 1542 (face font-lock-variable-name-face) 1545 1549 (face font-lock-constant-face) 1551 1555 (face font-lock-constant-face) 1585 1618 (face font-lock-string-face) 1684 1694 (face font-lock-preprocessor-face) 1704 1715 (face font-lock-string-face) 1738 1748 (face font-lock-preprocessor-face) 1758 1762 (face font-lock-type-face)) . 1) (undo-tree-id383 . -506) (undo-tree-id384 . -867) (undo-tree-id385 . -257) (undo-tree-id386 . -506) (undo-tree-id387 . 1278) (undo-tree-id388 . -867) (undo-tree-id389 . -867) (undo-tree-id390 . -867) (undo-tree-id391 . -867) (undo-tree-id392 . -509) (undo-tree-id393 . -509) (undo-tree-id394 . -509) (undo-tree-id395 . -509) (undo-tree-id396 . -509) (undo-tree-id397 . -509) (undo-tree-id398 . -505) (undo-tree-id399 . -509) (undo-tree-id400 . 1275) (undo-tree-id401 . -509) (undo-tree-id402 . -509) (undo-tree-id403 . -509) (undo-tree-id404 . -509) (undo-tree-id405 . -509) (undo-tree-id406 . -509) (undo-tree-id407 . -507) (undo-tree-id408 . -509) (undo-tree-id409 . -596) (undo-tree-id410 . -597) (undo-tree-id411 . -254) (undo-tree-id412 . -255) (undo-tree-id413 . -256) (undo-tree-id414 . -507) (undo-tree-id415 . -262) (undo-tree-id416 . -256) (undo-tree-id417 . -310) (undo-tree-id418 . -262) (undo-tree-id419 . -336) (undo-tree-id420 . -310) (undo-tree-id421 . -389) (undo-tree-id422 . -336) (undo-tree-id423 . -457) (undo-tree-id424 . -389) (undo-tree-id425 . -199) (undo-tree-id426 . -203) (undo-tree-id427 . -199) (undo-tree-id428 . -253) (undo-tree-id429 . -506) (undo-tree-id430 . -457) (undo-tree-id431 . -506) (undo-tree-id432 . -506) (undo-tree-id433 . -505) (undo-tree-id434 . -506) (undo-tree-id435 . -505) (undo-tree-id436 . -506) (undo-tree-id437 . -505) (undo-tree-id438 . -506) (undo-tree-id439 . -505) (undo-tree-id440 . -506) (undo-tree-id441 . -302) (undo-tree-id442 . -303) (undo-tree-id443 . -302) (undo-tree-id444 . -303) (undo-tree-id445 . -505) (undo-tree-id446 . -506) (undo-tree-id447 . -505) (undo-tree-id448 . -506) (undo-tree-id449 . -504) (undo-tree-id450 . -505) (undo-tree-id451 . -497) (undo-tree-id452 . -498) (undo-tree-id453 . -496) (undo-tree-id454 . -497) (undo-tree-id455 . -478) (undo-tree-id456 . -479) (undo-tree-id457 . -464) (undo-tree-id458 . -465) (undo-tree-id459 . -505) (undo-tree-id460 . -505) (undo-tree-id461 . -596) (undo-tree-id462 . -597) (undo-tree-id463 . -504) (undo-tree-id464 . -505) (undo-tree-id465 . -497) (undo-tree-id466 . -498) (undo-tree-id467 . -496) (undo-tree-id468 . -497) (undo-tree-id469 . -478) (undo-tree-id470 . -479) (undo-tree-id471 . -464) (undo-tree-id472 . -465) (undo-tree-id473 . -596) (undo-tree-id474 . -597) (undo-tree-id475 . -504) (undo-tree-id476 . -505) (undo-tree-id477 . -497) (undo-tree-id478 . -498) (undo-tree-id479 . -496) (undo-tree-id480 . -497) (undo-tree-id481 . -478) (undo-tree-id482 . -479) (undo-tree-id483 . -464) (undo-tree-id484 . -465) (undo-tree-id485 . 1320) (undo-tree-id486 . -465) (undo-tree-id487 . 1319) (undo-tree-id488 . -505) (undo-tree-id489 . 1279) (undo-tree-id490 . -506) 506) nil (23752 26597 79747 454000) 0 nil]) ((#(";" 0 1 (fontified t)) . -507) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) 508) nil (23752 26597 79760 783000) 0 nil]) ((nil rear-nonsticky nil 262 . 263) (#("
" 0 1 (fontified nil)) . -508) (257 . 509)) nil (23752 26597 79763 618000) 0 nil]) ((#("     path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| (user.id.to_string(), user));
" 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t) 4 5 (fontified t) 5 10 (fontified t face font-lock-preprocessor-face) 10 11 (fontified t) 11 16 (fontified t face font-lock-string-face) 16 19 (fontified t) 19 23 (fontified t face font-lock-string-face) 23 26 (fontified t) 26 37 (fontified t face font-lock-string-face) 37 40 (fontified t) 40 44 (fontified t face font-lock-string-face) 44 45 (fontified t syntax-table #2# face font-lock-string-face) 45 46 (fontified t face font-lock-string-face) 46 47 (fontified t) 47 48 (fontified t) 48 61 (fontified t) 61 65 (fontified t face font-lock-constant-face) 65 87 (fontified t) 87 91 (fontified t face font-lock-constant-face) 91 110 (fontified t) 110 115 (fontified t face font-lock-type-face) 115 117 (fontified t) 117 124 (fontified t face font-lock-type-face) 124 153 (fontified t) 153 157 (fontified t face font-lock-constant-face) 157 178 (fontified t) 178 183 (fontified t face font-lock-type-face) 183 185 (fontified t) 185 188 (fontified t face font-lock-type-face) 188 192 (fontified t face font-lock-type-face) 192 195 (fontified t) 195 209 (fontified t) 209 213 (fontified t face font-lock-variable-name-face) 213 215 (fontified t) 215 219 (fontified t face font-lock-type-face) 219 250 (fontified t) 250 251 (fontified t)) . 260) (undo-tree-id495 . -199) (undo-tree-id496 . -250) (undo-tree-id497 . -4) (undo-tree-id498 . -4) (undo-tree-id499 . -4) (undo-tree-id500 . -4) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -199) (undo-tree-id504 . -10) (undo-tree-id505 . -11) (undo-tree-id506 . -10) (undo-tree-id507 . -47) (undo-tree-id508 . -4) (undo-tree-id509 . -199) (undo-tree-id510 . -251) (undo-tree-id511 . -4) (undo-tree-id512 . -199) (undo-tree-id513 . -199) (undo-tree-id514 . -131) 459) nil (23752 26597 79781 884000) 0 nil]) ((#("let user_timeline =" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 17 (fontified t face font-lock-variable-name-face) 17 19 (fontified t)) . 264)) nil (23752 26597 79784 472000) 0 nil]) ((#("    " 0 4 (fontified nil)) . 257) (257 . 261) (256 . 258) (255 . 257) (#("{" 0 1 (fontified nil)) . -255) (254 . 256) (#(">" 0 1 (fontified nil syntax-table #1#)) . 254) (246 . 254) (234 . 246) (222 . 234) (#("Time" 0 4 (fontified t face font-lock-type-face)) . -222) (undo-tree-id515 . -4) 226 (221 . 226) (215 . 221) (212 . 215) (211 . 213) (#("<" 0 1 (fontified nil face font-lock-type-face)) . -211) (198 . 212) (#(" " 0 1 (fontified nil)) . -198) (198 . 199) (#(">" 0 1 (fontified nil syntax-table #1#)) . -198) (196 . 199) (#(")" 0 1 (fontified nil)) . 196) (195 . 196) (194 . 196) (#("(" 0 1 (fontified nil face font-lock-function-name-face)) . -194) (194 . 195) (190 . 194) (#("s" 0 1 (fontified t face font-lock-function-name-face)) . -190) (undo-tree-id516 . -1) (#("u" 0 1 (fontified t face font-lock-function-name-face)) . -191) (undo-tree-id517 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -192) (undo-tree-id518 . -1) (#("r" 0 1 (fontified t face font-lock-function-name-face)) . -193) (undo-tree-id519 . -1) 194 (190 . 194) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -190) (undo-tree-id520 . -1) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -191) (undo-tree-id521 . -1) 192 (183 . 192) (183 . 184) 187) nil (23752 26597 79802 498000) 0 nil] [nil nil ((#("    " 0 4 (fontified t)) . -250) (undo-tree-id353 . -4) (undo-tree-id354 . -4) (undo-tree-id355 . -4) (undo-tree-id356 . -4) (undo-tree-id357 . -4) (undo-tree-id358 . -4) (undo-tree-id359 . -4) (undo-tree-id360 . -4) (undo-tree-id361 . -4) (undo-tree-id362 . -4) 254 (249 . 254) 187) ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 249) (undo-tree-id363 . -5) (undo-tree-id364 . -5) (undo-tree-id365 . -5) (undo-tree-id366 . -5) (undo-tree-id367 . -5) (undo-tree-id368 . -5) (undo-tree-id369 . -5) (undo-tree-id370 . -5) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (undo-tree-id378 . -1) (undo-tree-id379 . -5) (undo-tree-id380 . -5) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (250 . 254)) (23752 26546 987271 214000) 0 nil]) ((nil rear-nonsticky nil 186 . 187) (#("
" 0 1 (fontified nil)) . -452) (182 . 453) 144) nil (23752 26546 998854 635000) 0 nil]) ((540 . 541) (539 . 540) (t 23752 26512 766615 610000) 538) nil (23752 26546 987305 936000) 0 nil]) ((1 . 1456) (#("use crate::user::{Scope, User};
use crate::user;
use crate::query;
use warp::reject::Rejection;
use warp::{path, Filter};

#[allow(dead_code)]
type TimelineUser = ((String, User),);

pub fn public() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| (\"public\".to_owned(), user.with_language_filter()))
}
pub fn hashtag() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| (format!(\"hashtag:{}\", q.tag), User::public()))
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn public_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/public\")
            .filter(&public())
            .unwrap();

        assert_eq!(value.0, \"public\".to_string());
        assert_eq!(value.1, User::public().with_language_filter());
    }

    #[test]
    fn hashtag_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/hashtag?tag=a\")
            .filter(&hashtag())
            .unwrap();

        assert_eq!(value.0, \"hashtag:a\".to_string());
        assert_eq!(value.1, User::public());
    }

}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 11 (fontified t) 11 15 (fontified t face font-lock-constant-face) 15 17 (fontified t) 17 18 (fontified t) 18 23 (fontified t face font-lock-type-face) 23 25 (fontified t) 25 29 (fontified t face font-lock-type-face) 29 30 (fontified t) 30 31 (fontified t) 31 32 (fontified t) 32 35 (fontified t face font-lock-keyword-face) 35 36 (fontified t) 36 41 (fontified t face font-lock-keyword-face) 41 43 (fontified t) 43 47 (fontified t) 47 49 (fontified t) 49 52 (fontified t face font-lock-keyword-face) 52 53 (fontified t) 53 58 (fontified t face font-lock-keyword-face) 58 66 (fontified t) 66 67 (fontified t) 67 70 (fontified t face font-lock-keyword-face) 70 71 (fontified t) 71 75 (fontified t face font-lock-constant-face) 75 77 (fontified t) 77 83 (fontified t face font-lock-constant-face) 83 85 (fontified t) 85 94 (fontified t face font-lock-type-face) 94 96 (fontified t) 96 99 (fontified t face font-lock-keyword-face) 99 100 (fontified t) 100 104 (fontified t face font-lock-constant-face) 104 113 (fontified t) 113 119 (fontified t face font-lock-type-face) 119 121 (fontified t) 121 123 (fontified t) 123 142 (fontified t face font-lock-preprocessor-face) 142 143 (fontified t) 143 147 (fontified t face font-lock-keyword-face) 147 148 (fontified t) 148 160 (fontified t face font-lock-type-face) 160 165 (fontified t) 165 171 (fontified t face font-lock-type-face) 171 173 (fontified t) 173 177 (fontified t face font-lock-type-face) 177 183 (fontified t) 183 186 (fontified t face font-lock-keyword-face) 186 187 (fontified t) 187 189 (fontified t face font-lock-keyword-face) 189 190 (fontified t) 190 196 (fontified t face font-lock-function-name-face) 196 200 (fontified t) 200 201 (syntax-table #1# fontified t) 201 202 (fontified t) 202 206 (fontified t face font-lock-keyword-face) 206 207 (fontified t) 207 213 (fontified t face font-lock-type-face) 213 214 (fontified t) 214 221 (fontified t face font-lock-type-face) 221 224 (fontified t) 224 236 (fontified t face font-lock-type-face) 236 238 (fontified t) 238 243 (fontified t face font-lock-type-face) 243 246 (fontified t) 246 255 (fontified t face font-lock-type-face) 255 263 (fontified t) 263 268 (fontified t face font-lock-preprocessor-face) 268 269 (fontified t) 269 274 (fontified t face font-lock-string-face) 274 277 (fontified t) 277 281 (fontified t face font-lock-string-face) 281 284 (fontified t) 284 295 (fontified t face font-lock-string-face) 295 298 (fontified t) 298 306 (fontified t face font-lock-string-face) 306 321 (fontified t) 321 325 (fontified t face font-lock-constant-face) 325 347 (fontified t) 347 351 (fontified t face font-lock-constant-face) 351 370 (fontified t) 370 374 (fontified t face font-lock-constant-face) 374 376 (fontified t) 376 381 (fontified t face font-lock-type-face) 381 383 (fontified t) 383 389 (fontified t face font-lock-type-face) 389 418 (fontified t) 418 422 (fontified t face font-lock-constant-face) 422 443 (fontified t) 443 448 (fontified t face font-lock-type-face) 448 450 (fontified t) 450 456 (fontified t face font-lock-type-face) 456 473 (fontified t) 473 477 (fontified t face font-lock-variable-name-face) 477 479 (fontified t) 479 483 (fontified t face font-lock-type-face) 483 486 (fontified t) 486 494 (fontified t face font-lock-string-face) 494 532 (fontified t) 532 537 (fontified t) 537 539 (fontified t) 539 542 (fontified t face font-lock-keyword-face) 542 543 (fontified t) 543 545 (fontified t face font-lock-keyword-face) 545 546 (fontified t) 546 549 (fontified t face font-lock-function-name-face) 549 553 (fontified t face font-lock-function-name-face) 553 557 (fontified t) 557 558 (fontified t syntax-table #1#) 558 559 (fontified t) 559 563 (fontified t face font-lock-keyword-face) 563 564 (fontified t) 564 567 (fontified t face font-lock-type-face) 567 570 (fontified t face font-lock-type-face) 570 571 (fontified t) 571 578 (fontified t face font-lock-type-face) 578 581 (fontified t) 581 593 (fontified t face font-lock-type-face) 593 595 (fontified t) 595 596 (fontified t face font-lock-type-face) 596 600 (fontified t face font-lock-type-face) 600 603 (fontified t) 603 612 (fontified t face font-lock-type-face) 612 616 (fontified t) 616 620 (fontified t) 620 621 (fontified t face font-lock-preprocessor-face) 621 625 (fontified t face font-lock-preprocessor-face) 625 626 (fontified t) 626 631 (fontified t face font-lock-string-face) 631 634 (fontified t) 634 638 (fontified t face font-lock-string-face) 638 641 (fontified t) 641 652 (fontified t face font-lock-string-face) 652 655 (fontified t) 655 664 (fontified t face font-lock-string-face) 664 666 (fontified t) 666 679 (fontified t) 679 683 (fontified t face font-lock-constant-face) 683 707 (fontified t) 707 711 (fontified t face font-lock-constant-face) 711 734 (fontified t) 734 735 (fontified t face font-lock-variable-name-face) 735 737 (fontified t) 737 742 (fontified t face font-lock-constant-face) 742 744 (fontified t) 744 751 (fontified t face font-lock-type-face) 751 754 (fontified t) 754 761 (fontified t face rust-builtin-formatting-macro-face) 761 762 (fontified t) 762 771 (fontified t face font-lock-string-face) 771 773 (fontified t face rust-string-interpolation-face) 773 774 (fontified t face font-lock-string-face) 774 784 (fontified t) 784 788 (fontified t face font-lock-type-face) 788 804 (fontified t) 804 816 (fontified t face font-lock-preprocessor-face) 816 817 (fontified t) 817 820 (fontified t face font-lock-keyword-face) 820 821 (fontified t) 821 826 (fontified t face font-lock-constant-face) 826 833 (fontified t) 833 836 (fontified t face font-lock-keyword-face) 836 837 (fontified t) 837 842 (fontified t face font-lock-keyword-face) 842 852 (fontified t) 852 859 (fontified t face font-lock-preprocessor-face) 859 864 (fontified t) 864 866 (fontified t face font-lock-keyword-face) 866 867 (fontified t) 867 882 (fontified t face font-lock-function-name-face) 882 895 (fontified t) 895 898 (fontified t face font-lock-keyword-face) 898 899 (fontified t) 899 904 (fontified t face font-lock-variable-name-face) 904 907 (fontified t) 907 911 (fontified t face font-lock-constant-face) 911 913 (fontified t) 913 917 (fontified t face font-lock-constant-face) 917 947 (fontified t) 947 973 (fontified t face font-lock-string-face) 973 1037 (fontified t) 1037 1038 (fontified t) 1038 1048 (face font-lock-preprocessor-face fontified t) 1048 1058 (fontified t) 1058 1066 (face font-lock-string-face fontified t) 1066 1081 (fontified t) 1081 1089 (fontified t) 1089 1099 (fontified t face font-lock-preprocessor-face) 1099 1109 (fontified t) 1109 1113 (fontified t face font-lock-type-face) 1113 1116 (fontified t) 1116 1149 (fontified t) 1149 1160 (fontified t) 1160 1166 (fontified t face font-lock-preprocessor-face) 1166 1167 (fontified t face font-lock-preprocessor-face) 1167 1168 (fontified t) 1168 1172 (fontified t) 1172 1174 (fontified t face font-lock-keyword-face) 1174 1175 (fontified t) 1175 1191 (fontified t face font-lock-function-name-face) 1191 1204 (fontified t) 1204 1207 (fontified t face font-lock-keyword-face) 1207 1208 (fontified t) 1208 1213 (fontified t face font-lock-variable-name-face) 1213 1216 (fontified t) 1216 1220 (fontified t face font-lock-constant-face) 1220 1222 (fontified t) 1222 1226 (fontified t face font-lock-constant-face) 1226 1256 (fontified t) 1256 1289 (fontified t face font-lock-string-face) 1289 1355 (fontified t) 1355 1365 (fontified t face font-lock-preprocessor-face) 1365 1375 (fontified t) 1375 1386 (fontified t face font-lock-string-face) 1386 1409 (fontified t) 1409 1419 (fontified t face font-lock-preprocessor-face) 1419 1429 (fontified t) 1429 1433 (fontified t face font-lock-type-face) 1433 1455 (fontified t)) . 1) (undo-tree-id183 . -117) (undo-tree-id184 . -117) (undo-tree-id185 . 1430) (undo-tree-id186 . -117) (undo-tree-id187 . -122) (undo-tree-id188 . -117) (undo-tree-id189 . -117) (undo-tree-id190 . -19) (undo-tree-id191 . -19) (undo-tree-id192 . -20) (undo-tree-id193 . -19) (undo-tree-id194 . -20) (undo-tree-id195 . -21) (undo-tree-id196 . -21) (undo-tree-id197 . -21) (undo-tree-id198 . -21) (undo-tree-id199 . -21) (undo-tree-id200 . -21) (undo-tree-id201 . -21) (undo-tree-id202 . -21) (undo-tree-id203 . -21) (undo-tree-id204 . -21) (undo-tree-id205 . -21) (undo-tree-id206 . -21) (undo-tree-id207 . -21) (undo-tree-id208 . -21) (undo-tree-id209 . -21) (undo-tree-id210 . -21) (undo-tree-id211 . -21) (undo-tree-id212 . -21) (undo-tree-id213 . -21) (undo-tree-id214 . -21) (undo-tree-id215 . -21) (undo-tree-id216 . -21) (undo-tree-id217 . -21) (undo-tree-id218 . -21) (undo-tree-id219 . -21) (undo-tree-id220 . -21) (undo-tree-id221 . -21) (undo-tree-id222 . -21) (undo-tree-id223 . -21) (undo-tree-id224 . -21) (undo-tree-id225 . -21) (undo-tree-id226 . -21) (undo-tree-id227 . -21) (undo-tree-id228 . -21) (undo-tree-id229 . -21) (undo-tree-id230 . -21) (undo-tree-id231 . -21) (undo-tree-id232 . -21) (undo-tree-id233 . -21) (undo-tree-id234 . -21) (undo-tree-id235 . -21) (undo-tree-id236 . -21) (undo-tree-id237 . -21) (undo-tree-id238 . -47) (undo-tree-id239 . -21) (undo-tree-id240 . -21) (undo-tree-id241 . -18) (undo-tree-id242 . -21) (undo-tree-id243 . -18) (undo-tree-id244 . -21) (undo-tree-id245 . -18) (undo-tree-id246 . -21) (undo-tree-id247 . -479) (undo-tree-id248 . -483) (undo-tree-id249 . -173) (undo-tree-id250 . -177) (undo-tree-id251 . -1429) (undo-tree-id252 . -1433) (undo-tree-id253 . -1109) (undo-tree-id254 . -1113) (undo-tree-id255 . -784) (undo-tree-id256 . -788) (undo-tree-id257 . -443) (undo-tree-id258 . -448) (undo-tree-id259 . -18) (undo-tree-id260 . -21) (undo-tree-id261 . -18) (undo-tree-id262 . -26) (undo-tree-id263 . -443) (undo-tree-id264 . -448) (undo-tree-id265 . -784) (undo-tree-id266 . -788) (undo-tree-id267 . -1109) (undo-tree-id268 . -1113) (undo-tree-id269 . -1429) (undo-tree-id270 . -1433) (undo-tree-id271 . -173) (undo-tree-id272 . -177) (undo-tree-id273 . -479) (undo-tree-id274 . -483) (undo-tree-id275 . -18) (undo-tree-id276 . -26) (undo-tree-id277 . -21) (undo-tree-id278 . -21) (undo-tree-id279 . -21) (undo-tree-id280 . -21) (undo-tree-id281 . -21) (undo-tree-id282 . -21) (undo-tree-id283 . -22) (undo-tree-id284 . -21) (undo-tree-id285 . -23) (undo-tree-id286 . -22) (undo-tree-id287 . -24) (undo-tree-id288 . -23) (undo-tree-id289 . -25) (undo-tree-id290 . -24) (undo-tree-id291 . -24) (undo-tree-id292 . -24) (undo-tree-id293 . -47) (undo-tree-id294 . -24) (undo-tree-id295 . -43) (undo-tree-id296 . -47) (undo-tree-id297 . -11) (undo-tree-id298 . -15) (undo-tree-id299 . -36) (undo-tree-id300 . -41) (undo-tree-id301 . -347) (undo-tree-id302 . -351) (undo-tree-id303 . -370) (undo-tree-id304 . -374) (undo-tree-id305 . -418) (undo-tree-id306 . -422) (undo-tree-id307 . -47) (undo-tree-id308 . -47) 48) nil (23752 26512 761053 511000) 0 nil]) ((22 . 26) (#("[]" 0 1 (fontified t) 1 2 (fontified t)) . 22) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (undo-tree-id333 . -1) (undo-tree-id334 . -1) 23 (#("e" 0 1 (fontified t)) . -23) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) 24 (23 . 24) (22 . 24) (#("[" 0 1 (fontified nil face font-lock-type-face)) . -22) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (22 . 23) (#("v" 0 1 (fontified t face font-lock-type-face)) . -22) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -23) (undo-tree-id351 . -1) (undo-tree-id352 . -1) 24 (21 . 24) (19 . 21) (23 . 24) (#("}" 0 1 (fontified t)) . -19) (18 . 20) (#("{" 0 1 (fontified nil)) . -18) (18 . 19)) nil (23752 26512 761111 465000) 0 nil] [nil nil ((41 . 46) (39 . 41)) ((#("::" 0 2 (fontified nil)) . 39) (undo-tree-id169 . -2) (undo-tree-id170 . -2) (undo-tree-id171 . -2) (undo-tree-id172 . -2) (undo-tree-id173 . -2) (undo-tree-id174 . -2) (undo-tree-id175 . -2) (#("Scope" 0 5 (fontified t face font-lock-type-face)) . 41) (undo-tree-id176 . -4) (undo-tree-id177 . -4) (undo-tree-id178 . -3) (undo-tree-id179 . -5) (undo-tree-id180 . -4) (undo-tree-id181 . -4) (undo-tree-id182 . -4)) (23752 26501 226972 836000) 0 nil] [nil nil ((59 . 63) (58 . 59) 57) ((#("
" 0 1 (fontified t)) . 58) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (#("use " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 59) (undo-tree-id159 . -3) (undo-tree-id160 . -1) (undo-tree-id161 . -2) (undo-tree-id162 . -1) (undo-tree-id163 . -3) (undo-tree-id164 . -2) (undo-tree-id165 . -4) (undo-tree-id166 . -3) (undo-tree-id167 . -3) (undo-tree-id168 . -3)) (23752 26493 820024 685000) 0 nil]) ((41 . 58) (40 . 41) (28 . 40) (27 . 28) (#("r" 0 1 (fontified t)) . -27) (undo-tree-id140 . -1) 28 (24 . 28) (23 . 24) (t 23752 26450 364064 351000) 22) nil (23752 26501 231479 800000) 0 nil]) ((1 . 1412) (#("use warp::reject::Rejection;
use warp::{path, Filter};
use crate::user::User;

#[allow(dead_code)]
type TimelineUser = ((String, User),);

pub fn public() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| (\"public\".to_owned(), user.with_language_filter()))
}
pub fn hashtag() -> impl Filter<Extract = TimelineUser, Error = Rejection> {
    path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| (format!(\"hashtag:{}\", q.tag), User::public()))
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn public_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/public\")
            .filter(&public())
            .unwrap();

        assert_eq!(value.0, \"public\".to_string());
        assert_eq!(value.1, User::public().with_language_filter());
    }

    #[test]
    fn hashtag_timeline() {
        let value = warp::test::request()
            .path(\"/api/v1/streaming/hashtag?tag=a\")
            .filter(&hashtag())
            .unwrap();

        assert_eq!(value.0, \"hashtag:a\".to_string());
        assert_eq!(value.1, User::public());
    }

}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 10 (fontified t) 10 16 (fontified t face font-lock-constant-face) 16 18 (fontified t) 18 27 (fontified t face font-lock-type-face) 27 28 (fontified t) 28 29 (fontified t) 29 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 37 (fontified t face font-lock-constant-face) 37 39 (fontified t) 39 46 (fontified t) 46 52 (fontified t face font-lock-type-face) 52 53 (fontified t) 53 54 (fontified t) 54 55 (fontified t) 55 58 (fontified t face font-lock-keyword-face) 58 59 (fontified t) 59 64 (fontified t face font-lock-keyword-face) 64 66 (fontified t) 66 70 (fontified t face font-lock-constant-face) 70 72 (fontified t) 72 76 (fontified t face font-lock-type-face) 76 77 (fontified t) 77 78 (fontified t) 78 79 (fontified t) 79 98 (fontified t face font-lock-preprocessor-face) 98 99 (fontified t) 99 103 (fontified t face font-lock-keyword-face) 103 104 (fontified t) 104 116 (fontified t face font-lock-type-face) 116 121 (fontified t) 121 127 (fontified t face font-lock-type-face) 127 129 (fontified t) 129 133 (fontified t face font-lock-type-face) 133 138 (fontified t) 138 139 (fontified t) 139 142 (fontified t face font-lock-keyword-face) 142 143 (fontified t) 143 145 (fontified t face font-lock-keyword-face) 145 146 (fontified t) 146 152 (fontified t face font-lock-function-name-face) 152 156 (fontified t) 156 157 (syntax-table #1# fontified t) 157 158 (fontified t) 158 162 (fontified t face font-lock-keyword-face) 162 163 (fontified t) 163 169 (fontified t face font-lock-type-face) 169 170 (fontified t) 170 177 (fontified t face font-lock-type-face) 177 180 (fontified t) 180 192 (fontified t face font-lock-type-face) 192 194 (fontified t) 194 199 (fontified t face font-lock-type-face) 199 202 (fontified t) 202 211 (fontified t face font-lock-type-face) 211 214 (fontified t) 214 215 (fontified t) 215 219 (fontified t) 219 224 (fontified t face font-lock-preprocessor-face) 224 225 (fontified t) 225 230 (fontified t face font-lock-string-face) 230 233 (fontified t) 233 237 (fontified t face font-lock-string-face) 237 240 (fontified t) 240 251 (fontified t face font-lock-string-face) 251 254 (fontified t) 254 262 (fontified t face font-lock-string-face) 262 277 (fontified t) 277 281 (fontified t face font-lock-constant-face) 281 303 (fontified t) 303 307 (fontified t face font-lock-constant-face) 307 314 (fontified t) 314 326 (fontified t) 326 330 (fontified t face font-lock-constant-face) 330 332 (fontified t) 332 337 (fontified t face font-lock-type-face) 337 339 (fontified t) 339 345 (fontified t face font-lock-type-face) 345 348 (fontified t) 348 374 (fontified t) 374 378 (fontified t face font-lock-constant-face) 378 399 (fontified t) 399 404 (fontified t face font-lock-type-face) 404 406 (fontified t) 406 412 (fontified t face font-lock-type-face) 412 429 (fontified t) 429 433 (fontified t face font-lock-variable-name-face) 433 435 (fontified t) 435 439 (fontified t face font-lock-type-face) 439 442 (fontified t) 442 450 (fontified t face font-lock-string-face) 450 495 (fontified t) 495 498 (fontified t face font-lock-keyword-face) 498 499 (fontified t) 499 501 (fontified t face font-lock-keyword-face) 501 502 (fontified t) 502 509 (fontified t face font-lock-function-name-face) 509 513 (fontified t) 513 514 (syntax-table #1# fontified t) 514 515 (fontified t) 515 519 (fontified t face font-lock-keyword-face) 519 520 (fontified t) 520 526 (fontified t face font-lock-type-face) 526 527 (fontified t) 527 534 (fontified t face font-lock-type-face) 534 537 (fontified t) 537 541 (fontified t face font-lock-type-face) 541 549 (fontified t face font-lock-type-face) 549 551 (fontified t) 551 556 (fontified t face font-lock-type-face) 556 559 (fontified t) 559 562 (fontified t face font-lock-type-face) 562 568 (fontified t face font-lock-type-face) 568 569 (fontified t) 569 570 (fontified t) 570 572 (fontified t) 572 576 (fontified t) 576 578 (fontified t face font-lock-preprocessor-face) 578 581 (face font-lock-preprocessor-face fontified t) 581 582 (fontified t) 582 587 (face font-lock-string-face fontified t) 587 590 (fontified t) 590 591 (face font-lock-string-face fontified t) 591 594 (face font-lock-string-face fontified t) 594 597 (fontified t) 597 608 (face font-lock-string-face fontified t) 608 611 (fontified t) 611 620 (face font-lock-string-face fontified t) 620 622 (fontified t) 622 635 (fontified t) 635 639 (fontified t face font-lock-constant-face) 639 663 (fontified t) 663 667 (fontified t face font-lock-constant-face) 667 690 (fontified t) 690 691 (fontified t face font-lock-variable-name-face) 691 693 (fontified t) 693 698 (fontified t face font-lock-constant-face) 698 700 (fontified t) 700 707 (fontified t face font-lock-type-face) 707 710 (fontified t) 710 711 (fontified t face rust-builtin-formatting-macro-face) 711 717 (fontified t face rust-builtin-formatting-macro-face) 717 718 (fontified t) 718 727 (fontified t face font-lock-string-face) 727 729 (fontified t face rust-string-interpolation-face) 729 730 (fontified t face font-lock-string-face) 730 740 (fontified t) 740 744 (fontified t face font-lock-type-face) 744 757 (fontified t) 757 760 (fontified t) 760 772 (fontified t face font-lock-preprocessor-face) 772 773 (fontified t) 773 776 (fontified t face font-lock-keyword-face) 776 777 (fontified t) 777 782 (fontified t face font-lock-constant-face) 782 789 (fontified t) 789 792 (fontified t face font-lock-keyword-face) 792 793 (fontified t) 793 798 (fontified t face font-lock-keyword-face) 798 808 (fontified t) 808 815 (fontified t face font-lock-preprocessor-face) 815 820 (fontified t) 820 822 (fontified t face font-lock-keyword-face) 822 823 (fontified t) 823 825 (fontified t face font-lock-function-name-face) 825 838 (fontified t face font-lock-function-name-face) 838 843 (fontified t) 843 851 (fontified t) 851 854 (fontified t face font-lock-keyword-face) 854 855 (fontified t) 855 860 (fontified t face font-lock-variable-name-face) 860 863 (fontified t) 863 867 (fontified t face font-lock-constant-face) 867 869 (fontified t) 869 873 (fontified t face font-lock-constant-face) 873 903 (fontified t) 903 929 (fontified t face font-lock-string-face) 929 994 (fontified t) 994 1004 (fontified t face font-lock-preprocessor-face) 1004 1014 (fontified t) 1014 1022 (fontified t face font-lock-string-face) 1022 1045 (fontified t) 1045 1055 (fontified t face font-lock-preprocessor-face) 1055 1065 (fontified t) 1065 1069 (fontified t face font-lock-type-face) 1069 1072 (fontified t) 1072 1105 (fontified t) 1105 1116 (fontified t) 1116 1122 (fontified t face font-lock-preprocessor-face) 1122 1123 (face font-lock-preprocessor-face fontified t) 1123 1124 (fontified t) 1124 1128 (fontified t) 1128 1130 (fontified t face font-lock-keyword-face) 1130 1131 (fontified t) 1131 1147 (fontified t face font-lock-function-name-face) 1147 1160 (fontified t) 1160 1163 (fontified t face font-lock-keyword-face) 1163 1164 (fontified t) 1164 1169 (fontified t face font-lock-variable-name-face) 1169 1172 (fontified t) 1172 1176 (fontified t face font-lock-constant-face) 1176 1178 (fontified t) 1178 1182 (fontified t face font-lock-constant-face) 1182 1212 (fontified t) 1212 1245 (fontified t face font-lock-string-face) 1245 1257 (fontified t) 1257 1279 (fontified t) 1279 1311 (fontified t) 1311 1321 (fontified t face font-lock-preprocessor-face) 1321 1331 (fontified t) 1331 1342 (fontified t face font-lock-string-face) 1342 1343 (fontified t) 1343 1357 (fontified t) 1357 1365 (fontified t) 1365 1375 (fontified t face font-lock-preprocessor-face) 1375 1385 (fontified t) 1385 1389 (fontified t face font-lock-type-face) 1389 1409 (fontified t) 1409 1410 (fontified t) 1410 1411 (fontified t)) . 1) (undo-tree-id43 . -39) (undo-tree-id44 . -39) (undo-tree-id45 . -28) (undo-tree-id46 . -1410) (undo-tree-id47 . 1334) (undo-tree-id48 . -290) (undo-tree-id49 . -290) (undo-tree-id50 . -290) (undo-tree-id51 . -290) (undo-tree-id52 . -264) (undo-tree-id53 . -290) (undo-tree-id54 . -78) (undo-tree-id55 . -264) (undo-tree-id56 . -264) (undo-tree-id57 . -34) (undo-tree-id58 . -34) (undo-tree-id59 . -39) (undo-tree-id60 . -39) (undo-tree-id61 . -34) (undo-tree-id62 . -39) (undo-tree-id63 . -39) (undo-tree-id64 . -39) (undo-tree-id65 . -39) (undo-tree-id66 . -39) (undo-tree-id67 . -39) (undo-tree-id68 . -39) (undo-tree-id69 . -39) (undo-tree-id70 . -76) (undo-tree-id71 . -79) (undo-tree-id72 . -80) (undo-tree-id73 . -66) (undo-tree-id74 . -67) (undo-tree-id75 . -79) (undo-tree-id76 . -80) (undo-tree-id77 . -67) (undo-tree-id78 . -66) (undo-tree-id79 . -67) (undo-tree-id80 . -68) (undo-tree-id81 . -79) (undo-tree-id82 . -80) (undo-tree-id83 . -68) (undo-tree-id84 . -67) (undo-tree-id85 . -66) (undo-tree-id86 . -69) (undo-tree-id87 . -68) (undo-tree-id88 . -69) (undo-tree-id89 . -79) (undo-tree-id90 . -80) (undo-tree-id91 . -69) (undo-tree-id92 . -68) (undo-tree-id93 . -69) (undo-tree-id94 . -70) (undo-tree-id95 . -79) (undo-tree-id96 . -80) (undo-tree-id97 . -70) (undo-tree-id98 . -69) (undo-tree-id99 . -71) (undo-tree-id100 . -70) (undo-tree-id101 . -70) (undo-tree-id102 . -71) (undo-tree-id103 . -72) (undo-tree-id104 . -71) (undo-tree-id105 . -79) (undo-tree-id106 . -80) (undo-tree-id107 . -73) (undo-tree-id108 . -72) (undo-tree-id109 . -72) (undo-tree-id110 . -73) (undo-tree-id111 . -79) (undo-tree-id112 . -80) (undo-tree-id113 . -74) (undo-tree-id114 . -73) (undo-tree-id115 . -73) (undo-tree-id116 . -74) (undo-tree-id117 . -79) (undo-tree-id118 . -80) (undo-tree-id119 . -75) (undo-tree-id120 . -74) (undo-tree-id121 . -74) (undo-tree-id122 . -75) (undo-tree-id123 . -79) (undo-tree-id124 . -80) (undo-tree-id125 . -76) (undo-tree-id126 . -75) (undo-tree-id127 . -79) (undo-tree-id128 . -80) (undo-tree-id129 . -72) (undo-tree-id130 . -76) (undo-tree-id131 . -75) (undo-tree-id132 . -76) (undo-tree-id133 . -79) (undo-tree-id134 . -80) (undo-tree-id135 . -77) (undo-tree-id136 . -76) (undo-tree-id137 . -76) (undo-tree-id138 . -76) 77) nil (23752 26450 266820 649000) 0 nil]) ((67 . 78) (60 . 67) (#("u" 0 1 (fontified t face font-lock-constant-face)) . -60) (undo-tree-id139 . -1) 61 (56 . 61) (55 . 56) (t 23752 26439 154210 618000) 46) nil (23752 26450 266835 690000) 0 nil]) ((41 . 47) (#("i" 0 1 (fontified t)) . -41) (undo-tree-id40 . -1) 42 (41 . 42) (47 . 48) (#("}" 0 1 (fontified t)) . -41) (40 . 42) (#("{" 0 1 (fontified nil)) . -40) (40 . 41)) nil (23752 26439 147192 298000) 0 nil]) ((#("filters::" 0 7 (fontified t face font-lock-constant-face) 7 9 (fontified t)) . 40)) nil (23752 26439 147197 263000) 0 nil]) ((#("Warp" 0 4 (fontified t face font-lock-type-face)) . 499)) nil (23752 26439 147199 183000) 0 nil]) ((#("Warp" 0 4 (fontified t face font-lock-type-face)) . 142)) nil (23752 26439 147200 614000) 0 nil]) ((50 . 56) (47 . 50) (40 . 47) (#("f" 0 1 (fontified t)) . -40) (undo-tree-id41 . -1) 41 (35 . 41) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -35) (undo-tree-id42 . -1) 36 (34 . 36)) nil (23752 26439 147206 896000) 0 nil]) ((30 . 34) (29 . 30) 1) nil (23752 26439 147209 735000) 0 nil]) ((30 . 31)) nil (23752 26439 147211 337000) 0 nil] [nil nil ((49 . 50) 30) ((#("
" 0 1 (fontified t)) . 49) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1)) (23752 26342 764926 64000) 0 nil]) ((1 . 30)) nil (23752 26342 767179 590000) 0 nil]) ((#("use warp::reject::Rejection;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 10 (fontified t) 10 16 (fontified t face font-lock-constant-face) 16 18 (fontified t) 18 27 (fontified t face font-lock-type-face) 27 29 (fontified t)) . 60) (undo-tree-id17 . -29) (undo-tree-id18 . -29) (t 23752 26337 772289 952000)) nil (23752 26342 764944 291000) 0 nil]) ((1369 . 1370) 21) nil (23752 26337 766118 599000) 0 nil]) ((#("
" 0 1 (fontified t rear-nonsticky t)) . 1) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1)) nil (23752 26337 766142 254000) 0 nil]) ((nil rear-nonsticky nil 1 . 2) (#("
" 0 1 (fontified nil)) . -1370) (1 . 1371) (t . -1)) nil (23752 26337 766146 411000) 0 nil]) nil nil (23752 26337 766147 871000) 0 nil] #3# 58523 140 nil)