"2a03d6982e11cb170a51c81de756c1f12504c92c"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#4=[nil nil ((#("///     warp::serve(routes).run(([127, 0, 0, 1], 3030));
" 0 57 (fontified t face font-lock-doc-face)) . 15409) (undo-tree-id1143 . -57) (undo-tree-id1144 . -57) (undo-tree-id1145 . -57) (undo-tree-id1146 . -57) (undo-tree-id1147 . -57) (undo-tree-id1148 . -57) (undo-tree-id1149 . -57) (undo-tree-id1150 . -57) (undo-tree-id1151 . -57) (undo-tree-id1152 . -57) (undo-tree-id1153 . -57) (undo-tree-id1154 . -57) (undo-tree-id1155 . -57) (undo-tree-id1156 . -57) (undo-tree-id1157 . -57) (undo-tree-id1158 . -57) (undo-tree-id1159 . -57) (undo-tree-id1160 . -57) (undo-tree-id1161 . -57) (undo-tree-id1162 . -57) (undo-tree-id1163 . -57) (undo-tree-id1164 . -57) (undo-tree-id1165 . -57) (t 23733 11735 940949 18000)) nil (23733 12005 815425 729000) 0 nil]) ((14604 . 14606) (14602 . 14604)) nil (23733 11735 904587 964000) 0 nil]) (14605) nil (23733 11735 904595 510000) 0 nil]) ((14578 . 14582)) nil (23733 11735 904598 837000) 0 nil]) (14595) nil (23733 11735 904601 536000) 0 nil]) ((nil rear-nonsticky nil 14615 . 14616) (nil fontified nil 14546 . 14616) (14546 . 14616) 14545) nil (23733 11735 904605 563000) 0 nil]) ((14542 . 14546) (14541 . 14542) (t 23733 10094 218123 427000) 14540) nil (23733 11735 904609 909000) 0 nil]) ((1 . 20597) (#("//! Server-Sent Events (SSE)
//!
//! # Example
//!
//! ```
//! # extern crate futures;
//! # extern crate warp;
//!
//! use std::time::Duration;
//! use futures::stream::iter_ok;
//! use warp::{Filter, sse::ServerSentEvent};
//!
//! let app = warp::path(\"push-notifications\").and(warp::sse()).map(|sse: warp::sse::Sse| {
//!     let events = iter_ok::<_, ::std::io::Error>(vec![
//!         warp::sse::data(\"unnamed event\").into_a(),
//!         (
//!             warp::sse::event(\"chat\"),
//!             warp::sse::data(\"chat message\"),
//!         ).into_a().into_b(),
//!         (
//!             warp::sse::id(13),
//!             warp::sse::event(\"chat\"),
//!             warp::sse::data(\"other chat message\\nwith next line\"),
//!             warp::sse::retry(Duration::from_millis(5000)),
//!         ).into_b().into_b(),
//!     ]);
//!     sse.reply(warp::sse::keep_alive(events))
//! });
//! ```
//!
//! Each field already is event which can be sent to client.
//! The events with multiple fields can be created by combining fields using tuples.
//!
//! See also the [EventSource](https://developer.mozilla.org/en-US/docs/Web/API/EventSource) API,
//! which specifies the expected behavior of Server Sent Events.
//!
use std::error::Error as StdError;
use std::fmt::{self, Display, Formatter, Write};
use std::str::FromStr;
use std::time::Duration;

use futures::{Async, Future, Poll, Stream};
use http::header::{HeaderValue, CACHE_CONTROL, CONTENT_TYPE};
use hyper::Body;
use serde::Serialize;
use serde_json;
use tokio::{clock::now, timer::Delay};

use self::sealed::{
    BoxedServerSentEvent, EitherServerSentEvent, SseError, SseField, SseFormat, SseWrapper,
};
use super::{header, header::MissingHeader};
use filter::One;
use reply::{ReplySealed, Response};
use {Filter, Rejection, Reply};

/// Server-sent event message
pub trait ServerSentEvent: SseFormat + Sized + Send + 'static {
    /// Convert to either A
    fn into_a<B>(self) -> EitherServerSentEvent<Self, B> {
        EitherServerSentEvent::A(self)
    }

    /// Convert to either B
    fn into_b<A>(self) -> EitherServerSentEvent<A, Self> {
        EitherServerSentEvent::B(self)
    }

    /// Convert to boxed
    fn boxed(self) -> BoxedServerSentEvent {
        BoxedServerSentEvent(Box::new(self))
    }
}

impl<T: SseFormat + Send + 'static> ServerSentEvent for T {}

#[allow(missing_debug_implementations)]
/// Comment field (\":<comment-text>\")
pub struct SseComment<T>(T);

/// Comment field (\":<comment-text>\")
pub fn comment<T>(comment: T) -> impl ServerSentEvent
where
    T: Display + Send + 'static,
{
    SseComment(comment)
}

impl<T: Display> SseFormat for SseComment<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Comment = k {
            k.fmt(f)?;
            self.0.fmt(f)?;
            f.write_char('\\n')?;
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseEvent<T>(T);

/// Event name field (\"event:<event-name>\")
pub fn event<T>(event: T) -> impl ServerSentEvent
where
    T: Display + Send + 'static,
{
    SseEvent(event)
}

impl<T: Display> SseFormat for SseEvent<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Event = k {
            k.fmt(f)?;
            self.0.fmt(f)?;
            f.write_char('\\n')?;
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseId<T>(T);

/// Identifier field (\"id:<identifier>\")
pub fn id<T>(id: T) -> impl ServerSentEvent
where
    T: Display + Send + 'static,
{
    SseId(id)
}

impl<T: Display> SseFormat for SseId<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Id = k {
            k.fmt(f)?;
            self.0.fmt(f)?;
            f.write_char('\\n')?;
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseRetry(Duration);

/// Retry timeout field (\"retry:<timeout>\")
pub fn retry(time: Duration) -> impl ServerSentEvent {
    SseRetry(time)
}

impl SseFormat for SseRetry {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Retry = k {
            k.fmt(f)?;

            let secs = self.0.as_secs();
            let millis = self.0.subsec_nanos() / 1_000_000;

            if secs > 0 {
                // format seconds
                secs.fmt(f)?;

                // pad milliseconds
                if millis < 10 {
                    f.write_str(\"00\")?;
                } else if millis < 100 {
                    f.write_char('0')?;
                }
            }

            // format milliseconds
            millis.fmt(f)?;

            f.write_char('\\n')?;
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseData<T>(T);

/// Data field(s) (\"data:<content>\")
///
/// The multiline content will be transferred
/// using sequential data fields, one per line.
pub fn data<T>(data: T) -> impl ServerSentEvent
where
    T: Display + Send + 'static,
{
    SseData(data)
}

impl<T: Display> SseFormat for SseData<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Data = k {
            for line in self.0.to_string().split('\\n') {
                k.fmt(f)?;
                line.fmt(f)?;
                f.write_char('\\n')?;
            }
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseJson<T>(T);

/// Data field with JSON content (\"data:<json-content>\")
pub fn json<T>(data: T) -> impl ServerSentEvent
where
    T: Serialize + Send + 'static,
{
    SseJson(data)
}

impl<T: Serialize> SseFormat for SseJson<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Data = k {
            k.fmt(f)?;
            serde_json::to_string(&self.0)
                .map_err(|error| {
                    error!(\"sse::json error {}\", error);
                    fmt::Error
                })
                .and_then(|data| data.fmt(f))?;
            f.write_char('\\n')?;
        }
        Ok(())
    }
}

macro_rules! tuple_fmt {
    (($($t:ident),+) => ($($i:tt),+)) => {
        impl<$($t),+> SseFormat for ($($t),+)
        where
            $($t: SseFormat,)+
        {
            fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
                $(self.$i.fmt_field(f, k)?;)+
                Ok(())
            }
        }
    };
}

tuple_fmt!((A, B) => (0, 1));
tuple_fmt!((A, B, C) => (0, 1, 2));
tuple_fmt!((A, B, C, D) => (0, 1, 2, 3));
tuple_fmt!((A, B, C, D, E) => (0, 1, 2, 3, 4));
tuple_fmt!((A, B, C, D, E, F) => (0, 1, 2, 3, 4, 5));
tuple_fmt!((A, B, C, D, E, F, G) => (0, 1, 2, 3, 4, 5, 6));
tuple_fmt!((A, B, C, D, E, F, G, H) => (0, 1, 2, 3, 4, 5, 6, 7));

/// Gets the optional last event id from request.
/// Typically this identifier represented as number or string.
///
/// ```
/// let app = warp::sse::last_event_id::<u32>();
///
/// // The identifier is present
/// assert_eq!(
///     warp::test::request()
///        .header(\"Last-Event-ID\", \"12\")
///        .filter(&app)
///        .unwrap(),
///     Some(12)
/// );
///
/// // The identifier is missing
/// assert_eq!(
///     warp::test::request()
///        .filter(&app)
///        .unwrap(),
///     None
/// );
///
/// // The identifier is not a valid
/// assert!(
///     warp::test::request()
///        .header(\"Last-Event-ID\", \"abc\")
///        .filter(&app)
///        .is_err(),
/// );
/// ```
pub fn last_event_id<T>() -> impl Filter<Extract = One<Option<T>>, Error = Rejection>
where
    T: FromStr + Send,
{
    header::header(\"last-event-id\")
        .map(Some)
        .or_else(|rejection: Rejection| {
            if rejection.find_cause::<MissingHeader>().is_some() {
                return Ok((None,));
            }
            Err(rejection)
        })
}

/// Creates a Server-sent Events filter.
///
/// The yielded `Sse` is used to reply with stream of events.
///
/// # Note
///
/// This filter combines multiple filters internally, so you don't need them:
///
/// - Method must be `GET`
/// - Header `connection` must be `keep-alive` when it present.
///
/// If the filters are met, yields a `Sse`. Calling `Sse::reply` will return
/// a reply with:
///
/// - Status of `200 OK`
/// - Header `content-type: text/event-stream`
/// - Header `cache-control: no-cache`.
pub fn sse() -> impl Filter<Extract = One<Sse>, Error = Rejection> + Copy {
    ::get2()
        .and(
            header::exact_ignore_case(\"connection\", \"keep-alive\").or_else(
                |rejection: Rejection| {
                    if rejection.find_cause::<MissingHeader>().is_some() {
                        return Ok(());
                    }
                    Err(rejection)
                },
            ),
        )
        .map(|| Sse)
}

/// Extracted by the [`sse`](sse) filter, and used to reply with stream of events.
pub struct Sse;

impl Sse {
    /// Server-sent events reply
    ///
    /// This function converts stream of server events into reply.
    ///
    /// ```
    /// # extern crate futures;
    /// # extern crate warp;
    /// # extern crate serde;
    /// # #[macro_use] extern crate serde_derive;
    ///
    /// use std::time::Duration;
    /// use futures::stream::iter_ok;
    /// use warp::{Filter, sse::ServerSentEvent};
    ///
    /// #[derive(Serialize)]
    /// struct Msg {
    ///     from: u32,
    ///     text: String,
    /// }
    ///
    /// let app = warp::path(\"sse\").and(warp::sse()).map(|sse: warp::sse::Sse| {
    ///     let events = iter_ok::<_, ::std::io::Error>(vec![
    ///         // Unnamed event with data only
    ///         warp::sse::data(\"payload\").boxed(),
    ///         // Named event with ID and retry timeout
    ///         (
    ///             warp::sse::data(\"other message\\nwith next line\"),
    ///             warp::sse::event(\"chat\"),
    ///             warp::sse::id(1),
    ///             warp::sse::retry(Duration::from_millis(15000))
    ///         ).boxed(),
    ///         // Event with JSON data
    ///         (
    ///             warp::sse::id(2),
    ///             warp::sse::json(Msg {
    ///                 from: 2,
    ///                 text: \"hello\".into(),
    ///             }),
    ///         ).boxed(),
    ///     ]);
    ///     sse.reply(events)
    /// });
    ///
    /// let res = warp::test::request()
    ///     .method(\"GET\")
    ///     .header(\"Connection\", \"Keep-Alive\")
    ///     .path(\"/sse\")
    ///     .reply(&app)
    ///     .into_body();
    ///
    /// assert_eq!(
    ///     res,
    ///     r#\"data:payload
    ///
    /// event:chat
    /// data:other message
    /// data:with next line
    /// id:1
    /// retry:15000
    ///
    /// data:{\"from\":2,\"text\":\"hello\"}
    /// id:2
    ///
    /// \"#
    /// );
    /// ```
    pub fn reply<S>(self, event_stream: S) -> impl Reply
    where
        S: Stream + Send + 'static,
        S::Item: ServerSentEvent,
        S::Error: StdError + Send + Sync + 'static,
    {
        SseReply { event_stream }
    }
}

impl fmt::Debug for Sse {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.debug_struct(\"Sse\").finish()
    }
}

#[allow(missing_debug_implementations)]
struct SseReply<S> {
    event_stream: S,
}

impl<S> ReplySealed for SseReply<S>
where
    S: Stream + Send + 'static,
    S::Item: ServerSentEvent,
    S::Error: StdError + Send + Sync + 'static,
{
    #[inline]
    fn into_response(self) -> Response {
        let body_stream = self
            .event_stream
            .map_err(|error| {
                // FIXME: error logging
                error!(\"sse stream error: {}\", error);
                SseError
            })
            .and_then(|event| SseWrapper::format(&event));

        let mut res = Response::new(Body::wrap_stream(body_stream));
        // Set appropriate content type
        res.headers_mut()
            .insert(CONTENT_TYPE, HeaderValue::from_static(\"text/event-stream\"));
        // Disable response body caching
        res.headers_mut()
            .insert(CACHE_CONTROL, HeaderValue::from_static(\"no-cache\"));
        res
    }
}

#[allow(missing_debug_implementations)]
/// Struct for tracking the interval between keep-alive messages, the content
/// of each message, and the associated stream.
pub struct SseKeepAlive<S> {
    event_stream: S,
    comment_text: String,
    max_interval: Duration,
    alive_timer: Delay,
}
impl<S> SseKeepAlive<S> {
    /// Customize the interval between keep=alive messages.
    pub fn with_interval(mut self, time: Duration) -> Self {
        self.max_interval = time;
        self
    }

    /// Customize the text of the keep-alive message.
    pub fn with_text(mut self, text: String) -> Self {
        self.comment_text = text;
        self
    }
}

/// This is a deprecated version of `keep_alive`, which is maintained for
/// backwards compatibility.  Refer to the documentation accompanying `keep_alive`
/// for details about the purpose/usage of these two functions.
///
/// Unlike `keep_alive`, `keep` requires you to provide an `Option<Durration>` as a
/// second parameter and interprets `None` as a signal to use a default durration
/// of 15 seconds.  `keep` also always sends the heartbeat signal `:` whereas
/// `keep_alive` alows you to customize that signal.
pub fn keep<S>(
    event_stream: S,
    keep_interval: impl Into<Option<Duration>>,
) -> impl Stream<
    Item = impl ServerSentEvent + Send + 'static,
    Error = impl StdError + Send + Sync + 'static,
> + Send
         + 'static
where
    S: Stream + Send + 'static,
    S::Item: ServerSentEvent + Send,
    S::Error: StdError + Send + Sync + 'static,
{
    let max_interval = keep_interval
        .into()
        .unwrap_or_else(|| Duration::from_secs(15));
    let alive_timer = Delay::new(now() + max_interval);
    SseKeepAlive {
        event_stream,
        comment_text: \"\".to_string(),
        max_interval,
        alive_timer,
    }
}

/// Keeps event source connection when no events sent over a some time.
///
/// Some proxy servers may drop HTTP connection after a some timeout of inactivity.
/// This function helps to prevent such behavior by sending comment events every
/// `keep_interval` of inactivity.
///
/// By default the comment is `:` (an empty comment) and the  time interval between
/// events is 15 seconds.  Both of thes may be customized using the builder pattern
/// as shown below.
///
/// ```
/// use std::time::Duration;
/// use tokio::{clock::now, timer::Interval};
/// use warp::{Filter, Stream};
/// 
/// fn main() {
///     let routes = warp::path(\"ticks\")
///         .and(warp::sse())
///         .map(|sse: warp::sse::Sse| {
///             let mut counter: u64 = 0;
///             let event_stream = Interval::new(now(), Duration::from_secs(15)).map(move |_| {
///                 counter += 1;
///                 // create server-sent event
///                 warp::sse::data(counter)
///             });
///             // reply using server-sent events
///             sse.reply(warp::sse::keep_alive(event_stream)
///                           .with_interval(Duration::from_secs(5))
///                           .with_text(\"thump\".to_string()))
///         });
///     warp::serve(routes).run(([127, 0, 0, 1], 3030));
/// }
/// ```
///
/// See [notes](https://www.w3.org/TR/2009/WD-eventsource-20090421/#notes).
pub fn keep_alive<S>(event_stream: S) -> SseKeepAlive<S>
where
    S: Stream + Send + 'static,
    S::Item: ServerSentEvent + Send,
    S::Error: StdError + Send + Sync + 'static,
{
    let max_interval = Duration::from_secs(15);
    let alive_timer = Delay::new(now() + max_interval);
    SseKeepAlive {
        event_stream,
        comment_text: \"\".to_string(),
        max_interval,
        alive_timer,
    }
}

impl<S> Stream for SseKeepAlive<S>
where
    S: Stream + Send + 'static,
    S::Item: ServerSentEvent,
    S::Error: StdError + Send + Sync + 'static,
{
    type Item = EitherServerSentEvent<S::Item, SseComment<String>>;
    type Error = SseError;

    fn poll(&mut self) -> Poll<Option<Self::Item>, Self::Error> {
        match self.event_stream.poll() {
            Ok(Async::NotReady) => match self.alive_timer.poll() {
                Ok(Async::NotReady) => Ok(Async::NotReady),
                Ok(Async::Ready(_)) => {
                    // restart timer
                    self.alive_timer.reset(now() + self.max_interval);
                    let comment_str = self.comment_text.clone();
                    Ok(Async::Ready(Some(EitherServerSentEvent::B(SseComment(
                        comment_str,
                    )))))
                }
                Err(error) => {
                    error!(\"sse::keep error: {}\", error);
                    Err(SseError)
                }
            },
            Ok(Async::Ready(Some(event))) => {
                // restart timer
                self.alive_timer.reset(now() + self.max_interval);
                Ok(Async::Ready(Some(EitherServerSentEvent::A(event))))
            }
            Ok(Async::Ready(None)) => Ok(Async::Ready(None)),
            Err(error) => {
                error!(\"sse::keep error: {}\", error);
                Err(SseError)
            }
        }
    }
}

mod sealed {
    use super::*;

    /// SSE error type
    #[derive(Debug)]
    pub struct SseError;

    impl Display for SseError {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            write!(f, \"sse error\")
        }
    }

    impl StdError for SseError {
        fn description(&self) -> &str {
            \"sse error\"
        }
    }

    impl Display for SseField {
        fn fmt(&self, f: &mut Formatter) -> fmt::Result {
            use self::SseField::*;
            f.write_str(match self {
                Event => \"event:\",
                Id => \"id:\",
                Data => \"data:\",
                Retry => \"retry:\",
                Comment => \":\",
            })
        }
    }

    /// SSE field kind
    #[allow(missing_debug_implementations)]
    pub enum SseField {
        /// Event name field
        Event,
        /// Event id field
        Id,
        /// Event data field
        Data,
        /// Retry timeout field
        Retry,
        /// Comment field
        Comment,
    }

    /// SSE formatter trait
    pub trait SseFormat {
        /// format message field
        fn fmt_field(&self, _f: &mut Formatter, _key: &SseField) -> fmt::Result {
            Ok(())
        }
    }

    /// SSE wrapper to help formatting messages
    #[allow(missing_debug_implementations)]
    pub struct SseWrapper<'a, T: 'a>(&'a T);

    impl<'a, T> SseWrapper<'a, T>
    where
        T: SseFormat + 'a,
    {
        pub fn format(event: &'a T) -> Result<String, SseError> {
            let mut buf = String::new();
            buf.write_fmt(format_args!(\"{}\", SseWrapper(event)))
                .map_err(|_| SseError)?;
            buf.shrink_to_fit();
            Ok(buf)
        }
    }

    impl<'a, T> Display for SseWrapper<'a, T>
    where
        T: SseFormat,
    {
        fn fmt(&self, f: &mut Formatter) -> fmt::Result {
            self.0.fmt_field(f, &SseField::Comment)?;
            // The event name usually transferred before the other fields.
            self.0.fmt_field(f, &SseField::Event)?;
            // It is important that the data will be transferred before
            // the identifier to prevent possible losing events when
            // resuming connection.
            self.0.fmt_field(f, &SseField::Data)?;
            self.0.fmt_field(f, &SseField::Id)?;
            self.0.fmt_field(f, &SseField::Retry)?;
            f.write_char('\\n')
        }
    }

    #[allow(missing_debug_implementations)]
    pub struct BoxedServerSentEvent(pub(super) Box<SseFormat + Send>);

    impl SseFormat for BoxedServerSentEvent {
        fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
            self.0.fmt_field(f, k)
        }
    }

    #[allow(missing_debug_implementations)]
    pub enum EitherServerSentEvent<A, B> {
        A(A),
        B(B),
    }

    impl<A, B> SseFormat for EitherServerSentEvent<A, B>
    where
        A: SseFormat,
        B: SseFormat,
    {
        fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
            match self {
                EitherServerSentEvent::A(a) => a.fmt_field(f, k),
                EitherServerSentEvent::B(b) => b.fmt_field(f, k),
            }
        }
    }
}
" 0 29 (fontified t face font-lock-doc-face) 29 33 (fontified t face font-lock-doc-face) 33 47 (fontified t face font-lock-doc-face) 47 51 (fontified t face font-lock-doc-face) 51 59 (fontified t face font-lock-doc-face) 59 87 (fontified t face font-lock-doc-face) 87 112 (fontified t face font-lock-doc-face) 112 116 (fontified t face font-lock-doc-face) 116 145 (fontified t face font-lock-doc-face) 145 179 (fontified t face font-lock-doc-face) 179 225 (fontified t face font-lock-doc-face) 225 229 (fontified t face font-lock-doc-face) 229 321 (fontified t face font-lock-doc-face) 321 351 (fontified t face font-lock-doc-face) 351 352 (fontified t syntax-table #1=(1) face font-lock-doc-face) 352 371 (fontified t face font-lock-doc-face) 371 372 (fontified t syntax-table #1# face font-lock-doc-face) 372 379 (fontified t face font-lock-doc-face) 379 434 (fontified t face font-lock-doc-face) 434 448 (fontified t face font-lock-doc-face) 448 490 (fontified t face font-lock-doc-face) 490 500 (fontified t face font-lock-doc-face) 500 539 (fontified t face font-lock-doc-face) 539 572 (fontified t face font-lock-doc-face) 572 586 (fontified t face font-lock-doc-face) 586 621 (fontified t face font-lock-doc-face) 621 663 (fontified t face font-lock-doc-face) 663 734 (fontified t face font-lock-doc-face) 734 797 (fontified t face font-lock-doc-face) 797 830 (fontified t face font-lock-doc-face) 830 842 (fontified t face font-lock-doc-face) 842 881 (fontified t face font-lock-doc-face) 881 891 (fontified t face font-lock-doc-face) 891 899 (fontified t face font-lock-doc-face) 899 907 (fontified t face font-lock-doc-face) 907 911 (fontified t face font-lock-doc-face) 911 972 (fontified t face font-lock-doc-face) 972 1039 (fontified t face font-lock-doc-face) 1039 1057 (fontified t face font-lock-doc-face) 1057 1061 (fontified t face font-lock-doc-face) 1061 1159 (fontified t face font-lock-doc-face) 1159 1223 (fontified t face font-lock-doc-face) 1223 1224 (fontified t face font-lock-doc-face) 1224 1228 (fontified t face font-lock-doc-face) 1228 1231 (fontified t face font-lock-keyword-face) 1231 1232 (fontified t) 1232 1235 (fontified t face font-lock-constant-face) 1235 1237 (fontified t) 1237 1242 (fontified t face font-lock-constant-face) 1242 1244 (fontified t) 1244 1249 (fontified t face font-lock-type-face) 1249 1250 (fontified t) 1250 1252 (fontified t face font-lock-keyword-face) 1252 1253 (fontified t) 1253 1261 (fontified t face font-lock-type-face) 1261 1263 (fontified t) 1263 1266 (fontified t face font-lock-keyword-face) 1266 1267 (fontified t) 1267 1270 (fontified t face font-lock-constant-face) 1270 1272 (fontified t) 1272 1275 (fontified t face font-lock-constant-face) 1275 1278 (fontified t) 1278 1282 (fontified t face font-lock-keyword-face) 1282 1284 (fontified t) 1284 1291 (fontified t face font-lock-type-face) 1291 1293 (fontified t) 1293 1302 (fontified t face font-lock-type-face) 1302 1304 (fontified t) 1304 1309 (fontified t face font-lock-type-face) 1309 1312 (fontified t) 1312 1315 (fontified t face font-lock-keyword-face) 1315 1316 (fontified t) 1316 1319 (fontified t face font-lock-constant-face) 1319 1321 (fontified t) 1321 1324 (fontified t face font-lock-type-face) 1324 1326 (fontified t) 1326 1333 (fontified t face font-lock-type-face) 1333 1335 (fontified t) 1335 1338 (fontified t face font-lock-keyword-face) 1338 1339 (fontified t) 1339 1342 (fontified t face font-lock-constant-face) 1342 1344 (fontified t) 1344 1348 (fontified t face font-lock-constant-face) 1348 1350 (fontified t) 1350 1358 (fontified t face font-lock-type-face) 1358 1361 (fontified t) 1361 1364 (fontified t face font-lock-keyword-face) 1364 1365 (fontified t) 1365 1372 (fontified t face font-lock-constant-face) 1372 1375 (fontified t) 1375 1380 (fontified t face font-lock-type-face) 1380 1382 (fontified t) 1382 1388 (fontified t face font-lock-type-face) 1388 1390 (fontified t) 1390 1394 (fontified t face font-lock-type-face) 1394 1396 (fontified t) 1396 1402 (fontified t face font-lock-type-face) 1402 1405 (fontified t) 1405 1408 (fontified t face font-lock-keyword-face) 1408 1409 (fontified t) 1409 1413 (fontified t face font-lock-constant-face) 1413 1415 (fontified t) 1415 1421 (fontified t face font-lock-constant-face) 1421 1424 (fontified t) 1424 1435 (fontified t face font-lock-type-face) 1435 1437 (fontified t) 1437 1450 (fontified t face font-lock-type-face) 1450 1452 (fontified t) 1452 1460 (fontified t face font-lock-type-face) 1460 1464 (fontified t face font-lock-type-face) 1464 1467 (fontified t) 1467 1470 (fontified t face font-lock-keyword-face) 1470 1471 (fontified t) 1471 1476 (fontified t face font-lock-constant-face) 1476 1478 (fontified t) 1478 1482 (fontified t face font-lock-type-face) 1482 1484 (fontified t) 1484 1487 (fontified t face font-lock-keyword-face) 1487 1488 (fontified t) 1488 1493 (fontified t face font-lock-constant-face) 1493 1495 (fontified t) 1495 1504 (fontified t face font-lock-type-face) 1504 1506 (fontified t) 1506 1509 (fontified t face font-lock-keyword-face) 1509 1510 (fontified t) 1510 1520 (fontified t face font-lock-constant-face) 1520 1522 (fontified t) 1522 1525 (fontified t face font-lock-keyword-face) 1525 1526 (fontified t) 1526 1531 (fontified t face font-lock-constant-face) 1531 1534 (fontified t) 1534 1539 (fontified t face font-lock-constant-face) 1539 1546 (fontified t) 1546 1551 (fontified t face font-lock-constant-face) 1551 1553 (fontified t) 1553 1558 (fontified t face font-lock-type-face) 1558 1562 (fontified t) 1562 1565 (fontified t face font-lock-keyword-face) 1565 1566 (fontified t) 1566 1570 (fontified t face font-lock-keyword-face) 1570 1572 (fontified t) 1572 1578 (fontified t face font-lock-constant-face) 1578 1586 (fontified t) 1586 1606 (fontified t face font-lock-type-face) 1606 1608 (fontified t) 1608 1626 (fontified t face font-lock-type-face) 1626 1629 (fontified t face font-lock-type-face) 1629 1631 (fontified t) 1631 1639 (fontified t face font-lock-type-face) 1639 1641 (fontified t) 1641 1649 (fontified t face font-lock-type-face) 1649 1651 (fontified t) 1651 1660 (fontified t face font-lock-type-face) 1660 1662 (fontified t) 1662 1672 (fontified t face font-lock-type-face) 1672 1674 (fontified t) 1674 1677 (fontified t) 1677 1680 (fontified t face font-lock-keyword-face) 1680 1681 (fontified t) 1681 1686 (fontified t face font-lock-keyword-face) 1686 1697 (fontified t) 1697 1703 (fontified t face font-lock-constant-face) 1703 1705 (fontified t) 1705 1718 (fontified t face font-lock-type-face) 1718 1721 (fontified t) 1721 1724 (fontified t face font-lock-keyword-face) 1724 1725 (fontified t) 1725 1731 (face font-lock-constant-face fontified t) 1731 1733 (fontified t) 1733 1736 (face font-lock-type-face fontified t) 1736 1738 (fontified t) 1738 1741 (fontified t face font-lock-keyword-face) 1741 1742 (fontified t) 1742 1747 (fontified t face font-lock-constant-face) 1747 1750 (fontified t) 1750 1761 (fontified t face font-lock-type-face) 1761 1763 (fontified t) 1763 1771 (fontified t face font-lock-type-face) 1771 1774 (fontified t) 1774 1777 (fontified t face font-lock-keyword-face) 1777 1779 (fontified t) 1779 1785 (fontified t face font-lock-type-face) 1785 1787 (fontified t) 1787 1796 (fontified t face font-lock-type-face) 1796 1798 (fontified t) 1798 1803 (fontified t face font-lock-type-face) 1803 1807 (fontified t) 1807 1837 (fontified t face font-lock-doc-face) 1837 1840 (fontified t face font-lock-keyword-face) 1840 1841 (fontified t) 1841 1846 (fontified t face font-lock-keyword-face) 1846 1847 (fontified t) 1847 1862 (fontified t face font-lock-variable-name-face) 1862 1864 (fontified t) 1864 1873 (fontified t face font-lock-type-face) 1873 1876 (fontified t) 1876 1881 (fontified t face font-lock-type-face) 1881 1884 (fontified t) 1884 1888 (fontified t face font-lock-type-face) 1888 1892 (fontified t) 1892 1898 (fontified t face font-lock-keyword-face) 1898 1901 (fontified t) 1901 1905 (fontified t) 1905 1929 (fontified t face font-lock-doc-face) 1929 1933 (fontified t) 1933 1935 (fontified t face font-lock-keyword-face) 1935 1936 (fontified t) 1936 1942 (fontified t face font-lock-function-name-face) 1942 1943 (fontified t) 1943 1944 (fontified t face font-lock-type-face) 1944 1946 (fontified t) 1946 1950 (fontified t face font-lock-keyword-face) 1950 1953 (fontified t) 1953 1954 (fontified t syntax-table #1#) 1954 1955 (fontified t) 1955 1976 (fontified t face font-lock-type-face) 1976 1977 (fontified t) 1977 1981 (fontified t face font-lock-type-face) 1981 1983 (fontified t) 1983 1984 (fontified t face font-lock-type-face) 1984 1996 (fontified t) 1996 2017 (fontified t face font-lock-type-face) 2017 2019 (fontified t) 2019 2020 (fontified t face font-lock-type-face) 2020 2021 (fontified t) 2021 2025 (fontified t face font-lock-keyword-face) 2025 2038 (fontified t) 2038 2062 (fontified t face font-lock-doc-face) 2062 2066 (fontified t) 2066 2068 (fontified t face font-lock-keyword-face) 2068 2069 (fontified t) 2069 2075 (fontified t face font-lock-function-name-face) 2075 2076 (fontified t) 2076 2077 (fontified t face font-lock-type-face) 2077 2079 (fontified t) 2079 2083 (fontified t face font-lock-keyword-face) 2083 2086 (fontified t) 2086 2087 (fontified t syntax-table #1#) 2087 2088 (fontified t) 2088 2109 (fontified t face font-lock-type-face) 2109 2110 (fontified t) 2110 2111 (fontified t face font-lock-type-face) 2111 2113 (fontified t) 2113 2117 (fontified t face font-lock-type-face) 2117 2129 (fontified t) 2129 2150 (fontified t face font-lock-type-face) 2150 2152 (fontified t) 2152 2153 (fontified t face font-lock-type-face) 2153 2154 (fontified t) 2154 2158 (fontified t face font-lock-keyword-face) 2158 2171 (fontified t) 2171 2192 (fontified t face font-lock-doc-face) 2192 2196 (fontified t) 2196 2198 (fontified t face font-lock-keyword-face) 2198 2199 (fontified t) 2199 2204 (fontified t face font-lock-function-name-face) 2204 2205 (fontified t) 2205 2209 (fontified t face font-lock-keyword-face) 2209 2212 (fontified t) 2212 2213 (fontified t syntax-table #1#) 2213 2214 (fontified t) 2214 2234 (fontified t face font-lock-type-face) 2234 2238 (fontified t) 2238 2245 (fontified t) 2245 2265 (face font-lock-type-face fontified t) 2265 2266 (fontified t) 2266 2269 (face font-lock-type-face fontified t) 2269 2275 (fontified t) 2275 2279 (face font-lock-keyword-face fontified t) 2279 2282 (fontified t) 2282 2291 (fontified t) 2291 2295 (fontified t face font-lock-keyword-face) 2295 2296 (fontified t) 2296 2297 (fontified t face font-lock-variable-name-face) 2297 2299 (fontified t) 2299 2308 (fontified t face font-lock-type-face) 2308 2311 (fontified t) 2311 2315 (fontified t face font-lock-type-face) 2315 2319 (fontified t) 2319 2325 (fontified t face font-lock-keyword-face) 2325 2327 (fontified t) 2327 2342 (fontified t face font-lock-type-face) 2342 2343 (fontified t) 2343 2346 (fontified t face font-lock-keyword-face) 2346 2347 (fontified t) 2347 2348 (fontified t face font-lock-type-face) 2348 2353 (fontified t) 2353 2392 (fontified t face font-lock-preprocessor-face) 2392 2393 (fontified t) 2393 2414 (fontified t face font-lock-doc-face) 2414 2415 (syntax-table #1# fontified t face font-lock-doc-face) 2415 2427 (fontified t face font-lock-doc-face) 2427 2428 (syntax-table #1# fontified t face font-lock-doc-face) 2428 2431 (fontified t face font-lock-doc-face) 2431 2434 (fontified t face font-lock-keyword-face) 2434 2435 (fontified t) 2435 2441 (fontified t face font-lock-keyword-face) 2441 2442 (fontified t) 2442 2452 (fontified t face font-lock-type-face) 2452 2453 (fontified t) 2453 2454 (fontified t face font-lock-type-face) 2454 2456 (fontified t) 2456 2457 (fontified t face font-lock-type-face) 2457 2460 (fontified t) 2460 2461 (fontified t) 2461 2482 (fontified t face font-lock-doc-face) 2482 2483 (syntax-table #1# fontified t face font-lock-doc-face) 2483 2495 (fontified t face font-lock-doc-face) 2495 2496 (syntax-table #1# fontified t face font-lock-doc-face) 2496 2499 (fontified t face font-lock-doc-face) 2499 2502 (fontified t face font-lock-keyword-face) 2502 2503 (fontified t) 2503 2505 (fontified t face font-lock-keyword-face) 2505 2506 (fontified t) 2506 2513 (fontified t face font-lock-function-name-face) 2513 2514 (fontified t) 2514 2515 (fontified t face font-lock-type-face) 2515 2517 (fontified t) 2517 2524 (fontified t face font-lock-variable-name-face) 2524 2526 (fontified t) 2526 2527 (fontified t face font-lock-type-face) 2527 2530 (fontified t) 2530 2531 (syntax-table #1# fontified t) 2531 2532 (fontified t) 2532 2536 (fontified t face font-lock-keyword-face) 2536 2537 (fontified t) 2537 2552 (fontified t face font-lock-type-face) 2552 2553 (fontified t) 2553 2558 (fontified t face font-lock-keyword-face) 2558 2563 (fontified t) 2563 2564 (fontified t face font-lock-variable-name-face) 2564 2566 (fontified t) 2566 2573 (fontified t face font-lock-type-face) 2573 2576 (fontified t) 2576 2580 (fontified t face font-lock-type-face) 2580 2584 (fontified t) 2584 2590 (fontified t face font-lock-keyword-face) 2590 2598 (fontified t) 2598 2608 (fontified t face font-lock-type-face) 2608 2621 (fontified t) 2621 2625 (fontified t face font-lock-keyword-face) 2625 2626 (fontified t) 2626 2627 (fontified t face font-lock-variable-name-face) 2627 2629 (fontified t) 2629 2636 (fontified t face font-lock-type-face) 2636 2638 (fontified t) 2638 2647 (fontified t face font-lock-type-face) 2647 2648 (fontified t) 2648 2651 (fontified t face font-lock-keyword-face) 2651 2652 (fontified t) 2652 2662 (fontified t face font-lock-type-face) 2662 2663 (fontified t) 2663 2664 (fontified t face font-lock-type-face) 2664 2668 (fontified t) 2668 2672 (fontified t) 2672 2674 (face font-lock-keyword-face fontified t) 2674 2675 (fontified t) 2675 2684 (face font-lock-function-name-face fontified t) 2684 2686 (fontified t) 2686 2690 (face font-lock-keyword-face fontified t) 2690 2692 (fontified t) 2692 2693 (face font-lock-variable-name-face fontified t) 2693 2696 (fontified t) 2696 2699 (face font-lock-keyword-face fontified t) 2699 2700 (fontified t) 2700 2709 (face font-lock-type-face fontified t) 2709 2711 (fontified t) 2711 2712 (face font-lock-variable-name-face fontified t) 2712 2715 (fontified t) 2715 2723 (fontified t face font-lock-type-face) 2723 2726 (fontified t) 2726 2727 (fontified t syntax-table #1#) 2727 2728 (fontified t) 2728 2731 (fontified t face font-lock-constant-face) 2731 2733 (fontified t) 2733 2739 (fontified t face font-lock-type-face) 2739 2750 (fontified t) 2750 2752 (fontified t face font-lock-keyword-face) 2752 2753 (fontified t) 2753 2756 (fontified t face font-lock-keyword-face) 2756 2757 (fontified t) 2757 2765 (fontified t face font-lock-type-face) 2765 2767 (fontified t) 2767 2774 (fontified t face font-lock-type-face) 2774 2801 (fontified t) 2801 2802 (fontified t face rust-question-mark-face) 2802 2816 (fontified t) 2816 2820 (fontified t face font-lock-keyword-face) 2820 2829 (fontified t) 2829 2830 (fontified t face rust-question-mark-face) 2830 2857 (fontified t) 2857 2858 (fontified t syntax-table #2=(7) face font-lock-string-face) 2858 2860 (fontified t face font-lock-string-face) 2860 2861 (fontified t syntax-table #2# face font-lock-string-face) 2861 2862 (fontified t) 2862 2863 (fontified t face rust-question-mark-face) 2863 2883 (fontified t) 2883 2885 (fontified t face font-lock-type-face) 2885 2899 (fontified t) 2899 2938 (fontified t face font-lock-preprocessor-face) 2938 2939 (fontified t) 2939 2942 (fontified t face font-lock-keyword-face) 2942 2945 (fontified t face font-lock-keyword-face) 2945 2946 (fontified t) 2946 2954 (fontified t face font-lock-type-face) 2954 2955 (fontified t) 2955 2956 (fontified t face font-lock-type-face) 2956 2958 (fontified t) 2958 2959 (fontified t face font-lock-type-face) 2959 2960 (fontified t) 2960 2962 (fontified t) 2962 2963 (fontified t) 2963 2992 (fontified t face font-lock-doc-face) 2992 2993 (fontified t syntax-table #1# face font-lock-doc-face) 2993 3003 (fontified t face font-lock-doc-face) 3003 3004 (fontified t syntax-table #1# face font-lock-doc-face) 3004 3007 (fontified t face font-lock-doc-face) 3007 3010 (fontified t face font-lock-keyword-face) 3010 3011 (fontified t) 3011 3013 (fontified t face font-lock-keyword-face) 3013 3014 (fontified t) 3014 3019 (fontified t face font-lock-function-name-face) 3019 3020 (fontified t) 3020 3021 (fontified t face font-lock-type-face) 3021 3023 (fontified t) 3023 3028 (fontified t face font-lock-variable-name-face) 3028 3030 (fontified t) 3030 3031 (fontified t face font-lock-type-face) 3031 3034 (fontified t) 3034 3035 (fontified t syntax-table #1#) 3035 3036 (fontified t) 3036 3040 (fontified t face font-lock-keyword-face) 3040 3041 (fontified t) 3041 3056 (fontified t face font-lock-type-face) 3056 3057 (fontified t) 3057 3062 (fontified t face font-lock-keyword-face) 3062 3067 (fontified t) 3067 3068 (fontified t face font-lock-variable-name-face) 3068 3070 (fontified t) 3070 3077 (fontified t face font-lock-type-face) 3077 3080 (fontified t) 3080 3084 (fontified t face font-lock-type-face) 3084 3088 (fontified t) 3088 3094 (fontified t face font-lock-keyword-face) 3094 3102 (fontified t) 3102 3110 (fontified t face font-lock-type-face) 3110 3121 (fontified t) 3121 3125 (fontified t face font-lock-keyword-face) 3125 3126 (fontified t) 3126 3127 (fontified t face font-lock-variable-name-face) 3127 3129 (fontified t) 3129 3136 (fontified t face font-lock-type-face) 3136 3138 (fontified t) 3138 3147 (fontified t face font-lock-type-face) 3147 3148 (fontified t) 3148 3151 (fontified t face font-lock-keyword-face) 3151 3152 (fontified t) 3152 3160 (fontified t face font-lock-type-face) 3160 3161 (fontified t) 3161 3162 (fontified t face font-lock-type-face) 3162 3170 (fontified t) 3170 3172 (fontified t face font-lock-keyword-face) 3172 3173 (fontified t) 3173 3182 (fontified t face font-lock-function-name-face) 3182 3184 (fontified t) 3184 3188 (fontified t face font-lock-keyword-face) 3188 3190 (fontified t) 3190 3191 (fontified t face font-lock-variable-name-face) 3191 3194 (fontified t) 3194 3197 (fontified t face font-lock-keyword-face) 3197 3198 (fontified t) 3198 3207 (fontified t face font-lock-type-face) 3207 3209 (fontified t) 3209 3210 (fontified t face font-lock-variable-name-face) 3210 3212 (fontified t) 3212 3213 (fontified t) 3213 3221 (face font-lock-type-face fontified t) 3221 3224 (fontified t) 3224 3225 (syntax-table #1# fontified t) 3225 3226 (fontified t) 3226 3229 (face font-lock-constant-face fontified t) 3229 3231 (fontified t) 3231 3237 (face font-lock-type-face fontified t) 3237 3240 (fontified t) 3248 3250 (face font-lock-keyword-face) 3251 3254 (face font-lock-keyword-face) 3255 3263 (face font-lock-type-face) 3265 3270 (face font-lock-type-face) 3297 3298 (face rust-question-mark-face) 3312 3316 (face font-lock-keyword-face) 3325 3326 (face rust-question-mark-face) 3353 3354 (face font-lock-string-face syntax-table #2#) 3354 3356 (face font-lock-string-face) 3356 3357 (face font-lock-string-face syntax-table #2#) 3358 3359 (face rust-question-mark-face) 3379 3381 (face font-lock-type-face) 3395 3434 (face font-lock-preprocessor-face) 3435 3441 (face font-lock-keyword-face) 3442 3447 (face font-lock-type-face) 3448 3449 (face font-lock-type-face) 3451 3452 (face font-lock-type-face) 3456 3462 (face font-lock-doc-face) 3462 3482 (face font-lock-doc-face) 3482 3483 (face font-lock-doc-face syntax-table #1#) 3483 3493 (face font-lock-doc-face) 3493 3494 (face font-lock-doc-face syntax-table #1#) 3494 3497 (face font-lock-doc-face) 3497 3500 (face font-lock-keyword-face) 3501 3503 (face font-lock-keyword-face) 3504 3506 (face font-lock-function-name-face) 3507 3508 (face font-lock-type-face) 3510 3512 (face font-lock-variable-name-face) 3514 3515 (face font-lock-type-face) 3518 3519 (syntax-table #1#) 3520 3524 (face font-lock-keyword-face) 3525 3540 (face font-lock-type-face) 3541 3546 (face font-lock-keyword-face) 3551 3552 (face font-lock-variable-name-face) 3554 3561 (face font-lock-type-face) 3564 3568 (face font-lock-type-face) 3572 3578 (face font-lock-keyword-face) 3586 3591 (face font-lock-type-face) 3599 3603 (face font-lock-keyword-face) 3604 3605 (face font-lock-variable-name-face) 3607 3614 (face font-lock-type-face) 3616 3625 (face font-lock-type-face) 3626 3629 (face font-lock-keyword-face) 3630 3635 (face font-lock-type-face) 3636 3637 (face font-lock-type-face) 3645 3647 (face font-lock-keyword-face) 3648 3657 (face font-lock-function-name-face) 3659 3663 (face font-lock-keyword-face) 3665 3666 (face font-lock-variable-name-face) 3669 3672 (face font-lock-keyword-face) 3673 3682 (face font-lock-type-face) 3684 3685 (face font-lock-variable-name-face) 3688 3696 (face font-lock-type-face) 3699 3700 (syntax-table #1#) 3701 3704 (face font-lock-constant-face) 3706 3712 (face font-lock-type-face) 3723 3725 (face font-lock-keyword-face) 3726 3729 (face font-lock-keyword-face) 3730 3738 (face font-lock-type-face) 3740 3742 (face font-lock-type-face) 3769 3770 (face rust-question-mark-face) 3784 3788 (face font-lock-keyword-face) 3797 3798 (face rust-question-mark-face) 3825 3826 (face font-lock-string-face syntax-table #2#) 3826 3828 (face font-lock-string-face) 3828 3829 (face font-lock-string-face syntax-table #2#) 3830 3831 (face rust-question-mark-face) 3851 3853 (face font-lock-type-face) 3867 3906 (face font-lock-preprocessor-face) 3907 3913 (face font-lock-keyword-face) 3914 3922 (face font-lock-type-face) 3923 3931 (face font-lock-type-face) 3935 3967 (face font-lock-doc-face) 3967 3968 (face font-lock-doc-face syntax-table #1#) 3968 3975 (face font-lock-doc-face) 3975 3976 (face font-lock-doc-face syntax-table #1#) 3976 3979 (face font-lock-doc-face) 3979 3982 (face font-lock-keyword-face) 3983 3985 (face font-lock-keyword-face) 3986 3991 (face font-lock-function-name-face) 3992 3996 (face font-lock-variable-name-face) 3998 4006 (face font-lock-type-face) 4009 4010 (syntax-table #1#) 4011 4015 (face font-lock-keyword-face) 4016 4031 (face font-lock-type-face) 4038 4046 (face font-lock-type-face) 4056 4060 (face font-lock-keyword-face) 4061 4070 (face font-lock-type-face) 4071 4074 (face font-lock-keyword-face) 4075 4083 (face font-lock-type-face) 4090 4092 (face font-lock-keyword-face) 4093 4102 (face font-lock-function-name-face) 4104 4108 (face font-lock-keyword-face) 4110 4111 (face font-lock-variable-name-face) 4114 4117 (face font-lock-keyword-face) 4118 4127 (face font-lock-type-face) 4129 4130 (face font-lock-variable-name-face) 4133 4141 (face font-lock-type-face) 4144 4145 (syntax-table #1#) 4146 4149 (face font-lock-constant-face) 4151 4157 (face font-lock-type-face) 4168 4170 (face font-lock-keyword-face) 4171 4174 (face font-lock-keyword-face) 4175 4183 (face font-lock-type-face) 4185 4190 (face font-lock-type-face) 4217 4218 (face rust-question-mark-face) 4233 4236 (face font-lock-keyword-face) 4237 4241 (face font-lock-variable-name-face) 4244 4248 (face font-lock-keyword-face) 4274 4277 (face font-lock-keyword-face) 4278 4284 (face font-lock-variable-name-face) 4287 4291 (face font-lock-keyword-face) 4335 4337 (face font-lock-keyword-face) 4343 4344 (syntax-table #1#) 4365 4368 (face font-lock-comment-delimiter-face) 4368 4383 (face font-lock-comment-face) 4410 4411 (face rust-question-mark-face) 4430 4433 (face font-lock-comment-delimiter-face) 4433 4450 (face font-lock-comment-face) 4466 4468 (face font-lock-keyword-face) 4476 4477 (syntax-table #1#) 4515 4519 (face font-lock-string-face) 4520 4521 (face rust-question-mark-face) 4541 4545 (face font-lock-keyword-face) 4546 4548 (face font-lock-keyword-face) 4556 4557 (syntax-table #1#) 4597 4598 (face font-lock-string-face syntax-table #2#) 4598 4599 (face font-lock-string-face) 4599 4600 (face font-lock-string-face syntax-table #2#) 4601 4602 (face rust-question-mark-face) 4649 4652 (face font-lock-comment-delimiter-face) 4652 4672 (face font-lock-comment-face) 4697 4698 (face rust-question-mark-face) 4726 4727 (face font-lock-string-face syntax-table #2#) 4727 4729 (face font-lock-string-face) 4729 4730 (face font-lock-string-face syntax-table #2#) 4731 4732 (face rust-question-mark-face) 4752 4754 (face font-lock-type-face) 4768 4807 (face font-lock-preprocessor-face) 4808 4814 (face font-lock-keyword-face) 4815 4822 (face font-lock-type-face) 4823 4824 (face font-lock-type-face) 4826 4827 (face font-lock-type-face) 4831 4856 (face font-lock-doc-face) 4856 4857 (face font-lock-doc-face syntax-table #1#) 4857 4864 (face font-lock-doc-face) 4864 4865 (face font-lock-doc-face syntax-table #1#) 4865 4868 (face font-lock-doc-face) 4868 4872 (face font-lock-doc-face) 4872 4918 (face font-lock-doc-face) 4918 4966 (face font-lock-doc-face) 4966 4969 (face font-lock-keyword-face) 4970 4972 (face font-lock-keyword-face) 4973 4977 (face font-lock-function-name-face) 4978 4979 (face font-lock-type-face) 4981 4985 (face font-lock-variable-name-face) 4987 4988 (face font-lock-type-face) 4991 4992 (syntax-table #1#) 4993 4997 (face font-lock-keyword-face) 4998 5013 (face font-lock-type-face) 5014 5019 (face font-lock-keyword-face) 5024 5025 (face font-lock-variable-name-face) 5027 5034 (face font-lock-type-face) 5037 5041 (face font-lock-type-face) 5045 5051 (face font-lock-keyword-face) 5059 5064 (face font-lock-type-face) 5064 5066 (face font-lock-type-face) 5076 5080 (face font-lock-keyword-face) 5081 5082 (face font-lock-variable-name-face) 5084 5091 (face font-lock-type-face) 5093 5102 (face font-lock-type-face) 5103 5106 (face font-lock-keyword-face) 5107 5114 (face font-lock-type-face) 5115 5116 (face font-lock-type-face) 5124 5126 (face font-lock-keyword-face) 5127 5136 (face font-lock-function-name-face) 5138 5142 (face font-lock-keyword-face) 5144 5145 (face font-lock-variable-name-face) 5148 5151 (face font-lock-keyword-face) 5152 5161 (face font-lock-type-face) 5163 5164 (face font-lock-variable-name-face) 5167 5175 (face font-lock-type-face) 5178 5179 (syntax-table #1#) 5180 5183 (face font-lock-constant-face) 5185 5191 (face font-lock-type-face) 5202 5204 (face font-lock-keyword-face) 5205 5208 (face font-lock-keyword-face) 5209 5217 (face font-lock-type-face) 5219 5223 (face font-lock-type-face) 5242 5245 (face font-lock-keyword-face) 5251 5253 (face font-lock-keyword-face) 5254 5258 (face font-lock-keyword-face) 5279 5280 (face font-lock-string-face syntax-table #2#) 5280 5282 (face font-lock-string-face) 5282 5283 (face font-lock-string-face syntax-table #2#) 5311 5312 (face rust-question-mark-face) 5341 5342 (face rust-question-mark-face) 5373 5374 (face font-lock-string-face syntax-table #2#) 5374 5376 (face font-lock-string-face) 5376 5377 (face font-lock-string-face syntax-table #2#) 5378 5379 (face rust-question-mark-face) 5413 5415 (face font-lock-type-face) 5429 5468 (face font-lock-preprocessor-face) 5469 5475 (face font-lock-keyword-face) 5476 5483 (face font-lock-type-face) 5484 5485 (face font-lock-type-face) 5487 5488 (face font-lock-type-face) 5492 5532 (face font-lock-doc-face) 5532 5533 (face font-lock-doc-face syntax-table #1#) 5533 5545 (face font-lock-doc-face) 5545 5546 (face font-lock-doc-face syntax-table #1#) 5546 5549 (face font-lock-doc-face) 5549 5552 (face font-lock-keyword-face) 5553 5555 (face font-lock-keyword-face) 5556 5560 (face font-lock-function-name-face) 5561 5562 (face font-lock-type-face) 5564 5568 (face font-lock-variable-name-face) 5570 5571 (face font-lock-type-face) 5574 5575 (syntax-table #1#) 5576 5580 (face font-lock-keyword-face) 5581 5596 (face font-lock-type-face) 5597 5602 (face font-lock-keyword-face) 5607 5608 (face font-lock-variable-name-face) 5610 5619 (face font-lock-type-face) 5622 5626 (face font-lock-type-face) 5630 5636 (face font-lock-keyword-face) 5644 5651 (face font-lock-type-face) 5661 5665 (face font-lock-keyword-face) 5666 5667 (face font-lock-variable-name-face) 5669 5678 (face font-lock-type-face) 5680 5689 (face font-lock-type-face) 5690 5693 (face font-lock-keyword-face) 5694 5701 (face font-lock-type-face) 5702 5703 (face font-lock-type-face) 5711 5713 (face font-lock-keyword-face) 5714 5723 (face font-lock-function-name-face) 5725 5729 (face font-lock-keyword-face) 5731 5732 (face font-lock-variable-name-face) 5735 5738 (face font-lock-keyword-face) 5739 5748 (face font-lock-type-face) 5750 5751 (face font-lock-variable-name-face) 5754 5762 (face font-lock-type-face) 5765 5766 (syntax-table #1#) 5767 5770 (face font-lock-constant-face) 5772 5778 (face font-lock-type-face) 5789 5791 (face font-lock-keyword-face) 5792 5795 (face font-lock-keyword-face) 5796 5804 (face font-lock-type-face) 5806 5810 (face font-lock-type-face) 5837 5838 (face rust-question-mark-face) 5852 5862 (face font-lock-constant-face) 5875 5879 (face font-lock-keyword-face) 5938 5944 (face font-lock-preprocessor-face) 5945 5965 (face font-lock-string-face) 5995 5998 (face font-lock-constant-face) 6000 6005 (face font-lock-type-face) 6070 6071 (face rust-question-mark-face) 6098 6099 (face font-lock-string-face syntax-table #2#) 6099 6101 (face font-lock-string-face) 6101 6102 (face font-lock-string-face syntax-table #2#) 6103 6104 (face rust-question-mark-face) 6124 6126 (face font-lock-type-face) 6140 6152 (face font-lock-preprocessor-face) 6173 6175 (face font-lock-variable-name-face) 6187 6188 (syntax-table #1#) 6192 6194 (face font-lock-variable-name-face) 6204 6205 (syntax-table #1#) 6216 6220 (face font-lock-keyword-face) 6220 6221 (syntax-table #1#) 6228 6229 (syntax-table #1#) 6230 6239 (face font-lock-type-face) 6240 6243 (face font-lock-keyword-face) 6262 6267 (face font-lock-keyword-face) 6282 6284 (face font-lock-variable-name-face) 6286 6295 (face font-lock-type-face) 6321 6323 (face font-lock-keyword-face) 6324 6333 (face font-lock-function-name-face) 6335 6339 (face font-lock-keyword-face) 6341 6342 (face font-lock-variable-name-face) 6345 6348 (face font-lock-keyword-face) 6349 6358 (face font-lock-type-face) 6360 6361 (face font-lock-variable-name-face) 6364 6372 (face font-lock-type-face) 6375 6376 (syntax-table #1#) 6377 6380 (face font-lock-constant-face) 6382 6388 (face font-lock-type-face) 6409 6413 (face font-lock-keyword-face) 6432 6433 (face rust-question-mark-face) 6453 6455 (face font-lock-type-face) 6494 6504 (face font-lock-preprocessor-face) 6506 6507 (face font-lock-type-face) 6509 6510 (face font-lock-type-face) 6513 6514 (syntax-table #1#) 6524 6534 (face font-lock-preprocessor-face) 6536 6537 (face font-lock-type-face) 6539 6540 (face font-lock-type-face) 6542 6543 (face font-lock-type-face) 6546 6547 (syntax-table #1#) 6560 6570 (face font-lock-preprocessor-face) 6572 6573 (face font-lock-type-face) 6575 6576 (face font-lock-type-face) 6578 6579 (face font-lock-type-face) 6581 6582 (face font-lock-type-face) 6585 6586 (syntax-table #1#) 6602 6606 (face font-lock-preprocessor-face) 6606 6612 (face font-lock-preprocessor-face) 6614 6615 (face font-lock-type-face) 6617 6618 (face font-lock-type-face) 6620 6621 (face font-lock-type-face) 6623 6624 (face font-lock-type-face) 6626 6627 (face font-lock-type-face) 6630 6631 (syntax-table #1#) 6650 6660 (face font-lock-preprocessor-face) 6662 6663 (face font-lock-type-face) 6665 6666 (face font-lock-type-face) 6668 6669 (face font-lock-type-face) 6671 6672 (face font-lock-type-face) 6674 6675 (face font-lock-type-face) 6677 6678 (face font-lock-type-face) 6681 6682 (syntax-table #1#) 6704 6714 (face font-lock-preprocessor-face) 6716 6717 (face font-lock-type-face) 6719 6720 (face font-lock-type-face) 6722 6723 (face font-lock-type-face) 6725 6726 (face font-lock-type-face) 6728 6729 (face font-lock-type-face) 6731 6732 (face font-lock-type-face) 6734 6735 (face font-lock-type-face) 6738 6739 (syntax-table #1#) 6764 6774 (face font-lock-preprocessor-face) 6776 6777 (face font-lock-type-face) 6779 6780 (face font-lock-type-face) 6782 6783 (face font-lock-type-face) 6785 6786 (face font-lock-type-face) 6788 6789 (face font-lock-type-face) 6791 6792 (face font-lock-type-face) 6794 6795 (face font-lock-type-face) 6797 6798 (face font-lock-type-face) 6801 6802 (syntax-table #1#) 6831 6881 (face font-lock-doc-face) 6881 6944 (face font-lock-doc-face) 6944 6948 (face font-lock-doc-face) 6948 6956 (face font-lock-doc-face) 6956 6996 (face font-lock-doc-face) 6996 6997 (face font-lock-doc-face syntax-table #1#) 6997 7000 (face font-lock-doc-face) 7000 7001 (face font-lock-doc-face syntax-table #1#) 7001 7005 (face font-lock-doc-face) 7005 7009 (face font-lock-doc-face) 7009 7042 (face font-lock-doc-face) 7042 7058 (face font-lock-doc-face) 7058 7088 (face font-lock-doc-face) 7088 7130 (face font-lock-doc-face) 7130 7150 (face font-lock-doc-face) 7150 7155 (face font-lock-doc-face) 7155 7177 (face font-lock-doc-face) 7177 7194 (face font-lock-doc-face) 7194 7201 (face font-lock-doc-face) 7201 7205 (face font-lock-doc-face) 7205 7238 (face font-lock-doc-face) 7238 7254 (face font-lock-doc-face) 7254 7284 (face font-lock-doc-face) 7284 7309 (face font-lock-doc-face) 7309 7331 (face font-lock-doc-face) 7331 7344 (face font-lock-doc-face) 7344 7351 (face font-lock-doc-face) 7351 7355 (face font-lock-doc-face) 7355 7392 (face font-lock-doc-face) 7392 7405 (face font-lock-doc-face) 7405 7435 (face font-lock-doc-face) 7435 7478 (face font-lock-doc-face) 7478 7503 (face font-lock-doc-face) 7503 7525 (face font-lock-doc-face) 7525 7532 (face font-lock-doc-face) 7532 7540 (face font-lock-doc-face) 7540 7543 (face font-lock-keyword-face) 7544 7546 (face font-lock-keyword-face) 7547 7560 (face font-lock-function-name-face) 7561 7562 (face font-lock-type-face) 7567 7568 (syntax-table #1#) 7569 7573 (face font-lock-keyword-face) 7574 7580 (face font-lock-type-face) 7581 7588 (face font-lock-type-face) 7591 7594 (face font-lock-type-face) 7595 7601 (face font-lock-type-face) 7602 7603 (face font-lock-type-face) 7607 7612 (face font-lock-type-face) 7615 7624 (face font-lock-type-face) 7626 7631 (face font-lock-keyword-face) 7636 7637 (face font-lock-variable-name-face) 7639 7646 (face font-lock-type-face) 7649 7653 (face font-lock-type-face) 7655 7657 (fontified t) 7657 7661 (fontified t) 7661 7667 (fontified t face font-lock-constant-face) 7667 7676 (fontified t) 7676 7691 (fontified t face font-lock-string-face) 7691 7706 (fontified t) 7706 7710 (fontified t face font-lock-type-face) 7710 7730 (fontified t) 7730 7739 (fontified t face font-lock-variable-name-face) 7739 7741 (fontified t) 7741 7750 (fontified t face font-lock-type-face) 7750 7766 (fontified t) 7766 7768 (fontified t face font-lock-keyword-face) 7768 7792 (fontified t) 7792 7805 (fontified t face font-lock-type-face) 7805 7837 (fontified t) 7837 7843 (fontified t face font-lock-keyword-face) 7843 7844 (fontified t) 7844 7846 (fontified t face font-lock-type-face) 7846 7848 (fontified t) 7848 7852 (fontified t face font-lock-type-face) 7852 7883 (fontified t) 7883 7886 (fontified t face font-lock-type-face) 7886 7912 (fontified t) 7912 7953 (fontified t face font-lock-doc-face) 7953 7957 (fontified t face font-lock-doc-face) 7957 8019 (fontified t face font-lock-doc-face) 8019 8023 (fontified t face font-lock-doc-face) 8023 8034 (fontified t face font-lock-doc-face) 8034 8038 (fontified t face font-lock-doc-face) 8038 8116 (fontified t face font-lock-doc-face) 8116 8120 (fontified t face font-lock-doc-face) 8120 8147 (fontified t face font-lock-doc-face) 8147 8155 (face font-lock-doc-face fontified t) 8155 8184 (face font-lock-doc-face fontified t) 8184 8211 (fontified t face font-lock-doc-face) 8211 8215 (fontified t face font-lock-doc-face) 8215 8292 (fontified t face font-lock-doc-face) 8292 8310 (fontified t face font-lock-doc-face) 8310 8314 (fontified t face font-lock-doc-face) 8314 8339 (fontified t face font-lock-doc-face) 8339 8386 (fontified t face font-lock-doc-face) 8386 8426 (fontified t face font-lock-doc-face) 8426 8429 (fontified t face font-lock-keyword-face) 8429 8430 (fontified t) 8430 8432 (fontified t face font-lock-keyword-face) 8432 8433 (fontified t) 8433 8436 (fontified t face font-lock-function-name-face) 8436 8440 (fontified t) 8440 8441 (fontified t syntax-table #1#) 8441 8442 (fontified t) 8442 8446 (fontified t face font-lock-keyword-face) 8446 8447 (fontified t) 8447 8453 (fontified t face font-lock-type-face) 8453 8454 (fontified t) 8454 8461 (fontified t face font-lock-type-face) 8461 8464 (fontified t) 8464 8467 (fontified t face font-lock-type-face) 8467 8468 (fontified t) 8468 8471 (fontified t face font-lock-type-face) 8471 8474 (fontified t) 8474 8479 (fontified t face font-lock-type-face) 8479 8482 (fontified t) 8482 8491 (fontified t face font-lock-type-face) 8491 8495 (fontified t) 8495 8499 (fontified t face font-lock-type-face) 8499 8541 (fontified t) 8541 8547 (fontified t face font-lock-constant-face) 8547 8567 (fontified t) 8567 8579 (fontified t face font-lock-string-face) 8579 8581 (fontified t) 8581 8593 (fontified t face font-lock-string-face) 8593 8621 (fontified t) 8621 8630 (fontified t face font-lock-variable-name-face) 8630 8632 (fontified t) 8632 8641 (fontified t face font-lock-type-face) 8641 8665 (fontified t) 8665 8667 (fontified t face font-lock-keyword-face) 8667 8684 (fontified t) 8684 8691 (fontified t) 8691 8704 (face font-lock-type-face fontified t) 8704 8711 (fontified t) 8711 8720 (fontified t) 8720 8744 (fontified t) 8744 8750 (fontified t face font-lock-keyword-face) 8750 8751 (fontified t) 8751 8753 (fontified t face font-lock-type-face) 8753 8801 (fontified t) 8801 8804 (fontified t face font-lock-type-face) 8804 8876 (fontified t) 8876 8879 (fontified t face font-lock-type-face) 8879 8884 (fontified t) 8884 8967 (fontified t face font-lock-doc-face) 8967 8970 (fontified t face font-lock-keyword-face) 8970 8971 (fontified t) 8971 8977 (fontified t face font-lock-keyword-face) 8977 8978 (fontified t) 8978 8981 (fontified t face font-lock-type-face) 8981 8984 (fontified t) 8984 8988 (fontified t face font-lock-keyword-face) 8988 8989 (fontified t) 8989 8992 (fontified t face font-lock-type-face) 8992 8999 (fontified t) 8999 9028 (fontified t face font-lock-doc-face) 9028 9032 (fontified t) 9032 9036 (fontified t face font-lock-doc-face) 9036 9040 (fontified t) 9040 9103 (fontified t face font-lock-doc-face) 9103 9107 (fontified t) 9107 9111 (fontified t face font-lock-doc-face) 9111 9115 (fontified t) 9115 9123 (fontified t face font-lock-doc-face) 9123 9127 (fontified t) 9127 9155 (fontified t face font-lock-doc-face) 9155 9159 (fontified t) 9159 9184 (fontified t face font-lock-doc-face) 9184 9188 (fontified t) 9188 9214 (fontified t face font-lock-doc-face) 9214 9218 (fontified t) 9218 9220 (fontified t face font-lock-doc-face) 9220 9264 (face font-lock-doc-face fontified t) 9264 9268 (fontified t) 9268 9272 (fontified t face font-lock-doc-face) 9272 9276 (fontified t) 9276 9305 (fontified t face font-lock-doc-face) 9305 9309 (fontified t) 9309 9343 (fontified t face font-lock-doc-face) 9343 9347 (fontified t) 9347 9393 (fontified t face font-lock-doc-face) 9393 9397 (fontified t) 9397 9401 (fontified t face font-lock-doc-face) 9401 9405 (fontified t) 9405 9430 (fontified t face font-lock-doc-face) 9430 9434 (fontified t) 9434 9451 (fontified t face font-lock-doc-face) 9451 9455 (fontified t) 9455 9474 (fontified t face font-lock-doc-face) 9474 9478 (fontified t) 9478 9500 (fontified t face font-lock-doc-face) 9500 9504 (fontified t) 9504 9510 (fontified t face font-lock-doc-face) 9510 9514 (fontified t) 9514 9518 (fontified t face font-lock-doc-face) 9518 9522 (fontified t) 9522 9599 (fontified t face font-lock-doc-face) 9599 9603 (fontified t) 9603 9633 (fontified t face font-lock-doc-face) 9633 9634 (syntax-table #1# fontified t face font-lock-doc-face) 9634 9653 (fontified t face font-lock-doc-face) 9653 9654 (syntax-table #1# fontified t face font-lock-doc-face) 9654 9661 (fontified t face font-lock-doc-face) 9661 9665 (fontified t) 9665 9709 (fontified t face font-lock-doc-face) 9709 9713 (fontified t) 9713 9761 (fontified t face font-lock-doc-face) 9761 9764 (fontified t) 9764 9765 (fontified t) 9765 9818 (face font-lock-doc-face fontified t) 9818 9822 (fontified t) 9822 9836 (fontified t face font-lock-doc-face) 9836 9840 (fontified t) 9840 9906 (fontified t face font-lock-doc-face) 9906 9910 (fontified t) 9910 9952 (fontified t face font-lock-doc-face) 9952 9956 (fontified t) 9956 9990 (fontified t face font-lock-doc-face) 9990 9994 (fontified t) 9994 10057 (fontified t face font-lock-doc-face) 10057 10061 (fontified t) 10061 10084 (fontified t face font-lock-doc-face) 10084 10088 (fontified t) 10088 10124 (fontified t face font-lock-doc-face) 10124 10128 (fontified t) 10128 10142 (fontified t face font-lock-doc-face) 10142 10146 (fontified t) 10146 10180 (fontified t face font-lock-doc-face) 10180 10184 (fontified t) 10184 10222 (fontified t face font-lock-doc-face) 10222 10226 (fontified t) 10226 10255 (fontified t face font-lock-doc-face) 10255 10259 (fontified t) 10259 10301 (fontified t face font-lock-doc-face) 10301 10305 (fontified t) 10305 10318 (fontified t face font-lock-doc-face) 10318 10325 (fontified t face font-lock-doc-face) 10325 10329 (fontified t) 10329 10336 (fontified t face font-lock-doc-face) 10336 10352 (face font-lock-doc-face fontified t) 10352 10356 (fontified t) 10356 10368 (fontified t face font-lock-doc-face) 10368 10372 (fontified t) 10372 10398 (fontified t face font-lock-doc-face) 10398 10402 (fontified t) 10402 10410 (fontified t face font-lock-doc-face) 10410 10414 (fontified t) 10414 10418 (fontified t face font-lock-doc-face) 10418 10422 (fontified t) 10422 10458 (fontified t face font-lock-doc-face) 10458 10462 (fontified t) 10462 10485 (fontified t face font-lock-doc-face) 10485 10489 (fontified t) 10489 10524 (face font-lock-doc-face fontified t) 10524 10533 (fontified t face font-lock-doc-face) 10533 10537 (fontified t) 10537 10559 (fontified t face font-lock-doc-face) 10559 10563 (fontified t) 10563 10584 (fontified t face font-lock-doc-face) 10584 10588 (fontified t) 10588 10610 (fontified t face font-lock-doc-face) 10610 10614 (fontified t) 10614 10618 (fontified t face font-lock-doc-face) 10618 10622 (fontified t) 10622 10638 (fontified t face font-lock-doc-face) 10638 10642 (fontified t) 10642 10655 (fontified t face font-lock-doc-face) 10655 10659 (fontified t) 10659 10667 (fontified t face font-lock-doc-face) 10667 10668 (fontified t syntax-table #3=(15) face font-lock-doc-face) 10668 10683 (fontified t face font-lock-doc-face) 10683 10687 (fontified t) 10687 10691 (fontified t face font-lock-doc-face) 10691 10695 (fontified t) 10695 10710 (fontified t face font-lock-doc-face) 10710 10714 (fontified t) 10714 10737 (fontified t face font-lock-doc-face) 10737 10741 (fontified t) 10741 10765 (fontified t face font-lock-doc-face) 10765 10769 (fontified t) 10769 10778 (fontified t face font-lock-doc-face) 10778 10782 (fontified t) 10782 10798 (fontified t face font-lock-doc-face) 10798 10802 (fontified t) 10802 10806 (fontified t face font-lock-doc-face) 10806 10810 (fontified t) 10810 10825 (fontified t face font-lock-doc-face) 10825 10845 (fontified t face font-lock-doc-face) 10845 10849 (fontified t) 10849 10858 (fontified t face font-lock-doc-face) 10858 10862 (fontified t) 10862 10866 (fontified t face font-lock-doc-face) 10866 10870 (fontified t) 10870 10877 (fontified t face font-lock-doc-face) 10877 10881 (fontified t) 10881 10888 (fontified t face font-lock-doc-face) 10888 10892 (fontified t) 10892 10900 (fontified t face font-lock-doc-face) 10900 10904 (fontified t) 10904 10907 (fontified t face font-lock-keyword-face) 10907 10908 (fontified t) 10908 10910 (fontified t face font-lock-keyword-face) 10910 10911 (fontified t) 10911 10916 (fontified t face font-lock-function-name-face) 10916 10917 (fontified t) 10917 10918 (fontified t face font-lock-type-face) 10918 10920 (fontified t) 10920 10924 (fontified t face font-lock-keyword-face) 10924 10926 (fontified t) 10926 10938 (fontified t face font-lock-variable-name-face) 10938 10940 (fontified t) 10940 10941 (fontified t face font-lock-type-face) 10941 10944 (fontified t) 10944 10945 (fontified t syntax-table #1#) 10945 10946 (fontified t) 10946 10950 (fontified t face font-lock-keyword-face) 10950 10951 (fontified t) 10951 10956 (fontified t face font-lock-type-face) 10956 10961 (fontified t) 10961 10966 (fontified t face font-lock-keyword-face) 10966 10975 (fontified t) 10975 10976 (fontified t face font-lock-variable-name-face) 10976 10978 (fontified t) 10978 10984 (fontified t face font-lock-type-face) 10984 10987 (fontified t) 10987 10991 (fontified t face font-lock-type-face) 10991 10995 (fontified t) 10995 11001 (fontified t face font-lock-keyword-face) 11001 11011 (fontified t) 11011 11012 (fontified t face font-lock-type-face) 11012 11014 (fontified t) 11014 11018 (fontified t face font-lock-variable-name-face) 11018 11020 (fontified t) 11020 11024 (fontified t face font-lock-type-face) 11024 11035 (face font-lock-type-face fontified t) 11035 11037 (fontified t) 11037 11045 (fontified t) 11045 11046 (fontified t face font-lock-type-face) 11046 11048 (fontified t) 11048 11053 (fontified t face font-lock-variable-name-face) 11053 11055 (fontified t) 11055 11063 (fontified t face font-lock-type-face) 11063 11066 (fontified t) 11066 11070 (fontified t face font-lock-type-face) 11070 11073 (fontified t) 11073 11077 (fontified t face font-lock-type-face) 11077 11081 (fontified t) 11081 11087 (fontified t face font-lock-keyword-face) 11087 11103 (fontified t) 11103 11111 (fontified t face font-lock-type-face) 11111 11138 (fontified t) 11138 11142 (fontified t face font-lock-keyword-face) 11142 11143 (fontified t) 11143 11146 (fontified t face font-lock-constant-face) 11146 11148 (fontified t) 11148 11153 (fontified t face font-lock-type-face) 11153 11154 (fontified t) 11154 11157 (fontified t face font-lock-keyword-face) 11157 11158 (fontified t) 11158 11161 (fontified t face font-lock-type-face) 11161 11168 (fontified t) 11168 11170 (fontified t face font-lock-keyword-face) 11170 11171 (fontified t) 11171 11174 (fontified t face font-lock-function-name-face) 11174 11176 (fontified t) 11176 11180 (fontified t face font-lock-keyword-face) 11180 11182 (fontified t) 11182 11183 (fontified t face font-lock-variable-name-face) 11183 11186 (fontified t) 11186 11189 (fontified t face font-lock-keyword-face) 11189 11190 (fontified t) 11190 11193 (fontified t face font-lock-constant-face) 11193 11195 (fontified t) 11195 11204 (fontified t face font-lock-type-face) 11204 11207 (fontified t) 11207 11208 (syntax-table #1# fontified t) 11208 11209 (fontified t) 11209 11212 (fontified t face font-lock-constant-face) 11212 11214 (fontified t) 11214 11220 (fontified t face font-lock-type-face) 11220 11246 (fontified t) 11246 11251 (fontified t face font-lock-string-face) 11251 11271 (fontified t) 11271 11310 (fontified t face font-lock-preprocessor-face) 11310 11311 (fontified t) 11311 11317 (fontified t face font-lock-keyword-face) 11317 11318 (fontified t) 11318 11326 (fontified t face font-lock-type-face) 11326 11327 (fontified t) 11327 11328 (fontified t face font-lock-type-face) 11328 11336 (fontified t) 11336 11345 (fontified t face font-lock-variable-name-face) 11345 11348 (fontified t face font-lock-variable-name-face) 11348 11350 (fontified t) 11350 11351 (fontified t face font-lock-type-face) 11351 11353 (fontified t) 11353 11356 (fontified t) 11356 11360 (fontified t face font-lock-keyword-face) 11360 11361 (fontified t) 11361 11362 (fontified t face font-lock-type-face) 11362 11364 (fontified t) 11364 11375 (fontified t face font-lock-type-face) 11375 11376 (fontified t) 11376 11379 (fontified t face font-lock-keyword-face) 11379 11380 (fontified t) 11380 11388 (fontified t face font-lock-type-face) 11388 11389 (fontified t) 11389 11390 (fontified t face font-lock-type-face) 11390 11392 (fontified t) 11392 11397 (fontified t face font-lock-keyword-face) 11397 11398 (fontified t) 11398 11402 (fontified t) 11402 11403 (fontified t face font-lock-variable-name-face) 11403 11405 (fontified t) 11405 11411 (fontified t face font-lock-type-face) 11411 11414 (fontified t) 11414 11418 (fontified t face font-lock-type-face) 11418 11422 (fontified t) 11422 11428 (fontified t face font-lock-keyword-face) 11428 11430 (fontified t) 11430 11434 (fontified t) 11434 11435 (fontified t face font-lock-type-face) 11435 11437 (fontified t) 11437 11441 (fontified t face font-lock-variable-name-face) 11441 11443 (fontified t) 11443 11458 (fontified t face font-lock-type-face) 11458 11464 (fontified t) 11464 11465 (fontified t face font-lock-type-face) 11465 11467 (fontified t) 11467 11472 (fontified t face font-lock-variable-name-face) 11472 11474 (fontified t) 11474 11482 (fontified t face font-lock-type-face) 11482 11485 (fontified t) 11485 11489 (fontified t face font-lock-type-face) 11489 11492 (fontified t) 11492 11496 (fontified t face font-lock-type-face) 11496 11500 (fontified t) 11500 11506 (fontified t face font-lock-keyword-face) 11506 11514 (fontified t) 11514 11523 (fontified t face font-lock-preprocessor-face) 11523 11528 (fontified t) 11528 11530 (fontified t face font-lock-keyword-face) 11530 11531 (fontified t) 11531 11544 (fontified t face font-lock-function-name-face) 11544 11545 (fontified t) 11545 11549 (fontified t face font-lock-keyword-face) 11549 11552 (fontified t) 11552 11553 (syntax-table #1# fontified t) 11553 11554 (fontified t) 11554 11562 (fontified t face font-lock-type-face) 11562 11573 (fontified t) 11573 11576 (fontified t face font-lock-keyword-face) 11576 11577 (fontified t) 11577 11588 (fontified t face font-lock-variable-name-face) 11588 11591 (fontified t) 11591 11595 (fontified t face font-lock-keyword-face) 11595 11596 (fontified t) 11596 11622 (fontified t) 11622 11669 (fontified t) 11669 11672 (fontified t face font-lock-comment-delimiter-face) 11672 11693 (fontified t face font-lock-comment-face) 11693 11709 (fontified t) 11709 11715 (fontified t face font-lock-preprocessor-face) 11715 11716 (fontified t) 11716 11738 (fontified t face font-lock-string-face) 11738 11764 (fontified t) 11764 11772 (fontified t face font-lock-type-face) 11772 11773 (fontified t) 11773 11787 (fontified t) 11787 11818 (fontified t) 11818 11828 (fontified t face font-lock-type-face) 11828 11847 (fontified t) 11847 11848 (fontified t) 11848 11853 (fontified t) 11853 11856 (fontified t) 11856 11859 (fontified t face font-lock-keyword-face) 11859 11860 (fontified t) 11860 11863 (fontified t face font-lock-keyword-face) 11863 11864 (fontified t) 11864 11867 (fontified t face font-lock-variable-name-face) 11867 11870 (fontified t) 11870 11878 (fontified t face font-lock-type-face) 11878 11884 (fontified t) 11884 11888 (fontified t face font-lock-type-face) 11888 11917 (fontified t) 11917 11925 (fontified t) 11925 11928 (fontified t face font-lock-comment-delimiter-face) 11928 11957 (fontified t face font-lock-comment-face) 11957 12003 (fontified t) 12003 12015 (fontified t face font-lock-type-face) 12015 12017 (fontified t) 12017 12028 (fontified t face font-lock-type-face) 12028 12042 (fontified t) 12042 12061 (fontified t face font-lock-string-face) 12061 12073 (fontified t) 12073 12076 (fontified t face font-lock-comment-delimiter-face) 12076 12106 (fontified t face font-lock-comment-face) 12106 12122 (fontified t) 12122 12132 (fontified t) 12132 12152 (fontified t) 12152 12165 (fontified t face font-lock-type-face) 12165 12167 (fontified t) 12167 12178 (fontified t face font-lock-type-face) 12178 12192 (fontified t) 12192 12202 (fontified t face font-lock-string-face) 12202 12227 (fontified t) 12227 12266 (fontified t face font-lock-preprocessor-face) 12266 12267 (fontified t) 12267 12316 (face font-lock-doc-face fontified t) 12316 12345 (fontified t face font-lock-doc-face) 12345 12392 (fontified t face font-lock-doc-face) 12392 12393 (fontified t face font-lock-doc-face) 12393 12396 (fontified t face font-lock-keyword-face) 12396 12397 (fontified t) 12397 12403 (fontified t face font-lock-keyword-face) 12403 12404 (fontified t) 12404 12413 (fontified t face font-lock-type-face) 12413 12416 (fontified t face font-lock-type-face) 12416 12417 (fontified t) 12417 12418 (fontified t face font-lock-type-face) 12418 12422 (fontified t) 12422 12426 (fontified t) 12426 12438 (fontified t face font-lock-variable-name-face) 12438 12440 (fontified t) 12440 12441 (fontified t face font-lock-type-face) 12441 12447 (fontified t) 12447 12459 (fontified t face font-lock-variable-name-face) 12459 12461 (fontified t) 12461 12467 (fontified t face font-lock-type-face) 12467 12473 (fontified t) 12473 12474 (fontified t face font-lock-variable-name-face) 12474 12485 (fontified t face font-lock-variable-name-face) 12485 12487 (fontified t) 12487 12495 (fontified t face font-lock-type-face) 12495 12497 (fontified t) 12497 12501 (fontified t) 12501 12512 (fontified t face font-lock-variable-name-face) 12512 12514 (fontified t) 12514 12519 (fontified t face font-lock-type-face) 12519 12523 (fontified t) 12523 12527 (fontified t face font-lock-keyword-face) 12527 12528 (fontified t) 12528 12529 (fontified t face font-lock-type-face) 12529 12531 (fontified t) 12531 12543 (fontified t face font-lock-type-face) 12543 12544 (fontified t) 12544 12545 (fontified t face font-lock-type-face) 12545 12548 (fontified t) 12548 12549 (fontified t) 12549 12553 (fontified t) 12553 12608 (fontified t face font-lock-doc-face) 12608 12609 (fontified t face font-lock-doc-face) 12609 12613 (fontified t) 12613 12616 (fontified t face font-lock-keyword-face) 12616 12617 (fontified t) 12617 12619 (fontified t face font-lock-keyword-face) 12619 12620 (fontified t) 12620 12633 (fontified t face font-lock-function-name-face) 12633 12634 (fontified t) 12634 12637 (fontified t face font-lock-keyword-face) 12637 12638 (fontified t) 12638 12642 (fontified t face font-lock-keyword-face) 12642 12644 (fontified t) 12644 12648 (fontified t face font-lock-variable-name-face) 12648 12650 (fontified t) 12650 12658 (fontified t face font-lock-type-face) 12658 12661 (fontified t) 12661 12662 (fontified t syntax-table #1#) 12662 12663 (fontified t) 12663 12667 (fontified t face font-lock-type-face) 12667 12669 (fontified t) 12669 12670 (fontified t) 12670 12678 (fontified t) 12678 12682 (fontified t face font-lock-keyword-face) 12682 12683 (fontified t) 12683 12704 (fontified t) 12704 12712 (fontified t) 12712 12716 (fontified t face font-lock-keyword-face) 12716 12717 (fontified t) 12717 12723 (fontified t) 12723 12724 (fontified t) 12724 12728 (fontified t) 12728 12777 (fontified t face font-lock-doc-face) 12777 12778 (fontified t face font-lock-doc-face) 12778 12782 (fontified t) 12782 12785 (fontified t face font-lock-keyword-face) 12785 12786 (fontified t) 12786 12788 (fontified t face font-lock-keyword-face) 12788 12789 (fontified t) 12789 12798 (fontified t face font-lock-function-name-face) 12798 12799 (fontified t) 12799 12802 (fontified t face font-lock-keyword-face) 12802 12803 (fontified t) 12803 12807 (fontified t face font-lock-keyword-face) 12807 12809 (fontified t) 12809 12813 (fontified t face font-lock-variable-name-face) 12813 12815 (fontified t) 12815 12816 (fontified t face font-lock-type-face) 12816 12821 (face font-lock-type-face fontified t) 12821 12824 (fontified t) 12824 12825 (syntax-table #1# fontified t) 12825 12826 (fontified t) 12826 12830 (face font-lock-type-face fontified t) 12830 12831 (fontified t) 12831 12832 (fontified t) 12832 12833 (fontified t) 12833 12841 (fontified t) 12841 12845 (fontified t face font-lock-keyword-face) 12845 12846 (fontified t) 12846 12860 (fontified t) 12860 12867 (fontified t) 12867 12875 (fontified t) 12875 12879 (fontified t face font-lock-keyword-face) 12879 12880 (fontified t) 12880 12886 (fontified t) 12886 12889 (fontified t) 12889 12926 (fontified t face font-lock-doc-face) 12926 12963 (fontified t face font-lock-doc-face) 12963 13003 (fontified t face font-lock-doc-face) 13003 13006 (fontified t face font-lock-doc-face) 13006 13035 (fontified t face font-lock-doc-face) 13035 13046 (fontified t face font-lock-doc-face) 13046 13109 (fontified t face font-lock-doc-face) 13109 13110 (fontified t face font-lock-doc-face) 13110 13114 (fontified t face font-lock-doc-face) 13114 13124 (fontified t face font-lock-doc-face) 13124 13133 (fontified t face font-lock-doc-face) 13133 13140 (fontified t face font-lock-doc-face) 13140 13162 (fontified t face font-lock-doc-face) 13162 13163 (fontified t face font-lock-doc-face) 13163 13180 (fontified t face font-lock-doc-face) 13180 13181 (fontified t syntax-table #1# face font-lock-doc-face) 13181 13182 (fontified t face font-lock-doc-face) 13182 13190 (fontified t face font-lock-doc-face) 13190 13191 (fontified t syntax-table #1# face font-lock-doc-face) 13191 13198 (fontified t face font-lock-doc-face) 13198 13205 (fontified t face font-lock-doc-face) 13205 13224 (fontified t face font-lock-doc-face) 13224 13278 (fontified t face font-lock-doc-face) 13278 13280 (fontified t face font-lock-doc-face) 13280 13295 (fontified t face font-lock-doc-face) 13295 13327 (fontified t face font-lock-doc-face) 13327 13333 (fontified t face font-lock-doc-face) 13333 13338 (face font-lock-doc-face fontified t) 13338 13358 (face font-lock-doc-face fontified t) 13358 13364 (fontified t face font-lock-doc-face) 13364 13367 (fontified t face font-lock-doc-face) 13367 13380 (fontified t face font-lock-doc-face) 13380 13386 (fontified t face font-lock-doc-face) 13386 13411 (fontified t face font-lock-doc-face) 13411 13414 (fontified t face font-lock-keyword-face) 13414 13415 (fontified t) 13415 13417 (fontified t face font-lock-keyword-face) 13417 13418 (fontified t) 13418 13422 (fontified t face font-lock-function-name-face) 13422 13423 (fontified t) 13423 13424 (fontified t face font-lock-type-face) 13424 13431 (fontified t) 13431 13443 (fontified t face font-lock-variable-name-face) 13443 13445 (fontified t) 13445 13446 (fontified t face font-lock-type-face) 13446 13452 (fontified t) 13452 13463 (fontified t face font-lock-variable-name-face) 13463 13465 (fontified t face font-lock-variable-name-face) 13465 13467 (fontified t) 13467 13471 (fontified t face font-lock-keyword-face) 13471 13472 (fontified t) 13472 13476 (fontified t face font-lock-type-face) 13476 13477 (fontified t) 13477 13483 (fontified t face font-lock-type-face) 13483 13484 (fontified t) 13484 13492 (fontified t face font-lock-type-face) 13492 13496 (fontified t) 13496 13499 (fontified t) 13499 13500 (fontified t syntax-table #1#) 13500 13501 (fontified t) 13501 13505 (fontified t face font-lock-keyword-face) 13505 13506 (fontified t) 13506 13512 (fontified t face font-lock-type-face) 13512 13518 (fontified t) 13518 13522 (fontified t face font-lock-type-face) 13522 13525 (fontified t) 13525 13529 (fontified t face font-lock-keyword-face) 13529 13530 (fontified t) 13530 13545 (fontified t face font-lock-type-face) 13545 13546 (fontified t) 13546 13548 (fontified t) 13548 13552 (fontified t face font-lock-type-face) 13552 13556 (fontified t) 13556 13562 (fontified t face font-lock-keyword-face) 13562 13564 (fontified t) 13564 13568 (fontified t) 13568 13573 (fontified t face font-lock-type-face) 13573 13576 (fontified t) 13576 13580 (fontified t face font-lock-keyword-face) 13580 13581 (fontified t) 13581 13589 (fontified t face font-lock-type-face) 13589 13592 (fontified t) 13592 13596 (fontified t face font-lock-type-face) 13596 13599 (fontified t) 13599 13603 (fontified t face font-lock-type-face) 13603 13607 (fontified t) 13607 13610 (fontified t face font-lock-keyword-face) 13610 13613 (fontified t face font-lock-keyword-face) 13613 13615 (fontified t) 13615 13619 (fontified t) 13619 13623 (fontified t face font-lock-type-face) 13623 13636 (fontified t) 13636 13642 (fontified t face font-lock-keyword-face) 13642 13643 (fontified t) 13643 13648 (fontified t face font-lock-keyword-face) 13648 13653 (fontified t) 13653 13654 (fontified t face font-lock-variable-name-face) 13654 13656 (fontified t) 13656 13662 (fontified t face font-lock-type-face) 13662 13665 (fontified t) 13665 13669 (fontified t face font-lock-type-face) 13669 13673 (fontified t) 13673 13679 (fontified t face font-lock-keyword-face) 13679 13685 (fontified t) 13685 13686 (fontified t face font-lock-type-face) 13686 13688 (fontified t) 13688 13692 (fontified t face font-lock-variable-name-face) 13692 13694 (fontified t) 13694 13698 (fontified t face font-lock-type-face) 13698 13709 (fontified t face font-lock-type-face) 13709 13712 (fontified t) 13712 13716 (fontified t face font-lock-type-face) 13716 13718 (fontified t) 13718 13722 (fontified t) 13722 13723 (fontified t face font-lock-type-face) 13723 13725 (fontified t) 13725 13730 (fontified t face font-lock-variable-name-face) 13730 13732 (fontified t) 13732 13740 (fontified t face font-lock-type-face) 13740 13743 (fontified t) 13743 13747 (fontified t face font-lock-type-face) 13747 13750 (fontified t) 13750 13754 (fontified t face font-lock-type-face) 13754 13758 (fontified t) 13758 13764 (fontified t face font-lock-keyword-face) 13764 13772 (fontified t) 13772 13775 (fontified t face font-lock-keyword-face) 13775 13776 (fontified t) 13776 13780 (fontified t face font-lock-variable-name-face) 13780 13788 (fontified t face font-lock-variable-name-face) 13788 13805 (fontified t) 13805 13848 (fontified t) 13848 13856 (fontified t face font-lock-type-face) 13856 13858 (fontified t) 13858 13874 (fontified t) 13874 13878 (fontified t) 13878 13881 (fontified t face font-lock-keyword-face) 13881 13882 (fontified t) 13882 13893 (fontified t face font-lock-variable-name-face) 13893 13896 (fontified t) 13896 13901 (fontified t face font-lock-type-face) 13901 13902 (fontified t) 13902 13911 (fontified t) 13911 13930 (fontified t) 13930 13934 (fontified t) 13934 13946 (fontified t face font-lock-type-face) 13946 13979 (fontified t) 13979 13991 (fontified t face font-lock-variable-name-face) 13991 13993 (fontified t) 13993 13995 (fontified t face font-lock-string-face) 13995 14061 (fontified t) 14061 14064 (fontified t face font-lock-doc-face) 14064 14115 (fontified t face font-lock-doc-face) 14115 14133 (fontified t face font-lock-doc-face) 14133 14137 (fontified t face font-lock-doc-face) 14137 14218 (fontified t face font-lock-doc-face) 14218 14221 (fontified t face font-lock-doc-face) 14221 14302 (fontified t face font-lock-doc-face) 14302 14337 (fontified t face font-lock-doc-face) 14337 14341 (fontified t face font-lock-doc-face) 14341 14374 (fontified t face font-lock-doc-face) 14374 14402 (face font-lock-doc-face fontified t) 14402 14425 (face font-lock-doc-face fontified t) 14425 14509 (fontified t face font-lock-doc-face) 14509 14528 (fontified t face font-lock-doc-face) 14528 14529 (fontified t face font-lock-doc-face) 14529 14533 (fontified t face font-lock-doc-face) 14533 14537 (fontified t face font-lock-doc-face) 14537 14539 (fontified t face font-lock-doc-face) 14539 14540 (fontified t face font-lock-doc-face) 14540 14541 (fontified t face font-lock-doc-face) 14541 14545 (fontified t face font-lock-doc-face) 14545 14548 (fontified t face font-lock-doc-face) 14548 14549 (fontified t face font-lock-doc-face) 14549 14552 (fontified t face font-lock-doc-face) 14552 14554 (fontified t face font-lock-doc-face) 14554 14558 (fontified t face font-lock-doc-face) 14558 14560 (fontified t face font-lock-doc-face) 14560 14568 (fontified t face font-lock-doc-face) 14568 14570 (fontified t face font-lock-doc-face) 14570 14574 (fontified t face font-lock-doc-face) 14574 14577 (fontified t face font-lock-doc-face) 14577 14578 (fontified t face font-lock-doc-face) 14578 14583 (fontified t face font-lock-doc-face) 14583 14586 (fontified t face font-lock-doc-face) 14586 14591 (fontified t face font-lock-doc-face) 14591 14598 (fontified t face font-lock-doc-face) 14598 14603 (fontified t face font-lock-doc-face) 14603 14605 (fontified t face font-lock-doc-face) 14605 14613 (fontified t face font-lock-doc-face) 14613 14616 (fontified t face font-lock-doc-face) 14616 14620 (fontified t face font-lock-doc-face) 14620 14623 (fontified t face font-lock-doc-face) 14623 14624 (fontified t face font-lock-doc-face) 14624 14628 (fontified t face font-lock-doc-face) 14628 14631 (fontified t face font-lock-doc-face) 14631 14637 (fontified t face font-lock-doc-face) 14637 14639 (fontified t face font-lock-doc-face) 14639 14645 (fontified t face font-lock-doc-face) 14645 14648 (fontified t face font-lock-doc-face) 14648 14652 (fontified t face font-lock-doc-face) 14652 14653 (fontified t face font-lock-doc-face) 14653 14657 (fontified t face font-lock-doc-face) 14657 14659 (fontified t face font-lock-doc-face) 14659 14660 (fontified t face font-lock-doc-face) 14660 14664 (fontified t face font-lock-doc-face) 14664 14667 (fontified t face font-lock-doc-face) 14667 14668 (fontified t face font-lock-doc-face) 14668 14669 (fontified t face font-lock-doc-face) 14669 14673 (fontified t face font-lock-doc-face) 14673 14677 (fontified t face font-lock-doc-face) 14677 14680 (fontified t face font-lock-doc-face) 14680 14681 (fontified t face font-lock-doc-face) 14681 14687 (fontified t face font-lock-doc-face) 14687 14690 (fontified t face font-lock-doc-face) 14690 14694 (fontified t face font-lock-doc-face) 14694 14701 (fontified t face font-lock-doc-face) 14701 14708 (fontified t face font-lock-doc-face) 14708 14710 (fontified t face font-lock-doc-face) 14710 14714 (fontified t face font-lock-doc-face) 14714 14727 (fontified t face font-lock-doc-face) 14727 14731 (fontified t face font-lock-doc-face) 14731 14740 (fontified t face font-lock-doc-face) 14740 14744 (fontified t face font-lock-doc-face) 14744 14758 (fontified t face font-lock-doc-face) 14758 14761 (fontified t face font-lock-doc-face) 14761 14763 (fontified t face font-lock-doc-face) 14763 14767 (fontified t face font-lock-doc-face) 14767 14769 (fontified t face font-lock-doc-face) 14769 14772 (fontified t face font-lock-doc-face) 14772 14774 (fontified t face font-lock-doc-face) 14774 14777 (fontified t face font-lock-doc-face) 14777 14781 (fontified t face font-lock-doc-face) 14781 14785 (fontified t face font-lock-doc-face) 14785 14797 (fontified t face font-lock-doc-face) 14797 14800 (fontified t face font-lock-doc-face) 14800 14801 (fontified t face font-lock-doc-face) 14801 14804 (fontified t face font-lock-doc-face) 14804 14805 (fontified t face font-lock-doc-face) 14805 14812 (fontified t face font-lock-doc-face) 14812 14814 (fontified t face font-lock-doc-face) 14814 14817 (fontified t face font-lock-doc-face) 14817 14823 (fontified t face font-lock-doc-face) 14823 14827 (fontified t face font-lock-doc-face) 14827 14839 (fontified t face font-lock-doc-face) 14839 14842 (fontified t face font-lock-doc-face) 14842 14843 (fontified t face font-lock-doc-face) 14843 14855 (fontified t face font-lock-doc-face) 14855 14858 (fontified t face font-lock-doc-face) 14858 14866 (fontified t face font-lock-doc-face) 14866 14879 (fontified t face font-lock-doc-face) 14879 14887 (fontified t face font-lock-doc-face) 14887 14908 (fontified t face font-lock-doc-face) 14908 14912 (fontified t face font-lock-doc-face) 14912 14919 (fontified t face font-lock-doc-face) 14919 14923 (fontified t face font-lock-doc-face) 14923 14953 (fontified t face font-lock-doc-face) 14953 14957 (fontified t face font-lock-doc-face) 14957 14973 (fontified t face font-lock-doc-face) 14973 14976 (fontified t face font-lock-doc-face) 14976 14985 (fontified t face font-lock-doc-face) 14985 15001 (fontified t face font-lock-doc-face) 15001 15005 (fontified t face font-lock-doc-face) 15005 15020 (fontified t face font-lock-doc-face) 15020 15021 (fontified t face font-lock-doc-face) 15021 15025 (fontified t face font-lock-doc-face) 15025 15027 (fontified t face font-lock-doc-face) 15027 15030 (fontified t face font-lock-doc-face) 15030 15046 (fontified t face font-lock-doc-face) 15046 15050 (fontified t face font-lock-doc-face) 15050 15063 (fontified t face font-lock-doc-face) 15063 15066 (fontified t face font-lock-doc-face) 15066 15070 (fontified t face font-lock-doc-face) 15070 15082 (fontified t face font-lock-doc-face) 15082 15084 (fontified t face font-lock-doc-face) 15084 15085 (fontified t face font-lock-doc-face) 15085 15116 (fontified t face font-lock-doc-face) 15116 15119 (fontified t face font-lock-doc-face) 15119 15120 (fontified t face font-lock-doc-face) 15120 15124 (fontified t face font-lock-doc-face) 15124 15163 (fontified t face font-lock-doc-face) 15163 15164 (fontified t face font-lock-doc-face) 15164 15176 (fontified t face font-lock-doc-face) 15176 15178 (fontified t face font-lock-doc-face) 15178 15222 (fontified t face font-lock-doc-face) 15222 15242 (fontified t face font-lock-doc-face) 15242 15247 (fontified t face font-lock-doc-face) 15247 15287 (fontified t face font-lock-doc-face) 15287 15288 (fontified t face font-lock-doc-face) 15288 15305 (fontified t face font-lock-doc-face) 15305 15307 (fontified t face font-lock-doc-face) 15307 15308 (fontified t face font-lock-doc-face) 15308 15310 (fontified t face font-lock-doc-face) 15310 15314 (fontified t face font-lock-doc-face) 15314 15319 (fontified t face font-lock-doc-face) 15319 15326 (fontified t face font-lock-doc-face) 15326 15330 (fontified t face font-lock-doc-face) 15330 15334 (fontified t face font-lock-doc-face) 15334 15338 (fontified t face font-lock-doc-face) 15338 15344 (fontified t face font-lock-doc-face) 15344 15383 (fontified t face font-lock-doc-face) 15383 15387 (fontified t face font-lock-doc-face) 15387 15388 (rear-nonsticky t fontified t face font-lock-doc-face) 15388 15389 (fontified t face font-lock-doc-face) 15389 15393 (fontified t face font-lock-doc-face) 15393 15394 (fontified t face font-lock-doc-face) 15394 15395 (fontified t face font-lock-doc-face) 15395 15396 (fontified t face font-lock-doc-face) 15396 15397 (fontified t face font-lock-doc-face) 15397 15401 (fontified t face font-lock-doc-face) 15401 15473 (fontified t face font-lock-doc-face) 15473 15477 (fontified t face font-lock-doc-face) 15477 15480 (fontified t face font-lock-keyword-face) 15480 15481 (fontified t) 15481 15483 (fontified t face font-lock-keyword-face) 15483 15484 (fontified t) 15484 15494 (fontified t face font-lock-function-name-face) 15494 15495 (fontified t) 15495 15496 (fontified t face font-lock-type-face) 15496 15497 (fontified t) 15497 15498 (fontified t) 15498 15501 (fontified t face font-lock-variable-name-face) 15501 15510 (fontified t face font-lock-variable-name-face) 15510 15512 (fontified t) 15512 15513 (fontified t face font-lock-type-face) 15513 15516 (fontified t) 15516 15517 (syntax-table #1# fontified t) 15517 15518 (fontified t) 15518 15530 (fontified t face font-lock-type-face) 15530 15531 (fontified t) 15531 15532 (fontified t face font-lock-type-face) 15532 15534 (fontified t) 15534 15539 (fontified t face font-lock-keyword-face) 15539 15544 (fontified t) 15544 15545 (fontified t face font-lock-variable-name-face) 15545 15547 (fontified t) 15547 15553 (fontified t face font-lock-type-face) 15553 15556 (fontified t) 15556 15560 (fontified t face font-lock-type-face) 15560 15564 (fontified t) 15564 15568 (fontified t face font-lock-keyword-face) 15568 15570 (fontified t face font-lock-keyword-face) 15570 15572 (fontified t) 15572 15576 (fontified t) 15576 15577 (fontified t face font-lock-type-face) 15577 15579 (fontified t) 15579 15583 (fontified t face font-lock-variable-name-face) 15583 15585 (fontified t) 15585 15589 (fontified t face font-lock-type-face) 15589 15600 (fontified t face font-lock-type-face) 15600 15603 (fontified t) 15603 15607 (fontified t face font-lock-type-face) 15607 15609 (fontified t) 15609 15613 (fontified t) 15613 15614 (fontified t face font-lock-type-face) 15614 15616 (fontified t) 15616 15621 (fontified t face font-lock-variable-name-face) 15621 15623 (fontified t) 15623 15631 (fontified t face font-lock-type-face) 15631 15634 (fontified t) 15634 15638 (fontified t face font-lock-type-face) 15638 15641 (fontified t) 15641 15645 (fontified t face font-lock-type-face) 15645 15649 (fontified t) 15649 15650 (fontified t face font-lock-keyword-face) 15650 15655 (fontified t face font-lock-keyword-face) 15655 15657 (fontified t) 15657 15663 (fontified t) 15663 15666 (fontified t face font-lock-keyword-face) 15666 15667 (fontified t) 15667 15679 (fontified t face font-lock-variable-name-face) 15679 15682 (fontified t) 15682 15690 (fontified t face font-lock-type-face) 15690 15711 (fontified t) 15711 15714 (fontified t face font-lock-keyword-face) 15714 15715 (fontified t) 15715 15726 (fontified t face font-lock-variable-name-face) 15726 15729 (fontified t) 15729 15734 (fontified t face font-lock-type-face) 15734 15763 (fontified t) 15763 15765 (fontified t) 15765 15767 (fontified t) 15767 15779 (fontified t face font-lock-type-face) 15779 15782 (fontified t) 15782 15793 (fontified t) 15793 15804 (fontified t) 15804 15805 (fontified t) 15805 15812 (fontified t) 15812 15821 (fontified t face font-lock-variable-name-face) 15821 15824 (fontified t face font-lock-variable-name-face) 15824 15826 (fontified t) 15826 15828 (fontified t face font-lock-string-face) 15828 15842 (fontified t) 15842 15883 (fontified t) 15883 15885 (fontified t) 15894 15897 (face font-lock-keyword-face) 15897 15898 (face font-lock-keyword-face) 15899 15900 (face font-lock-type-face) 15902 15908 (face font-lock-type-face) 15909 15912 (face font-lock-keyword-face) 15913 15925 (face font-lock-type-face) 15926 15927 (face font-lock-type-face) 15929 15934 (face font-lock-keyword-face) 15939 15940 (face font-lock-variable-name-face) 15942 15948 (face font-lock-type-face) 15951 15955 (face font-lock-type-face) 15959 15965 (face font-lock-keyword-face) 15971 15972 (face font-lock-type-face) 15974 15978 (face font-lock-variable-name-face) 15980 15995 (face font-lock-type-face) 16001 16002 (face font-lock-type-face) 16004 16009 (face font-lock-variable-name-face) 16011 16019 (face font-lock-type-face) 16022 16026 (face font-lock-type-face) 16029 16033 (face font-lock-type-face) 16037 16043 (face font-lock-keyword-face) 16051 16055 (face font-lock-keyword-face) 16056 16060 (face font-lock-type-face) 16063 16072 (face font-lock-type-face) 16072 16084 (face font-lock-type-face) 16085 16086 (face font-lock-type-face) 16088 16092 (face font-lock-type-face) 16094 16104 (face font-lock-type-face) 16105 16111 (face font-lock-type-face) 16119 16123 (face font-lock-keyword-face) 16124 16129 (face font-lock-type-face) 16132 16140 (face font-lock-type-face) 16147 16149 (face font-lock-keyword-face) 16150 16154 (face font-lock-function-name-face) 16156 16159 (face font-lock-keyword-face) 16160 16164 (face font-lock-keyword-face) 16167 16168 (syntax-table #1#) 16169 16173 (face font-lock-type-face) 16174 16180 (face font-lock-type-face) 16181 16185 (face font-lock-type-face) 16187 16191 (face font-lock-type-face) 16194 16198 (face font-lock-type-face) 16200 16205 (face font-lock-type-face) 16217 16222 (face font-lock-keyword-face) 16223 16227 (face font-lock-keyword-face) 16262 16264 (face font-lock-type-face) 16265 16270 (face font-lock-type-face) 16272 16280 (face font-lock-type-face) 16283 16284 (syntax-table #1#) 16285 16290 (face font-lock-keyword-face) 16291 16295 (face font-lock-keyword-face) 16333 16335 (face font-lock-type-face) 16336 16341 (face font-lock-type-face) 16343 16351 (face font-lock-type-face) 16354 16355 (syntax-table #1#) 16356 16358 (face font-lock-type-face) 16359 16364 (face font-lock-type-face) 16366 16374 (face font-lock-type-face) 16393 16395 (face font-lock-type-face) 16396 16401 (face font-lock-type-face) 16403 16408 (face font-lock-type-face) 16414 16415 (syntax-table #1#) 16438 16441 (face font-lock-comment-delimiter-face) 16441 16454 (face font-lock-comment-face) 16454 16455 (face font-lock-comment-face) 16475 16479 (face font-lock-keyword-face) 16506 16510 (face font-lock-keyword-face) 16546 16549 (face font-lock-keyword-face) 16550 16561 (face font-lock-variable-name-face) 16564 16568 (face font-lock-keyword-face) 16611 16613 (face font-lock-type-face) 16614 16619 (face font-lock-type-face) 16621 16626 (face font-lock-type-face) 16627 16631 (face font-lock-type-face) 16632 16653 (face font-lock-type-face) 16655 16656 (face font-lock-type-face) 16657 16667 (face font-lock-type-face) 16766 16769 (face font-lock-type-face) 16778 16779 (syntax-table #1#) 16802 16808 (face font-lock-preprocessor-face) 16809 16816 (face font-lock-string-face) 16816 16819 (face font-lock-string-face) 16819 16830 (face font-lock-string-face) 16860 16863 (face font-lock-type-face) 16864 16872 (face font-lock-type-face) 16919 16921 (face font-lock-type-face) 16922 16927 (face font-lock-type-face) 16929 16934 (face font-lock-type-face) 16935 16939 (face font-lock-type-face) 16950 16951 (syntax-table #1#) 16970 16973 (face font-lock-comment-delimiter-face) 16973 16987 (face font-lock-comment-face) 17003 17007 (face font-lock-keyword-face) 17034 17038 (face font-lock-keyword-face) 17070 17072 (face font-lock-type-face) 17073 17078 (face font-lock-type-face) 17080 17085 (face font-lock-type-face) 17086 17090 (face font-lock-type-face) 17091 17112 (face font-lock-type-face) 17114 17115 (face font-lock-type-face) 17152 17154 (face font-lock-type-face) 17155 17160 (face font-lock-type-face) 17162 17167 (face font-lock-type-face) 17168 17169 (face font-lock-type-face) 17169 17172 (face font-lock-type-face) 17176 17177 (syntax-table #1#) 17178 17180 (face font-lock-type-face) 17181 17186 (face font-lock-type-face) 17188 17193 (face font-lock-type-face) 17194 17198 (face font-lock-type-face) 17214 17217 (face font-lock-type-face) 17226 17227 (syntax-table #1#) 17246 17252 (face font-lock-preprocessor-face) 17253 17274 (face font-lock-string-face) 17300 17303 (face font-lock-type-face) 17304 17312 (face font-lock-type-face) 17347 17350 (face font-lock-keyword-face) 17351 17357 (face font-lock-constant-face) 17364 17367 (face font-lock-keyword-face) 17368 17373 (face font-lock-keyword-face) 17383 17402 (face font-lock-doc-face) 17406 17422 (face font-lock-preprocessor-face) 17427 17430 (face font-lock-keyword-face) 17431 17437 (face font-lock-keyword-face) 17438 17446 (face font-lock-type-face) 17453 17457 (face font-lock-keyword-face) 17458 17465 (face font-lock-type-face) 17466 17469 (face font-lock-keyword-face) 17470 17478 (face font-lock-type-face) 17489 17491 (face font-lock-keyword-face) 17492 17495 (face font-lock-function-name-face) 17497 17501 (face font-lock-keyword-face) 17503 17504 (face font-lock-variable-name-face) 17507 17510 (face font-lock-keyword-face) 17513 17516 (face font-lock-constant-face) 17518 17521 (face font-lock-constant-face) 17523 17532 (face font-lock-type-face) 17535 17536 (syntax-table #1#) 17539 17542 (face font-lock-constant-face) 17544 17547 (face font-lock-constant-face) 17549 17555 (face font-lock-type-face) 17570 17576 (face rust-builtin-formatting-macro-face) 17580 17589 (face font-lock-string-face) 17589 17590 (face font-lock-string-face syntax-table #3#) 17590 17591 (face font-lock-string-face) 17614 17618 (face font-lock-keyword-face) 17619 17626 (face font-lock-type-face) 17626 17627 (face font-lock-type-face) 17628 17631 (face font-lock-keyword-face) 17632 17640 (face font-lock-type-face) 17651 17653 (face font-lock-keyword-face) 17654 17665 (face font-lock-function-name-face) 17667 17671 (face font-lock-keyword-face) 17674 17675 (syntax-table #1#) 17677 17680 (face font-lock-type-face) 17695 17704 (face font-lock-string-face) 17704 17705 (face font-lock-string-face syntax-table #3#) 17705 17706 (face font-lock-string-face) 17728 17732 (face font-lock-keyword-face) 17733 17740 (face font-lock-type-face) 17741 17744 (face font-lock-keyword-face) 17745 17753 (face font-lock-type-face) 17764 17766 (face font-lock-keyword-face) 17767 17770 (face font-lock-function-name-face) 17772 17776 (face font-lock-keyword-face) 17778 17779 (face font-lock-variable-name-face) 17782 17785 (face font-lock-keyword-face) 17786 17795 (face font-lock-type-face) 17798 17799 (syntax-table #1#) 17800 17803 (face font-lock-constant-face) 17805 17811 (face font-lock-type-face) 17826 17828 (face font-lock-keyword-face) 17828 17829 (face font-lock-keyword-face) 17830 17834 (face font-lock-keyword-face) 17836 17844 (face font-lock-type-face) 17873 17878 (face font-lock-keyword-face) 17879 17883 (face font-lock-keyword-face) 17902 17907 (face font-lock-type-face) 17909 17910 (syntax-table #1#) 17911 17919 (face font-lock-string-face) 17937 17939 (face font-lock-type-face) 17941 17942 (syntax-table #1#) 17943 17948 (face font-lock-string-face) 17966 17970 (face font-lock-type-face) 17972 17973 (syntax-table #1#) 17974 17981 (face font-lock-string-face) 17999 18004 (face font-lock-type-face) 18006 18007 (syntax-table #1#) 18008 18016 (face font-lock-string-face) 18034 18041 (face font-lock-type-face) 18043 18044 (syntax-table #1#) 18045 18048 (face font-lock-string-face) 18086 18105 (face font-lock-doc-face) 18109 18143 (face font-lock-preprocessor-face) 18143 18148 (face font-lock-preprocessor-face) 18153 18156 (face font-lock-keyword-face) 18157 18161 (face font-lock-keyword-face) 18162 18170 (face font-lock-type-face) 18181 18202 (face font-lock-doc-face) 18210 18215 (face font-lock-type-face) 18225 18244 (face font-lock-doc-face) 18252 18254 (face font-lock-type-face) 18264 18285 (face font-lock-doc-face) 18293 18297 (face font-lock-type-face) 18307 18331 (face font-lock-doc-face) 18339 18344 (face font-lock-type-face) 18354 18372 (face font-lock-doc-face) 18380 18387 (face font-lock-type-face) 18400 18424 (face font-lock-doc-face) 18428 18431 (face font-lock-keyword-face) 18432 18437 (face font-lock-keyword-face) 18438 18447 (face font-lock-type-face) 18458 18483 (face font-lock-doc-face) 18491 18493 (face font-lock-keyword-face) 18494 18503 (face font-lock-function-name-face) 18505 18509 (face font-lock-keyword-face) 18511 18513 (face font-lock-variable-name-face) 18516 18519 (face font-lock-keyword-face) 18520 18529 (face font-lock-type-face) 18531 18535 (face font-lock-variable-name-face) 18538 18546 (face font-lock-type-face) 18549 18550 (syntax-table #1#) 18551 18554 (face font-lock-constant-face) 18556 18562 (face font-lock-type-face) 18577 18579 (face font-lock-type-face) 18605 18649 (face font-lock-doc-face) 18653 18692 (face font-lock-preprocessor-face) 18697 18700 (face font-lock-keyword-face) 18701 18707 (face font-lock-keyword-face) 18708 18718 (face font-lock-type-face) 18720 18721 (face font-lock-variable-name-face) 18723 18724 (face font-lock-variable-name-face) 18727 18728 (face font-lock-variable-name-face) 18732 18733 (face font-lock-variable-name-face) 18734 18735 (face font-lock-type-face) 18743 18747 (face font-lock-keyword-face) 18749 18750 (face font-lock-variable-name-face) 18752 18753 (face font-lock-type-face) 18755 18765 (face font-lock-type-face) 18767 18768 (face font-lock-variable-name-face) 18770 18771 (face font-lock-type-face) 18777 18782 (face font-lock-keyword-face) 18791 18792 (face font-lock-variable-name-face) 18794 18803 (face font-lock-type-face) 18807 18808 (face font-lock-variable-name-face) 18824 18827 (face font-lock-keyword-face) 18828 18830 (face font-lock-keyword-face) 18831 18837 (face font-lock-function-name-face) 18838 18843 (face font-lock-variable-name-face) 18847 18848 (face font-lock-variable-name-face) 18849 18850 (face font-lock-type-face) 18853 18854 (syntax-table #1#) 18855 18861 (face font-lock-type-face) 18862 18868 (face font-lock-type-face) 18870 18878 (face font-lock-type-face) 18894 18897 (face font-lock-keyword-face) 18898 18901 (face font-lock-keyword-face) 18902 18905 (face font-lock-variable-name-face) 18908 18914 (face font-lock-type-face) 18949 18961 (face font-lock-preprocessor-face) 18962 18966 (face font-lock-string-face) 18968 18978 (face font-lock-type-face) 19017 19025 (face font-lock-type-face) 19026 19027 (face rust-question-mark-face) 19074 19076 (face font-lock-type-face) 19103 19107 (face font-lock-keyword-face) 19109 19110 (face font-lock-variable-name-face) 19112 19113 (face font-lock-type-face) 19115 19122 (face font-lock-type-face) 19123 19126 (face font-lock-keyword-face) 19127 19137 (face font-lock-type-face) 19139 19140 (face font-lock-variable-name-face) 19142 19143 (face font-lock-type-face) 19149 19154 (face font-lock-keyword-face) 19163 19164 (face font-lock-variable-name-face) 19166 19175 (face font-lock-type-face) 19191 19193 (face font-lock-keyword-face) 19194 19197 (face font-lock-function-name-face) 19199 19203 (face font-lock-keyword-face) 19205 19206 (face font-lock-variable-name-face) 19209 19212 (face font-lock-keyword-face) 19213 19222 (face font-lock-type-face) 19225 19226 (syntax-table #1#) 19227 19230 (face font-lock-constant-face) 19232 19238 (face font-lock-type-face) 19253 19257 (face font-lock-keyword-face) 19274 19282 (face font-lock-type-face) 19284 19291 (face font-lock-type-face) 19292 19293 (face rust-question-mark-face) 19307 19310 (face font-lock-comment-delimiter-face) 19310 19370 (face font-lock-comment-face) 19382 19386 (face font-lock-keyword-face) 19403 19411 (face font-lock-type-face) 19413 19418 (face font-lock-type-face) 19419 19420 (face rust-question-mark-face) 19434 19437 (face font-lock-comment-delimiter-face) 19437 19494 (face font-lock-comment-face) 19506 19509 (face font-lock-comment-delimiter-face) 19509 19563 (face font-lock-comment-face) 19575 19578 (face font-lock-comment-delimiter-face) 19578 19599 (face font-lock-comment-face) 19611 19615 (face font-lock-keyword-face) 19632 19640 (face font-lock-type-face) 19642 19646 (face font-lock-type-face) 19647 19648 (face rust-question-mark-face) 19662 19666 (face font-lock-keyword-face) 19683 19691 (face font-lock-type-face) 19693 19695 (face font-lock-type-face) 19696 19697 (face rust-question-mark-face) 19711 19715 (face font-lock-keyword-face) 19732 19740 (face font-lock-type-face) 19742 19747 (face font-lock-type-face) 19748 19749 (face rust-question-mark-face) 19776 19777 (face font-lock-string-face syntax-table #2#) 19777 19779 (face font-lock-string-face) 19779 19780 (face font-lock-string-face syntax-table #2#) 19803 19842 (face font-lock-preprocessor-face) 19847 19850 (face font-lock-keyword-face) 19851 19857 (face font-lock-keyword-face) 19858 19878 (face font-lock-type-face) 19879 19882 (face font-lock-keyword-face) 19883 19888 (face font-lock-keyword-face) 19890 19893 (face font-lock-type-face) 19894 19903 (face font-lock-type-face) 19906 19910 (face font-lock-type-face) 19919 19922 (face font-lock-keyword-face) 19922 19923 (face font-lock-keyword-face) 19924 19933 (face font-lock-type-face) 19934 19937 (face font-lock-keyword-face) 19938 19958 (face font-lock-type-face) 19969 19971 (face font-lock-keyword-face) 19972 19981 (face font-lock-function-name-face) 19983 19987 (face font-lock-keyword-face) 19989 19990 (face font-lock-variable-name-face) 19993 19996 (face font-lock-keyword-face) 19997 20006 (face font-lock-type-face) 20008 20009 (face font-lock-variable-name-face) 20012 20020 (face font-lock-type-face) 20023 20024 (syntax-table #1#) 20025 20028 (face font-lock-constant-face) 20030 20036 (face font-lock-type-face) 20051 20055 (face font-lock-keyword-face) 20095 20134 (face font-lock-preprocessor-face) 20139 20142 (face font-lock-keyword-face) 20143 20147 (face font-lock-keyword-face) 20148 20169 (face font-lock-type-face) 20170 20171 (face font-lock-type-face) 20173 20174 (face font-lock-type-face) 20186 20187 (face font-lock-type-face) 20188 20189 (face font-lock-type-face) 20200 20201 (face font-lock-type-face) 20202 20203 (face font-lock-type-face) 20217 20221 (face font-lock-keyword-face) 20222 20223 (face font-lock-type-face) 20225 20226 (face font-lock-type-face) 20228 20237 (face font-lock-type-face) 20238 20241 (face font-lock-keyword-face) 20242 20263 (face font-lock-type-face) 20264 20265 (face font-lock-type-face) 20267 20268 (face font-lock-type-face) 20274 20279 (face font-lock-keyword-face) 20288 20289 (face font-lock-variable-name-face) 20291 20300 (face font-lock-type-face) 20310 20311 (face font-lock-variable-name-face) 20313 20322 (face font-lock-type-face) 20338 20340 (face font-lock-keyword-face) 20341 20350 (face font-lock-function-name-face) 20352 20356 (face font-lock-keyword-face) 20358 20359 (face font-lock-variable-name-face) 20362 20365 (face font-lock-keyword-face) 20366 20375 (face font-lock-type-face) 20377 20378 (face font-lock-variable-name-face) 20381 20389 (face font-lock-type-face) 20392 20393 (syntax-table #1#) 20394 20397 (face font-lock-constant-face) 20399 20405 (face font-lock-type-face) 20420 20425 (face font-lock-keyword-face) 20426 20430 (face font-lock-keyword-face) 20449 20461 (face font-lock-type-face) 20461 20470 (face font-lock-type-face) 20472 20473 (face font-lock-type-face) 20478 20479 (syntax-table #1#) 20515 20536 (face font-lock-type-face) 20538 20539 (face font-lock-type-face) 20544 20545 (syntax-table #1#)) . 1) (undo-tree-id1055 . -15134) (undo-tree-id1056 . -14823) (undo-tree-id1057 . 5774) (undo-tree-id1058 . -14823) (undo-tree-id1059 . -14823) (undo-tree-id1060 . -14541) (undo-tree-id1061 . -15383) (undo-tree-id1062 . 5290) (undo-tree-id1063 . -12799) (undo-tree-id1064 . -12799) (undo-tree-id1065 . -11848) (undo-tree-id1066 . -12799) (undo-tree-id1067 . -16659) (undo-tree-id1068 . -2442) (undo-tree-id1069 . -903) (undo-tree-id1070 . -2442) (undo-tree-id1071 . -2598) (undo-tree-id1072 . -2652) (undo-tree-id1073 . -20596) (undo-tree-id1074 . -20589) (undo-tree-id1075 . -20589) (undo-tree-id1076 . -2431) (undo-tree-id1077 . -18600) (undo-tree-id1078 . -18600) (undo-tree-id1079 . -9026) (undo-tree-id1080 . -9026) (undo-tree-id1081 . -13744) (undo-tree-id1082 . -13744) (undo-tree-id1083 . -1835) (undo-tree-id1084 . -14538) (undo-tree-id1085 . -14538) (undo-tree-id1086 . -59) (undo-tree-id1087 . -59) (undo-tree-id1088 . -59) (undo-tree-id1089 . -10618) (undo-tree-id1090 . -10618) (undo-tree-id1091 . -842) (undo-tree-id1092 . -842) (undo-tree-id1093 . -842) (undo-tree-id1094 . -20597) (undo-tree-id1095 . -14659) (undo-tree-id1096 . -14659) (undo-tree-id1097 . -13971) (undo-tree-id1098 . -14658) (undo-tree-id1099 . -14659) (undo-tree-id1100 . -13971) (undo-tree-id1101 . -14658) (undo-tree-id1102 . -14341) (undo-tree-id1103 . -14658) (undo-tree-id1104 . -15389) (undo-tree-id1105 . -14669) (undo-tree-id1106 . -14823) (undo-tree-id1107 . -14823) (undo-tree-id1108 . -14823) (undo-tree-id1109 . -15134) (undo-tree-id1110 . -663) (undo-tree-id1111 . -15326) (undo-tree-id1112 . -15326) (undo-tree-id1113 . -14341) (undo-tree-id1114 . -15383) (undo-tree-id1115 . -15326) (undo-tree-id1116 . -14341) (undo-tree-id1117 . -15383) (undo-tree-id1118 . -15383) (undo-tree-id1119 . -14341) (undo-tree-id1120 . -15389) (undo-tree-id1121 . -15383) (undo-tree-id1122 . -14341) 15390) nil (23733 10094 105815 178000) 0 nil]) ((#("/// 
" 0 4 (fontified t face font-lock-doc-face) 4 5 (fontified t face font-lock-doc-face)) . 15327) (undo-tree-id1123 . -3) 15330) nil (23733 10094 105828 390000) 0 nil]) ((#(")" 0 1 (fontified nil face font-lock-doc-face)) . 15308) (15307 . 15308) (15306 . 15308) (#("(" 0 1 (fontified nil face font-lock-doc-face)) . -15306) (15302 . 15307) (15296 . 15302) (#("\"" 0 1 (fontified nil face font-lock-doc-face)) . 15296) (15294 . 15296) (15290 . 15294) (15289 . 15291) (#("\"" 0 1 (fontified nil face font-lock-doc-face)) . -15289) (15289 . 15290) (15288 . 15290) (#("(" 0 1 (fontified nil face font-lock-doc-face)) . -15288) (15279 . 15289) (15272 . 15279) (15251 . 15272) (15248 . 15251) (15247 . 15248) (#("." 0 1 (fontified t face font-lock-doc-face)) . -15247) (undo-tree-id1124 . -1) 15248 (15247 . 15248) (#(")" 0 1 (fontified nil face font-lock-doc-face)) . 15247) (15246 . 15247) (#(")" 0 1 (fontified nil face font-lock-doc-face)) . 15246) (15244 . 15246) (15243 . 15245) (#("(" 0 1 (fontified nil face font-lock-doc-face)) . -15243) (15228 . 15244) (15225 . 15228) (15224 . 15225) (15223 . 15225) (#("(" 0 1 (fontified nil face font-lock-doc-face)) . -15223) (15223 . 15224) (15215 . 15223) (#("d" 0 1 (fontified t face font-lock-doc-face)) . -15215) (undo-tree-id1125 . -1) 15216 (#("u" 0 1 (fontified t face font-lock-doc-face)) . -15216) (undo-tree-id1126 . -1) (#("r" 0 1 (fontified t face font-lock-doc-face)) . -15217) (undo-tree-id1127 . -1) (#("a" 0 1 (fontified t face font-lock-doc-face)) . -15218) (undo-tree-id1128 . -1) (#("t" 0 1 (fontified t face font-lock-doc-face)) . -15219) (undo-tree-id1129 . -1) (#("i" 0 1 (fontified t face font-lock-doc-face)) . -15220) (undo-tree-id1130 . -1) (#("o" 0 1 (fontified t face font-lock-doc-face)) . -15221) (undo-tree-id1131 . -1) (#("n" 0 1 (fontified t face font-lock-doc-face)) . -15222) (undo-tree-id1132 . -1) 15223 (#("()" 0 1 (fontified t face font-lock-doc-face) 1 2 (fontified t face font-lock-doc-face)) . 15223) (undo-tree-id1133 . -1) 15224 (15223 . 15225) (#("(" 0 1 (fontified nil face font-lock-doc-face)) . -15223) (15223 . 15224) (15215 . 15223) (15210 . 15215) (15208 . 15210) (15205 . 15208) (#(" " 0 1 (fontified t face font-lock-doc-face)) . -15205) (undo-tree-id1134 . -1) (#(" " 0 1 (fontified t face font-lock-doc-face)) . -15206) (undo-tree-id1135 . -1) (#(" " 0 1 (fontified t face font-lock-doc-face)) . -15207) (undo-tree-id1136 . -1) 15208 (15197 . 15208) (15184 . 15197) (15182 . 15184) (15180 . 15182) (15179 . 15180) (15178 . 15179) (#("." 0 1 (fontified t face font-lock-doc-face)) . -15178) (undo-tree-id1137 . -1) 15179 (15178 . 15179)) nil (23733 10094 105876 643000) 0 nil]) ((15177 . 15178) (#(")" 0 1 (fontified t face font-lock-doc-face)) . -15165) (15164 . 15166) (#("(" 0 1 (fontified nil face font-lock-doc-face)) . -15164) (15160 . 15165) (15143 . 15160) (#("s" 0 1 (fontified t face font-lock-doc-face)) . -15143) (undo-tree-id1138 . -1) (#("s" 0 1 (fontified t face font-lock-doc-face)) . -15144) (undo-tree-id1139 . -1) (#("e" 0 1 (fontified t face font-lock-doc-face)) . -15145) (undo-tree-id1140 . -1) 15146 (15145 . 15146) (#("h" 0 1 (fontified t face font-lock-doc-face)) . -15145) (undo-tree-id1141 . -1) 15146 (15143 . 15146) (#("S" 0 1 (fontified t face font-lock-doc-face)) . -15143) (undo-tree-id1142 . -1) 15144 (15143 . 15144)) nil (23733 10094 105902 891000) 0 nil]) ((14901 . 14902)) nil (23733 10094 105907 866000) 0 nil]) ((#("///             // create server event source
" 0 4 (fontified t face font-lock-doc-face) 4 16 (fontified t face font-lock-doc-face) 16 19 (fontified t face font-lock-doc-face) 19 46 (fontified t face font-lock-doc-face)) . 14824)) nil (23733 10094 105909 501000) 0 nil]) ((#("/// 
" 0 4 (fontified t face font-lock-doc-face) 4 5 (fontified t face font-lock-doc-face)) . 14670)) nil (23733 10094 105911 183000) 0 nil] [nil ([nil nil ((14664 . 14665) 14649) ((#("
" 0 1 (fontified t face font-lock-doc-face)) . 14664) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1)) (23733 9919 648985 848000) 0 nil]) ((#("/// 
" 0 4 (fontified t face font-lock-doc-face) 4 5 (fontified t face font-lock-doc-face)) . 14649) (undo-tree-id1045 . -3) (undo-tree-id1046 . -3) (undo-tree-id1047 . -3) (undo-tree-id1048 . -3) (undo-tree-id1049 . -3) (undo-tree-id1050 . -3) 14652) ((14649 . 14654)) (23733 9919 653522 375000) 0 nil] [nil nil ((#("/// fn main() " 0 4 (fontified t face font-lock-doc-face) 4 6 (fontified t face font-lock-doc-face) 6 7 (fontified t face font-lock-doc-face) 7 11 (fontified t face font-lock-doc-face) 11 14 (fontified t face font-lock-doc-face)) . 14654) (undo-tree-id865 . -6) (undo-tree-id866 . -6) (undo-tree-id867 . -5) (undo-tree-id868 . -6) (undo-tree-id869 . -5) (undo-tree-id870 . -5) (undo-tree-id871 . -4) (undo-tree-id872 . -4) (undo-tree-id873 . -4) (undo-tree-id874 . -4) (undo-tree-id875 . -4) 14673) ((14654 . 14668)) (23733 9909 150750 441000) 0 nil]) ((#("///     pretty_env_logger::init();
" 0 4 (fontified t face font-lock-doc-face) 4 8 (fontified t face font-lock-doc-face) 8 25 (fontified t face font-lock-doc-face) 25 35 (fontified t face font-lock-doc-face)) . 14670) (undo-tree-id876 . -4) (undo-tree-id877 . -4) (undo-tree-id878 . -4) (undo-tree-id879 . -4) (undo-tree-id880 . -4) (undo-tree-id881 . -7) 14677) nil (23733 9919 998432 547000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 14546) 14547 (14546 . 14548) (#("`" 0 1 (fontified nil face font-lock-doc-face)) . -14546) (14542 . 14547)) nil (23733 9909 150781 135000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 14571) (undo-tree-id882 . -1) (undo-tree-id883 . -2) (undo-tree-id884 . -1) (undo-tree-id885 . -1) 14572 (14571 . 14573) (#("`" 0 1 (fontified nil)) . -14571) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (14567 . 14572)) nil (23733 9909 150800 562000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 14613) (undo-tree-id888 . -1) (undo-tree-id889 . -2) (undo-tree-id890 . -1) (undo-tree-id891 . -1) 14614 (14613 . 14615) (#("`" 0 1 (fontified nil)) . -14613) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (14609 . 14614)) nil (23733 9909 150820 175000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 14641) (undo-tree-id894 . -1) (undo-tree-id895 . -2) (undo-tree-id896 . -1) (undo-tree-id897 . -1) 14642 (14641 . 14643) (#("`" 0 1 (fontified nil)) . -14641) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (14637 . 14642)) nil (23733 9909 150839 324000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 14642) (undo-tree-id900 . -1) (undo-tree-id901 . -2) (undo-tree-id902 . -1) (undo-tree-id903 . -1) 14643 (14642 . 14644) (#("`" 0 1 (fontified nil)) . -14642) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (14638 . 14643)) nil (23733 9909 150858 302000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 14654) (undo-tree-id906 . -1) (undo-tree-id907 . -2) (undo-tree-id908 . -1) (undo-tree-id909 . -1) 14655 (14654 . 14656) (#("`" 0 1 (fontified nil)) . -14654) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (14650 . 14655)) nil (23733 9909 150876 545000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 14685) (undo-tree-id912 . -1) (undo-tree-id913 . -2) (undo-tree-id914 . -1) (undo-tree-id915 . -1) 14686 (14685 . 14687) (#("`" 0 1 (fontified nil)) . -14685) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (14681 . 14686)) nil (23733 9909 150896 172000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 14686) (undo-tree-id918 . -1) (undo-tree-id919 . -2) (undo-tree-id920 . -1) (undo-tree-id921 . -1) 14687 (14686 . 14688) (#("`" 0 1 (fontified nil)) . -14686) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (14682 . 14687)) nil (23733 9909 150914 988000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 14723) 14724 (14723 . 14725) (#("`" 0 1 (fontified nil)) . -14723) (14719 . 14724)) nil (23733 9909 150922 637000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 14749) (undo-tree-id924 . -1) (undo-tree-id925 . -2) (undo-tree-id926 . -1) (undo-tree-id927 . -1) 14750 (14749 . 14751) (#("`" 0 1 (fontified nil)) . -14749) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (14745 . 14750)) nil (23733 9909 150946 716000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 14786) (undo-tree-id930 . -1) (undo-tree-id931 . -2) (undo-tree-id932 . -1) (undo-tree-id933 . -1) 14787 (14786 . 14788) (#("`" 0 1 (fontified nil)) . -14786) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (14782 . 14787)) nil (23733 9909 150965 372000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 14824) (undo-tree-id936 . -1) (undo-tree-id937 . -2) (undo-tree-id938 . -1) (undo-tree-id939 . -1) 14825 (14824 . 14826) (#("`" 0 1 (fontified nil)) . -14824) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (14820 . 14825)) nil (23733 9909 150983 148000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 14866) (undo-tree-id942 . -1) (undo-tree-id943 . -2) (undo-tree-id944 . -1) (undo-tree-id945 . -1) 14867 (14866 . 14868) (#("`" 0 1 (fontified nil face font-lock-comment-face)) . -14866) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (14862 . 14867)) nil (23733 9909 151004 20000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 14957) (undo-tree-id948 . -1) (undo-tree-id949 . -2) (undo-tree-id950 . -1) (undo-tree-id951 . -1) 14958 (14957 . 14959) (#("`" 0 1 (fontified nil)) . -14957) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (14953 . 14958)) nil (23733 9909 151022 791000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 14987) (undo-tree-id954 . -1) (undo-tree-id955 . -2) (undo-tree-id956 . -1) (undo-tree-id957 . -1) 14988 (14987 . 14989) (#("`" 0 1 (fontified nil)) . -14987) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (14983 . 14988)) nil (23733 9909 151040 858000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 15031) (undo-tree-id960 . -1) (undo-tree-id961 . -2) (undo-tree-id962 . -1) (undo-tree-id963 . -1) 15032 (15031 . 15033) (#("`" 0 1 (fontified nil face font-lock-comment-face)) . -15031) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (15027 . 15032)) nil (23733 9909 151059 31000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 15072) 15073 (15072 . 15074) (#("`" 0 1 (fontified nil)) . -15072) (15068 . 15073)) nil (23733 9909 151066 220000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 15088) (undo-tree-id966 . -1) (undo-tree-id967 . -2) (undo-tree-id968 . -1) (undo-tree-id969 . -1) 15089 (15088 . 15090) (#("`" 0 1 (fontified nil)) . -15088) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (15084 . 15089)) nil (23733 9909 151107 663000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 15134) 15135 (15134 . 15136) (#("`" 0 1 (fontified nil face font-lock-comment-face)) . -15134) (15130 . 15135)) nil (23733 9909 151114 883000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 15170) (undo-tree-id972 . -1) (undo-tree-id973 . -2) (undo-tree-id974 . -1) (undo-tree-id975 . -1) 15171 (15170 . 15172) (#("`" 0 1 (fontified nil)) . -15170) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (15166 . 15171)) nil (23733 9909 151133 630000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 15182) (undo-tree-id978 . -1) (undo-tree-id979 . -2) (undo-tree-id980 . -1) (undo-tree-id981 . -1) 15183 (15182 . 15184) (#("`" 0 1 (fontified nil)) . -15182) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (15178 . 15183)) nil (23733 9909 151152 3000) 0 nil]) ((#("``" 0 1 (fontified nil) 1 2 (fontified nil)) . 15183) (undo-tree-id984 . -1) (undo-tree-id985 . -2) (undo-tree-id986 . -1) (undo-tree-id987 . -1) 15184 (15183 . 15185) (#("`" 0 1 (fontified nil)) . -15183) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (15179 . 15184)) nil (23733 9909 151174 676000) 0 nil]) ((#("``" 0 1 (fontified t face font-lock-doc-face) 1 2 (fontified t face font-lock-doc-face)) . 15236) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -2) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -2) (undo-tree-id996 . -1) (undo-tree-id997 . -2) (undo-tree-id998 . -1) (undo-tree-id999 . -2) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -2) (undo-tree-id1003 . -1) (undo-tree-id1004 . -2) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -2) (undo-tree-id1009 . 2) (undo-tree-id1010 . -1) (undo-tree-id1011 . 1) (undo-tree-id1012 . -1) (undo-tree-id1013 . 1) (undo-tree-id1014 . -2) (undo-tree-id1015 . -1) 15237 (15236 . 15238) (#("`" 0 1 (fontified nil face font-lock-doc-face)) . -15236) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (15232 . 15237)) nil (23733 9909 151236 37000) 0 nil]) ((nil rear-nonsticky nil 15232 . 15233) (nil fontified nil 14542 . 15233) (14542 . 15233)) nil (23733 9909 151245 326000) 0 nil]) ((#("p" 0 1 (fontified t)) . -14542) (undo-tree-id1018 . -1) 14543 (14542 . 14543) (14541 . 14542) 14540) nil (23733 9909 151252 462000) 0 nil]) ((#("k" 0 1 (fontified t face font-lock-doc-face)) . -14548) (undo-tree-id1019 . -1) 14549 (14548 . 14549) (14547 . 14549) (#("`" 0 1 (fontified nil face font-lock-doc-face)) . -14547) (14547 . 14548) (#("`" 0 1 (fontified nil face font-lock-doc-face)) . 14547) (14546 . 14547) (#(" " 0 1 (fontified nil)) . -14546) (14546 . 14547) (#("`" 0 1 (fontified nil)) . -14546) (14546 . 14547) (#(" " 0 1 (fontified nil)) . -14546) (14546 . 14547) (#("`" 0 1 (fontified nil face font-lock-doc-face)) . -14546) (14546 . 14547) (#("'" 0 1 (fontified t face font-lock-doc-face)) . -14546) (undo-tree-id1020 . -1) (#("'" 0 1 (fontified t face font-lock-doc-face)) . -14547) (undo-tree-id1021 . -1) 14548 (14547 . 14548) (#(" " 0 1 (fontified nil)) . -14547) (14547 . 14548) (#("'" 0 1 (fontified nil face font-lock-doc-face)) . -14547) (14546 . 14548) (#(" " 0 1 (fontified nil)) . -14546) (14546 . 14547) (#("'" 0 1 (fontified nil face font-lock-doc-face)) . -14546) (14546 . 14547) (14545 . 14546) (14542 . 14545) (14541 . 14542) (14540 . 14542) (#("`" 0 1 (fontified nil face font-lock-doc-face)) . -14540) (14540 . 14541) (#("`" 0 1 (fontified nil face font-lock-doc-face)) . 14540) (14539 . 14540) (14538 . 14540) (#("`" 0 1 (fontified nil face font-lock-doc-face)) . -14538) (14534 . 14539) (#(" " 0 1 (fontified nil face font-lock-doc-face)) . 14533) (undo-tree-id1022 . -1) (14534 . 14535) (14530 . 14534) (14529 . 14530) 14519) nil (23733 9909 151290 21000) 0 nil]) ((1215 . 1224) (1194 . 1215) (1184 . 1194) (1175 . 1184) (1170 . 1175) (#("d" 0 1 (fontified t face font-lock-doc-face)) . -1170) (undo-tree-id1023 . -1) (#("o" 0 1 (fontified t face font-lock-doc-face)) . -1171) (undo-tree-id1024 . -1) (#("c" 0 1 (fontified nil face font-lock-doc-face)) . -1172) (undo-tree-id1025 . -1) (#("u" 0 1 (fontified t face font-lock-doc-face)) . -1173) (undo-tree-id1026 . -1) (#("m" 0 1 (fontified t face font-lock-doc-face)) . -1174) (undo-tree-id1027 . -1) (#("e" 0 1 (fontified t face font-lock-doc-face)) . -1175) (undo-tree-id1028 . -1) (#("n" 0 1 (fontified t face font-lock-doc-face)) . -1176) (undo-tree-id1029 . -1) (#("t" 0 1 (fontified t face font-lock-doc-face)) . -1177) (undo-tree-id1030 . -1) (#("s" 0 1 (fontified t face font-lock-doc-face)) . -1178) (undo-tree-id1031 . -1) (#(" " 0 1 (fontified t face font-lock-doc-face)) . -1179) (undo-tree-id1032 . -1) (#("t" 0 1 (fontified t face font-lock-doc-face)) . -1180) (undo-tree-id1033 . -1) (#("h" 0 1 (fontified t face font-lock-doc-face)) . -1181) (undo-tree-id1034 . -1) (#("e" 0 1 (fontified t face font-lock-doc-face)) . -1182) (undo-tree-id1035 . -1) 1183 (#(" " 0 1 (fontified t face font-lock-doc-face)) . -1183) (undo-tree-id1036 . -1) 1184 (1170 . 1184) (1160 . 1170) (1159 . 1160) (1158 . 1159) (#("." 0 1 (fontified t face font-lock-doc-face)) . -1158) (undo-tree-id1037 . -1) 1159) nil (23733 9909 151347 708000) 0 nil]) ((1078 . 1079)) nil (23733 9909 151360 221000) 0 nil]) ((1076 . 1078) (1075 . 1076)) nil (23733 9909 151363 846000) 0 nil]) ((#("," 0 1 (fontified t face font-lock-doc-face)) . -1154) (undo-tree-id1038 . -1) (#(" " 0 1 (fontified t face font-lock-doc-face)) . -1155) (undo-tree-id1039 . -1) (#("w" 0 1 (fontified t face font-lock-doc-face)) . -1156) (undo-tree-id1040 . -1) (#("h" 0 1 (fontified t face font-lock-doc-face)) . -1157) (undo-tree-id1041 . -1) (#("i" 0 1 (fontified t face font-lock-doc-face)) . -1158) (undo-tree-id1042 . -1) (#("c" 0 1 (fontified t face font-lock-doc-face)) . -1159) (undo-tree-id1043 . -1) (#("h" 0 1 (fontified t face font-lock-doc-face)) . -1160) (undo-tree-id1044 . -1) 1161 (1154 . 1161)) nil (23733 9909 151384 253000) 0 nil]) ((#(", None" 0 6 (fontified t face font-lock-doc-face)) . 889)) nil (23733 9909 151394 227000) 0 nil]) ((879 . 882) (876 . 879) (t 23733 9489 276197 876000)) nil (23733 9909 151398 667000) 0 nil]) ((#(")" 0 1 (fontified nil)) . -876) (876 . 877) (#(" " 0 1 (fontified nil)) . -876) (876 . 877) (#(")" 0 1 (fontified nil face font-lock-doc-face)) . -876) (876 . 877) (t 23733 9489 276197 876000)) nil (23733 9909 151405 461000) 0 nil]) ((12539 . 12540)) nil (23733 9489 167765 708000) 0 nil]) ((12693 . 12708) (#("=" 0 1 (fontified nil face font-lock-doc-face)) . -12693) (undo-tree-id859 . -1) (#("a" 0 1 (fontified t face font-lock-doc-face)) . -12694) (undo-tree-id860 . -1) 12695 (12694 . 12695) (12683 . 12694) (#("g" 0 1 (fontified t face font-lock-doc-face)) . -12683) (undo-tree-id861 . -1) 12684 (12683 . 12684) (#(" " 0 1 (fontified t face font-lock-doc-face)) . -12683) (undo-tree-id862 . -1) 12684 (12680 . 12684) (#(" " 0 1 (fontified t face font-lock-doc-face)) . -12680) (undo-tree-id863 . -1) (#("o" 0 1 (fontified t face font-lock-doc-face)) . -12681) (undo-tree-id864 . -1) 12682 (12663 . 12682) (12661 . 12663) (12659 . 12661) (12655 . 12659) (12655 . 12656) 12708) nil (23733 9489 167795 990000) 0 nil] [nil nil ((#("        " 0 8 (fontified t)) . -12710) (undo-tree-id780 . -8) (undo-tree-id781 . -8) 12718 (12709 . 12718) 12708) ((#("
        " 0 1 (fontified t) 1 9 (fontified nil)) . 12709) (undo-tree-id855 . -9) (undo-tree-id856 . -9) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (12710 . 12718)) (23733 9447 516795 289000) 0 nil]) ((12537 . 12539) (12516 . 12537) (#("w" 0 1 (fontified t face font-lock-doc-face)) . -12516) (undo-tree-id782 . -1) (#("n" 0 1 (fontified t face font-lock-doc-face)) . -12517) (undo-tree-id783 . -1) 12518 (12517 . 12518) (12512 . 12517) (#("v" 0 1 (fontified t face font-lock-doc-face)) . -12512) (undo-tree-id784 . -1) 12513 (12504 . 12513) (#("t" 0 1 (fontified nil face font-lock-doc-face)) . -12504) (undo-tree-id785 . -1) (#("e" 0 1 (fontified nil face font-lock-doc-face)) . -12505) (undo-tree-id786 . -1) (#("r" 0 1 (fontified t face font-lock-doc-face)) . -12506) (undo-tree-id787 . -1) 12507 (12503 . 12507)) nil (23733 9447 521662 887000) 0 nil]) ((12525 . 12528) (12520 . 12525) (#("durration" 0 9 (fontified t face font-lock-function-name-face)) . 12520) (undo-tree-id788 . -5) (undo-tree-id789 . -5) (undo-tree-id790 . -5) 12525) nil (23733 9447 516825 362000) 0 nil]) ((#("d" 0 1 (fontified t face font-lock-doc-face)) . -12503) (undo-tree-id791 . -1) (#("u" 0 1 (fontified t face font-lock-doc-face)) . -12504) (undo-tree-id792 . -1) 12505 (#("r" 0 1 (fontified t face font-lock-doc-face)) . -12505) (undo-tree-id793 . -1) (#("r" 0 1 (fontified t face font-lock-doc-face)) . -12506) (undo-tree-id794 . -1) (#("a" 0 1 (fontified t face font-lock-doc-face)) . -12507) (undo-tree-id795 . -1) (#("t" 0 1 (fontified t face font-lock-doc-face)) . -12508) (undo-tree-id796 . -1) (#("i" 0 1 (fontified t face font-lock-doc-face)) . -12509) (undo-tree-id797 . -1) 12510 (12489 . 12510) (#("C" 0 1 (fontified t face font-lock-doc-face)) . -12489) (undo-tree-id798 . -1) (#("r" 0 1 (fontified t face font-lock-doc-face)) . -12490) (undo-tree-id799 . -1) (#("e" 0 1 (fontified nil face font-lock-doc-face)) . -12491) (undo-tree-id800 . -1) (#("a" 0 1 (fontified nil face font-lock-doc-face)) . -12492) (undo-tree-id801 . -1) (#("t" 0 1 (fontified t face font-lock-doc-face)) . -12493) (undo-tree-id802 . -1) 12494 (12489 . 12494) (12485 . 12489) (12480 . 12485) 12479) nil (23733 9447 516847 767000) 0 nil]) ((12313 . 12324) (#("e" 0 1 (fontified t face font-lock-doc-face)) . -12313) (undo-tree-id803 . -1) 12314 (12307 . 12314) (12298 . 12307) (12277 . 12298) (12276 . 12277) (12264 . 12276) (#("
" 0 1 (fontified t face font-lock-doc-face)) . -12264) (undo-tree-id804 . -1) (#("/" 0 1 (fontified t)) . -12265) (undo-tree-id805 . -1) (#("/" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -12266) (undo-tree-id806 . -1) (#("/" 0 1 (fontified t face font-lock-doc-face)) . -12267) (undo-tree-id807 . -1) (#(" " 0 1 (fontified t face font-lock-doc-face)) . -12268) (undo-tree-id808 . -1) (#("t" 0 1 (fontified t face font-lock-doc-face)) . -12269) (undo-tree-id809 . -1) (#("h" 0 1 (fontified nil face font-lock-doc-face)) . -12270) (undo-tree-id810 . -1) (#("e" 0 1 (fontified nil face font-lock-doc-face)) . -12271) (undo-tree-id811 . -1) (#(" " 0 1 (fontified nil face font-lock-doc-face)) . -12272) (#("n" 0 1 (fontified nil face font-lock-doc-face)) . -12273) 12274 (12265 . 12274) (#(" " 0 1 (fontified nil face font-lock-doc-face)) . -12265) (undo-tree-id812 . 1) (12264 . 12265) (12251 . 12264) (#("i" 0 1 (fontified nil face font-lock-doc-face)) . -12251) (undo-tree-id813 . -1) (#("a" 0 1 (fontified t face font-lock-doc-face)) . -12252) (undo-tree-id814 . -1) 12253 (12239 . 12253) (12227 . 12239) (#("d" 0 1 (fontified t face font-lock-doc-face)) . -12227) (undo-tree-id815 . -1) (#("u" 0 1 (fontified t face font-lock-doc-face)) . -12228) (undo-tree-id816 . -1) (#("r" 0 1 (fontified t face font-lock-doc-face)) . -12229) (undo-tree-id817 . -1) (#("a" 0 1 (fontified t face font-lock-doc-face)) . -12230) (undo-tree-id818 . -1) (#("t" 0 1 (fontified t face font-lock-doc-face)) . -12231) (undo-tree-id819 . -1) (#("i" 0 1 (fontified t face font-lock-doc-face)) . -12232) (undo-tree-id820 . -1) (#("o" 0 1 (fontified t face font-lock-doc-face)) . -12233) (undo-tree-id821 . -1) (#("n" 0 1 (fontified t face font-lock-doc-face)) . -12234) (undo-tree-id822 . -1) (#(" " 0 1 (fontified t face font-lock-doc-face)) . -12235) (undo-tree-id823 . -1) (#("o" 0 1 (fontified t face font-lock-doc-face)) . -12236) (undo-tree-id824 . -1) (#("f" 0 1 (fontified t face font-lock-doc-face)) . -12237) (undo-tree-id825 . -1) (#(" " 0 1 (fontified t face font-lock-doc-face)) . -12238) (undo-tree-id826 . -1) (#("t" 0 1 (fontified t face font-lock-doc-face)) . -12239) (undo-tree-id827 . -1) (#("h" 0 1 (fontified t face font-lock-doc-face)) . -12240) (undo-tree-id828 . -1) (#("e" 0 1 (fontified t face font-lock-doc-face)) . -12241) (undo-tree-id829 . -1) (#(" " 0 1 (fontified t face font-lock-doc-face)) . -12242) (undo-tree-id830 . -1) 12243 (12227 . 12243) (#("c" 0 1 (fontified t face font-lock-doc-face)) . -12227) (undo-tree-id831 . -1) (#("o" 0 1 (fontified t face font-lock-doc-face)) . -12228) (undo-tree-id832 . -1) (#("n" 0 1 (fontified t face font-lock-doc-face)) . -12229) (undo-tree-id833 . -1) (#("t" 0 1 (fontified t face font-lock-doc-face)) . -12230) (undo-tree-id834 . -1) (#("e" 0 1 (fontified t face font-lock-doc-face)) . -12231) (undo-tree-id835 . -1) 12232 (#("n" 0 1 (fontified t face font-lock-doc-face)) . -12232) (undo-tree-id836 . -1) (#("t" 0 1 (fontified t face font-lock-doc-face)) . -12233) (undo-tree-id837 . -1) (#("s" 0 1 (fontified t face font-lock-doc-face)) . -12234) (undo-tree-id838 . -1) (#(" " 0 1 (fontified t face font-lock-doc-face)) . -12235) (undo-tree-id839 . -1) (#("a" 0 1 (fontified nil face font-lock-doc-face)) . -12236) (undo-tree-id840 . -1) (#("n" 0 1 (fontified nil face font-lock-doc-face)) . -12237) (undo-tree-id841 . -1) (#("d" 0 1 (fontified t face font-lock-doc-face)) . -12238) (undo-tree-id842 . -1) 12239 (12228 . 12239) (#("n" 0 1 (fontified t face font-lock-doc-face)) . -12228) (undo-tree-id843 . -1) (#("t" 0 1 (fontified t face font-lock-doc-face)) . -12229) (undo-tree-id844 . -1) 12230 (12228 . 12230) (#("o" 0 1 (fontified nil face font-lock-doc-face)) . -12228) (undo-tree-id845 . -1) (#("n" 0 1 (fontified t face font-lock-doc-face)) . -12229) (undo-tree-id846 . -1) 12230 (12228 . 12230) (12214 . 12228) (#("s" 0 1 (fontified t face font-lock-doc-face)) . -12214) (undo-tree-id847 . -1) 12215 (12207 . 12215) (12203 . 12207) (#("s" 0 1 (fontified t face font-lock-doc-face)) . -12203) (undo-tree-id848 . -1) 12204 (12203 . 12204)) nil (23733 9447 516934 42000) 0 nil]) ((#("C" 0 1 (fontified t face font-lock-doc-face)) . -12203) (undo-tree-id849 . -1) (#("r" 0 1 (fontified t face font-lock-doc-face)) . -12204) (undo-tree-id850 . -1) (#("e" 0 1 (fontified t face font-lock-doc-face)) . -12205) (undo-tree-id851 . -1) (#("a" 0 1 (fontified t face font-lock-doc-face)) . -12206) (undo-tree-id852 . -1) (#("t" 0 1 (fontified t face font-lock-doc-face)) . -12207) (undo-tree-id853 . -1) (#("e" 0 1 (fontified t face font-lock-doc-face)) . -12208) (undo-tree-id854 . -1) 12209) nil (23733 9447 516962 615000) 0 nil]) ((12209 . 12210) (12199 . 12209) (12199 . 12200) 12205 (t 23733 9141 335257 725000)) nil (23733 9447 516967 603000) 0 nil]) ((19421 . 19422) 2372) nil (23733 9141 217588 121000) 0 nil]) ((2325 . 2363)) nil (23733 9141 217596 524000) 0 nil]) ((#("
" 0 1 (fontified t)) . -19383) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) 19384 (t 23733 9026 183077 821000)) nil (23733 9141 217617 7000) 0 nil]) ((#(".as_str()" 0 1 (fontified t) 1 7 (fontified t) 7 9 (fontified t)) . 15376)) nil (23733 9026 154417 756000) 0 nil]) ((14892 . 14898) (#("&'static str" 0 2 (fontified t) 2 4 (fontified t face font-lock-keyword-face) 4 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 12 (fontified t face font-lock-type-face)) . 14892) (t 23733 8870 906326 723000)) nil (23733 9026 154428 445000) 0 nil]) ((#("&" 0 1 (fontified t)) . 12454) (undo-tree-id776 . -1) (t 23733 8848 949088 493000)) nil (23733 8870 745161 445000) 0 nil] [nil nil ((12433 . 12435) (#("pub fn with_text(&mut self, text: String) -> Self " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 16 (fontified t face font-lock-function-name-face) 16 18 (fontified t) 18 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 26 (fontified t face font-lock-keyword-face) 26 28 (fontified t) 28 32 (fontified t face font-lock-variable-name-face) 32 34 (fontified t) 34 40 (fontified t face font-lock-type-face) 40 43 (fontified t) 43 44 (fontified t syntax-table #1#) 44 45 (fontified t) 45 49 (fontified t face font-lock-type-face) 49 50 (fontified t)) . 12437) (undo-tree-id750 . -17) (undo-tree-id751 . 28) (undo-tree-id752 . -45) (undo-tree-id753 . -49) (undo-tree-id754 . -45) (undo-tree-id755 . -49) (undo-tree-id756 . -17) (undo-tree-id757 . -18) (undo-tree-id758 . -17) (undo-tree-id759 . -17) (undo-tree-id760 . -17) (undo-tree-id761 . -17) (undo-tree-id762 . -17) (undo-tree-id763 . -17) (undo-tree-id764 . -17) (undo-tree-id765 . -17) (undo-tree-id766 . -17) (undo-tree-id767 . -17) (undo-tree-id768 . -42) (undo-tree-id769 . -44) 12454 (t 23733 8848 949088 493000)) ((12437 . 12487) (#("xu" 0 2 (fontified t)) . 12433) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -2) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1)) (23733 8868 871090 277000) 0 nil]) ((12454 . 12459) (t 23733 8829 172754 632000)) nil (23733 8868 884237 646000) 0 nil]) ((#(" " 0 1 (fontified t)) . -12511) (undo-tree-id748 . -1) 12512 (12509 . 12512)) nil (23733 8829 69828 825000) 0 nil]) ((#(":" 0 1 (fontified t)) . 12509) (undo-tree-id749 . -1) (t 23733 8807 524403 463000)) nil (23733 8829 69841 429000) 0 nil]) ((12525 . 12529) (12516 . 12525) (12509 . 12516) (12497 . 12509) (#("com" 0 3 (fontified t)) . -12497) (undo-tree-id727 . -3) 12500 (12496 . 12500) (#("." 0 1 (fontified t)) . -12496) (undo-tree-id728 . -1) 12497 (12493 . 12497) (#("l" 0 1 (fontified t)) . -12493) (undo-tree-id729 . -1) (#("e" 0 1 (fontified t)) . -12494) (undo-tree-id730 . -1) 12495 (12492 . 12495) (12483 . 12492) 12433) nil (23733 8807 402234 55000) 0 nil]) ((#("        SseKeepAlive {
            event_stream: self.event_stream,
            comment_text: text,
            max_interval: self.max_interval,
            alive_timer: self.alive_timer,
        }
" 0 7 (fontified t) 7 8 (rear-nonsticky t fontified t) 8 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 23 (fontified t) 23 35 (fontified t) 35 47 (fontified t face font-lock-variable-name-face) 47 49 (fontified t) 49 53 (fontified t face font-lock-keyword-face) 53 68 (fontified t) 68 80 (fontified t) 80 92 (fontified t face font-lock-variable-name-face) 92 94 (fontified t) 94 100 (fontified t) 100 112 (fontified t) 112 124 (fontified t face font-lock-variable-name-face) 124 126 (fontified t) 126 130 (fontified t face font-lock-keyword-face) 130 131 (fontified t) 131 143 (fontified t) 143 145 (fontified t) 145 157 (fontified t) 157 168 (fontified t face font-lock-variable-name-face) 168 170 (fontified t) 170 174 (fontified t face font-lock-keyword-face) 174 197 (fontified t) 197 198 (fontified t)) . 12484) (undo-tree-id731 . -197) (undo-tree-id732 . -21) (undo-tree-id733 . -197) (undo-tree-id734 . -197) (undo-tree-id735 . -197) (undo-tree-id736 . -21) (undo-tree-id737 . -197) 12681) nil (23733 8807 402267 684000) 0 nil]) ((12422 . 12425) (#("l" 0 1 (fontified t)) . -12422) (undo-tree-id738 . -1) (#("e" 0 1 (fontified t)) . -12423) (undo-tree-id739 . -1) (#("t" 0 1 (fontified t)) . -12424) (undo-tree-id740 . -1) 12425 (12421 . 12425) (12412 . 12421) (12404 . 12412) (12392 . 12404) (#("max" 0 3 (fontified t)) . -12392) (undo-tree-id741 . -3) 12395 (12390 . 12395) (12387 . 12390) (12378 . 12387) 12317) nil (23733 8807 402296 80000) 0 nil]) ((#("        SseKeepAlive {
            event_stream: self.event_stream,
            comment_text: self.comment_text,
            max_interval: time,
            alive_timer: self.alive_timer,
        }
" 0 8 (fontified t) 8 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 35 (fontified t) 35 47 (fontified t face font-lock-variable-name-face) 47 49 (fontified t) 49 53 (fontified t face font-lock-keyword-face) 53 80 (fontified t) 80 92 (fontified t face font-lock-variable-name-face) 92 94 (fontified t) 94 98 (fontified t face font-lock-keyword-face) 98 125 (fontified t) 125 137 (fontified t face font-lock-variable-name-face) 137 157 (fontified t) 157 168 (fontified t face font-lock-variable-name-face) 168 170 (fontified t) 170 174 (fontified t face font-lock-keyword-face) 174 198 (fontified t)) . 12379) (undo-tree-id742 . -197) (undo-tree-id743 . -21) (undo-tree-id744 . -197) (undo-tree-id745 . -197) (undo-tree-id746 . -21) (undo-tree-id747 . -197) 12576) nil (23733 8807 402320 689000) 0 nil]) ((12343 . 12347)) nil (23733 8807 402325 980000) 0 nil] [nil ([nil ([nil nil ((15659 . 15660) (t 23733 8683 863181 656000)) ((#("&" 0 1 (fontified t)) . 15659) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1)) (23733 8708 956617 861000) 0 nil]) ((12605 . 12609)) ((#("mut " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 12605) (undo-tree-id717 . -1) (undo-tree-id718 . -3) (undo-tree-id719 . -3) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (t 23733 8683 863181 656000)) (23733 8708 959247 619000) 0 nil]) ((12343 . 12347) (t 23733 8635 491703 282000)) ((#("mut " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 12343) (undo-tree-id725 . -3) (undo-tree-id726 . -3)) (23733 8723 314094 258000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 15685) (15684 . 15685) (15683 . 15685) (#("(" 0 1 (fontified nil)) . -15683) (15676 . 15684)) nil (23733 8726 217560 952000) 0 nil]) ((#("&" 0 1 (fontified t)) . 15651)) nil (23733 8635 390910 710000) 0 nil] [nil ([nil ([nil ([nil nil ((15780 . 15781)) ((#("&" 0 1 (fontified t)) . 15780) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1)) (23733 8578 900239 975000) 0 nil]) ((#("
" 0 1 (fontified t)) . 15542) (undo-tree-id690 . 1)) ((15542 . 15543)) (23733 8578 906793 206000) 0 nil]) ((#("                    " 0 20 (fontified t)) . -15542) (undo-tree-id691 . -20) 15562 (15541 . 15562) (t 23733 8536 846164 294000) 15540) ((#("
                    " 0 1 (fontified t face font-lock-comment-face) 1 21 (fontified nil)) . 15541) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -21) (undo-tree-id713 . -1) (15542 . 15562)) (23733 8579 331739 701000) 0 nil]) ((#("&" 0 1 (fontified t)) . 15651) (undo-tree-id675 . -1) (undo-tree-id677 . -1) (undo-tree-id679 . -1) (undo-tree-id681 . -1) (undo-tree-id683 . -1) (undo-tree-id685 . -1) (undo-tree-id687 . -1) (undo-tree-id689 . -1) (t 23733 8519 49247 964000)) ((15651 . 15652) (t 23733 8536 846164 294000)) (23733 8579 995054 662000) 0 nil]) ((12762 . 12774) (#("ma" 0 2 (fontified t)) . -12762) (undo-tree-id660 . -2) 12764 (12760 . 12764) (12757 . 12760) (#("time" 0 4 (fontified t)) . 12757) (undo-tree-id661 . 4)) nil (23733 8580 704897 558000) 0 nil]) ((#("_" 0 1 (fontified t)) . 12725)) nil (23733 8518 892928 917000) 0 nil]) ((#("t" 0 1 (fontified t)) . 12725)) nil (23733 8518 892933 686000) 0 nil]) ((#("self.commen" 0 4 (fontified t face font-lock-keyword-face) 4 11 (fontified t)) . 12725)) nil (23733 8518 892937 252000) 0 nil]) ((#("        
" 0 8 (fontified t) 8 9 (fontified t)) . 12631) (undo-tree-id662 . -9) (undo-tree-id663 . -7) 12638) nil (23733 8518 892947 401000) 0 nil]) ((nil rear-nonsticky nil 12647 . 12648) (#("
" 0 1 (fontified nil)) . -12837) (12639 . 12838) 12638) nil (23733 8518 892953 972000) 0 nil]) ((12630 . 12639) 12580) nil (23733 8518 892958 538000) 0 nil]) ((#("        // TODO
" 0 8 (fontified t) 8 11 (fontified t face font-lock-comment-delimiter-face) 11 16 (fontified t face font-lock-comment-face)) . 12631) (undo-tree-id664 . -14) 12645) nil (23733 8518 892965 851000) 0 nil]) ((12623 . 12628) (12622 . 12623) (#(" " 0 1 (fontified nil)) . -12622) (12622 . 12623) (#(">" 0 1 (fontified nil syntax-table #1#)) . -12622) (12620 . 12623) (#(")" 0 1 (fontified nil)) . 12620) (undo-tree-id665 . 1) (12619 . 12620) (#(" " 0 1 (fontified nil)) . -12619) (12619 . 12620) (#(")" 0 1 (fontified nil face font-lock-type-face)) . -12619) (12613 . 12620) (#("s" 0 1 (fontified t)) . -12613) (undo-tree-id666 . -1) (#("t" 0 1 (fontified t)) . -12614) (undo-tree-id667 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -12615) (undo-tree-id668 . -1) (#("i" 0 1 (fontified t)) . -12616) (undo-tree-id669 . -1) (#("n" 0 1 (fontified t)) . -12617) (undo-tree-id670 . -1) (#("g" 0 1 (fontified t)) . -12618) (undo-tree-id671 . -1) 12619 (12612 . 12619) (12607 . 12612) (12601 . 12607)) nil (23733 8518 893004 145000) 0 nil]) ((#("&" 0 1 (fontified t)) . 12601) (undo-tree-id672 . 1)) nil (23733 8518 893018 251000) 0 nil]) ((#("l" 0 1 (fontified t)) . -12601) (undo-tree-id673 . -1) 12602 (12601 . 12602) (t 23733 8432 114162 820000)) nil (23733 8518 893027 437000) 0 nil]) ((#("mut " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t)) . 12343)) nil (23733 8431 952583 162000) 0 nil]) ((#("&" 0 1 (fontified t)) . 12343)) nil (23733 8431 952596 353000) 0 nil]) ((12606 . 12607)) nil (23733 8431 952602 175000) 0 nil]) ((#("        // TODO
" 0 8 (fontified t) 8 11 (fontified t face font-lock-comment-delimiter-face) 11 16 (fontified t face font-lock-comment-face)) . 12578) (undo-tree-id658 . -14) (undo-tree-id659 . -14) 12592 (t 23733 8404 219160 298000)) nil (23733 8431 952627 215000) 0 nil]) ((1 . 19498) (#("//! Server-Sent Events (SSE)
//!
//! # Example
//!
//! ```
//! # extern crate futures;
//! # extern crate warp;
//!
//! use std::time::Duration;
//! use futures::stream::iter_ok;
//! use warp::{Filter, sse::ServerSentEvent};
//!
//! let app = warp::path(\"push-notifications\").and(warp::sse()).map(|sse: warp::sse::Sse| {
//!     let events = iter_ok::<_, ::std::io::Error>(vec![
//!         warp::sse::data(\"unnamed event\").into_a(),
//!         (
//!             warp::sse::event(\"chat\"),
//!             warp::sse::data(\"chat message\"),
//!         ).into_a().into_b(),
//!         (
//!             warp::sse::id(13),
//!             warp::sse::event(\"chat\"),
//!             warp::sse::data(\"other chat message\\nwith next line\"),
//!             warp::sse::retry(Duration::from_millis(5000)),
//!         ).into_b().into_b(),
//!     ]);
//!     sse.reply(warp::sse::keep(events, None))
//! });
//! ```
//!
//! Each field already is event which can be sent to client.
//! The events with multiple fields can be created by combining fields using tuples.
//!
//! See also [EventSource](https://developer.mozilla.org/en-US/docs/Web/API/EventSource) API.
//!
use std::error::Error as StdError;
use std::fmt::{self, Display, Formatter, Write};
use std::str::FromStr;
use std::time::Duration;

use futures::{Async, Future, Poll, Stream};
use http::header::{HeaderValue, CACHE_CONTROL, CONTENT_TYPE};
use hyper::Body;
use serde::Serialize;
use serde_json;
use tokio::{clock::now, timer::Delay};

use self::sealed::{
    BoxedServerSentEvent, EitherServerSentEvent, SseError, SseField, SseFormat, SseWrapper,
};
use super::{header, header::MissingHeader};
use filter::One;
use reply::{ReplySealed, Response};
use {Filter, Rejection, Reply};

/// Server-sent event message
pub trait ServerSentEvent: SseFormat + Sized + Send + 'static {
    /// Convert to either A
    fn into_a<B>(self) -> EitherServerSentEvent<Self, B> {
        EitherServerSentEvent::A(self)
    }

    /// Convert to either B
    fn into_b<A>(self) -> EitherServerSentEvent<A, Self> {
        EitherServerSentEvent::B(self)
    }

    /// Convert to boxed
    fn boxed(self) -> BoxedServerSentEvent {
        BoxedServerSentEvent(Box::new(self))
    }
}

impl<T: SseFormat + Send + 'static> ServerSentEvent for T {}

#[allow(missing_debug_implementations)]
pub struct SseComment<T>(T);

/// Comment field (\":<comment-text>\")
pub fn comment<T>(comment: T) -> impl ServerSentEvent
where
    T: Display + Send + 'static,
{
    SseComment(comment)
}

impl<T: Display> SseFormat for SseComment<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Comment = k {
            k.fmt(f)?;
            self.0.fmt(f)?;
            f.write_char('\\n')?;
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseEvent<T>(T);

/// Event name field (\"event:<event-name>\")
pub fn event<T>(event: T) -> impl ServerSentEvent
where
    T: Display + Send + 'static,
{
    SseEvent(event)
}

impl<T: Display> SseFormat for SseEvent<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Event = k {
            k.fmt(f)?;
            self.0.fmt(f)?;
            f.write_char('\\n')?;
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseId<T>(T);

/// Identifier field (\"id:<identifier>\")
pub fn id<T>(id: T) -> impl ServerSentEvent
where
    T: Display + Send + 'static,
{
    SseId(id)
}

impl<T: Display> SseFormat for SseId<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Id = k {
            k.fmt(f)?;
            self.0.fmt(f)?;
            f.write_char('\\n')?;
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseRetry(Duration);

/// Retry timeout field (\"retry:<timeout>\")
pub fn retry(time: Duration) -> impl ServerSentEvent {
    SseRetry(time)
}

impl SseFormat for SseRetry {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Retry = k {
            k.fmt(f)?;

            let secs = self.0.as_secs();
            let millis = self.0.subsec_nanos() / 1_000_000;

            if secs > 0 {
                // format seconds
                secs.fmt(f)?;

                // pad milliseconds
                if millis < 10 {
                    f.write_str(\"00\")?;
                } else if millis < 100 {
                    f.write_char('0')?;
                }
            }

            // format milliseconds
            millis.fmt(f)?;

            f.write_char('\\n')?;
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseData<T>(T);

/// Data field(s) (\"data:<content>\")
///
/// The multiline content will be transferred
/// using sequential data fields, one per line.
pub fn data<T>(data: T) -> impl ServerSentEvent
where
    T: Display + Send + 'static,
{
    SseData(data)
}

impl<T: Display> SseFormat for SseData<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Data = k {
            for line in self.0.to_string().split('\\n') {
                k.fmt(f)?;
                line.fmt(f)?;
                f.write_char('\\n')?;
            }
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseJson<T>(T);

/// Data field with JSON content (\"data:<json-content>\")
pub fn json<T>(data: T) -> impl ServerSentEvent
where
    T: Serialize + Send + 'static,
{
    SseJson(data)
}

impl<T: Serialize> SseFormat for SseJson<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Data = k {
            k.fmt(f)?;
            serde_json::to_string(&self.0)
                .map_err(|error| {
                    error!(\"sse::json error {}\", error);
                    fmt::Error
                })
                .and_then(|data| data.fmt(f))?;
            f.write_char('\\n')?;
        }
        Ok(())
    }
}

macro_rules! tuple_fmt {
    (($($t:ident),+) => ($($i:tt),+)) => {
        impl<$($t),+> SseFormat for ($($t),+)
        where
            $($t: SseFormat,)+
        {
            fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
                $(self.$i.fmt_field(f, k)?;)+
                Ok(())
            }
        }
    };
}

tuple_fmt!((A, B) => (0, 1));
tuple_fmt!((A, B, C) => (0, 1, 2));
tuple_fmt!((A, B, C, D) => (0, 1, 2, 3));
tuple_fmt!((A, B, C, D, E) => (0, 1, 2, 3, 4));
tuple_fmt!((A, B, C, D, E, F) => (0, 1, 2, 3, 4, 5));
tuple_fmt!((A, B, C, D, E, F, G) => (0, 1, 2, 3, 4, 5, 6));
tuple_fmt!((A, B, C, D, E, F, G, H) => (0, 1, 2, 3, 4, 5, 6, 7));

/// Gets the optional last event id from request.
/// Typically this identifier represented as number or string.
///
/// ```
/// let app = warp::sse::last_event_id::<u32>();
///
/// // The identifier is present
/// assert_eq!(
///     warp::test::request()
///        .header(\"Last-Event-ID\", \"12\")
///        .filter(&app)
///        .unwrap(),
///     Some(12)
/// );
///
/// // The identifier is missing
/// assert_eq!(
///     warp::test::request()
///        .filter(&app)
///        .unwrap(),
///     None
/// );
///
/// // The identifier is not a valid
/// assert!(
///     warp::test::request()
///        .header(\"Last-Event-ID\", \"abc\")
///        .filter(&app)
///        .is_err(),
/// );
/// ```
pub fn last_event_id<T>() -> impl Filter<Extract = One<Option<T>>, Error = Rejection>
where
    T: FromStr + Send,
{
    header::header(\"last-event-id\")
        .map(Some)
        .or_else(|rejection: Rejection| {
            if rejection.find_cause::<MissingHeader>().is_some() {
                return Ok((None,));
            }
            Err(rejection)
        })
}

/// Creates a Server-sent Events filter.
///
/// The yielded `Sse` is used to reply with stream of events.
///
/// # Note
///
/// This filter combines multiple filters internally, so you don't need them:
///
/// - Method must be `GET`
/// - Header `connection` must be `keep-alive` when it present.
///
/// If the filters are met, yields a `Sse`. Calling `Sse::reply` will return
/// a reply with:
///
/// - Status of `200 OK`
/// - Header `content-type: text/event-stream`
/// - Header `cache-control: no-cache`.
pub fn sse() -> impl Filter<Extract = One<Sse>, Error = Rejection> + Copy {
    ::get2()
        .and(
            header::exact_ignore_case(\"connection\", \"keep-alive\").or_else(
                |rejection: Rejection| {
                    if rejection.find_cause::<MissingHeader>().is_some() {
                        return Ok(());
                    }
                    Err(rejection)
                },
            ),
        )
        .map(|| Sse)
}

/// Extracted by the [`sse`](sse) filter, and used to reply with stream of events.
pub struct Sse;

impl Sse {
    /// Server-sent events reply
    ///
    /// This function converts stream of server events into reply.
    ///
    /// ```
    /// # extern crate futures;
    /// # extern crate warp;
    /// # extern crate serde;
    /// # #[macro_use] extern crate serde_derive;
    ///
    /// use std::time::Duration;
    /// use futures::stream::iter_ok;
    /// use warp::{Filter, sse::ServerSentEvent};
    ///
    /// #[derive(Serialize)]
    /// struct Msg {
    ///     from: u32,
    ///     text: String,
    /// }
    ///
    /// let app = warp::path(\"sse\").and(warp::sse()).map(|sse: warp::sse::Sse| {
    ///     let events = iter_ok::<_, ::std::io::Error>(vec![
    ///         // Unnamed event with data only
    ///         warp::sse::data(\"payload\").boxed(),
    ///         // Named event with ID and retry timeout
    ///         (
    ///             warp::sse::data(\"other message\\nwith next line\"),
    ///             warp::sse::event(\"chat\"),
    ///             warp::sse::id(1),
    ///             warp::sse::retry(Duration::from_millis(15000))
    ///         ).boxed(),
    ///         // Event with JSON data
    ///         (
    ///             warp::sse::id(2),
    ///             warp::sse::json(Msg {
    ///                 from: 2,
    ///                 text: \"hello\".into(),
    ///             }),
    ///         ).boxed(),
    ///     ]);
    ///     sse.reply(events)
    /// });
    ///
    /// let res = warp::test::request()
    ///     .method(\"GET\")
    ///     .header(\"Connection\", \"Keep-Alive\")
    ///     .path(\"/sse\")
    ///     .reply(&app)
    ///     .into_body();
    ///
    /// assert_eq!(
    ///     res,
    ///     r#\"data:payload
    ///
    /// event:chat
    /// data:other message
    /// data:with next line
    /// id:1
    /// retry:15000
    ///
    /// data:{\"from\":2,\"text\":\"hello\"}
    /// id:2
    ///
    /// \"#
    /// );
    /// ```
    pub fn reply<S>(self, event_stream: S) -> impl Reply
    where
        S: Stream + Send + 'static,
        S::Item: ServerSentEvent,
        S::Error: StdError + Send + Sync + 'static,
    {
        SseReply { event_stream }
    }
}

impl fmt::Debug for Sse {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.debug_struct(\"Sse\").finish()
    }
}

#[allow(missing_debug_implementations)]
struct SseReply<S> {
    event_stream: S,
}

impl<S> ReplySealed for SseReply<S>
where
    S: Stream + Send + 'static,
    S::Item: ServerSentEvent,
    S::Error: StdError + Send + Sync + 'static,
{
    #[inline]
    fn into_response(self) -> Response {
        let body_stream = self
            .event_stream
            .map_err(|error| {
                // FIXME: error logging
                error!(\"sse stream error: {}\", error);
                SseError
            })
            .and_then(|event| SseWrapper::format(&event));

        let mut res = Response::new(Body::wrap_stream(body_stream));
        // Set appropriate content type
        res.headers_mut()
            .insert(CONTENT_TYPE, HeaderValue::from_static(\"text/event-stream\"));
        // Disable response body caching
        res.headers_mut()
            .insert(CACHE_CONTROL, HeaderValue::from_static(\"no-cache\"));
        res
    }
}

#[allow(missing_debug_implementations)]
pub struct SseKeepAlive<S> {
    event_stream: S,
    comment_text: String,
    max_interval: Duration,
    alive_timer: Delay,
}
impl<S> SseKeepAlive<S> {
    pub fn with_durration(&mut self, time: Duration) -> Self {
        SseKeepAlive {
            event_stream: self.event_stream,
            comment_text: self.comment_text,
            max_interval: time,
            alive_timer: self.alive_timer,
            
        }
        // TODO
    }

    pub fn with_text() {
        // TODO
    }
}

/// This is a deprecated version of `keep_alive`, which is maintained for
/// backwards compatibility.  Refer to the documentation accompanying `keep_alive`
/// for details about the purpose/usage of these two functions.
///
/// Unlike `keep_alive`, `keep` requires you to provide an `Option<Durration>` as a
/// second parameter and interprets `None` as a signal to use a default durration
/// of 15 seconds.  `keep` also always sends the heartbeat signal `:` whereas
/// `keep_alive` alows you to customize that signal.
pub fn keep<S>(
    event_stream: S,
    keep_interval: impl Into<Option<Duration>>,
) -> impl Stream<
    Item = impl ServerSentEvent + Send + 'static,
    Error = impl StdError + Send + Sync + 'static,
> + Send
         + 'static
where
    S: Stream + Send + 'static,
    S::Item: ServerSentEvent + Send,
    S::Error: StdError + Send + Sync + 'static,
{
    let max_interval = keep_interval
        .into()
        .unwrap_or_else(|| Duration::from_secs(15));
    let alive_timer = Delay::new(now() + max_interval);
    SseKeepAlive {
        event_stream,
        comment_text: \"\".to_string(),
        max_interval,
        alive_timer,
    }
}

/// Keeps event source connection when no events sent over a some time.
///
/// Some proxy servers may drop HTTP connection after a some timeout of inactivity.
/// This function helps to prevent such behavior by sending comment events every
/// `keep_interval` of inactivity.
///
/// By default the comment is `:` (an empty comment) and the  time interval between
/// events is 15 seconds.  Both of thes may be customized using the builder pattern
/// as shown below.
///
/// See [notes](https://www.w3.org/TR/2009/WD-eventsource-20090421/#notes).
pub fn keep_alive<S>(event_stream: S) -> SseKeepAlive<S>
where
    S: Stream + Send + 'static,
    S::Item: ServerSentEvent + Send,
    S::Error: StdError + Send + Sync + 'static,
{
    let max_interval = Duration::from_secs(15);
    let alive_timer = Delay::new(now() + max_interval);
    SseKeepAlive {
        event_stream,
        comment_text: \"\".to_string(),
        max_interval,
        alive_timer,
    }
}

impl<S> Stream for SseKeepAlive<S>
where
    S: Stream + Send + 'static,
    S::Item: ServerSentEvent,
    S::Error: StdError + Send + Sync + 'static,
{
    type Item = EitherServerSentEvent<S::Item, SseComment<&'static str>>;
    type Error = SseError;

    fn poll(&mut self) -> Poll<Option<Self::Item>, Self::Error> {
        match self.event_stream.poll() {
            Ok(Async::NotReady) => match self.alive_timer.poll() {
                Ok(Async::NotReady) => Ok(Async::NotReady),
                Ok(Async::Ready(_)) => {
                    // restart timer
                    self.alive_timer.reset(now() + self.max_interval);
                    let comment_str = &self.comment_text.clone();
                    Ok(Async::Ready(Some(EitherServerSentEvent::B(SseComment(
                        comment_str,
                    )))))
                }
                Err(error) => {
                    error!(\"sse::keep error: {}\", error);
                    Err(SseError)
                }
            },
            Ok(Async::Ready(Some(event))) => {
                // restart timer
                self.alive_timer.reset(now() + self.max_interval);
                Ok(Async::Ready(Some(EitherServerSentEvent::A(event))))
            }
            Ok(Async::Ready(None)) => Ok(Async::Ready(None)),
            Err(error) => {
                error!(\"sse::keep error: {}\", error);
                Err(SseError)
            }
        }
    }
}

mod sealed {
    use super::*;

    /// SSE error type
    #[derive(Debug)]
    pub struct SseError;

    impl Display for SseError {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            write!(f, \"sse error\")
        }
    }

    impl StdError for SseError {
        fn description(&self) -> &str {
            \"sse error\"
        }
    }

    impl Display for SseField {
        fn fmt(&self, f: &mut Formatter) -> fmt::Result {
            use self::SseField::*;
            f.write_str(match self {
                Event => \"event:\",
                Id => \"id:\",
                Data => \"data:\",
                Retry => \"retry:\",
                Comment => \":\",
            })
        }
    }

    /// SSE field kind
    #[allow(missing_debug_implementations)]
    pub enum SseField {
        /// Event name field
        Event,
        /// Event id field
        Id,
        /// Event data field
        Data,
        /// Retry timeout field
        Retry,
        /// Comment field
        Comment,
    }

    /// SSE formatter trait
    pub trait SseFormat {
        /// format message field
        fn fmt_field(&self, _f: &mut Formatter, _key: &SseField) -> fmt::Result {
            Ok(())
        }
    }

    /// SSE wrapper to help formatting messages
    #[allow(missing_debug_implementations)]
    pub struct SseWrapper<'a, T: 'a>(&'a T);

    impl<'a, T> SseWrapper<'a, T>
    where
        T: SseFormat + 'a,
    {
        pub fn format(event: &'a T) -> Result<String, SseError> {
            let mut buf = String::new();
            buf.write_fmt(format_args!(\"{}\", SseWrapper(event)))
                .map_err(|_| SseError)?;
            buf.shrink_to_fit();
            Ok(buf)
        }
    }

    impl<'a, T> Display for SseWrapper<'a, T>
    where
        T: SseFormat,
    {
        fn fmt(&self, f: &mut Formatter) -> fmt::Result {
            self.0.fmt_field(f, &SseField::Comment)?;
            // The event name usually transferred before the other fields.
            self.0.fmt_field(f, &SseField::Event)?;
            // It is important that the data will be transferred before
            // the identifier to prevent possible losing events when
            // resuming connection.
            self.0.fmt_field(f, &SseField::Data)?;
            self.0.fmt_field(f, &SseField::Id)?;
            self.0.fmt_field(f, &SseField::Retry)?;
            f.write_char('\\n')
        }
    }

    #[allow(missing_debug_implementations)]
    pub struct BoxedServerSentEvent(pub(super) Box<SseFormat + Send>);

    impl SseFormat for BoxedServerSentEvent {
        fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
            self.0.fmt_field(f, k)
        }
    }

    #[allow(missing_debug_implementations)]
    pub enum EitherServerSentEvent<A, B> {
        A(A),
        B(B),
    }

    impl<A, B> SseFormat for EitherServerSentEvent<A, B>
    where
        A: SseFormat,
        B: SseFormat,
    {
        fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
            match self {
                EitherServerSentEvent::A(a) => a.fmt_field(f, k),
                EitherServerSentEvent::B(b) => b.fmt_field(f, k),
            }
        }
    }
}
" 0 29 (fontified t face font-lock-doc-face) 29 33 (fontified t face font-lock-doc-face) 33 47 (fontified t face font-lock-doc-face) 47 51 (fontified t face font-lock-doc-face) 51 59 (fontified t face font-lock-doc-face) 59 87 (fontified t face font-lock-doc-face) 87 112 (fontified t face font-lock-doc-face) 112 116 (fontified t face font-lock-doc-face) 116 145 (fontified t face font-lock-doc-face) 145 179 (fontified t face font-lock-doc-face) 179 225 (fontified t face font-lock-doc-face) 225 229 (fontified t face font-lock-doc-face) 229 321 (fontified t face font-lock-doc-face) 321 351 (fontified t face font-lock-doc-face) 351 352 (fontified t syntax-table #1# face font-lock-doc-face) 352 371 (fontified t face font-lock-doc-face) 371 372 (fontified t syntax-table #1# face font-lock-doc-face) 372 379 (fontified t face font-lock-doc-face) 379 434 (fontified t face font-lock-doc-face) 434 448 (fontified t face font-lock-doc-face) 448 490 (fontified t face font-lock-doc-face) 490 500 (fontified t face font-lock-doc-face) 500 539 (fontified t face font-lock-doc-face) 539 572 (fontified t face font-lock-doc-face) 572 586 (fontified t face font-lock-doc-face) 586 621 (fontified t face font-lock-doc-face) 621 663 (fontified t face font-lock-doc-face) 663 734 (fontified t face font-lock-doc-face) 734 797 (fontified t face font-lock-doc-face) 797 830 (fontified t face font-lock-doc-face) 830 842 (fontified t face font-lock-doc-face) 842 891 (fontified t face font-lock-doc-face) 891 899 (fontified t face font-lock-doc-face) 899 907 (fontified t face font-lock-doc-face) 907 911 (fontified t face font-lock-doc-face) 911 972 (fontified t face font-lock-doc-face) 972 1039 (fontified t face font-lock-doc-face) 1039 1057 (fontified t face font-lock-doc-face) 1057 1061 (fontified t face font-lock-doc-face) 1061 1155 (fontified t face font-lock-doc-face) 1155 1159 (fontified t face font-lock-doc-face) 1159 1162 (fontified t face font-lock-keyword-face) 1162 1163 (fontified t) 1163 1166 (fontified t face font-lock-constant-face) 1166 1168 (fontified t) 1168 1173 (fontified t face font-lock-constant-face) 1173 1175 (fontified t) 1175 1180 (fontified t face font-lock-type-face) 1180 1181 (fontified t) 1181 1183 (fontified t face font-lock-keyword-face) 1183 1184 (fontified t) 1184 1192 (fontified t face font-lock-type-face) 1192 1194 (fontified t) 1194 1197 (fontified t face font-lock-keyword-face) 1197 1198 (fontified t) 1198 1201 (fontified t face font-lock-constant-face) 1201 1203 (fontified t) 1203 1206 (fontified t face font-lock-constant-face) 1206 1209 (fontified t) 1209 1213 (fontified t face font-lock-keyword-face) 1213 1215 (fontified t) 1215 1222 (fontified t face font-lock-type-face) 1222 1224 (fontified t) 1224 1233 (fontified t face font-lock-type-face) 1233 1235 (fontified t) 1235 1240 (fontified t face font-lock-type-face) 1240 1243 (fontified t) 1243 1246 (fontified t face font-lock-keyword-face) 1246 1247 (fontified t) 1247 1250 (fontified t face font-lock-constant-face) 1250 1252 (fontified t) 1252 1255 (fontified t face font-lock-type-face) 1255 1257 (fontified t) 1257 1264 (fontified t face font-lock-type-face) 1264 1266 (fontified t) 1266 1269 (fontified t face font-lock-keyword-face) 1269 1270 (fontified t) 1270 1273 (fontified t face font-lock-constant-face) 1273 1275 (fontified t) 1275 1279 (fontified t face font-lock-constant-face) 1279 1281 (fontified t) 1281 1289 (fontified t face font-lock-type-face) 1289 1292 (fontified t) 1292 1295 (fontified t face font-lock-keyword-face) 1295 1296 (fontified t) 1296 1303 (fontified t face font-lock-constant-face) 1303 1306 (fontified t) 1306 1311 (fontified t face font-lock-type-face) 1311 1313 (fontified t) 1313 1319 (fontified t face font-lock-type-face) 1319 1321 (fontified t) 1321 1325 (fontified t face font-lock-type-face) 1325 1327 (fontified t) 1327 1333 (fontified t face font-lock-type-face) 1333 1336 (fontified t) 1336 1339 (fontified t face font-lock-keyword-face) 1339 1340 (fontified t) 1340 1344 (fontified t face font-lock-constant-face) 1344 1346 (fontified t) 1346 1352 (fontified t face font-lock-constant-face) 1352 1355 (fontified t) 1355 1366 (fontified t face font-lock-type-face) 1366 1368 (fontified t) 1368 1381 (fontified t face font-lock-type-face) 1381 1383 (fontified t) 1383 1395 (fontified t face font-lock-type-face) 1395 1398 (fontified t) 1398 1401 (fontified t face font-lock-keyword-face) 1401 1402 (fontified t) 1402 1407 (fontified t face font-lock-constant-face) 1407 1409 (fontified t) 1409 1413 (fontified t face font-lock-type-face) 1413 1415 (fontified t) 1415 1418 (fontified t face font-lock-keyword-face) 1418 1419 (fontified t) 1419 1424 (fontified t face font-lock-constant-face) 1424 1426 (fontified t) 1426 1435 (fontified t face font-lock-type-face) 1435 1437 (fontified t) 1437 1440 (fontified t face font-lock-keyword-face) 1440 1441 (fontified t) 1441 1451 (fontified t face font-lock-constant-face) 1451 1453 (fontified t) 1453 1456 (fontified t face font-lock-keyword-face) 1456 1457 (fontified t) 1457 1462 (fontified t face font-lock-constant-face) 1462 1465 (fontified t) 1465 1470 (fontified t face font-lock-constant-face) 1470 1477 (fontified t) 1477 1482 (fontified t face font-lock-constant-face) 1482 1484 (fontified t) 1484 1489 (fontified t face font-lock-type-face) 1489 1493 (fontified t) 1493 1496 (fontified t face font-lock-keyword-face) 1496 1497 (fontified t) 1497 1501 (fontified t face font-lock-keyword-face) 1501 1503 (fontified t) 1503 1509 (fontified t face font-lock-constant-face) 1509 1517 (fontified t) 1517 1537 (fontified t face font-lock-type-face) 1537 1539 (fontified t) 1539 1557 (fontified t face font-lock-type-face) 1557 1560 (fontified t face font-lock-type-face) 1560 1562 (fontified t) 1562 1570 (fontified t face font-lock-type-face) 1570 1572 (fontified t) 1572 1580 (fontified t face font-lock-type-face) 1580 1582 (fontified t) 1582 1591 (fontified t face font-lock-type-face) 1591 1593 (fontified t) 1593 1603 (fontified t face font-lock-type-face) 1603 1605 (fontified t) 1884 1885 (syntax-table #1#) 2017 2018 (syntax-table #1#) 2143 2144 (syntax-table #1#) 2375 2376 (syntax-table #1#) 2388 2389 (syntax-table #1#) 2423 2424 (syntax-table #1#) 2619 2620 (syntax-table #1#) 2750 2751 (syntax-table #2#) 2753 2754 (syntax-table #2#) 2885 2886 (syntax-table #1#) 2896 2897 (syntax-table #1#) 2927 2928 (syntax-table #1#) 3117 3118 (syntax-table #1#) 3246 3247 (syntax-table #2#) 3249 3250 (syntax-table #2#) 3375 3376 (syntax-table #1#) 3386 3387 (syntax-table #1#) 3411 3412 (syntax-table #1#) 3592 3593 (syntax-table #1#) 3718 3719 (syntax-table #2#) 3721 3722 (syntax-table #2#) 3860 3861 (syntax-table #1#) 3868 3869 (syntax-table #1#) 3902 3903 (syntax-table #1#) 4037 4038 (syntax-table #1#) 4236 4237 (syntax-table #1#) 4369 4370 (syntax-table #1#) 4449 4450 (syntax-table #1#) 4490 4491 (syntax-table #2#) 4492 4493 (syntax-table #2#) 4619 4620 (syntax-table #2#) 4622 4623 (syntax-table #2#) 4749 4750 (syntax-table #1#) 4757 4758 (syntax-table #1#) 4884 4885 (syntax-table #1#) 5071 5072 (syntax-table #1#) 5172 5173 (syntax-table #2#) 5175 5176 (syntax-table #2#) 5266 5267 (syntax-table #2#) 5269 5270 (syntax-table #2#) 5425 5426 (syntax-table #1#) 5438 5439 (syntax-table #1#) 5467 5468 (syntax-table #1#) 5658 5659 (syntax-table #1#) 5991 5992 (syntax-table #2#) 5994 5995 (syntax-table #2#) 6080 6081 (syntax-table #1#) 6097 6098 (syntax-table #1#) 6113 6114 (syntax-table #1#) 6121 6122 (syntax-table #1#) 6268 6269 (syntax-table #1#) 6406 6407 (syntax-table #1#) 6439 6440 (syntax-table #1#) 6478 6479 (syntax-table #1#) 6523 6524 (syntax-table #1#) 6574 6575 (syntax-table #1#) 6631 6632 (syntax-table #1#) 6694 6695 (syntax-table #1#) 6889 6890 (syntax-table #1#) 6893 6894 (syntax-table #1#) 7460 7461 (syntax-table #1#) 8333 8334 (syntax-table #1#) 9526 9527 (syntax-table #1#) 9546 9547 (syntax-table #1#) 10560 10561 (syntax-table #3#) 10691 10695 (fontified t) 10695 10699 (fontified t face font-lock-doc-face) 10699 10703 (fontified t) 10703 10738 (fontified t face font-lock-doc-face) 10738 10742 (fontified t) 10742 10751 (fontified t face font-lock-doc-face) 10751 10755 (fontified t) 10755 10759 (fontified t face font-lock-doc-face) 10759 10763 (fontified t) 10763 10770 (fontified t face font-lock-doc-face) 10770 10774 (fontified t) 10774 10781 (fontified t face font-lock-doc-face) 10781 10785 (fontified t) 10785 10793 (fontified t face font-lock-doc-face) 10793 10797 (fontified t) 10797 10800 (fontified t face font-lock-keyword-face) 10800 10801 (fontified t) 10801 10803 (fontified t face font-lock-keyword-face) 10803 10804 (fontified t) 10804 10809 (fontified t face font-lock-function-name-face) 10809 10810 (fontified t) 10810 10811 (fontified t face font-lock-type-face) 10811 10813 (fontified t) 10813 10817 (fontified t face font-lock-keyword-face) 10817 10819 (fontified t) 10819 10831 (fontified t face font-lock-variable-name-face) 10831 10833 (fontified t) 10833 10834 (fontified t face font-lock-type-face) 10834 10837 (fontified t) 10837 10838 (syntax-table #1# fontified t) 10838 10839 (fontified t) 10839 10843 (fontified t face font-lock-keyword-face) 10843 10844 (fontified t) 10844 10849 (fontified t face font-lock-type-face) 10849 10854 (fontified t) 10854 10859 (fontified t face font-lock-keyword-face) 10859 10868 (fontified t) 10868 10869 (fontified t face font-lock-variable-name-face) 10869 10871 (fontified t) 10871 10877 (fontified t face font-lock-type-face) 10877 10880 (fontified t) 10880 10884 (fontified t face font-lock-type-face) 10884 10888 (fontified t) 10888 10894 (fontified t face font-lock-keyword-face) 10894 10904 (fontified t) 10904 10905 (fontified t face font-lock-type-face) 10905 10907 (fontified t) 10907 10911 (fontified t face font-lock-variable-name-face) 10911 10913 (fontified t) 10913 10928 (fontified t face font-lock-type-face) 10928 10938 (fontified t) 10938 10939 (fontified t face font-lock-type-face) 10939 10941 (fontified t) 10941 10946 (fontified t face font-lock-variable-name-face) 10946 10948 (fontified t) 10948 10956 (fontified t face font-lock-type-face) 10956 10959 (fontified t) 10959 10963 (fontified t face font-lock-type-face) 10963 10966 (fontified t) 10966 10970 (fontified t face font-lock-type-face) 10970 10974 (fontified t) 10974 10980 (fontified t face font-lock-keyword-face) 10980 10996 (fontified t) 10996 11004 (fontified t face font-lock-type-face) 11004 11031 (fontified t) 11031 11035 (fontified t face font-lock-keyword-face) 11035 11036 (fontified t) 11036 11039 (fontified t face font-lock-constant-face) 11039 11041 (fontified t) 11041 11046 (fontified t face font-lock-type-face) 11046 11047 (fontified t) 11047 11050 (fontified t face font-lock-keyword-face) 11050 11051 (fontified t) 11051 11054 (fontified t face font-lock-type-face) 11054 11061 (fontified t) 11061 11063 (fontified t face font-lock-keyword-face) 11063 11064 (fontified t) 11064 11067 (fontified t face font-lock-function-name-face) 11067 11069 (fontified t) 11069 11073 (fontified t face font-lock-keyword-face) 11073 11075 (fontified t) 11075 11076 (fontified t face font-lock-variable-name-face) 11076 11079 (fontified t) 11079 11082 (fontified t face font-lock-keyword-face) 11082 11083 (fontified t) 11083 11086 (fontified t face font-lock-constant-face) 11086 11088 (fontified t) 11088 11097 (fontified t face font-lock-type-face) 11097 11100 (fontified t) 11100 11101 (syntax-table #1# fontified t) 11101 11102 (fontified t) 11102 11105 (fontified t face font-lock-constant-face) 11105 11107 (fontified t) 11107 11113 (fontified t face font-lock-type-face) 11113 11139 (fontified t) 11139 11144 (fontified t face font-lock-string-face) 11144 11155 (fontified t) 11155 11161 (fontified t) 11161 11163 (fontified t) 11163 11164 (fontified t) 11164 11203 (fontified t face font-lock-preprocessor-face) 11203 11204 (fontified t) 11204 11210 (fontified t face font-lock-keyword-face) 11210 11211 (fontified t) 11211 11219 (fontified t face font-lock-type-face) 11219 11220 (fontified t) 11220 11221 (fontified t face font-lock-type-face) 11221 11229 (fontified t) 11229 11241 (fontified t face font-lock-variable-name-face) 11241 11243 (fontified t) 11243 11244 (fontified t face font-lock-type-face) 11244 11249 (fontified t) 11249 11253 (fontified t face font-lock-keyword-face) 11253 11254 (fontified t) 11254 11255 (fontified t face font-lock-type-face) 11255 11257 (fontified t) 11257 11268 (fontified t face font-lock-type-face) 11268 11269 (fontified t) 11269 11272 (fontified t face font-lock-keyword-face) 11272 11273 (fontified t) 11273 11281 (fontified t face font-lock-type-face) 11281 11282 (fontified t) 11282 11283 (fontified t face font-lock-type-face) 11283 11285 (fontified t) 11285 11290 (fontified t face font-lock-keyword-face) 11290 11295 (fontified t) 11295 11296 (fontified t face font-lock-variable-name-face) 11296 11298 (fontified t) 11298 11304 (fontified t face font-lock-type-face) 11304 11307 (fontified t) 11307 11311 (fontified t face font-lock-type-face) 11311 11315 (fontified t) 11315 11321 (fontified t face font-lock-keyword-face) 11321 11327 (fontified t) 11327 11328 (fontified t face font-lock-type-face) 11328 11330 (fontified t) 11330 11334 (fontified t face font-lock-variable-name-face) 11334 11336 (fontified t) 11336 11351 (fontified t face font-lock-type-face) 11351 11357 (fontified t) 11357 11358 (fontified t face font-lock-type-face) 11358 11360 (fontified t) 11360 11365 (fontified t face font-lock-variable-name-face) 11365 11367 (fontified t) 11367 11375 (fontified t face font-lock-type-face) 11375 11378 (fontified t) 11378 11382 (fontified t face font-lock-type-face) 11382 11385 (fontified t) 11385 11389 (fontified t face font-lock-type-face) 11389 11393 (fontified t) 11393 11399 (fontified t face font-lock-keyword-face) 11399 11407 (fontified t) 11407 11416 (fontified t face font-lock-preprocessor-face) 11416 11421 (fontified t) 11421 11423 (fontified t face font-lock-keyword-face) 11423 11424 (fontified t) 11424 11437 (fontified t face font-lock-function-name-face) 11437 11438 (fontified t) 11438 11442 (fontified t face font-lock-keyword-face) 11442 11445 (fontified t) 11445 11446 (syntax-table #1# fontified t) 11446 11447 (fontified t) 11447 11455 (fontified t face font-lock-type-face) 11455 11466 (fontified t) 11466 11469 (fontified t face font-lock-keyword-face) 11469 11470 (fontified t) 11470 11481 (fontified t face font-lock-variable-name-face) 11481 11484 (fontified t) 11484 11488 (fontified t face font-lock-keyword-face) 11488 11562 (fontified t) 11562 11565 (fontified t face font-lock-comment-delimiter-face) 11565 11586 (fontified t face font-lock-comment-face) 11586 11602 (fontified t) 11602 11608 (fontified t face font-lock-preprocessor-face) 11608 11609 (fontified t) 11609 11631 (fontified t face font-lock-string-face) 11631 11641 (fontified t) 11641 11657 (fontified t) 11657 11665 (fontified t face font-lock-type-face) 11665 11666 (fontified t) 11666 11681 (fontified t) 11681 11711 (fontified t) 11711 11721 (fontified t face font-lock-type-face) 11721 11749 (fontified t) 11749 11752 (fontified t face font-lock-keyword-face) 11752 11753 (fontified t) 11753 11756 (fontified t face font-lock-keyword-face) 11756 11757 (fontified t) 11757 11760 (fontified t face font-lock-variable-name-face) 11760 11763 (fontified t) 11763 11771 (fontified t face font-lock-type-face) 11771 11777 (fontified t) 11777 11781 (fontified t face font-lock-type-face) 11781 11818 (fontified t) 11818 11821 (fontified t face font-lock-comment-delimiter-face) 11821 11850 (fontified t face font-lock-comment-face) 11850 11896 (fontified t) 11896 11908 (fontified t face font-lock-type-face) 11908 11910 (fontified t) 11910 11921 (fontified t face font-lock-type-face) 11921 11935 (fontified t) 11935 11954 (fontified t face font-lock-string-face) 11954 11966 (fontified t) 11966 11969 (fontified t face font-lock-comment-delimiter-face) 11969 11999 (fontified t face font-lock-comment-face) 11999 12045 (fontified t) 12045 12058 (fontified t face font-lock-type-face) 12058 12060 (fontified t) 12060 12071 (fontified t face font-lock-type-face) 12071 12085 (fontified t) 12085 12095 (fontified t face font-lock-string-face) 12095 12120 (fontified t) 12120 12159 (fontified t face font-lock-preprocessor-face) 12159 12160 (fontified t) 12160 12163 (fontified t face font-lock-keyword-face) 12163 12164 (fontified t) 12164 12170 (fontified t face font-lock-keyword-face) 12170 12171 (fontified t) 12171 12181 (fontified t face font-lock-type-face) 12181 12183 (face font-lock-type-face fontified t) 12183 12184 (fontified t) 12184 12185 (face font-lock-type-face fontified t) 12185 12189 (fontified t) 12189 12193 (fontified t) 12193 12205 (fontified t face font-lock-variable-name-face) 12205 12207 (fontified t) 12207 12208 (fontified t face font-lock-type-face) 12208 12210 (fontified t) 12210 12214 (fontified t) 12214 12226 (fontified t face font-lock-variable-name-face) 12226 12228 (fontified t) 12228 12234 (fontified t face font-lock-type-face) 12234 12236 (fontified t) 12236 12240 (fontified t) 12240 12252 (fontified t face font-lock-variable-name-face) 12252 12254 (fontified t) 12254 12262 (fontified t face font-lock-type-face) 12262 12268 (fontified t) 12268 12279 (fontified t face font-lock-variable-name-face) 12279 12281 (fontified t) 12281 12286 (fontified t face font-lock-type-face) 12286 12288 (fontified t) 12288 12289 (fontified t) 12289 12290 (fontified t) 12290 12294 (fontified t face font-lock-keyword-face) 12294 12295 (fontified t) 12295 12296 (fontified t face font-lock-type-face) 12296 12297 (fontified t) 12297 12298 (fontified t) 12298 12310 (fontified t face font-lock-type-face) 12310 12311 (fontified t) 12311 12312 (fontified t face font-lock-type-face) 12312 12313 (fontified t) 12313 12314 (fontified t) 12314 12315 (fontified t) 12315 12316 (fontified t) 12316 12320 (fontified t) 12320 12323 (fontified t face font-lock-keyword-face) 12323 12324 (fontified t) 12324 12326 (fontified t face font-lock-keyword-face) 12326 12327 (fontified t) 12327 12341 (fontified t face font-lock-function-name-face) 12341 12343 (fontified t) 12343 12346 (fontified t face font-lock-keyword-face) 12346 12347 (fontified t) 12347 12351 (fontified t face font-lock-keyword-face) 12351 12353 (fontified t) 12353 12357 (fontified t face font-lock-variable-name-face) 12357 12359 (fontified t) 12359 12367 (fontified t face font-lock-type-face) 12367 12370 (fontified t) 12370 12371 (fontified t syntax-table #1#) 12371 12372 (fontified t) 12372 12376 (fontified t face font-lock-type-face) 12376 12377 (fontified t) 12377 12378 (fontified t) 12378 12379 (fontified t) 12379 12387 (fontified t) 12387 12399 (fontified t face font-lock-type-face) 12399 12400 (fontified t) 12400 12401 (fontified t) 12401 12402 (fontified t) 12402 12414 (fontified t) 12414 12426 (fontified t face font-lock-variable-name-face) 12426 12428 (fontified t) 12428 12432 (fontified t face font-lock-keyword-face) 12432 12433 (fontified t) 12433 12446 (fontified t) 12446 12447 (fontified t) 12447 12459 (fontified t) 12459 12471 (fontified t face font-lock-variable-name-face) 12471 12473 (fontified t) 12473 12477 (fontified t face font-lock-keyword-face) 12477 12478 (fontified t) 12478 12492 (fontified t) 12492 12504 (fontified t) 12504 12516 (fontified t face font-lock-variable-name-face) 12516 12524 (fontified t) 12524 12536 (fontified t) 12536 12547 (fontified t face font-lock-variable-name-face) 12547 12549 (fontified t) 12549 12553 (fontified t face font-lock-keyword-face) 12553 12554 (fontified t) 12554 12566 (fontified t) 12566 12567 (fontified t) 12567 12579 (fontified t) 12579 12580 (fontified t) 12580 12588 (fontified t) 12588 12589 (fontified t) 12589 12590 (fontified t) 12590 12598 (fontified t) 12598 12601 (fontified t face font-lock-comment-delimiter-face) 12601 12605 (fontified t face font-lock-comment-face) 12605 12606 (fontified t face font-lock-comment-face) 12606 12612 (fontified t) 12612 12613 (fontified t) 12613 12617 (fontified t) 12617 12620 (fontified t face font-lock-keyword-face) 12620 12621 (fontified t) 12621 12623 (fontified t face font-lock-keyword-face) 12623 12624 (fontified t) 12624 12633 (fontified t face font-lock-function-name-face) 12633 12636 (fontified t) 12636 12637 (fontified t) 12637 12638 (fontified t) 12638 12646 (fontified t) 12646 12649 (fontified t face font-lock-comment-delimiter-face) 12649 12653 (fontified t face font-lock-comment-face) 12653 12654 (fontified t face font-lock-comment-face) 12654 12658 (fontified t) 12658 12659 (fontified t) 12659 12660 (fontified t) 12660 12661 (fontified t) 12661 12662 (fontified t) 12662 12663 (fontified t) 12663 12737 (fontified t face font-lock-doc-face) 12737 12820 (fontified t face font-lock-doc-face) 12820 12884 (fontified t face font-lock-doc-face) 12884 12888 (fontified t face font-lock-doc-face) 12888 12954 (fontified t face font-lock-doc-face) 12954 12955 (syntax-table #1# fontified t face font-lock-doc-face) 12955 12964 (fontified t face font-lock-doc-face) 12964 12965 (syntax-table #1# fontified t face font-lock-doc-face) 12965 12972 (fontified t face font-lock-doc-face) 12972 13054 (fontified t face font-lock-doc-face) 13054 13067 (fontified t face font-lock-doc-face) 13067 13080 (face font-lock-doc-face fontified t) 13080 13090 (face font-lock-doc-face fontified t) 13090 13102 (face font-lock-doc-face fontified t) 13102 13108 (face font-lock-doc-face fontified t) 13108 13127 (face font-lock-doc-face fontified t) 13127 13132 (face font-lock-doc-face fontified t) 13132 13133 (face font-lock-doc-face) 13133 13154 (face font-lock-doc-face) 13154 13160 (face font-lock-doc-face) 13160 13162 (face font-lock-doc-face) 13162 13185 (face font-lock-doc-face) 13185 13188 (face font-lock-keyword-face) 13189 13191 (face font-lock-keyword-face) 13192 13196 (face font-lock-function-name-face) 13197 13198 (face font-lock-type-face) 13205 13217 (face font-lock-variable-name-face) 13219 13220 (face font-lock-type-face) 13226 13239 (face font-lock-variable-name-face) 13241 13245 (face font-lock-keyword-face) 13246 13250 (face font-lock-type-face) 13251 13257 (face font-lock-type-face) 13258 13266 (face font-lock-type-face) 13273 13274 (syntax-table #1#) 13275 13279 (face font-lock-keyword-face) 13280 13286 (face font-lock-type-face) 13292 13296 (face font-lock-type-face) 13299 13303 (face font-lock-keyword-face) 13304 13319 (face font-lock-type-face) 13322 13326 (face font-lock-type-face) 13330 13336 (face font-lock-keyword-face) 13342 13347 (face font-lock-type-face) 13350 13354 (face font-lock-keyword-face) 13355 13363 (face font-lock-type-face) 13366 13370 (face font-lock-type-face) 13373 13377 (face font-lock-type-face) 13381 13387 (face font-lock-keyword-face) 13393 13397 (face font-lock-type-face) 13410 13416 (face font-lock-keyword-face) 13417 13422 (face font-lock-keyword-face) 13427 13428 (face font-lock-variable-name-face) 13430 13436 (face font-lock-type-face) 13439 13443 (face font-lock-type-face) 13447 13453 (face font-lock-keyword-face) 13459 13460 (face font-lock-type-face) 13462 13466 (face font-lock-variable-name-face) 13468 13483 (face font-lock-type-face) 13486 13490 (face font-lock-type-face) 13496 13497 (face font-lock-type-face) 13499 13504 (face font-lock-variable-name-face) 13506 13514 (face font-lock-type-face) 13517 13521 (face font-lock-type-face) 13524 13528 (face font-lock-type-face) 13532 13538 (face font-lock-keyword-face) 13546 13549 (face font-lock-keyword-face) 13550 13562 (face font-lock-variable-name-face) 13622 13630 (face font-lock-type-face) 13652 13655 (face font-lock-keyword-face) 13656 13667 (face font-lock-variable-name-face) 13670 13675 (face font-lock-type-face) 13708 13720 (face font-lock-type-face) 13753 13765 (face font-lock-variable-name-face) 13767 13769 (face font-lock-string-face) 13835 13907 (face font-lock-doc-face) 13907 13911 (face font-lock-doc-face) 13911 13923 (face font-lock-doc-face) 13923 13995 (face font-lock-doc-face) 13995 14076 (face font-lock-doc-face) 14076 14111 (face font-lock-doc-face) 14111 14115 (face font-lock-doc-face) 14115 14199 (face font-lock-doc-face) 14199 14283 (face font-lock-doc-face) 14283 14303 (face font-lock-doc-face) 14303 14307 (face font-lock-doc-face) 14307 14383 (face font-lock-doc-face) 14383 14386 (face font-lock-keyword-face) 14387 14389 (face font-lock-keyword-face) 14390 14400 (face font-lock-function-name-face) 14401 14402 (face font-lock-type-face) 14404 14416 (face font-lock-variable-name-face) 14418 14419 (face font-lock-type-face) 14422 14423 (syntax-table #1#) 14424 14436 (face font-lock-type-face) 14437 14438 (face font-lock-type-face) 14440 14445 (face font-lock-keyword-face) 14450 14451 (face font-lock-variable-name-face) 14453 14459 (face font-lock-type-face) 14462 14466 (face font-lock-type-face) 14470 14476 (face font-lock-keyword-face) 14482 14483 (face font-lock-type-face) 14485 14489 (face font-lock-variable-name-face) 14491 14506 (face font-lock-type-face) 14509 14513 (face font-lock-type-face) 14519 14520 (face font-lock-type-face) 14522 14527 (face font-lock-variable-name-face) 14529 14537 (face font-lock-type-face) 14540 14544 (face font-lock-type-face) 14547 14551 (face font-lock-type-face) 14555 14561 (face font-lock-keyword-face) 14569 14572 (face font-lock-keyword-face) 14573 14585 (face font-lock-variable-name-face) 14588 14596 (face font-lock-type-face) 14617 14620 (face font-lock-keyword-face) 14621 14632 (face font-lock-variable-name-face) 14635 14640 (face font-lock-type-face) 14673 14685 (face font-lock-type-face) 14718 14730 (face font-lock-variable-name-face) 14732 14734 (face font-lock-string-face) 14800 14804 (face font-lock-keyword-face) 14805 14806 (face font-lock-type-face) 14808 14814 (face font-lock-type-face) 14815 14818 (face font-lock-keyword-face) 14819 14831 (face font-lock-type-face) 14832 14833 (face font-lock-type-face) 14835 14840 (face font-lock-keyword-face) 14845 14846 (face font-lock-variable-name-face) 14848 14854 (face font-lock-type-face) 14857 14861 (face font-lock-type-face) 14865 14871 (face font-lock-keyword-face) 14877 14878 (face font-lock-type-face) 14880 14884 (face font-lock-variable-name-face) 14886 14901 (face font-lock-type-face) 14907 14908 (face font-lock-type-face) 14910 14915 (face font-lock-variable-name-face) 14917 14925 (face font-lock-type-face) 14928 14932 (face font-lock-type-face) 14935 14939 (face font-lock-type-face) 14943 14949 (face font-lock-keyword-face) 14957 14961 (face font-lock-keyword-face) 14962 14966 (face font-lock-type-face) 14969 14990 (face font-lock-type-face) 14991 14992 (face font-lock-type-face) 14994 14998 (face font-lock-type-face) 15000 15010 (face font-lock-type-face) 15013 15019 (face font-lock-keyword-face) 15020 15023 (face font-lock-type-face) 15031 15035 (face font-lock-keyword-face) 15036 15041 (face font-lock-type-face) 15044 15052 (face font-lock-type-face) 15059 15061 (face font-lock-keyword-face) 15062 15066 (face font-lock-function-name-face) 15068 15071 (face font-lock-keyword-face) 15072 15076 (face font-lock-keyword-face) 15079 15080 (syntax-table #1#) 15081 15085 (face font-lock-type-face) 15086 15092 (face font-lock-type-face) 15093 15097 (face font-lock-type-face) 15099 15103 (face font-lock-type-face) 15106 15110 (face font-lock-type-face) 15112 15117 (face font-lock-type-face) 15129 15134 (face font-lock-keyword-face) 15135 15139 (face font-lock-keyword-face) 15174 15176 (face font-lock-type-face) 15177 15182 (face font-lock-type-face) 15184 15192 (face font-lock-type-face) 15195 15196 (syntax-table #1#) 15197 15202 (face font-lock-keyword-face) 15203 15207 (face font-lock-keyword-face) 15245 15247 (face font-lock-type-face) 15248 15253 (face font-lock-type-face) 15255 15263 (face font-lock-type-face) 15266 15267 (syntax-table #1#) 15268 15270 (face font-lock-type-face) 15271 15276 (face font-lock-type-face) 15278 15286 (face font-lock-type-face) 15305 15307 (face font-lock-type-face) 15308 15313 (face font-lock-type-face) 15315 15320 (face font-lock-type-face) 15326 15327 (syntax-table #1#) 15350 15353 (face font-lock-comment-delimiter-face) 15353 15367 (face font-lock-comment-face) 15387 15391 (face font-lock-keyword-face) 15418 15422 (face font-lock-keyword-face) 15458 15461 (face font-lock-keyword-face) 15462 15473 (face font-lock-variable-name-face) 15477 15481 (face font-lock-keyword-face) 15524 15526 (face font-lock-type-face) 15527 15532 (face font-lock-type-face) 15534 15539 (face font-lock-type-face) 15540 15544 (face font-lock-type-face) 15545 15566 (face font-lock-type-face) 15568 15569 (face font-lock-type-face) 15570 15580 (face font-lock-type-face) 15679 15682 (face font-lock-type-face) 15691 15692 (syntax-table #1#) 15715 15721 (face font-lock-preprocessor-face) 15722 15743 (face font-lock-string-face) 15773 15776 (face font-lock-type-face) 15777 15785 (face font-lock-type-face) 15832 15834 (face font-lock-type-face) 15835 15840 (face font-lock-type-face) 15842 15847 (face font-lock-type-face) 15848 15852 (face font-lock-type-face) 15863 15864 (syntax-table #1#) 15883 15886 (face font-lock-comment-delimiter-face) 15886 15900 (face font-lock-comment-face) 15916 15920 (face font-lock-keyword-face) 15947 15951 (face font-lock-keyword-face) 15983 15985 (face font-lock-type-face) 15986 15991 (face font-lock-type-face) 15993 15998 (face font-lock-type-face) 15999 16003 (face font-lock-type-face) 16004 16025 (face font-lock-type-face) 16027 16028 (face font-lock-type-face) 16065 16067 (face font-lock-type-face) 16068 16073 (face font-lock-type-face) 16075 16080 (face font-lock-type-face) 16081 16085 (face font-lock-type-face) 16089 16090 (syntax-table #1#) 16091 16093 (face font-lock-type-face) 16094 16099 (face font-lock-type-face) 16101 16106 (face font-lock-type-face) 16107 16111 (face font-lock-type-face) 16127 16130 (face font-lock-type-face) 16139 16140 (syntax-table #1#) 16159 16165 (face font-lock-preprocessor-face) 16166 16187 (face font-lock-string-face) 16213 16216 (face font-lock-type-face) 16217 16225 (face font-lock-type-face) 16260 16263 (face font-lock-keyword-face) 16264 16270 (face font-lock-constant-face) 16277 16280 (face font-lock-keyword-face) 16281 16286 (face font-lock-keyword-face) 16296 16315 (face font-lock-doc-face) 16319 16335 (face font-lock-preprocessor-face) 16340 16343 (face font-lock-keyword-face) 16344 16350 (face font-lock-keyword-face) 16351 16359 (face font-lock-type-face) 16366 16367 (face font-lock-keyword-face) 16367 16370 (face font-lock-keyword-face) 16371 16378 (face font-lock-type-face) 16379 16382 (face font-lock-keyword-face) 16383 16391 (face font-lock-type-face) 16402 16404 (face font-lock-keyword-face) 16405 16408 (face font-lock-function-name-face) 16410 16414 (face font-lock-keyword-face) 16416 16417 (face font-lock-variable-name-face) 16420 16423 (face font-lock-keyword-face) 16426 16429 (face font-lock-constant-face) 16431 16434 (face font-lock-constant-face) 16436 16445 (face font-lock-type-face) 16448 16449 (syntax-table #1#) 16452 16455 (face font-lock-constant-face) 16457 16460 (face font-lock-constant-face) 16462 16468 (face font-lock-type-face) 16483 16489 (face rust-builtin-formatting-macro-face) 16493 16502 (face font-lock-string-face) 16502 16503 (face font-lock-string-face syntax-table #3#) 16503 16504 (face font-lock-string-face) 16527 16531 (face font-lock-keyword-face) 16532 16540 (face font-lock-type-face) 16541 16544 (face font-lock-keyword-face) 16545 16553 (face font-lock-type-face) 16564 16566 (face font-lock-keyword-face) 16567 16578 (face font-lock-function-name-face) 16580 16584 (face font-lock-keyword-face) 16587 16588 (syntax-table #1#) 16590 16593 (face font-lock-type-face) 16608 16617 (face font-lock-string-face) 16617 16618 (face font-lock-string-face syntax-table #3#) 16618 16619 (face font-lock-string-face) 16641 16643 (face font-lock-keyword-face) 16643 16645 (face font-lock-keyword-face) 16646 16653 (face font-lock-type-face) 16654 16657 (face font-lock-keyword-face) 16658 16666 (face font-lock-type-face) 16711 16712 (syntax-table #1#) 16822 16823 (syntax-table #1#) 16854 16855 (syntax-table #1#) 16885 16886 (syntax-table #1#) 16919 16920 (syntax-table #1#) 16956 16957 (syntax-table #1#) 17462 17463 (syntax-table #1#)) . 1) (undo-tree-id588 . 6944) (undo-tree-id589 . -12488) (undo-tree-id590 . -12488) (undo-tree-id591 . -11666) (undo-tree-id592 . -12443) (undo-tree-id593 . -12488) (undo-tree-id594 . -11666) (undo-tree-id595 . -12443) (undo-tree-id596 . -11666) (undo-tree-id597 . -12443) (undo-tree-id598 . -12397) (undo-tree-id599 . -12397) (undo-tree-id600 . -12398) (undo-tree-id601 . -11666) (undo-tree-id602 . -12171) (undo-tree-id603 . -12183) (undo-tree-id604 . -12298) (undo-tree-id605 . -12310) (undo-tree-id606 . -12387) (undo-tree-id607 . -12399) (undo-tree-id608 . -12397) (undo-tree-id609 . -12397) (undo-tree-id610 . -11666) (undo-tree-id611 . -12397) (undo-tree-id612 . -12397) (undo-tree-id613 . -11666) (undo-tree-id614 . -12397) (undo-tree-id615 . -12397) (undo-tree-id616 . -11666) (undo-tree-id617 . -12387) (undo-tree-id618 . -12399) (undo-tree-id619 . -12387) (undo-tree-id620 . -12399) (undo-tree-id621 . -12588) (undo-tree-id622 . -12589) (undo-tree-id623 . -12536) (undo-tree-id624 . -12547) (undo-tree-id625 . -12397) (undo-tree-id626 . -12397) (undo-tree-id627 . -11666) (undo-tree-id628 . -12397) (undo-tree-id629 . -12397) (undo-tree-id630 . -11666) (undo-tree-id631 . -12536) (undo-tree-id632 . -12547) (undo-tree-id633 . -12588) (undo-tree-id634 . -12589) (undo-tree-id635 . -12387) (undo-tree-id636 . -12399) (undo-tree-id637 . -12387) (undo-tree-id638 . -12399) (undo-tree-id639 . -12397) (undo-tree-id640 . -12397) (undo-tree-id641 . -11666) (undo-tree-id642 . -12397) (undo-tree-id643 . -12397) (undo-tree-id644 . -11666) 12398) nil (23733 8404 118549 537000) 0 nil]) ((12566 . 12567) (12555 . 12566) (#("al" 0 2 (fontified t)) . -12555) (undo-tree-id645 . -2) 12557 (12548 . 12557) (12537 . 12548) (#("ali" 0 3 (fontified t)) . -12537) (undo-tree-id646 . -3) (undo-tree-id647 . -3) 12540 (12537 . 12540) (12524 . 12537) (12521 . 12524) (12517 . 12521) (12505 . 12517) (#("max" 0 3 (fontified t)) . -12505) (undo-tree-id648 . -3) (undo-tree-id649 . -3) 12508 (12505 . 12508) (12492 . 12505) (12491 . 12492) (12479 . 12491) (#("com" 0 3 (fontified t)) . -12479) (undo-tree-id650 . -3) 12482 (12473 . 12482) (12472 . 12473) (12460 . 12472) (#("comment_te" 0 10 (fontified t)) . -12460) (undo-tree-id651 . -7) (undo-tree-id652 . -10) 12470 (12460 . 12470) (12447 . 12460) 12429) nil (23733 8404 118579 656000) 0 nil]) ((12447 . 12460) (12446 . 12447) (12434 . 12446) (#("e" 0 1 (fontified t)) . -12434) (undo-tree-id653 . -1) 12435 (12433 . 12435) (12427 . 12433) (12415 . 12427) (#("event" 0 5 (fontified t)) . -12415) (undo-tree-id654 . -5) (undo-tree-id655 . -5) 12420 (12415 . 12420) (12402 . 12415) 12387) nil (23733 8404 118593 59000) 0 nil]) ((12402 . 12411) (12401 . 12403) (#("{" 0 1 (fontified nil)) . -12401) (12400 . 12402) (12388 . 12400) (#("SseK" 0 4 (fontified t face font-lock-type-face)) . -12388) (undo-tree-id656 . -4) (undo-tree-id657 . -4) 12392 (12388 . 12392) (12379 . 12388) 12354) nil (23733 8404 118601 320000) 0 nil]) ((12371 . 12377) (#(" " 0 1 (fontified nil)) . -12371) (12371 . 12372) (#(">" 0 1 (fontified nil syntax-table #1#)) . -12371) (12369 . 12372) (t 23733 8294 608136 118000)) nil (23733 8404 118605 489000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 12369) (undo-tree-id585 . 1) (12368 . 12369) (#(" " 0 1 (fontified nil)) . -12368) (12368 . 12369) (#(")" 0 1 (fontified nil face font-lock-type-face)) . -12368) (12360 . 12369) (#("S" 0 1 (fontified t face font-lock-type-face)) . -12360) (undo-tree-id586 . -1) (#("u" 0 1 (fontified t face font-lock-type-face)) . -12361) (undo-tree-id587 . -1) 12362 (12360 . 12362) (12354 . 12360) (12352 . 12354)) nil (23733 8294 563620 110000) 0 nil]) ((12346 . 12352) (12343 . 12346) (t 23732 64730 270971 125000)) nil (23733 8294 563637 821000) 0 nil]) ((12403 . 12410) (#(";" 0 1 (fontified t)) . -12403) (undo-tree-id582 . -1) (#(";" 0 1 (fontified t)) . -12404) (undo-tree-id583 . -1) 12405 (12403 . 12405) (12394 . 12403) 12373) nil (23732 64730 242668 966000) 0 nil]) ((#("k" 0 1 (fontified t)) . -12399) (undo-tree-id584 . -1) 12400 (12399 . 12400) (12394 . 12399)) nil (23732 64730 242679 674000) 0 nil]) ((12355 . 12362) (12346 . 12355) 12320) nil (23732 64730 242684 185000) 0 nil]) ((12346 . 12351) (t 23732 64703 437778 759000)) nil (23732 64730 242687 264000) 0 nil]) ((12296 . 12297) (12295 . 12297) (#("<" 0 1 (fontified nil face font-lock-keyword-face)) . -12295) (12295 . 12296)) nil (23732 64703 334093 806000) 0 nil] [nil nil ((12292 . 12293) (12291 . 12293) (#("<" 0 1 (fontified nil syntax-table #1#)) . -12291) (12291 . 12292)) ((#("<" 0 1 (fontified nil syntax-table #1#)) . 12291) (12291 . 12292) (#("<>" 0 1 (fontified nil syntax-table #1#) 1 2 (fontified nil syntax-table #1#)) . 12291) (undo-tree-id570 . 1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -2) (undo-tree-id575 . -1) (undo-tree-id576 . -2) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (#("S" 0 1 (fontified t face font-lock-type-face)) . 12292) (undo-tree-id580 . -1) (undo-tree-id581 . -1)) (23732 64594 654508 248000) 0 nil]) ((12309 . 12310) (12308 . 12310) (#("<" 0 1 (fontified nil face font-lock-type-face)) . -12308) (12308 . 12309)) nil (23732 64594 679149 913000) 0 nil]) ((12366 . 12368) (#("{" 0 1 (fontified nil)) . -12366) (12365 . 12367) (#(")" 0 1 (fontified nil)) . 12365) (12364 . 12365) (12363 . 12365) (#("(" 0 1 (fontified nil face font-lock-function-name-face)) . -12363) (12354 . 12364) (12351 . 12354) (#("n" 0 1 (fontified t)) . -12351) (undo-tree-id563 . -1) (#("f" 0 1 (fontified t)) . -12352) (undo-tree-id564 . -1) 12353 (12347 . 12353) (12343 . 12347) (#("    " 0 4 (fontified nil)) . 12342) (undo-tree-id565 . -4) (12341 . 12347) (#("}" 0 1 (fontified nil)) . 12341) (12340 . 12341) (12339 . 12341) (#("{" 0 1 (fontified nil)) . -12339) (12339 . 12340) (12338 . 12339) (#(")" 0 1 (fontified nil)) . 12338) (12337 . 12338) (12336 . 12338) (#("(" 0 1 (fontified nil face font-lock-function-name-face)) . -12336) (12322 . 12337) (12315 . 12322) (12310 . 12315) 12291) nil (23732 64594 654579 565000) 0 nil]) ((12310 . 12311) (12309 . 12311) (#("{" 0 1 (fontified nil)) . -12309) (12308 . 12310) (12296 . 12308) (#("SseKe" 0 5 (fontified t face font-lock-type-face)) . -12296) (undo-tree-id566 . -3) (undo-tree-id567 . -5) 12301 (12299 . 12301) (12291 . 12299) (#("
" 0 1 (fontified t)) . -12291) (undo-tree-id568 . -1) 12292 (12291 . 12292) (12290 . 12291) 12289) nil (23732 64594 654614 313000) 0 nil]) ((#(" " 0 1 (fontified t)) . 14048) (undo-tree-id569 . -1)) nil (23732 64594 654625 458000) 0 nil]) ((#("," 0 1 (fontified t)) . 14048)) nil (23732 64594 654629 820000) 0 nil]) ((#("keep_interval: impl Into<Option<Duration>>" 0 13 (fontified t face font-lock-variable-name-face) 13 15 (fontified t) 15 19 (fontified t face font-lock-keyword-face) 19 20 (fontified t) 20 24 (fontified t face font-lock-type-face) 24 25 (fontified t) 25 31 (fontified t face font-lock-type-face) 31 32 (fontified t) 32 40 (fontified t face font-lock-type-face) 40 42 (fontified t)) . 14050) (t 23732 64322 803102 61000)) nil (23732 64594 654634 862000) 0 nil]) ((1 . 19183) (#("//! Server-Sent Events (SSE)
//!
//! # Example
//!
//! ```
//! # extern crate futures;
//! # extern crate warp;
//!
//! use std::time::Duration;
//! use futures::stream::iter_ok;
//! use warp::{Filter, sse::ServerSentEvent};
//!
//! let app = warp::path(\"push-notifications\").and(warp::sse()).map(|sse: warp::sse::Sse| {
//!     let events = iter_ok::<_, ::std::io::Error>(vec![
//!         warp::sse::data(\"unnamed event\").into_a(),
//!         (
//!             warp::sse::event(\"chat\"),
//!             warp::sse::data(\"chat message\"),
//!         ).into_a().into_b(),
//!         (
//!             warp::sse::id(13),
//!             warp::sse::event(\"chat\"),
//!             warp::sse::data(\"other chat message\\nwith next line\"),
//!             warp::sse::retry(Duration::from_millis(5000)),
//!         ).into_b().into_b(),
//!     ]);
//!     sse.reply(warp::sse::keep(events, None))
//! });
//! ```
//!
//! Each field already is event which can be sent to client.
//! The events with multiple fields can be created by combining fields using tuples.
//!
//! See also [EventSource](https://developer.mozilla.org/en-US/docs/Web/API/EventSource) API.
//!
use std::error::Error as StdError;
use std::fmt::{self, Display, Formatter, Write};
use std::str::FromStr;
use std::time::Duration;

use futures::{Async, Future, Poll, Stream};
use http::header::{HeaderValue, CACHE_CONTROL, CONTENT_TYPE};
use hyper::Body;
use serde::Serialize;
use serde_json;
use tokio::{clock::now, timer::Delay};

use self::sealed::{
    BoxedServerSentEvent, EitherServerSentEvent, SseError, SseField, SseFormat, SseWrapper,
};
use super::{header, header::MissingHeader};
use filter::One;
use reply::{ReplySealed, Response};
use {Filter, Rejection, Reply};

/// Server-sent event message
pub trait ServerSentEvent: SseFormat + Sized + Send + 'static {
    /// Convert to either A
    fn into_a<B>(self) -> EitherServerSentEvent<Self, B> {
        EitherServerSentEvent::A(self)
    }

    /// Convert to either B
    fn into_b<A>(self) -> EitherServerSentEvent<A, Self> {
        EitherServerSentEvent::B(self)
    }

    /// Convert to boxed
    fn boxed(self) -> BoxedServerSentEvent {
        BoxedServerSentEvent(Box::new(self))
    }
}

impl<T: SseFormat + Send + 'static> ServerSentEvent for T {}

#[allow(missing_debug_implementations)]
pub struct SseComment<T>(T);

/// Comment field (\":<comment-text>\")
pub fn comment<T>(comment: T) -> impl ServerSentEvent
where
    T: Display + Send + 'static,
{
    SseComment(comment)
}

impl<T: Display> SseFormat for SseComment<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Comment = k {
            k.fmt(f)?;
            self.0.fmt(f)?;
            f.write_char('\\n')?;
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseEvent<T>(T);

/// Event name field (\"event:<event-name>\")
pub fn event<T>(event: T) -> impl ServerSentEvent
where
    T: Display + Send + 'static,
{
    SseEvent(event)
}

impl<T: Display> SseFormat for SseEvent<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Event = k {
            k.fmt(f)?;
            self.0.fmt(f)?;
            f.write_char('\\n')?;
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseId<T>(T);

/// Identifier field (\"id:<identifier>\")
pub fn id<T>(id: T) -> impl ServerSentEvent
where
    T: Display + Send + 'static,
{
    SseId(id)
}

impl<T: Display> SseFormat for SseId<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Id = k {
            k.fmt(f)?;
            self.0.fmt(f)?;
            f.write_char('\\n')?;
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseRetry(Duration);

/// Retry timeout field (\"retry:<timeout>\")
pub fn retry(time: Duration) -> impl ServerSentEvent {
    SseRetry(time)
}

impl SseFormat for SseRetry {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Retry = k {
            k.fmt(f)?;

            let secs = self.0.as_secs();
            let millis = self.0.subsec_nanos() / 1_000_000;

            if secs > 0 {
                // format seconds
                secs.fmt(f)?;

                // pad milliseconds
                if millis < 10 {
                    f.write_str(\"00\")?;
                } else if millis < 100 {
                    f.write_char('0')?;
                }
            }

            // format milliseconds
            millis.fmt(f)?;

            f.write_char('\\n')?;
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseData<T>(T);

/// Data field(s) (\"data:<content>\")
///
/// The multiline content will be transferred
/// using sequential data fields, one per line.
pub fn data<T>(data: T) -> impl ServerSentEvent
where
    T: Display + Send + 'static,
{
    SseData(data)
}

impl<T: Display> SseFormat for SseData<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Data = k {
            for line in self.0.to_string().split('\\n') {
                k.fmt(f)?;
                line.fmt(f)?;
                f.write_char('\\n')?;
            }
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseJson<T>(T);

/// Data field with JSON content (\"data:<json-content>\")
pub fn json<T>(data: T) -> impl ServerSentEvent
where
    T: Serialize + Send + 'static,
{
    SseJson(data)
}

impl<T: Serialize> SseFormat for SseJson<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Data = k {
            k.fmt(f)?;
            serde_json::to_string(&self.0)
                .map_err(|error| {
                    error!(\"sse::json error {}\", error);
                    fmt::Error
                })
                .and_then(|data| data.fmt(f))?;
            f.write_char('\\n')?;
        }
        Ok(())
    }
}

macro_rules! tuple_fmt {
    (($($t:ident),+) => ($($i:tt),+)) => {
        impl<$($t),+> SseFormat for ($($t),+)
        where
            $($t: SseFormat,)+
        {
            fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
                $(self.$i.fmt_field(f, k)?;)+
                Ok(())
            }
        }
    };
}

tuple_fmt!((A, B) => (0, 1));
tuple_fmt!((A, B, C) => (0, 1, 2));
tuple_fmt!((A, B, C, D) => (0, 1, 2, 3));
tuple_fmt!((A, B, C, D, E) => (0, 1, 2, 3, 4));
tuple_fmt!((A, B, C, D, E, F) => (0, 1, 2, 3, 4, 5));
tuple_fmt!((A, B, C, D, E, F, G) => (0, 1, 2, 3, 4, 5, 6));
tuple_fmt!((A, B, C, D, E, F, G, H) => (0, 1, 2, 3, 4, 5, 6, 7));

/// Gets the optional last event id from request.
/// Typically this identifier represented as number or string.
///
/// ```
/// let app = warp::sse::last_event_id::<u32>();
///
/// // The identifier is present
/// assert_eq!(
///     warp::test::request()
///        .header(\"Last-Event-ID\", \"12\")
///        .filter(&app)
///        .unwrap(),
///     Some(12)
/// );
///
/// // The identifier is missing
/// assert_eq!(
///     warp::test::request()
///        .filter(&app)
///        .unwrap(),
///     None
/// );
///
/// // The identifier is not a valid
/// assert!(
///     warp::test::request()
///        .header(\"Last-Event-ID\", \"abc\")
///        .filter(&app)
///        .is_err(),
/// );
/// ```
pub fn last_event_id<T>() -> impl Filter<Extract = One<Option<T>>, Error = Rejection>
where
    T: FromStr + Send,
{
    header::header(\"last-event-id\")
        .map(Some)
        .or_else(|rejection: Rejection| {
            if rejection.find_cause::<MissingHeader>().is_some() {
                return Ok((None,));
            }
            Err(rejection)
        })
}

/// Creates a Server-sent Events filter.
///
/// The yielded `Sse` is used to reply with stream of events.
///
/// # Note
///
/// This filter combines multiple filters internally, so you don't need them:
///
/// - Method must be `GET`
/// - Header `connection` must be `keep-alive` when it present.
///
/// If the filters are met, yields a `Sse`. Calling `Sse::reply` will return
/// a reply with:
///
/// - Status of `200 OK`
/// - Header `content-type: text/event-stream`
/// - Header `cache-control: no-cache`.
pub fn sse() -> impl Filter<Extract = One<Sse>, Error = Rejection> + Copy {
    ::get2()
        .and(
            header::exact_ignore_case(\"connection\", \"keep-alive\").or_else(
                |rejection: Rejection| {
                    if rejection.find_cause::<MissingHeader>().is_some() {
                        return Ok(());
                    }
                    Err(rejection)
                },
            ),
        )
        .map(|| Sse)
}

/// Extracted by the [`sse`](sse) filter, and used to reply with stream of events.
pub struct Sse;

impl Sse {
    /// Server-sent events reply
    ///
    /// This function converts stream of server events into reply.
    ///
    /// ```
    /// # extern crate futures;
    /// # extern crate warp;
    /// # extern crate serde;
    /// # #[macro_use] extern crate serde_derive;
    ///
    /// use std::time::Duration;
    /// use futures::stream::iter_ok;
    /// use warp::{Filter, sse::ServerSentEvent};
    ///
    /// #[derive(Serialize)]
    /// struct Msg {
    ///     from: u32,
    ///     text: String,
    /// }
    ///
    /// let app = warp::path(\"sse\").and(warp::sse()).map(|sse: warp::sse::Sse| {
    ///     let events = iter_ok::<_, ::std::io::Error>(vec![
    ///         // Unnamed event with data only
    ///         warp::sse::data(\"payload\").boxed(),
    ///         // Named event with ID and retry timeout
    ///         (
    ///             warp::sse::data(\"other message\\nwith next line\"),
    ///             warp::sse::event(\"chat\"),
    ///             warp::sse::id(1),
    ///             warp::sse::retry(Duration::from_millis(15000))
    ///         ).boxed(),
    ///         // Event with JSON data
    ///         (
    ///             warp::sse::id(2),
    ///             warp::sse::json(Msg {
    ///                 from: 2,
    ///                 text: \"hello\".into(),
    ///             }),
    ///         ).boxed(),
    ///     ]);
    ///     sse.reply(events)
    /// });
    ///
    /// let res = warp::test::request()
    ///     .method(\"GET\")
    ///     .header(\"Connection\", \"Keep-Alive\")
    ///     .path(\"/sse\")
    ///     .reply(&app)
    ///     .into_body();
    ///
    /// assert_eq!(
    ///     res,
    ///     r#\"data:payload
    ///
    /// event:chat
    /// data:other message
    /// data:with next line
    /// id:1
    /// retry:15000
    ///
    /// data:{\"from\":2,\"text\":\"hello\"}
    /// id:2
    ///
    /// \"#
    /// );
    /// ```
    pub fn reply<S>(self, event_stream: S) -> impl Reply
    where
        S: Stream + Send + 'static,
        S::Item: ServerSentEvent,
        S::Error: StdError + Send + Sync + 'static,
    {
        SseReply { event_stream }
    }
}

impl fmt::Debug for Sse {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.debug_struct(\"Sse\").finish()
    }
}

#[allow(missing_debug_implementations)]
struct SseReply<S> {
    event_stream: S,
}

impl<S> ReplySealed for SseReply<S>
where
    S: Stream + Send + 'static,
    S::Item: ServerSentEvent,
    S::Error: StdError + Send + Sync + 'static,
{
    #[inline]
    fn into_response(self) -> Response {
        let body_stream = self
            .event_stream
            .map_err(|error| {
                // FIXME: error logging
                error!(\"sse stream error: {}\", error);
                SseError
            })
            .and_then(|event| SseWrapper::format(&event));

        let mut res = Response::new(Body::wrap_stream(body_stream));
        // Set appropriate content type
        res.headers_mut()
            .insert(CONTENT_TYPE, HeaderValue::from_static(\"text/event-stream\"));
        // Disable response body caching
        res.headers_mut()
            .insert(CACHE_CONTROL, HeaderValue::from_static(\"no-cache\"));
        res
    }
}

#[allow(missing_debug_implementations)]
pub struct SseKeepAlive<S> {
    event_stream: S,
    comment_text: String,
    max_interval: Duration,
    alive_timer: Delay,
}

/// This is a deprecated version of `keep_alive`, which is maintained for
/// backwards compatibility.  Refer to the documentation accompanying `keep_alive`
/// for details about the purpose/usage of these two functions.
///
/// Unlike `keep_alive`, `keep` requires you to provide an `Option<Durration>` as a
/// second parameter and interprets `None` as a signal to use a default durration
/// of 15 seconds.  `keep` also always sends the heartbeat signal `:` whereas
/// `keep_alive` alows you to customize that signal.
pub fn keep<S>(
    event_stream: S,
    keep_interval: impl Into<Option<Duration>>,
) -> impl Stream<
    Item = impl ServerSentEvent + Send + 'static,
    Error = impl StdError + Send + Sync + 'static,
> + Send
         + 'static
where
    S: Stream + Send + 'static,
    S::Item: ServerSentEvent + Send,
    S::Error: StdError + Send + Sync + 'static,
{
    let max_interval = keep_interval
        .into()
        .unwrap_or_else(|| Duration::from_secs(15));
    let alive_timer = Delay::new(now() + max_interval);
    SseKeepAlive {
        event_stream,
        comment_text: \"\".to_string(),
        max_interval,
        alive_timer,
    }
}

/// Keeps event source connection when no events sent over a some time.
///
/// Some proxy servers may drop HTTP connection after a some timeout of inactivity.
/// This function helps to prevent such behavior by sending comment events every
/// `keep_interval` of inactivity.
///
/// By default the comment is `:` (an empty comment) and the  time interval between
/// events is 15 seconds.  Both of thes may be customized using the builder pattern
/// as shown below.
///
/// See [notes](https://www.w3.org/TR/2009/WD-eventsource-20090421/#notes).
pub fn keep_alive<S>(event_stream: S, keep_interval: impl Into<Option<Duration>>) -> SseKeepAlive<S>
where
    S: Stream + Send + 'static,
    S::Item: ServerSentEvent + Send,
    S::Error: StdError + Send + Sync + 'static,
{
    let max_interval = Duration::from_secs(15);
    let alive_timer = Delay::new(now() + max_interval);
    SseKeepAlive {
        event_stream,
        comment_text: \"\".to_string(),
        max_interval,
        alive_timer,
    }
}

impl<S> Stream for SseKeepAlive<S>
where
    S: Stream + Send + 'static,
    S::Item: ServerSentEvent,
    S::Error: StdError + Send + Sync + 'static,
{
    type Item = EitherServerSentEvent<S::Item, SseComment<&'static str>>;
    type Error = SseError;

    fn poll(&mut self) -> Poll<Option<Self::Item>, Self::Error> {
        match self.event_stream.poll() {
            Ok(Async::NotReady) => match self.alive_timer.poll() {
                Ok(Async::NotReady) => Ok(Async::NotReady),
                Ok(Async::Ready(_)) => {
                    // restart timer
                    self.alive_timer.reset(now() + self.max_interval);
                    let comment_str = &self.comment_text.clone();
                    Ok(Async::Ready(Some(EitherServerSentEvent::B(SseComment(
                        comment_str
                    )))))
                }
                Err(error) => {
                    error!(\"sse::keep error: {}\", error);
                    Err(SseError)
                }
            },
            Ok(Async::Ready(Some(event))) => {
                // restart timer
                self.alive_timer.reset(now() + self.max_interval);
                Ok(Async::Ready(Some(EitherServerSentEvent::A(event))))
            }
            Ok(Async::Ready(None)) => Ok(Async::Ready(None)),
            Err(error) => {
                error!(\"sse::keep error: {}\", error);
                Err(SseError)
            }
        }
    }
}

mod sealed {
    use super::*;

    /// SSE error type
    #[derive(Debug)]
    pub struct SseError;

    impl Display for SseError {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            write!(f, \"sse error\")
        }
    }

    impl StdError for SseError {
        fn description(&self) -> &str {
            \"sse error\"
        }
    }

    impl Display for SseField {
        fn fmt(&self, f: &mut Formatter) -> fmt::Result {
            use self::SseField::*;
            f.write_str(match self {
                Event => \"event:\",
                Id => \"id:\",
                Data => \"data:\",
                Retry => \"retry:\",
                Comment => \":\",
            })
        }
    }

    /// SSE field kind
    #[allow(missing_debug_implementations)]
    pub enum SseField {
        /// Event name field
        Event,
        /// Event id field
        Id,
        /// Event data field
        Data,
        /// Retry timeout field
        Retry,
        /// Comment field
        Comment,
    }

    /// SSE formatter trait
    pub trait SseFormat {
        /// format message field
        fn fmt_field(&self, _f: &mut Formatter, _key: &SseField) -> fmt::Result {
            Ok(())
        }
    }

    /// SSE wrapper to help formatting messages
    #[allow(missing_debug_implementations)]
    pub struct SseWrapper<'a, T: 'a>(&'a T);

    impl<'a, T> SseWrapper<'a, T>
    where
        T: SseFormat + 'a,
    {
        pub fn format(event: &'a T) -> Result<String, SseError> {
            let mut buf = String::new();
            buf.write_fmt(format_args!(\"{}\", SseWrapper(event)))
                .map_err(|_| SseError)?;
            buf.shrink_to_fit();
            Ok(buf)
        }
    }

    impl<'a, T> Display for SseWrapper<'a, T>
    where
        T: SseFormat,
    {
        fn fmt(&self, f: &mut Formatter) -> fmt::Result {
            self.0.fmt_field(f, &SseField::Comment)?;
            // The event name usually transferred before the other fields.
            self.0.fmt_field(f, &SseField::Event)?;
            // It is important that the data will be transferred before
            // the identifier to prevent possible losing events when
            // resuming connection.
            self.0.fmt_field(f, &SseField::Data)?;
            self.0.fmt_field(f, &SseField::Id)?;
            self.0.fmt_field(f, &SseField::Retry)?;
            f.write_char('\\n')
        }
    }

    #[allow(missing_debug_implementations)]
    pub struct BoxedServerSentEvent(pub(super) Box<SseFormat + Send>);

    impl SseFormat for BoxedServerSentEvent {
        fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
            self.0.fmt_field(f, k)
        }
    }

    #[allow(missing_debug_implementations)]
    pub enum EitherServerSentEvent<A, B> {
        A(A),
        B(B),
    }

    impl<A, B> SseFormat for EitherServerSentEvent<A, B>
    where
        A: SseFormat,
        B: SseFormat,
    {
        fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
            match self {
                EitherServerSentEvent::A(a) => a.fmt_field(f, k),
                EitherServerSentEvent::B(b) => b.fmt_field(f, k),
            }
        }
    }
}
" 0 29 (fontified t face font-lock-doc-face) 29 33 (fontified t face font-lock-doc-face) 33 47 (fontified t face font-lock-doc-face) 47 51 (fontified t face font-lock-doc-face) 51 59 (fontified t face font-lock-doc-face) 59 87 (fontified t face font-lock-doc-face) 87 112 (fontified t face font-lock-doc-face) 112 116 (fontified t face font-lock-doc-face) 116 145 (fontified t face font-lock-doc-face) 145 179 (fontified t face font-lock-doc-face) 179 225 (fontified t face font-lock-doc-face) 225 229 (fontified t face font-lock-doc-face) 229 321 (fontified t face font-lock-doc-face) 321 351 (fontified t face font-lock-doc-face) 351 352 (fontified t syntax-table #1# face font-lock-doc-face) 352 371 (fontified t face font-lock-doc-face) 371 372 (fontified t syntax-table #1# face font-lock-doc-face) 372 379 (fontified t face font-lock-doc-face) 379 434 (fontified t face font-lock-doc-face) 434 448 (fontified t face font-lock-doc-face) 448 490 (fontified t face font-lock-doc-face) 490 500 (fontified t face font-lock-doc-face) 500 539 (fontified t face font-lock-doc-face) 539 572 (fontified t face font-lock-doc-face) 572 586 (fontified t face font-lock-doc-face) 586 621 (fontified t face font-lock-doc-face) 621 663 (fontified t face font-lock-doc-face) 663 734 (fontified t face font-lock-doc-face) 734 797 (fontified t face font-lock-doc-face) 797 830 (fontified t face font-lock-doc-face) 830 842 (fontified t face font-lock-doc-face) 842 891 (fontified t face font-lock-doc-face) 891 899 (fontified t face font-lock-doc-face) 899 907 (fontified t face font-lock-doc-face) 907 911 (fontified t face font-lock-doc-face) 911 972 (fontified t face font-lock-doc-face) 972 1039 (fontified t face font-lock-doc-face) 1039 1057 (fontified t face font-lock-doc-face) 1057 1061 (fontified t face font-lock-doc-face) 1061 1155 (fontified t face font-lock-doc-face) 1155 1159 (fontified t face font-lock-doc-face) 1159 1162 (fontified t face font-lock-keyword-face) 1162 1163 (fontified t) 1163 1166 (fontified t face font-lock-constant-face) 1166 1168 (fontified t) 1168 1173 (fontified t face font-lock-constant-face) 1173 1175 (fontified t) 1175 1180 (fontified t face font-lock-type-face) 1180 1181 (fontified t) 1181 1183 (fontified t face font-lock-keyword-face) 1183 1184 (fontified t) 1184 1192 (fontified t face font-lock-type-face) 1192 1194 (fontified t) 1194 1197 (fontified t face font-lock-keyword-face) 1197 1198 (fontified t) 1198 1201 (fontified t face font-lock-constant-face) 1201 1203 (fontified t) 1203 1206 (fontified t face font-lock-constant-face) 1206 1209 (fontified t) 1209 1213 (fontified t face font-lock-keyword-face) 1213 1215 (fontified t) 1215 1222 (fontified t face font-lock-type-face) 1222 1224 (fontified t) 1224 1233 (fontified t face font-lock-type-face) 1233 1235 (fontified t) 1235 1240 (fontified t face font-lock-type-face) 1240 1243 (fontified t) 1243 1246 (fontified t face font-lock-keyword-face) 1246 1247 (fontified t) 1247 1250 (fontified t face font-lock-constant-face) 1250 1252 (fontified t) 1252 1255 (fontified t face font-lock-type-face) 1255 1257 (fontified t) 1257 1264 (fontified t face font-lock-type-face) 1264 1266 (fontified t) 1266 1269 (fontified t face font-lock-keyword-face) 1269 1270 (fontified t) 1270 1273 (fontified t face font-lock-constant-face) 1273 1275 (fontified t) 1275 1279 (fontified t face font-lock-constant-face) 1279 1281 (fontified t) 1281 1289 (fontified t face font-lock-type-face) 1289 1292 (fontified t) 1292 1295 (fontified t face font-lock-keyword-face) 1295 1296 (fontified t) 1296 1303 (fontified t face font-lock-constant-face) 1303 1306 (fontified t) 1306 1311 (fontified t face font-lock-type-face) 1311 1313 (fontified t) 1313 1319 (fontified t face font-lock-type-face) 1319 1321 (fontified t) 1321 1325 (fontified t face font-lock-type-face) 1325 1327 (fontified t) 1327 1333 (fontified t face font-lock-type-face) 1333 1336 (fontified t) 1336 1339 (fontified t face font-lock-keyword-face) 1339 1340 (fontified t) 1340 1344 (fontified t face font-lock-constant-face) 1344 1346 (fontified t) 1346 1352 (fontified t face font-lock-constant-face) 1352 1355 (fontified t) 1355 1366 (fontified t face font-lock-type-face) 1366 1368 (fontified t) 1368 1381 (fontified t face font-lock-type-face) 1381 1383 (fontified t) 1383 1395 (fontified t face font-lock-type-face) 1395 1398 (fontified t) 1398 1401 (fontified t face font-lock-keyword-face) 1401 1402 (fontified t) 1402 1407 (fontified t face font-lock-constant-face) 1407 1409 (fontified t) 1409 1413 (fontified t face font-lock-type-face) 1413 1415 (fontified t) 1415 1418 (fontified t face font-lock-keyword-face) 1418 1419 (fontified t) 1419 1424 (fontified t face font-lock-constant-face) 1424 1426 (fontified t) 1426 1435 (fontified t face font-lock-type-face) 1435 1437 (fontified t) 1437 1440 (fontified t face font-lock-keyword-face) 1440 1441 (fontified t) 1441 1451 (fontified t face font-lock-constant-face) 1451 1453 (fontified t) 1453 1456 (fontified t face font-lock-keyword-face) 1456 1457 (fontified t) 1457 1462 (fontified t face font-lock-constant-face) 1462 1465 (fontified t) 1465 1470 (fontified t face font-lock-constant-face) 1470 1477 (fontified t) 1477 1482 (fontified t face font-lock-constant-face) 1482 1484 (fontified t) 1484 1489 (fontified t face font-lock-type-face) 1489 1493 (fontified t) 1493 1496 (fontified t face font-lock-keyword-face) 1496 1497 (fontified t) 1497 1501 (fontified t face font-lock-keyword-face) 1501 1503 (fontified t) 1503 1509 (fontified t face font-lock-constant-face) 1509 1517 (fontified t) 1517 1537 (fontified t face font-lock-type-face) 1537 1539 (fontified t) 1539 1557 (fontified t face font-lock-type-face) 1557 1560 (fontified t face font-lock-type-face) 1560 1562 (fontified t) 1562 1570 (fontified t face font-lock-type-face) 1570 1572 (fontified t) 1572 1580 (fontified t face font-lock-type-face) 1580 1582 (fontified t) 1582 1591 (fontified t face font-lock-type-face) 1591 1593 (fontified t) 1593 1603 (fontified t face font-lock-type-face) 1603 1605 (fontified t) 1884 1885 (syntax-table #1#) 2017 2018 (syntax-table #1#) 2143 2144 (syntax-table #1#) 2375 2376 (syntax-table #1#) 2388 2389 (syntax-table #1#) 2423 2424 (syntax-table #1#) 2619 2620 (syntax-table #1#) 2750 2751 (syntax-table #2#) 2753 2754 (syntax-table #2#) 2885 2886 (syntax-table #1#) 2896 2897 (syntax-table #1#) 2927 2928 (syntax-table #1#) 3117 3118 (syntax-table #1#) 3246 3247 (syntax-table #2#) 3249 3250 (syntax-table #2#) 3375 3376 (syntax-table #1#) 3386 3387 (syntax-table #1#) 3411 3412 (syntax-table #1#) 3592 3593 (syntax-table #1#) 3718 3719 (syntax-table #2#) 3721 3722 (syntax-table #2#) 3860 3861 (syntax-table #1#) 3868 3869 (syntax-table #1#) 3902 3903 (syntax-table #1#) 4037 4038 (syntax-table #1#) 4236 4237 (syntax-table #1#) 4369 4370 (syntax-table #1#) 4449 4450 (syntax-table #1#) 4490 4491 (syntax-table #2#) 4492 4493 (syntax-table #2#) 4619 4620 (syntax-table #2#) 4622 4623 (syntax-table #2#) 4749 4750 (syntax-table #1#) 4757 4758 (syntax-table #1#) 4884 4885 (syntax-table #1#) 5071 5072 (syntax-table #1#) 5172 5173 (syntax-table #2#) 5175 5176 (syntax-table #2#) 5266 5267 (syntax-table #2#) 5269 5270 (syntax-table #2#) 5425 5426 (syntax-table #1#) 5438 5439 (syntax-table #1#) 5467 5468 (syntax-table #1#) 5658 5659 (syntax-table #1#) 5991 5992 (syntax-table #2#) 5994 5995 (syntax-table #2#) 6080 6081 (syntax-table #1#) 6097 6098 (syntax-table #1#) 6113 6114 (syntax-table #1#) 6121 6122 (syntax-table #1#) 6268 6269 (syntax-table #1#) 6406 6407 (syntax-table #1#) 6439 6440 (syntax-table #1#) 6478 6479 (syntax-table #1#) 6523 6524 (syntax-table #1#) 6574 6575 (syntax-table #1#) 6631 6632 (syntax-table #1#) 6694 6695 (syntax-table #1#) 6889 6890 (syntax-table #1#) 6893 6894 (syntax-table #1#) 7460 7461 (syntax-table #1#) 8333 8334 (syntax-table #1#) 9526 9527 (syntax-table #1#) 9546 9547 (syntax-table #1#) 10560 10561 (syntax-table #3#) 10837 10838 (syntax-table #1#) 11100 11101 (syntax-table #1#) 11445 11446 (syntax-table #1#) 12582 12583 (syntax-table #1#) 12592 12593 (syntax-table #1#) 12901 12902 (syntax-table #1#) 14094 14095 (syntax-table #1#) 14122 14123 (face font-lock-variable-name-face) 14125 14131 (face font-lock-type-face) 14134 14138 (face font-lock-type-face) 14142 14148 (face font-lock-keyword-face) 14154 14155 (face font-lock-type-face) 14157 14161 (face font-lock-variable-name-face) 14163 14178 (face font-lock-type-face) 14181 14185 (face font-lock-type-face) 14191 14192 (face font-lock-type-face) 14194 14199 (face font-lock-variable-name-face) 14201 14209 (face font-lock-type-face) 14212 14216 (face font-lock-type-face) 14219 14223 (face font-lock-type-face) 14227 14233 (face font-lock-keyword-face) 14241 14244 (face font-lock-keyword-face) 14245 14257 (face font-lock-variable-name-face) 14260 14268 (face font-lock-type-face) 14289 14292 (face font-lock-keyword-face) 14293 14304 (face font-lock-variable-name-face) 14307 14312 (face font-lock-type-face) 14345 14357 (face font-lock-type-face) 14390 14402 (face font-lock-variable-name-face) 14404 14406 (face font-lock-string-face) 14420 14442 (fontified t) 14442 14472 (fontified t) 14472 14476 (fontified t face font-lock-keyword-face) 14476 14477 (fontified t) 14477 14478 (fontified t face font-lock-type-face) 14478 14480 (fontified t) 14480 14486 (fontified t face font-lock-type-face) 14486 14487 (fontified t) 14487 14490 (fontified t face font-lock-keyword-face) 14490 14491 (fontified t) 14491 14503 (fontified t face font-lock-type-face) 14503 14504 (fontified t) 14504 14505 (fontified t face font-lock-type-face) 14505 14507 (fontified t) 14507 14512 (fontified t face font-lock-keyword-face) 14512 14517 (fontified t) 14517 14518 (fontified t face font-lock-variable-name-face) 14518 14520 (fontified t) 14520 14526 (fontified t face font-lock-type-face) 14526 14529 (fontified t) 14529 14533 (fontified t face font-lock-type-face) 14533 14537 (fontified t) 14537 14543 (fontified t face font-lock-keyword-face) 14543 14549 (fontified t) 14549 14550 (fontified t face font-lock-type-face) 14550 14552 (fontified t) 14552 14556 (fontified t face font-lock-variable-name-face) 14556 14558 (fontified t) 14558 14573 (fontified t face font-lock-type-face) 14573 14579 (fontified t) 14579 14580 (fontified t face font-lock-type-face) 14580 14582 (fontified t) 14582 14587 (fontified t face font-lock-variable-name-face) 14587 14589 (fontified t) 14589 14597 (fontified t face font-lock-type-face) 14597 14600 (fontified t) 14600 14604 (fontified t face font-lock-type-face) 14604 14607 (fontified t) 14607 14611 (fontified t face font-lock-type-face) 14611 14615 (fontified t) 14615 14621 (fontified t face font-lock-keyword-face) 14621 14629 (fontified t) 14629 14633 (fontified t face font-lock-keyword-face) 14633 14634 (fontified t) 14634 14638 (fontified t face font-lock-type-face) 14638 14641 (fontified t) 14641 14649 (fontified t face font-lock-type-face) 14649 14662 (fontified t face font-lock-type-face) 14662 14663 (fontified t) 14663 14664 (fontified t face font-lock-type-face) 14664 14666 (fontified t) 14666 14670 (fontified t face font-lock-type-face) 14670 14672 (fontified t) 14672 14682 (fontified t face font-lock-type-face) 14682 14685 (fontified t) 14685 14691 (fontified t face font-lock-keyword-face) 14691 14692 (fontified t) 14692 14695 (fontified t face font-lock-type-face) 14695 14699 (fontified t) 14699 14703 (fontified t) 14703 14707 (fontified t face font-lock-keyword-face) 14707 14708 (fontified t) 14708 14713 (fontified t face font-lock-type-face) 14713 14716 (fontified t) 14716 14724 (fontified t face font-lock-type-face) 14724 14731 (fontified t) 14731 14733 (fontified t face font-lock-keyword-face) 14733 14734 (fontified t) 14734 14738 (fontified t face font-lock-function-name-face) 14738 14740 (fontified t) 14740 14743 (fontified t face font-lock-keyword-face) 14743 14744 (fontified t) 14744 14748 (fontified t face font-lock-keyword-face) 14748 14751 (fontified t) 14751 14752 (syntax-table #1# fontified t) 14752 14753 (fontified t) 14753 14757 (fontified t face font-lock-type-face) 14757 14758 (fontified t) 14758 14764 (fontified t face font-lock-type-face) 14764 14765 (fontified t) 14765 14769 (fontified t face font-lock-type-face) 14769 14771 (fontified t) 14771 14775 (fontified t face font-lock-type-face) 14775 14778 (fontified t) 14778 14782 (fontified t face font-lock-type-face) 14782 14784 (fontified t) 14784 14789 (fontified t face font-lock-type-face) 14789 14801 (fontified t) 14801 14806 (fontified t face font-lock-keyword-face) 14806 14807 (fontified t) 14807 14811 (fontified t face font-lock-keyword-face) 14811 14846 (fontified t) 14846 14848 (fontified t face font-lock-type-face) 14848 14849 (fontified t) 14849 14854 (fontified t face font-lock-type-face) 14854 14856 (fontified t) 14856 14864 (fontified t face font-lock-type-face) 14864 14867 (fontified t) 14867 14868 (syntax-table #1# fontified t) 14868 14869 (fontified t) 14869 14874 (fontified t face font-lock-keyword-face) 14874 14875 (fontified t) 14875 14879 (fontified t face font-lock-keyword-face) 14879 14917 (fontified t) 14917 14919 (fontified t face font-lock-type-face) 14919 14920 (fontified t) 14920 14925 (fontified t face font-lock-type-face) 14925 14927 (fontified t) 14927 14935 (fontified t face font-lock-type-face) 14935 14938 (fontified t) 14938 14939 (syntax-table #1# fontified t) 14939 14940 (fontified t) 14940 14942 (fontified t face font-lock-type-face) 14942 14943 (fontified t) 14943 14948 (face font-lock-type-face fontified t) 14948 14950 (fontified t) 14950 14958 (face font-lock-type-face fontified t) 14958 14961 (fontified t) 14961 14977 (fontified t) 14977 14979 (fontified t face font-lock-type-face) 14979 14980 (fontified t) 14980 14985 (fontified t face font-lock-type-face) 14985 14987 (fontified t) 14987 14992 (fontified t face font-lock-type-face) 14992 14998 (fontified t) 14998 14999 (syntax-table #1# fontified t) 14999 15022 (fontified t) 15022 15025 (fontified t face font-lock-comment-delimiter-face) 15025 15039 (fontified t face font-lock-comment-face) 15039 15059 (fontified t) 15059 15063 (fontified t face font-lock-keyword-face) 15063 15090 (fontified t) 15090 15094 (fontified t face font-lock-keyword-face) 15094 15109 (fontified t) 15109 15110 (fontified t) 15110 15130 (fontified t) 15130 15133 (fontified t face font-lock-keyword-face) 15133 15134 (fontified t) 15134 15145 (fontified t face font-lock-variable-name-face) 15145 15149 (fontified t) 15149 15153 (fontified t face font-lock-keyword-face) 15153 15154 (fontified t) 15154 15172 (fontified t) 15172 15175 (fontified t) 15175 15176 (fontified t) 15176 15196 (fontified t) 15196 15198 (fontified t face font-lock-type-face) 15198 15199 (fontified t) 15199 15204 (fontified t face font-lock-type-face) 15204 15206 (fontified t) 15206 15211 (fontified t face font-lock-type-face) 15211 15212 (fontified t) 15212 15216 (fontified t face font-lock-type-face) 15216 15217 (fontified t) 15217 15238 (fontified t face font-lock-type-face) 15238 15240 (fontified t) 15240 15241 (fontified t face font-lock-type-face) 15241 15242 (fontified t) 15242 15252 (fontified t face font-lock-type-face) 15252 15253 (fontified t) 15253 15254 (fontified t) 15254 15289 (fontified t) 15289 15290 (fontified t) 15290 15350 (fontified t) 15350 15353 (fontified t face font-lock-type-face) 15353 15362 (fontified t) 15362 15363 (syntax-table #1# fontified t) 15363 15386 (fontified t) 15386 15392 (fontified t face font-lock-preprocessor-face) 15392 15393 (fontified t) 15393 15414 (fontified t face font-lock-string-face) 15414 15444 (fontified t) 15444 15447 (fontified t face font-lock-type-face) 15447 15448 (fontified t) 15448 15456 (fontified t face font-lock-type-face) 15456 15503 (fontified t) 15503 15505 (fontified t face font-lock-type-face) 15505 15506 (fontified t) 15506 15511 (fontified t face font-lock-type-face) 15511 15513 (fontified t) 15513 15518 (fontified t face font-lock-type-face) 15518 15519 (fontified t) 15519 15520 (fontified t face font-lock-type-face) 15520 15523 (fontified t face font-lock-type-face) 15523 15534 (fontified t) 15534 15535 (syntax-table #1# fontified t) 15535 15538 (fontified t) 15538 15554 (fontified t) 15554 15557 (fontified t face font-lock-comment-delimiter-face) 15557 15571 (fontified t face font-lock-comment-face) 15571 15587 (fontified t) 15587 15591 (fontified t face font-lock-keyword-face) 15591 15618 (fontified t) 15618 15622 (fontified t face font-lock-keyword-face) 15622 15654 (fontified t) 15654 15656 (fontified t face font-lock-type-face) 15656 15657 (fontified t) 15657 15660 (fontified t face font-lock-type-face) 15660 15662 (fontified t face font-lock-type-face) 15662 15664 (fontified t) 15664 15669 (fontified t face font-lock-type-face) 15669 15670 (fontified t) 15670 15674 (fontified t face font-lock-type-face) 15674 15675 (fontified t) 15675 15696 (fontified t face font-lock-type-face) 15696 15698 (fontified t) 15698 15699 (fontified t face font-lock-type-face) 15699 15710 (fontified t) 15710 15736 (fontified t) 15736 15738 (fontified t face font-lock-type-face) 15738 15739 (fontified t) 15739 15744 (fontified t face font-lock-type-face) 15744 15746 (fontified t) 15746 15751 (fontified t face font-lock-type-face) 15751 15752 (fontified t) 15752 15756 (fontified t face font-lock-type-face) 15756 15760 (fontified t) 15760 15761 (syntax-table #1# fontified t) 15761 15762 (fontified t) 15762 15764 (fontified t face font-lock-type-face) 15764 15765 (fontified t) 15765 15770 (fontified t face font-lock-type-face) 15770 15772 (fontified t) 15772 15777 (fontified t face font-lock-type-face) 15777 15778 (fontified t) 15778 15782 (fontified t face font-lock-type-face) 15782 15786 (fontified t) 15786 15790 (fontified t) 15790 15798 (fontified t) 15798 15801 (face font-lock-type-face fontified t) 15801 15810 (fontified t) 15810 15811 (syntax-table #1# fontified t) 15811 15814 (fontified t) 15814 15830 (fontified t) 15830 15836 (fontified t face font-lock-preprocessor-face) 15836 15837 (fontified t) 15837 15858 (fontified t face font-lock-string-face) 15858 15884 (fontified t) 15884 15887 (fontified t face font-lock-type-face) 15887 15888 (fontified t) 15888 15896 (fontified t face font-lock-type-face) 15896 15931 (fontified t) 15931 15934 (fontified t face font-lock-keyword-face) 15934 15935 (fontified t) 15935 15941 (fontified t face font-lock-constant-face) 15941 15948 (fontified t) 15948 15951 (fontified t face font-lock-keyword-face) 15951 15952 (fontified t) 15952 15957 (fontified t face font-lock-keyword-face) 15957 15967 (fontified t) 15967 15986 (fontified t face font-lock-doc-face) 15986 15990 (fontified t) 15990 16006 (fontified t face font-lock-preprocessor-face) 16006 16011 (fontified t) 16011 16014 (fontified t face font-lock-keyword-face) 16014 16015 (fontified t) 16015 16021 (fontified t face font-lock-keyword-face) 16021 16022 (fontified t) 16022 16030 (fontified t face font-lock-type-face) 16030 16037 (fontified t) 16037 16038 (fontified t face font-lock-keyword-face) 16038 16041 (fontified t face font-lock-keyword-face) 16041 16042 (fontified t) 16042 16049 (fontified t face font-lock-type-face) 16049 16050 (fontified t) 16050 16053 (fontified t face font-lock-keyword-face) 16053 16054 (fontified t) 16054 16062 (fontified t face font-lock-type-face) 16062 16065 (fontified t) 16065 16073 (fontified t) 16073 16075 (fontified t face font-lock-keyword-face) 16075 16076 (fontified t) 16076 16079 (fontified t face font-lock-function-name-face) 16079 16081 (fontified t) 16081 16085 (fontified t face font-lock-keyword-face) 16085 16087 (fontified t) 16087 16088 (fontified t face font-lock-variable-name-face) 16088 16091 (fontified t) 16091 16094 (fontified t face font-lock-keyword-face) 16094 16097 (fontified t) 16097 16100 (fontified t face font-lock-constant-face) 16100 16102 (fontified t) 16102 16105 (fontified t face font-lock-constant-face) 16105 16107 (fontified t) 16107 16116 (fontified t face font-lock-type-face) 16116 16119 (fontified t) 16119 16120 (fontified t syntax-table #1#) 16120 16123 (fontified t) 16123 16126 (fontified t face font-lock-constant-face) 16126 16128 (fontified t) 16128 16131 (fontified t face font-lock-constant-face) 16131 16133 (fontified t) 16133 16139 (fontified t face font-lock-type-face) 16139 16154 (fontified t) 16154 16160 (fontified t face rust-builtin-formatting-macro-face) 16160 16164 (fontified t) 16164 16173 (fontified t face font-lock-string-face) 16173 16174 (fontified t syntax-table #3# face font-lock-string-face) 16174 16175 (fontified t face font-lock-string-face) 16175 16198 (fontified t) 16198 16202 (fontified t face font-lock-keyword-face) 16202 16203 (fontified t) 16203 16210 (fontified t face font-lock-type-face) 16210 16211 (fontified t face font-lock-type-face) 16211 16212 (fontified t) 16212 16215 (fontified t face font-lock-keyword-face) 16215 16216 (fontified t) 16216 16224 (fontified t face font-lock-type-face) 16224 16227 (fontified t) 16227 16235 (fontified t) 16235 16237 (fontified t face font-lock-keyword-face) 16237 16238 (fontified t) 16238 16249 (fontified t face font-lock-function-name-face) 16249 16251 (fontified t) 16251 16255 (fontified t face font-lock-keyword-face) 16255 16258 (fontified t) 16258 16259 (fontified t syntax-table #1#) 16259 16261 (fontified t) 16261 16264 (fontified t face font-lock-type-face) 16264 16279 (fontified t) 16279 16286 (fontified t face font-lock-string-face) 16286 16288 (fontified t face font-lock-string-face) 16288 16289 (fontified t syntax-table #3# face font-lock-string-face) 16289 16290 (fontified t face font-lock-string-face) 16290 16291 (fontified t) 16291 16312 (fontified t) 16312 16314 (fontified t face font-lock-keyword-face) 16314 16316 (face font-lock-keyword-face fontified t) 16316 16317 (fontified t) 16317 16324 (face font-lock-type-face fontified t) 16324 16325 (fontified t) 16325 16328 (face font-lock-keyword-face fontified t) 16328 16329 (fontified t) 16329 16337 (face font-lock-type-face fontified t) 16337 16340 (fontified t) 16382 16383 (syntax-table #1#) 16493 16494 (syntax-table #1#) 16525 16526 (syntax-table #1#) 16556 16557 (syntax-table #1#) 16590 16591 (syntax-table #1#) 16627 16628 (syntax-table #1#) 17133 17134 (syntax-table #1#)) . 1) (undo-tree-id526 . -15278) (undo-tree-id527 . 3892) (undo-tree-id528 . -15278) (undo-tree-id529 . -15278) (undo-tree-id530 . -15200) (undo-tree-id531 . -14442) (undo-tree-id532 . -15278) (undo-tree-id533 . -15278) (undo-tree-id534 . -15332) (undo-tree-id535 . -15333) (undo-tree-id536 . -15278) (undo-tree-id537 . -15279) (undo-tree-id538 . -15134) (undo-tree-id539 . -15145) (undo-tree-id540 . -14049) (undo-tree-id541 . -14062) (undo-tree-id542 . -15134) (undo-tree-id543 . -15145) (undo-tree-id544 . -14049) (undo-tree-id545 . -14062) (undo-tree-id546 . -15289) (undo-tree-id547 . -15288) (undo-tree-id548 . -14442) (undo-tree-id549 . -15289) (undo-tree-id550 . -15289) (undo-tree-id551 . -14442) (undo-tree-id552 . -15289) (undo-tree-id553 . -14442) (undo-tree-id554 . -15289) (undo-tree-id555 . -15288) (undo-tree-id556 . -15288) (undo-tree-id557 . -15288) (undo-tree-id558 . -14442) 15289) nil (23732 64322 697589 668000) 0 nil]) ((15279 . 15290) (#("&self.comment_text.clone()," 0 1 (fontified t) 1 5 (fontified t face font-lock-keyword-face) 5 24 (fontified t) 24 26 (fontified t) 26 27 (fontified t)) . 15279) (undo-tree-id559 . -26) (undo-tree-id560 . -24)) nil (23732 64322 697599 457000) 0 nil]) ((15175 . 15176) (#(")" 0 1 (fontified nil)) . 15175) (15174 . 15175) (15173 . 15175) (#("(" 0 1 (fontified nil)) . -15173) (15167 . 15174) (#("()" 0 2 (fontified t)) . 15167) (undo-tree-id561 . -1) 15168 (#(")" 0 1 (fontified nil)) . 15169) (15168 . 15169) (15167 . 15169) (#("(" 0 1 (fontified nil)) . -15167) (15167 . 15168) (15155 . 15167) (#("co" 0 2 (fontified t)) . -15155) (undo-tree-id562 . -2) 15157 (15152 . 15157) (15135 . 15152) (15131 . 15135) (15110 . 15131) 15064) nil (23732 64322 697612 103000) 0 nil] [nil nil ((15188 . 15193) (t 23732 64213 203670 344000)) ((#("move " 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t)) . 15188) (undo-tree-id523 . -4) (undo-tree-id524 . -3) (undo-tree-id525 . -4) (t 23732 64255 543451 146000)) (23732 64255 525890 433000) 0 nil]) ((15213 . 15214)) nil (23732 64268 532200 366000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 15238) (undo-tree-id520 . -1) (15237 . 15238) (15236 . 15238) (#("(" 0 1 (fontified nil)) . -15236) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (15230 . 15237)) nil (23732 64213 103294 103000) 0 nil] [nil nil ((15237 . 15239) (#("(" 0 1 (fontified nil)) . -15237) (15230 . 15238)) ((#(".as_str(" 0 1 (fontified nil) 1 7 (fontified nil) 7 8 (fontified nil)) . 15230) (undo-tree-id445 . -7) (undo-tree-id446 . -7) (undo-tree-id447 . -7) (undo-tree-id448 . -7) (undo-tree-id449 . -7) (undo-tree-id450 . -7) (undo-tree-id451 . -7) (undo-tree-id452 . -7) (undo-tree-id453 . -7) (undo-tree-id454 . -7) (undo-tree-id455 . -7) (undo-tree-id456 . -7) (undo-tree-id457 . -7) (undo-tree-id458 . -7) (undo-tree-id459 . -7) (undo-tree-id460 . -7) (undo-tree-id461 . -7) (undo-tree-id462 . -7) (undo-tree-id463 . -1) (undo-tree-id464 . -7) (undo-tree-id465 . -1) (undo-tree-id466 . -7) (undo-tree-id467 . -7) (undo-tree-id468 . -7) (undo-tree-id469 . -6) (undo-tree-id470 . -7) (undo-tree-id471 . -6) (undo-tree-id472 . -6) (undo-tree-id473 . -7) (undo-tree-id474 . -6) (undo-tree-id475 . -6) (undo-tree-id476 . -7) (undo-tree-id477 . -6) (undo-tree-id478 . -7) (undo-tree-id479 . -6) (undo-tree-id480 . -6) (undo-tree-id481 . -6) (undo-tree-id482 . -6) (undo-tree-id483 . -6) (undo-tree-id484 . -6) (undo-tree-id485 . -5) (undo-tree-id486 . -6) (undo-tree-id487 . -5) (undo-tree-id488 . -5) (undo-tree-id489 . -6) (undo-tree-id490 . -5) (undo-tree-id491 . -5) (undo-tree-id492 . -6) (undo-tree-id493 . -5) (undo-tree-id494 . -6) (undo-tree-id495 . -5) (undo-tree-id496 . -6) (undo-tree-id497 . -5) (undo-tree-id498 . -6) (undo-tree-id499 . -4) (undo-tree-id500 . -5) (undo-tree-id501 . -4) (undo-tree-id502 . -4) (undo-tree-id503 . -5) (undo-tree-id504 . -4) (undo-tree-id505 . -4) (undo-tree-id506 . -5) (undo-tree-id507 . -4) (undo-tree-id508 . -4) (undo-tree-id509 . -5) (undo-tree-id510 . -3) (undo-tree-id511 . -4) (undo-tree-id512 . -2) (undo-tree-id513 . -3) (undo-tree-id514 . -1) (undo-tree-id515 . -2) (undo-tree-id516 . -1) (15237 . 15238) (#("()" 0 1 (fontified t) 1 2 (fontified t)) . 15237) (undo-tree-id517 . 1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (t 23732 64194 263768 258000)) (23732 64194 163517 698000) 0 nil] [nil nil ((15213 . 15214) (t 23732 64156 443963 473000)) ((#("&" 0 1 (fontified t)) . 15213) (undo-tree-id444 . -1) (t 23732 64166 133913 493000)) (23732 64166 30783 360000) 0 nil]) ((1 . 19123) (#("//! Server-Sent Events (SSE)
//!
//! # Example
//!
//! ```
//! # extern crate futures;
//! # extern crate warp;
//!
//! use std::time::Duration;
//! use futures::stream::iter_ok;
//! use warp::{Filter, sse::ServerSentEvent};
//!
//! let app = warp::path(\"push-notifications\").and(warp::sse()).map(|sse: warp::sse::Sse| {
//!     let events = iter_ok::<_, ::std::io::Error>(vec![
//!         warp::sse::data(\"unnamed event\").into_a(),
//!         (
//!             warp::sse::event(\"chat\"),
//!             warp::sse::data(\"chat message\"),
//!         ).into_a().into_b(),
//!         (
//!             warp::sse::id(13),
//!             warp::sse::event(\"chat\"),
//!             warp::sse::data(\"other chat message\\nwith next line\"),
//!             warp::sse::retry(Duration::from_millis(5000)),
//!         ).into_b().into_b(),
//!     ]);
//!     sse.reply(warp::sse::keep(events, None))
//! });
//! ```
//!
//! Each field already is event which can be sent to client.
//! The events with multiple fields can be created by combining fields using tuples.
//!
//! See also [EventSource](https://developer.mozilla.org/en-US/docs/Web/API/EventSource) API.
//!
use std::error::Error as StdError;
use std::fmt::{self, Display, Formatter, Write};
use std::str::FromStr;
use std::time::Duration;

use futures::{Async, Future, Poll, Stream};
use http::header::{HeaderValue, CACHE_CONTROL, CONTENT_TYPE};
use hyper::Body;
use serde::Serialize;
use serde_json;
use tokio::{clock::now, timer::Delay};

use self::sealed::{
    BoxedServerSentEvent, EitherServerSentEvent, SseError, SseField, SseFormat, SseWrapper,
};
use super::{header, header::MissingHeader};
use filter::One;
use reply::{ReplySealed, Response};
use {Filter, Rejection, Reply};

/// Server-sent event message
pub trait ServerSentEvent: SseFormat + Sized + Send + 'static {
    /// Convert to either A
    fn into_a<B>(self) -> EitherServerSentEvent<Self, B> {
        EitherServerSentEvent::A(self)
    }

    /// Convert to either B
    fn into_b<A>(self) -> EitherServerSentEvent<A, Self> {
        EitherServerSentEvent::B(self)
    }

    /// Convert to boxed
    fn boxed(self) -> BoxedServerSentEvent {
        BoxedServerSentEvent(Box::new(self))
    }
}

impl<T: SseFormat + Send + 'static> ServerSentEvent for T {}

#[allow(missing_debug_implementations)]
pub struct SseComment<T>(T);

/// Comment field (\":<comment-text>\")
pub fn comment<T>(comment: T) -> impl ServerSentEvent
where
    T: Display + Send + 'static,
{
    SseComment(comment)
}

impl<T: Display> SseFormat for SseComment<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Comment = k {
            k.fmt(f)?;
            self.0.fmt(f)?;
            f.write_char('\\n')?;
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseEvent<T>(T);

/// Event name field (\"event:<event-name>\")
pub fn event<T>(event: T) -> impl ServerSentEvent
where
    T: Display + Send + 'static,
{
    SseEvent(event)
}

impl<T: Display> SseFormat for SseEvent<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Event = k {
            k.fmt(f)?;
            self.0.fmt(f)?;
            f.write_char('\\n')?;
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseId<T>(T);

/// Identifier field (\"id:<identifier>\")
pub fn id<T>(id: T) -> impl ServerSentEvent
where
    T: Display + Send + 'static,
{
    SseId(id)
}

impl<T: Display> SseFormat for SseId<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Id = k {
            k.fmt(f)?;
            self.0.fmt(f)?;
            f.write_char('\\n')?;
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseRetry(Duration);

/// Retry timeout field (\"retry:<timeout>\")
pub fn retry(time: Duration) -> impl ServerSentEvent {
    SseRetry(time)
}

impl SseFormat for SseRetry {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Retry = k {
            k.fmt(f)?;

            let secs = self.0.as_secs();
            let millis = self.0.subsec_nanos() / 1_000_000;

            if secs > 0 {
                // format seconds
                secs.fmt(f)?;

                // pad milliseconds
                if millis < 10 {
                    f.write_str(\"00\")?;
                } else if millis < 100 {
                    f.write_char('0')?;
                }
            }

            // format milliseconds
            millis.fmt(f)?;

            f.write_char('\\n')?;
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseData<T>(T);

/// Data field(s) (\"data:<content>\")
///
/// The multiline content will be transferred
/// using sequential data fields, one per line.
pub fn data<T>(data: T) -> impl ServerSentEvent
where
    T: Display + Send + 'static,
{
    SseData(data)
}

impl<T: Display> SseFormat for SseData<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Data = k {
            for line in self.0.to_string().split('\\n') {
                k.fmt(f)?;
                line.fmt(f)?;
                f.write_char('\\n')?;
            }
        }
        Ok(())
    }
}

#[allow(missing_debug_implementations)]
struct SseJson<T>(T);

/// Data field with JSON content (\"data:<json-content>\")
pub fn json<T>(data: T) -> impl ServerSentEvent
where
    T: Serialize + Send + 'static,
{
    SseJson(data)
}

impl<T: Serialize> SseFormat for SseJson<T> {
    fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
        if let SseField::Data = k {
            k.fmt(f)?;
            serde_json::to_string(&self.0)
                .map_err(|error| {
                    error!(\"sse::json error {}\", error);
                    fmt::Error
                })
                .and_then(|data| data.fmt(f))?;
            f.write_char('\\n')?;
        }
        Ok(())
    }
}

macro_rules! tuple_fmt {
    (($($t:ident),+) => ($($i:tt),+)) => {
        impl<$($t),+> SseFormat for ($($t),+)
        where
            $($t: SseFormat,)+
        {
            fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
                $(self.$i.fmt_field(f, k)?;)+
                Ok(())
            }
        }
    };
}

tuple_fmt!((A, B) => (0, 1));
tuple_fmt!((A, B, C) => (0, 1, 2));
tuple_fmt!((A, B, C, D) => (0, 1, 2, 3));
tuple_fmt!((A, B, C, D, E) => (0, 1, 2, 3, 4));
tuple_fmt!((A, B, C, D, E, F) => (0, 1, 2, 3, 4, 5));
tuple_fmt!((A, B, C, D, E, F, G) => (0, 1, 2, 3, 4, 5, 6));
tuple_fmt!((A, B, C, D, E, F, G, H) => (0, 1, 2, 3, 4, 5, 6, 7));

/// Gets the optional last event id from request.
/// Typically this identifier represented as number or string.
///
/// ```
/// let app = warp::sse::last_event_id::<u32>();
///
/// // The identifier is present
/// assert_eq!(
///     warp::test::request()
///        .header(\"Last-Event-ID\", \"12\")
///        .filter(&app)
///        .unwrap(),
///     Some(12)
/// );
///
/// // The identifier is missing
/// assert_eq!(
///     warp::test::request()
///        .filter(&app)
///        .unwrap(),
///     None
/// );
///
/// // The identifier is not a valid
/// assert!(
///     warp::test::request()
///        .header(\"Last-Event-ID\", \"abc\")
///        .filter(&app)
///        .is_err(),
/// );
/// ```
pub fn last_event_id<T>() -> impl Filter<Extract = One<Option<T>>, Error = Rejection>
where
    T: FromStr + Send,
{
    header::header(\"last-event-id\")
        .map(Some)
        .or_else(|rejection: Rejection| {
            if rejection.find_cause::<MissingHeader>().is_some() {
                return Ok((None,));
            }
            Err(rejection)
        })
}

/// Creates a Server-sent Events filter.
///
/// The yielded `Sse` is used to reply with stream of events.
///
/// # Note
///
/// This filter combines multiple filters internally, so you don't need them:
///
/// - Method must be `GET`
/// - Header `connection` must be `keep-alive` when it present.
///
/// If the filters are met, yields a `Sse`. Calling `Sse::reply` will return
/// a reply with:
///
/// - Status of `200 OK`
/// - Header `content-type: text/event-stream`
/// - Header `cache-control: no-cache`.
pub fn sse() -> impl Filter<Extract = One<Sse>, Error = Rejection> + Copy {
    ::get2()
        .and(
            header::exact_ignore_case(\"connection\", \"keep-alive\").or_else(
                |rejection: Rejection| {
                    if rejection.find_cause::<MissingHeader>().is_some() {
                        return Ok(());
                    }
                    Err(rejection)
                },
            ),
        )
        .map(|| Sse)
}

/// Extracted by the [`sse`](sse) filter, and used to reply with stream of events.
pub struct Sse;

impl Sse {
    /// Server-sent events reply
    ///
    /// This function converts stream of server events into reply.
    ///
    /// ```
    /// # extern crate futures;
    /// # extern crate warp;
    /// # extern crate serde;
    /// # #[macro_use] extern crate serde_derive;
    ///
    /// use std::time::Duration;
    /// use futures::stream::iter_ok;
    /// use warp::{Filter, sse::ServerSentEvent};
    ///
    /// #[derive(Serialize)]
    /// struct Msg {
    ///     from: u32,
    ///     text: String,
    /// }
    ///
    /// let app = warp::path(\"sse\").and(warp::sse()).map(|sse: warp::sse::Sse| {
    ///     let events = iter_ok::<_, ::std::io::Error>(vec![
    ///         // Unnamed event with data only
    ///         warp::sse::data(\"payload\").boxed(),
    ///         // Named event with ID and retry timeout
    ///         (
    ///             warp::sse::data(\"other message\\nwith next line\"),
    ///             warp::sse::event(\"chat\"),
    ///             warp::sse::id(1),
    ///             warp::sse::retry(Duration::from_millis(15000))
    ///         ).boxed(),
    ///         // Event with JSON data
    ///         (
    ///             warp::sse::id(2),
    ///             warp::sse::json(Msg {
    ///                 from: 2,
    ///                 text: \"hello\".into(),
    ///             }),
    ///         ).boxed(),
    ///     ]);
    ///     sse.reply(events)
    /// });
    ///
    /// let res = warp::test::request()
    ///     .method(\"GET\")
    ///     .header(\"Connection\", \"Keep-Alive\")
    ///     .path(\"/sse\")
    ///     .reply(&app)
    ///     .into_body();
    ///
    /// assert_eq!(
    ///     res,
    ///     r#\"data:payload
    ///
    /// event:chat
    /// data:other message
    /// data:with next line
    /// id:1
    /// retry:15000
    ///
    /// data:{\"from\":2,\"text\":\"hello\"}
    /// id:2
    ///
    /// \"#
    /// );
    /// ```
    pub fn reply<S>(self, event_stream: S) -> impl Reply
    where
        S: Stream + Send + 'static,
        S::Item: ServerSentEvent,
        S::Error: StdError + Send + Sync + 'static,
    {
        SseReply { event_stream }
    }
}

impl fmt::Debug for Sse {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.debug_struct(\"Sse\").finish()
    }
}

#[allow(missing_debug_implementations)]
struct SseReply<S> {
    event_stream: S,
}

impl<S> ReplySealed for SseReply<S>
where
    S: Stream + Send + 'static,
    S::Item: ServerSentEvent,
    S::Error: StdError + Send + Sync + 'static,
{
    #[inline]
    fn into_response(self) -> Response {
        let body_stream = self
            .event_stream
            .map_err(|error| {
                // FIXME: error logging
                error!(\"sse stream error: {}\", error);
                SseError
            })
            .and_then(|event| SseWrapper::format(&event));

        let mut res = Response::new(Body::wrap_stream(body_stream));
        // Set appropriate content type
        res.headers_mut()
            .insert(CONTENT_TYPE, HeaderValue::from_static(\"text/event-stream\"));
        // Disable response body caching
        res.headers_mut()
            .insert(CACHE_CONTROL, HeaderValue::from_static(\"no-cache\"));
        res
    }
}

#[allow(missing_debug_implementations)]
pub struct SseKeepAlive<S> {
    event_stream: S,
    comment_text: String,
    max_interval: Duration,
    alive_timer: Delay,
}

/// This is a deprecated version of `keep_alive`, which is maintained for
/// backwards compatibility.  Refer to the documentation accompanying `keep_alive`
/// for details about the purpose/usage of these two functions.
///
/// Unlike `keep_alive`, `keep` requires you to provide an `Option<Durration>` as a
/// second parameter and interprets `None` as a signal to use a default durration
/// of 15 seconds.  `keep` also always sends the heartbeat signal `:` whereas
/// `keep_alive` alows you to customize that signal.
pub fn keep<S>(
    event_stream: S,
    keep_interval: impl Into<Option<Duration>>,
) -> impl Stream<
    Item = impl ServerSentEvent + Send + 'static,
    Error = impl StdError + Send + Sync + 'static,
> + Send
         + 'static
where
    S: Stream + Send + 'static,
    S::Item: ServerSentEvent + Send,
    S::Error: StdError + Send + Sync + 'static,
{
    let max_interval = keep_interval
        .into()
        .unwrap_or_else(|| Duration::from_secs(15));
    let alive_timer = Delay::new(now() + max_interval);
    SseKeepAlive {
        event_stream,
        comment_text: \"\".to_string(),
        max_interval,
        alive_timer,
    }
}

/// Keeps event source connection when no events sent over a some time.
///
/// Some proxy servers may drop HTTP connection after a some timeout of inactivity.
/// This function helps to prevent such behavior by sending comment events every
/// `keep_interval` of inactivity.
///
/// By default the comment is `:` (an empty comment) and the  time interval between
/// events is 15 seconds.  Both of thes may be customized using the builder pattern
/// as shown below.
///
/// See [notes](https://www.w3.org/TR/2009/WD-eventsource-20090421/#notes).
pub fn keep_alive<S>(event_stream: S, keep_interval: impl Into<Option<Duration>>) -> SseKeepAlive<S>
where
    S: Stream + Send + 'static,
    S::Item: ServerSentEvent + Send,
    S::Error: StdError + Send + Sync + 'static,
{
    let max_interval = Duration::from_secs(15);
    let alive_timer = Delay::new(now() + max_interval);
    SseKeepAlive {
        event_stream,
        comment_text: \"\".to_string(),
        max_interval,
        alive_timer,
    }
}

impl<S> Stream for SseKeepAlive<S>
where
    S: Stream + Send + 'static,
    S::Item: ServerSentEvent,
    S::Error: StdError + Send + Sync + 'static,
{
    type Item = EitherServerSentEvent<S::Item, SseComment<&'static str>>;
    type Error = SseError;

    fn poll(&mut self) -> Poll<Option<Self::Item>, Self::Error> {
        match self.event_stream.poll() {
            Ok(Async::NotReady) => match self.alive_timer.poll() {
                Ok(Async::NotReady) => Ok(Async::NotReady),
                Ok(Async::Ready(_)) => {
                    // restart timer
                    self.alive_timer.reset(now() + self.max_interval);
                    Ok(Async::Ready(Some(EitherServerSentEvent::B(SseComment(self.comment_text)))))
                }
                Err(error) => {
                    error!(\"sse::keep error: {}\", error);
                    Err(SseError)
                }
            },
            Ok(Async::Ready(Some(event))) => {
                // restart timer
                self.alive_timer.reset(now() + self.max_interval);
                Ok(Async::Ready(Some(EitherServerSentEvent::A(event))))
            }
            Ok(Async::Ready(None)) => Ok(Async::Ready(None)),
            Err(error) => {
                error!(\"sse::keep error: {}\", error);
                Err(SseError)
            }
        }
    }
}

mod sealed {
    use super::*;

    /// SSE error type
    #[derive(Debug)]
    pub struct SseError;

    impl Display for SseError {
        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
            write!(f, \"sse error\")
        }
    }

    impl StdError for SseError {
        fn description(&self) -> &str {
            \"sse error\"
        }
    }

    impl Display for SseField {
        fn fmt(&self, f: &mut Formatter) -> fmt::Result {
            use self::SseField::*;
            f.write_str(match self {
                Event => \"event:\",
                Id => \"id:\",
                Data => \"data:\",
                Retry => \"retry:\",
                Comment => \":\",
            })
        }
    }

    /// SSE field kind
    #[allow(missing_debug_implementations)]
    pub enum SseField {
        /// Event name field
        Event,
        /// Event id field
        Id,
        /// Event data field
        Data,
        /// Retry timeout field
        Retry,
        /// Comment field
        Comment,
    }

    /// SSE formatter trait
    pub trait SseFormat {
        /// format message field
        fn fmt_field(&self, _f: &mut Formatter, _key: &SseField) -> fmt::Result {
            Ok(())
        }
    }

    /// SSE wrapper to help formatting messages
    #[allow(missing_debug_implementations)]
    pub struct SseWrapper<'a, T: 'a>(&'a T);

    impl<'a, T> SseWrapper<'a, T>
    where
        T: SseFormat + 'a,
    {
        pub fn format(event: &'a T) -> Result<String, SseError> {
            let mut buf = String::new();
            buf.write_fmt(format_args!(\"{}\", SseWrapper(event)))
                .map_err(|_| SseError)?;
            buf.shrink_to_fit();
            Ok(buf)
        }
    }

    impl<'a, T> Display for SseWrapper<'a, T>
    where
        T: SseFormat,
    {
        fn fmt(&self, f: &mut Formatter) -> fmt::Result {
            self.0.fmt_field(f, &SseField::Comment)?;
            // The event name usually transferred before the other fields.
            self.0.fmt_field(f, &SseField::Event)?;
            // It is important that the data will be transferred before
            // the identifier to prevent possible losing events when
            // resuming connection.
            self.0.fmt_field(f, &SseField::Data)?;
            self.0.fmt_field(f, &SseField::Id)?;
            self.0.fmt_field(f, &SseField::Retry)?;
            f.write_char('\\n')
        }
    }

    #[allow(missing_debug_implementations)]
    pub struct BoxedServerSentEvent(pub(super) Box<SseFormat + Send>);

    impl SseFormat for BoxedServerSentEvent {
        fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
            self.0.fmt_field(f, k)
        }
    }

    #[allow(missing_debug_implementations)]
    pub enum EitherServerSentEvent<A, B> {
        A(A),
        B(B),
    }

    impl<A, B> SseFormat for EitherServerSentEvent<A, B>
    where
        A: SseFormat,
        B: SseFormat,
    {
        fn fmt_field(&self, f: &mut Formatter, k: &SseField) -> fmt::Result {
            match self {
                EitherServerSentEvent::A(a) => a.fmt_field(f, k),
                EitherServerSentEvent::B(b) => b.fmt_field(f, k),
            }
        }
    }
}
" 0 29 (fontified t face font-lock-doc-face) 29 33 (fontified t face font-lock-doc-face) 33 47 (fontified t face font-lock-doc-face) 47 51 (fontified t face font-lock-doc-face) 51 59 (fontified t face font-lock-doc-face) 59 87 (fontified t face font-lock-doc-face) 87 112 (fontified t face font-lock-doc-face) 112 116 (fontified t face font-lock-doc-face) 116 145 (fontified t face font-lock-doc-face) 145 179 (fontified t face font-lock-doc-face) 179 225 (fontified t face font-lock-doc-face) 225 229 (fontified t face font-lock-doc-face) 229 321 (fontified t face font-lock-doc-face) 321 351 (fontified t face font-lock-doc-face) 351 352 (fontified t syntax-table #1# face font-lock-doc-face) 352 371 (fontified t face font-lock-doc-face) 371 372 (fontified t syntax-table #1# face font-lock-doc-face) 372 379 (fontified t face font-lock-doc-face) 379 434 (fontified t face font-lock-doc-face) 434 448 (fontified t face font-lock-doc-face) 448 490 (fontified t face font-lock-doc-face) 490 500 (fontified t face font-lock-doc-face) 500 539 (fontified t face font-lock-doc-face) 539 572 (fontified t face font-lock-doc-face) 572 586 (fontified t face font-lock-doc-face) 586 621 (fontified t face font-lock-doc-face) 621 663 (fontified t face font-lock-doc-face) 663 734 (fontified t face font-lock-doc-face) 734 797 (fontified t face font-lock-doc-face) 797 830 (fontified t face font-lock-doc-face) 830 842 (fontified t face font-lock-doc-face) 842 891 (fontified t face font-lock-doc-face) 891 899 (fontified t face font-lock-doc-face) 899 907 (fontified t face font-lock-doc-face) 907 911 (fontified t face font-lock-doc-face) 911 972 (fontified t face font-lock-doc-face) 972 1039 (fontified t face font-lock-doc-face) 1039 1057 (fontified t face font-lock-doc-face) 1057 1061 (fontified t face font-lock-doc-face) 1061 1155 (fontified t face font-lock-doc-face) 1155 1159 (fontified t face font-lock-doc-face) 1159 1162 (fontified t face font-lock-keyword-face) 1162 1163 (fontified t) 1163 1166 (fontified t face font-lock-constant-face) 1166 1168 (fontified t) 1168 1173 (fontified t face font-lock-constant-face) 1173 1175 (fontified t) 1175 1180 (fontified t face font-lock-type-face) 1180 1181 (fontified t) 1181 1183 (fontified t face font-lock-keyword-face) 1183 1184 (fontified t) 1184 1192 (fontified t face font-lock-type-face) 1192 1194 (fontified t) 1194 1197 (fontified t face font-lock-keyword-face) 1197 1198 (fontified t) 1198 1201 (fontified t face font-lock-constant-face) 1201 1203 (fontified t) 1203 1206 (fontified t face font-lock-constant-face) 1206 1209 (fontified t) 1209 1213 (fontified t face font-lock-keyword-face) 1213 1215 (fontified t) 1215 1222 (fontified t face font-lock-type-face) 1222 1224 (fontified t) 1224 1233 (fontified t face font-lock-type-face) 1233 1235 (fontified t) 1235 1240 (fontified t face font-lock-type-face) 1240 1243 (fontified t) 1243 1246 (fontified t face font-lock-keyword-face) 1246 1247 (fontified t) 1247 1250 (fontified t face font-lock-constant-face) 1250 1252 (fontified t) 1252 1255 (fontified t face font-lock-type-face) 1255 1257 (fontified t) 1257 1264 (fontified t face font-lock-type-face) 1264 1266 (fontified t) 1266 1269 (fontified t face font-lock-keyword-face) 1269 1270 (fontified t) 1270 1273 (fontified t face font-lock-constant-face) 1273 1275 (fontified t) 1275 1279 (fontified t face font-lock-constant-face) 1279 1281 (fontified t) 1281 1289 (fontified t face font-lock-type-face) 1289 1292 (fontified t) 1292 1295 (fontified t face font-lock-keyword-face) 1295 1296 (fontified t) 1296 1303 (fontified t face font-lock-constant-face) 1303 1306 (fontified t) 1306 1311 (fontified t face font-lock-type-face) 1311 1313 (fontified t) 1313 1319 (fontified t face font-lock-type-face) 1319 1321 (fontified t) 1321 1325 (fontified t face font-lock-type-face) 1325 1327 (fontified t) 1327 1333 (fontified t face font-lock-type-face) 1333 1336 (fontified t) 1336 1339 (fontified t face font-lock-keyword-face) 1339 1340 (fontified t) 1340 1344 (fontified t face font-lock-constant-face) 1344 1346 (fontified t) 1346 1352 (fontified t face font-lock-constant-face) 1352 1355 (fontified t) 1355 1366 (fontified t face font-lock-type-face) 1366 1368 (fontified t) 1368 1381 (fontified t face font-lock-type-face) 1381 1383 (fontified t) 1383 1395 (fontified t face font-lock-type-face) 1395 1398 (fontified t) 1398 1401 (fontified t face font-lock-keyword-face) 1401 1402 (fontified t) 1402 1407 (fontified t face font-lock-constant-face) 1407 1409 (fontified t) 1409 1413 (fontified t face font-lock-type-face) 1413 1415 (fontified t) 1415 1418 (fontified t face font-lock-keyword-face) 1418 1419 (fontified t) 1419 1424 (fontified t face font-lock-constant-face) 1424 1426 (fontified t) 1426 1435 (fontified t face font-lock-type-face) 1435 1437 (fontified t) 1437 1440 (fontified t face font-lock-keyword-face) 1440 1441 (fontified t) 1441 1451 (fontified t face font-lock-constant-face) 1451 1453 (fontified t) 1453 1456 (fontified t face font-lock-keyword-face) 1456 1457 (fontified t) 1457 1462 (fontified t face font-lock-constant-face) 1462 1465 (fontified t) 1465 1470 (fontified t face font-lock-constant-face) 1470 1477 (fontified t) 1477 1482 (fontified t face font-lock-constant-face) 1482 1484 (fontified t) 1484 1489 (fontified t face font-lock-type-face) 1489 1493 (fontified t) 1493 1496 (fontified t face font-lock-keyword-face) 1496 1497 (fontified t) 1497 1501 (fontified t face font-lock-keyword-face) 1501 1503 (fontified t) 1503 1509 (fontified t face font-lock-constant-face) 1509 1517 (fontified t) 1517 1537 (fontified t face font-lock-type-face) 1537 1539 (fontified t) 1539 1557 (fontified t face font-lock-type-face) 1557 1560 (fontified t face font-lock-type-face) 1560 1562 (fontified t) 1562 1570 (fontified t face font-lock-type-face) 1570 1572 (fontified t) 1572 1580 (fontified t face font-lock-type-face) 1580 1582 (fontified t) 1582 1591 (fontified t face font-lock-type-face) 1591 1593 (fontified t) 1593 1603 (fontified t face font-lock-type-face) 1603 1605 (fontified t) 1768 1771 (fontified t face font-lock-keyword-face) 1771 1772 (fontified t) 1772 1777 (fontified t face font-lock-keyword-face) 1777 1778 (fontified t) 1778 1793 (fontified t face font-lock-variable-name-face) 1793 1795 (fontified t) 1795 1804 (fontified t face font-lock-type-face) 1804 1807 (fontified t) 1807 1812 (fontified t face font-lock-type-face) 1812 1815 (fontified t) 1815 1819 (fontified t face font-lock-type-face) 1819 1823 (fontified t) 1823 1829 (fontified t face font-lock-keyword-face) 1829 1832 (fontified t) 1832 1836 (fontified t) 1836 1860 (fontified t face font-lock-doc-face) 1860 1864 (fontified t) 1864 1866 (fontified t face font-lock-keyword-face) 1866 1867 (fontified t) 1867 1873 (fontified t face font-lock-function-name-face) 1873 1874 (fontified t) 1874 1875 (fontified t face font-lock-type-face) 1875 1877 (fontified t) 1877 1881 (fontified t face font-lock-keyword-face) 1881 1884 (fontified t) 1884 1885 (syntax-table #1# fontified t) 1885 1886 (fontified t) 1886 1907 (fontified t face font-lock-type-face) 1907 1908 (fontified t) 1908 1912 (fontified t face font-lock-type-face) 1912 1914 (fontified t) 1914 1915 (fontified t face font-lock-type-face) 1915 1927 (fontified t) 1927 1948 (fontified t face font-lock-type-face) 1948 1950 (fontified t) 1950 1951 (fontified t face font-lock-type-face) 1951 1952 (fontified t) 1952 1956 (fontified t face font-lock-keyword-face) 1956 1969 (fontified t) 1969 1993 (fontified t face font-lock-doc-face) 1993 1997 (fontified t) 1997 1999 (fontified t face font-lock-keyword-face) 1999 2000 (fontified t) 2000 2006 (fontified t face font-lock-function-name-face) 2006 2007 (fontified t) 2007 2008 (fontified t face font-lock-type-face) 2008 2010 (fontified t) 2010 2014 (fontified t face font-lock-keyword-face) 2014 2017 (fontified t) 2017 2018 (syntax-table #1# fontified t) 2018 2019 (fontified t) 2019 2040 (fontified t face font-lock-type-face) 2040 2041 (fontified t) 2041 2042 (fontified t face font-lock-type-face) 2042 2044 (fontified t) 2044 2048 (fontified t face font-lock-type-face) 2048 2060 (fontified t) 2060 2081 (fontified t face font-lock-type-face) 2081 2083 (fontified t) 2083 2084 (fontified t face font-lock-type-face) 2084 2085 (fontified t) 2085 2089 (fontified t face font-lock-keyword-face) 2089 2102 (fontified t) 2102 2123 (fontified t face font-lock-doc-face) 2123 2127 (fontified t) 2127 2129 (fontified t face font-lock-keyword-face) 2129 2130 (fontified t) 2130 2135 (fontified t face font-lock-function-name-face) 2135 2136 (fontified t) 2136 2140 (fontified t face font-lock-keyword-face) 2140 2143 (fontified t) 2143 2144 (syntax-table #1# fontified t) 2144 2145 (fontified t) 2145 2165 (fontified t face font-lock-type-face) 2165 2176 (fontified t) 2176 2196 (fontified t face font-lock-type-face) 2196 2197 (fontified t) 2197 2200 (fontified t face font-lock-type-face) 2200 2206 (fontified t) 2206 2210 (fontified t face font-lock-keyword-face) 2210 2222 (fontified t) 2222 2226 (fontified t face font-lock-keyword-face) 2226 2227 (fontified t) 2227 2228 (fontified t face font-lock-variable-name-face) 2228 2230 (fontified t) 2230 2239 (fontified t face font-lock-type-face) 2239 2242 (fontified t) 2242 2246 (fontified t face font-lock-type-face) 2246 2250 (fontified t) 2250 2256 (fontified t face font-lock-keyword-face) 2256 2258 (fontified t) 2258 2273 (fontified t face font-lock-type-face) 2273 2274 (fontified t) 2274 2277 (fontified t face font-lock-keyword-face) 2277 2278 (fontified t) 2278 2279 (fontified t face font-lock-type-face) 2279 2284 (fontified t) 2284 2323 (fontified t face font-lock-preprocessor-face) 2323 2324 (fontified t) 2324 2327 (fontified t face font-lock-keyword-face) 2327 2328 (fontified t) 2328 2334 (fontified t face font-lock-keyword-face) 2334 2335 (fontified t) 2335 2345 (fontified t face font-lock-type-face) 2345 2346 (fontified t) 2346 2347 (fontified t face font-lock-type-face) 2347 2349 (fontified t) 2349 2350 (fontified t face font-lock-type-face) 2350 2353 (fontified t) 2353 2354 (fontified t) 2354 2375 (fontified t face font-lock-doc-face) 2375 2376 (syntax-table #1# fontified t face font-lock-doc-face) 2376 2388 (fontified t face font-lock-doc-face) 2388 2389 (syntax-table #1# fontified t face font-lock-doc-face) 2389 2392 (fontified t face font-lock-doc-face) 2392 2395 (fontified t face font-lock-keyword-face) 2395 2396 (fontified t) 2396 2398 (fontified t face font-lock-keyword-face) 2398 2399 (fontified t) 2399 2406 (fontified t face font-lock-function-name-face) 2406 2407 (fontified t) 2407 2408 (fontified t face font-lock-type-face) 2408 2410 (fontified t) 2410 2417 (fontified t face font-lock-variable-name-face) 2417 2419 (fontified t) 2419 2420 (fontified t face font-lock-type-face) 2420 2423 (fontified t) 2423 2424 (syntax-table #1# fontified t) 2424 2425 (fontified t) 2425 2429 (fontified t face font-lock-keyword-face) 2429 2430 (fontified t) 2430 2445 (fontified t face font-lock-type-face) 2445 2446 (fontified t) 2446 2451 (fontified t face font-lock-keyword-face) 2451 2456 (fontified t) 2456 2457 (fontified t face font-lock-variable-name-face) 2457 2459 (fontified t) 2459 2466 (fontified t face font-lock-type-face) 2466 2469 (fontified t) 2469 2473 (fontified t face font-lock-type-face) 2473 2477 (fontified t) 2477 2483 (fontified t face font-lock-keyword-face) 2483 2491 (fontified t) 2491 2501 (fontified t face font-lock-type-face) 2501 2514 (fontified t) 2514 2518 (fontified t face font-lock-keyword-face) 2518 2519 (fontified t) 2519 2520 (fontified t face font-lock-variable-name-face) 2520 2522 (fontified t) 2522 2529 (fontified t face font-lock-type-face) 2529 2531 (fontified t) 2531 2540 (fontified t face font-lock-type-face) 2540 2541 (fontified t) 2541 2544 (fontified t face font-lock-keyword-face) 2544 2545 (fontified t) 2545 2555 (fontified t face font-lock-type-face) 2555 2556 (fontified t) 2556 2557 (fontified t face font-lock-type-face) 2557 2565 (fontified t) 2565 2567 (fontified t face font-lock-keyword-face) 2567 2568 (fontified t) 2568 2577 (fontified t face font-lock-function-name-face) 2577 2579 (fontified t) 2579 2583 (fontified t face font-lock-keyword-face) 2583 2585 (fontified t) 2585 2586 (fontified t face font-lock-variable-name-face) 2586 2589 (fontified t) 2589 2592 (fontified t face font-lock-keyword-face) 2592 2593 (fontified t) 2593 2602 (fontified t face font-lock-type-face) 2602 2604 (fontified t) 2604 2605 (fontified t face font-lock-variable-name-face) 2605 2608 (fontified t) 2608 2616 (fontified t face font-lock-type-face) 2616 2619 (fontified t) 2619 2620 (syntax-table #1# fontified t) 2620 2621 (fontified t) 2621 2624 (fontified t face font-lock-constant-face) 2624 2626 (fontified t) 2626 2632 (fontified t face font-lock-type-face) 2632 2643 (fontified t) 2643 2645 (fontified t face font-lock-keyword-face) 2645 2646 (fontified t) 2646 2649 (fontified t face font-lock-keyword-face) 2649 2650 (fontified t) 2650 2658 (fontified t face font-lock-type-face) 2658 2660 (fontified t) 2660 2667 (fontified t face font-lock-type-face) 2667 2694 (fontified t) 2694 2695 (fontified t face rust-question-mark-face) 2695 2709 (fontified t) 2709 2713 (fontified t face font-lock-keyword-face) 2713 2722 (fontified t) 2722 2723 (fontified t face rust-question-mark-face) 2723 2750 (fontified t) 2750 2751 (syntax-table #2# fontified t face font-lock-string-face) 2751 2753 (fontified t face font-lock-string-face) 2753 2754 (syntax-table #2# fontified t face font-lock-string-face) 2754 2755 (fontified t) 2755 2756 (fontified t face rust-question-mark-face) 2756 2776 (fontified t) 2776 2778 (fontified t face font-lock-type-face) 2778 2792 (fontified t) 2792 2831 (fontified t face font-lock-preprocessor-face) 2831 2832 (fontified t) 2832 2835 (fontified t face font-lock-keyword-face) 2835 2838 (fontified t face font-lock-keyword-face) 2838 2839 (fontified t) 2839 2847 (fontified t face font-lock-type-face) 2847 2848 (fontified t) 2848 2849 (fontified t face font-lock-type-face) 2849 2851 (fontified t) 2851 2852 (fontified t face font-lock-type-face) 2852 2853 (fontified t) 2853 2855 (fontified t) 2885 2886 (syntax-table #1#) 2896 2897 (syntax-table #1#) 2927 2928 (syntax-table #1#) 3117 3118 (syntax-table #1#) 3246 3247 (syntax-table #2#) 3249 3250 (syntax-table #2#) 3375 3376 (syntax-table #1#) 3386 3387 (syntax-table #1#) 3411 3412 (syntax-table #1#) 3592 3593 (syntax-table #1#) 3718 3719 (syntax-table #2#) 3721 3722 (syntax-table #2#) 3860 3861 (syntax-table #1#) 3868 3869 (syntax-table #1#) 3902 3903 (syntax-table #1#) 4037 4038 (syntax-table #1#) 4236 4237 (syntax-table #1#) 4369 4370 (syntax-table #1#) 4449 4450 (syntax-table #1#) 4490 4491 (syntax-table #2#) 4492 4493 (syntax-table #2#) 4619 4620 (syntax-table #2#) 4622 4623 (syntax-table #2#) 4749 4750 (syntax-table #1#) 4757 4758 (syntax-table #1#) 4884 4885 (syntax-table #1#) 5071 5072 (syntax-table #1#) 5172 5173 (syntax-table #2#) 5175 5176 (syntax-table #2#) 5266 5267 (syntax-table #2#) 5269 5270 (syntax-table #2#) 5425 5426 (syntax-table #1#) 5438 5439 (syntax-table #1#) 5467 5468 (syntax-table #1#) 5658 5659 (syntax-table #1#) 5991 5992 (syntax-table #2#) 5994 5995 (syntax-table #2#) 6080 6081 (syntax-table #1#) 6097 6098 (syntax-table #1#) 6113 6114 (syntax-table #1#) 6121 6122 (syntax-table #1#) 6268 6269 (syntax-table #1#) 6406 6407 (syntax-table #1#) 6439 6440 (syntax-table #1#) 6478 6479 (syntax-table #1#) 6523 6524 (syntax-table #1#) 6574 6575 (syntax-table #1#) 6631 6632 (syntax-table #1#) 6694 6695 (syntax-table #1#) 6889 6890 (syntax-table #1#) 6893 6894 (syntax-table #1#) 7460 7461 (syntax-table #1#) 8333 8334 (syntax-table #1#) 9526 9527 (syntax-table #1#) 9546 9547 (syntax-table #1#) 10560 10561 (syntax-table #3#) 10837 10838 (syntax-table #1#) 11100 11101 (syntax-table #1#) 11445 11446 (syntax-table #1#) 11562 11565 (face font-lock-comment-delimiter-face) 11565 11586 (face font-lock-comment-face) 11602 11608 (face font-lock-preprocessor-face) 11609 11631 (face font-lock-string-face) 11657 11665 (face font-lock-type-face) 11711 11721 (face font-lock-type-face) 11749 11752 (face font-lock-keyword-face) 11753 11756 (face font-lock-keyword-face) 11757 11760 (face font-lock-variable-name-face) 11763 11771 (face font-lock-type-face) 11777 11781 (face font-lock-type-face) 11818 11821 (face font-lock-comment-delimiter-face) 11821 11850 (face font-lock-comment-face) 11896 11908 (face font-lock-type-face) 11910 11921 (face font-lock-type-face) 11935 11954 (face font-lock-string-face) 11966 11969 (face font-lock-comment-delimiter-face) 11969 11999 (face font-lock-comment-face) 12120 12159 (face font-lock-preprocessor-face) 12160 12163 (face font-lock-keyword-face) 12164 12170 (face font-lock-keyword-face) 12171 12183 (face font-lock-type-face) 12184 12185 (face font-lock-type-face) 12193 12205 (face font-lock-variable-name-face) 12207 12208 (face font-lock-type-face) 12214 12226 (face font-lock-variable-name-face) 12228 12234 (face font-lock-type-face) 12240 12252 (face font-lock-variable-name-face) 12254 12262 (face font-lock-type-face) 12268 12279 (face font-lock-variable-name-face) 12281 12286 (face font-lock-type-face) 12291 12365 (face font-lock-doc-face) 12365 12448 (face font-lock-doc-face) 12448 12512 (face font-lock-doc-face) 12512 12516 (face font-lock-doc-face) 12516 12582 (face font-lock-doc-face) 12582 12583 (face font-lock-doc-face syntax-table #1#) 12583 12592 (face font-lock-doc-face) 12592 12593 (face font-lock-doc-face syntax-table #1#) 12593 12600 (face font-lock-doc-face) 12600 12623 (face font-lock-doc-face) 12623 12624 (face font-lock-doc-face) 12624 12682 (face font-lock-doc-face) 12682 12689 (face font-lock-doc-face) 12689 12760 (face font-lock-doc-face) 12760 12812 (face font-lock-doc-face) 12812 12813 (rear-nonsticky t face font-lock-doc-face) 12813 12816 (face font-lock-keyword-face) 12817 12819 (face font-lock-keyword-face) 12820 12824 (face font-lock-function-name-face) 12825 12826 (face font-lock-type-face) 12833 12845 (face font-lock-variable-name-face) 12847 12848 (face font-lock-type-face) 12854 12867 (face font-lock-variable-name-face) 12869 12873 (face font-lock-keyword-face) 12874 12878 (face font-lock-type-face) 12879 12885 (face font-lock-type-face) 12886 12894 (face font-lock-type-face) 12901 12902 (syntax-table #1#) 12903 12907 (face font-lock-keyword-face) 12908 12914 (face font-lock-type-face) 12920 12924 (face font-lock-type-face) 12927 12931 (face font-lock-keyword-face) 12932 12947 (face font-lock-type-face) 12950 12954 (face font-lock-type-face) 12958 12964 (face font-lock-keyword-face) 12970 12975 (face font-lock-type-face) 12978 12982 (face font-lock-keyword-face) 12983 12991 (face font-lock-type-face) 12994 12998 (face font-lock-type-face) 13001 13005 (face font-lock-type-face) 13009 13015 (face font-lock-keyword-face) 13021 13025 (face font-lock-type-face) 13038 13044 (face font-lock-keyword-face) 13045 13050 (face font-lock-keyword-face) 13055 13056 (face font-lock-variable-name-face) 13058 13064 (face font-lock-type-face) 13067 13071 (face font-lock-type-face) 13075 13081 (face font-lock-keyword-face) 13087 13088 (face font-lock-type-face) 13090 13094 (face font-lock-variable-name-face) 13096 13111 (face font-lock-type-face) 13114 13118 (face font-lock-type-face) 13124 13125 (face font-lock-type-face) 13127 13132 (face font-lock-variable-name-face) 13134 13142 (face font-lock-type-face) 13145 13149 (face font-lock-type-face) 13152 13156 (face font-lock-type-face) 13160 13166 (face font-lock-keyword-face) 13174 13177 (face font-lock-keyword-face) 13178 13190 (face font-lock-variable-name-face) 13250 13254 (face font-lock-type-face) 13254 13258 (face font-lock-type-face) 13280 13283 (face font-lock-keyword-face) 13284 13295 (face font-lock-variable-name-face) 13298 13303 (face font-lock-type-face) 13336 13348 (face font-lock-type-face) 13381 13393 (face font-lock-variable-name-face) 13395 13397 (face font-lock-string-face) 13463 13535 (face font-lock-doc-face) 13535 13539 (face font-lock-doc-face) 13539 13623 (face font-lock-doc-face) 13623 13677 (face font-lock-doc-face) 13677 13704 (face font-lock-doc-face) 13704 13739 (face font-lock-doc-face) 13739 13743 (face font-lock-doc-face) 13743 13776 (face font-lock-doc-face) 13776 13827 (face font-lock-doc-face) 13827 13870 (face font-lock-doc-face) 13870 13911 (face font-lock-doc-face) 13911 13931 (face font-lock-doc-face) 13931 13935 (face font-lock-doc-face) 13935 13962 (face font-lock-doc-face) 13962 13963 (face font-lock-doc-face) 13963 14010 (face font-lock-doc-face) 14010 14011 (rear-nonsticky t face font-lock-doc-face) 14011 14014 (face font-lock-keyword-face) 14015 14017 (face font-lock-keyword-face) 14018 14028 (face font-lock-function-name-face) 14029 14030 (face font-lock-type-face) 14032 14044 (face font-lock-variable-name-face) 14046 14047 (face font-lock-type-face) 14049 14062 (face font-lock-variable-name-face) 14064 14068 (face font-lock-keyword-face) 14069 14073 (face font-lock-type-face) 14074 14080 (face font-lock-type-face) 14081 14089 (face font-lock-type-face) 14094 14095 (syntax-table #1#) 14096 14108 (face font-lock-type-face) 14109 14110 (face font-lock-type-face) 14112 14117 (fontified t face font-lock-keyword-face) 14117 14118 (fontified t) 14118 14122 (fontified t) 14122 14123 (fontified t face font-lock-variable-name-face) 14123 14125 (fontified t) 14125 14131 (fontified t face font-lock-type-face) 14131 14134 (fontified t) 14134 14138 (fontified t face font-lock-type-face) 14138 14142 (fontified t) 14142 14148 (fontified t face font-lock-keyword-face) 14148 14150 (fontified t) 14150 14154 (fontified t) 14154 14155 (fontified t face font-lock-type-face) 14155 14157 (fontified t) 14157 14161 (fontified t face font-lock-variable-name-face) 14161 14163 (fontified t) 14163 14178 (fontified t face font-lock-type-face) 14178 14181 (fontified t) 14181 14185 (fontified t face font-lock-type-face) 14185 14186 (fontified t) 14186 14191 (fontified t) 14191 14192 (fontified t face font-lock-type-face) 14192 14194 (fontified t) 14194 14199 (fontified t face font-lock-variable-name-face) 14199 14201 (fontified t) 14201 14209 (fontified t face font-lock-type-face) 14209 14212 (fontified t) 14212 14216 (fontified t face font-lock-type-face) 14216 14219 (fontified t) 14219 14223 (fontified t face font-lock-type-face) 14223 14227 (fontified t) 14227 14233 (fontified t face font-lock-keyword-face) 14233 14241 (fontified t) 14241 14244 (fontified t face font-lock-keyword-face) 14244 14245 (fontified t) 14245 14257 (fontified t face font-lock-variable-name-face) 14257 14260 (fontified t) 14260 14268 (fontified t face font-lock-type-face) 14268 14289 (fontified t) 14289 14292 (fontified t face font-lock-keyword-face) 14292 14293 (fontified t) 14293 14304 (fontified t face font-lock-variable-name-face) 14304 14307 (fontified t) 14307 14312 (fontified t face font-lock-type-face) 14312 14327 (fontified t) 14327 14341 (fontified t) 14341 14345 (fontified t) 14345 14357 (fontified t face font-lock-type-face) 14357 14386 (fontified t) 14386 14390 (fontified t) 14390 14402 (fontified t face font-lock-variable-name-face) 14402 14404 (fontified t) 14404 14406 (fontified t face font-lock-string-face) 14406 14411 (fontified t) 14411 14420 (fontified t) 14420 14441 (fontified t) 14441 14442 (fontified t) 14442 14470 (fontified t) 14470 14471 (fontified t) 14471 14472 (fontified t) 14472 14476 (fontified t face font-lock-keyword-face) 14476 14477 (fontified t) 14477 14478 (fontified t face font-lock-type-face) 14478 14480 (fontified t) 14480 14486 (fontified t face font-lock-type-face) 14486 14487 (fontified t) 14487 14490 (fontified t face font-lock-keyword-face) 14490 14491 (fontified t) 14491 14503 (fontified t face font-lock-type-face) 14503 14504 (fontified t) 14504 14505 (fontified t face font-lock-type-face) 14505 14507 (fontified t) 14507 14512 (fontified t face font-lock-keyword-face) 14512 14513 (fontified t) 14513 14517 (fontified t) 14517 14518 (fontified t face font-lock-variable-name-face) 14518 14520 (fontified t) 14520 14526 (fontified t face font-lock-type-face) 14526 14529 (fontified t) 14529 14533 (fontified t face font-lock-type-face) 14533 14537 (fontified t) 14537 14543 (fontified t face font-lock-keyword-face) 14543 14549 (fontified t) 14549 14550 (fontified t face font-lock-type-face) 14550 14552 (fontified t) 14552 14556 (fontified t face font-lock-variable-name-face) 14556 14558 (fontified t) 14558 14573 (fontified t face font-lock-type-face) 14573 14579 (fontified t) 14579 14580 (fontified t face font-lock-type-face) 14580 14582 (fontified t) 14582 14587 (fontified t face font-lock-variable-name-face) 14587 14589 (fontified t) 14589 14597 (fontified t face font-lock-type-face) 14597 14600 (fontified t) 14600 14604 (fontified t face font-lock-type-face) 14604 14607 (fontified t) 14607 14611 (fontified t face font-lock-type-face) 14611 14615 (fontified t) 14615 14621 (fontified t face font-lock-keyword-face) 14621 14625 (fontified t) 14625 14629 (fontified t) 14629 14633 (face font-lock-keyword-face fontified t) 14633 14634 (fontified t) 14634 14638 (face font-lock-type-face fontified t) 14638 14641 (fontified t) 14641 14662 (face font-lock-type-face fontified t) 14662 14663 (fontified t) 14663 14664 (face font-lock-type-face fontified t) 14664 14666 (fontified t) 14666 14670 (face font-lock-type-face fontified t) 14670 14672 (fontified t) 14672 14682 (fontified t face font-lock-type-face) 14682 14685 (fontified t) 14685 14691 (fontified t face font-lock-keyword-face) 14691 14692 (fontified t) 14692 14695 (fontified t face font-lock-type-face) 14695 14703 (fontified t) 14703 14707 (fontified t face font-lock-keyword-face) 14707 14708 (fontified t) 14708 14713 (fontified t face font-lock-type-face) 14713 14716 (fontified t) 14716 14724 (fontified t face font-lock-type-face) 14724 14731 (fontified t) 14731 14733 (fontified t face font-lock-keyword-face) 14733 14734 (fontified t) 14734 14738 (fontified t face font-lock-function-name-face) 14738 14740 (fontified t) 14740 14743 (fontified t face font-lock-keyword-face) 14743 14744 (fontified t) 14744 14748 (fontified t face font-lock-keyword-face) 14748 14751 (fontified t) 14751 14752 (fontified t syntax-table #1#) 14752 14753 (fontified t) 14753 14754 (fontified t face font-lock-type-face) 14754 14757 (fontified t face font-lock-type-face) 14757 14758 (fontified t) 14758 14764 (fontified t face font-lock-type-face) 14764 14765 (fontified t) 14765 14769 (fontified t face font-lock-type-face) 14769 14771 (fontified t) 14771 14775 (fontified t face font-lock-type-face) 14775 14778 (fontified t) 14778 14782 (fontified t face font-lock-type-face) 14782 14784 (fontified t) 14784 14789 (fontified t face font-lock-type-face) 14789 14793 (fontified t) 14793 14801 (fontified t) 14801 14806 (fontified t face font-lock-keyword-face) 14806 14807 (fontified t) 14807 14811 (fontified t face font-lock-keyword-face) 14811 14841 (fontified t) 14841 14846 (fontified t) 14846 14848 (fontified t face font-lock-type-face) 14848 14849 (fontified t) 14849 14854 (fontified t face font-lock-type-face) 14854 14856 (fontified t) 14856 14864 (fontified t face font-lock-type-face) 14864 14867 (fontified t) 14867 14868 (fontified t syntax-table #1#) 14868 14869 (fontified t) 14869 14874 (fontified t face font-lock-keyword-face) 14874 14875 (fontified t) 14875 14879 (fontified t face font-lock-keyword-face) 14879 14901 (fontified t) 14901 14917 (fontified t) 14917 14919 (fontified t face font-lock-type-face) 14919 14920 (fontified t) 14920 14925 (fontified t face font-lock-type-face) 14925 14927 (fontified t) 14927 14935 (fontified t face font-lock-type-face) 14935 14938 (fontified t) 14938 14939 (fontified t syntax-table #1#) 14939 14940 (fontified t) 14940 14942 (fontified t face font-lock-type-face) 14942 14943 (fontified t) 14943 14948 (fontified t face font-lock-type-face) 14948 14950 (fontified t) 14950 14958 (fontified t face font-lock-type-face) 14958 14961 (fontified t) 14961 14972 (fontified t) 14972 14977 (fontified t) 14977 14979 (fontified t face font-lock-type-face) 14979 14980 (fontified t) 14980 14985 (fontified t face font-lock-type-face) 14985 14987 (fontified t) 14987 14992 (fontified t face font-lock-type-face) 14992 14998 (fontified t) 14998 14999 (fontified t syntax-table #1#) 14999 15002 (fontified t) 15002 15013 (fontified t) 15013 15022 (fontified t) 15022 15025 (fontified t face font-lock-comment-delimiter-face) 15025 15039 (fontified t face font-lock-comment-face) 15039 15059 (fontified t) 15059 15063 (fontified t face font-lock-keyword-face) 15063 15090 (fontified t) 15090 15094 (fontified t face font-lock-keyword-face) 15094 15110 (fontified t) 15110 15130 (fontified t) 15130 15132 (fontified t face font-lock-type-face) 15132 15133 (fontified t) 15133 15138 (fontified t face font-lock-type-face) 15138 15140 (fontified t) 15140 15145 (fontified t face font-lock-type-face) 15145 15146 (fontified t) 15146 15150 (fontified t face font-lock-type-face) 15150 15151 (fontified t) 15151 15172 (fontified t face font-lock-type-face) 15172 15174 (fontified t) 15174 15175 (fontified t face font-lock-type-face) 15175 15176 (fontified t) 15176 15186 (fontified t face font-lock-type-face) 15186 15187 (fontified t) 15187 15191 (fontified t face font-lock-keyword-face) 15191 15192 (fontified t) 15192 15204 (fontified t) 15204 15210 (fontified t) 15210 15244 (fontified t) 15244 15247 (fontified t face font-lock-type-face) 15247 15256 (fontified t) 15256 15257 (syntax-table #1# fontified t) 15257 15280 (fontified t) 15280 15286 (fontified t face font-lock-preprocessor-face) 15286 15287 (fontified t) 15287 15308 (fontified t face font-lock-string-face) 15308 15318 (fontified t) 15318 15338 (fontified t) 15338 15341 (fontified t face font-lock-type-face) 15341 15342 (fontified t) 15342 15350 (fontified t face font-lock-type-face) 15350 15397 (fontified t) 15397 15399 (fontified t face font-lock-type-face) 15399 15400 (fontified t) 15400 15405 (fontified t face font-lock-type-face) 15405 15407 (fontified t) 15407 15412 (fontified t face font-lock-type-face) 15412 15413 (fontified t) 15413 15416 (fontified t face font-lock-type-face) 15416 15417 (fontified t face font-lock-type-face) 15417 15428 (fontified t) 15428 15429 (syntax-table #1# fontified t) 15429 15432 (fontified t) 15432 15448 (fontified t) 15448 15451 (fontified t face font-lock-comment-delimiter-face) 15451 15465 (fontified t face font-lock-comment-face) 15465 15481 (fontified t) 15481 15485 (fontified t face font-lock-keyword-face) 15485 15512 (fontified t) 15512 15516 (fontified t face font-lock-keyword-face) 15516 15517 (fontified t) 15517 15532 (fontified t) 15532 15548 (fontified t) 15548 15550 (fontified t face font-lock-type-face) 15550 15551 (fontified t) 15551 15554 (fontified t face font-lock-type-face) 15554 15556 (fontified t face font-lock-type-face) 15556 15558 (fontified t) 15558 15563 (fontified t face font-lock-type-face) 15563 15564 (fontified t) 15564 15568 (fontified t face font-lock-type-face) 15568 15569 (fontified t) 15569 15590 (fontified t face font-lock-type-face) 15590 15592 (fontified t) 15592 15593 (fontified t face font-lock-type-face) 15593 15604 (fontified t) 15604 15630 (fontified t) 15630 15632 (fontified t face font-lock-type-face) 15632 15633 (fontified t) 15633 15638 (fontified t face font-lock-type-face) 15638 15640 (fontified t) 15640 15645 (fontified t face font-lock-type-face) 15645 15646 (fontified t) 15646 15650 (fontified t face font-lock-type-face) 15650 15654 (fontified t) 15654 15655 (syntax-table #1# fontified t) 15655 15656 (fontified t) 15656 15658 (fontified t face font-lock-type-face) 15658 15659 (fontified t) 15659 15664 (fontified t face font-lock-type-face) 15664 15666 (fontified t) 15666 15671 (fontified t face font-lock-type-face) 15671 15672 (fontified t) 15672 15676 (fontified t face font-lock-type-face) 15676 15692 (fontified t) 15692 15695 (fontified t face font-lock-type-face) 15695 15704 (fontified t) 15704 15705 (syntax-table #1# fontified t) 15705 15710 (fontified t) 15710 15724 (fontified t) 15724 15730 (face font-lock-preprocessor-face fontified t) 15730 15731 (fontified t) 15731 15752 (face font-lock-string-face fontified t) 15752 15762 (fontified t) 15778 15781 (face font-lock-type-face) 15782 15790 (face font-lock-type-face) 15825 15828 (face font-lock-keyword-face) 15829 15835 (face font-lock-constant-face) 15842 15845 (face font-lock-keyword-face) 15846 15851 (face font-lock-keyword-face) 15861 15880 (face font-lock-doc-face) 15884 15900 (face font-lock-preprocessor-face) 15905 15908 (face font-lock-keyword-face) 15909 15915 (face font-lock-keyword-face) 15916 15924 (face font-lock-type-face) 15931 15932 (face font-lock-keyword-face) 15932 15935 (face font-lock-keyword-face) 15936 15943 (face font-lock-type-face) 15944 15947 (face font-lock-keyword-face) 15948 15956 (face font-lock-type-face) 15967 15969 (face font-lock-keyword-face) 15970 15973 (face font-lock-function-name-face) 15975 15979 (face font-lock-keyword-face) 15981 15982 (face font-lock-variable-name-face) 15985 15988 (face font-lock-keyword-face) 15991 15994 (face font-lock-constant-face) 15996 15999 (face font-lock-constant-face) 16001 16010 (face font-lock-type-face) 16013 16014 (syntax-table #1#) 16017 16020 (face font-lock-constant-face) 16022 16025 (face font-lock-constant-face) 16027 16032 (face font-lock-type-face) 16032 16033 (face font-lock-type-face) 16048 16054 (face rust-builtin-formatting-macro-face) 16058 16067 (face font-lock-string-face) 16067 16068 (face font-lock-string-face syntax-table #3#) 16068 16069 (face font-lock-string-face) 16092 16096 (face font-lock-keyword-face) 16097 16104 (face font-lock-type-face) 16104 16105 (face font-lock-type-face) 16106 16109 (face font-lock-keyword-face) 16110 16118 (face font-lock-type-face) 16129 16131 (face font-lock-keyword-face) 16132 16143 (face font-lock-function-name-face) 16145 16149 (face font-lock-keyword-face) 16152 16153 (syntax-table #1#) 16155 16158 (face font-lock-type-face) 16173 16182 (face font-lock-string-face) 16182 16183 (face font-lock-string-face syntax-table #3#) 16183 16184 (face font-lock-string-face) 16206 16210 (face font-lock-keyword-face) 16211 16218 (face font-lock-type-face) 16219 16222 (face font-lock-keyword-face) 16223 16231 (face font-lock-type-face) 16242 16244 (face font-lock-keyword-face) 16245 16248 (face font-lock-function-name-face) 16250 16254 (face font-lock-keyword-face) 16256 16257 (face font-lock-variable-name-face) 16260 16262 (face font-lock-keyword-face) 16262 16263 (face font-lock-keyword-face) 16264 16273 (face font-lock-type-face) 16276 16277 (syntax-table #1#) 16278 16281 (face font-lock-constant-face) 16283 16289 (face font-lock-type-face) 16304 16307 (face font-lock-keyword-face) 16308 16312 (face font-lock-keyword-face) 16314 16322 (face font-lock-type-face) 16351 16356 (face font-lock-keyword-face) 16357 16361 (face font-lock-keyword-face) 16380 16385 (face font-lock-type-face) 16387 16388 (syntax-table #1#) 16389 16397 (face font-lock-string-face) 16415 16417 (face font-lock-type-face) 16419 16420 (syntax-table #1#) 16421 16426 (face font-lock-string-face) 16444 16448 (face font-lock-type-face) 16450 16451 (syntax-table #1#) 16452 16459 (face font-lock-string-face) 16477 16482 (face font-lock-type-face) 16484 16485 (syntax-table #1#) 16486 16494 (face font-lock-string-face) 16512 16519 (face font-lock-type-face) 16521 16522 (syntax-table #1#) 16523 16526 (face font-lock-string-face) 16564 16583 (face font-lock-doc-face) 16587 16626 (face font-lock-preprocessor-face) 16631 16634 (face font-lock-keyword-face) 16635 16639 (face font-lock-keyword-face) 16640 16648 (face font-lock-type-face) 16659 16680 (face font-lock-doc-face) 16688 16693 (face font-lock-type-face) 16703 16722 (face font-lock-doc-face) 16730 16732 (face font-lock-type-face) 16742 16763 (face font-lock-doc-face) 16771 16775 (face font-lock-type-face) 16785 16792 (face font-lock-doc-face) 16792 16809 (face font-lock-doc-face) 16817 16822 (face font-lock-type-face) 16832 16850 (face font-lock-doc-face) 16858 16865 (face font-lock-type-face) 16878 16902 (face font-lock-doc-face) 16906 16909 (face font-lock-keyword-face) 16910 16915 (face font-lock-keyword-face) 16916 16925 (face font-lock-type-face) 16936 16961 (face font-lock-doc-face) 16969 16971 (face font-lock-keyword-face) 16972 16981 (face font-lock-function-name-face) 16983 16987 (face font-lock-keyword-face) 16989 16991 (face font-lock-variable-name-face) 16994 16997 (face font-lock-keyword-face) 16998 17007 (face font-lock-type-face) 17009 17013 (face font-lock-variable-name-face) 17016 17024 (face font-lock-type-face) 17027 17028 (syntax-table #1#) 17029 17032 (face font-lock-constant-face) 17034 17040 (face font-lock-type-face) 17055 17057 (face font-lock-type-face) 17083 17127 (face font-lock-doc-face) 17131 17170 (face font-lock-preprocessor-face) 17175 17178 (face font-lock-keyword-face) 17179 17185 (face font-lock-keyword-face) 17186 17196 (face font-lock-type-face) 17198 17199 (face font-lock-variable-name-face) 17201 17202 (face font-lock-variable-name-face) 17205 17206 (face font-lock-variable-name-face) 17210 17211 (face font-lock-variable-name-face) 17212 17213 (face font-lock-type-face) 17221 17225 (face font-lock-keyword-face) 17227 17228 (face font-lock-variable-name-face) 17230 17231 (face font-lock-type-face) 17233 17243 (face font-lock-type-face) 17245 17246 (face font-lock-variable-name-face) 17248 17249 (face font-lock-type-face) 17255 17260 (face font-lock-keyword-face) 17269 17270 (face font-lock-variable-name-face) 17272 17281 (face font-lock-type-face) 17285 17286 (face font-lock-variable-name-face) 17302 17305 (face font-lock-keyword-face) 17306 17308 (face font-lock-keyword-face) 17309 17315 (face font-lock-function-name-face) 17316 17321 (face font-lock-variable-name-face) 17325 17326 (face font-lock-variable-name-face) 17327 17328 (face font-lock-type-face) 17331 17332 (syntax-table #1#) 17333 17339 (face font-lock-type-face) 17340 17346 (face font-lock-type-face) 17348 17356 (face font-lock-type-face) 17372 17375 (face font-lock-keyword-face) 17376 17379 (face font-lock-keyword-face) 17380 17383 (face font-lock-variable-name-face) 17386 17392 (face font-lock-type-face) 17427 17439 (face font-lock-preprocessor-face) 17440 17444 (face font-lock-string-face) 17446 17456 (face font-lock-type-face) 17495 17503 (face font-lock-type-face) 17504 17505 (face rust-question-mark-face) 17552 17554 (face font-lock-type-face) 17581 17585 (face font-lock-keyword-face) 17587 17588 (face font-lock-variable-name-face) 17590 17591 (face font-lock-type-face) 17593 17600 (face font-lock-type-face) 17601 17604 (face font-lock-keyword-face) 17605 17615 (face font-lock-type-face) 17617 17618 (face font-lock-variable-name-face) 17620 17621 (face font-lock-type-face) 17627 17632 (face font-lock-keyword-face) 17641 17642 (face font-lock-variable-name-face) 17644 17653 (face font-lock-type-face) 17669 17671 (face font-lock-keyword-face) 17672 17675 (face font-lock-function-name-face) 17677 17681 (face font-lock-keyword-face) 17683 17684 (face font-lock-variable-name-face) 17687 17690 (face font-lock-keyword-face) 17691 17700 (face font-lock-type-face) 17703 17704 (syntax-table #1#) 17705 17708 (face font-lock-constant-face) 17710 17716 (face font-lock-type-face) 17731 17735 (face font-lock-keyword-face) 17752 17760 (face font-lock-type-face) 17762 17769 (face font-lock-type-face) 17770 17771 (face rust-question-mark-face) 17785 17788 (face font-lock-comment-delimiter-face) 17788 17848 (face font-lock-comment-face) 17860 17864 (face font-lock-keyword-face) 17881 17889 (face font-lock-type-face) 17891 17896 (face font-lock-type-face) 17897 17898 (face rust-question-mark-face) 17912 17915 (face font-lock-comment-delimiter-face) 17915 17972 (face font-lock-comment-face) 17984 17987 (face font-lock-comment-delimiter-face) 17987 18041 (face font-lock-comment-face) 18053 18056 (face font-lock-comment-delimiter-face) 18056 18077 (face font-lock-comment-face) 18089 18093 (face font-lock-keyword-face) 18110 18118 (face font-lock-type-face) 18120 18124 (face font-lock-type-face) 18125 18126 (face rust-question-mark-face) 18140 18144 (face font-lock-keyword-face) 18161 18169 (face font-lock-type-face) 18171 18173 (face font-lock-type-face) 18174 18175 (face rust-question-mark-face) 18189 18193 (face font-lock-keyword-face) 18210 18218 (face font-lock-type-face) 18220 18225 (face font-lock-type-face) 18226 18227 (face rust-question-mark-face) 18254 18255 (syntax-table #2# face font-lock-string-face) 18255 18257 (face font-lock-string-face) 18257 18258 (syntax-table #2# face font-lock-string-face) 18281 18320 (face font-lock-preprocessor-face) 18325 18328 (face font-lock-keyword-face) 18329 18335 (face font-lock-keyword-face) 18336 18356 (face font-lock-type-face) 18357 18360 (face font-lock-keyword-face) 18361 18366 (face font-lock-keyword-face) 18368 18371 (face font-lock-type-face) 18372 18381 (face font-lock-type-face) 18384 18388 (face font-lock-type-face) 18397 18400 (face font-lock-keyword-face) 18400 18401 (face font-lock-keyword-face) 18402 18411 (face font-lock-type-face) 18412 18415 (face font-lock-keyword-face) 18416 18436 (face font-lock-type-face) 18447 18449 (face font-lock-keyword-face) 18450 18459 (face font-lock-function-name-face) 18461 18465 (face font-lock-keyword-face) 18467 18468 (face font-lock-variable-name-face) 18471 18474 (face font-lock-keyword-face) 18475 18484 (face font-lock-type-face) 18486 18487 (face font-lock-variable-name-face) 18490 18498 (face font-lock-type-face) 18501 18502 (syntax-table #1#) 18503 18506 (face font-lock-constant-face) 18508 18514 (face font-lock-type-face) 18529 18533 (face font-lock-keyword-face) 18573 18612 (face font-lock-preprocessor-face) 18617 18620 (face font-lock-keyword-face) 18621 18625 (face font-lock-keyword-face) 18626 18647 (face font-lock-type-face) 18648 18649 (face font-lock-type-face) 18651 18652 (face font-lock-type-face) 18664 18665 (face font-lock-type-face) 18666 18667 (face font-lock-type-face) 18678 18679 (face font-lock-type-face) 18680 18681 (face font-lock-type-face) 18695 18699 (face font-lock-keyword-face) 18700 18701 (face font-lock-type-face) 18703 18704 (face font-lock-type-face) 18706 18715 (face font-lock-type-face) 18716 18719 (face font-lock-keyword-face) 18720 18741 (face font-lock-type-face) 18742 18743 (face font-lock-type-face) 18745 18746 (face font-lock-type-face) 18752 18757 (face font-lock-keyword-face) 18766 18767 (face font-lock-variable-name-face) 18769 18778 (face font-lock-type-face) 18788 18789 (face font-lock-variable-name-face) 18791 18800 (face font-lock-type-face) 18816 18818 (face font-lock-keyword-face) 18819 18828 (face font-lock-function-name-face) 18830 18834 (face font-lock-keyword-face) 18836 18837 (face font-lock-variable-name-face) 18840 18843 (face font-lock-keyword-face) 18844 18853 (face font-lock-type-face) 18855 18856 (face font-lock-variable-name-face) 18859 18867 (face font-lock-type-face) 18870 18871 (syntax-table #1#) 18872 18875 (face font-lock-constant-face) 18877 18883 (face font-lock-type-face) 18898 18903 (face font-lock-keyword-face) 18904 18908 (face font-lock-keyword-face) 18927 18939 (face font-lock-type-face) 18939 18948 (face font-lock-type-face) 18950 18951 (face font-lock-type-face) 18956 18957 (syntax-table #1#) 18993 19014 (face font-lock-type-face) 19016 19017 (face font-lock-type-face) 19022 19023 (syntax-table #1#)) . 1) (undo-tree-id396 . -15187) (undo-tree-id397 . -14471) (undo-tree-id398 . 4604) (undo-tree-id399 . -14471) (undo-tree-id400 . -14471) (undo-tree-id401 . -12813) (undo-tree-id402 . -13461) (undo-tree-id403 . 3871) (undo-tree-id404 . -13461) (undo-tree-id405 . -14673) (undo-tree-id406 . -14673) (undo-tree-id407 . -15176) (undo-tree-id408 . -15176) (undo-tree-id409 . -2677) (undo-tree-id410 . -15187) (undo-tree-id411 . -15186) (undo-tree-id412 . -14118) (undo-tree-id413 . -2677) (undo-tree-id414 . -15187) (undo-tree-id415 . -15187) (undo-tree-id416 . -15187) (undo-tree-id417 . -14118) (undo-tree-id418 . -15176) (undo-tree-id419 . -15186) (undo-tree-id420 . -2324) (undo-tree-id421 . -2327) (undo-tree-id422 . -2324) (undo-tree-id423 . -2352) (undo-tree-id424 . -15176) (undo-tree-id425 . -15188) (undo-tree-id426 . -15201) (undo-tree-id427 . -15202) (undo-tree-id428 . -14118) (undo-tree-id429 . -15201) (undo-tree-id430 . -14118) (undo-tree-id431 . -15201) (undo-tree-id432 . -15181) (undo-tree-id433 . -15181) (undo-tree-id434 . -15182) (undo-tree-id435 . -14118) (undo-tree-id436 . -14672) (undo-tree-id437 . -14682) (undo-tree-id438 . -15176) (undo-tree-id439 . -15186) (undo-tree-id440 . -15181) (undo-tree-id441 . -15181) (undo-tree-id442 . -14118) 15182) nil (23732 64201 317884 652000) 0 nil]) nil nil (23732 64156 350229 830000) 0 nil] #4# 92380 127 nil)