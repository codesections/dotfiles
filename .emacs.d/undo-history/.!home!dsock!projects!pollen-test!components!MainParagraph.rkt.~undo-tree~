"19988531bce7cc916ef95f0c9fc98f97a462e2bb"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#2=[nil nil ((242 . 248)) nil (23730 11736 781474 252000) 0 nil]) ((145 . 147) (t 23728 53767 783017 92000)) nil (23730 11736 781479 966000) 0 nil]) ((#("         pollen/tag
" 0 19 (fontified t) 19 20 (fontified t)) . 31) (undo-tree-id73 . -20) (undo-tree-id74 . -20) (undo-tree-id75 . -20) (undo-tree-id76 . -20) (undo-tree-id77 . -20) (undo-tree-id78 . -20) (undo-tree-id79 . -20) (undo-tree-id80 . -20) (undo-tree-id81 . -20) (undo-tree-id82 . -20) (undo-tree-id83 . -15) (undo-tree-id84 . -15) 46 (t 23728 53734 891901 353000)) nil (23728 53767 694711 871000) 0 nil]) ((#("(define (styled tag name)
  (default-tag-function tag #:class (symbol->string name)))" 0 1 (fontified t) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t) 9 15 (fontified t face font-lock-function-name-face) 15 16 (fontified t) 16 18 (fontified t face font-lock-builtin-face) 18 19 (fontified t face font-lock-builtin-face) 19 24 (fontified t) 24 26 (fontified t) 26 28 (fontified t) 28 29 (fontified t) 29 49 (fontified t) 49 50 (fontified t) 50 53 (fontified t face font-lock-variable-name-face) 53 54 (fontified t) 54 61 (fontified t face racket-keyword-argument-face) 61 62 (fontified t) 62 63 (fontified t) 63 77 (fontified t face font-lock-builtin-face) 77 82 (fontified t) 82 83 (fontified t) 83 84 (fontified t) 84 85 (fontified t)) . 98) (undo-tree-id71 . -85) (undo-tree-id72 . -85) (t 23728 53663 982126 635000)) nil (23728 53734 802847 529000) 0 nil]) ((nil rear-nonsticky nil 97 . 98) (#("
" 0 1 (fontified nil)) . -183) (97 . 184) 73) nil (23728 53663 897615 630000) 0 nil]) ((#("(define (styled tag name)
  (default-tag-function tag #:class (symbol->string name)))
" 0 1 (fontified t) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t) 9 15 (fontified t face font-lock-function-name-face) 15 16 (fontified t) 16 18 (fontified t face font-lock-builtin-face) 18 19 (fontified t face font-lock-builtin-face) 19 24 (fontified t) 24 26 (fontified t) 26 28 (fontified t) 28 29 (fontified t) 29 49 (fontified t) 49 50 (fontified t) 50 53 (fontified t face font-lock-variable-name-face) 53 54 (fontified t) 54 61 (fontified t face racket-keyword-argument-face) 61 62 (fontified t) 62 63 (fontified t) 63 77 (fontified t face font-lock-builtin-face) 77 82 (fontified t) 82 83 (fontified t) 83 84 (fontified t) 84 85 (fontified t) 85 86 (fontified t)) . 460) (undo-tree-id52 . -50) (undo-tree-id53 . -24) (undo-tree-id54 . -50) (undo-tree-id55 . 5) (undo-tree-id56 . 5) (undo-tree-id57 . -50) (undo-tree-id58 . -50) (undo-tree-id59 . 62) (undo-tree-id60 . -8) (undo-tree-id61 . -9) (undo-tree-id62 . -86) (undo-tree-id63 . 62) (undo-tree-id64 . 62) (undo-tree-id65 . -24) (undo-tree-id66 . -50) (undo-tree-id67 . -8) (undo-tree-id68 . -9) (undo-tree-id69 . 36) (undo-tree-id70 . 62) 510 (t 23728 53650 975525 530000)) nil (23728 53663 897653 880000) 0 nil]) ((359 . 361) (348 . 359) (#("P" 0 1 (fontified t face racket-selfeval-face)) . -348) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("a" 0 1 (fontified t face racket-selfeval-face)) . -349) (undo-tree-id18 . -1) (undo-tree-id19 . -1) 350 (347 . 350) (#("p" 0 1 (fontified t)) . -347) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("M" 0 1 (fontified t)) . -348) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (#("a" 0 1 (fontified t)) . -349) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 350 (346 . 350) (344 . 346) (#("[]" 0 1 (fontified t) 1 2 (fontified t)) . 344) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 345 (344 . 346) (#("[" 0 1 (fontified nil)) . -344) (344 . 345) (337 . 344) (#("default-tag-function 'p #:class \"MainParagraph\"" 0 21 (fontified t) 21 23 (fontified t face racket-selfeval-face) 23 24 (fontified t) 24 31 (fontified t face racket-keyword-argument-face) 31 32 (fontified t) 32 38 (fontified t face font-lock-string-face) 38 46 (fontified t face font-lock-string-face) 46 47 (fontified t face font-lock-string-face)) . 337) (undo-tree-id28 . 2) (undo-tree-id29 . 2) (undo-tree-id30 . -45) (undo-tree-id31 . -45) (undo-tree-id32 . -45) (undo-tree-id33 . 38) (undo-tree-id34 . 39) (undo-tree-id35 . 38) (undo-tree-id36 . 40) (undo-tree-id37 . 39) (undo-tree-id38 . 41) (undo-tree-id39 . 40) (undo-tree-id40 . 42) (undo-tree-id41 . 41) (undo-tree-id42 . 43) (undo-tree-id43 . 42) (undo-tree-id44 . 44) (undo-tree-id45 . 43) (undo-tree-id46 . 45) (undo-tree-id47 . 44) (undo-tree-id48 . 46) (undo-tree-id49 . 45) (undo-tree-id50 . 47) (undo-tree-id51 . 46) (t 23728 53624 802324 158000)) nil (23728 53650 960680 155000) 0 nil]) ((512 . 532) (#("default-t" 0 9 (fontified t)) . -512) (undo-tree-id0 . -9) (undo-tree-id1 . -9) (undo-tree-id2 . 9) (undo-tree-id3 . 8) (undo-tree-id4 . 7) (undo-tree-id5 . 6) (undo-tree-id6 . 5) (undo-tree-id7 . 4) (undo-tree-id8 . 3) (undo-tree-id9 . -7) (undo-tree-id10 . 2) (undo-tree-id11 . 1) 521 (516 . 521) (512 . 516) (#("-tag-funtion" 0 12 (fontified t)) . 512) (undo-tree-id12 . 12) (undo-tree-id13 . -12) (undo-tree-id14 . 12)) nil (23728 53624 718005 895000) 0 nil]) ((#("default" 0 7 (fontified t)) . 512) (t 23728 53589 915833 456000)) nil (23728 53624 718024 209000) 0 nil]) ((567 . 568) 563) nil (23728 53589 899033 913000) 0 nil]) ((560 . 564) (#("a" 0 1 (fontified t)) . -560) (undo-tree-id411 . -1) (undo-tree-id412 . -1) (undo-tree-id413 . 1) 561 (559 . 561) (545 . 559) (#("sym" 0 3 (fontified t)) . -545) (undo-tree-id414 . -3) (undo-tree-id415 . -3) (undo-tree-id416 . 1) 548 (545 . 548) (#("s" 0 1 (fontified t)) . -545) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . 1) (#("t" 0 1 (fontified t)) . -546) (undo-tree-id420 . -1) (undo-tree-id421 . -1) (#("r" 0 1 (fontified t)) . -547) (undo-tree-id422 . -1) (undo-tree-id423 . -1) (#("i" 0 1 (fontified t)) . -548) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (#("n" 0 1 (fontified t)) . -549) (undo-tree-id426 . -1) (undo-tree-id427 . -1) (#("g" 0 1 (fontified t face font-lock-builtin-face)) . -550) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (#("-" 0 1 (fontified t)) . -551) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#(">" 0 1 (fontified t)) . -552) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#("s" 0 1 (fontified t)) . -553) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (#("y" 0 1 (fontified t)) . -554) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (#("m" 0 1 (fontified t)) . -555) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (#("b" 0 1 (fontified t)) . -556) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("o" 0 1 (fontified t)) . -557) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (#("l" 0 1 (fontified t face font-lock-builtin-face)) . -558) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (#(" " 0 1 (fontified t)) . -559) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . 1) 560 (559 . 560) (545 . 559) (#("string->sy" 0 10 (fontified t)) . -545) (undo-tree-id449 . -10) (undo-tree-id450 . -10) (undo-tree-id451 . 1) 555 (554 . 555) (#("o" 0 1 (fontified t)) . -554) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#("m" 0 1 (fontified t)) . -555) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (#("e" 0 1 (fontified t)) . -556) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (#("-" 0 1 (fontified t)) . -557) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (#("s" 0 1 (fontified t)) . -558) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (#("y" 0 1 (fontified t)) . -559) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (#("s" 0 1 (fontified t)) . -560) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (#("t" 0 1 (fontified t)) . -561) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (#("e" 0 1 (fontified t)) . -562) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (#("m" 0 1 (fontified t)) . -563) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (#("-" 0 1 (fontified t)) . -564) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (#("p" 0 1 (fontified t)) . -565) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (#("a" 0 1 (fontified t)) . -566) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (#("t" 0 1 (fontified t)) . -567) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (#("h" 0 1 (fontified t face font-lock-builtin-face)) . -568) (undo-tree-id480 . -1) (undo-tree-id481 . -1) 569 (545 . 569) (#("string->s" 0 9 (fontified t)) . -545) (undo-tree-id482 . -9) (undo-tree-id483 . -9) 554 (#("n" 0 1 (fontified nil)) . -554) (554 . 555) (551 . 554) (#("_" 0 1 (fontified t)) . -551) (undo-tree-id484 . -1) (undo-tree-id485 . -1) 552 (545 . 552) (544 . 546) (#("(" 0 1 (fontified nil)) . -544) (539 . 545) (537 . 539) (#("#" 0 1 (fontified t)) . -537) (undo-tree-id486 . -1) (undo-tree-id487 . -1) 538 (536 . 538) (#(":" 0 1 (fontified t face font-lock-builtin-face)) . -536) (undo-tree-id488 . -1) (undo-tree-id489 . -1) 537 (535 . 537) (532 . 535) (#("'" 0 1 (fontified t)) . -532) (undo-tree-id490 . -1) (undo-tree-id491 . -1) 533 (524 . 533) (#("g" 0 1 (fontified t)) . -524) (undo-tree-id492 . -1) (undo-tree-id493 . -1) 525 (519 . 525) (512 . 519) (511 . 513) (#("(" 0 1 (fontified nil)) . -511) (511 . 512) (509 . 511) (#(" " 0 1 (fontified nil)) . 508) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (509 . 510) (508 . 509) (#(")" 0 1 (fontified nil)) . 508) (507 . 508) (#(" " 0 1 (fontified nil)) . -507) (507 . 508) (#(")" 0 1 (fontified nil)) . -507) (507 . 508) (502 . 507) (501 . 502) (#("t" 0 1 (fontified t)) . -501) (undo-tree-id496 . -1) (undo-tree-id497 . -1) 502 (499 . 502) (492 . 499) (491 . 493) (#("(" 0 1 (fontified nil)) . -491) (491 . 492) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -491) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -492) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (#("y" 0 1 (fontified t face font-lock-variable-name-face)) . -493) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -494) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -495) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -496) (undo-tree-id508 . -1) (undo-tree-id509 . -1) 497 (487 . 497) (484 . 487) (483 . 485) (#("(" 0 1 (fontified nil)) . -483) (483 . 484) (482 . 483) 482) nil (23728 53589 899452 9000) 0 nil]) ((#("
" 0 1 (fontified t rear-nonsticky t)) . 272) (undo-tree-id510 . 1) (undo-tree-id511 . -1) (undo-tree-id512 . 1) (undo-tree-id513 . 1) (undo-tree-id514 . 1) (undo-tree-id515 . 1) (undo-tree-id516 . 1) (undo-tree-id517 . 1) (undo-tree-id518 . 1) (undo-tree-id519 . 1) (undo-tree-id520 . 1) (undo-tree-id521 . 1) (undo-tree-id522 . 1) (undo-tree-id523 . 1) (undo-tree-id524 . 1) (undo-tree-id525 . 1) (undo-tree-id526 . 1) (undo-tree-id527 . 1) (undo-tree-id528 . 1) (undo-tree-id529 . 1) (undo-tree-id530 . 1) (undo-tree-id531 . 1) (undo-tree-id532 . 1) (undo-tree-id533 . 1) (undo-tree-id534 . 1) (undo-tree-id535 . 1) (undo-tree-id536 . 1) (undo-tree-id537 . 1) (undo-tree-id538 . 1) (undo-tree-id539 . 1) (undo-tree-id540 . 1) (undo-tree-id541 . 1) (undo-tree-id542 . 1) (undo-tree-id543 . 1) (undo-tree-id544 . 1) (undo-tree-id545 . 1) (undo-tree-id546 . 1) (undo-tree-id547 . 1) (undo-tree-id548 . 1) (undo-tree-id549 . 1) (undo-tree-id550 . 1) (undo-tree-id551 . 1) (undo-tree-id552 . 1) (undo-tree-id553 . 1) (undo-tree-id554 . 1) (undo-tree-id555 . 1) (undo-tree-id556 . 1) (undo-tree-id557 . 1) (undo-tree-id558 . 1) (undo-tree-id559 . 1) (undo-tree-id560 . 1)) nil (23728 53589 899680 383000) 0 nil]) ((#(";(define (MainParagraph . text)
;  (case (current-poly-target)
;    [(html) `(p ((class \"MainParagraph\")) ,@text)]
;    [else `(\"\\n\\n\" ,@text)]))
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 2 (fontified t face font-lock-comment-face) 2 8 (fontified t face font-lock-comment-face) 8 9 (fontified t face font-lock-comment-face) 9 10 (fontified t face font-lock-comment-face) 10 23 (fontified t face font-lock-comment-face) 23 30 (fontified t face font-lock-comment-face) 30 31 (fontified t face font-lock-comment-face) 31 32 (fontified t face font-lock-comment-face) 32 33 (fontified t face font-lock-comment-delimiter-face) 33 35 (fontified t face font-lock-comment-delimiter-face) 35 36 (fontified t face font-lock-comment-face) 36 40 (fontified t face font-lock-comment-face) 40 63 (fontified t face font-lock-comment-face) 63 64 (fontified t face font-lock-comment-delimiter-face) 64 68 (fontified t face font-lock-comment-delimiter-face) 68 76 (fontified t face font-lock-comment-face) 76 77 (fontified t face font-lock-comment-face) 77 78 (fontified t face font-lock-comment-face) 78 79 (fontified t face font-lock-comment-face) 79 80 (fontified t face font-lock-comment-face) 80 81 (fontified t face font-lock-comment-face) 81 82 (fontified t face font-lock-comment-face) 82 87 (fontified t face font-lock-comment-face) 87 88 (fontified t face font-lock-comment-face) 88 99 (fontified t face font-lock-comment-face) 99 102 (fontified t face font-lock-comment-face) 102 103 (fontified t face font-lock-comment-face) 103 104 (fontified t face font-lock-comment-face) 104 105 (fontified t face font-lock-comment-face) 105 107 (fontified t face font-lock-comment-face) 107 108 (fontified t face font-lock-comment-face) 108 112 (fontified t face font-lock-comment-face) 112 113 (fontified t face font-lock-comment-face) 113 115 (fontified t face font-lock-comment-face) 115 116 (fontified t face font-lock-comment-delimiter-face) 116 120 (fontified t face font-lock-comment-delimiter-face) 120 121 (fontified t face font-lock-comment-face) 121 125 (fontified t face font-lock-comment-face) 125 128 (fontified t face font-lock-comment-face) 128 134 (fontified t face font-lock-comment-face) 134 141 (fontified t face font-lock-comment-face) 141 145 (fontified t face font-lock-comment-face) 145 146 (fontified t face font-lock-comment-face)) . 272) (undo-tree-id561 . -119) (undo-tree-id562 . -119) (undo-tree-id563 . -4) (undo-tree-id564 . 38) (undo-tree-id565 . 38) (undo-tree-id566 . 38) (undo-tree-id567 . 38) (undo-tree-id568 . 38) (undo-tree-id569 . 38) (undo-tree-id570 . 38) (undo-tree-id571 . 38) (undo-tree-id572 . 74) (undo-tree-id573 . 22) (undo-tree-id574 . 74) (undo-tree-id575 . 74) (undo-tree-id576 . -72) (undo-tree-id577 . 74) (undo-tree-id578 . 74) (undo-tree-id579 . 74) (undo-tree-id580 . 74) (undo-tree-id581 . -72) (undo-tree-id582 . -76) (undo-tree-id583 . -76) (undo-tree-id584 . 33) (undo-tree-id585 . 33) (undo-tree-id586 . 33) (undo-tree-id587 . 33) (undo-tree-id588 . -76) (undo-tree-id589 . 33) (undo-tree-id590 . 33) (undo-tree-id591 . -76) (undo-tree-id592 . 33) (undo-tree-id593 . 33) (undo-tree-id594 . 33) (undo-tree-id595 . 33) (undo-tree-id596 . 33) (undo-tree-id597 . 33) (undo-tree-id598 . 33) (undo-tree-id599 . 33) (undo-tree-id600 . 33) (undo-tree-id601 . 33) (undo-tree-id602 . -76) (undo-tree-id603 . 33) (undo-tree-id604 . 33) (undo-tree-id605 . -76) (undo-tree-id606 . 33) (undo-tree-id607 . 33) (undo-tree-id608 . -76) (undo-tree-id609 . 33) (undo-tree-id610 . 33) (undo-tree-id611 . -22) (undo-tree-id612 . 124) (undo-tree-id613 . 5) (undo-tree-id614 . 5) (undo-tree-id615 . -134) (undo-tree-id616 . 65) (undo-tree-id617 . 65) (undo-tree-id618 . -81) (undo-tree-id619 . -80) (undo-tree-id620 . -80) (undo-tree-id621 . 64) (undo-tree-id622 . 64) (undo-tree-id623 . -80) (undo-tree-id624 . 38) (undo-tree-id625 . 38) (undo-tree-id626 . -80) (undo-tree-id627 . -107) (undo-tree-id628 . -107) (undo-tree-id629 . 116) (undo-tree-id630 . 85) (undo-tree-id631 . -30) (undo-tree-id632 . -30) (undo-tree-id633 . -30) (undo-tree-id634 . -75) (undo-tree-id635 . -75) (undo-tree-id636 . -13) (undo-tree-id637 . -4) (undo-tree-id638 . -4) (undo-tree-id639 . -4) (undo-tree-id640 . -119) 276) nil (23728 53589 899941 681000) 0 nil]) ((569 . 570) (538 . 539) (#("]" 0 1 (fontified nil)) . 568) (#("[" 0 1 (fontified t)) . -538) (undo-tree-id641 . -1) (undo-tree-id642 . -1) 539) nil (23728 53589 899981 718000) 0 nil]) ((532 . 533) (475 . 476) (#("]" 0 1 (fontified nil)) . 531) (undo-tree-id643 . 1) (#("[" 0 1 (fontified t)) . 475) (undo-tree-id644 . 1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) 482) nil (23728 53589 900018 884000) 0 nil] [nil nil ((533 . 535) (475 . 477) (#("]" 0 1 (fontified nil)) . 531) (undo-tree-id401 . 1) (#("[" 0 1 (fontified t)) . 475) (undo-tree-id402 . -1) 482) ((475 . 476) (531 . 532) (#("( " 0 2 (fontified nil)) . 475) (undo-tree-id403 . 2) (undo-tree-id404 . 2) (undo-tree-id405 . 2) (undo-tree-id406 . -1) (undo-tree-id407 . 1) (#(" )" 0 2 (fontified t)) . 533) (undo-tree-id408 . -1) (undo-tree-id409 . 1) (undo-tree-id410 . -2)) (23728 49864 595324 272000) 0 nil]) ((545 . 546) (#("lambda" 0 6 (fontified t face font-lock-keyword-face)) . 545) (t 23728 49765 694679 794000)) nil (23728 49864 595830 24000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 556) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (undo-tree-id395 . 1) (undo-tree-id396 . 1) (undo-tree-id397 . 1) (#("(" 0 1 (fontified t)) . 552) (undo-tree-id398 . -1) (undo-tree-id399 . -1) (undo-tree-id400 . -1) 554 (t 23728 49690 478395 892000)) nil (23728 49765 669694 133000) 0 nil]) ((522 . 530) (517 . 522) (516 . 518) (#("\"" 0 1 (fontified nil)) . -516) (516 . 517)) nil (23728 49690 458011 20000) 0 nil]) ((#("MainParpgraph" 0 13 (fontified t)) . 516) (undo-tree-id369 . 1) (undo-tree-id370 . 1) (undo-tree-id371 . 1) (undo-tree-id372 . 1) (undo-tree-id373 . 1) (undo-tree-id374 . 1) (undo-tree-id375 . 1) (undo-tree-id376 . 1) (undo-tree-id377 . -12) (undo-tree-id378 . -4) (undo-tree-id379 . -4) (undo-tree-id380 . 4) (undo-tree-id381 . 3) (undo-tree-id382 . 4) (undo-tree-id383 . 5) (undo-tree-id384 . 4) (undo-tree-id385 . 6) (undo-tree-id386 . 5) (undo-tree-id387 . 7) (undo-tree-id388 . 6) (undo-tree-id389 . 8) (undo-tree-id390 . 7) (undo-tree-id391 . 9) (undo-tree-id392 . 8) (t 23728 49623 12073 434000)) nil (23728 49690 458113 62000) 0 nil] [nil nil ((#("MainParpgraph" 0 13 (fontified t)) . 516) (undo-tree-id356 . 1) (undo-tree-id357 . 1) (undo-tree-id358 . 1) (undo-tree-id359 . 1) (undo-tree-id360 . 1) (undo-tree-id361 . 1) (undo-tree-id362 . 1) (undo-tree-id363 . 1) (undo-tree-id364 . -12) (undo-tree-id365 . -9) (undo-tree-id366 . -9) (undo-tree-id367 . 4) (undo-tree-id368 . 3) 525 (t 23728 49623 12073 434000)) ((516 . 529)) (23728 49679 228542 147000) 0 nil]) ((523 . 529) (#("a" 0 1 (fontified t)) . -523) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . 1) 524 (516 . 524) (508 . 516) (#(":" 0 1 (fontified t face font-lock-builtin-face)) . -508) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . 1) 509 (507 . 509) (t 23728 49554 962421 515000)) nil (23728 49679 229272 863000) 0 nil]) ((#(". " 0 1 (fontified t) 1 2 (fontified t)) . 529) (undo-tree-id309 . 2)) nil (23728 49554 943124 226000) 0 nil]) ((535 . 536) (#(")" 0 1 (fontified t)) . -530) (530 . 531) (#(")" 0 1 (fontified t)) . -529) (528 . 530) (#("(" 0 1 (fontified nil)) . -528) (528 . 529)) nil (23728 49554 943142 807000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 534) (undo-tree-id310 . 1) (#("(" 0 1 (fontified t)) . -521) (undo-tree-id311 . -1) (undo-tree-id312 . -1) 522) nil (23728 49554 943163 935000) 0 nil]) ((528 . 535) (#("." 0 1 (fontified t)) . -528) (undo-tree-id313 . -1) (undo-tree-id314 . -1) 529 (528 . 529)) nil (23728 49554 943177 961000) 0 nil]) ((#("l" 0 1 (fontified t)) . -522) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (#("l" 0 1 (fontified t)) . -523) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (#("l" 0 1 (fontified t)) . -524) (undo-tree-id319 . -1) (undo-tree-id320 . -1) 525 (522 . 525) (528 . 529) (#(")" 0 1 (fontified t)) . -522) (521 . 523) (#("(" 0 1 (fontified nil)) . -521) (521 . 522) (#("i" 0 1 (fontified t)) . -521) (undo-tree-id321 . -1) (undo-tree-id322 . -1) 522 (521 . 522)) nil (23728 49554 943216 127000) 0 nil]) ((#("." 0 1 (fontified t)) . -528) (undo-tree-id323 . -1) (undo-tree-id324 . -1) 529 (528 . 529) (525 . 528) (#("s" 0 1 (fontified t)) . -525) (undo-tree-id325 . -1) (undo-tree-id326 . -1) 526 (521 . 526) (537 . 538) (#(")" 0 1 (fontified t)) . -521) (520 . 522) (#("(" 0 1 (fontified nil)) . -520) (520 . 521)) nil (23728 49554 943256 538000) 0 nil]) ((506 . 507) (504 . 506) (484 . 504) (#("default-tag-func" 0 16 (fontified t)) . -484) (undo-tree-id327 . -16) (undo-tree-id328 . -16) 500 (494 . 500) (#("b" 0 1 (fontified t)) . -494) (undo-tree-id329 . -1) (undo-tree-id330 . -1) 495 (484 . 495) (483 . 485) (#("(" 0 1 (fontified nil)) . -483) (483 . 484) (#("`(p ((class \"MainParagraph\")) ,@text)" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 11 (fontified t face font-lock-builtin-face) 11 12 (fontified t) 12 23 (fontified t face font-lock-string-face) 23 26 (fontified t face font-lock-string-face) 26 27 (fontified t face font-lock-string-face) 27 28 (fontified t) 28 29 (fontified t) 29 31 (fontified t) 31 32 (fontified t) 32 36 (fontified t) 36 37 (fontified t)) . 483)) nil (23728 49554 943287 497000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 522)) nil (23728 49554 943297 90000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 471)) nil (23728 49554 943301 197000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 441)) nil (23728 49554 943305 475000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 419)) nil (23728 49554 943309 757000) 0 nil]) ((#(" . text" 0 7 (fontified t face font-lock-comment-face)) . 441)) nil (23728 49554 943313 651000) 0 nil]) ((#(" )" 0 2 (fontified nil face font-lock-comment-face)) . 448) (#("( " 0 2 (fontified t face font-lock-comment-face)) . 428) (undo-tree-id331 . -1) (undo-tree-id332 . -1) 429) nil (23728 49554 943325 100000) 0 nil]) ((450 . 452) (428 . 430) (#(")" 0 1 (fontified nil face font-lock-comment-face)) . 448) (#("(" 0 1 (fontified t face font-lock-comment-face)) . -428) (undo-tree-id333 . -1) (undo-tree-id334 . -1) 429) nil (23728 49554 943339 244000) 0 nil]) ((nil rear-nonsticky nil 418 . 419) (#("
" 0 1 (face font-lock-comment-face fontified nil)) . -564) (418 . 565)) nil (23728 49554 943346 892000) 0 nil]) ((#("(  )
" 0 1 (fontified t) 1 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 419) (undo-tree-id335 . 2) (undo-tree-id336 . -3) (undo-tree-id337 . -3) (undo-tree-id338 . 2) (undo-tree-id339 . 2) (undo-tree-id340 . -3) (undo-tree-id341 . -3)) nil (23728 49554 943371 318000) 0 nil]) ((#("case (current-poly-target)
" 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 6 (fontified t) 6 25 (fontified t) 25 27 (fontified t)) . 420) 419) nil (23728 49554 943377 238000) 0 nil]) ((#("[(html) (define MainParagraph (default-tag))]" 0 1 (fontified t) 1 8 (fontified t) 8 9 (fontified t) 9 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 29 (fontified t face font-lock-variable-name-face) 29 30 (fontified t) 30 31 (fontified t) 31 42 (fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 45 (fontified t)) . 449) (undo-tree-id342 . -41) (undo-tree-id343 . -41) (undo-tree-id344 . 4) (undo-tree-id345 . 4) (undo-tree-id346 . -41) (undo-tree-id347 . -41) (undo-tree-id348 . -42) (undo-tree-id349 . -42) 491) nil (23728 49554 943402 642000) 0 nil] [nil ([nil ([nil ([nil nil ((513 . 516) (#("define" 0 6 (fontified t face font-lock-keyword-face)) . 513) (undo-tree-id194 . 3) (undo-tree-id195 . 2) (undo-tree-id196 . 4) (undo-tree-id197 . 3) (undo-tree-id198 . 5) (undo-tree-id199 . 4) (undo-tree-id200 . 6) (undo-tree-id201 . 5) (undo-tree-id202 . 6) (undo-tree-id203 . 6)) ((513 . 519) (#("let" 0 3 (fontified t face font-lock-keyword-face)) . 513) (undo-tree-id204 . 3) (undo-tree-id205 . 3) (undo-tree-id206 . 3) (undo-tree-id207 . 1) (undo-tree-id208 . 3) (undo-tree-id209 . 1) (undo-tree-id210 . 3) (undo-tree-id211 . 1)) (23728 49368 612988 296000) 0 nil]) ((458 . 461) (#("define" 0 6 (fontified t face font-lock-keyword-face)) . 458) (t 23728 49333 610228 377000)) ((458 . 464) (#("let" 0 3 (fontified t face font-lock-keyword-face)) . 458) (undo-tree-id212 . 3) (undo-tree-id213 . 3)) (23728 49368 613439 969000) 0 nil]) ((558 . 561) (#("w" 0 1 (fontified t)) . -558) (undo-tree-id135 . -1) (undo-tree-id136 . -1) 559 (556 . 559) (#(" " 0 1 (fontified t)) . -556) (undo-tree-id138 . -1) (undo-tree-id139 . -1) 557 (554 . 557) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 554) (549 . 554) (548 . 550) (#("\"" 0 1 (fontified nil)) . -548) (548 . 549) (#("|" 0 1 (fontified t)) . -548) (undo-tree-id140 . -1) (undo-tree-id141 . -1) 549 (548 . 549) (547 . 549) (#("(" 0 1 (fontified nil)) . -547) (546 . 548) (545 . 546) (#(")" 0 1 (fontified nil)) . 545) (544 . 545) (#(" " 0 1 (fontified nil)) . -544) (544 . 545) (#(")" 0 1 (fontified nil)) . -544) (544 . 545) (537 . 544) (#("_" 0 1 (fontified t face font-lock-function-name-face)) . -537) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (#("S" 0 1 (fontified t face font-lock-function-name-face)) . -538) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (#("t" 0 1 (fontified t face font-lock-function-name-face)) . -539) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (#("y" 0 1 (fontified t face font-lock-function-name-face)) . -540) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (#("l" 0 1 (fontified t face font-lock-function-name-face)) . -541) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("e" 0 1 (fontified t face font-lock-function-name-face)) . -542) (undo-tree-id152 . -1) (undo-tree-id153 . -1) 543 (524 . 543) (#("MainPa" 0 6 (fontified t face font-lock-function-name-face)) . -524) (undo-tree-id154 . -6) (undo-tree-id155 . -6) 530 (525 . 530) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -525) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (#("n" 0 1 (fontified t face font-lock-function-name-face)) . -526) (undo-tree-id158 . -1) (undo-tree-id159 . -1) 527 (525 . 527) (524 . 525) (523 . 525) (#("(" 0 1 (fontified nil)) . -523) (516 . 524) (515 . 517) (#("(" 0 1 (fontified nil)) . -515) (510 . 516) (509 . 511) (#("[" 0 1 (fontified nil)) . -509) (509 . 510) (506 . 509)) ((#("
  " 0 1 (fontified t) 1 3 (fontified nil)) . 506) (undo-tree-id214 . -3) (undo-tree-id215 . -3) (undo-tree-id216 . -3) (undo-tree-id217 . -3) (#("[" 0 1 (fontified nil)) . 509) (509 . 510) (#("[]" 0 1 (fontified nil) 1 2 (fontified nil)) . 509) (undo-tree-id218 . 1) (undo-tree-id219 . 1) (undo-tree-id220 . 1) (undo-tree-id221 . 1) (undo-tree-id222 . 1) (undo-tree-id223 . 1) (undo-tree-id224 . 1) (undo-tree-id225 . 1) (undo-tree-id226 . 1) (undo-tree-id227 . 1) (undo-tree-id228 . 1) (undo-tree-id229 . -1) (undo-tree-id230 . -1) (undo-tree-id231 . -1) (undo-tree-id232 . -1) (undo-tree-id233 . 1) (undo-tree-id234 . 1) (undo-tree-id235 . 1) (undo-tree-id236 . 1) (undo-tree-id237 . 1) (undo-tree-id238 . 1) (undo-tree-id239 . 1) (undo-tree-id240 . 1) (undo-tree-id241 . 1) (undo-tree-id242 . 1) (undo-tree-id243 . 1) (undo-tree-id244 . 1) (undo-tree-id245 . 1) (undo-tree-id246 . 1) (undo-tree-id247 . 1) (#("else (" 0 4 (fontified nil face font-lock-keyword-face) 4 5 (fontified nil) 5 6 (fontified nil)) . 510) (undo-tree-id248 . -5) (undo-tree-id249 . -5) (undo-tree-id250 . -5) (undo-tree-id251 . -5) (515 . 516) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 515) (undo-tree-id252 . 1) (undo-tree-id253 . 1) (undo-tree-id254 . 1) (undo-tree-id255 . 1) (undo-tree-id256 . 1) (undo-tree-id257 . 1) (undo-tree-id258 . 1) (undo-tree-id259 . 1) (undo-tree-id260 . 1) (undo-tree-id261 . 1) (undo-tree-id262 . 1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . 1) (undo-tree-id266 . 1) (undo-tree-id267 . 1) (undo-tree-id268 . 1) (undo-tree-id269 . 1) (undo-tree-id270 . 1) (undo-tree-id271 . 1) (undo-tree-id272 . 1) (undo-tree-id273 . 1) (undo-tree-id274 . 1) (undo-tree-id275 . 1) (undo-tree-id276 . 1) (undo-tree-id277 . 1) (undo-tree-id278 . 1) (undo-tree-id279 . 1) (#("define (" 0 6 (fontified nil face font-lock-keyword-face) 6 7 (fontified nil) 7 8 (fontified nil)) . 516) (undo-tree-id280 . 2) (undo-tree-id281 . 5) (undo-tree-id282 . 4) (undo-tree-id283 . 6) (undo-tree-id284 . 5) (undo-tree-id285 . 7) (undo-tree-id286 . 6) (undo-tree-id287 . 8) (undo-tree-id288 . 7) (undo-tree-id289 . 8) (undo-tree-id290 . 8) (undo-tree-id291 . 2) (undo-tree-id292 . 2) (undo-tree-id293 . 2) (undo-tree-id294 . 2) (undo-tree-id295 . 2) (undo-tree-id296 . 2) (undo-tree-id297 . 2) (undo-tree-id298 . 2) (undo-tree-id299 . 2) (undo-tree-id300 . 2) (undo-tree-id301 . 2) (undo-tree-id302 . 2) (undo-tree-id303 . 2) (undo-tree-id304 . 8) (undo-tree-id305 . 8) (523 . 524) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 523) (#("M" 0 1 (fontified nil face font-lock-function-name-face)) . 524) (#("in" 0 1 (fontified nil face font-lock-function-name-face) 1 2 (fontified nil face font-lock-function-name-face)) . 525) (525 . 527) (#("ainPa" 0 5 (fontified nil face font-lock-function-name-face)) . 525) (524 . 530) (#("MainParagraph_Style" 0 13 (fontified nil face font-lock-function-name-face) 13 14 (fontified nil face font-lock-function-name-face) 14 15 (fontified nil face font-lock-function-name-face) 15 16 (fontified nil face font-lock-function-name-face) 16 17 (fontified nil face font-lock-function-name-face) 17 18 (fontified nil face font-lock-function-name-face) 18 19 (fontified nil face font-lock-function-name-face)) . 524) (537 . 543) (#(" . text" 0 7 (fontified nil)) . 537) (#(")" 0 1 (fontified nil)) . 544) (544 . 545) (#(" " 0 1 (fontified nil)) . 544) (544 . 545) (#(")" 0 1 (fontified nil)) . 544) (545 . 546) (#(" " 0 1 (fontified nil)) . 545) (#("`(" 0 1 (fontified nil) 1 2 (fontified nil)) . 546) (547 . 548) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 547) (#("|" 0 1 (fontified nil)) . 548) (548 . 549) (#("\"" 0 1 (fontified nil)) . 548) (548 . 549) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 548) (#("\\n\\n\"" 0 5 (fontified nil face font-lock-string-face)) . 549) (554 . 555) (#(" , " 0 2 (fontified nil) 2 3 (fontified nil)) . 554) (556 . 557) (#("@tw" 0 2 (fontified nil) 2 3 (fontified nil)) . 556) (558 . 559) (#("est" 0 3 (fontified t)) . 558) (t 23728 49333 610228 377000)) (23728 49368 938930 8000) 0 nil]) ((502 . 503) (#("l" 0 1 (fontified t face racket-selfeval-face)) . -502) (undo-tree-id160 . -1) (undo-tree-id161 . -1) 503 (500 . 503) (480 . 500) (#("default-tag-f" 0 13 (fontified t)) . -480) (undo-tree-id162 . -10) (undo-tree-id163 . -10) (undo-tree-id164 . 3) (undo-tree-id165 . 3) (undo-tree-id166 . -10) (undo-tree-id167 . -10) (undo-tree-id169 . 3) (undo-tree-id171 . 3) (undo-tree-id173 . -13) (undo-tree-id174 . -13) 493 (491 . 493)) ((#("-f" 0 2 (fontified nil)) . 491) (480 . 493) (#("default-tag-function" 0 20 (fontified nil)) . 480) (undo-tree-id306 . -20) (#(" 'l" 0 1 (fontified nil) 1 2 (fontified nil face racket-selfeval-face) 2 3 (fontified nil face racket-selfeval-face)) . 500) (undo-tree-id307 . -2) (502 . 503) (#("p" 0 1 (fontified t face racket-selfeval-face)) . 502) (undo-tree-id308 . -1)) (23728 49369 378912 746000) 0 nil]) ((483 . 491) (#("u" 0 1 (fontified t)) . -483) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (#("l" 0 1 (fontified t)) . -484) (undo-tree-id177 . -1) (undo-tree-id178 . -1) 485 (484 . 485) (480 . 484) (479 . 481) (#("(" 0 1 (fontified nil)) . -479) (478 . 480) (467 . 478) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -467) (undo-tree-id179 . -1) (undo-tree-id180 . -1) 468 (465 . 468) (458 . 465) (457 . 459) (#("(" 0 1 (fontified nil)) . -457) (457 . 458) (#("d" 0 1 (fontified t)) . -457) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (#("e" 0 1 (fontified t)) . -458) (undo-tree-id183 . -1) (undo-tree-id184 . -1) 459 (456 . 459) (#(")" 0 1 (fontified nil)) . 456) (455 . 456) (451 . 455) (450 . 452) (#("(" 0 1 (fontified nil)) . -450) (450 . 451) (449 . 451) (#("[" 0 1 (fontified nil)) . -449) (449 . 450) (446 . 449) (#(")" 0 1 (fontified nil)) . 446) (445 . 446) (#(" " 0 1 (fontified nil)) . -445) (445 . 446) (#(")" 0 1 (fontified nil)) . -445) (445 . 446) (#("()" 0 1 (fontified t) 1 2 (fontified t)) . 445) (undo-tree-id185 . -1) (undo-tree-id186 . -1) 446 (445 . 447) (#("(" 0 1 (fontified nil)) . -445) (445 . 446) (426 . 445) (#("current-pol" 0 11 (fontified t)) . -426) (undo-tree-id187 . -11) (undo-tree-id188 . -11) 437 (429 . 437) (#("e" 0 1 (fontified t)) . -429) (undo-tree-id189 . -1) (undo-tree-id190 . -1) 430 (426 . 430) (425 . 427) (#("(" 0 1 (fontified nil)) . -425) (420 . 426) (419 . 421) (#("(" 0 1 (fontified nil)) . -419) (419 . 420) (418 . 419) (417 . 418) 387) nil (23728 49370 371566 574000) 0 nil]) ((387 . 388) (#("'" 0 1 (fontified nil face font-lock-comment-face)) . -387) 388 (387 . 388)) nil (23728 49333 597922 195000) 0 nil]) ((335 . 336) (#("'" 0 1 (fontified nil face font-lock-comment-face)) . -335) (undo-tree-id191 . 1) 336 (335 . 336)) nil (23728 49333 597932 201000) 0 nil]) ((304 . 305) (#("'" 0 1 (fontified t)) . -304) (undo-tree-id192 . -1) (undo-tree-id193 . -1) 305 (304 . 305)) nil (23728 49333 597948 633000) 0 nil]) (331) nil (23728 49333 597953 726000) 0 nil]) ((272 . 273)) nil (23728 49333 597957 265000) 0 nil] [nil nil ((#("\"\"" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 345) (undo-tree-id79 . -1) (undo-tree-id80 . -1) 346 (#("d" 0 1 (fontified t face font-lock-string-face)) . -346) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -347) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (#("f" 0 1 (fontified t face font-lock-string-face)) . -348) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -349) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -350) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -351) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -352) (undo-tree-id94 . -1) (undo-tree-id95 . -1) 353 (346 . 353) (345 . 347) (#("\"" 0 1 (fontified nil)) . -345) (345 . 346) (#("`" 0 1 (fontified t)) . -345) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("d" 0 1 (fontified t)) . -346) (undo-tree-id98 . -1) (undo-tree-id99 . -1) 347 (345 . 347) (#("`(p ((class \"MainParagraph\")) ,@text)" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 11 (fontified t face font-lock-builtin-face) 11 12 (fontified t) 12 23 (fontified t face font-lock-string-face) 23 26 (fontified t face font-lock-string-face) 26 27 (fontified t face font-lock-string-face) 27 28 (fontified t) 28 29 (fontified t) 29 31 (fontified t) 31 32 (fontified t) 32 36 (fontified t) 36 37 (fontified t)) . 345) (undo-tree-id100 . -6) (undo-tree-id101 . 10) (undo-tree-id102 . -6) (undo-tree-id103 . -6) (undo-tree-id104 . 5) (undo-tree-id105 . 5) (undo-tree-id106 . 5) (undo-tree-id107 . 5) (undo-tree-id108 . 5) (undo-tree-id109 . 5) (undo-tree-id110 . 5) (undo-tree-id111 . 5) (undo-tree-id112 . 32) (undo-tree-id113 . 32) (undo-tree-id114 . -5) (undo-tree-id115 . -5) (undo-tree-id116 . -4) (undo-tree-id117 . -4) (undo-tree-id118 . -4) (undo-tree-id119 . 31) (undo-tree-id120 . 31) (undo-tree-id121 . -4) (undo-tree-id122 . 5) (undo-tree-id123 . 5) (undo-tree-id124 . -4) (undo-tree-id125 . -31) (undo-tree-id126 . -31) (undo-tree-id127 . -31)) ((345 . 382) (#("`d" 0 1 (fontified nil) 1 2 (fontified nil)) . 345) (345 . 347) (#("\"" 0 1 (fontified nil)) . 345) (345 . 346) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 345) (#("default" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face) 2 3 (fontified nil face font-lock-string-face) 3 4 (fontified nil face font-lock-string-face) 4 5 (fontified nil face font-lock-string-face) 5 6 (fontified nil face font-lock-string-face) 6 7 (fontified nil face font-lock-string-face)) . 346) (346 . 353) (345 . 347)) (23728 49184 358825 18000) 0 nil]) ((#("
" 0 1 (fontified t)) . 51) (undo-tree-id128 . 1) (undo-tree-id129 . 1) (undo-tree-id130 . 1) (undo-tree-id131 . 1) (undo-tree-id132 . 1) (undo-tree-id133 . 1) (undo-tree-id134 . 1)) nil (23728 49184 360665 946000) 0 nil]) ((40 . 50) (30 . 40) 29) nil (23728 49184 358889 281000) 0 nil] [nil ([nil ([nil nil ((#("s" 0 1 (fontified t)) . 50) (undo-tree-id1 . 1) (undo-tree-id3 . 1) (undo-tree-id5 . 1) (undo-tree-id7 . 1) (undo-tree-id9 . 1) (undo-tree-id10 . 1) (undo-tree-id11 . 1) (undo-tree-id13 . 1) (undo-tree-id15 . 1) (undo-tree-id17 . 1) (undo-tree-id18 . 1) (undo-tree-id19 . 1) (undo-tree-id21 . 1) (undo-tree-id23 . 1) (undo-tree-id25 . 1) (undo-tree-id27 . 1) (undo-tree-id29 . 1) (undo-tree-id31 . 1) (undo-tree-id33 . 1) (undo-tree-id35 . 1) (undo-tree-id37 . 1) (undo-tree-id39 . 1) (undo-tree-id41 . 1) (t 23728 48772 609885 480000)) ((50 . 51) (t 23728 48783 249826 598000)) (23728 48783 173637 386000) 0 nil]) ((32 . 51) (31 . 32) (t 23728 48734 310098 447000)) ((#(" " 0 1 (fontified nil)) . 31) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("        pollen/tags" 0 18 (fontified t) 18 19 (fontified t)) . 32) (undo-tree-id55 . -15) (undo-tree-id56 . -15) (undo-tree-id57 . 1) (undo-tree-id58 . 1) (undo-tree-id59 . 1) (undo-tree-id60 . 1) (undo-tree-id61 . -18) (undo-tree-id62 . -18) (undo-tree-id63 . -17) (undo-tree-id64 . -17) (undo-tree-id65 . -17) (undo-tree-id66 . 4) (undo-tree-id67 . 5) (undo-tree-id68 . -17) (undo-tree-id69 . -15) (undo-tree-id70 . -15) (undo-tree-id71 . 4) (undo-tree-id72 . 4) (undo-tree-id73 . 4) (undo-tree-id74 . 4) (undo-tree-id75 . -15) (undo-tree-id76 . -18) (undo-tree-id77 . -18) (undo-tree-id78 . 1)) (23728 48855 151746 536000) 0 nil]) ((#("`" 0 1 (fontified t)) . 326) (t 23728 48720 550175 358000)) ((326 . 327)) (23728 48856 97966 873000) 0 nil]) ((#("         " 0 9 (fontified t)) . -31) (undo-tree-id554 . -9) (undo-tree-id555 . -9) 40 (31 . 40) (31 . 32) 45) nil (23728 48856 98531 398000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil nil ((326 . 327) (t 23728 48678 377079 138000)) ((#("'" 0 1 (fontified t face racket-selfeval-face)) . 326) (undo-tree-id528 . 1) (undo-tree-id529 . 1) (undo-tree-id530 . 1) (undo-tree-id531 . 1) (undo-tree-id532 . 1) (undo-tree-id533 . 1) (undo-tree-id534 . 1) (t 23728 48697 307 498000)) (23728 48696 985596 328000) 0 nil]) ((#("@" 0 1 (fontified t)) . 353)) ((353 . 354)) (23728 48698 452564 140000) 0 nil]) ((#("`" 0 1 (fontified t)) . 325) (t 23728 48654 747212 958000)) ((325 . 326)) (23728 48698 708107 323000) 0 nil]) ((329 . 331)) ((#("#:" 0 2 (fontified t face racket-keyword-argument-face)) . 329) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . 1) (undo-tree-id538 . 1) (undo-tree-id539 . -1) (undo-tree-id540 . -1)) (23728 48699 13130 697000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 350) (undo-tree-id487 . 1) (#("(" 0 1 (fontified t)) . -329) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id500 . -1) 330) ((329 . 330) (350 . 351)) (23728 48701 246134 715000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 351) (undo-tree-id501 . 1) (#("(" 0 1 (fontified t)) . -330) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id507 . 1) (undo-tree-id508 . 1) (undo-tree-id510 . 1) (undo-tree-id512 . 1) (undo-tree-id514 . 1) (undo-tree-id516 . 1) (undo-tree-id518 . 1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id522 . 1) (undo-tree-id524 . -1) 331 (t 23728 48630 684016 658000)) ((330 . 331) (351 . 352)) (23728 48701 716724 27000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((#(" ,@text" 0 7 (fontified t)) . 405) (undo-tree-id204 . 7) (t 23728 48560 891085 396000)) ((405 . 412) (t 23728 48600 177524 861000)) (23728 48600 163012 53000) 0 nil]) ((#(" . text" 0 7 (fontified t)) . 293)) ((293 . 300)) (23728 48621 657782 432000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 300) (#("(" 0 1 (fontified t)) . -280) (undo-tree-id201 . -1) (undo-tree-id202 . -1) 281 (t 23728 48497 514790 472000)) ((280 . 281) (300 . 301)) (23728 48621 847220 720000) 0 nil]) ((#(":" 0 1 (fontified t face racket-keyword-argument-face)) . 371) (undo-tree-id197 . -1) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1)) ((371 . 372)) (23728 48622 58041 618000) 0 nil]) ((nil rear-nonsticky nil 372 . 373) (nil fontified nil 372 . 373) (372 . 373) 371 (t 23728 48440 95133 457000)) ((#(":" 0 1 (rear-nonsticky nil fontified nil face racket-keyword-argument-face)) . 372) (undo-tree-id205 . 1) (undo-tree-id206 . 1) (undo-tree-id207 . 1) (undo-tree-id208 . 1) (undo-tree-id209 . 1) (undo-tree-id210 . 1) (undo-tree-id211 . 1) (undo-tree-id212 . 1) (undo-tree-id213 . 1) (undo-tree-id214 . 1) (undo-tree-id215 . 1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (nil rear-nonsticky t 372 . 373)) (23728 48622 222878 668000) 0 nil]) ((371 . 372) (#(";" 0 1 (fontified t syntax-table #1=(6) face font-lock-comment-delimiter-face)) . -371) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id194 . -1) 372 (371 . 372)) ((#(";" 0 1 (fontified nil syntax-table #1# face font-lock-comment-delimiter-face)) . 371) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (371 . 372) (#(":" 0 1 (fontified t face racket-keyword-argument-face)) . 371) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . 1) (undo-tree-id230 . 1) (undo-tree-id231 . 1)) (23728 48622 403083 697000) 0 nil]) ((#(":" 0 1 (fontified t)) . 370) (t 23728 48428 158538 887000)) ((370 . 371)) (23728 48622 603856 668000) 0 nil]) ((69 . 72) (#("setup" 0 5 (fontified t)) . 69) (undo-tree-id188 . -5) (undo-tree-id189 . -5)) ((69 . 74) (#("tag" 0 3 (fontified t)) . 69)) (23728 48622 788893 295000) 0 nil]) ((nil rear-nonsticky nil 61 . 62) (#("
" 0 1 (fontified nil)) . -74) (52 . 75) 51 (t 23728 48366 32210 325000)) ((#("
         pollen/setup
" 0 1 (fontified t) 1 9 (fontified nil) 9 10 (fontified nil rear-nonsticky nil) 10 17 (fontified nil) 17 22 (fontified nil) 22 23 (fontified nil)) . 52) (undo-tree-id232 . -17) (undo-tree-id233 . -17) (undo-tree-id234 . -17) (undo-tree-id235 . 6) (74 . 75) (nil rear-nonsticky t 61 . 62)) (23728 48622 974536 569000) 0 nil]) ((#(" text" 0 5 (fontified t)) . 373) (undo-tree-id175 . -4) (undo-tree-id176 . -4) (undo-tree-id178 . 1) (undo-tree-id180 . -4) (undo-tree-id182 . 1) (undo-tree-id184 . 1) (undo-tree-id186 . 5) (t 23728 48353 812268 852000)) ((373 . 378)) (23728 48623 239842 702000) 0 nil]) ((373 . 378) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 373) (372 . 373) (#(" " 0 1 (fontified nil)) . -372) (372 . 373) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -372) (372 . 373) (#(":" 0 1 (fontified t face font-lock-string-face)) . -372) (undo-tree-id135 . -1) (undo-tree-id136 . -1) 373 (372 . 373) (365 . 372) (364 . 365) (#("`" 0 1 (fontified t face font-lock-string-face)) . -364) (undo-tree-id137 . -1) (undo-tree-id138 . -1) 365 (362 . 365) (359 . 362) (358 . 360) (#("\"" 0 1 (fontified nil)) . -358) (358 . 359) (#("MainPa" 0 6 (fontified t)) . 358) (undo-tree-id139 . -5) (undo-tree-id140 . -5) (undo-tree-id142 . 1) (undo-tree-id144 . -5) (undo-tree-id146 . 1) (undo-tree-id148 . 1) (undo-tree-id150 . 6)) ((358 . 364) (#("\"" 0 1 (fontified nil)) . 358) (undo-tree-id236 . 1) (undo-tree-id237 . 1) (undo-tree-id238 . 1) (358 . 359) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 358) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (undo-tree-id245 . -1) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (undo-tree-id248 . -1) (undo-tree-id249 . 2) (undo-tree-id250 . -1) (undo-tree-id251 . 1) (undo-tree-id252 . -1) (undo-tree-id253 . 1) (undo-tree-id254 . -1) (#("Mai" 0 3 (fontified nil face font-lock-string-face)) . 359) (undo-tree-id255 . -3) (undo-tree-id256 . -3) (undo-tree-id257 . -3) (undo-tree-id258 . -3) (undo-tree-id259 . -3) (undo-tree-id260 . -3) (undo-tree-id261 . -3) (undo-tree-id262 . -3) (undo-tree-id263 . -3) (undo-tree-id264 . -3) (undo-tree-id265 . 3) (undo-tree-id266 . -3) (undo-tree-id267 . -3) (#("nP`" 0 2 (fontified nil face font-lock-string-face) 2 3 (fontified nil face font-lock-string-face)) . 362) (undo-tree-id268 . -2) (undo-tree-id269 . -2) (undo-tree-id270 . -2) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (undo-tree-id273 . -2) (undo-tree-id274 . -3) (undo-tree-id275 . -3) (undo-tree-id276 . -2) (undo-tree-id277 . -2) (undo-tree-id278 . -2) (undo-tree-id279 . 1) (undo-tree-id280 . -2) (364 . 365) (#("a" 0 1 (fontified nil face font-lock-string-face)) . 364) (undo-tree-id281 . -1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#("ragraph" 0 7 (fontified nil face font-lock-string-face)) . 365) (undo-tree-id293 . -7) (undo-tree-id294 . -7) (undo-tree-id295 . -7) (undo-tree-id296 . -7) (undo-tree-id297 . -7) (undo-tree-id298 . -7) (undo-tree-id299 . -7) (undo-tree-id300 . -7) (undo-tree-id301 . -7) (undo-tree-id302 . -7) (undo-tree-id303 . -7) (undo-tree-id304 . -7) (#(":" 0 1 (fontified nil face font-lock-string-face)) . 372) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . 1) (372 . 373) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 372) (undo-tree-id308 . 1) (372 . 373) (#(" " 0 1 (fontified nil)) . 372) (undo-tree-id309 . 1) (372 . 373) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 372) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . 1) (undo-tree-id320 . -1) (373 . 374) (#(" text" 0 5 (fontified t)) . 373) (undo-tree-id321 . -4) (undo-tree-id322 . 5)) (23728 48623 660529 972000) 0 nil]) ((#("r" 0 1 (fontified t)) . -364) (undo-tree-id152 . -1) (undo-tree-id153 . -1) 365 (362 . 365) (350 . 362) (333 . 350) (#(" " 0 1 (fontified t)) . -333) (undo-tree-id154 . -1) (undo-tree-id155 . -1) 334 (326 . 334) (325 . 327) (#("(" 0 1 (fontified nil)) . -325) (325 . 326) (#("`(p ((class \"MainParagraph\")) ,@text)" 0 6 (fontified t) 6 11 (fontified t face font-lock-builtin-face) 11 12 (fontified t) 12 23 (fontified t face font-lock-string-face) 23 26 (fontified t face font-lock-string-face) 26 27 (fontified t face font-lock-string-face) 27 32 (fontified t) 32 36 (fontified t) 36 37 (fontified t)) . 325) (undo-tree-id156 . -6) (undo-tree-id157 . 10) (undo-tree-id158 . -6) (undo-tree-id159 . -6) (undo-tree-id161 . 5) (undo-tree-id163 . 5) (undo-tree-id165 . -32) (undo-tree-id167 . 5) (undo-tree-id168 . 5) (undo-tree-id169 . 5) (undo-tree-id170 . 5) (undo-tree-id171 . 5) (undo-tree-id172 . 5) (undo-tree-id173 . 5) (undo-tree-id174 . 5) (t 23728 47897 104433 773000)) ((325 . 362) (#("(" 0 1 (fontified nil)) . 325) (325 . 326) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 325) (undo-tree-id323 . 1) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . 1) (undo-tree-id330 . 1) (undo-tree-id331 . 1) (undo-tree-id332 . 1) (undo-tree-id333 . -1) (undo-tree-id334 . 1) (undo-tree-id335 . 1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (undo-tree-id339 . 1) (undo-tree-id340 . 1) (undo-tree-id341 . -1) (undo-tree-id342 . -1) (undo-tree-id343 . 1) (undo-tree-id344 . 1) (undo-tree-id345 . 1) (undo-tree-id346 . 1) (undo-tree-id347 . 1) (undo-tree-id348 . 1) (undo-tree-id349 . 1) (undo-tree-id350 . 1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . 1) (undo-tree-id354 . 1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . 1) (undo-tree-id359 . 1) (undo-tree-id360 . -1) (undo-tree-id361 . -1) (undo-tree-id362 . -1) (undo-tree-id363 . 1) (undo-tree-id364 . 1) (undo-tree-id365 . -1) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (undo-tree-id369 . 1) (undo-tree-id370 . 1) (undo-tree-id371 . 1) (undo-tree-id372 . 1) (undo-tree-id373 . 1) (undo-tree-id374 . 1) (undo-tree-id375 . 1) (undo-tree-id376 . 1) (undo-tree-id377 . 1) (undo-tree-id378 . 1) (undo-tree-id379 . 1) (undo-tree-id380 . -1) (undo-tree-id381 . -1) (undo-tree-id382 . 1) (undo-tree-id383 . 1) (#("default " 0 7 (fontified nil) 7 8 (fontified nil)) . 326) (undo-tree-id384 . -7) (undo-tree-id385 . -7) (undo-tree-id386 . -7) (undo-tree-id387 . -7) (undo-tree-id388 . -7) (undo-tree-id389 . -7) (undo-tree-id390 . -7) (undo-tree-id391 . -7) (undo-tree-id392 . -7) (undo-tree-id393 . -7) (undo-tree-id394 . -7) (undo-tree-id395 . -7) (undo-tree-id396 . -7) (undo-tree-id397 . -7) (undo-tree-id398 . -7) (undo-tree-id399 . -7) (undo-tree-id400 . -7) (undo-tree-id401 . -7) (undo-tree-id402 . -7) (undo-tree-id403 . -7) (undo-tree-id404 . -7) (undo-tree-id405 . -8) (undo-tree-id406 . -8) (undo-tree-id407 . 3) (undo-tree-id408 . 3) (undo-tree-id409 . -7) (undo-tree-id410 . -7) (333 . 334) (#("-tag-function 'p " 0 14 (fontified nil) 14 16 (fontified nil face racket-selfeval-face) 16 17 (fontified nil)) . 333) (undo-tree-id411 . -17) (undo-tree-id412 . -17) (undo-tree-id413 . -17) (undo-tree-id414 . -17) (undo-tree-id415 . -17) (undo-tree-id416 . -17) (undo-tree-id417 . -17) (undo-tree-id418 . -17) (undo-tree-id419 . -17) (undo-tree-id420 . -17) (undo-tree-id421 . -17) (undo-tree-id422 . -17) (undo-tree-id423 . -17) (undo-tree-id424 . -17) (undo-tree-id425 . -17) (undo-tree-id426 . -17) (undo-tree-id427 . -17) (undo-tree-id428 . -17) (undo-tree-id429 . -17) (undo-tree-id430 . -17) (undo-tree-id431 . -17) (undo-tree-id432 . -17) (undo-tree-id433 . -17) (undo-tree-id434 . -17) (undo-tree-id435 . -17) (#(":#class Main" 0 1 (fontified nil) 1 2 (fontified nil) 2 7 (fontified nil) 7 8 (fontified nil) 8 12 (fontified nil)) . 350) (undo-tree-id436 . 10) (undo-tree-id437 . -2) (undo-tree-id438 . -2) (undo-tree-id439 . -12) (undo-tree-id440 . -8) (undo-tree-id441 . -8) (undo-tree-id442 . -8) (undo-tree-id443 . -8) (undo-tree-id444 . -8) (undo-tree-id445 . -8) (undo-tree-id446 . -8) (undo-tree-id447 . -2) (undo-tree-id448 . 10) (undo-tree-id449 . 10) (undo-tree-id450 . 10) (undo-tree-id451 . 10) (undo-tree-id452 . 10) (undo-tree-id453 . 10) (undo-tree-id454 . 10) (undo-tree-id455 . 10) (undo-tree-id456 . -2) (undo-tree-id457 . -2) (undo-tree-id458 . 10) (undo-tree-id459 . 10) (undo-tree-id460 . -2) (undo-tree-id461 . -2) (undo-tree-id462 . -2) (undo-tree-id463 . 10) (undo-tree-id464 . 10) (undo-tree-id465 . -2) (undo-tree-id466 . -2) (undo-tree-id467 . -2) (undo-tree-id468 . 10) (undo-tree-id469 . 10) (undo-tree-id470 . -2) (undo-tree-id471 . -2) (undo-tree-id472 . -8) (undo-tree-id473 . -8) (undo-tree-id474 . 10) (undo-tree-id475 . 10) (undo-tree-id476 . 10) (undo-tree-id477 . 10) (undo-tree-id478 . 10) (undo-tree-id479 . 12) (undo-tree-id480 . 10) (undo-tree-id481 . 12) (undo-tree-id482 . -8) (undo-tree-id483 . -8) (undo-tree-id484 . 4) (undo-tree-id485 . 4) (#("Par" 0 2 (fontified nil) 2 3 (fontified nil)) . 362) (undo-tree-id486 . -1) (364 . 365)) (23728 48624 380627 577000) 0 nil]) ((31 . 40) (#(" " 0 1 (fontified nil)) . 31) (undo-tree-id553 . 1) (30 . 31)) ((#("
" 0 1 (fontified t)) . 30) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (31 . 32) (#("         " 0 9 (fontified t)) . 31) (undo-tree-id544 . 1) (undo-tree-id545 . 1) (undo-tree-id546 . 1) (undo-tree-id547 . 1) (undo-tree-id548 . 1) (undo-tree-id549 . 1) (undo-tree-id550 . -8) (undo-tree-id551 . -8) (undo-tree-id552 . -8)) (23728 48704 725955 27000) 0 nil]) ((#("(current-poly-target 'txt)
" 0 21 (fontified t) 21 25 (fontified t face racket-selfeval-face) 25 26 (fontified t) 26 27 (fontified t)) . 70) (undo-tree-id123 . 2) (undo-tree-id124 . -24) (undo-tree-id125 . 1) (undo-tree-id126 . 1) (undo-tree-id127 . 1) (undo-tree-id128 . 1) (undo-tree-id129 . 1) (undo-tree-id130 . 1) (undo-tree-id131 . -24) (undo-tree-id132 . -24) (undo-tree-id133 . -24) (undo-tree-id134 . -24) 94 (t 23728 47842 758020 627000)) nil (23728 48702 417341 536000) 0 nil]) ((91 . 95) (71 . 91) (70 . 72) (#("(" 0 1 (fontified nil)) . -70) (70 . 71) (t 23728 47325 373681 331000)) nil (23728 47842 743343 574000) 0 nil]) (70) nil (23728 47842 743357 749000) 0 nil]) ((#("(define (current-poly-target) 'txt)
" 0 1 (front-sticky t fontified t) 1 7 (front-sticky t fontified t face font-lock-keyword-face) 7 8 (front-sticky t fontified t) 8 9 (front-sticky t fontified t) 9 28 (front-sticky t fontified t face font-lock-function-name-face) 28 30 (front-sticky t fontified t) 30 34 (front-sticky t fontified t face racket-selfeval-face) 34 35 (front-sticky t fontified t) 35 36 (fontified t)) . 70) (undo-tree-id121 . -35) (undo-tree-id122 . -35) (t 23728 47166 251013 3000)) nil (23728 47325 359703 82000) 0 nil]) ((nil rear-nonsticky nil 69 . 70) (#("
" 0 1 (fontified nil)) . -105) (69 . 106) (t 23727 57487 974944 321000)) nil (23728 47166 236040 396000) 0 nil] [nil nil ((361 . 362) (#(")" 0 1 (fontified t)) . -357) (undo-tree-id73 . 1) (undo-tree-id75 . 1) (undo-tree-id77 . 1) (undo-tree-id79 . 1) (undo-tree-id81 . 1) (undo-tree-id83 . 1) (undo-tree-id85 . 1) (undo-tree-id87 . 1) (undo-tree-id89 . 1) (undo-tree-id91 . 1) (undo-tree-id93 . -1) (undo-tree-id95 . -1) (351 . 357) (350 . 351) (349 . 351) (#("(" 0 1 (fontified nil)) . -349) (349 . 350) (t 23727 49840 856009 845000)) ((#("(" 0 1 (fontified nil)) . 349) (349 . 350) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 349) (undo-tree-id96 . 1) (undo-tree-id97 . 1) (undo-tree-id98 . 1) (undo-tree-id99 . 1) (undo-tree-id100 . 1) (undo-tree-id101 . 1) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (undo-tree-id104 . -1) (undo-tree-id105 . 1) (undo-tree-id106 . 1) (#("i" 0 1 (fontified nil)) . 350) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("ndent " 0 6 (fontified nil)) . 351) (undo-tree-id110 . 1) (undo-tree-id111 . 1) (undo-tree-id112 . 1) (undo-tree-id113 . 1) (undo-tree-id114 . 1) (undo-tree-id115 . 1) (undo-tree-id116 . -5) (undo-tree-id117 . -5) (undo-tree-id118 . -5) (undo-tree-id119 . 1) (undo-tree-id120 . 1) (357 . 358) (#(")" 0 1 (fontified t)) . 361) (t 23727 57370 609455 169000)) (23727 57370 600630 827000) 0 nil]) ((422 . 440) (421 . 422) (410 . 421)) nil (23727 57486 355864 584000) 0 nil]) ((340 . 343) (330 . 340) (#("P" 0 1 (fontified t face font-lock-string-face)) . -330) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -331) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -332) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 333 (330 . 333) (329 . 331) (#("\"" 0 1 (fontified nil)) . -329) (323 . 330)) nil (23727 49840 837901 366000) 0 nil]) ((#("style \"
        font-size: 1.15em;
        line-height: 1.6em;
        color: #444;\"" 0 6 (fontified t) 6 84 (fontified t face font-lock-string-face)) . 323) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -16) (undo-tree-id9 . 1) (undo-tree-id10 . -16) (undo-tree-id11 . -82) (undo-tree-id12 . -82) (undo-tree-id13 . -6) (undo-tree-id14 . -7) (undo-tree-id15 . 78) (undo-tree-id16 . 79) (undo-tree-id17 . 78) (undo-tree-id18 . 80) (undo-tree-id19 . 79) 327) nil (23727 49840 837952 487000) 0 nil]) ((#("                          " 0 26 (fontified nil)) . 240) (undo-tree-id20 . 26) (undo-tree-id21 . 26) (undo-tree-id22 . 26) (#("
" 0 1 (fontified t)) . -240) 224) nil (23727 49840 837971 360000) 0 nil]) ((#("                          " 0 26 (fontified nil)) . 125) (undo-tree-id23 . 26) (undo-tree-id24 . 26) (#("
" 0 1 (fontified t)) . -125) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) 99) nil (23727 49840 837998 386000) 0 nil]) ((258 . 260) (264 . 265) (#(")" 0 1 (fontified nil)) . -257) (225 . 251) (231 . 232) (#(")" 0 1 (fontified nil)) . -226) (225 . 227) (#("(" 0 1 (fontified nil)) . -225) (225 . 226) (#(";" 0 1 (rear-nonsticky t fontified nil face font-lock-comment-delimiter-face)) . 236) (237 . 238) (231 . 232) (#(":" 0 1 (fontified t)) . 230)) nil (23727 49840 838016 5000) 0 nil]) ((214 . 216) (221 . 222) (#(")" 0 1 (fontified nil)) . -213) (undo-tree-id30 . 1) (undo-tree-id31 . -1) (175 . 201) (187 . 188) (#(")" 0 1 (fontified nil)) . -176) (undo-tree-id32 . -1) (undo-tree-id33 . 1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (175 . 177) (#("(" 0 1 (fontified nil)) . -175) (175 . 176) (#(";" 0 1 (fontified nil face font-lock-comment-delimiter-face)) . 193) (194 . 195) (187 . 188) (#(":" 0 1 (fontified t)) . 186)) nil (23727 49840 838054 257000) 0 nil]) ((163 . 165) (171 . 172) (#(")" 0 1 (fontified nil)) . -162) (undo-tree-id37 . 1) (undo-tree-id38 . -1) (126 . 152) (136 . 137) (#(")" 0 1 (fontified nil)) . -127) (undo-tree-id39 . -1) (undo-tree-id40 . 1) (undo-tree-id41 . -1) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (126 . 128) (#("(" 0 1 (fontified nil)) . -126) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (126 . 127) (#(";" 0 1 (fontified nil face font-lock-comment-delimiter-face)) . 143) (undo-tree-id46 . 1) (144 . 145) (136 . 137) (#(":" 0 1 (fontified t)) . 135) (undo-tree-id47 . 1)) nil (23727 49840 838119 790000) 0 nil]) ((#("        " 0 8 (fontified t)) . 165) (undo-tree-id48 . 8) (undo-tree-id49 . 8) (undo-tree-id50 . 8)) nil (23727 49840 838138 193000) 0 nil]) ((#("        " 0 8 (fontified t)) . 145) (undo-tree-id51 . 1) (undo-tree-id52 . 2) (undo-tree-id53 . 1) (undo-tree-id54 . 3) (undo-tree-id55 . 2) (undo-tree-id56 . 4) (undo-tree-id57 . 3) (undo-tree-id58 . 5) (undo-tree-id59 . 4) (undo-tree-id60 . 6) (undo-tree-id61 . 5) (undo-tree-id62 . 7) (undo-tree-id63 . 6) (undo-tree-id64 . 8) (undo-tree-id65 . 7)) nil (23727 49840 838194 26000) 0 nil]) ((nil rear-nonsticky nil 192 . 193) (nil fontified nil 126 . 193) (126 . 193)) nil (23727 49840 838202 797000) 0 nil]) ((#("                          " 0 26 (fontified t)) . -126) (undo-tree-id66 . -26) (undo-tree-id67 . -26) 152 (126 . 152) (126 . 127) 150) nil (23727 49840 838216 68000) 0 nil]) ((#("r" 0 1 (fontified t face font-lock-string-face)) . 66) (undo-tree-id68 . -1)) nil (23727 49840 838224 699000) 0 nil]) ((54 . 66) (#("../utils." 0 9 (fontified t face font-lock-string-face)) . -54) (undo-tree-id69 . -9) (undo-tree-id70 . -9) 63) nil (23727 49840 838237 581000) 0 nil]) ((54 . 64) (53 . 55) (#("\"" 0 1 (fontified nil)) . -53) (53 . 54) (43 . 53)) nil (23727 49840 838247 63000) 0 nil]) ((44 . 45) 18) nil (23727 49840 838253 340000) 0 nil]) ((100 . 127) (99 . 101) (#("(" 0 1 (fontified nil)) . -99) (99 . 100) (88 . 99) (77 . 88) (76 . 78) (#("(" 0 1 (fontified nil)) . -76) (76 . 77) (73 . 76)) nil (23727 49840 838265 706000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 73) (undo-tree-id71 . 1) (#("(" 0 1 (fontified t)) . 54) 73) nil (23727 49840 838276 785000) 0 nil]) ((61 . 74) (55 . 61) (54 . 56) (#("(" 0 1 (fontified nil)) . -54) (47 . 55) (46 . 48) (#("(" 0 1 (fontified nil)) . -46) (46 . 47)) nil (23727 49840 838287 867000) 0 nil]) ((#("
" 0 1 (fontified t)) . 47)) nil (23727 49840 838293 298000) 0 nil]) ((45 . 46) (45 . 46) (t 23725 64761 762791 198000)) nil (23727 49840 838298 605000) 0 nil]) nil nil (23727 49840 838301 611000) 0 nil] #2# 17540 103 nil)