"7e0766fbccb8120ae7e818e8ac0a4751cbe99fc2"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#3=[nil nil ((#(".display()" 0 10 (fontified t)) . 692) (undo-tree-id2313 . 10) (undo-tree-id2314 . 10) (undo-tree-id2315 . 10)) nil (23701 42254 445908 125000) 0 nil]) ((#(".display()" 0 10 (fontified t)) . 339) (undo-tree-id2316 . 10) (t 23701 42232 158765 283000)) nil (23701 42254 445923 936000) 0 nil]) ((#("    let project_dir = 
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 19 (fontified t face font-lock-variable-name-face) 19 22 (fontified t) 22 23 (fontified t)) . 89) (undo-tree-id1990 . 1) (undo-tree-id1991 . 1) (undo-tree-id1992 . 1) (undo-tree-id1993 . 1) (undo-tree-id1994 . 1) (undo-tree-id1995 . 1) (undo-tree-id1996 . 1) (undo-tree-id1997 . 1) (undo-tree-id1998 . 1) (undo-tree-id1999 . 1) (undo-tree-id2000 . -22) (undo-tree-id2001 . 1) (undo-tree-id2002 . 1) (undo-tree-id2003 . -22) (undo-tree-id2004 . 1) (undo-tree-id2005 . 1) (undo-tree-id2006 . 1) (undo-tree-id2007 . 1) (undo-tree-id2008 . 1) (undo-tree-id2009 . 1) (undo-tree-id2010 . 1) (undo-tree-id2011 . 1) (undo-tree-id2012 . 1) (undo-tree-id2013 . 1) (undo-tree-id2014 . 1) (undo-tree-id2015 . 1) (undo-tree-id2016 . 1) (undo-tree-id2017 . 1) (undo-tree-id2018 . 1) (undo-tree-id2019 . 1) (undo-tree-id2020 . 1) (undo-tree-id2021 . 1) (undo-tree-id2022 . 1) (undo-tree-id2023 . 1) (undo-tree-id2024 . 1) (undo-tree-id2025 . 1) (undo-tree-id2026 . 1) (undo-tree-id2027 . 1) (undo-tree-id2028 . 1) (undo-tree-id2029 . 1) (undo-tree-id2030 . 1) (undo-tree-id2031 . 1) (undo-tree-id2032 . 1) (undo-tree-id2033 . 1) (undo-tree-id2034 . 1) (undo-tree-id2035 . 1) (undo-tree-id2036 . 1) (undo-tree-id2037 . 1) (undo-tree-id2038 . 1) (undo-tree-id2039 . 1) (undo-tree-id2040 . 1) (undo-tree-id2041 . 1) (undo-tree-id2042 . 1) (undo-tree-id2043 . 1) (undo-tree-id2044 . 1) (undo-tree-id2045 . 1) (undo-tree-id2046 . 1) (undo-tree-id2047 . 1) (undo-tree-id2048 . 1) (undo-tree-id2049 . 1) (undo-tree-id2050 . 1) (undo-tree-id2051 . 1) (undo-tree-id2052 . 1) (undo-tree-id2053 . 1) (undo-tree-id2054 . 1) (undo-tree-id2055 . 1) (undo-tree-id2056 . 1) (undo-tree-id2057 . 1) (undo-tree-id2058 . 1) (undo-tree-id2059 . 1) (undo-tree-id2060 . 1) (undo-tree-id2061 . 1) (undo-tree-id2062 . 1) (undo-tree-id2063 . 1) (undo-tree-id2064 . 1) (undo-tree-id2065 . 1) (undo-tree-id2066 . 1) (undo-tree-id2067 . 1) (undo-tree-id2068 . 1) (undo-tree-id2069 . 1) (undo-tree-id2070 . 1) (undo-tree-id2071 . 1) (undo-tree-id2072 . 1) (undo-tree-id2073 . 1) (undo-tree-id2074 . 1) (undo-tree-id2075 . 1) (undo-tree-id2076 . 1) (undo-tree-id2077 . 1) (undo-tree-id2078 . 1) (undo-tree-id2079 . 1) (undo-tree-id2080 . 1) (undo-tree-id2081 . 1) (undo-tree-id2082 . 1) (undo-tree-id2083 . 1) (undo-tree-id2084 . 1) (undo-tree-id2085 . 1) (undo-tree-id2086 . 1) (undo-tree-id2087 . 1) (undo-tree-id2088 . 1) (undo-tree-id2089 . 1) (undo-tree-id2090 . 1) (undo-tree-id2091 . 1) (undo-tree-id2092 . 1) (undo-tree-id2093 . 1) (undo-tree-id2094 . 1) (undo-tree-id2095 . 1) (undo-tree-id2096 . -22) (undo-tree-id2097 . -20) (undo-tree-id2098 . 1) (undo-tree-id2099 . 1) (undo-tree-id2100 . 1) (undo-tree-id2101 . 1) (undo-tree-id2102 . 1) (undo-tree-id2103 . 7) (undo-tree-id2104 . 6) (undo-tree-id2105 . 7) (undo-tree-id2106 . 5) (undo-tree-id2107 . 6) (undo-tree-id2108 . 4) (undo-tree-id2109 . 5) (undo-tree-id2110 . 3) (undo-tree-id2111 . 4) (undo-tree-id2112 . 2) (undo-tree-id2113 . 3) (undo-tree-id2114 . 1) (undo-tree-id2115 . 2) (undo-tree-id2116 . -22) (undo-tree-id2117 . 2) (undo-tree-id2118 . 1) (undo-tree-id2119 . 2) (undo-tree-id2120 . -23) (undo-tree-id2121 . 3) 109) nil (23701 42232 78813 89000) 0 nil]) ((132 . 133) (#(" " 0 1 (fontified nil)) . 132) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . 1) (undo-tree-id2125 . 1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . 1) (undo-tree-id2130 . 1) (undo-tree-id2131 . 1) (undo-tree-id2132 . -1) (#("
" 0 1 (fontified t)) . -133) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . 1) (undo-tree-id2136 . 1) (undo-tree-id2137 . 1) (undo-tree-id2138 . 1) (undo-tree-id2139 . 1) (undo-tree-id2140 . 1) (undo-tree-id2141 . 1) (undo-tree-id2142 . 1) (undo-tree-id2143 . 1) (undo-tree-id2144 . 1) (undo-tree-id2145 . 1) (undo-tree-id2146 . 1) (undo-tree-id2147 . 1) (undo-tree-id2148 . 1) (undo-tree-id2149 . 1) (undo-tree-id2150 . 1) (undo-tree-id2151 . 1) (undo-tree-id2152 . 1) (undo-tree-id2153 . 1) (undo-tree-id2154 . 1) (undo-tree-id2155 . 1) (undo-tree-id2156 . 1) (undo-tree-id2157 . 1) (undo-tree-id2158 . 1) (undo-tree-id2159 . 1) (undo-tree-id2160 . 1) (undo-tree-id2161 . 1) (undo-tree-id2162 . 1) (undo-tree-id2163 . 1) (undo-tree-id2164 . 1) (undo-tree-id2165 . 1) (undo-tree-id2166 . 1) (undo-tree-id2167 . 1) (undo-tree-id2168 . 1) (undo-tree-id2169 . 1) (undo-tree-id2170 . 1) (undo-tree-id2171 . 1) (undo-tree-id2172 . 1) (undo-tree-id2173 . 1) (undo-tree-id2174 . 1) (undo-tree-id2175 . 1) (undo-tree-id2176 . 1) (undo-tree-id2177 . 1) (undo-tree-id2178 . 1) (undo-tree-id2179 . 1) (undo-tree-id2180 . 1) (undo-tree-id2181 . 1) (undo-tree-id2182 . 1) (undo-tree-id2183 . 1) (undo-tree-id2184 . 1) (undo-tree-id2185 . 1) (undo-tree-id2186 . 1) (undo-tree-id2187 . 1) (undo-tree-id2188 . 1) (undo-tree-id2189 . 1) (undo-tree-id2190 . 1) (undo-tree-id2191 . 1) (undo-tree-id2192 . 1) (undo-tree-id2193 . 1) (undo-tree-id2194 . 1) (undo-tree-id2195 . 1) (undo-tree-id2196 . 1) (undo-tree-id2197 . 1) (undo-tree-id2198 . 1) (undo-tree-id2199 . 1) (undo-tree-id2200 . 1) (undo-tree-id2201 . 1) (undo-tree-id2202 . 1) (undo-tree-id2203 . 1) (undo-tree-id2204 . 1) (undo-tree-id2205 . 1) (undo-tree-id2206 . 1) (undo-tree-id2207 . 1) (undo-tree-id2208 . 1) (undo-tree-id2209 . 1) (undo-tree-id2210 . 1) (undo-tree-id2211 . 1) (undo-tree-id2212 . 1) (undo-tree-id2213 . 1) (undo-tree-id2214 . 1) (undo-tree-id2215 . 1) (undo-tree-id2216 . 1) (undo-tree-id2217 . 1) (undo-tree-id2218 . 1) (undo-tree-id2219 . 1) (undo-tree-id2220 . 1) (undo-tree-id2221 . 1) (undo-tree-id2222 . 1) 132) nil (23701 42232 79101 903000) 0 nil]) ((#("project_dir.config_dir();" 0 1 (fontified t) 1 11 (fontified t) 11 25 (fontified t)) . 133) (undo-tree-id2223 . 1) (undo-tree-id2224 . 2) (undo-tree-id2225 . 1) (undo-tree-id2226 . 3) (undo-tree-id2227 . 2) (undo-tree-id2228 . 4) (undo-tree-id2229 . 3) (undo-tree-id2230 . 5) (undo-tree-id2231 . 4) (undo-tree-id2232 . 6) (undo-tree-id2233 . 5) (undo-tree-id2234 . 7) (undo-tree-id2235 . 6) (undo-tree-id2236 . 8) (undo-tree-id2237 . 7) (undo-tree-id2238 . 9) (undo-tree-id2239 . 8) (undo-tree-id2240 . 10) (undo-tree-id2241 . 9) (undo-tree-id2242 . 11) (undo-tree-id2243 . 10) (undo-tree-id2244 . 12) (undo-tree-id2245 . 11) (undo-tree-id2246 . 13) (undo-tree-id2247 . 12) (undo-tree-id2248 . 14) (undo-tree-id2249 . 13) (undo-tree-id2250 . 15) (undo-tree-id2251 . 14) (undo-tree-id2252 . 16) (undo-tree-id2253 . 15) (undo-tree-id2254 . 17) (undo-tree-id2255 . 16) (undo-tree-id2256 . 18) (undo-tree-id2257 . 17) (undo-tree-id2258 . 19) (undo-tree-id2259 . 18) (undo-tree-id2260 . 20) (undo-tree-id2261 . 19) (undo-tree-id2262 . 21) (undo-tree-id2263 . 20) (undo-tree-id2264 . 22) (undo-tree-id2265 . 21) (undo-tree-id2266 . 23) (undo-tree-id2267 . 22) (undo-tree-id2268 . 24) (undo-tree-id2269 . 23) (undo-tree-id2270 . 25) (undo-tree-id2271 . 24) (undo-tree-id2272 . 25) (undo-tree-id2273 . 25) (undo-tree-id2274 . -1) (undo-tree-id2275 . 24) (undo-tree-id2276 . 25) (undo-tree-id2277 . 25) (undo-tree-id2278 . 24) (undo-tree-id2279 . 25) (undo-tree-id2280 . -1) (undo-tree-id2281 . 10) (undo-tree-id2282 . 11) (undo-tree-id2283 . 10) (undo-tree-id2284 . 12) (undo-tree-id2285 . 11) (undo-tree-id2286 . 13) (undo-tree-id2287 . 12) (undo-tree-id2288 . 14) (undo-tree-id2289 . 13) (undo-tree-id2290 . 15) (undo-tree-id2291 . 14) (undo-tree-id2292 . 16) (undo-tree-id2293 . 15) (undo-tree-id2294 . 17) (undo-tree-id2295 . 16) (undo-tree-id2296 . 18) (undo-tree-id2297 . 17) (undo-tree-id2298 . 19) (undo-tree-id2299 . 18) (undo-tree-id2300 . 20) (undo-tree-id2301 . 19) (undo-tree-id2302 . 21) (undo-tree-id2303 . 20) (undo-tree-id2304 . 22) (undo-tree-id2305 . 21) (undo-tree-id2306 . 23) (undo-tree-id2307 . 22) (undo-tree-id2308 . 24) (undo-tree-id2309 . 23) (undo-tree-id2310 . 25) (undo-tree-id2311 . 24)) nil (23701 42232 79380 109000) 0 nil]) ((nil rear-nonsticky nil 195 . 196) (nil fontified nil 159 . 196) (159 . 196)) nil (23701 42232 79407 70000) 0 nil]) ((#("    " 0 4 (fontified t)) . -159) (undo-tree-id2312 . -4) 163 (158 . 163) 133) nil (23701 42232 79418 276000) 0 nil] [nil nil ((nil rear-nonsticky nil 170 . 171) (nil fontified nil 134 . 171) (134 . 171) 133) ((#("env::var(\"QUTE_CONFIG_DIR\").unwrap();" 0 3 (fontified nil face font-lock-constant-face) 3 9 (fontified nil) 9 24 (fontified nil face font-lock-string-face) 24 25 (fontified nil syntax-table #1=(15) face font-lock-string-face) 25 26 (fontified nil face font-lock-string-face) 26 36 (fontified nil) 36 37 (fontified nil rear-nonsticky nil)) . 134) (undo-tree-id1987 . -36) (undo-tree-id1988 . -36) (undo-tree-id1989 . 1) (nil rear-nonsticky t 170 . 171)) (23701 42224 405243 3000) 0 nil]) ((#("env::var(\"QUTE_CONFIG_DIR\").unwrap();" 0 3 (fontified t face font-lock-constant-face) 3 8 (fontified t) 8 9 (fontified t) 9 24 (fontified t face font-lock-string-face) 24 25 (fontified t face font-lock-string-face) 25 26 (fontified t face font-lock-string-face) 26 28 (fontified t) 28 34 (fontified t) 34 37 (fontified t)) . 111) (undo-tree-id1870 . 27) (undo-tree-id1871 . -14) (undo-tree-id1872 . 1) (undo-tree-id1873 . 1) (undo-tree-id1874 . 1) (undo-tree-id1875 . 1) (undo-tree-id1876 . 1) (undo-tree-id1877 . 1) (undo-tree-id1878 . 1) (undo-tree-id1879 . 1) (undo-tree-id1880 . 1) (undo-tree-id1881 . 1) (undo-tree-id1882 . -36) (undo-tree-id1883 . 1) (undo-tree-id1884 . 1) (undo-tree-id1885 . -36) (undo-tree-id1886 . 1) (undo-tree-id1887 . 1) (undo-tree-id1888 . 1) (undo-tree-id1889 . 1) (undo-tree-id1890 . 1) (undo-tree-id1891 . 1) (undo-tree-id1892 . 1) (undo-tree-id1893 . 1) (undo-tree-id1894 . 1) (undo-tree-id1895 . 1) (undo-tree-id1896 . 1) (undo-tree-id1897 . 1) (undo-tree-id1898 . 1) (undo-tree-id1899 . 1) (undo-tree-id1900 . 1) (undo-tree-id1901 . 1) (undo-tree-id1902 . 1) (undo-tree-id1903 . 1) (undo-tree-id1904 . 1) (undo-tree-id1905 . 1) (undo-tree-id1906 . 1) (undo-tree-id1907 . 1) (undo-tree-id1908 . 1) (undo-tree-id1909 . 1) (undo-tree-id1910 . 1) (undo-tree-id1911 . 1) (undo-tree-id1912 . 1) (undo-tree-id1913 . 1) (undo-tree-id1914 . 1) (undo-tree-id1915 . 1) (undo-tree-id1916 . 1) (undo-tree-id1917 . 1) (undo-tree-id1918 . 1) (undo-tree-id1919 . 1) (undo-tree-id1920 . 1) (undo-tree-id1921 . 1) (undo-tree-id1922 . 1) (undo-tree-id1923 . 1) (undo-tree-id1924 . 1) (undo-tree-id1925 . 1) (undo-tree-id1926 . 1) (undo-tree-id1927 . 1) (undo-tree-id1928 . 1) (undo-tree-id1929 . 1) (undo-tree-id1930 . 1) (undo-tree-id1931 . 1) (undo-tree-id1932 . 1) (undo-tree-id1933 . 1) (undo-tree-id1934 . 1) (undo-tree-id1935 . 1) (undo-tree-id1936 . 1) (undo-tree-id1937 . 1) (undo-tree-id1938 . 1) (undo-tree-id1939 . 1) (undo-tree-id1940 . 1) (undo-tree-id1941 . 1) (undo-tree-id1942 . 1) (undo-tree-id1943 . 1) (undo-tree-id1944 . 1) (undo-tree-id1945 . 1) (undo-tree-id1946 . 1) (undo-tree-id1947 . 1) (undo-tree-id1948 . 1) (undo-tree-id1949 . 1) (undo-tree-id1950 . 1) (undo-tree-id1951 . 1) (undo-tree-id1952 . 1) (undo-tree-id1953 . 1) (undo-tree-id1954 . 1) (undo-tree-id1955 . 1) (undo-tree-id1956 . 1) (undo-tree-id1957 . 1) (undo-tree-id1958 . 1) (undo-tree-id1959 . 1) (undo-tree-id1960 . 1) (undo-tree-id1961 . 1) (undo-tree-id1962 . 1) (undo-tree-id1963 . 1) (undo-tree-id1964 . 1) (undo-tree-id1965 . 1) (undo-tree-id1966 . 1) (undo-tree-id1967 . 1) (undo-tree-id1968 . 1) (undo-tree-id1969 . 1) (undo-tree-id1970 . 1) (undo-tree-id1971 . 1) (undo-tree-id1972 . 1) (undo-tree-id1973 . 1) (undo-tree-id1974 . 1) (undo-tree-id1975 . 1) (undo-tree-id1976 . 1) (undo-tree-id1977 . 1) (undo-tree-id1978 . -36) (undo-tree-id1979 . 1) (undo-tree-id1980 . 1) (undo-tree-id1981 . 1) (undo-tree-id1982 . 1) (undo-tree-id1983 . 1) (undo-tree-id1984 . 37) (undo-tree-id1985 . 37) (undo-tree-id1986 . -3) (t 23701 42204 322248 696000)) nil (23701 42224 406157 916000) 0 nil]) ((147 . 148) (#(")" 0 1 (fontified nil)) . 147) (undo-tree-id1853 . -1) (undo-tree-id1854 . 1) (146 . 147) (145 . 147) (#("(" 0 1 (fontified nil)) . -145) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (145 . 146) (139 . 145) (#("unw" 0 3 (fontified t)) . -139) (undo-tree-id1857 . -3) (undo-tree-id1858 . 3) (undo-tree-id1859 . 2) (undo-tree-id1860 . 3) (undo-tree-id1861 . -2) (undo-tree-id1862 . 1) 142 (141 . 142) (138 . 141)) nil (23701 42204 252914 763000) 0 nil]) ((131 . 136) (121 . 131) (120 . 122) (#("\"" 0 1 (fontified nil)) . -120) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (120 . 121) (119 . 121) (#("(" 0 1 (fontified nil)) . -119) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (116 . 120) (111 . 116) (#("ProjectDirs::from(\"\", \"\", \"qutebrowser\").unwrap();" 0 11 (fontified t face font-lock-type-face) 11 18 (fontified t) 18 20 (fontified t face font-lock-string-face) 20 22 (fontified t) 22 24 (fontified t face font-lock-string-face) 24 26 (fontified t) 26 37 (fontified t face font-lock-string-face) 37 38 (syntax-table #1# fontified t face font-lock-string-face) 38 39 (fontified t face font-lock-string-face) 39 40 (fontified t) 40 50 (fontified t)) . 111) (undo-tree-id1867 . 50) (undo-tree-id1868 . 50) (undo-tree-id1869 . -11) (t 23701 42161 159145 418000)) nil (23701 42204 252946 608000) 0 nil]) ((#("use directories::ProjectDirs;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 15 (fontified t face font-lock-constant-face) 15 17 (fontified t) 17 28 (fontified t face font-lock-type-face) 28 29 (fontified t) 29 30 (fontified t)) . 1) (undo-tree-id1850 . 13) (undo-tree-id1851 . -28) (undo-tree-id1852 . 30) (t 23701 42051 976378 166000)) nil (23701 42161 69018 667000) 0 nil]) ((#("use std::path::Path;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 7 (fontified t face font-lock-constant-face) 7 9 (fontified t) 9 13 (fontified t face font-lock-constant-face) 13 15 (fontified t) 15 19 (fontified t face font-lock-type-face) 19 21 (fontified t)) . 83) (undo-tree-id1816 . -19) (undo-tree-id1817 . 2) (undo-tree-id1818 . 2) (undo-tree-id1819 . 2) 102) nil (23701 42051 911934 262000) 0 nil]) ((#(", UserDirs}" 0 2 (fontified t) 2 10 (fontified t face font-lock-type-face) 10 11 (fontified t)) . 29) (undo-tree-id1820 . 11)) nil (23701 42051 911941 662000) 0 nil]) ((#("{BaseDirs, " 0 1 (fontified t) 1 9 (fontified t face font-lock-type-face) 9 11 (fontified t)) . 18) (undo-tree-id1821 . 1) (undo-tree-id1822 . 2) (undo-tree-id1823 . 1) (undo-tree-id1824 . 3) (undo-tree-id1825 . 2) (undo-tree-id1826 . 4) (undo-tree-id1827 . 3) (undo-tree-id1828 . 5) (undo-tree-id1829 . 4) (undo-tree-id1830 . 6) (undo-tree-id1831 . 5) (undo-tree-id1832 . 7) (undo-tree-id1833 . 6) (undo-tree-id1834 . 8) (undo-tree-id1835 . 7) (undo-tree-id1836 . 9) (undo-tree-id1837 . 8) (undo-tree-id1838 . 10) (undo-tree-id1839 . 9) (undo-tree-id1840 . 11) (undo-tree-id1841 . 10) (undo-tree-id1842 . 11) (undo-tree-id1843 . 11) (undo-tree-id1844 . 10) (undo-tree-id1845 . 11) (undo-tree-id1846 . 10) (undo-tree-id1847 . -9) (undo-tree-id1848 . 11) (undo-tree-id1849 . 10) (t 23701 41995 129995 747000)) nil (23701 42051 911978 298000) 0 nil]) ((1008 . 1015) (#("new_k" 0 5 (fontified nil)) . 1008) (undo-tree-id1733 . 5) (undo-tree-id1734 . 5) (undo-tree-id1735 . 5) (undo-tree-id1736 . 5) (undo-tree-id1737 . -3) (undo-tree-id1738 . -3) (undo-tree-id1739 . -3) (undo-tree-id1740 . -3) (undo-tree-id1741 . -3) (undo-tree-id1742 . -3) (undo-tree-id1743 . 5) (undo-tree-id1744 . 5) (undo-tree-id1745 . -3) (undo-tree-id1746 . -3) (undo-tree-id1747 . -3) (undo-tree-id1748 . -3) (undo-tree-id1749 . -3) (undo-tree-id1750 . -3) (undo-tree-id1751 . -3) (undo-tree-id1752 . -3) (undo-tree-id1753 . -3) (undo-tree-id1754 . -3) (undo-tree-id1755 . -3) (undo-tree-id1756 . -3) (undo-tree-id1757 . -3) (undo-tree-id1758 . -3) (undo-tree-id1759 . -3) (undo-tree-id1760 . -3) (undo-tree-id1761 . -3) (undo-tree-id1762 . -3) (undo-tree-id1763 . -3) (undo-tree-id1764 . -3) (undo-tree-id1765 . -3) (undo-tree-id1766 . -3) (undo-tree-id1767 . -3) (undo-tree-id1768 . -3) (undo-tree-id1769 . 5) (undo-tree-id1770 . 5) (undo-tree-id1771 . 5) (undo-tree-id1772 . 5) (1011 . 1013) (#("`" 0 1 (fontified nil)) . -1011) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (#("`" 0 1 (fontified nil)) . 1012) (undo-tree-id1793 . -1) (undo-tree-id1794 . 1) (undo-tree-id1795 . 1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (1011 . 1013) (#("`" 0 1 (fontified nil)) . -1011) (undo-tree-id1802 . -1) (undo-tree-id1803 . -1) (1008 . 1012) (#("key" 0 3 (fontified t)) . 1008) (undo-tree-id1804 . 3) (undo-tree-id1805 . 3) (undo-tree-id1806 . 3)) nil (23701 41995 102077 54000) 0 nil]) ((994 . 1001) (#("new_k" 0 5 (fontified t)) . -994) (undo-tree-id1807 . -5) 999 (997 . 999) (#("`" 0 1 (fontified nil)) . -997) (undo-tree-id1808 . -1) (#("`" 0 1 (fontified t)) . 998) (997 . 999) (#("`" 0 1 (fontified nil)) . -997) (994 . 998) (#("key" 0 3 (fontified t)) . 994) (undo-tree-id1809 . -2) 996) nil (23701 41995 102120 874000) 0 nil]) ((#("        " 0 8 (fontified nil)) . -1094) (undo-tree-id1810 . -8) (undo-tree-id1811 . -8) (undo-tree-id1812 . -8) (undo-tree-id1813 . -8) (1090 . 1094) (#("        " 0 8 (fontified nil)) . -1024) (1020 . 1024) (#("        " 0 8 (fontified nil)) . -1017) (1013 . 1017) (#("            " 0 12 (fontified nil)) . -994) (986 . 994) (#("            " 0 12 (fontified nil)) . -938) (930 . 938) (#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -911) (undo-tree-id1814 . -8) (undo-tree-id1815 . -8) (907 . 911) 1118) nil (23701 41995 102154 10000) 0 nil]) ((nil rear-nonsticky nil 914 . 915) (#("
" 0 1 (fontified nil)) . -1150) (906 . 1151) 905 (t 23701 41369 67374 829000)) nil (23701 41995 102165 705000) 0 nil]) ((770 . 771) (t 23701 41330 7636 63000)) nil (23701 41369 2945 742000) 0 nil]) ((#("    
" 0 4 (fontified t) 4 5 (fontified t)) . 771) (undo-tree-id1536 . -3) 774) nil (23701 41329 946855 391000) 0 nil]) ((763 . 768) (756 . 763) (#("new_" 0 4 (fontified t)) . -756) (undo-tree-id1537 . -4) 760 (754 . 760) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 754) (753 . 754) (#(" " 0 1 (fontified nil)) . -753) (753 . 754) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -753) (753 . 754) (#("
" 0 1 (fontified t face font-lock-string-face)) . -753) (undo-tree-id1538 . -1) 754 (753 . 754) (752 . 753) (#("m" 0 1 (fontified t face font-lock-string-face)) . -752) (undo-tree-id1539 . -1) (#("
" 0 1 (fontified t face font-lock-string-face)) . -753) (undo-tree-id1540 . -1) 754 (753 . 754) (751 . 753) (#("
" 0 1 (fontified t face font-lock-string-face)) . -751) (undo-tree-id1541 . -1) 752 (751 . 752) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 751) (750 . 751) (749 . 751) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -749) (748 . 750) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 748) (747 . 748) (746 . 748) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -746) (746 . 747) (745 . 747) (#("\"" 0 1 (fontified nil)) . -745) (745 . 746) (744 . 746) (#("(" 0 1 (fontified nil)) . -744) (736 . 745) (735 . 737) (#("(" 0 1 (fontified nil)) . -735) (731 . 736) (#("-" 0 1 (fontified t)) . -731) (undo-tree-id1542 . -1) 732 (731 . 732) (#("(" 0 1 (fontified nil)) . -731) (undo-tree-id1543 . -1) (#(")" 0 1 (fontified t)) . 732) (731 . 733) (#("(" 0 1 (fontified nil)) . -731) (720 . 732) (715 . 720) 715) nil (23701 41329 946889 618000) 0 nil]) ((#("if !change_made { output.push_str(&format!({})" 0 1 (fontified t face font-lock-keyword-face) 1 2 (fontified t face font-lock-keyword-face) 2 4 (fontified t) 4 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 25 (fontified t) 25 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 42 (fontified t face rust-builtin-formatting-macro-face) 42 43 (fontified t) 43 45 (fontified t) 45 46 (fontified t)) . 720) (undo-tree-id1544 . 1)) nil (23701 41329 946900 280000) 0 nil]) ((#(" " 0 1 (fontified t)) . 512)) nil (23701 41329 946901 980000) 0 nil]) ((#("mut" 0 3 (fontified t face font-lock-keyword-face)) . 512)) nil (23701 41329 946903 285000) 0 nil]) ((#("    let mut change_made = false;
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 23 (fontified t face font-lock-variable-name-face) 23 26 (fontified t) 26 31 (fontified t face font-lock-keyword-face) 31 32 (fontified t) 32 33 (fontified t)) . 504) (undo-tree-id1545 . -15) 519) nil (23701 41329 946906 125000) 0 nil]) ((670 . 671) (#("=" 0 1 (fontified t)) . 670)) nil (23701 41329 946909 813000) 0 nil]) ((#("        } else {
" 0 8 (fontified t) 8 10 (fontified t) 10 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 16 (fontified t) 16 17 (fontified t)) . 683) (undo-tree-id1546 . -17) (undo-tree-id1547 . 17) (undo-tree-id1548 . -8) (undo-tree-id1549 . 17) (undo-tree-id1550 . 17) (undo-tree-id1551 . 17) (undo-tree-id1552 . 17) (undo-tree-id1553 . 17) (undo-tree-id1554 . 17) (undo-tree-id1555 . 17) (undo-tree-id1556 . 17) (undo-tree-id1557 . 17) 691) nil (23701 41329 946924 446000) 0 nil]) ((#("            output.push_str(format!(\"{} {}\\n\", new_key, url).as_str());
            change_made = true;
" 0 19 (fontified t) 19 27 (fontified t) 27 28 (fontified t) 28 35 (fontified t face rust-builtin-formatting-macro-face) 35 36 (fontified t) 36 37 (fontified t face font-lock-string-face) 37 39 (fontified t face rust-string-interpolation-face) 39 40 (fontified t face font-lock-string-face) 40 41 (fontified t face rust-string-interpolation-face) 41 42 (fontified t face rust-string-interpolation-face) 42 44 (fontified t face font-lock-string-face) 44 45 (fontified t face font-lock-string-face) 45 47 (fontified t) 47 59 (fontified t) 59 60 (fontified t) 60 61 (fontified t) 61 67 (fontified t) 67 71 (fontified t) 71 72 (fontified t) 72 84 (fontified t) 84 98 (fontified t) 98 102 (fontified t face font-lock-keyword-face) 102 103 (fontified t) 103 104 (fontified t)) . 683) (undo-tree-id1558 . -103) (undo-tree-id1559 . -47) (undo-tree-id1560 . -103) (undo-tree-id1561 . -43) (undo-tree-id1562 . -103) (undo-tree-id1563 . 45) (undo-tree-id1564 . 45) (undo-tree-id1565 . 45) (undo-tree-id1566 . 45) (undo-tree-id1567 . 45) (undo-tree-id1568 . 45) (undo-tree-id1569 . 45) (undo-tree-id1570 . 45) (undo-tree-id1571 . 45) (undo-tree-id1572 . -47) (undo-tree-id1573 . -103) 786) nil (23701 41329 946942 973000) 0 nil]) ((#("}" 0 1 (fontified nil)) . 923) (922 . 923) (921 . 923) (#("{" 0 1 (fontified nil)) . -921) (921 . 922) (920 . 922) (#("(" 0 1 (fontified nil)) . -920) (920 . 921) (#(")" 0 1 (fontified t)) . -920) (undo-tree-id1574 . -1) (#("}" 0 1 (fontified t)) . -921) (undo-tree-id1575 . -1) 922) nil (23701 41329 946951 91000) 0 nil]) (920) nil (23701 41329 946956 390000) 0 nil]) ((739 . 742)) nil (23701 41329 946957 561000) 0 nil]) ((#(".unwrap()" 0 7 (fontified t) 7 9 (fontified t)) . 739) (undo-tree-id1576 . 9) (undo-tree-id1577 . 9) (undo-tree-id1578 . 9) (undo-tree-id1579 . 9) (undo-tree-id1580 . 9) (undo-tree-id1581 . 9) (undo-tree-id1582 . 9) (undo-tree-id1583 . 9) (undo-tree-id1584 . 9) (undo-tree-id1585 . 9)) nil (23701 41329 946966 659000) 0 nil]) ((#("env::var(\"QUTE_URL\")" 0 3 (fontified t face font-lock-constant-face) 3 8 (fontified t) 8 9 (fontified t) 9 10 (fontified t face font-lock-string-face) 10 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 20 (fontified t)) . 739) (undo-tree-id1586 . 10) (undo-tree-id1587 . -14) (undo-tree-id1588 . 20) (undo-tree-id1589 . 20) (undo-tree-id1590 . -3) (undo-tree-id1591 . 19) (undo-tree-id1592 . 20) (undo-tree-id1593 . 18) (undo-tree-id1594 . 19) (undo-tree-id1595 . 19) (undo-tree-id1596 . 18) (undo-tree-id1597 . 20) (undo-tree-id1598 . 19)) nil (23701 41329 946981 82000) 0 nil]) ((#(")" 0 1 (fontified t)) . 629) (undo-tree-id1599 . 1) (undo-tree-id1600 . 1) (undo-tree-id1601 . 1) (undo-tree-id1602 . 1) (undo-tree-id1603 . 1) (undo-tree-id1604 . 1) (undo-tree-id1605 . 1) (undo-tree-id1606 . 1) (undo-tree-id1607 . 1) (undo-tree-id1608 . 1) (undo-tree-id1609 . 1) (undo-tree-id1610 . 1) (undo-tree-id1611 . 1) (undo-tree-id1612 . 1) (undo-tree-id1613 . 1) (undo-tree-id1614 . 1) (undo-tree-id1615 . 1) (undo-tree-id1616 . 1) (undo-tree-id1617 . 1) (undo-tree-id1618 . 1) (undo-tree-id1619 . 1)) nil (23701 41329 947005 370000) 0 nil]) ((#("url" 0 3 (fontified t face font-lock-variable-name-face)) . 629) (undo-tree-id1620 . 1) (undo-tree-id1621 . 2) (undo-tree-id1622 . 1) (undo-tree-id1623 . 3) (undo-tree-id1624 . 2) (undo-tree-id1625 . 3) (undo-tree-id1626 . 3) (undo-tree-id1627 . 3) (undo-tree-id1628 . 3) (undo-tree-id1629 . 3) (undo-tree-id1630 . 3) (undo-tree-id1631 . 3) (undo-tree-id1632 . 3) (undo-tree-id1633 . -3) (undo-tree-id1634 . 3) (undo-tree-id1635 . 3)) nil (23701 41329 947023 180000) 0 nil]) ((#(", " 0 2 (fontified t)) . 629) (undo-tree-id1636 . 1) (undo-tree-id1637 . 2) (undo-tree-id1638 . 1) (undo-tree-id1639 . 2) (undo-tree-id1640 . 2)) nil (23701 41329 947029 489000) 0 nil]) ((#("(" 0 1 (fontified t)) . 626) (undo-tree-id1641 . 1)) nil (23701 41329 947032 387000) 0 nil]) ((660 . 661) (#("'" 0 1 (fontified nil)) . -660) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . 1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (#("'" 0 1 (fontified t)) . 661) (undo-tree-id1662 . -1) (undo-tree-id1663 . 1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (660 . 662) (#("'" 0 1 (fontified nil)) . -660) (660 . 661) (#("," 0 1 (fontified t)) . -660) (undo-tree-id1670 . -1) (#(" " 0 1 (fontified t)) . -661) (undo-tree-id1671 . -1) (#("w" 0 1 (fontified t)) . -662) (undo-tree-id1672 . -1) (#("o" 0 1 (fontified t)) . -663) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) 664 (#("r" 0 1 (fontified t)) . -664) (undo-tree-id1675 . -1) (#("d" 0 1 (fontified t)) . -665) (undo-tree-id1676 . -1) (#("s" 0 1 (fontified t)) . -666) (undo-tree-id1677 . -1) (#("." 0 1 (fontified t)) . -667) (undo-tree-id1678 . -1) (#("n" 0 1 (fontified t)) . -668) (undo-tree-id1679 . -1) (#("t" 0 1 (fontified t)) . -669) (undo-tree-id1680 . -1) (#("h" 0 1 (fontified t)) . -670) (undo-tree-id1681 . -1) (#("(" 0 1 (fontified t)) . -671) (undo-tree-id1682 . -1) (#("0" 0 1 (fontified t)) . -672) (undo-tree-id1683 . -1) (#(")" 0 1 (fontified t)) . -673) (undo-tree-id1684 . -1) (#("." 0 1 (fontified t)) . -674) (undo-tree-id1685 . -1) (#("u" 0 1 (fontified t)) . -675) (undo-tree-id1686 . -1) (#("n" 0 1 (fontified t)) . -676) (undo-tree-id1687 . -1) (#("w" 0 1 (fontified t)) . -677) (undo-tree-id1688 . -1) (#("r" 0 1 (fontified t)) . -678) (undo-tree-id1689 . -1) (#("a" 0 1 (fontified t)) . -679) (undo-tree-id1690 . -1) (#("p" 0 1 (fontified t)) . -680) (undo-tree-id1691 . -1) (#("(" 0 1 (fontified t)) . -681) (undo-tree-id1692 . -1) (#(")" 0 1 (fontified t)) . -682) (undo-tree-id1693 . -1) (#(")" 0 1 (fontified t)) . -683) (undo-tree-id1694 . -1) (#(";" 0 1 (fontified t)) . -684) (undo-tree-id1695 . -1) 685) nil (23701 41329 947100 813000) 0 nil]) ((#("(" 0 1 (fontified t)) . 639) (undo-tree-id1696 . 1)) nil (23701 41329 947113 502000) 0 nil]) ((408 . 409) (#(")" 0 1 (fontified nil)) . 408) (undo-tree-id1697 . -1) (undo-tree-id1698 . 1) (407 . 408) (406 . 408) (#("(" 0 1 (fontified nil)) . -406) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (406 . 407) (400 . 406) (#("unwr" 0 4 (fontified t)) . -400) (undo-tree-id1701 . -4) (undo-tree-id1702 . 4) (undo-tree-id1703 . 3) (undo-tree-id1704 . 2) (undo-tree-id1705 . 1) 404 (402 . 404) (399 . 402) (#(">" 0 1 (fontified t syntax-table #2=(1))) . -399) (undo-tree-id1706 . -1) (undo-tree-id1707 . -1) 400 (399 . 400) (#(")" 0 1 (fontified nil)) . 399) (undo-tree-id1708 . 1) (undo-tree-id1709 . 1) (398 . 399) (#(" " 0 1 (fontified nil)) . -398) (398 . 399) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -398) (398 . 399) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 398) (undo-tree-id1710 . 1) (undo-tree-id1711 . -1) (397 . 398) (#(" " 0 1 (fontified nil)) . -397) (undo-tree-id1712 . -1) (397 . 398) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -397) (undo-tree-id1713 . -1) (390 . 398) (389 . 390) (#("U" 0 1 (fontified t face font-lock-string-face)) . -389) (undo-tree-id1714 . -1) 390 (389 . 390) (388 . 390) (#("\"" 0 1 (fontified nil)) . -388) (388 . 389) (387 . 389) (#("(" 0 1 (fontified nil)) . -387) (373 . 388) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -373) (undo-tree-id1715 . -1) (#("u" 0 1 (fontified t face font-lock-variable-name-face)) . -374) (undo-tree-id1716 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -375) (undo-tree-id1717 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -376) (undo-tree-id1718 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -377) (undo-tree-id1719 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -378) (undo-tree-id1720 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -379) (undo-tree-id1721 . -1) 380 (373 . 380) (#("u" 0 1 (fontified t face font-lock-variable-name-face)) . -373) (undo-tree-id1722 . -1) 374 (373 . 374) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -373) (undo-tree-id1723 . -1) (#("u" 0 1 (fontified t face font-lock-variable-name-face)) . -374) (undo-tree-id1724 . -1) 375 (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -375) (undo-tree-id1725 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -376) (undo-tree-id1726 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -377) (undo-tree-id1727 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -378) (undo-tree-id1728 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -379) (undo-tree-id1729 . -1) 380 (370 . 380) (#("r" 0 1 (fontified t)) . -370) (undo-tree-id1730 . -1) 371 (370 . 371) (#("r" 0 1 (fontified t)) . -370) (undo-tree-id1731 . -1) (#("y" 0 1 (fontified t)) . -371) (undo-tree-id1732 . -1) 372 (369 . 372) (364 . 369) 356) nil (23701 41329 947174 496000) 0 nil]) ((925 . 933) (924 . 926) (#("(" 0 1 (fontified nil)) . 924) (undo-tree-id1535 . -1) (916 . 925) (#("pus" 0 3 (fontified nil)) . 916) (909 . 919) (#("put" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 909) (908 . 912) (907 . 909) (#("{" 0 1 (fontified nil)) . 907) (907 . 908) (#("{}" 0 1 (fontified nil) 1 2 (fontified nil)) . 907) (907 . 909) (#("{" 0 1 (fontified nil)) . 907) (895 . 908) (#("change_" 0 7 (fontified nil)) . 895) (887 . 902) (#("    " 0 4 (fontified nil)) . 886) (885 . 891)) ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 885) (undo-tree-id1415 . -5) (undo-tree-id1416 . -5) (undo-tree-id1417 . -5) (undo-tree-id1418 . -5) (#("
" 0 1 (fontified nil)) . 890) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (undo-tree-id1423 . 1) (undo-tree-id1424 . 1) (undo-tree-id1425 . 1) (undo-tree-id1426 . 1) (undo-tree-id1427 . 1) (undo-tree-id1428 . 1) (undo-tree-id1429 . 1) (undo-tree-id1430 . 1) (undo-tree-id1431 . 1) (undo-tree-id1432 . 1) (undo-tree-id1433 . 1) (undo-tree-id1434 . 1) (undo-tree-id1435 . 1) (undo-tree-id1436 . 1) (886 . 890) (#("    " 0 4 (fontified nil)) . 887) (undo-tree-id1437 . -4) (undo-tree-id1438 . -4) (undo-tree-id1439 . -4) (undo-tree-id1440 . -4) (#("i" 0 1 (fontified nil face font-lock-keyword-face)) . 891) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (#("f !change_" 0 1 (fontified nil face font-lock-keyword-face) 1 3 (fontified nil) 3 10 (fontified nil)) . 892) (undo-tree-id1445 . -3) (undo-tree-id1446 . -3) (undo-tree-id1447 . -3) (undo-tree-id1448 . -3) (895 . 902) (#("change_made" 0 11 (fontified nil)) . 895) (undo-tree-id1449 . -11) (undo-tree-id1450 . -11) (undo-tree-id1451 . -11) (undo-tree-id1452 . -11) (#(" {" 0 1 (fontified nil) 1 2 (fontified nil)) . 906) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (907 . 908) (#("{}" 0 1 (fontified nil) 1 2 (fontified nil)) . 907) (907 . 909) (#("{" 0 1 (fontified nil)) . 907) (907 . 908) (#("{}" 0 1 (fontified nil) 1 2 (fontified nil)) . 907) (undo-tree-id1457 . 1) (undo-tree-id1458 . 1) (undo-tree-id1459 . 1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . 1) (undo-tree-id1465 . 1) (undo-tree-id1466 . 1) (undo-tree-id1467 . 1) (undo-tree-id1468 . 1) (undo-tree-id1469 . 1) (undo-tree-id1470 . 1) (undo-tree-id1471 . 1) (undo-tree-id1472 . 1) (undo-tree-id1473 . 1) (undo-tree-id1474 . 1) (undo-tree-id1475 . 1) (undo-tree-id1476 . 1) (undo-tree-id1477 . 1) (undo-tree-id1478 . 1) (undo-tree-id1479 . 1) (undo-tree-id1480 . 1) (undo-tree-id1481 . 1) (undo-tree-id1482 . 1) (undo-tree-id1483 . 1) (undo-tree-id1484 . 1) (#(" " 0 1 (fontified nil)) . 908) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (#("put" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 909) (909 . 912) (#("output.pus" 0 7 (fontified nil) 7 10 (fontified nil)) . 909) (undo-tree-id1489 . -7) (undo-tree-id1490 . -7) (undo-tree-id1491 . -7) (undo-tree-id1492 . -7) (916 . 919) (#("push_str" 0 8 (fontified nil)) . 916) (undo-tree-id1493 . 8) (undo-tree-id1494 . 3) (undo-tree-id1495 . -8) (undo-tree-id1496 . -8) (undo-tree-id1497 . -8) (undo-tree-id1498 . -8) (undo-tree-id1499 . -8) (#("(" 0 1 (fontified nil)) . 924) (undo-tree-id1500 . -1) (924 . 925) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 924) (undo-tree-id1501 . 1) (undo-tree-id1502 . -1) (undo-tree-id1503 . 1) (undo-tree-id1504 . 2) (undo-tree-id1505 . 1) (undo-tree-id1506 . 1) (undo-tree-id1507 . 1) (undo-tree-id1508 . 1) (undo-tree-id1509 . 1) (undo-tree-id1510 . 1) (undo-tree-id1511 . 1) (undo-tree-id1512 . 1) (undo-tree-id1513 . 1) (undo-tree-id1514 . 1) (undo-tree-id1515 . 1) (undo-tree-id1516 . 1) (undo-tree-id1517 . 1) (undo-tree-id1518 . 1) (undo-tree-id1519 . 1) (undo-tree-id1520 . 1) (undo-tree-id1521 . 1) (undo-tree-id1522 . 1) (undo-tree-id1523 . 1) (#("&format!" 0 1 (fontified t) 1 8 (fontified t)) . 925) (undo-tree-id1524 . 8) (undo-tree-id1525 . 7) (undo-tree-id1526 . 6) (undo-tree-id1527 . 5) (undo-tree-id1528 . 4) (undo-tree-id1529 . 3) (undo-tree-id1530 . 2) (undo-tree-id1531 . 1) (undo-tree-id1532 . 1) (undo-tree-id1533 . 1) (undo-tree-id1534 . 1)) (23701 40986 835206 173000) 0 nil]) ((791 . 799) (#(" " 0 1 (fontified t)) . -791) (undo-tree-id1406 . -1) 792 (791 . 792) (780 . 791) (#("change" 0 6 (fontified t)) . -780) (undo-tree-id1407 . -6) 786 (780 . 786) (767 . 780) 701) nil (23701 40985 462087 610000) 0 nil]) ((486 . 491) (#("l" 0 1 (fontified t)) . -486) (undo-tree-id1408 . -1) (undo-tree-id1409 . 1) (#("a" 0 1 (fontified t)) . -487) (undo-tree-id1410 . -1) (undo-tree-id1411 . 1) (undo-tree-id1412 . -1) (#("s" 0 1 (fontified t)) . -488) (undo-tree-id1413 . -1) (undo-tree-id1414 . 1) 489 (484 . 489) (463 . 484) (458 . 463) 409) nil (23701 40985 459323 545000) 0 nil]) ((679 . 681) (t 23701 40742 768332 92000)) nil (23701 40985 459334 349000) 0 nil] [nil nil ((#("}" 0 1 (fontified t face rust-string-interpolation-face)) . -678) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) 679 (t 23701 40742 768332 92000)) ((678 . 679)) (23701 40892 584324 244000) 0 nil]) ((793 . 799) (t 23701 40725 545121 318000)) nil (23701 40892 585119 551000) 0 nil]) ((778 . 779) (t 23701 40705 811928 834000)) nil (23701 40725 514173 232000) 0 nil]) ((#("_" 0 1 (fontified t)) . -792) (undo-tree-id1359 . -1) (undo-tree-id1360 . 1) 793 (792 . 793) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 792) (undo-tree-id1361 . 1) (undo-tree-id1362 . 1) (undo-tree-id1363 . 1) (undo-tree-id1364 . 1) (undo-tree-id1365 . 1) (undo-tree-id1366 . 1) (undo-tree-id1367 . 1) (undo-tree-id1368 . 1) (undo-tree-id1369 . 1) (undo-tree-id1370 . 1) (undo-tree-id1371 . -1) (791 . 792) (#(" " 0 1 (fontified nil)) . -791) (undo-tree-id1372 . -1) (791 . 792) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -791) (undo-tree-id1373 . -1) (791 . 792) (#("|" 0 1 (fontified t face font-lock-string-face)) . -791) (undo-tree-id1374 . -1) (undo-tree-id1375 . 1) 792 (789 . 792) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 789) (undo-tree-id1376 . -1) (undo-tree-id1377 . 1) (788 . 789) (787 . 789) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -787) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (787 . 788) (786 . 788) (#("\"" 0 1 (fontified nil)) . -786) (undo-tree-id1380 . -1) (undo-tree-id1381 . -1) (786 . 787) (#("{" 0 1 (fontified nil)) . -786) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) (undo-tree-id1384 . -1) (undo-tree-id1385 . 1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (#("}" 0 1 (fontified t)) . 787) (undo-tree-id1389 . -1) (undo-tree-id1390 . 1) (786 . 788) (#("{" 0 1 (fontified nil)) . -786) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) (786 . 787) (785 . 787) (#("(" 0 1 (fontified nil)) . -785) (undo-tree-id1393 . -1) (undo-tree-id1394 . -1) (778 . 786) (#("line" 0 4 (fontified t)) . 778) (undo-tree-id1395 . 4) (t 23701 40617 112568 255000)) nil (23701 40705 751193 720000) 0 nil]) ((#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -762) (undo-tree-id1273 . -8) (750 . 762) 758) nil (23701 40617 44814 360000) 0 nil]) ((nil rear-nonsticky nil 757 . 758) (750 . 781) 754) nil (23701 40617 44825 189000) 0 nil]) ((#("        output.push_str(line);
" 0 23 (fontified t) 23 30 (fontified t) 30 31 (fontified t)) . 760) (undo-tree-id1274 . 11) (undo-tree-id1275 . -23) (undo-tree-id1276 . -7) (undo-tree-id1277 . 24) 767) nil (23701 40617 44836 446000) 0 nil]) ((749 . 758) (748 . 750) (#("{" 0 1 (fontified nil)) . -748) (undo-tree-id1278 . -1) (undo-tree-id1279 . -1) (743 . 749) (#("l" 0 1 (fontified t)) . -743) (undo-tree-id1280 . -1) (undo-tree-id1281 . 1) (#("e" 0 1 (fontified t)) . -744) (undo-tree-id1282 . -1) (undo-tree-id1283 . 1) (undo-tree-id1284 . -1) (#("s" 0 1 (fontified t)) . -745) (undo-tree-id1285 . -1) (undo-tree-id1286 . 1) 746 (743 . 746) (#("l" 0 1 (fontified t)) . -743) (undo-tree-id1287 . -1) (undo-tree-id1288 . 1) (#("e" 0 1 (fontified t)) . -744) (undo-tree-id1289 . -1) (undo-tree-id1290 . 1) (undo-tree-id1291 . -1) (#("s" 0 1 (fontified t)) . -745) (undo-tree-id1292 . -1) (undo-tree-id1293 . 1) 746 (742 . 746)) nil (23701 40617 44875 975000) 0 nil]) ((730 . 732) (#(";" 0 1 (fontified t)) . -730) (undo-tree-id1294 . -1) 731) nil (23701 40617 44886 509000) 0 nil]) ((#(" " 0 1 (fontified t)) . 665) (undo-tree-id1295 . 1) (undo-tree-id1296 . 1) (undo-tree-id1297 . 1) (undo-tree-id1298 . 1) (undo-tree-id1299 . 1) (undo-tree-id1300 . 1) (undo-tree-id1301 . 1) (undo-tree-id1302 . 1) (undo-tree-id1303 . 1) (undo-tree-id1304 . 1) (undo-tree-id1305 . 1) (undo-tree-id1306 . 1) (undo-tree-id1307 . 1) (undo-tree-id1308 . 1) (undo-tree-id1309 . 1) (undo-tree-id1310 . 1) (undo-tree-id1311 . 1) (undo-tree-id1312 . 1) (undo-tree-id1313 . 1)) nil (23701 40617 44921 470000) 0 nil]) ((#("=" 0 1 (fontified t)) . 665) (undo-tree-id1314 . 1) (undo-tree-id1315 . 1) (undo-tree-id1316 . 1) (undo-tree-id1317 . 1) (undo-tree-id1318 . 1) (undo-tree-id1319 . 1) (undo-tree-id1320 . 1) (undo-tree-id1321 . 1) (undo-tree-id1322 . 1) (undo-tree-id1323 . 1) (undo-tree-id1324 . 1) (undo-tree-id1325 . 1) (undo-tree-id1326 . 1) (undo-tree-id1327 . 1) (undo-tree-id1328 . 1) (undo-tree-id1329 . 1) (undo-tree-id1330 . 1)) nil (23701 40617 44955 40000) 0 nil]) ((#(" " 0 1 (fontified t)) . 665) (undo-tree-id1331 . 1) (undo-tree-id1332 . 1) (undo-tree-id1333 . 1) (undo-tree-id1334 . 1) (undo-tree-id1335 . 1) (undo-tree-id1336 . 1) (undo-tree-id1337 . 1) (undo-tree-id1338 . 1) (undo-tree-id1339 . 1) (undo-tree-id1340 . 1) (undo-tree-id1341 . 1) (undo-tree-id1342 . 1) (undo-tree-id1343 . 1) (undo-tree-id1344 . 1) (undo-tree-id1345 . 1)) nil (23701 40617 44982 972000) 0 nil]) ((#(")" 0 1 (fontified t)) . 665) (undo-tree-id1346 . 1) (undo-tree-id1347 . 1) (undo-tree-id1348 . 1)) nil (23701 40617 44992 286000) 0 nil]) ((664 . 666) (#("(" 0 1 (fontified nil)) . -664) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (664 . 665) (656 . 664) (#("pus" 0 3 (fontified t)) . -656) (undo-tree-id1351 . -3) (undo-tree-id1352 . 3) (undo-tree-id1353 . 2) (undo-tree-id1354 . 1) 659 (649 . 659) (#("p" 0 1 (fontified t)) . -649) (undo-tree-id1355 . -1) (#("u" 0 1 (fontified t)) . -650) (undo-tree-id1356 . -1) 651 (649 . 651) (#("line" 0 4 (fontified t)) . 649) (undo-tree-id1357 . -3) (undo-tree-id1358 . 1) 652 (t 23701 40560 706314 245000)) nil (23701 40617 45013 278000) 0 nil] [nil ([nil nil ((712 . 713)) ((#(";" 0 1 (fontified t)) . 712) (undo-tree-id1269 . 1) (undo-tree-id1270 . 1) (undo-tree-id1271 . 1) (undo-tree-id1272 . 1)) (23701 40590 345011 530000) 0 nil]) ((#(".as_str();" 0 1 (fontified t) 1 7 (fontified t) 7 9 (fontified t) 9 10 (fontified t)) . 712) (undo-tree-id1248 . 6) (undo-tree-id1249 . -7) (undo-tree-id1250 . 1) (undo-tree-id1251 . 2) (undo-tree-id1252 . 1) (undo-tree-id1253 . 3) (undo-tree-id1254 . 2) (undo-tree-id1255 . 4) (undo-tree-id1256 . 3) (undo-tree-id1257 . 5) (undo-tree-id1258 . 4) (undo-tree-id1259 . 6) (undo-tree-id1260 . 5) (undo-tree-id1261 . 7) (undo-tree-id1262 . 6) (undo-tree-id1263 . 8) (undo-tree-id1264 . 7) (undo-tree-id1265 . 9) (undo-tree-id1266 . 8) (undo-tree-id1267 . 10) (undo-tree-id1268 . 9) (t 23701 40560 706314 245000)) ((712 . 722)) (23701 40590 345158 404000) 0 nil]) ((862 . 863) (#(":" 0 1 (fontified t)) . -862) (undo-tree-id1229 . -1) (undo-tree-id1230 . 1) 863 (862 . 863)) nil (23701 40590 692255 653000) 0 nil]) ((886 . 889) (#("u" 0 1 (fontified t)) . -886) (undo-tree-id1231 . -1) (undo-tree-id1232 . 1) (undo-tree-id1233 . -1) (#("t" 0 1 (fontified t)) . -887) (undo-tree-id1234 . -1) (undo-tree-id1235 . 1) 888 (883 . 888) (#("cmd" 0 3 (fontified t)) . 883) (undo-tree-id1236 . -1) (undo-tree-id1237 . 3) (undo-tree-id1238 . 3) (undo-tree-id1239 . -3) (undo-tree-id1240 . 2) (undo-tree-id1241 . 3) 884) nil (23701 40560 642179 776000) 0 nil]) ((#("    let cmd = format!(\"message-info {}\\n\", output);
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 11 (fontified t face font-lock-variable-name-face) 11 14 (fontified t) 14 21 (fontified t face rust-builtin-formatting-macro-face) 21 22 (fontified t) 22 36 (fontified t face font-lock-string-face) 36 38 (fontified t face rust-string-interpolation-face) 38 40 (fontified t face font-lock-string-face) 40 41 (fontified t face font-lock-string-face) 41 43 (fontified t) 43 51 (fontified t) 51 52 (fontified t)) . 771) (undo-tree-id1242 . 44) (undo-tree-id1243 . -11) (undo-tree-id1244 . -27) (undo-tree-id1245 . 2) (undo-tree-id1246 . 2) (undo-tree-id1247 . 25) 798 (t 23701 40524 246583 763000)) nil (23701 40560 642193 636000) 0 nil]) ((913 . 914)) nil (23701 40524 169599 719000) 0 nil]) ((#("?" 0 1 (fontified t face rust-question-mark-face)) . 913) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (undo-tree-id1225 . -1) (undo-tree-id1226 . 1) (undo-tree-id1227 . 1) (undo-tree-id1228 . 1) (t 23701 40476 926937 239000)) nil (23701 40524 169671 519000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 711) (undo-tree-id1212 . -1) (undo-tree-id1213 . 1) (710 . 711) (709 . 711) (#("(" 0 1 (fontified nil)) . -709) (undo-tree-id1214 . -1) (undo-tree-id1215 . -1) (707 . 710) (#("q" 0 1 (fontified t)) . -707) (undo-tree-id1216 . -1) (undo-tree-id1217 . 1) (undo-tree-id1218 . -1) 708 (705 . 708) (#("q" 0 1 (fontified t)) . -705) (undo-tree-id1219 . -1) (undo-tree-id1220 . 1) (undo-tree-id1221 . -1) 706 (702 . 706) (t 23701 40454 660438 384000)) nil (23701 40476 862422 414000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 712) (undo-tree-id1208 . -1) (undo-tree-id1209 . 1) (711 . 712) (710 . 712) (#("(" 0 1 (fontified nil)) . -710) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (703 . 711) (t 23701 40233 158838 116000)) nil (23701 40454 649371 954000) 0 nil]) ((895 . 897)) nil (23701 40233 144661 690000) 0 nil]) ((#("env::var(\"QUTE_FIFO\").unwrap())?;" 0 3 (fontified t face font-lock-constant-face) 3 9 (fontified t) 9 12 (fontified t face font-lock-string-face) 12 20 (fontified t face font-lock-string-face) 20 23 (fontified t) 23 31 (fontified t) 31 32 (fontified t face rust-question-mark-face) 32 33 (fontified t)) . 895) (undo-tree-id1184 . 33) (undo-tree-id1185 . -3)) nil (23701 40233 144673 603000) 0 nil]) ((nil rear-nonsticky nil 894 . 895) (nil fontified nil 841 . 895) (841 . 895)) nil (23701 40233 144677 117000) 0 nil]) ((#("
" 0 1 (fontified t)) . 746)) nil (23701 40233 144678 688000) 0 nil]) ((#("
" 0 1 (fontified t)) . 705)) nil (23701 40233 144680 226000) 0 nil]) ((703 . 704)) nil (23701 40233 144682 207000) 0 nil]) ((699 . 700) (692 . 699) (691 . 693) (#("\"" 0 1 (fontified nil)) . -691) (691 . 692) (690 . 692) (#("(" 0 1 (fontified nil)) . -690) (687 . 691) (680 . 687) (673 . 680) (#("new" 0 3 (fontified t)) . -673) (undo-tree-id1186 . -3) 676 (673 . 676) (671 . 673) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 671) (670 . 671) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 670) (669 . 670) (668 . 670) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -668) (667 . 669) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 667) (666 . 667) (665 . 667) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -665) (665 . 666) (664 . 666) (#("\"" 0 1 (fontified nil)) . -664) (664 . 665) (#("{" 0 1 (fontified nil)) . -664) (undo-tree-id1187 . -1) (#("}" 0 1 (fontified t)) . 665) (664 . 666) (#("{" 0 1 (fontified nil)) . -664) (664 . 665) (#("n" 0 1 (fontified t)) . -664) (undo-tree-id1188 . -1) 665 (664 . 665) (663 . 665) (#("(" 0 1 (fontified nil)) . -663) (649 . 664) (#("i" 0 1 (fontified t)) . -649) (undo-tree-id1189 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -650) (undo-tree-id1190 . -1) (#("e" 0 1 (fontified t)) . -651) (undo-tree-id1191 . -1) (#(" " 0 1 (fontified t)) . -652) (undo-tree-id1192 . -1) 653 (649 . 653) (#("l" 0 1 (fontified t)) . -649) (undo-tree-id1193 . -1) (#("e" 0 1 (fontified t)) . -650) (undo-tree-id1194 . -1) (#("t" 0 1 (fontified t face font-lock-keyword-face)) . -651) (undo-tree-id1195 . -1) 652 (649 . 652) (636 . 649) 620) nil (23701 40233 144711 738000) 0 nil]) ((467 . 471)) nil (23701 40233 144721 136000) 0 nil]) ((#("            " 0 12 (fontified t)) . -633) (undo-tree-id1196 . -12) 645 (632 . 645) 612) nil (23701 40233 144724 468000) 0 nil]) ((632 . 641) (631 . 633) (#("{" 0 1 (fontified nil)) . -631) (630 . 632) (623 . 630) (#("new_" 0 4 (fontified t)) . -623) (undo-tree-id1197 . -4) 627 (616 . 627) (#("(" 0 1 (fontified nil)) . -616) (undo-tree-id1198 . -1) (#(")" 0 1 (fontified t)) . 617) (#("k" 0 1 (fontified t)) . -617) (undo-tree-id1199 . -1) (#("e" 0 1 (fontified t)) . -618) (undo-tree-id1200 . -1) 619 (617 . 619) (616 . 618) (#("(" 0 1 (fontified nil)) . -616) (613 . 617) (605 . 613) (605 . 606)) nil (23701 40233 144736 659000) 0 nil]) ((#("        " 0 8 (fontified t)) . -636) (undo-tree-id1201 . -8) 644 (635 . 644) 613) nil (23701 40233 144742 254000) 0 nil]) ((#("        let cmd = format!(
            \"bind '{} :buffer {}\\nbind \\\"{} :open -t {}\\n\",
            key, url, key, url
        );
" 0 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 15 (fontified t face font-lock-variable-name-face) 15 18 (fontified t) 18 25 (fontified t face rust-builtin-formatting-macro-face) 25 27 (fontified t) 27 31 (fontified t) 31 39 (fontified t) 39 46 (fontified t face font-lock-string-face) 46 48 (fontified t face rust-string-interpolation-face) 48 57 (fontified t face font-lock-string-face) 57 59 (fontified t face rust-string-interpolation-face) 59 85 (fontified t face font-lock-string-face) 85 87 (fontified t) 87 99 (fontified t) 99 118 (fontified t) 118 126 (fontified t) 126 127 (fontified t) 127 128 (fontified t) 128 129 (fontified t)) . 605) (undo-tree-id1202 . -127) (undo-tree-id1203 . -127) (undo-tree-id1204 . -9) (undo-tree-id1205 . -9) (undo-tree-id1206 . -9) (undo-tree-id1207 . -127) 614 (t 23701 39998 680846 840000)) nil (23701 40233 144750 937000) 0 nil]) ((763 . 764) (#(")" 0 1 (fontified nil)) . 763) (undo-tree-id1169 . -1) (undo-tree-id1170 . 1) (undo-tree-id1171 . 1) (undo-tree-id1172 . 1) (undo-tree-id1173 . 1) (undo-tree-id1174 . 1) (758 . 763) (757 . 759) (#("(" 0 1 (fontified nil)) . -757) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (757 . 758) (742 . 757) (#("p" 0 1 (fontified t)) . -742) (undo-tree-id1177 . -1) (undo-tree-id1178 . 1) (#("u" 0 1 (fontified t)) . -743) (undo-tree-id1179 . -1) (undo-tree-id1180 . 1) (undo-tree-id1181 . -1) (#("t" 0 1 (fontified t)) . -744) (undo-tree-id1182 . -1) (undo-tree-id1183 . 1) 745 (742 . 745) (733 . 742) (t 23701 39961 61191 920000) 732) nil (23701 39998 667858 980000) 0 nil]) ((#("        " 0 8 (fontified nil)) . -867) (863 . 867) (#("        " 0 7 (fontified nil) 7 8 (rear-nonsticky t fontified nil)) . -797) (793 . 797) 906) nil (23701 39961 49413 920000) 0 nil]) ((779 . 781)) nil (23701 39961 49420 993000) 0 nil]) ((764 . 777) (#("l" 0 1 (fontified t face font-lock-string-face)) . -764) (undo-tree-id1073 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -765) (undo-tree-id1074 . -1) 766 (764 . 766)) nil (23701 39961 49434 527000) 0 nil]) ((nil rear-nonsticky nil 785 . 786) (#("
" 0 1 (fontified nil)) . -892) (777 . 893) 745) nil (23701 39961 49438 694000) 0 nil]) ((#("        let mut file = fs::File::create(env::var(\"QUTE_FIFO\").unwrap())?;
        file.write_all(cmd.as_bytes())?;
" 0 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 20 (fontified t face font-lock-variable-name-face) 20 23 (fontified t) 23 25 (fontified t face font-lock-constant-face) 25 27 (fontified t) 27 31 (fontified t face font-lock-type-face) 31 40 (fontified t) 40 43 (fontified t face font-lock-constant-face) 43 49 (fontified t) 49 52 (fontified t face font-lock-string-face) 52 60 (fontified t face font-lock-string-face) 60 63 (fontified t) 63 71 (fontified t) 71 72 (fontified t face rust-question-mark-face) 72 73 (fontified t) 73 74 (fontified t) 74 82 (fontified t) 82 96 (fontified t) 96 109 (fontified t) 109 110 (fontified t) 110 111 (fontified t) 111 112 (fontified t) 112 113 (fontified t face rust-question-mark-face) 113 115 (fontified t)) . 734) (undo-tree-id1075 . -109) (undo-tree-id1076 . -109) (undo-tree-id1077 . -35) (undo-tree-id1078 . 115) (undo-tree-id1079 . 115) (undo-tree-id1080 . 115) (undo-tree-id1081 . 115) (undo-tree-id1082 . 115) (undo-tree-id1083 . 115) (undo-tree-id1084 . -35) (undo-tree-id1085 . 115) (undo-tree-id1086 . -73) (undo-tree-id1087 . 107) (undo-tree-id1088 . 115) (undo-tree-id1089 . 107) (undo-tree-id1090 . 107) (undo-tree-id1091 . 33) (undo-tree-id1092 . 107) (undo-tree-id1093 . 33) (undo-tree-id1094 . 6) (undo-tree-id1095 . -115) (undo-tree-id1096 . 6) (undo-tree-id1097 . 6) (undo-tree-id1098 . -35) (undo-tree-id1099 . -109) (undo-tree-id1100 . 80) (undo-tree-id1101 . 6) 769) nil (23701 39961 49474 575000) 0 nil]) ((890 . 892) (884 . 890) (#("outp" 0 4 (fontified t)) . -884) (undo-tree-id1102 . -4) (undo-tree-id1103 . 4) (undo-tree-id1104 . 3) (undo-tree-id1105 . 2) (undo-tree-id1106 . 1) 888 (884 . 888) (#("n" 0 1 (fontified t)) . -884) (undo-tree-id1107 . -1) (undo-tree-id1108 . 1) (#("e" 0 1 (fontified t)) . -885) (undo-tree-id1109 . -1) (undo-tree-id1110 . 1) 886 (881 . 886) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 881) (undo-tree-id1111 . -1) (undo-tree-id1112 . 1) (880 . 881) (879 . 881) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -879) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (879 . 880) (#("message-info '{}'\\n\", env::args().nth(1).unwrap());" 0 13 (fontified t face font-lock-string-face) 13 14 (fontified t face font-lock-string-face) 14 15 (fontified t face rust-string-interpolation-face) 15 16 (fontified t face rust-string-interpolation-face) 16 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 22 (fontified t) 22 25 (fontified t face font-lock-constant-face) 25 31 (fontified t) 31 37 (fontified t) 37 38 (fontified t) 38 39 (fontified t) 39 47 (fontified t) 47 50 (fontified t) 50 51 (fontified t)) . 879) (undo-tree-id1115 . -51) (undo-tree-id1116 . -51) (undo-tree-id1117 . 51)) nil (23701 39961 49505 60000) 0 nil]) ((#("        " 0 7 (fontified nil) 7 8 (fontified nil rear-nonsticky t)) . -860) (undo-tree-id1118 . -8) (856 . 860) 864) nil (23701 39961 49512 559000) 0 nil]) ((nil rear-nonsticky nil 863 . 864) (#("
" 0 1 (fontified nil)) . -934) (855 . 935)) nil (23701 39961 49515 635000) 0 nil]) ((#("        let cmd = format!(\"message-info '{}'\\n\", env::args().nth(1).unwrap());
" 0 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 15 (fontified t face font-lock-variable-name-face) 15 18 (fontified t) 18 25 (fontified t face rust-builtin-formatting-macro-face) 25 26 (fontified t) 26 40 (fontified t face font-lock-string-face) 40 41 (fontified t face font-lock-string-face) 41 42 (fontified t face rust-string-interpolation-face) 42 43 (fontified t face rust-string-interpolation-face) 43 46 (fontified t face font-lock-string-face) 46 47 (fontified t face font-lock-string-face) 47 49 (fontified t) 49 52 (fontified t face font-lock-constant-face) 52 58 (fontified t) 58 64 (fontified t) 64 65 (fontified t) 65 66 (fontified t) 66 74 (fontified t) 74 77 (fontified t) 77 78 (fontified t) 78 79 (fontified t)) . 734) (undo-tree-id1119 . 67) (undo-tree-id1120 . -15) (undo-tree-id1121 . 30) (undo-tree-id1122 . -52) (undo-tree-id1123 . 25) (undo-tree-id1124 . -58) (undo-tree-id1125 . 14) (undo-tree-id1126 . 14) (undo-tree-id1127 . 14) (undo-tree-id1128 . 14) (undo-tree-id1129 . 14) (undo-tree-id1130 . 14) (undo-tree-id1131 . -65) (undo-tree-id1132 . -45) (undo-tree-id1133 . 34) 779) nil (23701 39961 49534 224000) 0 nil]) ((363 . 364) (#(")" 0 1 (fontified nil)) . 363) (362 . 363) (361 . 363) (#("(" 0 1 (fontified nil)) . -361) (354 . 362) (#(")" 0 1 (fontified nil)) . 354) (352 . 354) (351 . 353) (#("(" 0 1 (fontified nil)) . -351) (347 . 352) (#(")" 0 1 (fontified nil)) . 347) (346 . 347) (345 . 347) (#("(" 0 1 (fontified nil)) . -345) (341 . 346) (#("var(\"QUTE_COMMANDLINE_TEXT\").unwrap();" 0 3 (fontified t) 3 4 (fontified t) 4 26 (fontified t face font-lock-string-face) 26 27 (fontified t face font-lock-string-face) 27 28 (fontified t) 28 31 (fontified t) 31 33 (fontified t) 33 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t) 37 38 (fontified t)) . 341) (undo-tree-id1134 . 1) (undo-tree-id1135 . 1) (undo-tree-id1136 . 1) (undo-tree-id1137 . 2) (undo-tree-id1138 . 1) (undo-tree-id1139 . 2) (undo-tree-id1140 . 2) (undo-tree-id1141 . 2) (undo-tree-id1142 . 28) (undo-tree-id1143 . 28) (undo-tree-id1144 . -21) (undo-tree-id1145 . 29) (undo-tree-id1146 . 28) (undo-tree-id1147 . 33) (undo-tree-id1148 . -9) (undo-tree-id1149 . 30) (undo-tree-id1150 . 29) (undo-tree-id1151 . 31) (undo-tree-id1152 . 30) (undo-tree-id1153 . 32) (undo-tree-id1154 . 31) (undo-tree-id1155 . 33) (undo-tree-id1156 . 32) (undo-tree-id1157 . 34) (undo-tree-id1158 . 33) (undo-tree-id1159 . 35) (undo-tree-id1160 . 34) (undo-tree-id1161 . 36) (undo-tree-id1162 . 35) (undo-tree-id1163 . 37) (undo-tree-id1164 . 36) (undo-tree-id1165 . 38) (undo-tree-id1166 . 37) (undo-tree-id1167 . 38) (undo-tree-id1168 . 38) (t 23701 39742 172743 813000)) nil (23701 39961 49606 723000) 0 nil]) ((814 . 815) (#("0" 0 1 (fontified t)) . 814) (undo-tree-id1072 . 1) (t 23701 39716 826229 266000)) nil (23701 39742 160649 640000) 0 nil]) ((825 . 826) (#(")" 0 1 (fontified nil)) . 825) (undo-tree-id1031 . -1) (undo-tree-id1032 . 1) (824 . 825) (823 . 825) (#("(" 0 1 (fontified nil)) . -823) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (819 . 824) (#("w" 0 1 (fontified t)) . -819) (undo-tree-id1035 . -1) (undo-tree-id1036 . 1) (undo-tree-id1037 . -1) (#("a" 0 1 (fontified t)) . -820) (undo-tree-id1038 . -1) (undo-tree-id1039 . 1) 821 (820 . 821) (#("r" 0 1 (fontified t)) . -820) (undo-tree-id1040 . -1) (undo-tree-id1041 . 1) (undo-tree-id1042 . -1) (#("q" 0 1 (fontified t)) . -821) (undo-tree-id1043 . -1) (undo-tree-id1044 . 1) 822 (816 . 822) (#(")" 0 1 (fontified nil)) . 816) (undo-tree-id1045 . 1) (undo-tree-id1046 . 1) (undo-tree-id1047 . 1) (undo-tree-id1048 . 1) (undo-tree-id1049 . 1) (undo-tree-id1050 . 1) (undo-tree-id1051 . 1) (undo-tree-id1052 . 1) (undo-tree-id1053 . 1) (undo-tree-id1054 . 1) (undo-tree-id1055 . 1) (undo-tree-id1056 . 1) (815 . 816) (#(" " 0 1 (fontified nil)) . -815) (815 . 816) (#(")" 0 1 (fontified nil)) . -815) (814 . 816) (#(")" 0 1 (fontified t)) . -814) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) 815 (#(")" 0 1 (fontified nil)) . 815) (814 . 815) (813 . 815) (#("(" 0 1 (fontified nil)) . -813) (811 . 814) (809 . 811) (#(")" 0 1 (fontified nil)) . 809) (808 . 809) (807 . 809) (#("(" 0 1 (fontified nil)) . -807) (798 . 808) (#("key" 0 3 (fontified t)) . 798) (undo-tree-id1059 . 3) (undo-tree-id1060 . 3) (undo-tree-id1061 . 3) (undo-tree-id1062 . 3) (undo-tree-id1063 . 3) (undo-tree-id1064 . 3) (undo-tree-id1065 . 3)) nil (23701 39716 812319 867000) 0 nil]) ((#("_" 0 1 (fontified t)) . 798) (undo-tree-id1066 . 1) (undo-tree-id1067 . 1) (undo-tree-id1068 . 1) (undo-tree-id1069 . 1) (undo-tree-id1070 . 1)) nil (23701 39716 812344 369000) 0 nil]) ((#("new" 0 3 (fontified t)) . 798) (undo-tree-id1071 . 3) (t 23701 39443 487859 185000)) nil (23701 39716 812349 117000) 0 nil]) ((793 . 795)) nil (23701 39443 477696 503000) 0 nil] [nil ([nil ([nil ([nil ([nil nil ((#(", new_key" 0 2 (fontified t) 2 9 (fontified t)) . 794) (undo-tree-id1023 . 8) (undo-tree-id1025 . 9) (t 23701 39395 331477 171000)) ((794 . 803) (t 23701 39411 354715 895000)) (23701 39411 342858 935000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 792) (undo-tree-id825 . 1) (undo-tree-id827 . 1) (undo-tree-id829 . 1) (undo-tree-id831 . 1) (undo-tree-id833 . 1) (undo-tree-id835 . 1) (undo-tree-id837 . 1) (undo-tree-id839 . 1) (undo-tree-id841 . 1) (undo-tree-id843 . 1) (undo-tree-id845 . 1) (undo-tree-id847 . 1) (undo-tree-id849 . 1) (undo-tree-id851 . 1) (undo-tree-id853 . 1) (undo-tree-id855 . 1) (undo-tree-id857 . 1) (undo-tree-id859 . 1) (undo-tree-id861 . 1) (undo-tree-id863 . 1) (undo-tree-id865 . 1) (undo-tree-id867 . 1) (undo-tree-id869 . 1) (undo-tree-id871 . 1) (undo-tree-id873 . 1) (undo-tree-id875 . 1) (undo-tree-id877 . 1) (undo-tree-id879 . 1) (undo-tree-id881 . 1) (undo-tree-id883 . 1) (undo-tree-id885 . 1) (undo-tree-id887 . 1) (undo-tree-id889 . 1) (undo-tree-id891 . 1) (undo-tree-id893 . 1) (undo-tree-id895 . 1) (undo-tree-id897 . 1) (undo-tree-id899 . 1) (undo-tree-id901 . 1) (undo-tree-id903 . 1) (undo-tree-id905 . 1) (undo-tree-id907 . 1) (undo-tree-id909 . 1) (undo-tree-id911 . 1) (undo-tree-id913 . 1) (undo-tree-id915 . 1) (undo-tree-id917 . 1) (undo-tree-id919 . 1) (undo-tree-id921 . 1) (undo-tree-id923 . 1) (undo-tree-id925 . 1) (undo-tree-id927 . 1) (undo-tree-id929 . 1) (undo-tree-id931 . 1) (undo-tree-id933 . 1) (undo-tree-id935 . 1) (undo-tree-id937 . 1) (undo-tree-id939 . 1) (undo-tree-id941 . 1) (undo-tree-id943 . 1) (undo-tree-id945 . 1) (undo-tree-id947 . 1) (undo-tree-id949 . 1) (undo-tree-id951 . 1) (undo-tree-id953 . 1) (undo-tree-id955 . 1) (undo-tree-id957 . 1) (undo-tree-id959 . 1) (undo-tree-id961 . 1) (undo-tree-id963 . 1) (undo-tree-id965 . 1) (undo-tree-id967 . 1) (undo-tree-id969 . 1) (undo-tree-id971 . 1) (undo-tree-id973 . 1) (undo-tree-id975 . 1) (undo-tree-id977 . 1) (undo-tree-id979 . 1) (undo-tree-id981 . 1) (undo-tree-id983 . 1) (undo-tree-id985 . 1) (undo-tree-id987 . 1) (undo-tree-id989 . 1) (undo-tree-id991 . 1) (undo-tree-id993 . 1) (undo-tree-id995 . 1) (undo-tree-id997 . 1) (undo-tree-id999 . 1) (undo-tree-id1001 . 1) (undo-tree-id1003 . 1) (undo-tree-id1005 . 1) (undo-tree-id1007 . 1) (undo-tree-id1009 . 1) (undo-tree-id1011 . 1) (undo-tree-id1013 . 1) (undo-tree-id1015 . 1)) ((792 . 793)) (23701 39438 71470 426000) 0 nil]) ((#("}" 0 1 (fontified t face font-lock-string-face)) . 793) (undo-tree-id1016 . 1) (undo-tree-id1018 . 1)) ((793 . 794)) (23701 39438 445558 65000) 0 nil]) ((#("{" 0 1 (fontified t face rust-string-interpolation-face)) . 793) (undo-tree-id1020 . 1) (t 23701 39354 918382 17000)) ((793 . 794)) (23701 39438 931565 223000) 0 nil]) ((790 . 793) (#("l" 0 1 (fontified t face font-lock-string-face)) . -790) (undo-tree-id823 . -1) 791 (790 . 791) (t 23701 39243 359035 569000)) ((#("l" 0 1 (fontified nil face font-lock-string-face)) . 790) (undo-tree-id1027 . -1) (790 . 791) (#("hi " 0 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face)) . 790) (undo-tree-id1028 . -3) (undo-tree-id1029 . 1) (undo-tree-id1030 . 1)) (23701 39439 282174 958000) 0 nil]) ((804 . 805) (#("'" 0 1 (fontified t)) . -804) (undo-tree-id804 . -1) (#("'" 0 1 (fontified t)) . -805) (undo-tree-id805 . -1) 806) nil (23701 39439 551943 232000) 0 nil]) ((796 . 803) (#("new_" 0 4 (fontified t)) . -796) (undo-tree-id806 . -4) 800 (794 . 800) (#("." 0 1 (fontified t)) . -794) (undo-tree-id807 . -1) 795 (794 . 795)) nil (23701 39243 346768 323000) 0 nil]) ((#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 792) (791 . 792) (791 . 792) (nil fontified nil 790 . 791) (nil face font-lock-string-face 790 . 791) (790 . 791) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -790) (790 . 791) (#("n" 0 1 (fontified t face font-lock-string-face)) . -790) (undo-tree-id808 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -791) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (#("w" 0 1 (fontified t face font-lock-string-face)) . -792) (undo-tree-id811 . -1) 793 (#("_" 0 1 (fontified t face font-lock-string-face)) . -793) (undo-tree-id812 . -1) 794 (#("key" 0 3 (fontified t face font-lock-string-face)) . 794) (undo-tree-id813 . -1) 795) nil (23701 39243 346808 511000) 0 nil]) ((800 . 802) (#("'" 0 1 (fontified nil)) . -800) (800 . 801)) nil (23701 39243 346814 92000) 0 nil]) ((797 . 798) (#(" " 0 1 (fontified nil)) . -797) (797 . 798) (#("'" 0 1 (fontified nil face font-lock-string-face)) . -797) (791 . 798) (789 . 791) (#(" " 0 1 (fontified nil)) . -789) (789 . 790) (#("'" 0 1 (fontified nil face font-lock-string-face)) . -789) (776 . 790) (775 . 777) (#("\"" 0 1 (fontified nil)) . -775) (775 . 776) (774 . 776) (#("(" 0 1 (fontified nil)) . -774) (768 . 775) (#("r" 0 1 (fontified t)) . -768) (undo-tree-id814 . -1) (#("o" 0 1 (fontified t)) . -769) (undo-tree-id815 . -1) 770 (763 . 770) (#("f" 0 1 (fontified t face font-lock-variable-name-face)) . -763) (undo-tree-id816 . -1) 764 (757 . 764) (748 . 757) 747) nil (23701 39243 346827 903000) 0 nil]) ((#("//" 0 2 (fontified t face font-lock-comment-delimiter-face)) . 864) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (#("//" 0 2 (fontified t face font-lock-comment-delimiter-face)) . 823) (#("//" 0 2 (fontified t face font-lock-comment-delimiter-face)) . 749) (#("//" 0 2 (fontified t face font-lock-comment-delimiter-face)) . 738) (#("//" 0 2 (fontified t face font-lock-comment-delimiter-face)) . 707) (#("//" 0 2 (fontified t face font-lock-comment-delimiter-face)) . 647) (#("//" 0 2 (fontified t face font-lock-comment-delimiter-face)) . 620) (#("//" 0 2 (fontified t face font-lock-comment-delimiter-face)) . 547) (#("//" 0 2 (fontified t face font-lock-comment-delimiter-face)) . 506) (#("//" 0 2 (fontified t face font-lock-comment-delimiter-face)) . 474) (#("//" 0 2 (fontified t face font-lock-comment-delimiter-face)) . 381) 885) nil (23701 39243 346838 746000) 0 nil]) ((#("    dbg!(new_key);
" 0 4 (fontified t) 4 6 (fontified t face font-lock-preprocessor-face) 6 8 (fontified t face font-lock-preprocessor-face) 8 9 (fontified t) 9 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t)) . 380) (undo-tree-id820 . 1) (undo-tree-id821 . -17) (undo-tree-id822 . -17) 397) nil (23701 39243 346845 503000) 0 nil] [nil nil ((1 . 969) (#("use directories::{BaseDirs, ProjectDirs, UserDirs};
use std::env;
use std::fs;
use std::io::prelude::*;
use std::path::Path;

fn main() -> std::io::Result<()> {
    let project_dir = ProjectDirs::from(\"\", \"\", \"qutebrowser\").unwrap();
    let config_dir = project_dir.config_dir();
    let mut output = String::new();
    let new_key = env::var(\"QUTE_COMMANDLINE_TEXT\").unwrap();
    dbg!(new_key);

//    let input = fs::read_to_string(format!(\"{}/{}\", config_dir.display(), \"global_marks\"))?;
//    for line in input.lines() {
//        let mut words = line.split(\" \");
//        let (key, url) = (words.nth(0).unwrap(), words.nth(0).unwrap());
//        let cmd = format!(
//            \"bind '{} :buffer {}\\nbind \\\"{} :open -t {}\\n\",
//            key, url, key, url
//        );
//        let mut file = fs::File::create(env::var(\"QUTE_FIFO\").unwrap())?;
//        file.write_all(cmd.as_bytes())?;
//    }

    Ok(())
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 15 (fontified t face font-lock-constant-face) 15 18 (fontified t) 18 26 (fontified t face font-lock-type-face) 26 28 (fontified t) 28 39 (fontified t face font-lock-type-face) 39 41 (fontified t) 41 49 (fontified t face font-lock-type-face) 49 51 (fontified t) 51 52 (fontified t) 52 55 (fontified t face font-lock-keyword-face) 55 56 (fontified t) 56 59 (fontified t face font-lock-constant-face) 59 66 (fontified t) 66 69 (fontified t face font-lock-keyword-face) 69 70 (fontified t) 70 73 (fontified t face font-lock-constant-face) 73 79 (fontified t) 79 82 (fontified t face font-lock-keyword-face) 82 83 (fontified t) 83 86 (fontified t face font-lock-constant-face) 86 88 (fontified t) 88 90 (fontified t face font-lock-constant-face) 90 92 (fontified t) 92 99 (fontified t face font-lock-constant-face) 99 104 (fontified t) 104 107 (fontified t face font-lock-keyword-face) 107 108 (fontified t) 108 111 (fontified t face font-lock-constant-face) 111 113 (fontified t) 113 117 (fontified t face font-lock-constant-face) 117 119 (fontified t) 119 123 (fontified t face font-lock-type-face) 123 126 (fontified t) 126 128 (fontified t face font-lock-keyword-face) 128 129 (fontified t) 129 133 (fontified t face font-lock-function-name-face) 133 137 (fontified t) 137 138 (syntax-table #2# fontified t) 138 139 (fontified t) 139 142 (fontified t face font-lock-constant-face) 142 144 (fontified t) 144 146 (fontified t face font-lock-constant-face) 146 148 (fontified t) 148 154 (fontified t face font-lock-type-face) 154 161 (fontified t) 161 165 (fontified t) 165 168 (fontified t face font-lock-keyword-face) 168 169 (fontified t) 169 180 (fontified t face font-lock-variable-name-face) 180 183 (fontified t) 183 194 (fontified t face font-lock-type-face) 194 201 (fontified t) 201 203 (fontified t face font-lock-string-face) 203 205 (fontified t) 205 207 (fontified t face font-lock-string-face) 207 209 (fontified t) 209 220 (fontified t face font-lock-string-face) 220 221 (syntax-table #1# fontified t face font-lock-string-face) 221 222 (fontified t face font-lock-string-face) 222 223 (fontified t) 223 234 (fontified t) 234 238 (fontified t) 238 241 (fontified t face font-lock-keyword-face) 241 242 (fontified t) 242 252 (fontified t face font-lock-variable-name-face) 252 266 (fontified t) 266 280 (fontified t) 280 281 (fontified t) 281 285 (fontified t) 285 288 (fontified t face font-lock-keyword-face) 288 289 (fontified t) 289 292 (fontified t face font-lock-keyword-face) 292 293 (fontified t) 293 299 (fontified t face font-lock-variable-name-face) 299 302 (fontified t) 302 308 (fontified t face font-lock-type-face) 308 313 (fontified t) 313 316 (fontified t) 316 317 (fontified t) 317 321 (fontified t) 321 324 (fontified t face font-lock-keyword-face) 324 325 (fontified t) 325 332 (fontified t face font-lock-variable-name-face) 332 335 (fontified t) 335 338 (fontified t face font-lock-constant-face) 338 343 (fontified t) 343 344 (fontified t) 344 366 (fontified t face font-lock-string-face) 366 367 (fontified t face font-lock-string-face) 367 375 (fontified t) 375 378 (fontified t) 378 379 (fontified t) 379 383 (fontified t) 383 387 (fontified t face font-lock-preprocessor-face) 387 388 (fontified t) 388 397 (fontified t) 397 398 (fontified t) 398 399 (fontified t) 399 401 (fontified t face font-lock-comment-delimiter-face) 401 404 (fontified t face font-lock-comment-delimiter-face) 404 405 (rear-nonsticky t fontified t face font-lock-comment-delimiter-face) 405 408 (fontified t face font-lock-comment-face) 408 409 (fontified t face font-lock-comment-face) 409 414 (fontified t face font-lock-comment-face) 414 417 (fontified t face font-lock-comment-face) 417 419 (fontified t face font-lock-comment-face) 419 436 (fontified t face font-lock-comment-face) 436 443 (fontified t face font-lock-comment-face) 443 444 (fontified t face font-lock-comment-face) 444 445 (fontified t face font-lock-comment-face) 445 447 (fontified t face font-lock-comment-face) 447 448 (fontified t face font-lock-comment-face) 448 450 (fontified t face font-lock-comment-face) 450 451 (fontified t face font-lock-comment-face) 451 475 (fontified t face font-lock-comment-face) 475 485 (fontified t face font-lock-comment-face) 485 486 (fontified t face font-lock-comment-face) 486 489 (fontified t face font-lock-comment-face) 489 491 (fontified t face font-lock-comment-face) 491 492 (fontified t face font-lock-comment-face) 492 493 (fontified t face font-lock-comment-face) 493 494 (fontified t face font-lock-comment-face) 494 496 (fontified t face font-lock-comment-delimiter-face) 496 500 (fontified t face font-lock-comment-delimiter-face) 500 503 (fontified t face font-lock-comment-face) 503 509 (fontified t face font-lock-comment-face) 509 511 (fontified t face font-lock-comment-face) 511 528 (fontified t face font-lock-comment-face) 528 530 (fontified t face font-lock-comment-delimiter-face) 530 538 (fontified t face font-lock-comment-delimiter-face) 538 541 (fontified t face font-lock-comment-face) 541 542 (fontified t face font-lock-comment-face) 542 545 (fontified t face font-lock-comment-face) 545 546 (fontified t face font-lock-comment-face) 546 551 (fontified t face font-lock-comment-face) 551 565 (fontified t face font-lock-comment-face) 565 568 (fontified t face font-lock-comment-face) 568 570 (fontified t face font-lock-comment-face) 570 571 (fontified t face font-lock-comment-face) 571 573 (fontified t face font-lock-comment-delimiter-face) 573 581 (fontified t face font-lock-comment-delimiter-face) 581 584 (fontified t face font-lock-comment-face) 584 613 (fontified t face font-lock-comment-face) 613 646 (fontified t face font-lock-comment-face) 646 648 (fontified t face font-lock-comment-delimiter-face) 648 656 (fontified t face font-lock-comment-delimiter-face) 656 659 (fontified t face font-lock-comment-face) 659 660 (fontified t face font-lock-comment-face) 660 663 (fontified t face font-lock-comment-face) 663 666 (fontified t face font-lock-comment-face) 666 673 (fontified t face font-lock-comment-face) 673 675 (fontified t face font-lock-comment-face) 675 677 (fontified t face font-lock-comment-delimiter-face) 677 681 (fontified t face font-lock-comment-delimiter-face) 681 689 (fontified t face font-lock-comment-delimiter-face) 689 696 (fontified t face font-lock-comment-face) 696 698 (fontified t face font-lock-comment-face) 698 707 (fontified t face font-lock-comment-face) 707 709 (fontified t face font-lock-comment-face) 709 735 (fontified t face font-lock-comment-face) 735 737 (fontified t face font-lock-comment-face) 737 739 (fontified t face font-lock-comment-delimiter-face) 739 751 (fontified t face font-lock-comment-delimiter-face) 751 770 (fontified t face font-lock-comment-face) 770 772 (fontified t face font-lock-comment-delimiter-face) 772 780 (fontified t face font-lock-comment-delimiter-face) 780 781 (fontified t face font-lock-comment-face) 781 783 (fontified t face font-lock-comment-face) 783 785 (fontified t face font-lock-comment-delimiter-face) 785 793 (fontified t face font-lock-comment-delimiter-face) 793 796 (fontified t face font-lock-comment-face) 796 797 (fontified t face font-lock-comment-face) 797 800 (fontified t face font-lock-comment-face) 800 801 (fontified t face font-lock-comment-face) 801 805 (fontified t face font-lock-comment-face) 805 808 (fontified t face font-lock-comment-face) 808 810 (fontified t face font-lock-comment-face) 810 812 (fontified t face font-lock-comment-face) 812 816 (fontified t face font-lock-comment-face) 816 825 (fontified t face font-lock-comment-face) 825 828 (fontified t face font-lock-comment-face) 828 834 (fontified t face font-lock-comment-face) 834 845 (fontified t face font-lock-comment-face) 845 848 (fontified t face font-lock-comment-face) 848 856 (fontified t face font-lock-comment-face) 856 857 (fontified t face font-lock-comment-face) 857 859 (fontified t face font-lock-comment-face) 859 861 (fontified t face font-lock-comment-delimiter-face) 861 869 (fontified t face font-lock-comment-delimiter-face) 869 883 (fontified t face font-lock-comment-face) 883 896 (fontified t face font-lock-comment-face) 896 897 (fontified t face font-lock-comment-face) 897 898 (fontified t face font-lock-comment-face) 898 899 (face font-lock-comment-face fontified t) 899 900 (face font-lock-comment-face fontified t) 900 902 (face font-lock-comment-face fontified t) 902 904 (fontified t face font-lock-comment-delimiter-face) 904 908 (fontified t face font-lock-comment-delimiter-face) 908 909 (fontified t face font-lock-comment-face) 909 910 (fontified t face font-lock-comment-face) 910 911 (fontified t) 911 915 (fontified t) 915 917 (fontified t face font-lock-type-face) 917 920 (fontified t) 920 922 (fontified t) 922 923 (fontified t) 923 924 (fontified t)) . 1) (undo-tree-id143 . -924) (undo-tree-id144 . -905) (undo-tree-id145 . -923) (undo-tree-id147 . -128) (undo-tree-id149 . -292) (undo-tree-id150 . 527) (undo-tree-id152 . -338) (undo-tree-id154 . -349) (undo-tree-id156 . -361) (undo-tree-id157 . -399) (undo-tree-id158 . 19) (undo-tree-id159 . -902) (undo-tree-id160 . -399) (undo-tree-id162 . -769) (undo-tree-id164 . -379) (undo-tree-id166 . -375) (undo-tree-id168 . 546) (undo-tree-id170 . 526) (undo-tree-id172 . 526) (undo-tree-id174 . 526) (undo-tree-id176 . 526) (undo-tree-id178 . 526) (undo-tree-id180 . 526) (undo-tree-id182 . 527) (undo-tree-id184 . 527) (undo-tree-id186 . 527) (undo-tree-id188 . 527) (undo-tree-id190 . 527) (undo-tree-id192 . 527) (undo-tree-id194 . 527) (undo-tree-id196 . 541) (undo-tree-id197 . -386) (undo-tree-id199 . -387) (undo-tree-id201 . -387) (undo-tree-id203 . -388) (undo-tree-id205 . 537) (undo-tree-id207 . 527) (undo-tree-id209 . 527) (undo-tree-id211 . 527) (undo-tree-id213 . 527) (undo-tree-id215 . 536) (undo-tree-id217 . 527) (undo-tree-id219 . 528) (undo-tree-id221 . 528) (undo-tree-id223 . 528) (undo-tree-id225 . 528) (undo-tree-id227 . 528) (undo-tree-id228 . 528) (undo-tree-id229 . 528) (undo-tree-id231 . 528) (undo-tree-id233 . 528) (undo-tree-id235 . 528) (undo-tree-id236 . -396) (undo-tree-id237 . -396) (undo-tree-id239 . 528) (undo-tree-id241 . 528)) ((1 . 925) (#("use directories::{BaseDirs, ProjectDirs, UserDirs};
use std::env;
use std::fs;
use std::io::prelude::*;
use std::path::Path;

fn main() -> std::io::Result<()> {
    let project_dir = ProjectDirs::from(\"\", \"\", \"qutebrowser\").unwrap();
    let config_dir = project_dir.config_dir();
    let mut output = String::new();
    let new_key = env::var(\"QUTE_COMMANDLINE_TEXT\").unwrap();
    dbg!(new_key);

    //    let input = fs::read_to_string(format!(\"{}/{}\", config_dir.display(), \"global_marks\"))?;
    //    for line in input.lines() {
    //        let mut words = line.split(\" \");
    //        let (key, url) = (words.nth(0).unwrap(), words.nth(0).unwrap());
    //        let cmd = format!(
    //            \"bind '{} :buffer {}\\nbind \\\"{} :open -t {}\\n\",
    //            key, url, key, url
    //        );
    //        let mut file = fs::File::create(env::var(\"QUTE_FIFO\").unwrap())?;
    //        file.write_all(cmd.as_bytes())?;
    //    }

    Ok(())
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 15 (fontified t face font-lock-constant-face) 15 18 (fontified t) 18 26 (fontified t face font-lock-type-face) 26 28 (fontified t) 28 39 (fontified t face font-lock-type-face) 39 41 (fontified t) 41 49 (fontified t face font-lock-type-face) 49 51 (fontified t) 51 52 (fontified t) 52 55 (fontified t face font-lock-keyword-face) 55 56 (fontified t) 56 59 (fontified t face font-lock-constant-face) 59 66 (fontified t) 66 69 (fontified t face font-lock-keyword-face) 69 70 (fontified t) 70 73 (fontified t face font-lock-constant-face) 73 79 (fontified t) 79 82 (fontified t face font-lock-keyword-face) 82 83 (fontified t) 83 86 (fontified t face font-lock-constant-face) 86 88 (fontified t) 88 90 (fontified t face font-lock-constant-face) 90 92 (fontified t) 92 99 (fontified t face font-lock-constant-face) 99 104 (fontified t) 104 107 (fontified t face font-lock-keyword-face) 107 108 (fontified t) 108 111 (fontified t face font-lock-constant-face) 111 113 (fontified t) 113 117 (fontified t face font-lock-constant-face) 117 119 (fontified t) 119 123 (fontified t face font-lock-type-face) 123 126 (fontified t) 126 128 (fontified t face font-lock-keyword-face) 128 129 (fontified t) 129 133 (fontified t face font-lock-function-name-face) 133 137 (fontified t) 137 138 (fontified t syntax-table #2#) 138 139 (fontified t) 139 142 (fontified t face font-lock-constant-face) 142 144 (fontified t) 144 146 (fontified t face font-lock-constant-face) 146 148 (fontified t) 148 154 (fontified t face font-lock-type-face) 154 165 (fontified t) 165 168 (fontified t face font-lock-keyword-face) 168 169 (fontified t) 169 180 (fontified t face font-lock-variable-name-face) 180 183 (fontified t) 183 194 (fontified t face font-lock-type-face) 194 201 (fontified t) 201 203 (fontified t face font-lock-string-face) 203 205 (fontified t) 205 207 (fontified t face font-lock-string-face) 207 209 (fontified t) 209 220 (fontified t face font-lock-string-face) 220 221 (fontified t syntax-table #1# face font-lock-string-face) 221 222 (fontified t face font-lock-string-face) 222 238 (fontified t) 238 241 (fontified t face font-lock-keyword-face) 241 242 (fontified t) 242 252 (fontified t face font-lock-variable-name-face) 252 285 (fontified t) 285 288 (fontified t face font-lock-keyword-face) 288 289 (fontified t) 289 292 (fontified t face font-lock-keyword-face) 292 293 (fontified t) 293 299 (fontified t face font-lock-variable-name-face) 299 302 (fontified t) 302 308 (fontified t face font-lock-type-face) 308 321 (fontified t) 321 324 (fontified t face font-lock-keyword-face) 324 325 (fontified t) 325 332 (fontified t face font-lock-variable-name-face) 332 335 (fontified t) 335 338 (fontified t face font-lock-constant-face) 338 344 (fontified t) 344 367 (fontified t face font-lock-string-face) 367 379 (fontified t) 379 383 (fontified t) 383 387 (fontified t face font-lock-preprocessor-face) 387 397 (fontified t) 397 403 (fontified t) 403 409 (fontified t face font-lock-comment-delimiter-face) 409 498 (fontified t face font-lock-comment-face) 498 502 (fontified t) 502 508 (fontified t face font-lock-comment-delimiter-face) 508 536 (fontified t face font-lock-comment-face) 536 540 (fontified t) 540 550 (fontified t face font-lock-comment-delimiter-face) 550 583 (fontified t face font-lock-comment-face) 583 587 (fontified t) 587 597 (fontified t face font-lock-comment-delimiter-face) 597 662 (fontified t face font-lock-comment-face) 662 666 (fontified t) 666 676 (fontified t face font-lock-comment-delimiter-face) 676 695 (fontified t face font-lock-comment-face) 695 699 (fontified t) 699 713 (fontified t face font-lock-comment-delimiter-face) 713 761 (fontified t face font-lock-comment-face) 761 765 (fontified t) 765 779 (fontified t face font-lock-comment-delimiter-face) 779 798 (fontified t face font-lock-comment-face) 798 802 (fontified t) 802 812 (fontified t face font-lock-comment-delimiter-face) 812 815 (fontified t face font-lock-comment-face) 815 819 (fontified t) 819 829 (fontified t face font-lock-comment-delimiter-face) 829 879 (fontified t face font-lock-comment-face) 879 895 (face font-lock-comment-face fontified t) 895 897 (fontified t) 897 899 (fontified t) 899 909 (fontified t face font-lock-comment-delimiter-face) 909 942 (fontified t face font-lock-comment-face) 942 946 (fontified t) 946 952 (fontified t face font-lock-comment-delimiter-face) 952 954 (fontified t face font-lock-comment-face) 954 959 (fontified t) 959 961 (fontified t face font-lock-type-face) 961 968 (fontified t)) . 1) (undo-tree-id288 . 572) (undo-tree-id289 . 572) (undo-tree-id290 . 572) (undo-tree-id291 . 572) (undo-tree-id292 . 572) (undo-tree-id293 . 572) (undo-tree-id294 . 572) (undo-tree-id295 . 572) (undo-tree-id296 . 572) (undo-tree-id297 . 572) (undo-tree-id298 . 572) (undo-tree-id299 . 572) (undo-tree-id300 . 572) (undo-tree-id301 . 572) (undo-tree-id302 . 572) (undo-tree-id303 . 572) (undo-tree-id304 . 572) (undo-tree-id305 . 572) (undo-tree-id306 . 572) (undo-tree-id307 . 572) (undo-tree-id308 . 572) (undo-tree-id309 . 572) (undo-tree-id310 . 572) (undo-tree-id311 . 572) (undo-tree-id312 . 572) (undo-tree-id313 . 572) (undo-tree-id314 . 572) (undo-tree-id315 . 572) (undo-tree-id316 . 572) (undo-tree-id317 . 572) (undo-tree-id318 . 572) (undo-tree-id319 . 572) (undo-tree-id320 . 572) (undo-tree-id321 . 572) (undo-tree-id322 . 572) (undo-tree-id323 . 572) (undo-tree-id324 . 572) (undo-tree-id325 . 572) (undo-tree-id326 . 572) (undo-tree-id327 . 572) (undo-tree-id328 . 572) (undo-tree-id329 . 572) (undo-tree-id330 . 572) (undo-tree-id331 . 572) (undo-tree-id332 . 572) (undo-tree-id333 . 572) (undo-tree-id334 . 572) (undo-tree-id335 . 572) (undo-tree-id336 . 572) (undo-tree-id337 . 572) (undo-tree-id338 . 572) (undo-tree-id339 . 572) (undo-tree-id340 . 572) (undo-tree-id341 . 572) (undo-tree-id342 . 572) (undo-tree-id343 . 572) (undo-tree-id344 . 572) (undo-tree-id345 . 572) (undo-tree-id346 . 572) (undo-tree-id347 . 572) (undo-tree-id348 . 572) (undo-tree-id349 . 572) (undo-tree-id350 . 572) (undo-tree-id351 . 572) (undo-tree-id352 . 572) (undo-tree-id353 . 572) (undo-tree-id354 . 572) (undo-tree-id355 . 572) (undo-tree-id356 . 572) (undo-tree-id357 . 572) (undo-tree-id358 . 572) (undo-tree-id359 . 572) (undo-tree-id360 . 572) (undo-tree-id361 . 572) (undo-tree-id362 . 572) (undo-tree-id363 . 572) (undo-tree-id364 . 572) (undo-tree-id365 . 572) (undo-tree-id366 . 572) (undo-tree-id367 . 572) (undo-tree-id368 . 572) (undo-tree-id369 . 572) (undo-tree-id370 . 572) (undo-tree-id371 . 572) (undo-tree-id372 . 572) (undo-tree-id373 . 572) (undo-tree-id374 . 572) (undo-tree-id375 . 572) (undo-tree-id376 . 572) (undo-tree-id377 . 572) (undo-tree-id378 . 572) (undo-tree-id379 . 572) (undo-tree-id380 . 572) (undo-tree-id381 . 572) (undo-tree-id382 . 572) (undo-tree-id383 . 572) (undo-tree-id384 . 572) (undo-tree-id385 . 572) (undo-tree-id386 . 572) (undo-tree-id387 . 572) (undo-tree-id388 . 572) (undo-tree-id389 . 572) (undo-tree-id390 . 572) (undo-tree-id391 . 572) (undo-tree-id392 . 572) (undo-tree-id393 . 572) (undo-tree-id394 . 572) (undo-tree-id395 . 572) (undo-tree-id396 . 572) (undo-tree-id397 . 572) (undo-tree-id398 . 572) (undo-tree-id399 . 572) (undo-tree-id400 . 572) (undo-tree-id401 . 572) (undo-tree-id402 . 572) (undo-tree-id403 . 572) (undo-tree-id404 . 572) (undo-tree-id405 . 572) (undo-tree-id406 . 572) (undo-tree-id407 . 572) (undo-tree-id408 . 572) (undo-tree-id409 . 572) (undo-tree-id410 . 572) (undo-tree-id411 . 572) (undo-tree-id412 . 572) (undo-tree-id413 . 572) (undo-tree-id414 . 572) (undo-tree-id415 . 572) (undo-tree-id416 . 572) (undo-tree-id417 . 572) (undo-tree-id418 . 572) (undo-tree-id419 . 572) (undo-tree-id420 . 572) (undo-tree-id421 . 572) (undo-tree-id422 . 572) (undo-tree-id423 . 572) (undo-tree-id424 . 572) (undo-tree-id425 . 572) (undo-tree-id426 . 572) (undo-tree-id427 . 572) (undo-tree-id428 . 572) (undo-tree-id429 . 572) (undo-tree-id430 . 572) (undo-tree-id431 . 572) (undo-tree-id432 . 572) (undo-tree-id433 . 572) (undo-tree-id434 . 572) (undo-tree-id435 . 572) (undo-tree-id436 . 572) (undo-tree-id437 . 572) (undo-tree-id438 . 572) (undo-tree-id439 . 572) (undo-tree-id440 . 572) (undo-tree-id441 . 572) (undo-tree-id442 . 572) (undo-tree-id443 . 572) (undo-tree-id444 . 572) (undo-tree-id445 . 572) (undo-tree-id446 . 572) (undo-tree-id447 . 572) (undo-tree-id448 . 572) (undo-tree-id449 . 572) (undo-tree-id450 . 572) (undo-tree-id451 . 572) (undo-tree-id452 . 572) (undo-tree-id453 . 572) (undo-tree-id454 . 572) (undo-tree-id455 . 572) (undo-tree-id456 . 572) (undo-tree-id457 . 572) (undo-tree-id458 . 572) (undo-tree-id459 . 572) (undo-tree-id460 . 572) (undo-tree-id461 . 572) (undo-tree-id462 . 572) (undo-tree-id463 . 572) (undo-tree-id464 . 572) (undo-tree-id465 . 572) (undo-tree-id466 . 572) (undo-tree-id467 . 572) (undo-tree-id468 . 572) (undo-tree-id469 . 572) (undo-tree-id470 . 572) (undo-tree-id471 . 572) (undo-tree-id472 . 572) (undo-tree-id473 . 572) (undo-tree-id474 . 572) (undo-tree-id475 . 572) (undo-tree-id476 . 572) (undo-tree-id477 . 572) (undo-tree-id478 . 572) (undo-tree-id479 . 572) (undo-tree-id480 . 572) (undo-tree-id481 . 572) (undo-tree-id482 . 572) (undo-tree-id483 . 572) (undo-tree-id484 . 572) (undo-tree-id485 . 572) (undo-tree-id486 . 572) (undo-tree-id487 . 572) (undo-tree-id488 . 572) (undo-tree-id489 . 572) (undo-tree-id490 . 572) (undo-tree-id491 . 572) (undo-tree-id492 . 572) (undo-tree-id493 . 572) (undo-tree-id494 . 572) (undo-tree-id495 . 572) (undo-tree-id496 . 572) (undo-tree-id497 . 572) (undo-tree-id498 . 572) (undo-tree-id499 . 572) (undo-tree-id500 . 572) (undo-tree-id501 . 572) (undo-tree-id502 . 572) (undo-tree-id503 . 572) (undo-tree-id504 . 572) (undo-tree-id505 . 572) (undo-tree-id506 . 572) (undo-tree-id507 . 572) (undo-tree-id508 . 572) (undo-tree-id509 . 572) (undo-tree-id510 . 572) (undo-tree-id511 . 572) (undo-tree-id512 . 572) (undo-tree-id513 . 572) (undo-tree-id514 . 572) (undo-tree-id515 . 572) (undo-tree-id516 . 572) (undo-tree-id517 . 572) (undo-tree-id518 . 572) (undo-tree-id519 . 572) (undo-tree-id520 . 572) (undo-tree-id521 . 572) (undo-tree-id522 . 572) (undo-tree-id523 . 572) (undo-tree-id524 . 572) (undo-tree-id525 . 572) (undo-tree-id526 . 572) (undo-tree-id527 . 572) (undo-tree-id528 . 572) (undo-tree-id529 . 572) (undo-tree-id530 . 572) (undo-tree-id531 . 572) (undo-tree-id532 . 572) (undo-tree-id533 . 572) (undo-tree-id534 . 572) (undo-tree-id535 . 572) (undo-tree-id536 . 572) (undo-tree-id537 . 572) (undo-tree-id538 . 572) (undo-tree-id539 . 572) (undo-tree-id540 . 572) (undo-tree-id541 . 572) (undo-tree-id542 . 572) (undo-tree-id543 . 572) (undo-tree-id544 . 572) (undo-tree-id545 . 572) (undo-tree-id546 . 572) (undo-tree-id547 . 572) (undo-tree-id548 . 572) (undo-tree-id549 . 572) (undo-tree-id550 . 572) (undo-tree-id551 . 572) (undo-tree-id552 . 572) (undo-tree-id553 . 572) (undo-tree-id554 . 572) (undo-tree-id555 . 572) (undo-tree-id556 . 572) (undo-tree-id557 . 572) (undo-tree-id558 . 572) (undo-tree-id559 . 572) (undo-tree-id560 . 572) (undo-tree-id561 . 572) (undo-tree-id562 . 572) (undo-tree-id563 . 572) (undo-tree-id564 . 572) (undo-tree-id565 . 572) (undo-tree-id566 . 572) (undo-tree-id567 . 572) (undo-tree-id568 . 572) (undo-tree-id569 . 572) (undo-tree-id570 . 572) (undo-tree-id571 . 572) (undo-tree-id572 . 572) (undo-tree-id573 . 572) (undo-tree-id574 . 572) (undo-tree-id575 . 572) (undo-tree-id576 . 572) (undo-tree-id577 . 572) (undo-tree-id578 . 572) (undo-tree-id579 . 572) (undo-tree-id580 . 572) (undo-tree-id581 . 572) (undo-tree-id582 . 572) (undo-tree-id583 . 572) (undo-tree-id584 . 572) (undo-tree-id585 . 572) (undo-tree-id586 . 572) (undo-tree-id587 . 572) (undo-tree-id588 . 572) (undo-tree-id589 . 572) (undo-tree-id590 . 572) (undo-tree-id591 . 572) (undo-tree-id592 . 572) (undo-tree-id593 . 572) (undo-tree-id594 . 572) (undo-tree-id595 . 572) (undo-tree-id596 . 572) (undo-tree-id597 . 572) (undo-tree-id598 . 572) (undo-tree-id599 . 572) (undo-tree-id600 . 572) (undo-tree-id601 . 572) (undo-tree-id602 . 572) (undo-tree-id603 . 572) (undo-tree-id604 . 572) (undo-tree-id605 . 572) (undo-tree-id606 . 572) (undo-tree-id607 . 572) (undo-tree-id608 . 572) (undo-tree-id609 . 572) (undo-tree-id610 . 572) (undo-tree-id611 . 572) (undo-tree-id612 . 572) (undo-tree-id613 . 572) (undo-tree-id614 . 572) (undo-tree-id615 . 572) (undo-tree-id616 . 572) (undo-tree-id617 . 572) (undo-tree-id618 . 572) (undo-tree-id619 . 572) (undo-tree-id620 . 572) (undo-tree-id621 . 572) (undo-tree-id622 . 572) (undo-tree-id623 . 572) (undo-tree-id624 . 572) (undo-tree-id625 . 572) (undo-tree-id626 . 572) (undo-tree-id627 . 572) (undo-tree-id628 . 572) (undo-tree-id629 . 572) (undo-tree-id630 . 572) (undo-tree-id631 . 572) (undo-tree-id632 . 572) (undo-tree-id633 . 572) (undo-tree-id634 . 572) (undo-tree-id635 . 572) (undo-tree-id636 . 572) (undo-tree-id637 . 572) (undo-tree-id638 . 572) (undo-tree-id639 . 572) (undo-tree-id640 . 572) (undo-tree-id641 . 572) (undo-tree-id642 . 572) (undo-tree-id643 . 572) (undo-tree-id644 . 572) (undo-tree-id645 . 572) (undo-tree-id646 . 572) (undo-tree-id647 . 572) (undo-tree-id648 . 572) (undo-tree-id649 . 572) (undo-tree-id650 . 572) (undo-tree-id651 . 572) (undo-tree-id652 . 572) (undo-tree-id653 . 572) (undo-tree-id654 . 572) (undo-tree-id655 . 572) (undo-tree-id656 . 572) (undo-tree-id657 . 572) (undo-tree-id658 . 572) (undo-tree-id659 . 572) (undo-tree-id660 . 572) (undo-tree-id661 . 572) (undo-tree-id662 . 572) (undo-tree-id663 . 572) (undo-tree-id664 . 572) (undo-tree-id665 . 572) (undo-tree-id666 . 572) (undo-tree-id667 . 572) (undo-tree-id668 . 572) (undo-tree-id669 . 572) (undo-tree-id670 . 572) (undo-tree-id671 . 572) (undo-tree-id672 . 572) (undo-tree-id673 . 572) (undo-tree-id674 . 572) (undo-tree-id675 . 572) (undo-tree-id676 . 572) (undo-tree-id677 . 572) (undo-tree-id678 . 572) (undo-tree-id679 . 572) (undo-tree-id680 . 572) (undo-tree-id681 . 572) (undo-tree-id682 . 572) (undo-tree-id683 . 572) (undo-tree-id684 . 572) (undo-tree-id685 . 572) (undo-tree-id686 . 572) (undo-tree-id687 . 572) (undo-tree-id688 . 572) (undo-tree-id689 . 572) (undo-tree-id690 . 572) (undo-tree-id691 . 572) (undo-tree-id692 . 572) (undo-tree-id693 . 572) (undo-tree-id694 . 572) (undo-tree-id695 . 572) (undo-tree-id696 . 572) (undo-tree-id697 . 572) (undo-tree-id698 . 572) (undo-tree-id699 . 572) (undo-tree-id700 . 572) (undo-tree-id701 . 572) (undo-tree-id702 . 572) (undo-tree-id703 . 572) (undo-tree-id704 . 572) (undo-tree-id705 . 572) (undo-tree-id706 . 572) (undo-tree-id707 . 572) (undo-tree-id708 . 572) (undo-tree-id709 . 572) (undo-tree-id710 . 572) (undo-tree-id711 . 572) (undo-tree-id712 . 572) (undo-tree-id713 . 572) (undo-tree-id714 . 572) (undo-tree-id715 . 572) (undo-tree-id716 . 572) (undo-tree-id717 . 572) (undo-tree-id718 . 572) (undo-tree-id719 . 572) (undo-tree-id720 . 572) (undo-tree-id721 . 572) (undo-tree-id722 . 572) (undo-tree-id723 . 572) (undo-tree-id724 . 572) (undo-tree-id725 . 572) (undo-tree-id726 . 572) (undo-tree-id727 . 572) (undo-tree-id728 . 572) (undo-tree-id729 . 572) (undo-tree-id730 . 572) (undo-tree-id731 . 572) (undo-tree-id732 . 572) (undo-tree-id733 . 572) (undo-tree-id734 . 572) (undo-tree-id735 . 572) (undo-tree-id736 . 572) (undo-tree-id737 . 572) (undo-tree-id738 . 572) (undo-tree-id739 . 572) (undo-tree-id740 . 572) (undo-tree-id741 . 572) (undo-tree-id742 . 572) (undo-tree-id743 . 572) (undo-tree-id744 . 572) (undo-tree-id745 . 572) (undo-tree-id746 . 572) (undo-tree-id747 . 572) (undo-tree-id748 . 572) (undo-tree-id749 . 572) (undo-tree-id750 . 572) (undo-tree-id751 . 572) (undo-tree-id752 . 572) (undo-tree-id753 . 572) (undo-tree-id754 . 572) (undo-tree-id755 . 572) (undo-tree-id756 . 572) (undo-tree-id757 . 572) (undo-tree-id758 . 572) (undo-tree-id759 . 572) (undo-tree-id760 . 572) (undo-tree-id761 . 572) (undo-tree-id762 . 572) (undo-tree-id763 . 572) (undo-tree-id764 . 572) (undo-tree-id765 . 572) (undo-tree-id766 . 572) (undo-tree-id767 . 572) (undo-tree-id768 . 572) (undo-tree-id769 . 572) (undo-tree-id770 . 572) (undo-tree-id771 . 572) (undo-tree-id772 . -396) (undo-tree-id773 . -398) (undo-tree-id774 . 572) (undo-tree-id775 . 572) (undo-tree-id776 . 572) (undo-tree-id777 . 572) (undo-tree-id778 . 570) (undo-tree-id779 . 572) (t 23701 38986 93846 978000)) (23701 38986 83659 499000) 0 nil]) ((397 . 398) (#(")" 0 1 (fontified nil)) . 397) (389 . 397) (#("new" 0 3 (fontified nil)) . 389) (389 . 392) (388 . 390) (#("(" 0 1 (fontified nil)) . 388) (388 . 389) (#("n" 0 1 (fontified nil)) . 388) (380 . 389) (380 . 381) (#("    println!(new)
" 0 4 (fontified t) 4 12 (fontified t face rust-builtin-formatting-macro-face) 12 13 (fontified t) 13 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t)) . 380) (undo-tree-id797 . 2) (undo-tree-id798 . -13) (undo-tree-id799 . 3) (undo-tree-id800 . 2) (undo-tree-id801 . 2) (undo-tree-id802 . 2) (undo-tree-id803 . 5)) ((380 . 398) (#("
" 0 1 (fontified nil)) . 380) (undo-tree-id780 . 1) (undo-tree-id781 . 1) (undo-tree-id782 . 1) (undo-tree-id783 . 1) (#("    " 0 4 (fontified nil)) . 380) (undo-tree-id784 . -4) (#("db" 0 2 (fontified nil face font-lock-preprocessor-face)) . 384) (undo-tree-id785 . -2) (#("g!n" 0 2 (fontified nil face font-lock-preprocessor-face) 2 3 (fontified nil)) . 386) (undo-tree-id786 . -2) (388 . 389) (#("(" 0 1 (fontified nil)) . 388) (388 . 389) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 388) (undo-tree-id787 . -1) (#("new" 0 3 (fontified nil)) . 389) (389 . 392) (#("new_key" 0 7 (fontified nil)) . 389) (undo-tree-id788 . -7) (#(")" 0 1 (fontified nil)) . 396) (undo-tree-id789 . -1) (397 . 398) (#(";" 0 1 (fontified t)) . 397) (undo-tree-id790 . 1) (undo-tree-id791 . 1) (undo-tree-id792 . 1)) (23701 39138 447321 993000) 0 nil]) ((393 . 396)) ((#("new" 0 3 (fontified t)) . 393) (undo-tree-id793 . -2) (undo-tree-id794 . 1)) (23701 39137 980121 503000) 0 nil]) ((378 . 379) (#(":" 0 1 (fontified nil)) . 378) (378 . 379) (#(")" 0 1 (fontified nil)) . 378) (377 . 378) (376 . 378) (#("(" 0 1 (fontified nil)) . 376) (372 . 377) (#("q" 0 1 (fontified nil)) . 372) (369 . 373) (#(";" 0 1 (fontified t)) . 369) (undo-tree-id795 . -1) (undo-tree-id796 . 1)) ((369 . 370) (#(".unq" 0 3 (fontified nil) 3 4 (fontified nil)) . 369) (372 . 373) (#("wr" 0 2 (fontified nil)) . 372) (#("ap(" 0 2 (fontified nil) 2 3 (fontified nil)) . 374) (376 . 377) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 376) (#(")" 0 1 (fontified nil)) . 377) (378 . 379) (#(":" 0 1 (fontified nil)) . 378) (378 . 379) (#(";" 0 1 (fontified t)) . 378)) (23701 39137 795787 353000) 0 nil]) ((383 . 385) (#("(" 0 1 (fontified nil)) . -383) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (375 . 384) (370 . 375) 319) nil (23701 39136 798734 80000) 0 nil]) ((876 . 877) (875 . 876) (833 . 834) (832 . 833) (757 . 758) (756 . 757) (744 . 745) (743 . 744) (711 . 712) (710 . 711) (649 . 650) (648 . 649) (620 . 621) (619 . 620) (545 . 546) (544 . 545) (502 . 503) (501 . 502) (468 . 469) (467 . 468) (372 . 374)) nil (23701 38986 83903 841000) 0 nil] [nil nil ((372 . 376) (372 . 373) (#("    let input = fs::read_to_string(format!(\"{}/{}\", config_dir.display(), \"global_marks\"))?;
    for line in input.lines() {
        let mut words = line.split(\" \");
        let (key, url) = (words.nth(0).unwrap(), words.nth(0).unwrap());
        let cmd = format!(
            \"bind '{} :buffer {}\\nbind \\\"{} :open -t {}\\n\",
            key, url, key, url
        );
        let mut file = fs::File::create(env::var(\"QUTE_FIFO\").unwrap())?;
        file.write_all(cmd.as_bytes())?;
    }
" 0 3 (fontified t) 3 4 (rear-nonsticky t fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 13 (fontified t face font-lock-variable-name-face) 13 16 (fontified t) 16 18 (fontified t face font-lock-constant-face) 18 35 (fontified t) 35 42 (fontified t face rust-builtin-formatting-macro-face) 42 43 (fontified t) 43 44 (fontified t face font-lock-string-face) 44 46 (fontified t face rust-string-interpolation-face) 46 47 (fontified t face font-lock-string-face) 47 49 (fontified t face rust-string-interpolation-face) 49 50 (fontified t face font-lock-string-face) 50 74 (fontified t) 74 84 (fontified t face font-lock-string-face) 84 85 (fontified t face font-lock-string-face) 85 88 (fontified t face font-lock-string-face) 88 90 (fontified t) 90 91 (fontified t face rust-question-mark-face) 91 92 (fontified t) 92 93 (fontified t) 93 97 (fontified t) 97 100 (fontified t face font-lock-keyword-face) 100 106 (fontified t) 106 108 (fontified t face font-lock-keyword-face) 108 125 (fontified t) 125 133 (fontified t) 133 136 (fontified t face font-lock-keyword-face) 136 137 (fontified t) 137 140 (fontified t face font-lock-keyword-face) 140 141 (fontified t) 141 146 (fontified t face font-lock-variable-name-face) 146 160 (fontified t) 160 163 (fontified t face font-lock-string-face) 163 165 (fontified t) 165 166 (fontified t) 166 174 (fontified t) 174 177 (fontified t face font-lock-keyword-face) 177 206 (fontified t) 206 239 (fontified t) 239 247 (fontified t) 247 250 (fontified t face font-lock-keyword-face) 250 251 (fontified t) 251 254 (fontified t face font-lock-variable-name-face) 254 257 (fontified t) 257 264 (fontified t face rust-builtin-formatting-macro-face) 264 270 (fontified t) 270 278 (fontified t) 278 285 (fontified t face font-lock-string-face) 285 287 (fontified t face rust-string-interpolation-face) 287 296 (fontified t face font-lock-string-face) 296 298 (fontified t face rust-string-interpolation-face) 298 324 (fontified t face font-lock-string-face) 324 326 (fontified t) 326 366 (fontified t) 366 368 (fontified t) 368 376 (fontified t) 376 379 (fontified t face font-lock-keyword-face) 379 380 (fontified t) 380 383 (fontified t face font-lock-keyword-face) 383 384 (fontified t) 384 388 (fontified t face font-lock-variable-name-face) 388 391 (fontified t) 391 393 (fontified t face font-lock-constant-face) 393 395 (fontified t) 395 399 (fontified t face font-lock-type-face) 399 408 (fontified t) 408 411 (fontified t face font-lock-constant-face) 411 417 (fontified t) 417 428 (fontified t face font-lock-string-face) 428 431 (fontified t) 431 439 (fontified t) 439 440 (fontified t face rust-question-mark-face) 440 442 (fontified t) 442 464 (fontified t) 464 477 (fontified t) 477 478 (fontified t) 478 479 (fontified t) 479 480 (fontified t) 480 481 (fontified t face rust-question-mark-face) 481 483 (fontified t) 483 489 (fontified t)) . 372) (undo-tree-id0 . -488) (undo-tree-id1 . -488) (undo-tree-id2 . -43) (undo-tree-id3 . -44) (undo-tree-id4 . 438) (undo-tree-id5 . -51) (undo-tree-id6 . -488) (undo-tree-id7 . -489) (undo-tree-id8 . 438) (undo-tree-id9 . 438) (undo-tree-id10 . -51) (undo-tree-id11 . -488) (undo-tree-id12 . 365) (undo-tree-id13 . 438) (undo-tree-id14 . 324) (undo-tree-id15 . 365) (undo-tree-id16 . 272) (undo-tree-id17 . 324) (undo-tree-id18 . 224) (undo-tree-id19 . 272) (undo-tree-id20 . 172) (undo-tree-id21 . 224) (undo-tree-id22 . 133) (undo-tree-id23 . 172) (undo-tree-id24 . 122) (undo-tree-id25 . 133) (undo-tree-id26 . 136) (undo-tree-id27 . -356) (undo-tree-id28 . 70) (undo-tree-id29 . 122) (undo-tree-id30 . 7) (undo-tree-id31 . 70) (undo-tree-id32 . 1) (undo-tree-id33 . 7) (undo-tree-id34 . 1) (undo-tree-id35 . 1) 860) ((372 . 861) (#("
" 0 1 (fontified nil)) . 372) (undo-tree-id133 . 1) (undo-tree-id134 . 1) (undo-tree-id135 . 1) (undo-tree-id136 . 1) (undo-tree-id137 . 1) (#("    " 0 4 (fontified t)) . 372) (undo-tree-id138 . -3) (undo-tree-id139 . 4) (undo-tree-id140 . 1) (undo-tree-id141 . 1)) (23701 38949 735198 497000) 0 nil]) ((369 . 370) (#(")" 0 1 (fontified nil)) . 369) (undo-tree-id36 . 1) (undo-tree-id37 . 1) (undo-tree-id38 . 1) (undo-tree-id39 . 1) (undo-tree-id40 . 1) (undo-tree-id41 . 1) (undo-tree-id42 . 1) (undo-tree-id43 . 1) (undo-tree-id44 . 1) (undo-tree-id45 . 1) (undo-tree-id46 . 1) (undo-tree-id47 . 1) (undo-tree-id48 . 1) (undo-tree-id49 . 1) (undo-tree-id50 . 1) (undo-tree-id51 . 1) (undo-tree-id52 . 1) (undo-tree-id53 . 1) (undo-tree-id54 . 1) (undo-tree-id55 . 1) (undo-tree-id56 . 1) (undo-tree-id57 . 1) (undo-tree-id58 . 1) (undo-tree-id59 . 1) (undo-tree-id60 . 1) (undo-tree-id61 . 1) (undo-tree-id62 . 1) (undo-tree-id63 . 1) (undo-tree-id64 . 1) (undo-tree-id65 . 1) (undo-tree-id66 . 1) (undo-tree-id67 . 1) (undo-tree-id68 . 1) (368 . 369) (#(" " 0 1 (fontified nil)) . -368) (368 . 369) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -368) (368 . 369) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 368) (undo-tree-id69 . 1) (undo-tree-id70 . 1) (undo-tree-id71 . 1) (undo-tree-id72 . 1) (undo-tree-id73 . 1) (undo-tree-id74 . 1) (undo-tree-id75 . 1) (undo-tree-id76 . 1) (undo-tree-id77 . 1) (undo-tree-id78 . 1) (undo-tree-id79 . 1) (undo-tree-id80 . 1) (undo-tree-id81 . 1) (undo-tree-id82 . 1) (undo-tree-id83 . 1) (undo-tree-id84 . 1) (undo-tree-id85 . 1) (undo-tree-id86 . 1) (undo-tree-id87 . 1) (undo-tree-id88 . 1) (undo-tree-id89 . 1) (undo-tree-id90 . 1) (undo-tree-id91 . 1) (undo-tree-id92 . 1) (undo-tree-id93 . 1) (undo-tree-id94 . 1) (undo-tree-id95 . 1) (undo-tree-id96 . 1) (undo-tree-id97 . 1) (undo-tree-id98 . 1) (undo-tree-id99 . 1) (undo-tree-id100 . 1) (undo-tree-id101 . -1) (367 . 368) (#(" " 0 1 (fontified nil)) . -367) (undo-tree-id102 . -1) (367 . 368) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -367) (undo-tree-id103 . -1) (358 . 368) (#("l" 0 1 (fontified t face font-lock-string-face)) . -358) (undo-tree-id104 . -1) (undo-tree-id105 . 1) 359 (351 . 359) (#("c" 0 1 (fontified t face font-lock-string-face)) . -351) (undo-tree-id106 . -1) (undo-tree-id107 . 1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -352) (undo-tree-id108 . -1) (undo-tree-id109 . 1) 353 (346 . 353) (345 . 347) (#("\"" 0 1 (fontified nil)) . -345) (345 . 346) (344 . 346) (#("(" 0 1 (fontified nil)) . -344) (339 . 345) (336 . 339) (322 . 336) (317 . 322) 316) nil (23701 38949 736564 239000) 0 nil]) ((316 . 317) (#(":" 0 1 (fontified t)) . -316) (undo-tree-id110 . -1) (undo-tree-id111 . 1) 317 (316 . 317) (#(")" 0 1 (fontified nil)) . 316) (315 . 316) (314 . 316) (#("(" 0 1 (fontified nil)) . -314) (294 . 315) (#("p" 0 1 (fontified t face font-lock-variable-name-face)) . -294) (undo-tree-id112 . -1) 295 (290 . 295) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -290) (undo-tree-id113 . -1) (#("u" 0 1 (fontified t face font-lock-variable-name-face)) . -291) (undo-tree-id114 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -292) (undo-tree-id115 . -1) 293 (290 . 293) (286 . 290) (281 . 286) 252) nil (23701 38949 735538 890000) 0 nil]) ((#("}
" 0 1 (fontified t) 1 2 (fontified t)) . 786) (undo-tree-id116 . 2) (undo-tree-id117 . 2) (undo-tree-id118 . 2) (undo-tree-id119 . 2) (undo-tree-id120 . -1) (undo-tree-id121 . 2) (undo-tree-id122 . 2)) nil (23701 38949 735570 850000) 0 nil]) ((#("    println!(\"Hello, world!\");
" 0 4 (fontified t) 4 12 (fontified t face rust-builtin-formatting-macro-face) 12 13 (fontified t) 13 28 (fontified t face font-lock-string-face) 28 31 (fontified t)) . 786) (undo-tree-id123 . 31) (undo-tree-id124 . 30) (undo-tree-id125 . 31) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . 31)) nil (23701 38949 735595 705000) 0 nil]) ((#("fn main() {
" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 7 (fontified t face font-lock-function-name-face) 7 11 (fontified t) 11 12 (fontified t rear-nonsticky t)) . 1) (undo-tree-id129 . 12) (undo-tree-id130 . -12) (undo-tree-id131 . 12) (undo-tree-id132 . -2)) nil (23701 38949 735615 385000) 0 nil]) ((nil rear-nonsticky nil 12 . 13) (#("
" 0 1 (fontified nil)) . -797) (12 . 798) 2 (t 23701 38616 29189 815000)) nil (23701 38949 735624 563000) 0 nil]) nil nil (23701 38949 735628 983000) 0 nil] #3# 28334 121 nil)