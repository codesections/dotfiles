"2134c23d8e585e78d8cc89b63717a2f27232ba94"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#2=[nil nil ((#("
" 0 1 (fontified t)) . 712) (t 23736 52757 988201 460000)) nil (23736 52762 158837 244000) 0 nil]) ((1 . 886) (#("use postgres;

fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
}

pub fn get_account_id(token: String) -> Result<i64, ()> {
    let conn = conn();
    let result = &conn.query(
        \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
        &[&token],
    ).expect(\"Hard-coded query will return Some([0 or more rows])\");


    if !result.is_empty(){
        let only_row = result.get(0);
        let account_id: i64 = only_row.get(1);
        Ok(account_id)
    } else {
        Err(())
    }
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 12 (fontified t face font-lock-constant-face) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t) 15 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t) 18 22 (fontified t face font-lock-function-name-face) 22 26 (fontified t) 26 27 (syntax-table #1=(1) fontified t) 27 28 (fontified t) 28 36 (fontified t face font-lock-constant-face) 36 38 (fontified t) 38 48 (fontified t face font-lock-type-face) 48 55 (fontified t) 55 63 (fontified t face font-lock-constant-face) 63 65 (fontified t) 65 75 (fontified t face font-lock-type-face) 75 94 (fontified t) 94 143 (fontified t face font-lock-string-face) 143 153 (fontified t) 153 161 (fontified t face font-lock-constant-face) 161 163 (fontified t) 163 170 (fontified t face font-lock-type-face) 170 172 (fontified t) 172 176 (fontified t face font-lock-type-face) 176 201 (fontified t) 201 204 (fontified t face font-lock-keyword-face) 204 205 (fontified t) 205 207 (fontified t face font-lock-keyword-face) 207 208 (fontified t) 208 222 (fontified t face font-lock-function-name-face) 222 223 (fontified t) 223 228 (fontified t face font-lock-variable-name-face) 228 230 (fontified t) 230 236 (fontified t face font-lock-type-face) 236 239 (fontified t) 239 240 (syntax-table #1# fontified t) 240 241 (fontified t) 241 247 (fontified t face font-lock-type-face) 247 248 (fontified t) 248 251 (fontified t face font-lock-type-face) 251 253 (fontified t) 253 255 (fontified t) 255 259 (fontified t) 259 263 (fontified t) 263 266 (fontified t face font-lock-keyword-face) 266 267 (fontified t) 267 271 (fontified t face font-lock-variable-name-face) 271 282 (fontified t) 282 286 (fontified t) 286 289 (fontified t face font-lock-keyword-face) 289 290 (fontified t) 290 296 (fontified t face font-lock-variable-name-face) 296 297 (fontified t) 297 312 (fontified t) 312 320 (fontified t) 320 481 (fontified t face font-lock-string-face) 481 503 (fontified t face font-lock-string-face) 503 506 (fontified t face font-lock-string-face) 506 507 (fontified t face font-lock-string-face) 507 540 (fontified t face font-lock-string-face) 540 583 (fontified t face font-lock-string-face) 583 591 (fontified t face font-lock-string-face) 591 592 (fontified t) 592 612 (fontified t) 612 613 (fontified t) 613 624 (fontified t) 624 625 (fontified t) 625 628 (fontified t face font-lock-string-face) 628 629 (fontified t face font-lock-string-face) 629 640 (fontified t face font-lock-string-face) 640 641 (fontified t face font-lock-string-face) 641 648 (fontified t face font-lock-string-face) 648 649 (fontified t face font-lock-string-face) 649 652 (fontified t face font-lock-string-face) 652 653 (fontified t face font-lock-string-face) 653 659 (fontified t face font-lock-string-face) 659 660 (fontified t face font-lock-string-face) 660 675 (fontified t face font-lock-string-face) 675 676 (fontified t face font-lock-string-face) 676 677 (fontified t face font-lock-string-face) 677 678 (fontified t face font-lock-string-face) 678 680 (fontified t) 680 681 (fontified t) 681 682 (fontified t) 682 683 (fontified t) 683 687 (fontified t) 687 689 (fontified t face font-lock-keyword-face) 689 698 (fontified t) 698 706 (fontified t) 706 708 (fontified t) 708 709 (fontified t) 709 710 (fontified t) 710 718 (fontified t) 718 721 (fontified t face font-lock-keyword-face) 721 722 (fontified t) 722 730 (fontified t face font-lock-variable-name-face) 730 747 (fontified t) 747 748 (fontified t) 748 756 (fontified t) 756 759 (fontified t face font-lock-keyword-face) 759 760 (fontified t) 760 770 (fontified t face font-lock-variable-name-face) 770 772 (fontified t) 772 775 (fontified t face font-lock-type-face) 775 794 (fontified t) 794 795 (fontified t) 795 803 (fontified t) 803 805 (fontified t face font-lock-type-face) 805 818 (fontified t) 818 824 (fontified t) 824 828 (fontified t face font-lock-keyword-face) 828 831 (fontified t) 831 832 (fontified t) 832 839 (fontified t) 839 842 (fontified t face font-lock-type-face) 842 843 (fontified t) 843 845 (fontified t) 845 847 (fontified t) 847 853 (fontified t) 853 855 (fontified t)) . 1) (undo-tree-id1076 . -795) (undo-tree-id1077 . -795) (undo-tree-id1078 . -795) (undo-tree-id1079 . 164) (undo-tree-id1080 . -442) (undo-tree-id1081 . -462) (undo-tree-id1082 . -442) (undo-tree-id1083 . -581) (undo-tree-id1084 . -581) (undo-tree-id1085 . -581) (undo-tree-id1086 . -442) (undo-tree-id1087 . -581) (undo-tree-id1088 . -581) (undo-tree-id1089 . -581) (undo-tree-id1090 . -581) (undo-tree-id1091 . -581) (undo-tree-id1092 . -581) (undo-tree-id1093 . -581) (undo-tree-id1094 . -581) (undo-tree-id1095 . -581) (undo-tree-id1096 . -581) (undo-tree-id1097 . -581) (undo-tree-id1098 . -581) (undo-tree-id1099 . -581) (undo-tree-id1100 . -581) (undo-tree-id1101 . -581) (undo-tree-id1102 . -581) (undo-tree-id1103 . -581) (undo-tree-id1104 . -581) (undo-tree-id1105 . -581) (undo-tree-id1106 . -581) (undo-tree-id1107 . -581) (undo-tree-id1108 . -613) (undo-tree-id1109 . -795) (undo-tree-id1110 . -795) (undo-tree-id1111 . -795) (undo-tree-id1112 . -795) (undo-tree-id1113 . -706) (undo-tree-id1114 . -706) (undo-tree-id1115 . -705) (undo-tree-id1116 . -706) (undo-tree-id1117 . -705) (undo-tree-id1118 . -705) (undo-tree-id1119 . -681) (undo-tree-id1120 . -795) (undo-tree-id1121 . -795) (undo-tree-id1122 . -748) (undo-tree-id1123 . -795) (undo-tree-id1124 . -710) (undo-tree-id1125 . -748) (undo-tree-id1126 . -683) (undo-tree-id1127 . -710) (undo-tree-id1128 . -682) (undo-tree-id1129 . -683) (undo-tree-id1130 . -681) (undo-tree-id1131 . -682) 682) nil (23736 52757 971724 637000) 0 nil]) ((#("        dbg!(\"thrid\");
" 0 7 (fontified t) 7 8 (rear-nonsticky t fontified t) 8 12 (fontified t face font-lock-preprocessor-face) 12 13 (fontified t) 13 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 20 (fontified t face font-lock-string-face) 20 22 (fontified t) 22 23 (fontified t)) . 796) (undo-tree-id1132 . -22) (undo-tree-id1133 . -22) (undo-tree-id1134 . -18) (undo-tree-id1135 . -18) (undo-tree-id1136 . -18) (undo-tree-id1137 . -18)) nil (23736 52757 971742 816000) 0 nil]) ((#("        dbg!(\"second\");
" 0 7 (fontified t) 7 8 (rear-nonsticky t fontified t) 8 12 (fontified t face font-lock-preprocessor-face) 12 13 (fontified t) 13 20 (fontified t face font-lock-string-face) 20 21 (fontified t face font-lock-string-face) 21 23 (fontified t) 23 24 (fontified t)) . 749)) nil (23736 52757 971746 342000) 0 nil]) ((#("        dbg!(\"first\");
" 0 8 (fontified t) 8 12 (fontified t face font-lock-preprocessor-face) 12 13 (fontified t) 13 16 (fontified t face font-lock-string-face) 16 17 (fontified t face font-lock-string-face) 17 20 (fontified t face font-lock-string-face) 20 22 (fontified t) 22 23 (fontified t)) . 711) (undo-tree-id1138 . -7) 718) nil (23736 52757 971749 810000) 0 nil]) ((691 . 692)) nil (23736 52757 971751 781000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 708) (707 . 708) (706 . 708) (#("(" 0 1 (fontified nil)) . -706) (706 . 707) (698 . 706) (#("is" 0 2 (fontified t)) . -698) (undo-tree-id1139 . -2) 700 (697 . 700) (#("s" 0 1 (fontified t)) . -697) (undo-tree-id1140 . -1) (#("." 0 1 (fontified t)) . -698) (undo-tree-id1141 . -1) (#("i" 0 1 (fontified t)) . -699) (undo-tree-id1142 . -1) (#("s" 0 1 (fontified t)) . -700) (undo-tree-id1143 . -1) 701 (698 . 701) (#(" " 0 1 (fontified t)) . -698) (undo-tree-id1144 . -1) 699 (695 . 699) (#(";" 0 1 (fontified t)) . -695) (undo-tree-id1145 . -1) 696 (695 . 696) (#(";" 0 1 (fontified t)) . -695) (undo-tree-id1146 . -1) (#("t" 0 1 (fontified t)) . -696) (undo-tree-id1147 . -1) 697 (695 . 697) (#(";" 0 1 (fontified t)) . -695) (undo-tree-id1148 . -1) (#("t" 0 1 (fontified t)) . -696) (undo-tree-id1149 . -1) (#("s" 0 1 (fontified t)) . -697) (undo-tree-id1150 . -1) 698 (691 . 698) (688 . 691) (#("f" 0 1 (fontified t)) . -688) (undo-tree-id1151 . -1) 689 (688 . 689)) nil (23736 52757 971779 884000) 0 nil]) ((680 . 681)) nil (23736 52757 971787 932000) 0 nil]) ((662 . 676) (661 . 663) (#("[" 0 1 (fontified nil face font-lock-string-face)) . -661) (661 . 662) (#("0" 0 1 (fontified t face font-lock-string-face)) . -661) (undo-tree-id1152 . -1) 662 (661 . 662) (660 . 662) (#("(" 0 1 (fontified nil face font-lock-string-face)) . -660) (654 . 661) (633 . 654) (627 . 633) (#("h" 0 1 (fontified t face font-lock-string-face)) . -627) (undo-tree-id1153 . -1) 628 (627 . 628) (626 . 628) (#("\"" 0 1 (fontified nil)) . -626) (626 . 627) (625 . 627) (#("(" 0 1 (fontified nil)) . -625) (618 . 626)) nil (23736 52757 971799 480000) 0 nil]) ((621 . 625) (#("        " 0 8 (fontified nil)) . 620) (620 . 628) (#("    " 0 4 (fontified nil)) . 620) (undo-tree-id1154 . -4) (620 . 625) (#("        " 0 8 (fontified nil)) . 619) (619 . 627) (#("    " 0 4 (fontified nil)) . 619) (undo-tree-id1155 . -4) (620 . 624) (618 . 619)) nil (23736 52757 971809 856000) 0 nil]) ((293 . 298) (#("u" 0 1 (fontified t)) . -293) (undo-tree-id1156 . -1) (#("s" 0 1 (fontified t)) . -294) (undo-tree-id1157 . -1) (#("l" 0 1 (fontified t)) . -295) (undo-tree-id1158 . -1) (#("t" 0 1 (fontified t)) . -296) (undo-tree-id1159 . -1) 297 (293 . 297) (287 . 293) (#("if let Ok(result) " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 9 (fontified t face font-lock-type-face) 9 18 (fontified t)) . 287) (undo-tree-id1160 . -12) (t 23736 52455 183217 909000)) nil (23736 52757 971823 702000) 0 nil] [nil nil ((#("if let Ok(result) = &conn.query(
        \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
        &[&token],
    ) {
        dbg!(\"first\");
        let only_row = result.get(0);
        dbg!(\"second\");
        let account_id: i64 = only_row.get(1);
        dbg!(\"thrid\");
        Ok(account_id)
    } else {
        Err(())
    }
" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 9 (fontified t face font-lock-type-face) 9 41 (fontified t) 41 202 (fontified t face font-lock-string-face) 202 224 (fontified t face font-lock-string-face) 224 227 (fontified t face font-lock-string-face) 227 228 (fontified t face font-lock-string-face) 228 261 (face font-lock-string-face fontified t) 261 304 (fontified t face font-lock-string-face) 304 312 (fontified t face font-lock-string-face) 312 313 (fontified t) 313 333 (fontified t) 333 334 (fontified t) 334 340 (fontified t) 340 341 (fontified t) 341 349 (fontified t) 349 353 (fontified t face font-lock-preprocessor-face) 353 354 (fontified t) 354 357 (fontified t face font-lock-string-face) 357 358 (fontified t face font-lock-string-face) 358 361 (fontified t face font-lock-string-face) 361 363 (fontified t) 363 364 (fontified t) 364 372 (fontified t) 372 375 (fontified t face font-lock-keyword-face) 375 376 (fontified t) 376 384 (fontified t face font-lock-variable-name-face) 384 401 (fontified t) 401 402 (fontified t) 402 409 (fontified t) 409 410 (fontified t rear-nonsticky t) 410 414 (fontified t face font-lock-preprocessor-face) 414 415 (fontified t) 415 422 (fontified t face font-lock-string-face) 422 423 (fontified t face font-lock-string-face) 423 425 (fontified t) 425 426 (fontified t) 426 434 (fontified t) 434 437 (fontified t face font-lock-keyword-face) 437 438 (fontified t) 438 448 (fontified t face font-lock-variable-name-face) 448 450 (fontified t) 450 453 (fontified t face font-lock-type-face) 453 472 (fontified t) 472 473 (fontified t) 473 480 (fontified t) 480 481 (rear-nonsticky t fontified t) 481 485 (fontified t face font-lock-preprocessor-face) 485 486 (fontified t) 486 489 (fontified t face font-lock-string-face) 489 490 (fontified t face font-lock-string-face) 490 493 (fontified t face font-lock-string-face) 493 495 (fontified t) 495 496 (fontified t) 496 504 (fontified t) 504 506 (fontified t face font-lock-type-face) 506 525 (fontified t) 525 529 (fontified t face font-lock-keyword-face) 529 532 (fontified t) 532 540 (fontified t) 540 543 (fontified t face font-lock-type-face) 543 544 (fontified t) 544 546 (fontified t) 546 548 (fontified t) 548 554 (fontified t)) . 287) (undo-tree-id1024 . -495) (undo-tree-id1025 . -473) (undo-tree-id1026 . -495) (undo-tree-id1027 . 62) (undo-tree-id1028 . 289) (undo-tree-id1029 . -270) (undo-tree-id1030 . -163) (undo-tree-id1031 . -183) (undo-tree-id1032 . -163) (undo-tree-id1033 . -302) (undo-tree-id1034 . -302) (undo-tree-id1035 . -302) (undo-tree-id1036 . -163) (undo-tree-id1037 . -302) (undo-tree-id1038 . -302) (undo-tree-id1039 . -302) (undo-tree-id1040 . -302) (undo-tree-id1041 . -302) (undo-tree-id1042 . -302) (undo-tree-id1043 . -302) (undo-tree-id1044 . -302) (undo-tree-id1045 . -302) (undo-tree-id1046 . -302) (undo-tree-id1047 . -302) (undo-tree-id1048 . -302) (undo-tree-id1049 . -302) (undo-tree-id1050 . -302) (undo-tree-id1051 . -302) (undo-tree-id1052 . -302) (undo-tree-id1053 . -302) (undo-tree-id1054 . -302) (undo-tree-id1055 . -302) (undo-tree-id1056 . -302) (undo-tree-id1057 . -302) (undo-tree-id1058 . -334) (undo-tree-id1059 . 67) (undo-tree-id1060 . -492) (undo-tree-id1061 . -491) (undo-tree-id1062 . -491) (undo-tree-id1063 . -491) (undo-tree-id1064 . -491) (undo-tree-id1065 . -13) (undo-tree-id1066 . -13) (undo-tree-id1067 . -12) (undo-tree-id1068 . -13) (undo-tree-id1069 . -12) (undo-tree-id1070 . -12) (undo-tree-id1071 . -1) (undo-tree-id1072 . -41) (undo-tree-id1073 . -42) (undo-tree-id1074 . -354) (undo-tree-id1075 . -355) (t 23736 52455 183217 909000)) ((287 . 841)) (23736 52623 7033 74000) 0 nil]) ((774 . 779) (#("second" 0 6 (fontified t face font-lock-string-face)) . 774) (undo-tree-id1013 . 6) (undo-tree-id1014 . -6)) nil (23736 52623 14570 873000) 0 nil]) ((#("
" 0 1 (fontified nil)) . -783) (759 . 784) 732) nil (23736 52455 111066 352000) 0 nil]) ((703 . 709) (#("i" 0 1 (fontified t face font-lock-string-face)) . -703) (undo-tree-id1015 . -1) 704 (703 . 704) (#("first" 0 2 (fontified t face font-lock-string-face) 2 3 (fontified t face font-lock-string-face) 3 5 (fontified t face font-lock-string-face)) . 703)) nil (23736 52455 111071 878000) 0 nil]) ((nil rear-nonsticky nil 696 . 697) (#("
" 0 1 (fontified nil)) . -711) (688 . 712) 672) nil (23736 52455 111075 322000) 0 nil]) ((649 . 650)) nil (23736 52455 111077 223000) 0 nil]) ((642 . 647) (641 . 643) (#("\"" 0 1 (fontified nil)) . -641) (641 . 642) (640 . 642) (#("(" 0 1 (fontified nil)) . -640) (637 . 641) (#("b" 0 1 (fontified t)) . -637) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (#("j" 0 1 (fontified t)) . -638) (undo-tree-id1018 . -1) 639 (636 . 639) (#("p" 0 1 (fontified t)) . -636) (undo-tree-id1019 . -1) (#("r" 0 1 (fontified t)) . -637) (undo-tree-id1020 . -1) (#("i" 0 1 (fontified t)) . -638) (undo-tree-id1021 . -1) (#("n" 0 1 (fontified t)) . -639) (undo-tree-id1022 . -1) (#("t" 0 1 (fontified t)) . -640) (undo-tree-id1023 . -1) 641 (637 . 641) (636 . 637) (627 . 636) (t 23736 47365 181306 152000) 620) nil (23736 52455 111095 330000) 0 nil] [nil nil ((nil rear-nonsticky nil 621 . 622) (nil fontified nil 621 . 622) (621 . 622) 620 (t 23736 47365 181306 152000)) ((#(" " 0 1 (fontified nil rear-nonsticky nil)) . 621) (nil rear-nonsticky t 621 . 622)) (23736 52426 351579 968000) 0 nil] [nil ([nil ([nil ([nil nil ((#(")" 0 1 (fontified nil)) . 822) (821 . 822) (820 . 822) (#("(" 0 1 (fontified nil)) . -820) (820 . 821) (811 . 820) (#("n" 0 1 (fontified t)) . -811) (undo-tree-id1004 . -1) 812 (809 . 812) (803 . 809) (#("rej" 0 3 (fontified t)) . -803) (undo-tree-id1005 . -3) 806 (803 . 806) (797 . 803) (#("()" 0 2 (fontified t)) . 797) (t 23736 47310 464946 722000)) ((797 . 799) (#("warp::" 0 4 (fontified nil face font-lock-constant-face) 4 6 (fontified nil)) . 797) (#("rej" 0 3 (fontified nil)) . 803) (803 . 806) (#("reject" 0 6 (fontified nil face font-lock-constant-face)) . 803) (#("::n" 0 2 (fontified nil) 2 3 (fontified nil)) . 809) (811 . 812) (#("not_found" 0 9 (fontified nil)) . 811) (#("(" 0 1 (fontified nil)) . 820) (820 . 821) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 820) (#(")" 0 1 (fontified nil)) . 821) (822 . 823)) (23736 47356 931150 619000) 0 nil]) ((15 . 24) (14 . 15) 13) ((#("
" 0 1 (fontified t)) . 14) (#("use warp;" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 9 (fontified t)) . 15) (t 23736 47310 464946 722000)) (23736 47356 981457 266000) 0 nil]) ((273 . 282) (#("Rej" 0 3 (fontified t face font-lock-type-face)) . -273) (undo-tree-id980 . -3) (undo-tree-id982 . -2) (undo-tree-id984 . -3) 276 (270 . 276) (267 . 270) (#("()" 0 2 (fontified t)) . 267) (undo-tree-id987 . -1) (undo-tree-id989 . -1) (undo-tree-id991 . -2)) ((267 . 269) (#("war" 0 3 (fontified nil face font-lock-constant-face)) . 267) (#("p::Rej" 0 1 (fontified nil face font-lock-constant-face) 1 3 (fontified nil) 3 6 (fontified nil face font-lock-type-face)) . 270) (273 . 276) (#("Rejection" 0 9 (fontified t face font-lock-type-face)) . 273)) (23736 47357 191464 541000) 0 nil]) ((261 . 265) (#("p" 0 1 (fontified t face font-lock-type-face)) . -261) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (#("l" 0 1 (fontified t face font-lock-type-face)) . -262) (undo-tree-id996 . -1) 263 (260 . 263) (#("r" 0 1 (fontified t)) . -260) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (#("e" 0 1 (fontified t)) . -261) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) 262 (260 . 262) (#("p" 0 1 (fontified t)) . -260) (undo-tree-id1001 . -1) (#("r" 0 1 (fontified t)) . -261) (undo-tree-id1002 . -1) 262 (258 . 262) (#("P" 0 1 (fontified t)) . -258) (undo-tree-id1003 . -1) 259 (252 . 259) (249 . 252) (#("i64" 0 3 (fontified t face font-lock-type-face)) . 249) (t 23736 46034 238778 497000)) ((249 . 252) (#("imp" 0 3 (fontified nil face font-lock-keyword-face)) . 249) (undo-tree-id1006 . -3) (undo-tree-id1007 . -3) (#("l warpP" 0 1 (fontified nil face font-lock-keyword-face) 1 2 (fontified nil) 2 6 (fontified nil face font-lock-constant-face) 6 7 (fontified nil)) . 252) (undo-tree-id1008 . -1) (undo-tree-id1009 . -6) (258 . 259) (#("::pr" 0 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil)) . 258) (undo-tree-id1010 . -2) (260 . 262) (#("re" 0 1 (fontified nil) 1 2 (fontified nil)) . 260) (260 . 262) (#("Rpl" 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face)) . 260) (undo-tree-id1011 . -1) (261 . 263) (#("eply" 0 4 (fontified t face font-lock-type-face)) . 261) (undo-tree-id1012 . -4)) (23736 47357 490344 624000) 0 nil]) ((1 . 773) (#("use postgres;

fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
}

pub fn get_account_id(token: String) -> Result<i64, ()> {
    let conn = conn();
    if let Ok(result) = &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&token],
        ) {
            
            let only_row = result.get(0);
            let account_id: i64 = only_row.get(1);
            Ok(account_id)}
    else {
        Err(())
    }
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 12 (fontified t face font-lock-constant-face) 12 13 (fontified t) 13 15 (fontified t) 15 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t) 18 22 (fontified t face font-lock-function-name-face) 22 26 (fontified t) 26 27 (fontified t syntax-table #1#) 27 28 (fontified t) 28 36 (fontified t face font-lock-constant-face) 36 38 (fontified t) 38 48 (fontified t face font-lock-type-face) 48 51 (fontified t) 51 55 (fontified t) 55 63 (fontified t face font-lock-constant-face) 63 65 (fontified t) 65 75 (fontified t face font-lock-type-face) 75 94 (fontified t) 94 143 (fontified t face font-lock-string-face) 143 153 (fontified t) 153 161 (fontified t face font-lock-constant-face) 161 163 (fontified t) 163 170 (fontified t face font-lock-type-face) 170 172 (fontified t) 172 176 (fontified t face font-lock-type-face) 176 201 (fontified t) 201 204 (fontified t face font-lock-keyword-face) 204 205 (fontified t) 205 207 (fontified t face font-lock-keyword-face) 207 208 (fontified t) 208 222 (fontified t face font-lock-function-name-face) 222 223 (fontified t) 223 228 (fontified t face font-lock-variable-name-face) 228 230 (fontified t) 230 236 (fontified t face font-lock-type-face) 236 239 (fontified t) 239 240 (fontified t syntax-table #1#) 240 241 (fontified t) 241 247 (fontified t face font-lock-type-face) 247 248 (fontified t) 248 251 (fontified t face font-lock-type-face) 251 253 (fontified t) 253 255 (fontified t) 255 256 (fontified t) 256 259 (fontified t) 259 263 (fontified t) 263 266 (fontified t face font-lock-keyword-face) 266 267 (fontified t) 267 271 (fontified t face font-lock-variable-name-face) 271 282 (fontified t) 282 286 (fontified t) 286 288 (fontified t face font-lock-keyword-face) 288 289 (fontified t) 289 292 (fontified t face font-lock-keyword-face) 292 293 (fontified t) 293 295 (fontified t face font-lock-type-face) 295 296 (fontified t) 296 302 (fontified t) 302 303 (fontified t) 303 306 (fontified t) 306 307 (fontified t) 307 312 (fontified t) 312 340 (fontified t) 340 541 (fontified t face font-lock-string-face) 541 560 (fontified t face font-lock-string-face) 560 583 (fontified t face font-lock-string-face) 583 603 (fontified t face font-lock-string-face) 603 611 (fontified t face font-lock-string-face) 611 613 (fontified t) 613 628 (fontified t) 628 633 (fontified t) 633 636 (fontified t) 636 646 (fontified t) 646 647 (fontified t) 647 648 (fontified t) 648 660 (fontified t) 660 661 (fontified t) 661 673 (fontified t) 673 676 (fontified t face font-lock-keyword-face) 676 677 (fontified t) 677 685 (fontified t face font-lock-variable-name-face) 685 687 (fontified t) 687 694 (fontified t) 694 698 (fontified t) 698 700 (fontified t) 700 701 (fontified t) 701 702 (fontified t) 702 703 (fontified t) 703 715 (fontified t) 715 718 (fontified t face font-lock-keyword-face) 718 719 (fontified t) 719 729 (fontified t face font-lock-variable-name-face) 729 731 (fontified t) 731 734 (fontified t face font-lock-type-face) 734 736 (fontified t) 736 737 (fontified t) 737 745 (fontified t) 745 749 (fontified t) 749 752 (fontified t) 752 754 (fontified t) 754 766 (fontified t) 766 768 (fontified t face font-lock-type-face) 768 769 (fontified t) 769 776 (fontified t) 776 779 (fontified t) 779 780 (fontified t) 780 782 (fontified t) 782 786 (fontified t) 786 790 (fontified t face font-lock-keyword-face) 790 791 (fontified t) 791 792 (fontified t) 792 793 (fontified t) 793 801 (fontified t) 801 802 (fontified t face font-lock-type-face) 802 804 (fontified t face font-lock-type-face) 804 805 (fontified t) 805 806 (fontified t) 806 807 (fontified t) 807 808 (fontified t) 808 809 (fontified t) 809 812 (fontified t) 812 813 (fontified t) 813 814 (fontified t) 814 815 (fontified t) 815 816 (fontified t) 816 817 (fontified t)) . 1) (undo-tree-id891 . -216) (undo-tree-id892 . 521) (undo-tree-id893 . -628) (undo-tree-id894 . -656) (undo-tree-id895 . -656) (undo-tree-id896 . -656) (undo-tree-id897 . -656) (undo-tree-id898 . -656) (undo-tree-id899 . -656) (undo-tree-id900 . -656) (undo-tree-id901 . -656) (undo-tree-id902 . -656) (undo-tree-id903 . -656) (undo-tree-id904 . -656) (undo-tree-id905 . -656) (undo-tree-id906 . -656) (undo-tree-id907 . -656) (undo-tree-id908 . -203) (undo-tree-id909 . -203) (undo-tree-id910 . -203) (undo-tree-id911 . 383) (undo-tree-id912 . -439) (undo-tree-id913 . -628) (undo-tree-id914 . -628) (undo-tree-id915 . -203) (undo-tree-id916 . -628) (undo-tree-id917 . -216) (undo-tree-id918 . -274) (undo-tree-id919 . -628) (undo-tree-id920 . -216) (undo-tree-id921 . -216) (undo-tree-id922 . -216) (undo-tree-id923 . -293) (undo-tree-id924 . -293) (undo-tree-id925 . -294) (undo-tree-id926 . -293) (undo-tree-id927 . -294) (undo-tree-id928 . -295) (undo-tree-id929 . -295) (undo-tree-id930 . -325) (undo-tree-id931 . -295) (undo-tree-id932 . -325) (undo-tree-id933 . -325) (undo-tree-id934 . -340) (undo-tree-id935 . -325) (undo-tree-id936 . -340) (undo-tree-id937 . -340) (undo-tree-id938 . -325) (undo-tree-id939 . -340) (undo-tree-id940 . -340) (undo-tree-id941 . -325) (undo-tree-id942 . -340) (undo-tree-id943 . -573) (undo-tree-id944 . -340) (undo-tree-id945 . -325) (undo-tree-id946 . -355) (undo-tree-id947 . -340) (undo-tree-id948 . -432) (undo-tree-id949 . -355) (undo-tree-id950 . -447) (undo-tree-id951 . -432) (undo-tree-id952 . -467) (undo-tree-id953 . -447) (undo-tree-id954 . -487) (undo-tree-id955 . -467) (undo-tree-id956 . -536) (undo-tree-id957 . -487) (undo-tree-id958 . -573) (undo-tree-id959 . -536) 574) nil (23736 52426 364043 934000) 0 nil]) ((303 . 304) (#(")" 0 1 (fontified t)) . -297) (296 . 298) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -296) (294 . 297)) nil (23736 46034 224652 170000) 0 nil]) ((798 . 799) (#("e" 0 1 (fontified t)) . 798)) nil (23736 46034 224655 240000) 0 nil]) ((#("()" 0 1 (fontified t) 1 2 (fontified t)) . 803) (undo-tree-id960 . -1) 804 (803 . 805) (#("(" 0 1 (fontified nil)) . -803) (803 . 804) (802 . 804) (#("(" 0 1 (fontified nil)) . -802) (802 . 803) (801 . 803) (#("(" 0 1 (fontified nil)) . -801) (798 . 802) (789 . 798) 782) nil (23736 46034 224662 332000) 0 nil]) ((789 . 794) (788 . 790) (#("{" 0 1 (fontified nil)) . -788) (783 . 789) (779 . 783) (#(" " 0 1 (fontified nil)) . 778) (undo-tree-id961 . -1) (779 . 780) (778 . 779)) nil (23736 46034 224669 364000) 0 nil]) ((#(";" 0 1 (fontified t)) . 778) (undo-tree-id962 . 1)) nil (23736 46034 224672 519000) 0 nil]) ((777 . 778) (#("}" 0 1 (fontified t)) . -765) (751 . 763) (#("    " 0 4 (fontified nil)) . 751) (757 . 758) (#("}" 0 1 (fontified t)) . -749) (749 . 750) (#("}" 0 1 (fontified t)) . -746) (746 . 747) (#("}" 0 1 (fontified t)) . -742) (742 . 743) (#("}" 0 1 (fontified t)) . -733) (733 . 734) (#("}" 0 1 (fontified t)) . -731) (731 . 732) (#("}" 0 1 (fontified t)) . -726) (726 . 727) (#("}" 0 1 (fontified t)) . -715) (700 . 712) (#("    " 0 4 (fontified nil)) . 700) (707 . 708) (#("}" 0 1 (fontified t)) . -698) (698 . 699) (#("}" 0 1 (fontified t)) . -695) 644 (695 . 696) (#("}" 0 1 (fontified t)) . -691) (691 . 692) (#("}" 0 1 (fontified t)) . -684) (684 . 685) (#("}" 0 1 (fontified t)) . -682) (682 . 683) (#("}" 0 1 (fontified t)) . -673) (658 . 670) (#("    " 0 4 (fontified nil)) . 658) (653 . 657) (661 . 662) (#("}" 0 1 (fontified t)) . -644) (undo-tree-id963 . 1)) nil (23736 46034 224689 5000) 0 nil]) ((643 . 645) (#("{" 0 1 (fontified nil)) . -643) (643 . 644) (642 . 643)) nil (23736 46034 224697 397000) 0 nil]) ((#(".unwrap();" 0 7 (fontified t) 7 10 (fontified t)) . 651) (undo-tree-id964 . -8) (undo-tree-id965 . -8) (undo-tree-id966 . -8) (undo-tree-id967 . -8) (undo-tree-id968 . -8) (undo-tree-id969 . -8) (undo-tree-id970 . -8) (undo-tree-id971 . -8) (undo-tree-id972 . -8) (undo-tree-id973 . -8) (undo-tree-id974 . -8) (undo-tree-id975 . -8) (undo-tree-id976 . -8) (undo-tree-id977 . -8)) nil (23736 46034 224711 642000) 0 nil]) ((288 . 290) (287 . 288)) nil (23736 46034 224714 458000) 0 nil]) ((#(")" 0 1 (fontified nil)) . -655) (655 . 656) (#(" " 0 1 (fontified nil)) . -655) (655 . 656) (#(")" 0 1 (fontified nil)) . -655) (655 . 656)) nil (23736 46034 224717 790000) 0 nil]) ((#(" " 0 1 (fontified nil)) . -740) (754 . 755) (#(")" 0 1 (fontified t)) . -744) (undo-tree-id978 . 1)) nil (23736 46034 224721 735000) 0 nil]) ((743 . 745) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -743) (741 . 744)) nil (23736 46034 224724 355000) 0 nil]) ((#("return" 0 6 (fontified t face font-lock-keyword-face)) . 740) (undo-tree-id979 . -3) 743) nil (23736 46034 224727 401000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 256) (255 . 256) (254 . 256) (#("(" 0 1 (fontified nil)) . -254) (252 . 255)) nil (23736 46034 224730 571000) 0 nil]) ((252 . 253) (#(">" 0 1 (fontified t)) . -249) (248 . 250) (#("<" 0 1 (fontified nil face font-lock-type-face)) . -248) (247 . 249) (242 . 247) (t 23736 42190 165863 691000)) nil (23736 46034 224734 401000) 0 nil]) ((610 . 615) (#("\"eda860d1da196efcce02c20f8c687f200ee061e91c26c4917d87ee1d1ab2e206\".to_owned()" 0 66 (fontified t face font-lock-string-face) 66 77 (fontified t)) . 610) (undo-tree-id884 . -1) (undo-tree-id885 . 77) (undo-tree-id886 . -1) (undo-tree-id887 . 76) (undo-tree-id888 . -65) (undo-tree-id889 . 12) (undo-tree-id890 . -66)) ((610 . 687) (#("token" 0 5 (fontified t)) . 610) (t 23736 42190 165863 691000)) (23736 42205 647347 628000) 0 nil]) ((233 . 237) (#("4" 0 1 (fontified t face font-lock-type-face)) . -233) (undo-tree-id882 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -234) (undo-tree-id883 . -1) 235 (224 . 235) (t 23736 40392 797127 724000)) nil (23736 42192 756646 250000) 0 nil]) ((#(" " 0 1 (fontified t)) . 16) (undo-tree-id875 . 1)) nil (23736 40392 783165 458000) 0 nil]) ((#("x" 0 1 (fontified t)) . -16) (undo-tree-id876 . -1) (undo-tree-id877 . -1) 17 (16 . 17) (#("pub" 0 3 (fontified t face font-lock-keyword-face)) . 16) (undo-tree-id878 . -1) (undo-tree-id879 . -1) 17 (t 23736 40358 170668 896000)) nil (23736 40392 783178 55000) 0 nil]) ((770 . 778) (#("only_" 0 5 (fontified t)) . -770) (undo-tree-id868 . -5) (undo-tree-id869 . -5) 775 (771 . 775) (#("h" 0 1 (fontified t)) . -771) (undo-tree-id870 . -1) (undo-tree-id871 . -1) 772 (770 . 772) (#("result" 0 6 (fontified t)) . 770) (undo-tree-id872 . -5) (undo-tree-id873 . -5) (undo-tree-id874 . -6) 775 (t 23736 40349 294055 490000)) nil (23736 40358 161075 394000) 0 nil]) ((742 . 743) (#(")" 0 1 (fontified nil)) . 742) (741 . 742) (#(" " 0 1 (fontified nil)) . -741) (741 . 742) (#(")" 0 1 (fontified nil)) . -741) (740 . 742) (#(")" 0 1 (fontified nil)) . 741) (740 . 741) (739 . 741) (#("(" 0 1 (fontified nil)) . -739) (724 . 740) (#("w" 0 1 (fontified t face font-lock-variable-name-face)) . -724) (undo-tree-id861 . -1) (undo-tree-id862 . -1) 725 (718 . 725) (#("f" 0 1 (fontified t face font-lock-variable-name-face)) . -718) (undo-tree-id863 . -1) (undo-tree-id864 . -1) 719 (714 . 719) (709 . 714) 708) nil (23736 40349 288135 975000) 0 nil]) ((708 . 709)) nil (23736 40349 288144 51000) 0 nil]) ((#("        .get(0);
" 0 4 (fontified t) 4 8 (fontified t) 8 13 (fontified t) 13 14 (fontified t) 14 17 (fontified t)) . 709) (undo-tree-id865 . 5) (undo-tree-id866 . -15) (undo-tree-id867 . -15) 724) nil (23736 40349 288150 724000) 0 nil] [nil nil ((#("&" 0 1 (fontified t)) . 279) (undo-tree-id860 . -1) (t 23736 40264 531230 333000)) ((279 . 280) (t 23736 40317 577579 68000)) (23736 40317 559464 829000) 0 nil]) ((718 . 721) (#("nth" 0 3 (fontified t)) . 718) (undo-tree-id858 . -2) 720) nil (23736 40321 629262 475000) 0 nil] [nil ([nil ([nil nil ((#("    " 0 4 (fontified t)) . 733) (undo-tree-id845 . 4) (undo-tree-id846 . -4) (undo-tree-id847 . -4) (undo-tree-id848 . -3) (undo-tree-id849 . -4) (undo-tree-id850 . -3) (undo-tree-id851 . -3)) ((733 . 737)) (23736 40239 673417 518000) 0 nil]) ((714 . 733)) ((#("let result = result" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 10 (fontified t face font-lock-variable-name-face) 10 19 (fontified t)) . 714) (undo-tree-id855 . -19) (undo-tree-id856 . -19) (undo-tree-id857 . -19)) (23736 40239 678077 126000) 0 nil]) ((708 . 709)) ((#(";" 0 1 (fontified t)) . 708)) (23736 40240 178494 180000) 0 nil]) ((722 . 723)) ((#("0" 0 1 (fontified t)) . 722)) (23736 40243 350901 820000) 0 nil]) ((718 . 721) (#("f" 0 1 (fontified t)) . -718) (undo-tree-id852 . -1) (#("i" 0 1 (fontified t)) . -719) (undo-tree-id853 . -1) (#("r" 0 1 (fontified t)) . -720) (undo-tree-id854 . -1) 721 (#("st" 0 2 (fontified t)) . 721) (t 23736 40082 228986 691000)) nil (23736 40241 818518 320000) 0 nil]) ((1 . 793) (#("use postgres;

pub fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
}

pub fn get_account_id() -> i64 {
    let conn = conn();
    let result = &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&\"eda860d1da196efcce02c20f8c687f200ee061e91c26c4917d87ee1d1ab2e206\".to_owned()],
        )
        .unwrap().first();
    let account_id: i64 = result.get(1);
    return account_id;
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 12 (fontified t face font-lock-constant-face) 12 13 (fontified t) 13 15 (fontified t) 15 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 26 (fontified t face font-lock-function-name-face) 26 30 (fontified t) 30 31 (fontified t syntax-table #1#) 31 32 (fontified t) 32 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 52 (fontified t face font-lock-type-face) 52 59 (fontified t) 59 67 (fontified t face font-lock-constant-face) 67 69 (fontified t) 69 79 (fontified t face font-lock-type-face) 79 98 (fontified t) 98 147 (fontified t face font-lock-string-face) 147 157 (fontified t) 157 165 (fontified t face font-lock-constant-face) 165 167 (fontified t) 167 174 (fontified t face font-lock-type-face) 174 176 (fontified t) 176 180 (fontified t face font-lock-type-face) 180 205 (fontified t) 205 208 (fontified t face font-lock-keyword-face) 208 209 (fontified t) 209 211 (fontified t face font-lock-keyword-face) 211 212 (fontified t) 212 226 (fontified t face font-lock-function-name-face) 226 230 (fontified t) 230 231 (fontified t syntax-table #1#) 231 232 (fontified t) 232 235 (fontified t face font-lock-type-face) 235 242 (fontified t) 242 245 (fontified t face font-lock-keyword-face) 245 246 (fontified t) 246 250 (fontified t face font-lock-variable-name-face) 250 265 (fontified t) 265 268 (fontified t face font-lock-keyword-face) 268 269 (fontified t) 269 275 (fontified t face font-lock-variable-name-face) 275 312 (fontified t) 312 513 (fontified t face font-lock-string-face) 513 532 (fontified t face font-lock-string-face) 532 583 (fontified t face font-lock-string-face) 583 600 (fontified t) 600 666 (fontified t face font-lock-string-face) 666 690 (fontified t) 690 713 (fontified t) 713 716 (fontified t) 716 717 (fontified t) 717 721 (fontified t) 721 724 (fontified t face font-lock-keyword-face) 724 725 (fontified t) 725 735 (fontified t face font-lock-variable-name-face) 735 737 (fontified t) 737 740 (fontified t face font-lock-type-face) 740 757 (fontified t) 757 758 (fontified t) 758 762 (fontified t) 762 768 (fontified t face font-lock-keyword-face) 768 781 (fontified t) 781 783 (fontified t)) . 1) (undo-tree-id807 . 67) (undo-tree-id808 . -715) (undo-tree-id809 . -715) (undo-tree-id810 . -715) (undo-tree-id811 . -715) (undo-tree-id812 . -715) (undo-tree-id813 . -715) (undo-tree-id814 . -715) (undo-tree-id815 . -708) (undo-tree-id816 . -713) (undo-tree-id817 . -708) (undo-tree-id818 . -713) (undo-tree-id819 . -715) (undo-tree-id820 . -715) (undo-tree-id821 . -714) (undo-tree-id822 . -715) (undo-tree-id823 . -714) (undo-tree-id824 . -715) (undo-tree-id825 . -714) (undo-tree-id826 . -715) (undo-tree-id827 . -714) (undo-tree-id828 . -715) (undo-tree-id829 . -665) (undo-tree-id830 . -666) (undo-tree-id831 . -665) (undo-tree-id832 . -666) (undo-tree-id833 . -714) (undo-tree-id834 . -715) (undo-tree-id835 . -714) (undo-tree-id836 . -715) (undo-tree-id837 . -713) (undo-tree-id838 . -714) (undo-tree-id839 . 70) (undo-tree-id840 . -714) (undo-tree-id841 . 69) (undo-tree-id842 . -714) (undo-tree-id843 . 69) (undo-tree-id844 . -715) 716) nil (23736 40082 216374 996000) 0 nil]) ((716 . 717) (#(")" 0 1 (fontified nil)) . 716) (715 . 716) (714 . 716) (#("(" 0 1 (fontified nil)) . -714) (708 . 715) (#("[0];" 0 4 (fontified t)) . 708)) nil (23736 40082 216385 400000) 0 nil]) ((#("
" 0 1 (fontified t)) . 754) (t 23736 40046 579199 162000)) nil (23736 40082 216388 809000) 0 nil]) ((1 . 780) (#("use postgres;

pub fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
}

pub fn get_account_id() -> i64 {
    let conn = conn();
      let result =  &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&\"eda860d1da196efcce02c20f8c687f200ee061e91c26c4917d87ee1d1ab2e206\".to_owned()],
        )
        .unwrap()[0];
    let account_id: i64 = result.get(1);

        return account_id
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 12 (fontified t face font-lock-constant-face) 12 13 (fontified t) 13 15 (fontified t) 15 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 26 (fontified t face font-lock-function-name-face) 26 30 (fontified t) 30 31 (fontified t syntax-table #1#) 31 32 (fontified t) 32 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 52 (fontified t face font-lock-type-face) 52 59 (fontified t) 59 67 (fontified t face font-lock-constant-face) 67 69 (fontified t) 69 79 (fontified t face font-lock-type-face) 79 98 (fontified t) 98 147 (fontified t face font-lock-string-face) 147 157 (fontified t) 157 165 (fontified t face font-lock-constant-face) 165 167 (fontified t) 167 174 (fontified t face font-lock-type-face) 174 176 (fontified t) 176 180 (fontified t face font-lock-type-face) 180 205 (fontified t) 205 208 (fontified t face font-lock-keyword-face) 208 209 (fontified t) 209 211 (fontified t face font-lock-keyword-face) 211 212 (fontified t) 212 226 (fontified t face font-lock-function-name-face) 226 230 (fontified t) 230 231 (fontified t syntax-table #1#) 231 232 (fontified t) 232 235 (fontified t face font-lock-type-face) 235 242 (fontified t) 242 245 (fontified t face font-lock-keyword-face) 245 246 (fontified t) 246 250 (fontified t face font-lock-variable-name-face) 250 261 (fontified t) 261 265 (fontified t) 265 267 (fontified t) 267 270 (fontified t face font-lock-keyword-face) 270 271 (fontified t) 271 277 (fontified t face font-lock-variable-name-face) 277 280 (fontified t) 280 287 (fontified t) 287 315 (fontified t) 315 505 (fontified t face font-lock-string-face) 505 518 (fontified t face font-lock-string-face) 518 535 (fontified t face font-lock-string-face) 535 586 (fontified t face font-lock-string-face) 586 603 (fontified t) 603 669 (fontified t face font-lock-string-face) 669 693 (fontified t) 693 710 (fontified t) 710 714 (fontified t) 714 715 (fontified t) 715 719 (fontified t) 719 722 (fontified t face font-lock-keyword-face) 722 723 (fontified t) 723 733 (fontified t face font-lock-variable-name-face) 733 735 (fontified t) 735 738 (fontified t face font-lock-type-face) 738 756 (fontified t) 756 757 (fontified t) 757 764 (fontified t) 764 765 (rear-nonsticky t fontified t) 765 771 (fontified t face font-lock-keyword-face) 771 779 (fontified t) 779 782 (fontified t) 782 783 (fontified t) 783 785 (fontified t)) . 1) (undo-tree-id753 . -719) (undo-tree-id754 . -757) (undo-tree-id755 . -782) (undo-tree-id756 . 38) (undo-tree-id757 . -715) (undo-tree-id758 . 66) (undo-tree-id759 . -719) (undo-tree-id760 . -719) (undo-tree-id761 . -719) (undo-tree-id762 . -719) (undo-tree-id763 . -719) (undo-tree-id764 . -719) (undo-tree-id765 . -719) (undo-tree-id766 . -719) (undo-tree-id767 . -735) (undo-tree-id768 . -713) (undo-tree-id769 . -736) (undo-tree-id770 . -735) (undo-tree-id771 . -736) (undo-tree-id772 . -736) (undo-tree-id773 . -746) (undo-tree-id774 . -741) (undo-tree-id775 . -742) (undo-tree-id776 . -282) (undo-tree-id777 . -713) (undo-tree-id778 . -741) (undo-tree-id779 . -742) (undo-tree-id780 . -747) (undo-tree-id781 . -746) (undo-tree-id782 . -746) (undo-tree-id783 . -746) (undo-tree-id784 . -282) (undo-tree-id785 . -286) (undo-tree-id786 . -282) (undo-tree-id787 . -713) 747) nil (23736 40046 557483 359000) 0 nil]) ((742 . 748) (#("row" 0 3 (fontified t)) . 742) (undo-tree-id788 . -3) (undo-tree-id789 . -3)) nil (23736 40046 557511 964000) 0 nil]) ((714 . 715) (#("]" 0 1 (fontified nil)) . 714) (712 . 714) (711 . 713) (#("[" 0 1 (fontified nil)) . -711) (711 . 712)) nil (23736 40046 557523 905000) 0 nil]) ((#("    }" 0 5 (fontified t)) . 750) (undo-tree-id790 . 5) (#("{
        " 0 10 (fontified t)) . 716) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . 8) (undo-tree-id794 . -6) (undo-tree-id795 . -6) (undo-tree-id796 . -6) (undo-tree-id797 . -6) (undo-tree-id798 . -6) (undo-tree-id799 . -6) (undo-tree-id800 . -6) (undo-tree-id801 . -6) (undo-tree-id802 . -6) (undo-tree-id803 . -10) 722) nil (23736 40046 557574 393000) 0 nil]) ((268 . 281) (#("in" 0 2 (fontified t face font-lock-keyword-face)) . 268)) nil (23736 40046 557583 755000) 0 nil]) ((#("row" 0 3 (fontified t)) . 267)) nil (23736 40046 557588 280000) 0 nil]) ((#("for" 0 3 (fontified t face font-lock-keyword-face)) . 266)) nil (23736 40046 557592 497000) 0 nil]) ((nil rear-nonsticky nil 768 . 769) (#("
" 0 1 (fontified nil)) . -786) (760 . 787) 755) nil (23736 40046 557599 42000) 0 nil]) ((#("        return account_id
" 0 8 (fontified t) 8 14 (fontified t face font-lock-keyword-face) 14 25 (fontified t) 25 26 (fontified t)) . 755) (undo-tree-id804 . 1) (undo-tree-id805 . -24) (undo-tree-id806 . -24) 779) nil (23736 40046 557613 374000) 0 nil] [nil nil ((1 . 790) (#("use postgres;

pub fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
}

pub fn get_account_id() -> i64 {
    let conn = conn();
    for row in &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&\"eda860d1da196efcce02c20f8c687f200ee061e91c26c4917d87ee1d1ab2e206\".to_owned()],
        )
        .unwrap()
    {
        let account_id: i64 = row.get(1);
        return account_id
    }
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 12 (fontified t face font-lock-constant-face) 12 13 (fontified t) 13 15 (fontified t) 15 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 26 (fontified t face font-lock-function-name-face) 26 30 (fontified t) 30 31 (fontified t syntax-table #1#) 31 32 (fontified t) 32 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 52 (fontified t face font-lock-type-face) 52 59 (fontified t) 59 67 (fontified t face font-lock-constant-face) 67 69 (fontified t) 69 79 (fontified t face font-lock-type-face) 79 98 (fontified t) 98 147 (fontified t face font-lock-string-face) 147 157 (fontified t) 157 165 (fontified t face font-lock-constant-face) 165 167 (fontified t) 167 174 (fontified t face font-lock-type-face) 174 176 (fontified t) 176 180 (fontified t face font-lock-type-face) 180 205 (fontified t) 205 208 (fontified t face font-lock-keyword-face) 208 209 (fontified t) 209 211 (fontified t face font-lock-keyword-face) 211 212 (fontified t) 212 226 (fontified t face font-lock-function-name-face) 226 230 (fontified t) 230 231 (fontified t syntax-table #1#) 231 232 (fontified t) 232 235 (fontified t face font-lock-type-face) 235 242 (fontified t) 242 245 (fontified t face font-lock-keyword-face) 245 246 (fontified t) 246 250 (fontified t face font-lock-variable-name-face) 250 265 (fontified t) 265 268 (fontified t face font-lock-keyword-face) 268 273 (fontified t) 273 275 (fontified t face font-lock-keyword-face) 275 310 (fontified t) 310 513 (fontified t face font-lock-string-face) 513 530 (fontified t face font-lock-string-face) 530 581 (fontified t face font-lock-string-face) 581 598 (fontified t) 598 664 (fontified t face font-lock-string-face) 664 720 (fontified t) 720 723 (fontified t face font-lock-keyword-face) 723 724 (fontified t) 724 734 (fontified t face font-lock-variable-name-face) 734 736 (fontified t) 736 739 (fontified t face font-lock-type-face) 739 754 (fontified t) 754 762 (fontified t) 762 768 (fontified t face font-lock-keyword-face) 768 779 (fontified t) 779 780 (fontified t) 780 788 (fontified t)) . 1) (undo-tree-id636 . 9) (undo-tree-id638 . -266) (undo-tree-id640 . -266) (undo-tree-id642 . -287) (undo-tree-id643 . -778) (undo-tree-id645 . -717) (undo-tree-id647 . -759) (undo-tree-id649 . -761) (undo-tree-id651 . -761) (undo-tree-id653 . -759) (undo-tree-id655 . -779) (undo-tree-id657 . -778) (undo-tree-id659 . -235) (undo-tree-id661 . -268) (undo-tree-id663 . -785) (undo-tree-id665 . -235) 779) ((1 . 789) (#("use postgres;

pub fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
}

pub fn get_account_id() -> i64 {
    let conn = conn();
    for row in &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&\"eda860d1da196efcce02c20f8c687f200ee061e91c26c4917d87ee1d1ab2e206\".to_owned()],
        )
        .unwrap()
    {
        let account_id: i64 = row.get(1);
        return account_id;
    }
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 12 (fontified t face font-lock-constant-face) 12 13 (fontified t) 13 15 (fontified t) 15 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 26 (fontified t face font-lock-function-name-face) 26 30 (fontified t) 30 31 (fontified t syntax-table #1#) 31 32 (fontified t) 32 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 52 (fontified t face font-lock-type-face) 52 59 (fontified t) 59 67 (fontified t face font-lock-constant-face) 67 69 (fontified t) 69 79 (fontified t face font-lock-type-face) 79 98 (fontified t) 98 147 (fontified t face font-lock-string-face) 147 157 (fontified t) 157 165 (fontified t face font-lock-constant-face) 165 167 (fontified t) 167 174 (fontified t face font-lock-type-face) 174 176 (fontified t) 176 180 (fontified t face font-lock-type-face) 180 205 (fontified t) 205 208 (fontified t face font-lock-keyword-face) 208 209 (fontified t) 209 211 (fontified t face font-lock-keyword-face) 211 212 (fontified t) 212 226 (fontified t face font-lock-function-name-face) 226 230 (fontified t) 230 231 (fontified t syntax-table #1#) 231 232 (fontified t) 232 235 (fontified t face font-lock-type-face) 235 242 (fontified t) 242 245 (fontified t face font-lock-keyword-face) 245 246 (fontified t) 246 250 (fontified t face font-lock-variable-name-face) 250 265 (fontified t) 265 268 (fontified t face font-lock-keyword-face) 268 273 (fontified t) 273 275 (fontified t face font-lock-keyword-face) 275 310 (fontified t) 310 513 (fontified t face font-lock-string-face) 513 530 (fontified t face font-lock-string-face) 530 581 (fontified t face font-lock-string-face) 581 598 (fontified t) 598 664 (fontified t face font-lock-string-face) 664 720 (fontified t) 720 723 (fontified t face font-lock-keyword-face) 723 724 (fontified t) 724 734 (fontified t face font-lock-variable-name-face) 734 736 (fontified t) 736 739 (fontified t face font-lock-type-face) 739 754 (fontified t) 754 762 (fontified t) 762 768 (fontified t face font-lock-keyword-face) 768 780 (fontified t) 780 789 (fontified t)) . 1) (undo-tree-id668 . -232) (undo-tree-id669 . -235) (undo-tree-id670 . -265) (undo-tree-id671 . -268) (undo-tree-id672 . -265) (undo-tree-id673 . -786) (undo-tree-id674 . -232) (undo-tree-id675 . -235) (undo-tree-id676 . -710) (undo-tree-id677 . -732) (undo-tree-id678 . -710) (undo-tree-id679 . 190) (undo-tree-id680 . -602) (undo-tree-id681 . -296) (undo-tree-id682 . -279) (undo-tree-id683 . -296) (undo-tree-id684 . -296) (undo-tree-id685 . -310) (undo-tree-id686 . -296) (undo-tree-id687 . -310) (undo-tree-id688 . -310) (undo-tree-id689 . -296) (undo-tree-id690 . -310) (undo-tree-id691 . -310) (undo-tree-id692 . -296) (undo-tree-id693 . -310) (undo-tree-id694 . -296) (undo-tree-id695 . -330) (undo-tree-id696 . -310) (undo-tree-id697 . -402) (undo-tree-id698 . -330) (undo-tree-id699 . -422) (undo-tree-id700 . -402) (undo-tree-id701 . -442) (undo-tree-id702 . -422) (undo-tree-id703 . -462) (undo-tree-id704 . -442) (undo-tree-id705 . -511) (undo-tree-id706 . -462) (undo-tree-id707 . -548) (undo-tree-id708 . -511) (undo-tree-id709 . -511) (undo-tree-id710 . -548) (undo-tree-id711 . -462) (undo-tree-id712 . -511) (undo-tree-id713 . -442) (undo-tree-id714 . -462) (undo-tree-id715 . -422) (undo-tree-id716 . -442) (undo-tree-id717 . -402) (undo-tree-id718 . -422) (undo-tree-id719 . -330) (undo-tree-id720 . -402) (undo-tree-id721 . -310) (undo-tree-id722 . -330) (undo-tree-id723 . -296) (undo-tree-id724 . -310) (undo-tree-id725 . -310) (undo-tree-id726 . -311) (undo-tree-id727 . -296) (undo-tree-id728 . -296) (undo-tree-id729 . -279) (undo-tree-id730 . -296) (undo-tree-id731 . -279) (undo-tree-id732 . -279) (undo-tree-id733 . -296) (undo-tree-id734 . -279) (undo-tree-id735 . -279) (undo-tree-id736 . -296) (undo-tree-id737 . -279) (undo-tree-id738 . -279) (undo-tree-id739 . -279) (undo-tree-id740 . -296) (undo-tree-id741 . -246) (undo-tree-id742 . -250) (undo-tree-id743 . -277) (undo-tree-id744 . -281) (undo-tree-id745 . -279) (undo-tree-id746 . -279) (undo-tree-id747 . -279) (undo-tree-id748 . -279) (undo-tree-id749 . -279) (undo-tree-id750 . -279) (undo-tree-id751 . -279) (undo-tree-id752 . -279) (t 23736 39985 679561 551000)) (23736 39985 661278 109000) 0 nil]) ((#(";" 0 1 (fontified t)) . -780) (undo-tree-id666 . -1) (undo-tree-id667 . -1) 781 (t 23736 39972 356307 398000)) nil (23736 40007 922226 894000) 0 nil] [nil nil ((#("return account_id;" 0 6 (fontified t face font-lock-keyword-face) 6 18 (fontified t)) . 763) 760 (t 23736 39972 356307 398000)) ((763 . 781)) (23736 39982 218289 836000) 0 nil]) ((1 . 790) (#("use postgres;

pub fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
}

pub fn get_account_id() -> i64 {
    let conn = conn();
    for row in &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&\"eda860d1da196efcce02c20f8c687f200ee061e91c26c4917d87ee1d1ab2e206\".to_owned()],
        )
        .unwrap()
    {
        let account_id: i64 = row.get(1);
        return account_id
    }
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 12 (fontified t face font-lock-constant-face) 12 13 (fontified t) 13 15 (fontified t) 15 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 26 (fontified t face font-lock-function-name-face) 26 30 (fontified t) 30 31 (fontified t syntax-table #1#) 31 32 (fontified t) 32 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 52 (fontified t face font-lock-type-face) 52 55 (fontified t) 55 59 (fontified t) 59 67 (fontified t face font-lock-constant-face) 67 69 (fontified t) 69 79 (fontified t face font-lock-type-face) 79 90 (fontified t) 90 98 (fontified t) 98 99 (fontified t face font-lock-string-face) 99 107 (fontified t face font-lock-string-face) 107 146 (fontified t face font-lock-string-face) 146 147 (fontified t face font-lock-string-face) 147 149 (fontified t) 149 157 (fontified t) 157 165 (fontified t face font-lock-constant-face) 165 167 (fontified t) 167 174 (fontified t face font-lock-type-face) 174 176 (fontified t) 176 180 (fontified t face font-lock-type-face) 180 181 (fontified t) 181 182 (fontified t) 182 188 (fontified t) 188 201 (fontified t) 201 202 (fontified t) 202 204 (fontified t) 204 205 (fontified t) 205 208 (fontified t face font-lock-keyword-face) 208 209 (fontified t) 209 211 (fontified t face font-lock-keyword-face) 211 212 (fontified t) 212 226 (fontified t face font-lock-function-name-face) 226 228 (fontified t) 228 230 (fontified t) 230 231 (fontified t syntax-table #1#) 231 232 (fontified t) 232 235 (fontified t face font-lock-type-face) 235 236 (fontified t) 236 238 (fontified t) 238 241 (fontified t) 241 242 (rear-nonsticky t fontified t) 242 245 (fontified t face font-lock-keyword-face) 245 246 (fontified t) 246 250 (fontified t face font-lock-variable-name-face) 250 253 (fontified t) 253 261 (fontified t) 261 265 (fontified t) 265 268 (fontified t face font-lock-keyword-face) 268 273 (fontified t) 273 275 (fontified t face font-lock-keyword-face) 275 282 (fontified t) 282 298 (fontified t) 298 310 (fontified t) 310 312 (fontified t face font-lock-string-face) 312 319 (fontified t face font-lock-string-face) 319 397 (fontified t face font-lock-string-face) 397 398 (rear-nonsticky t fontified t face font-lock-string-face) 398 399 (fontified t face font-lock-string-face) 399 493 (fontified t face font-lock-string-face) 493 529 (fontified t face font-lock-string-face) 529 530 (fontified t face font-lock-string-face) 530 573 (fontified t face font-lock-string-face) 573 581 (fontified t face font-lock-string-face) 581 583 (fontified t) 583 598 (fontified t) 598 599 (fontified t face font-lock-string-face) 599 662 (fontified t face font-lock-string-face) 662 663 (rear-nonsticky t fontified t face font-lock-string-face) 663 664 (fontified t face font-lock-string-face) 664 673 (fontified t) 673 675 (fontified t) 675 678 (fontified t) 678 712 (fontified t) 712 720 (fontified t) 720 723 (fontified t face font-lock-keyword-face) 723 724 (fontified t) 724 733 (fontified t face font-lock-variable-name-face) 733 734 (fontified t face font-lock-variable-name-face) 734 736 (fontified t) 736 738 (fontified t face font-lock-type-face) 738 739 (face font-lock-type-face fontified t) 739 749 (fontified t) 749 753 (fontified t) 753 754 (fontified t) 754 762 (fontified t) 762 768 (fontified t face font-lock-keyword-face) 768 769 (fontified t) 769 779 (fontified t) 779 780 (fontified t) 780 785 (fontified t) 785 786 (fontified t) 786 787 (fontified t) 787 788 (fontified t)) . 1) (undo-tree-id527 . -785) (undo-tree-id528 . -238) (undo-tree-id529 . -785) (undo-tree-id530 . 19) (undo-tree-id531 . -165) (undo-tree-id532 . -200) (undo-tree-id533 . -200) (undo-tree-id534 . -200) (undo-tree-id535 . -67) (undo-tree-id536 . -102) (undo-tree-id537 . -200) (undo-tree-id538 . -67) (undo-tree-id539 . -67) (undo-tree-id540 . -67) (undo-tree-id541 . -180) (undo-tree-id542 . -99) (undo-tree-id543 . -67) (undo-tree-id544 . -180) (undo-tree-id545 . -180) (undo-tree-id546 . -180) (undo-tree-id547 . -180) (undo-tree-id548 . -180) (undo-tree-id549 . -180) (undo-tree-id550 . 689) (undo-tree-id551 . -107) (undo-tree-id552 . -165) (undo-tree-id553 . -165) (undo-tree-id554 . -180) (undo-tree-id555 . -165) (undo-tree-id556 . -165) (undo-tree-id557 . -762) (undo-tree-id558 . -779) (undo-tree-id559 . -265) (undo-tree-id560 . -785) (undo-tree-id561 . -232) (undo-tree-id562 . -235) (undo-tree-id563 . -232) (undo-tree-id564 . -235) (undo-tree-id565 . -265) (undo-tree-id566 . -268) (undo-tree-id567 . -762) (undo-tree-id568 . -779) (undo-tree-id569 . -762) (undo-tree-id570 . -779) (undo-tree-id571 . -265) (undo-tree-id572 . -785) (undo-tree-id573 . -232) (undo-tree-id574 . -235) (undo-tree-id575 . -724) (undo-tree-id576 . -734) (undo-tree-id577 . -762) (undo-tree-id578 . -779) (undo-tree-id579 . -762) (undo-tree-id580 . -762) (undo-tree-id581 . -762) (undo-tree-id582 . -762) (undo-tree-id583 . -762) (undo-tree-id584 . -762) (undo-tree-id585 . -762) (undo-tree-id586 . -762) (undo-tree-id587 . -762) (undo-tree-id588 . -762) (undo-tree-id589 . -762) (undo-tree-id590 . -763) (undo-tree-id591 . -762) (undo-tree-id592 . -763) (undo-tree-id593 . -763) (undo-tree-id594 . -762) (undo-tree-id595 . -763) (undo-tree-id596 . -763) (undo-tree-id597 . -762) (undo-tree-id598 . -763) (undo-tree-id599 . -762) (undo-tree-id600 . -763) (undo-tree-id601 . -763) (undo-tree-id602 . -763) (undo-tree-id603 . -763) (undo-tree-id604 . -764) (undo-tree-id605 . -763) (undo-tree-id606 . -764) (undo-tree-id607 . -764) (undo-tree-id608 . -763) (undo-tree-id609 . -764) (undo-tree-id610 . -764) (undo-tree-id611 . -763) (undo-tree-id612 . -768) (undo-tree-id613 . -768) (undo-tree-id614 . -764) (undo-tree-id615 . -763) (undo-tree-id616 . -765) (undo-tree-id617 . -764) (undo-tree-id618 . -766) (undo-tree-id619 . -765) (undo-tree-id620 . -767) (undo-tree-id621 . -766) (undo-tree-id622 . -768) (undo-tree-id623 . -767) (undo-tree-id624 . -769) (undo-tree-id625 . -768) (undo-tree-id626 . -768) (undo-tree-id627 . -768) (undo-tree-id628 . -768) (undo-tree-id629 . -768) (undo-tree-id630 . -768) (undo-tree-id631 . -768) (undo-tree-id632 . -768) (undo-tree-id633 . -768) (undo-tree-id634 . -768) (undo-tree-id635 . -768) 769) nil (23736 39982 220024 200000) 0 nil]) ((763 . 770)) nil (23736 39972 349548 435000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 229) (228 . 229) (227 . 229) (#("(" 0 1 (fontified nil face font-lock-function-name-face)) . -227) (227 . 228) (t 23736 39940 696495 404000)) nil (23736 39972 349551 632000) 0 nil]) ((779 . 780) 711) nil (23736 39940 680520 761000) 0 nil]) ((#("        println!(\"account id: {}\", account_id);
" 0 7 (fontified t) 7 8 (fontified t) 8 16 (fontified t face rust-builtin-formatting-macro-face) 16 17 (fontified t) 17 30 (fontified t face font-lock-string-face) 30 31 (fontified t face rust-string-interpolation-face) 31 32 (fontified t face rust-string-interpolation-face) 32 33 (fontified t face font-lock-string-face) 33 34 (fontified t) 34 35 (fontified t) 35 45 (fontified t) 45 47 (fontified t) 47 48 (fontified t)) . 753) (undo-tree-id520 . -14) (undo-tree-id521 . -14) (undo-tree-id522 . -15) (undo-tree-id523 . -17) (undo-tree-id524 . -18) 767) nil (23736 39940 680537 707000) 0 nil]) ((#(":" 0 1 (fontified t)) . -819) (undo-tree-id525 . -1) 820 (819 . 820) (809 . 819) (#("accoun" 0 6 (fontified t)) . -809) (undo-tree-id526 . -6) 815 (810 . 815) (809 . 810) (800 . 809) 757) nil (23736 39940 680546 728000) 0 nil] [nil nil ((#("    " 0 4 (fontified t)) . -807) (undo-tree-id509 . -4) (undo-tree-id510 . -4) 811 (806 . 811) 805) ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 806) (undo-tree-id516 . -5) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (807 . 811)) (23736 39928 899815 870000) 0 nil]) ((#("pg::" 0 2 (fontified t face font-lock-constant-face) 2 4 (fontified t)) . 252)) nil (23736 39928 911913 818000) 0 nil]) ((#("
" 0 1 (fontified t)) . 237) (undo-tree-id511 . -1)) nil (23736 39928 899844 846000) 0 nil]) ((nil rear-nonsticky nil 241 . 242) (#("
" 0 1 (fontified nil)) . -811) (237 . 812)) nil (23736 39928 899855 236000) 0 nil]) ((#("    " 0 4 (fontified nil)) . 237) (237 . 241) (236 . 238) (235 . 237) (#("{" 0 1 (fontified nil)) . -235) (229 . 236) (#(" " 0 1 (fontified nil)) . -229) (229 . 230) (#(">" 0 1 (fontified nil syntax-table #1#)) . -229) (228 . 230) (212 . 228) (206 . 212) (#("l" 0 1 (fontified t)) . -206) (undo-tree-id512 . -1) (#("e" 0 1 (fontified t)) . -207) (undo-tree-id513 . -1) (#("t" 0 1 (fontified t face font-lock-keyword-face)) . -208) (undo-tree-id514 . -1) (#(" " 0 1 (fontified t)) . -209) (undo-tree-id515 . -1) 210 (206 . 210) (205 . 206) (t 23736 38087 446566 246000)) nil (23736 39928 899899 700000) 0 nil] [nil nil ((nil rear-nonsticky nil 206 . 207) (#("
" 0 1 (fontified nil)) . -776) (202 . 777) 201 (t 23736 38087 446566 246000)) ((#("
    let conn = pg::conn();
    for row in &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&\"eda860d1da196efcce02c20f8c687f200ee061e91c26c4917d87ee1d1ab2e206\".to_owned()],
        )
        .unwrap()
    {
        let account_id: i64 = row.get(1);
        println!(\"account id: {}\", account_id);
    }
" 0 1 (fontified t) 1 4 (fontified nil) 4 5 (fontified nil rear-nonsticky nil) 5 8 (fontified nil face font-lock-keyword-face) 8 9 (fontified nil) 9 13 (fontified nil face font-lock-variable-name-face) 13 16 (fontified nil) 16 18 (fontified nil face font-lock-constant-face) 18 28 (fontified nil) 28 32 (fontified t) 32 35 (fontified t face font-lock-keyword-face) 35 40 (fontified t) 40 42 (fontified t face font-lock-keyword-face) 42 49 (fontified t) 49 65 (fontified t) 65 77 (fontified t) 77 79 (fontified t face font-lock-string-face) 79 86 (fontified t face font-lock-string-face) 86 164 (fontified t face font-lock-string-face) 164 165 (rear-nonsticky t fontified t face font-lock-string-face) 165 166 (fontified t face font-lock-string-face) 166 260 (fontified t face font-lock-string-face) 260 296 (fontified t face font-lock-string-face) 296 297 (fontified t face font-lock-string-face) 297 340 (fontified t face font-lock-string-face) 340 348 (fontified t face font-lock-string-face) 348 350 (fontified t) 350 365 (fontified t) 365 366 (fontified t face font-lock-string-face) 366 429 (fontified t face font-lock-string-face) 429 430 (rear-nonsticky t fontified t face font-lock-string-face) 430 431 (fontified t face font-lock-string-face) 431 440 (fontified t) 440 442 (fontified t) 442 445 (fontified t) 445 479 (fontified t) 479 487 (fontified t) 487 490 (fontified t face font-lock-keyword-face) 490 491 (fontified t) 491 501 (fontified t face font-lock-variable-name-face) 501 503 (fontified t) 503 506 (fontified t face font-lock-type-face) 506 516 (fontified t) 516 520 (fontified t) 520 521 (fontified t) 521 529 (fontified t) 529 537 (fontified t face rust-builtin-formatting-macro-face) 537 538 (fontified t) 538 551 (fontified t face font-lock-string-face) 551 552 (fontified t face rust-string-interpolation-face) 552 553 (fontified t face rust-string-interpolation-face) 553 554 (fontified t face font-lock-string-face) 554 555 (fontified t) 555 556 (fontified t) 556 566 (fontified t) 566 569 (fontified t) 569 574 (fontified nil) 574 575 (fontified nil)) . 202) (undo-tree-id492 . -574) (undo-tree-id493 . -1) (undo-tree-id494 . -574) (undo-tree-id495 . -5) (undo-tree-id496 . -5) (undo-tree-id497 . -5) (undo-tree-id498 . -5) (undo-tree-id499 . -8) (undo-tree-id500 . -1) (undo-tree-id501 . -5) (undo-tree-id502 . -5) (undo-tree-id503 . -5) (undo-tree-id504 . -5) (undo-tree-id505 . -5) (undo-tree-id506 . -5) (undo-tree-id507 . -5) (undo-tree-id508 . -8) (776 . 777) (nil rear-nonsticky t 206 . 207)) (23736 39884 163564 634000) 0 nil] [nil ([nil ([nil nil ((125 . 145)) ((#("mastodon_development" 0 20 (fontified t face font-lock-string-face)) . 125) (t 23736 37071 236766 521000)) (23736 37071 225669 319000) 0 nil]) ((105 . 125) (#(";" 0 1 (fontified nil face font-lock-string-face)) . 105) (undo-tree-id443 . -1) (100 . 106) (#("://dsock@localhost/mastodon_development" 0 39 (fontified t face font-lock-string-face)) . 100) (undo-tree-id444 . 39) (undo-tree-id446 . -39)) ((100 . 139) (#("host=;" 0 5 (fontified nil face font-lock-string-face) 5 6 (fontified nil face font-lock-string-face)) . 100) (undo-tree-id447 . -5) (undo-tree-id448 . -5) (undo-tree-id449 . -5) (undo-tree-id450 . -5) (undo-tree-id451 . -5) (undo-tree-id452 . -5) (undo-tree-id453 . -5) (undo-tree-id454 . -5) (undo-tree-id455 . -5) (undo-tree-id456 . -5) (undo-tree-id457 . -5) (undo-tree-id458 . -5) (undo-tree-id459 . -5) (undo-tree-id460 . -5) (undo-tree-id461 . -6) (undo-tree-id462 . -5) (undo-tree-id463 . -5) (undo-tree-id464 . -5) (undo-tree-id465 . -5) (undo-tree-id466 . 6) (undo-tree-id467 . -5) (105 . 106) (#("localhost, database=" 0 4 (fontified t face font-lock-string-face) 4 20 (fontified t face font-lock-string-face)) . 105) (undo-tree-id468 . 20) (undo-tree-id469 . -9) (undo-tree-id470 . -17) (undo-tree-id471 . -17) (undo-tree-id472 . -17) (undo-tree-id473 . -17) (undo-tree-id474 . -17) (undo-tree-id475 . -20) (undo-tree-id476 . -17) (undo-tree-id477 . -20) (undo-tree-id478 . -20) (undo-tree-id479 . -17) (undo-tree-id480 . -20) (undo-tree-id481 . -20) (undo-tree-id482 . -17) (undo-tree-id483 . -20) (undo-tree-id484 . -20) (undo-tree-id485 . -20) (undo-tree-id486 . -17) (undo-tree-id487 . -20) (undo-tree-id488 . -17) (undo-tree-id489 . -20)) (23736 38081 186880 53000) 0 nil]) ((#("postgres" 0 8 (fontified t face font-lock-string-face)) . 100) (undo-tree-id415 . -3) (undo-tree-id417 . 8) (undo-tree-id419 . -2) (undo-tree-id421 . -1) (undo-tree-id423 . -1) (t 23736 35844 225865 794000)) ((100 . 108)) (23736 38081 552934 753000) 0 nil]) ((#("s" 0 1 (fontified t face font-lock-constant-face)) . 166) (undo-tree-id490 . -1) (undo-tree-id491 . -1)) ((166 . 167)) (23736 39884 178829 602000) 0 nil]) ((43 . 53) (#("Co" 0 2 (fontified t face font-lock-type-face)) . -43) (undo-tree-id404 . -2) (undo-tree-id405 . -1) (undo-tree-id406 . -2) (undo-tree-id407 . -1) 45 (41 . 45) (33 . 41) (#("post" 0 4 (fontified t)) . -33) (undo-tree-id408 . -4) 37 (31 . 37) (#(" " 0 1 (fontified nil)) . -31) (31 . 32) (#(">" 0 1 (fontified nil syntax-table #1#)) . -31) (29 . 32) (t 23736 35811 892722 566000)) nil (23736 38083 922242 849000) 0 nil]) ((1 . 182) (#("use postgres;

pub fn conn() {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgress::TlsMode::None,
    ).unwrap()
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 12 (fontified t face font-lock-constant-face) 12 13 (fontified t) 13 15 (fontified t) 15 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 26 (fontified t face font-lock-function-name-face) 26 29 (fontified t) 29 31 (fontified t) 31 35 (fontified t) 35 43 (fontified t face font-lock-constant-face) 43 45 (fontified t) 45 55 (fontified t face font-lock-type-face) 55 65 (fontified t) 65 74 (fontified t) 74 123 (fontified t face font-lock-string-face) 123 125 (fontified t) 125 133 (fontified t) 133 142 (fontified t face font-lock-constant-face) 142 144 (fontified t) 144 151 (fontified t face font-lock-type-face) 151 153 (fontified t) 153 157 (fontified t face font-lock-type-face) 157 159 (fontified t) 159 165 (fontified t) 165 171 (fontified t) 171 173 (fontified t) 173 174 (fontified t) 174 176 (fontified t)) . 1) (undo-tree-id346 . -29) (undo-tree-id347 . 3) (undo-tree-id348 . -29) (undo-tree-id349 . -29) (undo-tree-id350 . -29) (undo-tree-id351 . -29) (undo-tree-id352 . -139) (undo-tree-id353 . -139) (undo-tree-id354 . -164) (undo-tree-id355 . -139) (undo-tree-id356 . -164) (undo-tree-id357 . -138) (undo-tree-id358 . -138) (undo-tree-id359 . -165) (undo-tree-id360 . -165) (undo-tree-id361 . -171) (undo-tree-id362 . -165) (undo-tree-id363 . -171) (undo-tree-id364 . -171) (undo-tree-id365 . -171) (undo-tree-id366 . -171) (undo-tree-id367 . -171) (undo-tree-id368 . -172) (undo-tree-id369 . -172) (undo-tree-id370 . -171) (undo-tree-id371 . -173) (undo-tree-id372 . -173) (undo-tree-id373 . -172) (undo-tree-id374 . -172) (undo-tree-id375 . -171) (undo-tree-id376 . -172) (undo-tree-id377 . -138) (undo-tree-id378 . -172) (undo-tree-id379 . -138) (undo-tree-id380 . -138) (undo-tree-id381 . -138) (undo-tree-id382 . -138) (undo-tree-id383 . -35) (undo-tree-id384 . -43) (undo-tree-id385 . -133) (undo-tree-id386 . -142) (undo-tree-id387 . -133) (undo-tree-id388 . -142) (undo-tree-id389 . -35) (undo-tree-id390 . -173) (undo-tree-id391 . -138) (undo-tree-id392 . -138) (undo-tree-id393 . -138) (undo-tree-id394 . -138) 139) nil (23736 35811 869548 176000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 174) (undo-tree-id395 . -1) (173 . 174) (172 . 174) (#("(" 0 1 (fontified nil)) . -172) (undo-tree-id396 . -1) (undo-tree-id397 . -1) (172 . 173) (166 . 172) (#("un" 0 2 (fontified t)) . -166) (undo-tree-id398 . -2) (undo-tree-id399 . -2) (undo-tree-id400 . -2) (undo-tree-id401 . -2) 168 (165 . 168)) nil (23736 35811 869596 766000) 0 nil]) ((#("?" 0 1 (fontified t face rust-question-mark-face)) . 165) (undo-tree-id402 . -1) (undo-tree-id403 . -1)) nil (23736 35811 869612 672000) 0 nil] [nil ([nil ([nil nil ((#("_" 0 1 (fontified t)) . 40) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (undo-tree-id256 . -1) (t 23736 35745 979776 620000)) ((40 . 41)) (23736 35800 188941 789000) 0 nil]) ((1 . 185) (#("use postgres;

pub fn conn() -> Result<_, _>{
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgress::TlsMode::None,
    )?
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 12 (fontified t face font-lock-constant-face) 12 13 (fontified t) 13 15 (fontified t) 15 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 26 (fontified t face font-lock-function-name-face) 26 30 (fontified t) 30 31 (fontified t syntax-table #1#) 31 32 (fontified t) 32 38 (fontified t face font-lock-type-face) 38 43 (fontified t) 43 44 (fontified t) 44 46 (fontified t) 46 50 (fontified t) 50 58 (fontified t face font-lock-constant-face) 58 60 (fontified t) 60 70 (fontified t face font-lock-type-face) 70 80 (fontified t) 80 89 (fontified t) 89 138 (fontified t face font-lock-string-face) 138 140 (fontified t) 140 148 (fontified t) 148 157 (fontified t face font-lock-constant-face) 157 159 (fontified t) 159 166 (fontified t face font-lock-type-face) 166 168 (fontified t) 168 172 (fontified t face font-lock-type-face) 172 174 (fontified t) 174 179 (fontified t) 179 180 (fontified t face rust-question-mark-face) 180 183 (fontified t)) . 1) (undo-tree-id137 . -29) (undo-tree-id138 . 140) (undo-tree-id140 . -116) (undo-tree-id141 . -29) (undo-tree-id142 . -29) (undo-tree-id143 . -29) (undo-tree-id144 . -29) (undo-tree-id145 . 93) (undo-tree-id146 . -98) (undo-tree-id148 . -32) (undo-tree-id150 . -32) (undo-tree-id152 . -42) (undo-tree-id153 . -42) (undo-tree-id155 . -38) (undo-tree-id157 . -39) (undo-tree-id159 . -40) (undo-tree-id161 . -41) (undo-tree-id163 . -42) (undo-tree-id165 . -42) (undo-tree-id167 . -43) (undo-tree-id169 . -40) (undo-tree-id171 . -157) (undo-tree-id173 . -42) (undo-tree-id175 . -42) (undo-tree-id177 . -157) (undo-tree-id179 . -40) (undo-tree-id181 . -43) (undo-tree-id183 . -42) (undo-tree-id185 . -42) 43) ((1 . 184) (#("use postgres;

pub fn conn() -> Result<_, _> {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgress::TlsMode::None,
    )?
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 12 (fontified t face font-lock-constant-face) 12 13 (fontified t) 13 15 (fontified t) 15 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 26 (fontified t face font-lock-function-name-face) 26 30 (fontified t) 30 31 (fontified t syntax-table #1#) 31 32 (fontified t) 32 38 (fontified t face font-lock-type-face) 38 39 (fontified t) 39 40 (fontified t) 40 46 (fontified t) 46 47 (fontified t) 47 51 (fontified t) 51 59 (fontified t face font-lock-constant-face) 59 61 (fontified t) 61 71 (fontified t face font-lock-type-face) 71 90 (fontified t) 90 139 (fontified t face font-lock-string-face) 139 149 (fontified t) 149 158 (fontified t face font-lock-constant-face) 158 160 (fontified t) 160 167 (fontified t face font-lock-type-face) 167 169 (fontified t) 169 173 (fontified t face font-lock-type-face) 173 180 (fontified t) 180 181 (fontified t face rust-question-mark-face) 181 184 (fontified t)) . 1) (undo-tree-id257 . 144) (undo-tree-id258 . -149) (undo-tree-id259 . -158) (undo-tree-id260 . -42) (undo-tree-id261 . -43) (undo-tree-id262 . -41) (undo-tree-id263 . -42) (undo-tree-id264 . -41) (undo-tree-id265 . -39) (undo-tree-id266 . -40) (undo-tree-id267 . -39) (undo-tree-id268 . -39) (undo-tree-id269 . -39) (undo-tree-id270 . -39) (undo-tree-id271 . -39) (undo-tree-id272 . -39) (undo-tree-id273 . -39) (undo-tree-id274 . -39) (undo-tree-id275 . -39) (undo-tree-id276 . -39) (undo-tree-id277 . -39) (undo-tree-id278 . -39) (undo-tree-id279 . -39) (undo-tree-id280 . -41) (undo-tree-id281 . -39) (undo-tree-id282 . -39) (undo-tree-id283 . -39) (undo-tree-id284 . -39) (undo-tree-id285 . -39) (undo-tree-id286 . -41) (undo-tree-id287 . -38) (undo-tree-id288 . -38) (undo-tree-id289 . -38) (undo-tree-id290 . -38) (undo-tree-id291 . -38) (undo-tree-id292 . -38) (undo-tree-id293 . -38) (undo-tree-id294 . -38) (undo-tree-id295 . -38) (undo-tree-id296 . -38) (undo-tree-id297 . -38) (undo-tree-id298 . -38) (undo-tree-id299 . -38) (undo-tree-id300 . -38) (undo-tree-id301 . -90) (undo-tree-id302 . -91) (undo-tree-id303 . -39) (undo-tree-id304 . -38) (undo-tree-id305 . -39) (undo-tree-id306 . -39) (undo-tree-id307 . -38) (undo-tree-id308 . -39) (undo-tree-id309 . -39) (undo-tree-id310 . -38) (undo-tree-id311 . -39) (undo-tree-id312 . -39) (undo-tree-id313 . -39) (undo-tree-id314 . -38) (t 23736 35745 979776 620000)) (23736 35800 192344 670000) 0 nil]) ((41 . 44) (40 . 41) (39 . 41) (#("<" 0 1 (fontified nil face font-lock-type-face)) . -39) (33 . 40) (#("<" 0 1 (fontified t)) . -33) (undo-tree-id187 . -1) (undo-tree-id189 . -1) (undo-tree-id191 . -1) (undo-tree-id192 . -1) (undo-tree-id194 . -1) (undo-tree-id196 . -1) (undo-tree-id198 . -1) (undo-tree-id200 . -1) (undo-tree-id202 . -1) (undo-tree-id204 . -1) (#("R" 0 1 (fontified t face font-lock-type-face)) . -34) (undo-tree-id206 . -1) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id210 . -1) (undo-tree-id212 . -1) (undo-tree-id214 . -1) (undo-tree-id216 . -1) (undo-tree-id218 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -35) (undo-tree-id220 . -1) (undo-tree-id222 . -1) (undo-tree-id224 . -1) (undo-tree-id226 . -1) (undo-tree-id228 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -36) (undo-tree-id230 . -1) (undo-tree-id232 . -1) (undo-tree-id234 . -1) (undo-tree-id236 . -1) (#("u" 0 1 (fontified t face font-lock-type-face)) . -37) (undo-tree-id238 . -1) (undo-tree-id240 . -1) (undo-tree-id242 . -1) (#("l" 0 1 (fontified t face font-lock-type-face)) . -38) (undo-tree-id244 . -1) (undo-tree-id246 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -39) (undo-tree-id248 . -1) 40 (34 . 40) (33 . 34) (#("o" 0 1 (fontified t)) . -33) (undo-tree-id250 . -1) 34 (31 . 34) (#(" " 0 1 (fontified nil)) . -31) (31 . 32) (#(">" 0 1 (fontified nil syntax-table #1#)) . -31) (30 . 32) (#(" " 0 1 (fontified t)) . -30) (undo-tree-id251 . -1) (#("-" 0 1 (fontified t)) . -31) (undo-tree-id252 . -1) 32 (30 . 32) (#("_" 0 1 (fontified t)) . -30) (undo-tree-id253 . -1) 31 (30 . 31)) ((#("_" 0 1 (fontified nil)) . 30) (undo-tree-id315 . -1) (30 . 31) (#(" -" 0 1 (fontified nil) 1 2 (fontified nil)) . 30) (undo-tree-id316 . -2) (30 . 32) (#("->" 0 1 (fontified nil) 1 2 (fontified nil syntax-table #1#)) . 30) (undo-tree-id317 . -1) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (31 . 32) (#(" " 0 1 (fontified nil)) . 31) (31 . 32) (#("> o" 0 1 (fontified nil syntax-table #1#) 1 2 (fontified nil) 2 3 (fontified nil)) . 31) (undo-tree-id321 . -2) (undo-tree-id322 . -3) (undo-tree-id323 . -2) (undo-tree-id324 . -2) (33 . 34) (#("<" 0 1 (fontified nil)) . 33) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (#("Result" 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face) 3 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil face font-lock-type-face) 5 6 (fontified nil face font-lock-type-face)) . 34) (undo-tree-id327 . -1) (undo-tree-id328 . -6) (33 . 40) (#("Result<" 0 6 (fontified nil face font-lock-type-face) 6 7 (fontified nil face font-lock-type-face)) . 33) (undo-tree-id329 . -6) (undo-tree-id330 . -6) (undo-tree-id331 . -6) (undo-tree-id332 . -6) (39 . 40) (#("<>" 0 1 (fontified nil) 1 2 (fontified nil)) . 39) (undo-tree-id333 . 1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (#("_" 0 1 (fontified nil)) . 40) (undo-tree-id338 . -1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#(", _" 0 3 (fontified t)) . 41) (undo-tree-id342 . -2) (undo-tree-id343 . -2) (undo-tree-id344 . -2) (undo-tree-id345 . -2)) (23736 35800 510953 177000) 0 nil]) ((138 . 145) (134 . 138) (t 23736 35649 533676 424000)) nil (23736 35800 893392 34000) 0 nil]) ((1 . 158) (#("use postgres;

pub fn conn() {
    postgres::Connection::connect(\"postgres://dsock@localhost/mastodon_development\", TlsMode::None)?
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 12 (fontified t face font-lock-constant-face) 12 14 (fontified t) 14 15 (fontified t) 15 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 26 (fontified t face font-lock-function-name-face) 26 29 (fontified t) 29 30 (fontified t) 30 31 (fontified t) 31 35 (fontified t) 35 43 (fontified t face font-lock-constant-face) 43 45 (fontified t) 45 55 (fontified t face font-lock-type-face) 55 57 (fontified t) 57 64 (fontified t) 64 65 (fontified t) 65 114 (fontified t face font-lock-string-face) 114 115 (fontified t) 115 116 (fontified t) 116 123 (fontified t face font-lock-type-face) 123 125 (fontified t) 125 129 (fontified t face font-lock-type-face) 129 130 (fontified t) 130 131 (rear-nonsticky t fontified t face rust-question-mark-face) 131 132 (fontified t) 132 133 (fontified nil) 133 134 (fontified nil)) . 1) (undo-tree-id75 . -64) (undo-tree-id76 . -64) (undo-tree-id77 . -130) (undo-tree-id78 . 21) (undo-tree-id79 . 51) (undo-tree-id80 . -92) (undo-tree-id81 . 57) (undo-tree-id82 . -82) (undo-tree-id83 . 68) (undo-tree-id84 . -74) (undo-tree-id85 . -76) (undo-tree-id86 . -77) (undo-tree-id87 . -75) (undo-tree-id88 . -76) (undo-tree-id89 . -75) (undo-tree-id90 . -75) (undo-tree-id91 . -76) (undo-tree-id92 . -75) (undo-tree-id93 . -76) (undo-tree-id94 . -74) (undo-tree-id95 . -75) (undo-tree-id96 . -74) (undo-tree-id97 . -74) (undo-tree-id98 . -75) (undo-tree-id99 . -74) (undo-tree-id100 . -74) (undo-tree-id101 . -75) (undo-tree-id102 . -74) (undo-tree-id103 . -75) (undo-tree-id104 . -74) (undo-tree-id105 . -75) (undo-tree-id106 . -73) (undo-tree-id107 . -74) (undo-tree-id108 . -73) (undo-tree-id109 . -73) (undo-tree-id110 . -74) (undo-tree-id111 . -73) (undo-tree-id112 . -73) (undo-tree-id113 . -74) (undo-tree-id114 . -73) (undo-tree-id115 . -74) (undo-tree-id116 . -73) (undo-tree-id117 . -74) (undo-tree-id118 . -72) (undo-tree-id119 . -73) (undo-tree-id120 . -72) (undo-tree-id121 . -72) (undo-tree-id122 . -73) (undo-tree-id123 . -72) (undo-tree-id124 . -72) (undo-tree-id125 . -73) (undo-tree-id126 . -72) (undo-tree-id127 . -72) (undo-tree-id128 . -72) (undo-tree-id129 . -73) (undo-tree-id130 . -72) (undo-tree-id131 . -73) (undo-tree-id132 . -72) (undo-tree-id133 . -72) (134 . 135) 73) nil (23736 35649 519753 554000) 0 nil]) ((108 . 114) (94 . 108)) nil (23736 35649 519764 859000) 0 nil]) ((#("database?arg1=val1&arg2=val2" 0 28 (fontified t face font-lock-string-face)) . 94)) nil (23736 35649 519767 775000) 0 nil]) ((#("port" 0 4 (fontified t face font-lock-string-face)) . 93) (undo-tree-id134 . 4)) nil (23736 35649 519771 18000) 0 nil]) ((#(":" 0 1 (fontified t face font-lock-string-face)) . 93) (undo-tree-id135 . 1)) nil (23736 35649 519780 720000) 0 nil]) ((85 . 93) (84 . 85) (#("host" 0 4 (fontified t face font-lock-string-face)) . 84)) nil (23736 35649 519783 559000) 0 nil]) ((78 . 83) (#("user:pass" 0 9 (fontified t face font-lock-string-face)) . 78)) nil (23736 35649 519785 997000) 0 nil]) ((144 . 145)) nil (23736 35649 519787 790000) 0 nil]) ((#(";" 0 1 (fontified t)) . 145)) nil (23736 35649 519789 587000) 0 nil]) ((145 . 146)) nil (23736 35649 519791 458000) 0 nil]) ((#("
" 0 1 (fontified t)) . -144) (undo-tree-id136 . 1) 128) nil (23736 35649 519794 806000) 0 nil]) ((128 . 129) (#("                               " 0 31 (fontified nil)) . 128) (#("
" 0 1 (fontified t)) . -128) 77) nil (23736 35649 519797 977000) 0 nil] [nil nil ((77 . 78)) ((#("
" 0 1 (fontified t face font-lock-string-face)) . 77) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1)) (23736 35510 446795 475000) 0 nil]) ((nil rear-nonsticky nil 174 . 175) (nil fontified nil 65 . 175) (65 . 175) 64) nil (23736 35510 452049 738000) 0 nil]) ((#("()" 0 1 (fontified t) 1 2 (fontified t)) . 65) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 66 (#("\"\"" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 66) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 67 (66 . 68) (#("\"" 0 1 (fontified nil)) . -66) (66 . 67) (65 . 67) (#("(" 0 1 (fontified nil)) . -65) (65 . 66) (58 . 65) (#("con" 0 3 (fontified t)) . -58) (undo-tree-id26 . -3) (undo-tree-id27 . -3) 61 (56 . 61) (46 . 56) (#("Co" 0 2 (fontified t face font-lock-type-face)) . -46) (undo-tree-id28 . -2) (undo-tree-id29 . -2) 48 (45 . 48) (#(":" 0 1 (fontified t)) . -45) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 46 (#("c" 0 1 (fontified t)) . -46) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("o" 0 1 (fontified t)) . -47) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (#("n" 0 1 (fontified t)) . -48) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 49 (47 . 49) (44 . 47) (#("s" 0 1 (fontified t)) . -44) (undo-tree-id38 . -1) (undo-tree-id39 . -1) 45 (36 . 45) (#("c" 0 1 (fontified t)) . -36) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("o" 0 1 (fontified t)) . -37) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 38 (36 . 38) (31 . 36) 16) nil (23736 35510 446916 41000) 0 nil]) ((31 . 32) (30 . 32) (#("{" 0 1 (fontified nil)) . -30) (30 . 31) (29 . 30) (#(")" 0 1 (fontified nil)) . 29) (28 . 29) (27 . 29) (#("(" 0 1 (fontified nil face font-lock-function-name-face)) . -27) (16 . 28) (14 . 16) (13 . 14) (#("s" 0 1 (fontified t face font-lock-constant-face)) . -13) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#(";" 0 1 (fontified t)) . -14) (undo-tree-id46 . -1) (undo-tree-id47 . -1) 15 (12 . 15) (9 . 12) (#("p" 0 1 (fontified t face font-lock-constant-face)) . -9) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#("r" 0 1 (fontified t face font-lock-constant-face)) . -10) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -11) (undo-tree-id52 . -1) (undo-tree-id53 . -1) 12 (1 . 12) (t . -1)) nil (23736 35510 446981 450000) 0 nil] [nil nil ((nil rear-nonsticky nil 21 . 22) (nil fontified nil 1 . 22) (1 . 22) (t . -1)) ((#("env_logger = \"0.6.0\"
" 0 13 (fontified nil) 13 20 (fontified nil face font-lock-string-face) 20 21 (fontified nil rear-nonsticky nil)) . 1) (undo-tree-id0 . -20) (undo-tree-id1 . -21) (undo-tree-id2 . -21) (undo-tree-id3 . -21) (undo-tree-id4 . -21) (undo-tree-id5 . -21) (undo-tree-id6 . -21) (undo-tree-id7 . -21) (undo-tree-id8 . -21) (undo-tree-id9 . -21) (undo-tree-id10 . -21) (undo-tree-id11 . -21) (undo-tree-id12 . -21) (undo-tree-id13 . -21) (undo-tree-id14 . -21) (undo-tree-id15 . -21) (undo-tree-id16 . -21) (undo-tree-id17 . -21) (undo-tree-id18 . -21) (undo-tree-id19 . -21) (undo-tree-id20 . -21) (undo-tree-id21 . -21) (nil rear-nonsticky t 21 . 22)) (23736 35241 240330 809000) 0 nil]) nil nil (23736 35241 249895 545000) 0 nil] #2# 22324 110 nil)