"2226b590c0f7ec559c4382af9591123f85d69e9b"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#4=[nil nil ((#("        println!(\"TEST {}\", env::var(\"TEST\").unwrap());
" 0 8 (fontified t) 8 16 (fontified t face rust-builtin-formatting-macro-face) 16 17 (fontified t) 17 23 (fontified t face font-lock-string-face) 23 25 (fontified t face rust-string-interpolation-face) 25 26 (fontified t face font-lock-string-face) 26 28 (fontified t) 28 31 (fontified t face font-lock-constant-face) 31 37 (fontified t) 37 43 (fontified t face font-lock-string-face) 43 55 (fontified t) 55 56 (fontified t)) . 1300) (undo-tree-id4315 . -36) (undo-tree-id4316 . -36) (undo-tree-id4317 . -36) (undo-tree-id4318 . -36) (undo-tree-id4319 . -36) (undo-tree-id4320 . -36) (undo-tree-id4321 . -37) (undo-tree-id4322 . -37) 1337 (t 23765 6686 974228 992000)) nil (23765 6843 206038 908000) 0 nil]) ((1 . 7956) (#("//! Interfacing with Redis and stream the results on to the `StreamManager`
use crate::redis_cmd;
use crate::user::User;
use futures::stream::Stream;
use futures::{Async, Poll};
use log::info;
use regex::Regex;
use serde_json::Value;
use std::collections::{HashMap, VecDeque};
use std::io::{Read, Write};
use std::net::TcpStream;
use std::time::{Duration, Instant};
use tokio::io::{AsyncRead, Error};
use uuid::Uuid;
use std::env;

#[derive(Debug)]
struct MsgQueue {
    messages: VecDeque<Value>,
    last_polled_at: Instant,
    redis_channel: String,
}
impl MsgQueue {
    fn new(redis_channel: impl std::fmt::Display) -> Self {
        let redis_channel = redis_channel.to_string();
        MsgQueue {
            messages: VecDeque::new(),
            last_polled_at: Instant::now(),
            redis_channel,
        }
    }
}

/// The item that streams from Redis and is polled by the `StreamManger`
#[derive(Debug)]
pub struct Receiver {
    pubsub_connection: TcpStream,
    secondary_redis_connection: TcpStream,
    tl: String,
    pub user: User,
    manager_id: Uuid,
    msg_queues: HashMap<Uuid, MsgQueue>,
    clients_per_timeline: HashMap<String, i32>,
}
impl Default for Receiver {
    fn default() -> Self {
        Self::new()
    }
}
impl Receiver {
    pub fn new() -> Self {
        println!(\"TEST {}\", env::var(\"TEST\").unwrap());
        let redis_addr = env::var(\"REDIS_ADDR\").unwrap_or(\"127.0.0.1:6379\".to_string());
        let pubsub_connection = TcpStream::connect(&redis_addr).expect(\"Can connect to Redis\");
        pubsub_connection
            .set_read_timeout(Some(Duration::from_millis(10)))
            .expect(\"Can set read timeout for Redis connection\");
        let secondary_redis_connection =
            TcpStream::connect(&redis_addr).expect(\"Can connect to Redis\");
        secondary_redis_connection
            .set_read_timeout(Some(Duration::from_millis(10)))
            .expect(\"Can set read timeout for Redis connection\");
        Self {
            pubsub_connection,
            secondary_redis_connection,
            tl: String::new(),
            user: User::public(),
            manager_id: Uuid::new_v4(),
            msg_queues: HashMap::new(),
            clients_per_timeline: HashMap::new(),
        }
    }

    /// Update the `StreamManager` that is currently polling the `Receiver`
    pub fn update(&mut self, id: Uuid, timeline: impl std::fmt::Display) {
        self.manager_id = id;
        self.tl = timeline.to_string();
    }

    /// Send a subscribe command to the Redis PubSub (if needed)
    pub fn maybe_subscribe(&mut self, tl: &str) {
        info!(\"Subscribing to {}\", &tl);

        let manager_id = self.manager_id;
        self.msg_queues.insert(manager_id, MsgQueue::new(tl));
        let current_clients = self
            .clients_per_timeline
            .entry(tl.to_string())
            .and_modify(|n| *n += 1)
            .or_insert(1);

        if *current_clients == 1 {
            let subscribe_cmd = redis_cmd::pubsub(\"subscribe\", tl);
            self.pubsub_connection
                .write_all(&subscribe_cmd)
                .expect(\"Can subscribe to Redis\");
            let set_subscribed_cmd = redis_cmd::set(format!(\"subscribed:timeline:{}\", tl), \"1\");
            self.secondary_redis_connection
                .write_all(&set_subscribed_cmd)
                .expect(\"Can set Redis\");
            info!(\"Now subscribed to: {:#?}\", &self.msg_queues);
        }
    }

    /// Drop any PubSub subscriptions that don't have active clients
    pub fn unsubscribe_from_empty_channels(&mut self) {
        let mut timelines_with_fewer_clients = Vec::new();

        // Keep only message queues that have been polled recently
        self.msg_queues.retain(|_id, msg_queue| {
            if msg_queue.last_polled_at.elapsed() < Duration::from_secs(30) {
                true
            } else {
                timelines_with_fewer_clients.push(msg_queue.redis_channel.clone());
                false
            }
        });

        // Record the lower number of clients subscribed to that channel
        for timeline in timelines_with_fewer_clients {
            let count_of_subscribed_clients = self
                .clients_per_timeline
                .entry(timeline.clone())
                .and_modify(|n| *n -= 1)
                .or_insert(0);
            // If no clients, unsubscribe from the channel
            if *count_of_subscribed_clients <= 0 {
                self.unsubscribe(&timeline);
            }
        }
    }

    /// Send an unsubscribe command to the Redis PubSub
    pub fn unsubscribe(&mut self, tl: &str) {
        let unsubscribe_cmd = redis_cmd::pubsub(\"unsubscribe\", tl);
        info!(\"Unsubscribing from {}\", &tl);
        self.pubsub_connection
            .write_all(&unsubscribe_cmd)
            .expect(\"Can unsubscribe from Redis\");
        let set_subscribed_cmd = redis_cmd::set(format!(\"subscribed:timeline:{}\", tl), \"0\");
        self.secondary_redis_connection
            .write_all(&set_subscribed_cmd)
            .expect(\"Can set Redis\");
        info!(\"Now subscribed only to: {:#?}\", &self.msg_queues);
    }
}
impl Stream for Receiver {
    type Item = Value;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<Value>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        info!(\"Being polled by: {}\", self.manager_id);
        let timeline = self.tl.clone();

        // Record current time as last polled time
        self.msg_queues
            .entry(self.manager_id)
            .and_modify(|msg_queue| msg_queue.last_polled_at = Instant::now());

        // Add any incomming messages to the back of the relevant `msg_queues`
        // NOTE: This could be more/other than the `msg_queue` currently being polled
        let mut async_stream = AsyncReadableStream(&mut self.pubsub_connection);
        if let Async::Ready(num_bytes_read) = async_stream.poll_read(&mut buffer)? {
            let raw_redis_response = &String::from_utf8_lossy(&buffer[..num_bytes_read]);
            // capture everything between `{` and `}` as potential JSON
            let json_regex = Regex::new(r\"(?P<json>\\{.*\\})\").expect(\"Hard-coded\");
            // capture the timeline so we know which queues to add it to
            let timeline_regex = Regex::new(r\"timeline:(?P<timeline>.*?)\\r\").expect(\"Hard-codded\");
            if let Some(result) = json_regex.captures(raw_redis_response) {
                let timeline =
                    timeline_regex.captures(raw_redis_response).unwrap()[\"timeline\"].to_string();

                let msg: Value = serde_json::from_str(&result[\"json\"].to_string().clone())?;
                for msg_queue in self.msg_queues.values_mut() {
                    if msg_queue.redis_channel == timeline {
                        msg_queue.messages.push_back(msg.clone());
                    }
                }
            }
        }

        // If the `msg_queue` being polled has any new messages, return the first (oldest) one
        match self
            .msg_queues
            .entry(self.manager_id)
            .or_insert_with(|| MsgQueue::new(timeline))
            .messages
            .pop_front()
        {
            Some(value) => Ok(Async::Ready(Some(value))),
            _ => Ok(Async::NotReady),
        }
    }
}

impl Drop for Receiver {
    fn drop(&mut self) {
        let timeline = self.tl.clone();
        self.unsubscribe(&timeline);
    }
}

struct AsyncReadableStream<'a>(&'a mut TcpStream);

impl<'a> Read for AsyncReadableStream<'a> {
    fn read(&mut self, buffer: &mut [u8]) -> Result<usize, std::io::Error> {
        self.0.read(buffer)
    }
}

impl<'a> AsyncRead for AsyncReadableStream<'a> {
    fn poll_read(&mut self, buf: &mut [u8]) -> Poll<usize, std::io::Error> {
        match self.read(buf) {
            Ok(t) => Ok(Async::Ready(t)),
            Err(_) => Ok(Async::NotReady),
        }
    }
}
" 0 76 (fontified t face font-lock-doc-face) 76 79 (fontified t face font-lock-keyword-face) 79 80 (fontified t) 80 85 (fontified t face font-lock-keyword-face) 85 98 (fontified t) 98 101 (fontified t face font-lock-keyword-face) 101 102 (fontified t) 102 107 (fontified t face font-lock-keyword-face) 107 109 (fontified t) 109 113 (fontified t face font-lock-constant-face) 113 115 (fontified t) 115 119 (fontified t face font-lock-type-face) 119 121 (fontified t) 121 124 (fontified t face font-lock-keyword-face) 124 125 (fontified t) 125 132 (fontified t face font-lock-constant-face) 132 134 (fontified t) 134 140 (fontified t face font-lock-constant-face) 140 142 (fontified t) 142 148 (fontified t face font-lock-type-face) 148 150 (fontified t) 150 153 (fontified t face font-lock-keyword-face) 153 154 (fontified t) 154 161 (fontified t face font-lock-constant-face) 161 164 (fontified t) 164 169 (fontified t face font-lock-type-face) 169 171 (fontified t) 171 175 (fontified t face font-lock-type-face) 175 178 (fontified t) 178 181 (fontified t face font-lock-keyword-face) 181 182 (fontified t) 182 185 (fontified t face font-lock-constant-face) 185 193 (fontified t) 193 196 (fontified t face font-lock-keyword-face) 196 197 (fontified t) 197 202 (fontified t face font-lock-constant-face) 202 204 (fontified t) 204 209 (fontified t face font-lock-type-face) 209 211 (fontified t) 211 214 (fontified t face font-lock-keyword-face) 214 215 (fontified t) 215 225 (fontified t face font-lock-constant-face) 225 227 (fontified t) 227 232 (fontified t face font-lock-type-face) 232 234 (fontified t) 234 237 (fontified t face font-lock-keyword-face) 237 238 (fontified t) 238 241 (fontified t face font-lock-constant-face) 241 243 (fontified t) 243 254 (fontified t face font-lock-constant-face) 254 257 (fontified t) 257 264 (fontified t face font-lock-type-face) 264 266 (fontified t) 266 274 (fontified t face font-lock-type-face) 274 277 (fontified t) 277 280 (fontified t face font-lock-keyword-face) 280 281 (fontified t) 281 284 (fontified t face font-lock-constant-face) 284 286 (fontified t) 286 288 (fontified t face font-lock-constant-face) 288 291 (fontified t) 291 295 (fontified t face font-lock-type-face) 295 297 (fontified t) 297 302 (fontified t face font-lock-type-face) 302 305 (fontified t) 305 308 (fontified t face font-lock-keyword-face) 308 309 (fontified t) 309 312 (fontified t face font-lock-constant-face) 312 314 (fontified t) 314 317 (fontified t face font-lock-constant-face) 317 319 (fontified t) 319 328 (fontified t face font-lock-type-face) 328 330 (fontified t) 330 333 (fontified t face font-lock-keyword-face) 333 334 (fontified t) 334 337 (fontified t face font-lock-constant-face) 337 339 (fontified t) 339 343 (fontified t face font-lock-constant-face) 343 346 (fontified t) 346 354 (fontified t face font-lock-type-face) 354 356 (fontified t) 356 363 (fontified t face font-lock-type-face) 363 366 (fontified t) 366 369 (fontified t face font-lock-keyword-face) 369 370 (fontified t) 370 375 (fontified t face font-lock-constant-face) 375 377 (fontified t) 377 379 (fontified t face font-lock-constant-face) 379 382 (fontified t) 382 391 (fontified t face font-lock-type-face) 391 393 (fontified t) 393 398 (fontified t face font-lock-type-face) 398 401 (fontified t) 401 404 (fontified t face font-lock-keyword-face) 404 405 (fontified t) 405 409 (fontified t face font-lock-constant-face) 409 411 (fontified t) 411 415 (fontified t face font-lock-type-face) 415 416 (fontified t) 416 417 (fontified t) 417 420 (fontified t face font-lock-keyword-face) 420 421 (fontified t) 421 424 (fontified t face font-lock-constant-face) 424 430 (fontified t) 430 431 (fontified t) 431 432 (fontified t) 432 448 (fontified t face font-lock-preprocessor-face) 448 449 (fontified t) 449 455 (fontified t face font-lock-keyword-face) 455 456 (fontified t) 456 464 (fontified t face font-lock-type-face) 464 471 (fontified t) 471 479 (fontified t face font-lock-variable-name-face) 479 481 (fontified t) 481 489 (fontified t face font-lock-type-face) 489 490 (fontified t) 490 495 (fontified t face font-lock-type-face) 495 502 (fontified t) 502 514 (fontified t face font-lock-variable-name-face) 514 516 (fontified t face font-lock-variable-name-face) 516 518 (fontified t) 518 525 (fontified t face font-lock-type-face) 525 527 (fontified t) 527 531 (fontified t) 531 544 (fontified t face font-lock-variable-name-face) 544 546 (fontified t) 546 552 (fontified t face font-lock-type-face) 552 556 (fontified t) 556 560 (fontified t face font-lock-keyword-face) 560 561 (fontified t) 561 569 (fontified t face font-lock-type-face) 569 576 (fontified t) 576 578 (fontified t face font-lock-keyword-face) 578 579 (fontified t) 579 582 (fontified t face font-lock-function-name-face) 582 583 (fontified t) 583 596 (fontified t face font-lock-variable-name-face) 596 598 (fontified t) 598 602 (fontified t face font-lock-keyword-face) 602 603 (fontified t) 603 606 (fontified t face font-lock-constant-face) 606 608 (fontified t) 608 611 (fontified t face font-lock-constant-face) 611 613 (fontified t) 613 620 (fontified t face font-lock-type-face) 620 623 (fontified t) 623 624 (syntax-table #1=(1) fontified t) 624 625 (fontified t) 625 629 (fontified t face font-lock-type-face) 629 640 (fontified t) 640 643 (fontified t face font-lock-keyword-face) 643 644 (fontified t) 644 657 (fontified t face font-lock-variable-name-face) 657 695 (fontified t) 695 703 (fontified t face font-lock-type-face) 703 718 (fontified t) 718 726 (fontified t face font-lock-variable-name-face) 726 728 (fontified t) 728 736 (fontified t face font-lock-type-face) 736 757 (fontified t) 757 771 (fontified t face font-lock-variable-name-face) 771 773 (fontified t) 773 780 (fontified t face font-lock-type-face) 780 835 (fontified t) 835 908 (fontified t face font-lock-doc-face) 908 924 (fontified t face font-lock-preprocessor-face) 924 925 (fontified t) 925 928 (fontified t face font-lock-keyword-face) 928 929 (fontified t) 929 931 (fontified t face font-lock-keyword-face) 931 935 (face font-lock-keyword-face fontified t) 935 936 (fontified t) 936 944 (face font-lock-type-face fontified t) 944 947 (fontified t) 947 951 (fontified t) 951 968 (fontified t face font-lock-variable-name-face) 968 970 (fontified t) 970 979 (fontified t face font-lock-type-face) 979 985 (fontified t) 985 1011 (fontified t face font-lock-variable-name-face) 1011 1013 (fontified t) 1013 1022 (fontified t face font-lock-type-face) 1022 1027 (fontified t) 1027 1028 (fontified t) 1028 1030 (fontified t face font-lock-variable-name-face) 1030 1032 (fontified t) 1032 1038 (fontified t face font-lock-type-face) 1038 1040 (fontified t) 1040 1044 (fontified t) 1044 1047 (fontified t face font-lock-keyword-face) 1047 1048 (fontified t) 1048 1052 (fontified t face font-lock-variable-name-face) 1052 1054 (fontified t) 1054 1058 (fontified t face font-lock-type-face) 1058 1064 (fontified t) 1064 1074 (fontified t face font-lock-variable-name-face) 1074 1076 (fontified t) 1076 1080 (fontified t face font-lock-type-face) 1080 1086 (fontified t) 1086 1096 (fontified t face font-lock-variable-name-face) 1096 1098 (fontified t) 1098 1105 (fontified t face font-lock-type-face) 1105 1106 (fontified t) 1106 1110 (fontified t face font-lock-type-face) 1110 1112 (fontified t) 1112 1120 (fontified t face font-lock-type-face) 1120 1127 (fontified t) 1127 1147 (fontified t face font-lock-variable-name-face) 1147 1149 (fontified t) 1149 1156 (fontified t face font-lock-type-face) 1156 1157 (fontified t) 1157 1163 (fontified t face font-lock-type-face) 1163 1165 (fontified t) 1165 1168 (fontified t face font-lock-type-face) 1168 1173 (fontified t) 1173 1177 (fontified t face font-lock-keyword-face) 1177 1178 (fontified t) 1178 1185 (fontified t face font-lock-type-face) 1185 1186 (fontified t) 1186 1189 (fontified t face font-lock-keyword-face) 1189 1190 (fontified t) 1190 1198 (fontified t face font-lock-type-face) 1198 1205 (fontified t) 1205 1207 (fontified t face font-lock-keyword-face) 1207 1208 (fontified t) 1208 1215 (fontified t face font-lock-function-name-face) 1215 1219 (fontified t) 1219 1220 (fontified t syntax-table #1#) 1220 1221 (fontified t) 1221 1225 (fontified t face font-lock-type-face) 1225 1236 (fontified t) 1236 1240 (fontified t face font-lock-type-face) 1240 1256 (fontified t) 1256 1260 (fontified t face font-lock-keyword-face) 1260 1261 (fontified t) 1261 1269 (fontified t face font-lock-type-face) 1269 1276 (fontified t) 1276 1279 (fontified t face font-lock-keyword-face) 1279 1280 (fontified t) 1280 1282 (fontified t face font-lock-keyword-face) 1282 1283 (fontified t) 1283 1286 (fontified t face font-lock-function-name-face) 1286 1290 (fontified t) 1290 1291 (fontified t syntax-table #1#) 1291 1292 (fontified t) 1292 1296 (fontified t face font-lock-type-face) 1296 1299 (fontified t) 1299 1307 (fontified t) 1307 1315 (fontified t face rust-builtin-formatting-macro-face) 1315 1316 (fontified t) 1316 1322 (fontified t face font-lock-string-face) 1322 1324 (fontified t face rust-string-interpolation-face) 1324 1325 (fontified t face font-lock-string-face) 1325 1327 (fontified t) 1327 1330 (fontified t face font-lock-constant-face) 1330 1335 (fontified t) 1335 1336 (fontified t) 1336 1342 (fontified t face font-lock-string-face) 1342 1350 (fontified t) 1350 1352 (fontified t) 1352 1354 (fontified t) 1354 1355 (fontified t) 1355 1363 (fontified t) 1363 1366 (fontified t face font-lock-keyword-face) 1366 1367 (fontified t) 1367 1377 (fontified t face font-lock-variable-name-face) 1377 1380 (fontified t) 1380 1383 (fontified t face font-lock-constant-face) 1383 1388 (fontified t) 1388 1389 (fontified t) 1389 1399 (fontified t face font-lock-string-face) 1399 1400 (fontified t face font-lock-string-face) 1400 1401 (fontified t face font-lock-string-face) 1401 1412 (fontified t) 1412 1413 (fontified t) 1413 1428 (fontified t face font-lock-string-face) 1428 1429 (rear-nonsticky t fontified t face font-lock-string-face) 1429 1439 (fontified t) 1439 1441 (fontified t) 1441 1443 (fontified t) 1443 1444 (fontified t) 1444 1452 (fontified t) 1452 1455 (fontified t face font-lock-keyword-face) 1455 1456 (fontified t) 1456 1473 (fontified t face font-lock-variable-name-face) 1473 1476 (fontified t) 1476 1485 (fontified t face font-lock-type-face) 1485 1496 (fontified t) 1496 1506 (fontified t) 1506 1507 (fontified t) 1507 1515 (fontified t) 1515 1537 (fontified t face font-lock-string-face) 1537 1540 (fontified t) 1540 1556 (fontified t) 1556 1566 (fontified t) 1566 1596 (fontified t) 1596 1600 (fontified t face font-lock-type-face) 1600 1601 (fontified t) 1601 1609 (fontified t face font-lock-type-face) 1609 1649 (fontified t) 1649 1680 (fontified t face font-lock-string-face) 1680 1692 (fontified t face font-lock-string-face) 1692 1695 (fontified t) 1695 1703 (fontified t) 1703 1706 (fontified t face font-lock-keyword-face) 1706 1707 (fontified t) 1707 1733 (fontified t face font-lock-variable-name-face) 1733 1736 (fontified t) 1736 1748 (fontified t) 1748 1757 (fontified t face font-lock-type-face) 1757 1768 (fontified t) 1768 1778 (fontified t) 1778 1787 (fontified t) 1787 1809 (fontified t face font-lock-string-face) 1809 1812 (fontified t) 1812 1855 (fontified t) 1855 1877 (fontified t) 1877 1881 (face font-lock-type-face fontified t) 1881 1882 (fontified t) 1882 1890 (face font-lock-type-face fontified t) 1890 1910 (fontified t) 1910 1930 (fontified t) 1930 1934 (fontified t face font-lock-string-face) 1934 1940 (fontified t face font-lock-string-face) 1940 1944 (fontified t face font-lock-string-face) 1944 1950 (fontified t face font-lock-string-face) 1950 1973 (fontified t face font-lock-string-face) 1973 1976 (fontified t) 1976 1984 (fontified t) 1984 1988 (fontified t face font-lock-type-face) 1988 1991 (fontified t) 1991 2035 (fontified t) 2035 2040 (fontified t) 2040 2061 (fontified t) 2061 2062 (fontified t) 2062 2074 (fontified t) 2074 2076 (fontified t face font-lock-variable-name-face) 2076 2078 (fontified t) 2078 2084 (fontified t face font-lock-type-face) 2084 2105 (fontified t) 2105 2109 (fontified t face font-lock-variable-name-face) 2109 2111 (fontified t) 2111 2115 (fontified t face font-lock-type-face) 2115 2139 (fontified t) 2139 2149 (fontified t face font-lock-variable-name-face) 2149 2151 (fontified t) 2151 2155 (fontified t face font-lock-type-face) 2155 2179 (fontified t) 2179 2189 (fontified t face font-lock-variable-name-face) 2189 2190 (fontified t) 2190 2191 (fontified t) 2191 2198 (fontified t face font-lock-type-face) 2198 2207 (fontified t) 2207 2219 (fontified t) 2219 2239 (fontified t face font-lock-variable-name-face) 2239 2241 (fontified t) 2241 2248 (fontified t face font-lock-type-face) 2248 2278 (fontified t) 2278 2312 (fontified t face font-lock-doc-face) 2312 2350 (fontified t face font-lock-doc-face) 2350 2354 (fontified t) 2354 2357 (fontified t face font-lock-keyword-face) 2357 2358 (fontified t) 2358 2360 (fontified t face font-lock-keyword-face) 2360 2361 (fontified t) 2361 2367 (fontified t face font-lock-function-name-face) 2367 2369 (fontified t) 2369 2372 (fontified t face font-lock-keyword-face) 2372 2373 (fontified t) 2373 2377 (fontified t face font-lock-keyword-face) 2377 2379 (fontified t) 2379 2381 (fontified t face font-lock-variable-name-face) 2381 2383 (fontified t) 2383 2387 (fontified t face font-lock-type-face) 2387 2389 (fontified t) 2389 2397 (fontified t face font-lock-variable-name-face) 2397 2399 (fontified t) 2399 2403 (fontified t face font-lock-keyword-face) 2403 2404 (fontified t) 2404 2407 (fontified t face font-lock-constant-face) 2407 2409 (fontified t) 2409 2410 (fontified t face font-lock-constant-face) 2410 2412 (face font-lock-constant-face fontified t) 2412 2414 (fontified t) 2414 2421 (face font-lock-type-face fontified t) 2421 2425 (fontified t) 2433 2437 (face font-lock-keyword-face) 2463 2467 (face font-lock-keyword-face) 2506 2562 (face font-lock-doc-face) 2562 2567 (face font-lock-doc-face) 2571 2574 (face font-lock-keyword-face) 2575 2577 (face font-lock-keyword-face) 2578 2593 (face font-lock-function-name-face) 2595 2598 (face font-lock-keyword-face) 2599 2603 (face font-lock-keyword-face) 2605 2607 (face font-lock-variable-name-face) 2610 2613 (face font-lock-type-face) 2625 2630 (face font-lock-preprocessor-face) 2631 2650 (face font-lock-string-face) 2667 2670 (face font-lock-keyword-face) 2671 2681 (face font-lock-variable-name-face) 2684 2688 (face font-lock-keyword-face) 2709 2713 (face font-lock-keyword-face) 2744 2752 (face font-lock-type-face) 2772 2775 (face font-lock-keyword-face) 2776 2791 (face font-lock-variable-name-face) 2794 2798 (face font-lock-keyword-face) 2941 2943 (face font-lock-keyword-face) 2980 2983 (face font-lock-keyword-face) 2984 2995 (face font-lock-variable-name-face) 2995 2997 (face font-lock-variable-name-face) 3000 3009 (face font-lock-constant-face) 3018 3029 (face font-lock-string-face) 3048 3052 (face font-lock-keyword-face) 3138 3162 (face font-lock-string-face) 3177 3180 (face font-lock-keyword-face) 3181 3199 (face font-lock-variable-name-face) 3202 3211 (face font-lock-constant-face) 3217 3224 (face rust-builtin-formatting-macro-face) 3225 3246 (face font-lock-string-face) 3246 3248 (face rust-string-interpolation-face) 3248 3249 (face font-lock-string-face) 3256 3259 (face font-lock-string-face) 3274 3278 (face font-lock-keyword-face) 3378 3393 (face font-lock-string-face) 3408 3413 (face font-lock-preprocessor-face) 3414 3440 (face font-lock-string-face) 3443 3447 (face font-lock-keyword-face) 3482 3547 (face font-lock-doc-face) 3551 3554 (face font-lock-keyword-face) 3555 3557 (face font-lock-keyword-face) 3558 3571 (face font-lock-function-name-face) 3571 3589 (face font-lock-function-name-face) 3591 3594 (face font-lock-keyword-face) 3595 3599 (face font-lock-keyword-face) 3611 3614 (face font-lock-keyword-face) 3615 3618 (face font-lock-keyword-face) 3619 3647 (face font-lock-variable-name-face) 3650 3653 (face font-lock-type-face) 3671 3674 (face font-lock-comment-delimiter-face) 3674 3730 (face font-lock-comment-face) 3738 3742 (face font-lock-keyword-face) 3792 3794 (face font-lock-keyword-face) 3830 3831 (syntax-table #1#) 3832 3840 (face font-lock-type-face) 3874 3878 (face font-lock-keyword-face) 3893 3897 (face font-lock-keyword-face) 4000 4005 (face font-lock-keyword-face) 4041 4044 (face font-lock-comment-delimiter-face) 4044 4103 (face font-lock-comment-face) 4103 4106 (face font-lock-comment-face) 4114 4117 (face font-lock-keyword-face) 4127 4129 (face font-lock-keyword-face) 4173 4176 (face font-lock-keyword-face) 4177 4204 (face font-lock-variable-name-face) 4207 4211 (face font-lock-keyword-face) 4375 4378 (face font-lock-comment-delimiter-face) 4378 4422 (face font-lock-comment-face) 4434 4436 (face font-lock-keyword-face) 4466 4467 (syntax-table #1#) 4489 4493 (face font-lock-keyword-face) 4553 4605 (face font-lock-doc-face) 4609 4612 (face font-lock-keyword-face) 4613 4615 (face font-lock-keyword-face) 4616 4627 (face font-lock-function-name-face) 4629 4632 (face font-lock-keyword-face) 4633 4637 (face font-lock-keyword-face) 4639 4641 (face font-lock-variable-name-face) 4644 4647 (face font-lock-type-face) 4659 4662 (face font-lock-keyword-face) 4663 4678 (face font-lock-variable-name-face) 4681 4690 (face font-lock-constant-face) 4699 4712 (face font-lock-string-face) 4727 4732 (face font-lock-preprocessor-face) 4733 4756 (face font-lock-string-face) 4772 4776 (face font-lock-keyword-face) 4856 4884 (face font-lock-string-face) 4895 4898 (face font-lock-keyword-face) 4899 4917 (face font-lock-variable-name-face) 4920 4929 (face font-lock-constant-face) 4935 4942 (face rust-builtin-formatting-macro-face) 4943 4964 (face font-lock-string-face) 4964 4966 (face rust-string-interpolation-face) 4966 4967 (face font-lock-string-face) 4974 4977 (face font-lock-string-face) 4988 4992 (face font-lock-keyword-face) 5084 5099 (face font-lock-string-face) 5110 5115 (face font-lock-preprocessor-face) 5116 5147 (face font-lock-string-face) 5150 5151 (face font-lock-keyword-face) 5151 5154 (face font-lock-keyword-face) 5176 5180 (face font-lock-keyword-face) 5181 5187 (face font-lock-type-face) 5188 5191 (face font-lock-keyword-face) 5192 5200 (face font-lock-type-face) 5207 5211 (face font-lock-keyword-face) 5212 5216 (face font-lock-type-face) 5219 5224 (face font-lock-type-face) 5230 5234 (face font-lock-keyword-face) 5235 5240 (face font-lock-type-face) 5243 5248 (face font-lock-type-face) 5255 5257 (face font-lock-keyword-face) 5258 5262 (face font-lock-function-name-face) 5264 5267 (face font-lock-keyword-face) 5268 5272 (face font-lock-keyword-face) 5275 5276 (syntax-table #1#) 5277 5281 (face font-lock-type-face) 5282 5288 (face font-lock-type-face) 5289 5294 (face font-lock-type-face) 5297 5301 (face font-lock-type-face) 5303 5308 (face font-lock-type-face) 5320 5323 (face font-lock-keyword-face) 5324 5327 (face font-lock-keyword-face) 5328 5334 (face font-lock-variable-name-face) 5337 5341 (face font-lock-preprocessor-face) 5362 5367 (face font-lock-preprocessor-face) 5368 5389 (face font-lock-string-face) 5391 5395 (face font-lock-keyword-face) 5417 5420 (face font-lock-keyword-face) 5421 5429 (face font-lock-variable-name-face) 5432 5436 (face font-lock-keyword-face) 5458 5461 (face font-lock-comment-delimiter-face) 5461 5501 (face font-lock-comment-face) 5509 5513 (face font-lock-keyword-face) 5544 5548 (face font-lock-keyword-face) 5624 5631 (face font-lock-type-face) 5650 5653 (face font-lock-comment-delimiter-face) 5653 5668 (face font-lock-comment-face) 5668 5721 (face font-lock-comment-face) 5729 5732 (face font-lock-comment-delimiter-face) 5732 5806 (face font-lock-comment-face) 5806 5807 (face font-lock-comment-face) 5815 5818 (face font-lock-keyword-face) 5819 5822 (face font-lock-keyword-face) 5823 5835 (face font-lock-variable-name-face) 5838 5857 (face font-lock-type-face) 5859 5862 (face font-lock-keyword-face) 5863 5867 (face font-lock-keyword-face) 5896 5898 (face font-lock-keyword-face) 5899 5902 (face font-lock-keyword-face) 5903 5908 (face font-lock-type-face) 5910 5915 (face font-lock-type-face) 5958 5961 (face font-lock-keyword-face) 5969 5970 (face rust-question-mark-face) 5985 5988 (face font-lock-keyword-face) 5989 6007 (face font-lock-variable-name-face) 6011 6017 (face font-lock-type-face) 6074 6075 (rear-nonsticky t) 6075 6078 (face font-lock-comment-delimiter-face) 6078 6091 (face font-lock-comment-face) 6091 6135 (face font-lock-comment-face) 6147 6150 (face font-lock-keyword-face) 6151 6161 (face font-lock-variable-name-face) 6164 6169 (face font-lock-type-face) 6175 6176 (syntax-table #2=(15) face font-lock-string-face) 6176 6193 (face font-lock-string-face) 6193 6194 (syntax-table #3=(15) face font-lock-string-face) 6203 6215 (face font-lock-string-face) 6230 6233 (face font-lock-comment-delimiter-face) 6233 6290 (face font-lock-comment-face) 6290 6291 (face font-lock-comment-face) 6303 6306 (face font-lock-keyword-face) 6307 6321 (face font-lock-variable-name-face) 6324 6329 (face font-lock-type-face) 6335 6336 (syntax-table #2# face font-lock-string-face) 6336 6365 (face font-lock-string-face) 6365 6366 (syntax-table #3# face font-lock-string-face) 6375 6379 (face font-lock-string-face) 6379 6388 (face font-lock-string-face) 6403 6405 (face font-lock-keyword-face) 6406 6409 (face font-lock-keyword-face) 6410 6414 (face font-lock-type-face) 6483 6486 (face font-lock-keyword-face) 6487 6495 (face font-lock-variable-name-face) 6571 6581 (face font-lock-string-face) 6613 6616 (face font-lock-keyword-face) 6617 6618 (face font-lock-variable-name-face) 6618 6620 (face font-lock-variable-name-face) 6622 6627 (face font-lock-type-face) 6630 6640 (face font-lock-constant-face) 6659 6665 (face font-lock-string-face) 6687 6688 (face rust-question-mark-face) 6706 6708 (face font-lock-keyword-face) 6708 6709 (face font-lock-keyword-face) 6720 6722 (face font-lock-keyword-face) 6723 6727 (face font-lock-keyword-face) 6774 6776 (face font-lock-keyword-face) 6955 6958 (face font-lock-comment-delimiter-face) 6958 7042 (face font-lock-comment-face) 7050 7055 (face font-lock-keyword-face) 7056 7060 (face font-lock-keyword-face) 7104 7108 (face font-lock-keyword-face) 7152 7160 (face font-lock-type-face) 7246 7250 (face font-lock-type-face) 7259 7260 (syntax-table #1#) 7261 7263 (face font-lock-type-face) 7264 7269 (face font-lock-type-face) 7271 7276 (face font-lock-type-face) 7277 7281 (face font-lock-type-face) 7307 7308 (syntax-table #1#) 7309 7311 (face font-lock-type-face) 7312 7315 (face font-lock-type-face) 7315 7317 (face font-lock-type-face) 7319 7327 (face font-lock-type-face) 7349 7353 (face font-lock-keyword-face) 7354 7358 (face font-lock-type-face) 7359 7362 (face font-lock-keyword-face) 7363 7371 (face font-lock-type-face) 7378 7380 (face font-lock-keyword-face) 7381 7385 (face font-lock-function-name-face) 7387 7390 (face font-lock-keyword-face) 7391 7395 (face font-lock-keyword-face) 7407 7410 (face font-lock-keyword-face) 7411 7419 (face font-lock-variable-name-face) 7422 7426 (face font-lock-keyword-face) 7447 7451 (face font-lock-keyword-face) 7485 7491 (face font-lock-keyword-face) 7492 7511 (face font-lock-type-face) 7513 7514 (face font-lock-variable-name-face) 7518 7519 (face font-lock-variable-name-face) 7520 7523 (face font-lock-keyword-face) 7524 7533 (face font-lock-type-face) 7537 7541 (face font-lock-keyword-face) 7543 7544 (face font-lock-variable-name-face) 7546 7550 (face font-lock-type-face) 7551 7554 (face font-lock-keyword-face) 7555 7574 (face font-lock-type-face) 7576 7577 (face font-lock-variable-name-face) 7585 7587 (face font-lock-keyword-face) 7588 7592 (face font-lock-function-name-face) 7594 7597 (face font-lock-keyword-face) 7598 7602 (face font-lock-keyword-face) 7604 7610 (face font-lock-variable-name-face) 7613 7616 (face font-lock-keyword-face) 7618 7620 (face font-lock-type-face) 7624 7625 (syntax-table #1#) 7626 7632 (face font-lock-type-face) 7633 7638 (face font-lock-type-face) 7640 7643 (face font-lock-constant-face) 7645 7647 (face font-lock-constant-face) 7649 7654 (face font-lock-type-face) 7666 7670 (face font-lock-keyword-face) 7695 7699 (face font-lock-keyword-face) 7701 7702 (face font-lock-variable-name-face) 7704 7713 (face font-lock-type-face) 7714 7717 (face font-lock-keyword-face) 7718 7737 (face font-lock-type-face) 7739 7740 (face font-lock-variable-name-face) 7748 7750 (face font-lock-keyword-face) 7751 7760 (face font-lock-function-name-face) 7762 7765 (face font-lock-keyword-face) 7766 7770 (face font-lock-keyword-face) 7772 7775 (face font-lock-variable-name-face) 7778 7781 (face font-lock-keyword-face) 7783 7785 (face font-lock-type-face) 7789 7790 (syntax-table #1#) 7791 7792 (face font-lock-type-face) 7792 7795 (face font-lock-type-face) 7796 7801 (face font-lock-type-face) 7803 7806 (face font-lock-constant-face) 7808 7810 (face font-lock-constant-face) 7812 7817 (face font-lock-type-face) 7829 7830 (face font-lock-keyword-face) 7830 7834 (face font-lock-keyword-face) 7835 7839 (face font-lock-keyword-face) 7864 7866 (face font-lock-type-face) 7871 7872 (syntax-table #1#) 7873 7875 (face font-lock-type-face) 7876 7881 (face font-lock-type-face) 7883 7888 (face font-lock-type-face) 7906 7909 (face font-lock-type-face) 7914 7915 (syntax-table #1#) 7916 7918 (face font-lock-type-face) 7919 7924 (face font-lock-type-face) 7926 7934 (face font-lock-type-face)) . 1) (undo-tree-id4251 . -7951) (undo-tree-id4252 . 6611) (undo-tree-id4253 . -1413) (undo-tree-id4254 . -1428) (undo-tree-id4255 . -143) (undo-tree-id4256 . -6135) (undo-tree-id4257 . -6288) (undo-tree-id4258 . -172) (undo-tree-id4259 . -143) (undo-tree-id4260 . -172) (undo-tree-id4261 . -143) (undo-tree-id4262 . -143) (undo-tree-id4263 . -143) (undo-tree-id4264 . -143) (undo-tree-id4265 . -1384) (undo-tree-id4266 . -1384) (undo-tree-id4267 . -1384) (undo-tree-id4268 . -1442) (undo-tree-id4269 . -1767) (undo-tree-id4270 . -1767) (undo-tree-id4271 . -632) (undo-tree-id4272 . -1413) (undo-tree-id4273 . -1767) (undo-tree-id4274 . -1767) (undo-tree-id4275 . -1767) (undo-tree-id4276 . -1228) (undo-tree-id4277 . -1767) (undo-tree-id4278 . -7951) (undo-tree-id4279 . -1343) (undo-tree-id4280 . -1343) (undo-tree-id4281 . -632) (undo-tree-id4282 . -1343) (undo-tree-id4283 . -632) (undo-tree-id4284 . -1343) (undo-tree-id4285 . -1335) (undo-tree-id4286 . -1335) (undo-tree-id4287 . -1336) (undo-tree-id4288 . -632) (undo-tree-id4289 . -1332) (undo-tree-id4290 . -1335) (undo-tree-id4291 . -1385) (undo-tree-id4292 . -1388) (undo-tree-id4293 . -1335) (undo-tree-id4294 . -1335) (undo-tree-id4295 . -632) (undo-tree-id4296 . 6620) (undo-tree-id4297 . -1336) (undo-tree-id4298 . 6619) (undo-tree-id4299 . -1342) (undo-tree-id4300 . 6613) (undo-tree-id4301 . -1343) 1336) nil (23765 6686 867152 243000) 0 nil]) ((1344 . 1345)) nil (23765 6686 867160 352000) 0 nil]) ((#(" " 0 1 (fontified t)) . 1344)) nil (23765 6686 867162 440000) 0 nil]) ((#("," 0 1 (fontified t)) . 1344)) nil (23765 6686 867164 70000) 0 nil]) ((1355 . 1356) (#(")" 0 1 (fontified nil)) . 1355) (1354 . 1355) (#(" " 0 1 (fontified nil)) . -1354) (1354 . 1355) (#(")" 0 1 (fontified nil)) . -1354) (1354 . 1355) (#(")" 0 1 (fontified nil)) . 1354) (1353 . 1354) (1352 . 1354) (#("(" 0 1 (fontified nil)) . -1352) (1348 . 1353) (#("s" 0 1 (fontified t)) . -1348) (undo-tree-id4302 . -1) 1349 (1344 . 1349) (#(")" 0 1 (fontified nil)) . 1344) (1343 . 1344) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 1343) (1338 . 1343) (1337 . 1339) (#("\"" 0 1 (fontified nil)) . -1337) (1337 . 1338) (1336 . 1338) (#("(" 0 1 (fontified nil)) . -1336) (1335 . 1337) (#("t" 0 1 (fontified t)) . -1335) (undo-tree-id4303 . -1) 1336 (1326 . 1336) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 1326) (1325 . 1326) (#(" " 0 1 (fontified nil)) . -1325) (1325 . 1326) (#("\"" 0 1 (fontified nil face rust-string-interpolation-face)) . -1325) (1325 . 1326) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 1325) (1324 . 1325) (1323 . 1325) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -1323) (1322 . 1324) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 1323) (1318 . 1323) (1317 . 1319) (#("\"" 0 1 (fontified nil)) . -1317) (1317 . 1318) (1316 . 1318) (#("(" 0 1 (fontified nil)) . -1316) (1316 . 1317) (#(" " 0 1 (fontified t)) . -1316) (undo-tree-id4304 . -1) 1317 (1315 . 1317) (1308 . 1315) (1300 . 1308) (1300 . 1301)) nil (23765 6686 867188 37000) 0 nil]) ((1440 . 1441)) nil (23765 6686 867196 677000) 0 nil]) ((1711 . 1712)) nil (23765 6686 867198 5000) 0 nil]) ((1711 . 1721) (#("redi" 0 4 (fontified t)) . -1711) (undo-tree-id4305 . -1) (undo-tree-id4306 . -4) 1715 (1714 . 1715)) nil (23765 6686 867202 720000) 0 nil]) ((1713 . 1714) (1711 . 1713) (#("\"127.0.0.1:6379\"" 0 16 (fontified t face font-lock-string-face)) . 1711) (undo-tree-id4307 . -7) (undo-tree-id4308 . -7) (undo-tree-id4309 . -7) (undo-tree-id4310 . -7) (undo-tree-id4311 . -8) (undo-tree-id4312 . -7) 1718) nil (23765 6686 867211 966000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 1386) (1385 . 1386) (1384 . 1386) (#("(" 0 1 (fontified nil)) . -1384) (1374 . 1385)) nil (23765 6686 867215 505000) 0 nil]) ((1428 . 1438) (#("red" 0 3 (fontified t)) . -1428) (undo-tree-id4313 . -3) (undo-tree-id4314 . -3) 1431 (1428 . 1431)) nil (23765 6686 867220 887000) 0 nil] [nil nil ((1428 . 1429) (#(")" 0 1 (fontified t)) . 1428) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (undo-tree-id4247 . -1) (undo-tree-id4248 . 1) (undo-tree-id4249 . 1) (undo-tree-id4250 . -1)) ((1428 . 1429) (#("e" 0 1 (fontified t)) . 1428)) (23765 6580 612321 371000) 0 nil]) ((1375 . 1376)) nil (23765 6580 615010 166000) 0 nil]) ((nil rear-nonsticky nil 1373 . 1374) (nil fontified nil 1358 . 1374) (1358 . 1374)) nil (23765 6580 612328 408000) 0 nil] [nil nil ((nil rear-nonsticky nil 1374 . 1375) (nil fontified nil 1359 . 1375) (1359 . 1375) 1358) ((#("\"127.0.0.1:6379\"" 0 15 (fontified nil face font-lock-string-face) 15 16 (fontified nil rear-nonsticky nil face font-lock-string-face)) . 1359) (undo-tree-id4217 . -15) (undo-tree-id4218 . -15) (undo-tree-id4219 . -15) (undo-tree-id4220 . -15) (undo-tree-id4221 . -15) (undo-tree-id4222 . -15) (undo-tree-id4223 . -15) (undo-tree-id4224 . -15) (undo-tree-id4225 . -15) (undo-tree-id4226 . -15) (undo-tree-id4227 . -15) (undo-tree-id4228 . -15) (undo-tree-id4229 . -15) (undo-tree-id4230 . -15) (undo-tree-id4231 . -15) (undo-tree-id4232 . -15) (undo-tree-id4233 . -15) (undo-tree-id4234 . -15) (undo-tree-id4235 . -15) (undo-tree-id4236 . -15) (undo-tree-id4237 . -15) (undo-tree-id4238 . -15) (undo-tree-id4239 . 16) (undo-tree-id4240 . -1) (undo-tree-id4241 . 15) (undo-tree-id4242 . -15) (undo-tree-id4243 . 1) (undo-tree-id4244 . -16) (nil rear-nonsticky t 1374 . 1375)) (23765 6572 412252 655000) 0 nil]) ((#("\"127.0.0.1:6379\"" 0 16 (fontified t face font-lock-string-face)) . 1411) (undo-tree-id4209 . -7) (undo-tree-id4210 . -7) (undo-tree-id4211 . -7) (undo-tree-id4212 . -7) (undo-tree-id4213 . -7) 1418) nil (23765 6572 415282 922000) 0 nil]) ((#("\"\"" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 1358) (undo-tree-id4214 . 1) (undo-tree-id4215 . -2)) nil (23765 6572 412272 239000) 0 nil]) ((1358 . 1360) (#("\"" 0 1 (fontified nil)) . -1358) (1358 . 1359) (1357 . 1359) (#("(" 0 1 (fontified nil)) . -1357) (1347 . 1358) (#(")" 0 1 (fontified nil)) . 1347) (1346 . 1347) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 1346) (1342 . 1346) (1335 . 1342) (1334 . 1336) (#("\"" 0 1 (fontified nil)) . -1334) (1334 . 1335) (1333 . 1335) (#("(" 0 1 (fontified nil)) . -1333) (1330 . 1334)) nil (23765 6572 412279 77000) 0 nil]) ((422 . 431) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -422) (undo-tree-id4216 . -1) 423 (418 . 423) (417 . 418) 402) nil (23765 6572 412285 804000) 0 nil]) ((1311 . 1316) (1294 . 1311) (1286 . 1294) (1286 . 1287) 1308 (t 23765 5224 523504 294000)) nil (23765 6572 412289 469000) 0 nil]) ((#("." 0 1 (fontified t face font-lock-comment-face)) . -6142) (undo-tree-id4192 . -1) (undo-tree-id4193 . -1) (undo-tree-id4194 . -1) (undo-tree-id4195 . -1) (undo-tree-id4196 . -1) (undo-tree-id4197 . -1) (undo-tree-id4198 . -1) (undo-tree-id4199 . -1) (undo-tree-id4200 . -1) 6143 (6140 . 6143) (6125 . 6140) (6124 . 6125) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -6124) (undo-tree-id4201 . -1) (undo-tree-id4202 . -1) 6125 (6112 . 6125) (#("n" 0 1 (fontified t face font-lock-comment-face)) . -6112) (undo-tree-id4203 . -1) (undo-tree-id4204 . -1) 6113 (6110 . 6113) (#("h" 0 1 (fontified t face font-lock-comment-face)) . -6110) (undo-tree-id4205 . -1) (undo-tree-id4206 . -1) 6111 (6110 . 6111) (6097 . 6110) (6088 . 6097) (6087 . 6088) (#("o" 0 1 (fontified t face font-lock-comment-face)) . -6087) (undo-tree-id4207 . -1) (undo-tree-id4208 . -1) 6088 (6082 . 6088) (6069 . 6082) 5999) nil (23765 3925 450362 379000) 0 nil]) ((nil rear-nonsticky nil 5926 . 5927) (5915 . 5987)) nil (23765 3925 450374 161000) 0 nil]) ((#("            // capture everything between `{` and `}` as potential JSON
" 0 12 (fontified t) 12 15 (fontified t face font-lock-comment-delimiter-face) 15 28 (fontified t face font-lock-comment-face) 28 72 (face font-lock-comment-face fontified t)) . 5825) (t 23765 3868 806926 702000)) nil (23765 3925 450377 774000) 0 nil]) ((1 . 7734) (#("//! Interfacing with Redis and stream the results on to the `StreamManager`
use crate::redis_cmd;
use crate::user::User;
use futures::stream::Stream;
use futures::{Async, Poll};
use log::info;
use regex::Regex;
use serde_json::Value;
use std::collections::{HashMap, VecDeque};
use std::io::{Read, Write};
use std::net::TcpStream;
use std::time::{Duration, Instant};
use tokio::io::{AsyncRead, Error};
use uuid::Uuid;

#[derive(Debug)]
struct MsgQueue {
    messages: VecDeque<Value>,
    last_polled_at: Instant,
    redis_channel: String,
}
impl MsgQueue {
    fn new(redis_channel: impl std::fmt::Display) -> Self {
        let redis_channel = redis_channel.to_string();
        MsgQueue {
            messages: VecDeque::new(),
            last_polled_at: Instant::now(),
            redis_channel,
        }
    }
}

/// The item that streams from Redis and is polled by the `StreamManger`
#[derive(Debug)]
pub struct Receiver {
    pubsub_connection: TcpStream,
    secondary_redis_connection: TcpStream,
    tl: String,
    pub user: User,
    manager_id: Uuid,
    msg_queues: HashMap<Uuid, MsgQueue>,
    clients_per_timeline: HashMap<String, i32>,
}
impl Default for Receiver {
    fn default() -> Self {
        Self::new()
    }
}
impl Receiver {
    pub fn new() -> Self {
        let pubsub_connection = TcpStream::connect(\"127.0.0.1:6379\").expect(\"Can connect to Redis\");
        pubsub_connection
            .set_read_timeout(Some(Duration::from_millis(10)))
            .expect(\"Can set read timeout for Redis connection\");
        let secondary_redis_connection =
            TcpStream::connect(\"127.0.0.1:6379\").expect(\"Can connect to Redis\");
        secondary_redis_connection
            .set_read_timeout(Some(Duration::from_millis(10)))
            .expect(\"Can set read timeout for Redis connection\");
        Self {
            pubsub_connection,
            secondary_redis_connection,
            tl: String::new(),
            user: User::public(),
            manager_id: Uuid::new_v4(),
            msg_queues: HashMap::new(),
            clients_per_timeline: HashMap::new(),
        }
    }

    /// Update the `StreamManager` that is currently polling the `Receiver`
    pub fn update(&mut self, id: Uuid, timeline: impl std::fmt::Display) {
        self.manager_id = id;
        self.tl = timeline.to_string();
    }

    /// Send a subscribe command to the Redis PubSub (if needed)
    pub fn maybe_subscribe(&mut self, tl: &str) {
        info!(\"Subscribing to {}\", &tl);

        let manager_id = self.manager_id;
        self.msg_queues.insert(manager_id, MsgQueue::new(tl));
        let current_clients = self
            .clients_per_timeline
            .entry(tl.to_string())
            .and_modify(|n| *n += 1)
            .or_insert(1);

        if *current_clients == 1 {
            let subscribe_cmd = redis_cmd::pubsub(\"subscribe\", tl);
            self.pubsub_connection
                .write_all(&subscribe_cmd)
                .expect(\"Can subscribe to Redis\");
            let set_subscribed_cmd = redis_cmd::set(format!(\"subscribed:timeline:{}\", tl), \"1\");
            self.secondary_redis_connection
                .write_all(&set_subscribed_cmd)
                .expect(\"Can set Redis\");
            info!(\"Now subscribed to: {:#?}\", &self.msg_queues);
        }
    }

    /// Drop any PubSub subscriptions that don't have active clients
    pub fn unsubscribe_from_empty_channels(&mut self) {
        let mut timelines_with_fewer_clients = Vec::new();

        // Keep only message queues that have been polled recently
        self.msg_queues.retain(|_id, msg_queue| {
            if msg_queue.last_polled_at.elapsed() < Duration::from_secs(30) {
                true
            } else {
                timelines_with_fewer_clients.push(msg_queue.redis_channel.clone());
                false
            }
        });

        // Record the lower number of clients subscribed to that channel
        for timeline in timelines_with_fewer_clients {
            let count_of_subscribed_clients = self
                .clients_per_timeline
                .entry(timeline.clone())
                .and_modify(|n| *n -= 1)
                .or_insert(0);
            // If no clients, unsubscribe from the channel
            if *count_of_subscribed_clients <= 0 {
                self.unsubscribe(&timeline);
            }
        }
    }

    /// Send an unsubscribe command to the Redis PubSub
    pub fn unsubscribe(&mut self, tl: &str) {
        let unsubscribe_cmd = redis_cmd::pubsub(\"unsubscribe\", tl);
        info!(\"Unsubscribing from {}\", &tl);
        self.pubsub_connection
            .write_all(&unsubscribe_cmd)
            .expect(\"Can unsubscribe from Redis\");
        let set_subscribed_cmd = redis_cmd::set(format!(\"subscribed:timeline:{}\", tl), \"0\");
        self.secondary_redis_connection
            .write_all(&set_subscribed_cmd)
            .expect(\"Can set Redis\");
        info!(\"Now subscribed only to: {:#?}\", &self.msg_queues);
    }
}
impl Stream for Receiver {
    type Item = Value;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<Value>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        info!(\"Being polled by: {}\", self.manager_id);
        let timeline = self.tl.clone();

        // Record current time as last polled time
        self.msg_queues
            .entry(self.manager_id)
            .and_modify(|msg_queue| msg_queue.last_polled_at = Instant::now());

        // Add any incomming messages to the back of the relevant `msg_queues`
        // NOTE: This could be more/other than the `msg_queue` currently being polled
        let mut async_stream = AsyncReadableStream(&mut self.pubsub_connection);
        if let Async::Ready(num_bytes_read) = async_stream.poll_read(&mut buffer)? {
            // capture everything between `{` and `}` as potential JSON
            let raw_redis_response = &String::from_utf8_lossy(&buffer[..num_bytes_read]);
            let json_regex = Regex::new(r\"(?P<json>\\{.*\\})\").expect(\"Hard-coded\");
            let timeline_regex = Regex::new(r\"timeline:(?P<timeline>.*?)\\r\").expect(\"Hard-codded\");
            if let Some(result) = json_regex.captures(raw_redis_response) {
                let timeline =
                    timeline_regex.captures(raw_redis_response).unwrap()[\"timeline\"].to_string();

                let msg: Value = serde_json::from_str(&result[\"json\"].to_string().clone())?;
                for msg_queue in self.msg_queues.values_mut() {
                    if msg_queue.redis_channel == timeline {
                        msg_queue.messages.push_back(msg.clone());
                    }  
                }

            }
        }

        // If the `msg_queue` being polled has any new messages, return the first (oldest) one
        match self
            .msg_queues
            .entry(self.manager_id)
            .or_insert_with(|| MsgQueue::new(timeline))
            .messages
            .pop_front()
        {
            Some(value) => Ok(Async::Ready(Some(value))),
            _ => Ok(Async::NotReady),
        }
    }
}

impl Drop for Receiver {
    fn drop(&mut self) {
        let timeline = self.tl.clone();
        self.unsubscribe(&timeline);
    }
}

struct AsyncReadableStream<'a>(&'a mut TcpStream);

impl<'a> Read for AsyncReadableStream<'a> {
    fn read(&mut self, buffer: &mut [u8]) -> Result<usize, std::io::Error> {
        self.0.read(buffer)
    }
}

impl<'a> AsyncRead for AsyncReadableStream<'a> {
    fn poll_read(&mut self, buf: &mut [u8]) -> Poll<usize, std::io::Error> {
        match self.read(buf) {
            Ok(t) => Ok(Async::Ready(t)),
            Err(_) => Ok(Async::NotReady),
        }
    }
}
" 0 76 (fontified t face font-lock-doc-face) 76 79 (fontified t face font-lock-keyword-face) 79 80 (fontified t) 80 85 (fontified t face font-lock-keyword-face) 85 98 (fontified t) 98 101 (fontified t face font-lock-keyword-face) 101 102 (fontified t) 102 107 (fontified t face font-lock-keyword-face) 107 109 (fontified t) 109 113 (fontified t face font-lock-constant-face) 113 115 (fontified t) 115 119 (fontified t face font-lock-type-face) 119 121 (fontified t) 121 124 (fontified t face font-lock-keyword-face) 124 125 (fontified t) 125 132 (fontified t face font-lock-constant-face) 132 134 (fontified t) 134 140 (fontified t face font-lock-constant-face) 140 142 (fontified t) 142 148 (fontified t face font-lock-type-face) 148 150 (fontified t) 150 153 (fontified t face font-lock-keyword-face) 153 154 (fontified t) 154 161 (fontified t face font-lock-constant-face) 161 164 (fontified t) 164 169 (fontified t face font-lock-type-face) 169 171 (fontified t) 171 175 (fontified t face font-lock-type-face) 175 178 (fontified t) 178 181 (fontified t face font-lock-keyword-face) 181 182 (fontified t) 182 185 (fontified t face font-lock-constant-face) 185 193 (fontified t) 193 196 (fontified t face font-lock-keyword-face) 196 197 (fontified t) 197 202 (fontified t face font-lock-constant-face) 202 204 (fontified t) 204 209 (fontified t face font-lock-type-face) 209 211 (fontified t) 211 214 (fontified t face font-lock-keyword-face) 214 215 (fontified t) 215 225 (fontified t face font-lock-constant-face) 225 227 (fontified t) 227 232 (fontified t face font-lock-type-face) 232 234 (fontified t) 234 237 (fontified t face font-lock-keyword-face) 237 238 (fontified t) 238 241 (fontified t face font-lock-constant-face) 241 243 (fontified t) 243 254 (fontified t face font-lock-constant-face) 254 257 (fontified t) 257 264 (fontified t face font-lock-type-face) 264 266 (fontified t) 266 274 (fontified t face font-lock-type-face) 274 277 (fontified t) 277 280 (fontified t face font-lock-keyword-face) 280 281 (fontified t) 281 284 (fontified t face font-lock-constant-face) 284 286 (fontified t) 286 288 (fontified t face font-lock-constant-face) 288 291 (fontified t) 291 295 (fontified t face font-lock-type-face) 295 297 (fontified t) 297 302 (fontified t face font-lock-type-face) 302 305 (fontified t) 305 308 (fontified t face font-lock-keyword-face) 308 309 (fontified t) 309 312 (fontified t face font-lock-constant-face) 312 314 (fontified t) 314 317 (fontified t face font-lock-constant-face) 317 319 (fontified t) 319 328 (fontified t face font-lock-type-face) 328 330 (fontified t) 330 333 (fontified t face font-lock-keyword-face) 333 334 (fontified t) 334 337 (fontified t face font-lock-constant-face) 337 339 (fontified t) 339 343 (fontified t face font-lock-constant-face) 343 346 (fontified t) 346 354 (fontified t face font-lock-type-face) 354 356 (fontified t) 356 363 (fontified t face font-lock-type-face) 363 366 (fontified t) 366 369 (fontified t face font-lock-keyword-face) 369 370 (fontified t) 370 375 (fontified t face font-lock-constant-face) 375 377 (fontified t) 377 379 (fontified t face font-lock-constant-face) 379 382 (fontified t) 382 391 (fontified t face font-lock-type-face) 391 393 (fontified t) 393 398 (fontified t face font-lock-type-face) 398 401 (fontified t) 401 404 (fontified t face font-lock-keyword-face) 404 405 (fontified t) 405 409 (fontified t face font-lock-constant-face) 409 411 (fontified t) 411 415 (fontified t face font-lock-type-face) 415 418 (fontified t) 418 434 (fontified t face font-lock-preprocessor-face) 434 435 (fontified t) 435 441 (fontified t face font-lock-keyword-face) 441 442 (fontified t) 442 450 (fontified t face font-lock-type-face) 450 457 (fontified t) 457 465 (fontified t face font-lock-variable-name-face) 465 467 (fontified t) 467 475 (fontified t face font-lock-type-face) 475 476 (fontified t) 476 481 (fontified t face font-lock-type-face) 481 488 (fontified t) 488 500 (fontified t face font-lock-variable-name-face) 500 502 (fontified t face font-lock-variable-name-face) 502 504 (fontified t) 504 511 (fontified t face font-lock-type-face) 511 513 (fontified t) 513 517 (fontified t) 517 530 (fontified t face font-lock-variable-name-face) 530 532 (fontified t) 532 538 (fontified t face font-lock-type-face) 538 542 (fontified t) 542 546 (fontified t face font-lock-keyword-face) 546 547 (fontified t) 547 555 (fontified t face font-lock-type-face) 555 562 (fontified t) 562 564 (fontified t face font-lock-keyword-face) 564 565 (fontified t) 565 568 (fontified t face font-lock-function-name-face) 568 569 (fontified t) 569 582 (fontified t face font-lock-variable-name-face) 582 584 (fontified t) 584 588 (fontified t face font-lock-keyword-face) 588 589 (fontified t) 589 592 (fontified t face font-lock-constant-face) 592 594 (fontified t) 594 597 (fontified t face font-lock-constant-face) 597 599 (fontified t) 599 606 (fontified t face font-lock-type-face) 606 609 (fontified t) 609 610 (fontified t syntax-table #1#) 610 611 (fontified t) 611 615 (fontified t face font-lock-type-face) 615 626 (fontified t) 626 629 (fontified t face font-lock-keyword-face) 629 630 (fontified t) 630 643 (fontified t face font-lock-variable-name-face) 643 681 (fontified t) 681 689 (fontified t face font-lock-type-face) 689 704 (fontified t) 704 712 (fontified t face font-lock-variable-name-face) 712 714 (fontified t) 714 722 (fontified t face font-lock-type-face) 722 743 (fontified t) 743 757 (fontified t face font-lock-variable-name-face) 757 759 (fontified t) 759 766 (fontified t face font-lock-type-face) 766 821 (fontified t) 821 894 (fontified t face font-lock-doc-face) 894 910 (fontified t face font-lock-preprocessor-face) 910 911 (fontified t) 911 914 (fontified t face font-lock-keyword-face) 914 915 (fontified t) 915 921 (fontified t face font-lock-keyword-face) 921 922 (fontified t) 922 930 (fontified t face font-lock-type-face) 930 937 (fontified t) 937 954 (fontified t face font-lock-variable-name-face) 954 956 (fontified t) 956 965 (fontified t face font-lock-type-face) 965 971 (fontified t) 971 997 (fontified t face font-lock-variable-name-face) 997 999 (fontified t) 999 1008 (fontified t face font-lock-type-face) 1008 1013 (fontified t) 1013 1014 (fontified t) 1014 1016 (fontified t face font-lock-variable-name-face) 1016 1018 (fontified t) 1018 1024 (fontified t face font-lock-type-face) 1024 1026 (fontified t) 1026 1030 (fontified t) 1030 1033 (fontified t face font-lock-keyword-face) 1033 1034 (fontified t) 1034 1038 (fontified t face font-lock-variable-name-face) 1038 1040 (fontified t) 1040 1044 (fontified t face font-lock-type-face) 1044 1050 (fontified t) 1050 1060 (fontified t face font-lock-variable-name-face) 1060 1062 (fontified t) 1062 1066 (fontified t face font-lock-type-face) 1066 1072 (fontified t) 1072 1082 (fontified t face font-lock-variable-name-face) 1082 1084 (fontified t) 1084 1091 (fontified t face font-lock-type-face) 1091 1092 (fontified t) 1092 1096 (fontified t face font-lock-type-face) 1096 1098 (fontified t) 1098 1106 (fontified t face font-lock-type-face) 1106 1113 (fontified t) 1113 1133 (fontified t face font-lock-variable-name-face) 1133 1135 (fontified t) 1135 1142 (fontified t face font-lock-type-face) 1142 1143 (fontified t) 1143 1149 (fontified t face font-lock-type-face) 1149 1151 (fontified t) 1151 1154 (fontified t face font-lock-type-face) 1154 1159 (fontified t) 1159 1163 (fontified t face font-lock-keyword-face) 1163 1164 (fontified t) 1164 1171 (fontified t face font-lock-type-face) 1171 1172 (fontified t) 1172 1175 (fontified t face font-lock-keyword-face) 1175 1176 (fontified t) 1176 1184 (fontified t face font-lock-type-face) 1184 1191 (fontified t) 1191 1193 (fontified t face font-lock-keyword-face) 1193 1194 (fontified t) 1194 1201 (fontified t face font-lock-function-name-face) 1201 1205 (fontified t) 1205 1206 (fontified t syntax-table #1#) 1206 1207 (fontified t) 1207 1211 (fontified t face font-lock-type-face) 1211 1222 (fontified t) 1222 1226 (fontified t face font-lock-type-face) 1226 1242 (fontified t) 1242 1246 (fontified t face font-lock-keyword-face) 1246 1247 (fontified t) 1247 1255 (fontified t face font-lock-type-face) 1255 1262 (fontified t) 1262 1265 (fontified t face font-lock-keyword-face) 1265 1266 (fontified t) 1266 1268 (fontified t face font-lock-keyword-face) 1268 1269 (fontified t) 1269 1272 (fontified t face font-lock-function-name-face) 1272 1276 (fontified t) 1276 1277 (fontified t syntax-table #1#) 1277 1278 (fontified t) 1278 1282 (fontified t face font-lock-type-face) 1282 1293 (fontified t) 1293 1296 (fontified t face font-lock-keyword-face) 1296 1297 (fontified t) 1297 1314 (fontified t face font-lock-variable-name-face) 1314 1317 (fontified t) 1317 1326 (fontified t face font-lock-type-face) 1326 1336 (fontified t) 1336 1352 (fontified t face font-lock-string-face) 1352 1361 (fontified t) 1361 1383 (fontified t face font-lock-string-face) 1383 1442 (fontified t) 1442 1446 (fontified t face font-lock-type-face) 1446 1447 (fontified t) 1447 1455 (fontified t face font-lock-type-face) 1455 1495 (fontified t) 1495 1526 (fontified t face font-lock-string-face) 1526 1538 (fontified t face font-lock-string-face) 1538 1541 (fontified t) 3681 3682 (syntax-table #1#) 4317 4318 (syntax-table #1#) 5027 5031 (fontified t face font-lock-keyword-face) 5031 5032 (fontified t) 5032 5038 (fontified t face font-lock-type-face) 5038 5039 (fontified t) 5039 5042 (fontified t face font-lock-keyword-face) 5042 5043 (fontified t) 5043 5051 (fontified t face font-lock-type-face) 5051 5054 (fontified t) 5054 5058 (fontified t) 5058 5062 (fontified t face font-lock-keyword-face) 5062 5063 (fontified t) 5063 5067 (fontified t face font-lock-type-face) 5067 5070 (fontified t) 5070 5075 (fontified t face font-lock-type-face) 5075 5081 (fontified t) 5081 5085 (fontified t face font-lock-keyword-face) 5085 5086 (fontified t) 5086 5091 (fontified t face font-lock-type-face) 5091 5094 (fontified t) 5094 5099 (fontified t face font-lock-type-face) 5099 5106 (fontified t) 5106 5108 (fontified t face font-lock-keyword-face) 5108 5109 (fontified t) 5109 5113 (fontified t face font-lock-function-name-face) 5113 5115 (fontified t) 5115 5118 (fontified t face font-lock-keyword-face) 5118 5119 (fontified t) 5119 5123 (fontified t face font-lock-keyword-face) 5123 5126 (fontified t) 5126 5127 (syntax-table #1# fontified t) 5127 5128 (fontified t) 5128 5132 (fontified t face font-lock-type-face) 5132 5133 (fontified t) 5133 5139 (fontified t face font-lock-type-face) 5139 5140 (fontified t) 5140 5145 (fontified t face font-lock-type-face) 5145 5148 (fontified t) 5148 5152 (fontified t face font-lock-type-face) 5152 5154 (fontified t) 5154 5159 (fontified t face font-lock-type-face) 5159 5171 (fontified t) 5171 5174 (fontified t face font-lock-keyword-face) 5174 5175 (fontified t) 5175 5178 (fontified t face font-lock-keyword-face) 5178 5179 (fontified t) 5179 5185 (fontified t face font-lock-variable-name-face) 5185 5188 (fontified t) 5188 5192 (fontified t face font-lock-preprocessor-face) 5192 5213 (fontified t) 5213 5218 (fontified t face font-lock-preprocessor-face) 5218 5219 (fontified t) 5219 5240 (fontified t face font-lock-string-face) 5240 5242 (fontified t) 5242 5246 (fontified t face font-lock-keyword-face) 5246 5268 (fontified t) 5268 5271 (fontified t face font-lock-keyword-face) 5271 5272 (fontified t) 5272 5280 (fontified t face font-lock-variable-name-face) 5280 5283 (fontified t) 5283 5287 (fontified t face font-lock-keyword-face) 5287 5309 (fontified t) 5309 5312 (fontified t face font-lock-comment-delimiter-face) 5312 5352 (fontified t face font-lock-comment-face) 5352 5360 (fontified t) 5360 5364 (fontified t face font-lock-keyword-face) 5364 5395 (fontified t) 5395 5399 (fontified t face font-lock-keyword-face) 5399 5475 (fontified t) 5475 5482 (fontified t face font-lock-type-face) 5482 5501 (fontified t) 5501 5504 (fontified t face font-lock-comment-delimiter-face) 5504 5527 (fontified t face font-lock-comment-face) 5527 5554 (face font-lock-comment-face fontified t) 5554 5572 (face font-lock-comment-face fontified t) 5572 5580 (fontified t) 5580 5583 (fontified t face font-lock-comment-delimiter-face) 5583 5658 (fontified t face font-lock-comment-face) 5658 5666 (fontified t) 5666 5669 (fontified t face font-lock-keyword-face) 5669 5670 (fontified t) 5670 5673 (fontified t face font-lock-keyword-face) 5673 5674 (fontified t) 5674 5686 (fontified t face font-lock-variable-name-face) 5686 5689 (fontified t) 5689 5708 (fontified t face font-lock-type-face) 5708 5710 (fontified t) 5710 5713 (fontified t face font-lock-keyword-face) 5713 5714 (fontified t) 5714 5718 (fontified t face font-lock-keyword-face) 5718 5738 (fontified t) 5738 5747 (fontified t) 5747 5749 (fontified t face font-lock-keyword-face) 5749 5750 (fontified t) 5750 5753 (fontified t face font-lock-keyword-face) 5753 5754 (fontified t) 5754 5759 (fontified t face font-lock-type-face) 5759 5761 (fontified t) 5761 5766 (fontified t face font-lock-type-face) 5766 5809 (fontified t) 5809 5812 (fontified t face font-lock-keyword-face) 5812 5820 (fontified t) 5820 5821 (fontified t face rust-question-mark-face) 5821 5836 (fontified t) 5836 5839 (fontified t face font-lock-comment-delimiter-face) 5839 5896 (fontified t face font-lock-comment-face) 5896 5908 (fontified t) 5908 5911 (fontified t face font-lock-keyword-face) 5911 5912 (fontified t) 5912 5930 (fontified t face font-lock-variable-name-face) 5930 5934 (fontified t) 5934 5940 (fontified t face font-lock-type-face) 5940 5998 (fontified t) 5998 6001 (fontified t face font-lock-keyword-face) 6001 6002 (fontified t) 6002 6012 (fontified t face font-lock-variable-name-face) 6012 6015 (fontified t) 6015 6020 (fontified t face font-lock-type-face) 6020 6026 (fontified t) 6026 6027 (syntax-table #2# fontified t face font-lock-string-face) 6027 6044 (fontified t face font-lock-string-face) 6044 6045 (syntax-table #3# fontified t face font-lock-string-face) 6045 6054 (fontified t) 6054 6066 (fontified t face font-lock-string-face) 6066 6072 (fontified t) 6072 6081 (fontified t) 6081 6084 (face font-lock-keyword-face fontified t) 6084 6085 (fontified t) 6085 6099 (face font-lock-variable-name-face fontified t) 6099 6102 (fontified t) 6102 6107 (face font-lock-type-face fontified t) 6107 6113 (fontified t) 6113 6114 (syntax-table #2# face font-lock-string-face fontified t) 6114 6143 (face font-lock-string-face fontified t) 6143 6144 (syntax-table #3# face font-lock-string-face fontified t) 6144 6153 (fontified t) 6153 6166 (face font-lock-string-face fontified t) 6166 6169 (fontified t) 6169 6181 (fontified t) 6181 6183 (fontified t face font-lock-keyword-face) 6183 6184 (fontified t) 6184 6187 (fontified t face font-lock-keyword-face) 6187 6188 (fontified t) 6188 6192 (fontified t face font-lock-type-face) 6192 6238 (fontified t) 6238 6245 (fontified t) 6245 6261 (fontified t) 6261 6264 (fontified t face font-lock-keyword-face) 6264 6265 (fontified t) 6265 6273 (fontified t face font-lock-variable-name-face) 6273 6275 (fontified t) 6275 6276 (fontified t) 6276 6349 (fontified t) 6349 6359 (fontified t face font-lock-string-face) 6359 6373 (fontified t) 6373 6374 (fontified t) 6374 6375 (fontified t) 6375 6391 (fontified t) 6391 6394 (fontified t face font-lock-keyword-face) 6394 6395 (fontified t) 6395 6398 (fontified t face font-lock-variable-name-face) 6398 6400 (fontified t) 6400 6405 (fontified t face font-lock-type-face) 6405 6408 (fontified t) 6408 6418 (fontified t face font-lock-constant-face) 6418 6437 (fontified t) 6437 6443 (fontified t face font-lock-string-face) 6443 6465 (fontified t) 6465 6466 (fontified t face rust-question-mark-face) 6466 6484 (fontified t) 6484 6487 (fontified t face font-lock-keyword-face) 6487 6498 (fontified t) 6498 6500 (fontified t face font-lock-keyword-face) 6500 6501 (fontified t) 6501 6505 (fontified t face font-lock-keyword-face) 6505 6552 (fontified t) 6552 6554 (fontified t face font-lock-keyword-face) 6554 6660 (fontified t) 6660 6682 (fontified t) 6682 6683 (fontified t) 6683 6684 (fontified t) 6684 6694 (fontified t) 6694 6702 (fontified t) 6702 6703 (fontified t) 6703 6717 (fontified t) 6717 6736 (fontified t) 6736 6739 (fontified t face font-lock-comment-delimiter-face) 6739 6823 (fontified t face font-lock-comment-face) 6823 6831 (fontified t) 6831 6836 (fontified t face font-lock-keyword-face) 6836 6837 (fontified t) 6837 6841 (fontified t face font-lock-keyword-face) 6841 6885 (fontified t) 6885 6889 (fontified t face font-lock-keyword-face) 6889 6933 (fontified t) 6933 6941 (fontified t face font-lock-type-face) 6941 7004 (fontified t) 7004 7005 (fontified t) 7005 7027 (fontified t) 7027 7031 (fontified t face font-lock-type-face) 7031 7033 (fontified t) 7033 7040 (fontified t) 7040 7041 (syntax-table #1# fontified t) 7041 7042 (fontified t) 7042 7044 (fontified t face font-lock-type-face) 7044 7045 (fontified t) 7045 7050 (fontified t face font-lock-type-face) 7050 7052 (fontified t) 7052 7057 (fontified t face font-lock-type-face) 7057 7058 (fontified t) 7058 7062 (fontified t face font-lock-type-face) 7062 7073 (fontified t) 7073 7088 (fontified t) 7088 7089 (syntax-table #1# fontified t) 7089 7090 (fontified t) 7090 7092 (fontified t face font-lock-type-face) 7092 7093 (fontified t) 7093 7098 (fontified t face font-lock-type-face) 7098 7100 (fontified t) 7100 7108 (fontified t face font-lock-type-face) 7108 7118 (fontified t) 7118 7121 (fontified t) 7121 7130 (fontified t) 7130 7134 (fontified t face font-lock-keyword-face) 7134 7135 (fontified t) 7135 7139 (fontified t face font-lock-type-face) 7139 7140 (fontified t) 7140 7143 (fontified t face font-lock-keyword-face) 7143 7144 (fontified t) 7144 7152 (fontified t face font-lock-type-face) 7152 7155 (fontified t) 7155 7158 (fontified t) 7158 7159 (fontified t) 7159 7161 (fontified t face font-lock-keyword-face) 7161 7162 (fontified t) 7162 7166 (fontified t face font-lock-function-name-face) 7166 7168 (fontified t) 7168 7171 (fontified t face font-lock-keyword-face) 7171 7172 (fontified t) 7172 7176 (fontified t face font-lock-keyword-face) 7176 7180 (fontified t) 7180 7188 (fontified t) 7188 7191 (fontified t face font-lock-keyword-face) 7191 7192 (fontified t) 7192 7200 (fontified t face font-lock-variable-name-face) 7200 7203 (fontified t) 7203 7207 (fontified t face font-lock-keyword-face) 7207 7217 (fontified t) 7217 7220 (fontified t) 7220 7228 (fontified t) 7228 7232 (fontified t face font-lock-keyword-face) 7232 7266 (fontified t) 7266 7272 (fontified t face font-lock-keyword-face) 7272 7273 (fontified t) 7273 7292 (fontified t face font-lock-type-face) 7292 7294 (fontified t) 7294 7295 (fontified t face font-lock-variable-name-face) 7295 7299 (fontified t) 7299 7300 (fontified t face font-lock-variable-name-face) 7300 7301 (fontified t) 7301 7304 (fontified t face font-lock-keyword-face) 7304 7305 (fontified t) 7305 7314 (fontified t face font-lock-type-face) 7314 7318 (fontified t) 7318 7322 (fontified t face font-lock-keyword-face) 7322 7324 (fontified t) 7324 7325 (fontified t face font-lock-variable-name-face) 7325 7327 (fontified t) 7327 7331 (fontified t face font-lock-type-face) 7331 7332 (fontified t) 7332 7335 (fontified t face font-lock-keyword-face) 7335 7336 (fontified t) 7336 7355 (fontified t face font-lock-type-face) 7355 7357 (fontified t) 7357 7358 (fontified t face font-lock-variable-name-face) 7358 7366 (fontified t) 7366 7368 (fontified t face font-lock-keyword-face) 7368 7369 (fontified t) 7369 7373 (fontified t face font-lock-function-name-face) 7373 7375 (fontified t) 7375 7378 (fontified t face font-lock-keyword-face) 7378 7379 (fontified t) 7379 7383 (fontified t face font-lock-keyword-face) 7383 7385 (fontified t) 7385 7391 (fontified t face font-lock-variable-name-face) 7391 7394 (fontified t) 7394 7397 (fontified t face font-lock-keyword-face) 7397 7399 (fontified t) 7399 7401 (fontified t face font-lock-type-face) 7401 7405 (fontified t) 7405 7406 (fontified t syntax-table #1#) 7406 7407 (fontified t) 7407 7413 (fontified t face font-lock-type-face) 7413 7414 (fontified t) 7414 7419 (fontified t face font-lock-type-face) 7419 7421 (fontified t) 7421 7424 (fontified t face font-lock-constant-face) 7424 7426 (fontified t) 7426 7428 (fontified t face font-lock-constant-face) 7428 7430 (fontified t) 7430 7435 (fontified t face font-lock-type-face) 7435 7447 (fontified t) 7447 7451 (fontified t face font-lock-keyword-face) 7451 7476 (fontified t) 7476 7480 (fontified t face font-lock-keyword-face) 7480 7482 (fontified t) 7482 7483 (fontified t face font-lock-variable-name-face) 7483 7485 (fontified t) 7485 7494 (fontified t face font-lock-type-face) 7494 7495 (fontified t) 7495 7498 (fontified t face font-lock-keyword-face) 7498 7499 (fontified t) 7499 7505 (fontified t face font-lock-type-face) 7505 7518 (fontified t face font-lock-type-face) 7518 7520 (fontified t) 7520 7521 (fontified t face font-lock-variable-name-face) 7521 7525 (fontified t) 7525 7529 (fontified t) 7529 7531 (fontified t face font-lock-keyword-face) 7531 7532 (fontified t) 7532 7541 (fontified t face font-lock-function-name-face) 7541 7543 (fontified t) 7543 7546 (fontified t face font-lock-keyword-face) 7546 7547 (fontified t) 7547 7551 (fontified t face font-lock-keyword-face) 7551 7553 (fontified t) 7553 7556 (fontified t face font-lock-variable-name-face) 7556 7559 (fontified t) 7559 7562 (fontified t face font-lock-keyword-face) 7562 7564 (fontified t) 7564 7566 (fontified t face font-lock-type-face) 7566 7570 (fontified t) 7570 7571 (fontified t syntax-table #1#) 7571 7572 (fontified t) 7572 7573 (fontified t face font-lock-type-face) 7573 7576 (fontified t face font-lock-type-face) 7576 7577 (fontified t) 7577 7582 (fontified t face font-lock-type-face) 7582 7584 (fontified t) 7584 7587 (fontified t face font-lock-constant-face) 7587 7589 (fontified t) 7589 7591 (fontified t face font-lock-constant-face) 7591 7593 (fontified t) 7593 7598 (fontified t face font-lock-type-face) 7598 7602 (fontified t) 7602 7610 (fontified t) 7610 7615 (fontified t face font-lock-keyword-face) 7615 7616 (fontified t) 7616 7620 (fontified t face font-lock-keyword-face) 7620 7621 (fontified t) 7621 7633 (fontified t) 7633 7645 (fontified t) 7645 7647 (fontified t face font-lock-type-face) 7647 7652 (fontified t) 7652 7653 (fontified t syntax-table #1#) 7653 7654 (fontified t) 7654 7655 (fontified t face font-lock-type-face) 7655 7656 (fontified t face font-lock-type-face) 7656 7657 (fontified t) 7657 7662 (fontified t face font-lock-type-face) 7662 7664 (fontified t) 7664 7669 (fontified t face font-lock-type-face) 7669 7675 (fontified t) 7675 7680 (fontified t) 7680 7687 (fontified t) 7687 7690 (fontified t face font-lock-type-face) 7690 7695 (fontified t) 7695 7696 (fontified t syntax-table #1#) 7696 7697 (fontified t) 7697 7699 (fontified t face font-lock-type-face) 7699 7700 (fontified t) 7700 7705 (fontified t face font-lock-type-face) 7705 7707 (fontified t) 7707 7715 (fontified t face font-lock-type-face) 7715 7718 (fontified t) 7718 7720 (fontified t) 7720 7728 (fontified t)) . 1) (undo-tree-id4029 . 1053) (undo-tree-id4030 . -5572) (undo-tree-id4031 . -6374) (undo-tree-id4032 . -6374) (undo-tree-id4033 . -6374) (undo-tree-id4034 . -5572) (undo-tree-id4035 . -6374) (undo-tree-id4036 . -6374) (undo-tree-id4037 . -5572) (undo-tree-id4038 . -6374) (undo-tree-id4039 . -6683) (undo-tree-id4040 . -6683) (undo-tree-id4041 . -5572) (undo-tree-id4042 . -6683) (undo-tree-id4043 . -6683) (undo-tree-id4044 . -6683) (undo-tree-id4045 . -5572) (undo-tree-id4046 . -6683) (undo-tree-id4047 . -6683) (undo-tree-id4048 . -5572) (undo-tree-id4049 . -6683) (undo-tree-id4050 . -6683) (undo-tree-id4051 . -6683) (undo-tree-id4052 . -6683) (undo-tree-id4053 . -6683) (undo-tree-id4054 . -6683) (undo-tree-id4055 . -5572) (undo-tree-id4056 . -6683) (undo-tree-id4057 . -6683) (undo-tree-id4058 . -6683) (undo-tree-id4059 . -5572) (undo-tree-id4060 . -6683) (undo-tree-id4061 . -6683) (undo-tree-id4062 . -6683) (undo-tree-id4063 . -5572) (undo-tree-id4064 . -6683) (undo-tree-id4065 . -6683) (undo-tree-id4066 . -5572) (undo-tree-id4067 . -6683) (undo-tree-id4068 . -6683) (undo-tree-id4069 . -5572) (undo-tree-id4070 . -6682) (undo-tree-id4071 . -6682) (undo-tree-id4072 . -5572) (undo-tree-id4073 . -6682) (undo-tree-id4074 . -6682) (undo-tree-id4075 . -6682) (undo-tree-id4076 . -5572) (undo-tree-id4077 . -6682) (undo-tree-id4078 . -6682) (undo-tree-id4079 . -6682) (undo-tree-id4080 . -5572) (undo-tree-id4081 . -6682) (undo-tree-id4082 . -6682) (undo-tree-id4083 . -5572) (undo-tree-id4084 . -6682) (undo-tree-id4085 . -6682) (undo-tree-id4086 . -5572) (undo-tree-id4087 . -6700) (undo-tree-id4088 . -6682) (undo-tree-id4089 . -5572) (undo-tree-id4090 . -6700) (undo-tree-id4091 . -6700) (undo-tree-id4092 . -6682) (undo-tree-id4093 . -5572) (undo-tree-id4094 . -6700) (undo-tree-id4095 . -6700) (undo-tree-id4096 . -6682) (undo-tree-id4097 . -5572) (undo-tree-id4098 . -6700) (undo-tree-id4099 . -6682) (undo-tree-id4100 . -5572) (undo-tree-id4101 . -6700) (undo-tree-id4102 . -6682) (undo-tree-id4103 . -5572) (undo-tree-id4104 . -6703) (undo-tree-id4105 . -6703) (undo-tree-id4106 . -6680) (undo-tree-id4107 . -6681) (undo-tree-id4108 . -6591) (undo-tree-id4109 . -6592) (undo-tree-id4110 . -6530) (undo-tree-id4111 . -6531) (undo-tree-id4112 . -6702) (undo-tree-id4113 . -6700) (undo-tree-id4114 . -5572) (undo-tree-id4115 . -6702) (undo-tree-id4116 . -6702) (undo-tree-id4117 . -6700) (undo-tree-id4118 . -5572) (undo-tree-id4119 . -6702) (undo-tree-id4120 . -6702) (undo-tree-id4121 . -6700) (undo-tree-id4122 . -5572) (undo-tree-id4123 . -6702) (undo-tree-id4124 . -6700) (undo-tree-id4125 . -5572) (undo-tree-id4126 . -6702) (undo-tree-id4127 . -6700) (undo-tree-id4128 . -5572) (undo-tree-id4129 . -6703) (undo-tree-id4130 . -6702) (undo-tree-id4131 . -5572) (undo-tree-id4132 . -6703) (undo-tree-id4133 . -6703) (undo-tree-id4134 . -6702) (undo-tree-id4135 . -5572) (undo-tree-id4136 . -6703) (undo-tree-id4137 . -6703) (undo-tree-id4138 . -6702) (undo-tree-id4139 . -5572) (undo-tree-id4140 . -6703) (undo-tree-id4141 . -6702) (undo-tree-id4142 . -5572) (undo-tree-id4143 . -6703) (undo-tree-id4144 . -6702) (undo-tree-id4145 . -5572) (undo-tree-id4146 . -6703) (undo-tree-id4147 . -6703) (undo-tree-id4148 . -5572) (undo-tree-id4149 . -6703) (undo-tree-id4150 . -6703) (undo-tree-id4151 . -6703) (undo-tree-id4152 . -5572) (undo-tree-id4153 . -6703) (undo-tree-id4154 . -6703) (undo-tree-id4155 . -6703) (undo-tree-id4156 . -5572) (undo-tree-id4157 . -5572) (undo-tree-id4158 . -6703) (undo-tree-id4159 . -6703) (undo-tree-id4160 . -6703) (undo-tree-id4161 . -6703) (undo-tree-id4162 . -5572) (undo-tree-id4163 . -6703) (undo-tree-id4164 . -6703) (undo-tree-id4165 . -5572) 6704) nil (23765 3868 707873 954000) 0 nil]) ((#("                //println!(\"{:#?}\", &self);
" 0 16 (fontified t) 16 18 (fontified t face font-lock-comment-delimiter-face) 18 44 (fontified t face font-lock-comment-face)) . 6704) (undo-tree-id4166 . -27) (undo-tree-id4167 . -28) (undo-tree-id4168 . -22) (undo-tree-id4169 . -22) (undo-tree-id4170 . -22) (undo-tree-id4171 . -22) (undo-tree-id4172 . -22) (undo-tree-id4173 . -22) (undo-tree-id4174 . -22) (undo-tree-id4175 . -22) (undo-tree-id4176 . -22) 6726) nil (23765 3868 707901 188000) 0 nil]) ((#("{}" 0 1 (fontified t) 1 2 (fontified t)) . 6684) (undo-tree-id4177 . -1) (undo-tree-id4178 . -1) (undo-tree-id4179 . -1) (undo-tree-id4180 . 2) (undo-tree-id4181 . -1) (undo-tree-id4182 . 1) (undo-tree-id4183 . -1) (undo-tree-id4184 . 1) (undo-tree-id4185 . -2) (undo-tree-id4186 . -1) (undo-tree-id4187 . -1)) nil (23765 3868 707917 332000) 0 nil]) ((#("                    " 0 20 (fontified nil)) . 6685) (#("
" 0 1 (fontified t)) . -6685) 6684) nil (23765 3868 707920 687000) 0 nil]) ((#("else" 0 4 (fontified t face font-lock-keyword-face)) . 6683)) nil (23765 3868 707922 697000) 0 nil]) ((#("                        println!(\"Rejecting msg for: {}\", &msg_queue.redis_channel);
" 0 18 (fontified t) 18 24 (fontified t) 24 32 (fontified t face rust-builtin-formatting-macro-face) 32 33 (fontified t) 33 53 (fontified t face font-lock-string-face) 53 55 (fontified t face rust-string-interpolation-face) 55 56 (fontified t face font-lock-string-face) 56 85 (fontified t)) . 6690) (undo-tree-id4188 . -19) (undo-tree-id4189 . -19)) nil (23765 3868 707926 473000) 0 nil]) ((#("                        println!(\"Accepted msg for: {}\", &timeline);
" 0 10 (fontified t) 10 24 (fontified t) 24 32 (fontified t face rust-builtin-formatting-macro-face) 32 33 (fontified t) 33 52 (fontified t face font-lock-string-face) 52 54 (fontified t face rust-string-interpolation-face) 54 55 (fontified t face font-lock-string-face) 55 69 (fontified t)) . 6661) (undo-tree-id4190 . -23) (undo-tree-id4191 . -23) 6684 (t 23765 3746 97539 494000)) nil (23765 3868 707931 56000) 0 nil]) ((#("                " 0 16 (fontified nil)) . 6375) (6374 . 6391)) ((#("
                " 0 1 (fontified t) 1 17 (fontified nil)) . 6374) (undo-tree-id4019 . -1) (undo-tree-id4020 . -1) (undo-tree-id4021 . -1) (undo-tree-id4022 . -1) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) (undo-tree-id4025 . -17) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (6375 . 6391) (t 23765 3746 97539 494000)) (23765 3771 301429 965000) 0 nil]) ((1 . 7961) (#("//! Interfacing with Redis and stream the results on to the `StreamManager`
use crate::redis_cmd;
use crate::user::User;
use futures::stream::Stream;
use futures::{Async, Poll};
use log::info;
use regex::Regex;
use serde_json::Value;
use std::collections::{HashMap, VecDeque};
use std::io::{Read, Write};
use std::net::TcpStream;
use std::time::{Duration, Instant};
use tokio::io::{AsyncRead, Error};
use uuid::Uuid;

#[derive(Debug)]
struct MsgQueue {
    messages: VecDeque<Value>,
    last_polled_at: Instant,
    redis_channel: String,
}
impl MsgQueue {
    fn new(redis_channel: impl std::fmt::Display) -> Self {
        let redis_channel = redis_channel.to_string();
        MsgQueue {
            messages: VecDeque::new(),
            last_polled_at: Instant::now(),
            redis_channel,
        }
    }
}

/// The item that streams from Redis and is polled by the `StreamManger`
#[derive(Debug)]
pub struct Receiver {
    pubsub_connection: TcpStream,
    secondary_redis_connection: TcpStream,
    tl: String,
    pub user: User,
    manager_id: Uuid,
    msg_queues: HashMap<Uuid, MsgQueue>,
    clients_per_timeline: HashMap<String, i32>,
}
impl Default for Receiver {
    fn default() -> Self {
        Self::new()
    }
}
impl Receiver {
    pub fn new() -> Self {
        let pubsub_connection = TcpStream::connect(\"127.0.0.1:6379\").expect(\"Can connect to Redis\");
        pubsub_connection
            .set_read_timeout(Some(Duration::from_millis(10)))
            .expect(\"Can set read timeout for Redis connection\");
        let secondary_redis_connection =
            TcpStream::connect(\"127.0.0.1:6379\").expect(\"Can connect to Redis\");
        secondary_redis_connection
            .set_read_timeout(Some(Duration::from_millis(10)))
            .expect(\"Can set read timeout for Redis connection\");
        Self {
            pubsub_connection,
            secondary_redis_connection,
            tl: String::new(),
            user: User::public(),
            manager_id: Uuid::new_v4(),
            msg_queues: HashMap::new(),
            clients_per_timeline: HashMap::new(),
        }
    }

    /// Update the `StreamManager` that is currently polling the `Receiver`
    pub fn update(&mut self, id: Uuid, timeline: impl std::fmt::Display) {
        self.manager_id = id;
        self.tl = timeline.to_string();
    }

    /// Send a subscribe command to the Redis PubSub (if needed)
    pub fn maybe_subscribe(&mut self, tl: &str) {
        info!(\"Subscribing to {}\", &tl);

        let manager_id = self.manager_id;
        self.msg_queues.insert(manager_id, MsgQueue::new(tl));
        let current_clients = self
            .clients_per_timeline
            .entry(tl.to_string())
            .and_modify(|n| *n += 1)
            .or_insert(1);

        if *current_clients == 1 {
            let subscribe_cmd = redis_cmd::pubsub(\"subscribe\", tl);
            self.pubsub_connection
                .write_all(&subscribe_cmd)
                .expect(\"Can subscribe to Redis\");
            let set_subscribed_cmd = redis_cmd::set(format!(\"subscribed:timeline:{}\", tl), \"1\");
            self.secondary_redis_connection
                .write_all(&set_subscribed_cmd)
                .expect(\"Can set Redis\");
            info!(\"Now subscribed to: {:#?}\", &self.msg_queues);
        }
    }

    /// Drop any PubSub subscriptions that don't have active clients
    pub fn unsubscribe_from_empty_channels(&mut self) {
        let mut timelines_with_fewer_clients = Vec::new();

        // Keep only message queues that have been polled recently
        self.msg_queues.retain(|_id, msg_queue| {
            if msg_queue.last_polled_at.elapsed() < Duration::from_secs(30) {
                true
            } else {
                timelines_with_fewer_clients.push(msg_queue.redis_channel.clone());
                false
            }
        });

        // Record the lower number of clients subscribed to that channel
        for timeline in timelines_with_fewer_clients {
            let count_of_subscribed_clients = self
                .clients_per_timeline
                .entry(timeline.clone())
                .and_modify(|n| *n -= 1)
                .or_insert(0);
            // If no clients, unsubscribe from the channel
            if *count_of_subscribed_clients <= 0 {
                self.unsubscribe(&timeline);
            }
        }
    }

    /// Send an unsubscribe command to the Redis PubSub
    pub fn unsubscribe(&mut self, tl: &str) {
        let unsubscribe_cmd = redis_cmd::pubsub(\"unsubscribe\", tl);
        info!(\"Unsubscribing from {}\", &tl);
        self.pubsub_connection
            .write_all(&unsubscribe_cmd)
            .expect(\"Can unsubscribe from Redis\");
        let set_subscribed_cmd = redis_cmd::set(format!(\"subscribed:timeline:{}\", tl), \"0\");
        self.secondary_redis_connection
            .write_all(&set_subscribed_cmd)
            .expect(\"Can set Redis\");
        info!(\"Now subscribed only to: {:#?}\", &self.msg_queues);
    }
}
impl Stream for Receiver {
    type Item = Value;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<Value>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        info!(\"Being polled by: {}\", self.manager_id);
        let timeline = self.tl.clone();

        // Record current time as last polled time
        self.msg_queues
            .entry(self.manager_id)
            .and_modify(|msg_queue| msg_queue.last_polled_at = Instant::now());

        // Add any incomming messages to the back of the relevant `msg_queues`
        // NOTE: This could be more/other than the `msg_queue` currently being polled
        let mut async_stream = AsyncReadableStream(&mut self.pubsub_connection);
        if let Async::Ready(num_bytes_read) = async_stream.poll_read(&mut buffer)? {
            // capture everything between `{` and `}` as potential JSON
            let raw_redis_response = &String::from_utf8_lossy(&buffer[..num_bytes_read]);
            let json_regex = Regex::new(r\"(?P<json>\\{.*\\})\").expect(\"Hard-coded\");
            let timeline_regex = Regex::new(r\"timeline:(?P<timeline>.*?)\\r\").expect(\"Hard-codded\");
            if let Some(result) = json_regex.captures(raw_redis_response) {
                let timeline = timeline_regex.captures(raw_redis_response).unwrap()[\"timeline\"].to_string();
                let msg: Value = serde_json::from_str(&result[\"json\"].to_string().clone())?;
                for msg_queue in self.msg_queues.values_mut() {
                    if msg_queue.redis_channel == timeline {
                        msg_queue.messages.push_back(msg.clone());
                        println!(\"Accepted msg for: {}\", &timeline);
                    } else {
                        println!(\"Rejecting msg for: {}\", &msg_queue.redis_channel);
                    }
                }

                //println!(\"{:#?}\", &self);
            }
        }

        // If the `msg_queue` being polled has any new messages, return the first (oldest) one
        match self
            .msg_queues
            .entry(self.manager_id)
            .or_insert_with(|| MsgQueue::new(timeline))
            .messages
            .pop_front()
        {
            Some(value) => Ok(Async::Ready(Some(value))),
            _ => Ok(Async::NotReady),
        }
    }
}

impl Drop for Receiver {
    fn drop(&mut self) {
        let timeline = self.tl.clone();
        self.unsubscribe(&timeline);
    }
}

struct AsyncReadableStream<'a>(&'a mut TcpStream);

impl<'a> Read for AsyncReadableStream<'a> {
    fn read(&mut self, buffer: &mut [u8]) -> Result<usize, std::io::Error> {
        self.0.read(buffer)
    }
}

impl<'a> AsyncRead for AsyncReadableStream<'a> {
    fn poll_read(&mut self, buf: &mut [u8]) -> Poll<usize, std::io::Error> {
        match self.read(buf) {
            Ok(t) => Ok(Async::Ready(t)),
            Err(_) => Ok(Async::NotReady),
        }
    }
}
" 0 76 (fontified t face font-lock-doc-face) 76 79 (fontified t face font-lock-keyword-face) 79 80 (fontified t) 80 85 (fontified t face font-lock-keyword-face) 85 98 (fontified t) 98 101 (fontified t face font-lock-keyword-face) 101 102 (fontified t) 102 107 (fontified t face font-lock-keyword-face) 107 109 (fontified t) 109 113 (fontified t face font-lock-constant-face) 113 115 (fontified t) 115 119 (fontified t face font-lock-type-face) 119 121 (fontified t) 121 124 (fontified t face font-lock-keyword-face) 124 125 (fontified t) 125 132 (fontified t face font-lock-constant-face) 132 134 (fontified t) 134 140 (fontified t face font-lock-constant-face) 140 142 (fontified t) 142 148 (fontified t face font-lock-type-face) 148 150 (fontified t) 150 153 (fontified t face font-lock-keyword-face) 153 154 (fontified t) 154 161 (fontified t face font-lock-constant-face) 161 164 (fontified t) 164 169 (fontified t face font-lock-type-face) 169 171 (fontified t) 171 175 (fontified t face font-lock-type-face) 175 178 (fontified t) 178 181 (fontified t face font-lock-keyword-face) 181 182 (fontified t) 182 185 (fontified t face font-lock-constant-face) 185 193 (fontified t) 193 196 (fontified t face font-lock-keyword-face) 196 197 (fontified t) 197 202 (fontified t face font-lock-constant-face) 202 204 (fontified t) 204 209 (fontified t face font-lock-type-face) 209 211 (fontified t) 211 214 (fontified t face font-lock-keyword-face) 214 215 (fontified t) 215 225 (fontified t face font-lock-constant-face) 225 227 (fontified t) 227 232 (fontified t face font-lock-type-face) 232 234 (fontified t) 234 237 (fontified t face font-lock-keyword-face) 237 238 (fontified t) 238 241 (fontified t face font-lock-constant-face) 241 243 (fontified t) 243 254 (fontified t face font-lock-constant-face) 254 257 (fontified t) 257 264 (fontified t face font-lock-type-face) 264 266 (fontified t) 266 274 (fontified t face font-lock-type-face) 274 277 (fontified t) 277 280 (fontified t face font-lock-keyword-face) 280 281 (fontified t) 281 284 (fontified t face font-lock-constant-face) 284 286 (fontified t) 286 288 (fontified t face font-lock-constant-face) 288 291 (fontified t) 291 295 (fontified t face font-lock-type-face) 295 297 (fontified t) 297 302 (fontified t face font-lock-type-face) 302 305 (fontified t) 305 308 (fontified t face font-lock-keyword-face) 308 309 (fontified t) 309 312 (fontified t face font-lock-constant-face) 312 314 (fontified t) 314 317 (fontified t face font-lock-constant-face) 317 319 (fontified t) 319 328 (fontified t face font-lock-type-face) 328 330 (fontified t) 330 333 (fontified t face font-lock-keyword-face) 333 334 (fontified t) 334 337 (fontified t face font-lock-constant-face) 337 339 (fontified t) 339 343 (fontified t face font-lock-constant-face) 343 346 (fontified t) 346 354 (fontified t face font-lock-type-face) 354 356 (fontified t) 356 363 (fontified t face font-lock-type-face) 363 366 (fontified t) 366 369 (fontified t face font-lock-keyword-face) 369 370 (fontified t) 370 375 (fontified t face font-lock-constant-face) 375 377 (fontified t) 377 379 (fontified t face font-lock-constant-face) 379 382 (fontified t) 382 391 (fontified t face font-lock-type-face) 391 393 (fontified t) 393 398 (fontified t face font-lock-type-face) 398 401 (fontified t) 401 404 (fontified t face font-lock-keyword-face) 404 405 (fontified t) 405 409 (fontified t face font-lock-constant-face) 409 411 (fontified t) 411 415 (fontified t face font-lock-type-face) 415 418 (fontified t) 418 434 (fontified t face font-lock-preprocessor-face) 434 435 (fontified t) 435 441 (fontified t face font-lock-keyword-face) 441 442 (fontified t) 442 450 (fontified t face font-lock-type-face) 450 457 (fontified t) 457 465 (fontified t face font-lock-variable-name-face) 465 467 (fontified t) 467 475 (fontified t face font-lock-type-face) 475 476 (fontified t) 476 481 (fontified t face font-lock-type-face) 481 488 (fontified t) 488 500 (fontified t face font-lock-variable-name-face) 500 502 (fontified t face font-lock-variable-name-face) 502 504 (fontified t) 504 511 (fontified t face font-lock-type-face) 511 513 (fontified t) 513 517 (fontified t) 517 530 (fontified t face font-lock-variable-name-face) 530 532 (fontified t) 532 538 (fontified t face font-lock-type-face) 538 542 (fontified t) 542 546 (fontified t face font-lock-keyword-face) 546 547 (fontified t) 547 555 (fontified t face font-lock-type-face) 555 562 (fontified t) 562 564 (fontified t face font-lock-keyword-face) 564 565 (fontified t) 565 568 (fontified t face font-lock-function-name-face) 568 569 (fontified t) 569 582 (fontified t face font-lock-variable-name-face) 582 584 (fontified t) 584 588 (fontified t face font-lock-keyword-face) 588 589 (fontified t) 589 592 (fontified t face font-lock-constant-face) 592 594 (fontified t) 594 597 (fontified t face font-lock-constant-face) 597 599 (fontified t) 599 606 (fontified t face font-lock-type-face) 606 609 (fontified t) 609 610 (fontified t syntax-table #1#) 610 611 (fontified t) 611 615 (fontified t face font-lock-type-face) 615 626 (fontified t) 626 629 (fontified t face font-lock-keyword-face) 629 630 (fontified t) 630 643 (fontified t face font-lock-variable-name-face) 643 681 (fontified t) 681 689 (fontified t face font-lock-type-face) 689 704 (fontified t) 704 712 (fontified t face font-lock-variable-name-face) 712 714 (fontified t) 714 722 (fontified t face font-lock-type-face) 722 743 (fontified t) 743 757 (fontified t face font-lock-variable-name-face) 757 759 (fontified t) 759 766 (fontified t face font-lock-type-face) 766 821 (fontified t) 821 894 (fontified t face font-lock-doc-face) 894 910 (fontified t face font-lock-preprocessor-face) 910 911 (fontified t) 911 914 (fontified t face font-lock-keyword-face) 914 915 (fontified t) 915 921 (fontified t face font-lock-keyword-face) 921 922 (fontified t) 922 930 (fontified t face font-lock-type-face) 930 937 (fontified t) 937 954 (fontified t face font-lock-variable-name-face) 954 956 (fontified t) 956 965 (fontified t face font-lock-type-face) 965 971 (fontified t) 971 997 (fontified t face font-lock-variable-name-face) 997 999 (fontified t) 999 1008 (fontified t face font-lock-type-face) 1008 1013 (fontified t) 1013 1014 (fontified t) 1014 1016 (fontified t face font-lock-variable-name-face) 1016 1018 (fontified t) 1018 1024 (fontified t face font-lock-type-face) 1024 1026 (fontified t) 1026 1030 (fontified t) 1030 1033 (fontified t face font-lock-keyword-face) 1033 1034 (fontified t) 1034 1038 (fontified t face font-lock-variable-name-face) 1038 1040 (fontified t) 1040 1044 (fontified t face font-lock-type-face) 1044 1050 (fontified t) 1050 1060 (fontified t face font-lock-variable-name-face) 1060 1062 (fontified t) 1062 1066 (fontified t face font-lock-type-face) 1066 1072 (fontified t) 1072 1082 (fontified t face font-lock-variable-name-face) 1082 1084 (fontified t) 1084 1091 (fontified t face font-lock-type-face) 1091 1092 (fontified t) 1092 1096 (fontified t face font-lock-type-face) 1096 1098 (fontified t) 1098 1106 (fontified t face font-lock-type-face) 1106 1113 (fontified t) 1113 1133 (fontified t face font-lock-variable-name-face) 1133 1135 (fontified t) 1135 1142 (fontified t face font-lock-type-face) 1142 1143 (fontified t) 1143 1149 (fontified t face font-lock-type-face) 1149 1151 (fontified t) 1151 1154 (fontified t face font-lock-type-face) 1154 1159 (fontified t) 1159 1163 (fontified t face font-lock-keyword-face) 1163 1164 (fontified t) 1164 1171 (fontified t face font-lock-type-face) 1171 1172 (fontified t) 1172 1175 (fontified t face font-lock-keyword-face) 1175 1176 (fontified t) 1176 1184 (fontified t face font-lock-type-face) 1184 1191 (fontified t) 1191 1193 (fontified t face font-lock-keyword-face) 1193 1194 (fontified t) 1194 1201 (fontified t face font-lock-function-name-face) 1201 1205 (fontified t) 1205 1206 (fontified t syntax-table #1#) 1206 1207 (fontified t) 1207 1211 (fontified t face font-lock-type-face) 1211 1222 (fontified t) 1222 1226 (fontified t face font-lock-type-face) 1226 1242 (fontified t) 1242 1246 (fontified t face font-lock-keyword-face) 1246 1247 (fontified t) 1247 1255 (fontified t face font-lock-type-face) 1255 1262 (fontified t) 1262 1265 (fontified t face font-lock-keyword-face) 1265 1266 (fontified t) 1266 1268 (fontified t face font-lock-keyword-face) 1268 1269 (fontified t) 1269 1272 (fontified t face font-lock-function-name-face) 1272 1276 (fontified t) 1276 1277 (fontified t syntax-table #1#) 1277 1278 (fontified t) 1278 1282 (fontified t face font-lock-type-face) 1282 1293 (fontified t) 1293 1296 (fontified t face font-lock-keyword-face) 1296 1297 (fontified t) 1297 1314 (fontified t face font-lock-variable-name-face) 1314 1317 (fontified t) 1317 1326 (fontified t face font-lock-type-face) 1326 1336 (fontified t) 1336 1352 (fontified t face font-lock-string-face) 1352 1361 (fontified t) 1361 1383 (fontified t face font-lock-string-face) 1383 1442 (fontified t) 1442 1446 (fontified t face font-lock-type-face) 1446 1447 (fontified t) 1447 1455 (fontified t face font-lock-type-face) 1455 1495 (fontified t) 1495 1526 (fontified t face font-lock-string-face) 1526 1538 (fontified t face font-lock-string-face) 1538 1541 (fontified t) 3681 3682 (syntax-table #1#) 4317 4318 (syntax-table #1#) 4961 4966 (face font-lock-preprocessor-face) 4967 4998 (face font-lock-string-face) 5001 5005 (face font-lock-keyword-face) 5027 5031 (face font-lock-keyword-face) 5032 5038 (face font-lock-type-face) 5039 5042 (face font-lock-keyword-face) 5043 5051 (face font-lock-type-face) 5054 5058 (fontified t) 5058 5062 (fontified t face font-lock-keyword-face) 5062 5063 (fontified t) 5063 5067 (fontified t face font-lock-type-face) 5067 5070 (fontified t) 5070 5075 (fontified t face font-lock-type-face) 5075 5081 (fontified t) 5081 5085 (fontified t face font-lock-keyword-face) 5085 5086 (fontified t) 5086 5091 (fontified t face font-lock-type-face) 5091 5094 (fontified t) 5094 5099 (fontified t face font-lock-type-face) 5099 5106 (fontified t) 5106 5108 (fontified t face font-lock-keyword-face) 5108 5109 (fontified t) 5109 5113 (fontified t face font-lock-function-name-face) 5113 5115 (fontified t) 5115 5118 (fontified t face font-lock-keyword-face) 5118 5119 (fontified t) 5119 5123 (fontified t face font-lock-keyword-face) 5123 5126 (fontified t) 5126 5127 (syntax-table #1# fontified t) 5127 5128 (fontified t) 5128 5132 (fontified t face font-lock-type-face) 5132 5133 (fontified t) 5133 5139 (fontified t face font-lock-type-face) 5139 5140 (fontified t) 5140 5145 (fontified t face font-lock-type-face) 5145 5148 (fontified t) 5148 5152 (fontified t face font-lock-type-face) 5152 5154 (fontified t) 5154 5159 (fontified t face font-lock-type-face) 5159 5171 (fontified t) 5171 5174 (fontified t face font-lock-keyword-face) 5174 5175 (fontified t) 5175 5178 (fontified t face font-lock-keyword-face) 5178 5179 (fontified t) 5179 5185 (fontified t face font-lock-variable-name-face) 5185 5188 (fontified t) 5188 5192 (fontified t face font-lock-preprocessor-face) 5192 5213 (fontified t) 5213 5218 (fontified t face font-lock-preprocessor-face) 5218 5219 (fontified t) 5219 5240 (fontified t face font-lock-string-face) 5240 5242 (fontified t) 5242 5246 (fontified t face font-lock-keyword-face) 5246 5268 (fontified t) 5268 5271 (fontified t face font-lock-keyword-face) 5271 5272 (fontified t) 5272 5280 (fontified t face font-lock-variable-name-face) 5280 5283 (fontified t) 5283 5287 (fontified t face font-lock-keyword-face) 5287 5309 (fontified t) 5309 5312 (fontified t face font-lock-comment-delimiter-face) 5312 5352 (fontified t face font-lock-comment-face) 5352 5360 (fontified t) 5360 5364 (fontified t face font-lock-keyword-face) 5364 5395 (fontified t) 5395 5399 (fontified t face font-lock-keyword-face) 5399 5475 (fontified t) 5475 5482 (fontified t face font-lock-type-face) 5482 5501 (fontified t) 5501 5504 (fontified t face font-lock-comment-delimiter-face) 5504 5518 (fontified t face font-lock-comment-face) 5518 5554 (fontified t face font-lock-comment-face) 5554 5572 (face font-lock-comment-face fontified t) 5572 5580 (fontified t) 5580 5583 (fontified t face font-lock-comment-delimiter-face) 5583 5658 (fontified t face font-lock-comment-face) 5658 5666 (fontified t) 5666 5669 (fontified t face font-lock-keyword-face) 5669 5670 (fontified t) 5670 5673 (fontified t face font-lock-keyword-face) 5673 5674 (fontified t) 5674 5686 (fontified t face font-lock-variable-name-face) 5686 5689 (fontified t) 5689 5708 (fontified t face font-lock-type-face) 5708 5710 (fontified t) 5710 5713 (fontified t face font-lock-keyword-face) 5713 5714 (fontified t) 5714 5718 (fontified t face font-lock-keyword-face) 5718 5747 (fontified t) 5747 5749 (fontified t face font-lock-keyword-face) 5749 5750 (fontified t) 5750 5753 (fontified t face font-lock-keyword-face) 5753 5754 (fontified t) 5754 5759 (fontified t face font-lock-type-face) 5759 5761 (fontified t) 5761 5766 (fontified t face font-lock-type-face) 5766 5809 (fontified t) 5809 5812 (fontified t face font-lock-keyword-face) 5812 5820 (fontified t) 5820 5821 (fontified t face rust-question-mark-face) 5821 5836 (fontified t) 5836 5839 (fontified t face font-lock-comment-delimiter-face) 5839 5896 (fontified t face font-lock-comment-face) 5896 5907 (fontified t) 5907 5908 (fontified t rear-nonsticky t) 5908 5911 (fontified t face font-lock-keyword-face) 5911 5912 (fontified t) 5912 5930 (fontified t face font-lock-variable-name-face) 5930 5933 (fontified t) 5933 5934 (fontified t) 5934 5940 (fontified t face font-lock-type-face) 5940 5983 (fontified t) 5983 5984 (rear-nonsticky t fontified t) 5984 5985 (fontified t) 5985 5986 (fontified t) 5986 5998 (fontified t) 5998 6001 (fontified t face font-lock-keyword-face) 6001 6002 (fontified t) 6002 6012 (fontified t face font-lock-variable-name-face) 6012 6015 (fontified t) 6015 6020 (fontified t face font-lock-type-face) 6020 6026 (fontified t) 6026 6027 (fontified t syntax-table #2# face font-lock-string-face) 6027 6044 (fontified t face font-lock-string-face) 6044 6045 (fontified t syntax-table #3# face font-lock-string-face) 6045 6054 (fontified t) 6054 6055 (fontified t face font-lock-string-face) 6055 6056 (fontified t face font-lock-string-face) 6056 6066 (fontified t face font-lock-string-face) 6066 6068 (fontified t) 6068 6069 (fontified t) 6069 6081 (fontified t) 6081 6084 (fontified t face font-lock-keyword-face) 6084 6085 (fontified t) 6085 6099 (fontified t face font-lock-variable-name-face) 6099 6102 (fontified t) 6102 6107 (fontified t face font-lock-type-face) 6107 6112 (fontified t) 6112 6113 (fontified t) 6113 6114 (syntax-table #2# fontified t face font-lock-string-face) 6114 6115 (fontified t face font-lock-string-face) 6115 6123 (fontified t face font-lock-string-face) 6123 6124 (rear-nonsticky t fontified t face font-lock-string-face) 6124 6136 (fontified t face font-lock-string-face) 6136 6140 (fontified t face font-lock-string-face) 6140 6142 (fontified t face font-lock-string-face) 6142 6143 (fontified t face font-lock-string-face) 6143 6144 (syntax-table #3# fontified t face font-lock-string-face) 6144 6152 (fontified t) 6152 6153 (fontified t) 6153 6156 (fontified t face font-lock-string-face) 6156 6157 (fontified t face font-lock-string-face) 6157 6166 (fontified t face font-lock-string-face) 6166 6168 (fontified t) 6168 6169 (fontified t) 6169 6181 (fontified t) 6181 6183 (fontified t face font-lock-keyword-face) 6183 6184 (fontified t) 6184 6187 (fontified t face font-lock-keyword-face) 6187 6188 (fontified t) 6188 6192 (fontified t face font-lock-type-face) 6192 6223 (fontified t) 6223 6241 (fontified t) 6241 6244 (fontified t) 6244 6245 (fontified t) 6245 6261 (fontified t) 6261 6264 (fontified t face font-lock-keyword-face) 6264 6265 (fontified t) 6265 6273 (fontified t face font-lock-variable-name-face) 6273 6275 (fontified t) 6275 6276 (fontified t) 6276 6291 (fontified t) 6291 6299 (fontified t) 6299 6300 (fontified t) 6300 6318 (fontified t) 6318 6319 (fontified t) 6319 6326 (fontified t) 6326 6328 (fontified t) 6328 6329 (fontified t) 6329 6330 (fontified t face font-lock-string-face) 6330 6338 (fontified t face font-lock-string-face) 6338 6339 (fontified t face font-lock-string-face) 6339 6350 (fontified t) 6350 6353 (fontified t) 6353 6354 (fontified t) 6354 6370 (fontified t) 6370 6373 (fontified t face font-lock-keyword-face) 6373 6374 (fontified t) 6374 6377 (fontified t face font-lock-variable-name-face) 6377 6379 (fontified t) 6379 6384 (fontified t face font-lock-type-face) 6384 6387 (fontified t) 6387 6397 (fontified t face font-lock-constant-face) 6397 6416 (fontified t) 6416 6417 (fontified t face font-lock-string-face) 6417 6421 (fontified t face font-lock-string-face) 6421 6422 (fontified t face font-lock-string-face) 6422 6444 (fontified t) 6444 6445 (fontified t face rust-question-mark-face) 6445 6463 (fontified t) 6463 6466 (fontified t face font-lock-keyword-face) 6466 6472 (fontified t) 6472 6477 (fontified t) 6477 6479 (fontified t face font-lock-keyword-face) 6479 6480 (fontified t) 6480 6484 (fontified t face font-lock-keyword-face) 6484 6491 (fontified t) 6491 6498 (fontified t) 6498 6511 (fontified t) 6511 6513 (fontified t) 6513 6531 (fontified t) 6531 6533 (fontified t face font-lock-keyword-face) 6533 6568 (fontified t) 6568 6572 (fontified t) 6572 6596 (fontified t) 6596 6603 (fontified t) 6603 6613 (fontified t) 6613 6639 (fontified t) 6639 6663 (fontified t) 6663 6669 (fontified t face rust-builtin-formatting-macro-face) 6669 6671 (fontified t face rust-builtin-formatting-macro-face) 6671 6672 (fontified t) 6672 6673 (fontified t face font-lock-string-face) 6673 6681 (fontified t face font-lock-string-face) 6681 6686 (fontified t face font-lock-string-face) 6686 6689 (fontified t face font-lock-string-face) 6689 6691 (fontified t face font-lock-string-face) 6691 6693 (fontified t face rust-string-interpolation-face) 6693 6694 (fontified t face font-lock-string-face) 6694 6706 (fontified t) 6706 6708 (fontified t) 6708 6730 (fontified t) 6730 6734 (fontified t face font-lock-keyword-face) 6734 6738 (fontified t) 6738 6746 (fontified t) 6746 6753 (fontified t) 6753 6761 (fontified t) 6761 6769 (fontified t face rust-builtin-formatting-macro-face) 6769 6770 (fontified t) 6770 6771 (fontified t face font-lock-string-face) 6771 6780 (fontified t face font-lock-string-face) 6780 6785 (fontified t face font-lock-string-face) 6785 6788 (fontified t face font-lock-string-face) 6788 6790 (fontified t face font-lock-string-face) 6790 6792 (fontified t face rust-string-interpolation-face) 6792 6793 (fontified t face font-lock-string-face) 6793 6822 (fontified t) 6822 6844 (fontified t) 6844 6854 (fontified t) 6854 6862 (fontified t) 6862 6863 (fontified t) 6863 6879 (fontified t) 6879 6881 (fontified t face font-lock-comment-delimiter-face) 6881 6891 (fontified t face font-lock-comment-face) 6891 6894 (fontified t face font-lock-comment-face) 6894 6895 (fontified t face font-lock-comment-face) 6895 6896 (fontified t face font-lock-comment-face) 6896 6907 (fontified t face font-lock-comment-face) 6907 6940 (fontified t) 6940 6943 (fontified t face font-lock-comment-delimiter-face) 6943 7011 (fontified t face font-lock-comment-face) 7011 7027 (fontified t face font-lock-comment-face) 7027 7035 (fontified t) 7035 7040 (fontified t face font-lock-keyword-face) 7040 7041 (fontified t) 7041 7045 (fontified t face font-lock-keyword-face) 7045 7072 (fontified t) 7072 7089 (fontified t) 7089 7093 (fontified t face font-lock-keyword-face) 7093 7106 (fontified t) 7106 7137 (fontified t) 7137 7139 (fontified t face font-lock-type-face) 7139 7145 (fontified t face font-lock-type-face) 7145 7162 (fontified t) 7162 7208 (fontified t) 7208 7209 (fontified t) 7209 7231 (fontified t) 7231 7235 (fontified t face font-lock-type-face) 7235 7244 (fontified t) 7244 7245 (fontified t syntax-table #1#) 7245 7246 (fontified t) 7246 7248 (fontified t face font-lock-type-face) 7248 7249 (fontified t) 7249 7254 (fontified t face font-lock-type-face) 7254 7256 (fontified t) 7256 7261 (fontified t face font-lock-type-face) 7261 7262 (fontified t) 7262 7266 (fontified t face font-lock-type-face) 7266 7292 (fontified t) 7292 7293 (fontified t syntax-table #1#) 7293 7294 (fontified t) 7294 7296 (fontified t face font-lock-type-face) 7296 7297 (fontified t) 7297 7302 (fontified t face font-lock-type-face) 7302 7304 (fontified t) 7304 7312 (fontified t face font-lock-type-face) 7312 7322 (fontified t) 7322 7325 (fontified t) 7325 7334 (fontified t) 7334 7338 (fontified t face font-lock-keyword-face) 7338 7339 (fontified t) 7339 7343 (fontified t face font-lock-type-face) 7343 7344 (fontified t) 7344 7347 (fontified t face font-lock-keyword-face) 7347 7348 (fontified t) 7348 7356 (fontified t face font-lock-type-face) 7356 7359 (fontified t) 7359 7362 (fontified t) 7362 7363 (fontified t) 7363 7365 (face font-lock-keyword-face fontified t) 7365 7366 (fontified t) 7366 7370 (face font-lock-function-name-face fontified t) 7370 7372 (fontified t) 7372 7375 (face font-lock-keyword-face fontified t) 7375 7376 (fontified t) 7376 7380 (face font-lock-keyword-face fontified t) 7380 7384 (fontified t) 7384 7392 (fontified t) 7392 7395 (fontified t face font-lock-keyword-face) 7395 7396 (fontified t) 7396 7404 (fontified t face font-lock-variable-name-face) 7404 7407 (fontified t) 7407 7411 (fontified t face font-lock-keyword-face) 7411 7432 (fontified t) 7432 7436 (fontified t face font-lock-keyword-face) 7436 7470 (fontified t) 7470 7476 (fontified t face font-lock-keyword-face) 7476 7477 (fontified t) 7477 7496 (fontified t face font-lock-type-face) 7496 7497 (fontified t) 7497 7498 (fontified t) 7498 7499 (fontified t face font-lock-variable-name-face) 7499 7500 (fontified t) 7500 7503 (fontified t) 7503 7504 (fontified t face font-lock-variable-name-face) 7504 7505 (fontified t) 7505 7508 (fontified t face font-lock-keyword-face) 7508 7509 (fontified t) 7509 7518 (fontified t face font-lock-type-face) 7518 7522 (fontified t) 7522 7526 (fontified t face font-lock-keyword-face) 7526 7527 (fontified t) 7527 7528 (fontified t) 7528 7529 (fontified t face font-lock-variable-name-face) 7529 7530 (fontified t) 7530 7531 (fontified t) 7531 7535 (fontified t face font-lock-type-face) 7535 7536 (fontified t) 7536 7539 (fontified t face font-lock-keyword-face) 7539 7540 (fontified t) 7540 7559 (fontified t face font-lock-type-face) 7559 7560 (fontified t) 7560 7561 (fontified t) 7561 7562 (fontified t face font-lock-variable-name-face) 7562 7563 (fontified t) 7563 7566 (fontified t) 7566 7570 (fontified t) 7570 7572 (fontified t face font-lock-keyword-face) 7572 7573 (fontified t) 7573 7577 (fontified t face font-lock-function-name-face) 7577 7579 (fontified t) 7579 7582 (fontified t face font-lock-keyword-face) 7582 7583 (fontified t) 7583 7587 (fontified t face font-lock-keyword-face) 7587 7589 (fontified t) 7589 7595 (fontified t face font-lock-variable-name-face) 7595 7598 (fontified t) 7598 7601 (fontified t face font-lock-keyword-face) 7601 7603 (fontified t) 7603 7605 (fontified t face font-lock-type-face) 7605 7606 (fontified t) 7606 7609 (fontified t) 7609 7610 (fontified t syntax-table #1#) 7610 7611 (fontified t) 7611 7617 (fontified t face font-lock-type-face) 7617 7618 (fontified t) 7618 7623 (fontified t face font-lock-type-face) 7623 7625 (fontified t) 7625 7628 (fontified t face font-lock-constant-face) 7628 7630 (fontified t) 7630 7632 (fontified t face font-lock-constant-face) 7632 7634 (fontified t) 7634 7639 (fontified t face font-lock-type-face) 7639 7640 (fontified t) 7640 7643 (fontified t) 7643 7651 (fontified t) 7651 7655 (fontified t face font-lock-keyword-face) 7655 7662 (fontified t) 7662 7671 (fontified t) 7671 7680 (fontified t) 7680 7684 (fontified t face font-lock-keyword-face) 7684 7685 (fontified t) 7685 7686 (fontified t) 7686 7687 (fontified t face font-lock-variable-name-face) 7687 7688 (fontified t) 7688 7689 (fontified t) 7689 7698 (fontified t face font-lock-type-face) 7698 7699 (fontified t) 7699 7702 (fontified t face font-lock-keyword-face) 7702 7703 (fontified t) 7703 7709 (fontified t face font-lock-type-face) 7709 7722 (fontified t face font-lock-type-face) 7722 7723 (fontified t) 7723 7724 (fontified t) 7724 7725 (fontified t face font-lock-variable-name-face) 7725 7726 (fontified t) 7726 7729 (fontified t) 7729 7733 (fontified t) 7733 7735 (fontified t face font-lock-keyword-face) 7735 7736 (fontified t) 7736 7745 (fontified t face font-lock-function-name-face) 7745 7747 (fontified t) 7747 7750 (fontified t face font-lock-keyword-face) 7750 7751 (fontified t) 7751 7755 (fontified t face font-lock-keyword-face) 7755 7757 (fontified t) 7757 7760 (fontified t face font-lock-variable-name-face) 7760 7763 (fontified t) 7763 7766 (fontified t face font-lock-keyword-face) 7766 7768 (fontified t) 7768 7770 (fontified t face font-lock-type-face) 7770 7774 (fontified t) 7774 7775 (fontified t syntax-table #1#) 7775 7776 (fontified t) 7776 7780 (fontified t face font-lock-type-face) 7780 7781 (fontified t) 7781 7786 (fontified t face font-lock-type-face) 7786 7788 (fontified t) 7788 7791 (fontified t face font-lock-constant-face) 7791 7793 (fontified t) 7793 7795 (fontified t face font-lock-constant-face) 7795 7797 (fontified t) 7797 7802 (fontified t face font-lock-type-face) 7802 7803 (fontified t) 7803 7814 (fontified t) 7814 7819 (fontified t face font-lock-keyword-face) 7819 7820 (fontified t) 7820 7824 (fontified t face font-lock-keyword-face) 7824 7825 (fontified t) 7825 7837 (fontified t) 7837 7849 (fontified t) 7849 7851 (fontified t face font-lock-type-face) 7851 7856 (fontified t) 7856 7857 (fontified t syntax-table #1#) 7857 7858 (fontified t) 7858 7859 (fontified t face font-lock-type-face) 7859 7860 (fontified t face font-lock-type-face) 7860 7861 (fontified t) 7861 7866 (fontified t face font-lock-type-face) 7866 7868 (fontified t) 7868 7873 (fontified t face font-lock-type-face) 7873 7879 (fontified t) 7879 7884 (fontified t) 7884 7891 (fontified t) 7891 7894 (face font-lock-type-face fontified t) 7894 7899 (fontified t) 7899 7900 (syntax-table #1# fontified t) 7900 7901 (fontified t) 7901 7903 (face font-lock-type-face fontified t) 7903 7904 (fontified t) 7904 7909 (face font-lock-type-face fontified t) 7909 7911 (fontified t) 7911 7919 (face font-lock-type-face fontified t) 7919 7922 (fontified t)) . 1) (undo-tree-id3750 . -6169) (undo-tree-id3751 . 1587) (undo-tree-id3752 . -6169) (undo-tree-id3753 . 1771) (undo-tree-id3754 . -6169) (undo-tree-id3755 . -6169) (undo-tree-id3756 . -6275) (undo-tree-id3757 . -6352) (undo-tree-id3758 . -5658) (undo-tree-id3759 . -6169) (undo-tree-id3760 . -6169) (undo-tree-id3761 . -6169) (undo-tree-id3762 . -5054) (undo-tree-id3763 . -6169) (undo-tree-id3764 . -6169) (undo-tree-id3765 . -5054) (undo-tree-id3766 . -6223) (undo-tree-id3767 . -6222) (undo-tree-id3768 . -5054) (undo-tree-id3769 . -6223) (undo-tree-id3770 . -6223) (undo-tree-id3771 . -6223) (undo-tree-id3772 . -6223) (undo-tree-id3773 . -5658) (undo-tree-id3774 . -6223) (undo-tree-id3775 . -6169) (undo-tree-id3776 . -6169) (undo-tree-id3777 . -6169) (undo-tree-id3778 . -5658) (undo-tree-id3779 . -6169) (undo-tree-id3780 . -6169) (undo-tree-id3781 . -5658) (undo-tree-id3782 . -6169) (undo-tree-id3783 . -5986) (undo-tree-id3784 . -6169) (undo-tree-id3785 . -6169) (undo-tree-id3786 . -5658) (undo-tree-id3787 . -6169) (undo-tree-id3788 . -6169) (undo-tree-id3789 . -5658) (undo-tree-id3790 . -6169) (undo-tree-id3791 . -6169) (undo-tree-id3792 . -5658) (undo-tree-id3793 . -6169) (undo-tree-id3794 . -6169) (undo-tree-id3795 . -5658) (undo-tree-id3796 . -6169) (undo-tree-id3797 . -6169) (undo-tree-id3798 . -5658) (undo-tree-id3799 . -6169) (undo-tree-id3800 . -6169) (undo-tree-id3801 . -5658) (undo-tree-id3802 . -6169) (undo-tree-id3803 . -6169) (undo-tree-id3804 . -5658) (undo-tree-id3805 . -6169) (undo-tree-id3806 . -6169) (undo-tree-id3807 . -5658) (undo-tree-id3808 . -6169) (undo-tree-id3809 . -6169) (undo-tree-id3810 . -5658) (undo-tree-id3811 . -6169) (undo-tree-id3812 . -6169) (undo-tree-id3813 . -5658) (undo-tree-id3814 . -6169) (undo-tree-id3815 . -5658) (undo-tree-id3816 . -6169) (undo-tree-id3817 . -6352) (undo-tree-id3818 . -6169) (undo-tree-id3819 . -6169) (undo-tree-id3820 . -5658) (undo-tree-id3821 . -6169) (undo-tree-id3822 . -6169) (undo-tree-id3823 . -6169) (undo-tree-id3824 . -6169) (undo-tree-id3825 . -5658) (undo-tree-id3826 . -6370) (undo-tree-id3827 . -6373) (undo-tree-id3828 . -6352) (undo-tree-id3829 . -6354) (undo-tree-id3830 . -6351) (undo-tree-id3831 . -6352) (undo-tree-id3832 . -6370) (undo-tree-id3833 . -6373) (undo-tree-id3834 . -6245) (undo-tree-id3835 . -6169) (undo-tree-id3836 . -5658) (undo-tree-id3837 . -6354) (undo-tree-id3838 . -6245) (undo-tree-id3839 . -5658) (undo-tree-id3840 . -6245) (undo-tree-id3841 . -6354) (undo-tree-id3842 . -5658) (undo-tree-id3843 . -6352) (undo-tree-id3844 . -6245) (undo-tree-id3845 . -5658) (undo-tree-id3846 . -6351) (undo-tree-id3847 . -6352) (undo-tree-id3848 . -6351) (undo-tree-id3849 . -6352) (undo-tree-id3850 . -6351) (undo-tree-id3851 . -6352) (undo-tree-id3852 . -6351) (undo-tree-id3853 . -6352) (undo-tree-id3854 . -6338) (undo-tree-id3855 . -6339) (undo-tree-id3856 . -6338) (undo-tree-id3857 . -6339) (undo-tree-id3858 . -6351) (undo-tree-id3859 . -6352) (undo-tree-id3860 . -6351) (undo-tree-id3861 . -6352) (undo-tree-id3862 . -6350) (undo-tree-id3863 . -6351) (undo-tree-id3864 . -6353) (undo-tree-id3865 . -6352) (undo-tree-id3866 . -5658) (undo-tree-id3867 . -6352) (undo-tree-id3868 . -6352) (undo-tree-id3869 . -5658) (undo-tree-id3870 . -6351) (undo-tree-id3871 . -6352) (undo-tree-id3872 . -6351) (undo-tree-id3873 . -6352) (undo-tree-id3874 . -6351) (undo-tree-id3875 . -6352) (undo-tree-id3876 . -6351) (undo-tree-id3877 . -6352) (undo-tree-id3878 . -6338) (undo-tree-id3879 . -6339) (undo-tree-id3880 . -6338) (undo-tree-id3881 . -6339) (undo-tree-id3882 . -6351) (undo-tree-id3883 . -6352) (undo-tree-id3884 . -6351) (undo-tree-id3885 . -6352) (undo-tree-id3886 . -6350) (undo-tree-id3887 . -6351) (undo-tree-id3888 . -6352) (undo-tree-id3889 . -6352) (undo-tree-id3890 . -5658) (undo-tree-id3891 . -6351) (undo-tree-id3892 . -6352) (undo-tree-id3893 . -6351) (undo-tree-id3894 . -6352) (undo-tree-id3895 . -6351) (undo-tree-id3896 . -6352) (undo-tree-id3897 . -6351) (undo-tree-id3898 . -6352) (undo-tree-id3899 . -6338) (undo-tree-id3900 . -6339) (undo-tree-id3901 . -6338) (undo-tree-id3902 . -6339) (undo-tree-id3903 . -6351) (undo-tree-id3904 . -6352) (undo-tree-id3905 . -6351) (undo-tree-id3906 . -6352) (undo-tree-id3907 . -6350) (undo-tree-id3908 . -6351) (undo-tree-id3909 . -6351) (undo-tree-id3910 . -6352) (undo-tree-id3911 . -6351) (undo-tree-id3912 . -6352) (undo-tree-id3913 . -6351) (undo-tree-id3914 . -6352) (undo-tree-id3915 . -6351) (undo-tree-id3916 . -6352) (undo-tree-id3917 . -6338) (undo-tree-id3918 . -6339) (undo-tree-id3919 . -6338) (undo-tree-id3920 . -6339) (undo-tree-id3921 . -6351) (undo-tree-id3922 . -6352) (undo-tree-id3923 . -6351) (undo-tree-id3924 . -6352) (undo-tree-id3925 . -6350) (undo-tree-id3926 . -6351) (undo-tree-id3927 . 1590) (undo-tree-id3928 . -6351) (undo-tree-id3929 . 1589) (undo-tree-id3930 . -6351) (undo-tree-id3931 . 1589) (undo-tree-id3932 . -6352) 6353) nil (23765 3769 516756 544000) 0 nil]) ((6353 . 6354)) nil (23765 3711 725237 404000) 0 nil]) ((#("            println!(
                \"Got a redis response for: {:#?}\",
            );
" 0 12 (fontified t) 12 20 (fontified t face rust-builtin-formatting-macro-face) 20 22 (fontified t) 22 38 (fontified t) 38 39 (fontified t face font-lock-string-face) 39 42 (fontified t face font-lock-string-face) 42 60 (fontified t face font-lock-string-face) 60 63 (fontified t face font-lock-string-face) 63 65 (fontified t face font-lock-string-face) 65 70 (fontified t face rust-string-interpolation-face) 70 71 (fontified t face font-lock-string-face) 71 72 (fontified t) 72 73 (fontified t) 73 88 (fontified t)) . 6170) (undo-tree-id3933 . -86) (undo-tree-id3934 . -86) (undo-tree-id3935 . -13) (undo-tree-id3936 . -64) (undo-tree-id3937 . -73) (undo-tree-id3938 . -73) (undo-tree-id3939 . -73) (undo-tree-id3940 . -73) (undo-tree-id3941 . -64) (undo-tree-id3942 . -64) (undo-tree-id3943 . -64) (undo-tree-id3944 . -64) (undo-tree-id3945 . -64) (undo-tree-id3946 . -73) (undo-tree-id3947 . -73) (undo-tree-id3948 . -73) (undo-tree-id3949 . -73) (undo-tree-id3950 . -73) (undo-tree-id3951 . -73) (undo-tree-id3952 . -73) (undo-tree-id3953 . -73) (undo-tree-id3954 . -73) (undo-tree-id3955 . -73) (undo-tree-id3956 . -73) (undo-tree-id3957 . -73) (undo-tree-id3958 . -73) (undo-tree-id3959 . -73) (undo-tree-id3960 . -73) (undo-tree-id3961 . -73) (undo-tree-id3962 . -73) (undo-tree-id3963 . -73) (undo-tree-id3964 . -73) (undo-tree-id3965 . -73) (undo-tree-id3966 . -73) (undo-tree-id3967 . -73) (undo-tree-id3968 . -13) (undo-tree-id3969 . -65) (undo-tree-id3970 . -66) (undo-tree-id3971 . -65) (undo-tree-id3972 . -70) (undo-tree-id3973 . -88) (undo-tree-id3974 . -13) (undo-tree-id3975 . -86) (undo-tree-id3976 . -13) (undo-tree-id3977 . -35) (undo-tree-id3978 . -38) (undo-tree-id3979 . -39) 6183) nil (23765 3711 725323 249000) 0 nil]) ((6364 . 6365) (#("                 " 0 1 (fontified nil) 1 16 (fontified nil) 16 17 (fontified nil rear-nonsticky t)) . 6364) (undo-tree-id3980 . -1) (#("
" 0 1 (fontified t)) . -6365) (undo-tree-id3981 . -1) 6350) nil (23765 3711 725337 642000) 0 nil]) ((nil rear-nonsticky nil 6381 . 6382) (#("
" 0 1 (fontified nil)) . -6458) (6365 . 6459) 6334) nil (23765 3711 725343 459000) 0 nil]) ((#("                timeline_regex.captures(raw_redis_response).unwrap()[\"timeline\"].to_string()
" 0 16 (fontified t) 16 31 (fontified t) 31 39 (fontified t) 39 40 (fontified t) 40 58 (fontified t) 58 59 (fontified t) 59 66 (fontified t) 66 68 (fontified t) 68 69 (fontified t) 69 70 (fontified t face font-lock-string-face) 70 78 (fontified t face font-lock-string-face) 78 79 (fontified t face font-lock-string-face) 79 90 (fontified t) 90 92 (fontified t) 92 93 (fontified t)) . 6243) (undo-tree-id3982 . -93) (undo-tree-id3983 . -93) (undo-tree-id3984 . -93) (undo-tree-id3985 . -93) (undo-tree-id3986 . -93) (undo-tree-id3987 . -93) (undo-tree-id3988 . -93) (undo-tree-id3989 . -93) (undo-tree-id3990 . -73) (undo-tree-id3991 . -73) (undo-tree-id3992 . -73) (undo-tree-id3993 . -73) (undo-tree-id3994 . -73) (undo-tree-id3995 . -73) (undo-tree-id3996 . -73) (undo-tree-id3997 . -73) (undo-tree-id3998 . -73) (undo-tree-id3999 . -73) (undo-tree-id4000 . -73) (undo-tree-id4001 . -73) (undo-tree-id4002 . -73) (undo-tree-id4003 . -73) (undo-tree-id4004 . -73) (undo-tree-id4005 . -73) (undo-tree-id4006 . -30) (undo-tree-id4007 . -30) (undo-tree-id4008 . -30) (undo-tree-id4009 . -30) 6273) nil (23765 3711 725393 775000) 0 nil]) ((6447 . 6458) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -6447) (undo-tree-id4010 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -6448) (undo-tree-id4011 . -1) (#("m" 0 1 (fontified t face font-lock-variable-name-face)) . -6449) (undo-tree-id4012 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -6450) (undo-tree-id4013 . -1) 6451 (6443 . 6451) (6426 . 6443) 6406) nil (23765 3711 725412 276000) 0 nil]) ((6405 . 6423) (#("raw_" 0 4 (fontified t)) . -6405) (undo-tree-id4014 . -4) 6409 (6405 . 6409) (#("&String::from_utf8_lossy(&buffer[..num_bytes_read])" 0 1 (fontified t) 1 7 (fontified t face font-lock-type-face) 7 51 (fontified t)) . 6405)) nil (23765 3711 725422 502000) 0 nil]) ((6385 . 6395) (#("re" 0 2 (fontified t)) . 6385)) nil (23765 3711 725426 622000) 0 nil]) ((6004 . 6013) (6003 . 6004) (#("re" 0 2 (fontified t face font-lock-variable-name-face)) . 6003)) nil (23765 3711 725430 654000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 6058)) nil (23765 3711 725433 323000) 0 nil]) ((#("regex" 0 5 (fontified t face font-lock-string-face)) . 6059) (undo-tree-id4015 . -3) 6062) nil (23765 3711 725438 682000) 0 nil]) ((6048 . 6049) (#("h" 0 1 (fontified t face font-lock-string-face)) . 6048)) nil (23765 3711 725442 456000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 6048)) nil (23765 3711 725444 878000) 0 nil]) ((#("Valid" 0 5 (fontified t face font-lock-string-face)) . 6048) (undo-tree-id4016 . -3) 6051 (t 23765 3491 318844 804000)) nil (23765 3711 725450 107000) 0 nil]) ((6147 . 6148) (#("n" 0 1 (fontified t face font-lock-string-face)) . 6147) (undo-tree-id3748 . -1) (undo-tree-id3749 . -1) (t 23765 3472 382277 431000)) nil (23765 3491 225160 120000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 6339) (6338 . 6339) (6337 . 6339) (#("(" 0 1 (fontified nil)) . -6337) (6327 . 6338)) nil (23765 3472 259304 242000) 0 nil]) ((6317 . 6325) (#("time" 0 4 (fontified t face font-lock-string-face)) . -6317) (undo-tree-id3747 . -4) 6321 (6317 . 6321) (6316 . 6318) (#("\"" 0 1 (fontified nil)) . -6316) (6316 . 6317) (6315 . 6317) (#("[" 0 1 (fontified nil)) . -6315) (6315 . 6316) (t 23765 3380 226099 636000)) nil (23765 3472 259343 823000) 0 nil]) ((#("x" 0 1 (fontified t face font-lock-string-face)) . 6148)) nil (23765 3380 107611 357000) 0 nil]) ((6148 . 6149) (#(")" 0 1 (fontified t face font-lock-string-face)) . 6148) (t 23765 3341 732973 574000)) nil (23765 3380 107619 326000) 0 nil]) ((6241 . 6244)) nil (23765 3341 641802 869000) 0 nil]) ((6285 . 6303) (#("raw" 0 3 (fontified t)) . -6285) (undo-tree-id3720 . -3) 6288 (6285 . 6288) (6284 . 6286) (#("(" 0 1 (fontified nil)) . -6284) (6284 . 6285)) nil (23765 3341 641818 291000) 0 nil]) ((#("                raw_redis_response
                    .lines()
                    .filter(|line| line.starts_with(\"timeline\"))
                    .collect::<String>()
" 0 16 (fontified t) 16 34 (fontified t) 34 35 (fontified t) 35 64 (fontified t) 64 116 (fontified t) 116 117 (fontified t face font-lock-string-face) 117 125 (fontified t face font-lock-string-face) 125 126 (fontified t face font-lock-string-face) 126 128 (fontified t) 128 129 (fontified t) 129 150 (fontified t) 150 157 (fontified t) 157 159 (fontified t) 159 160 (syntax-table #1# fontified t) 160 166 (fontified t face font-lock-type-face) 166 167 (syntax-table #1# fontified t) 167 169 (fontified t) 169 170 (fontified t)) . 6294) (undo-tree-id3721 . -162) (undo-tree-id3722 . -33) (undo-tree-id3723 . -162) (undo-tree-id3724 . -161) (undo-tree-id3725 . -161) (undo-tree-id3726 . -161) (undo-tree-id3727 . -161) (undo-tree-id3728 . -33) (undo-tree-id3729 . -162) (undo-tree-id3730 . -33) (undo-tree-id3731 . -162) 6456) nil (23765 3341 641837 186000) 0 nil]) ((#(";" 0 1 (fontified t)) . -6293) (undo-tree-id3732 . -1) 6294) nil (23765 3341 641841 789000) 0 nil]) ((6293 . 6294) (#(")" 0 1 (fontified nil)) . 6293) (6292 . 6293) (6291 . 6293) (#("(" 0 1 (fontified nil)) . -6291) (6284 . 6292) (6276 . 6284) (#("cap" 0 3 (fontified t)) . -6276) (undo-tree-id3733 . -3) 6279 (6275 . 6279) (6261 . 6275) (#("time" 0 4 (fontified t)) . -6261) (undo-tree-id3734 . -1) (undo-tree-id3735 . -4) 6265 (6261 . 6265) (6245 . 6261) (6245 . 6246) 6278) nil (23765 3341 641854 55000) 0 nil]) ((6173 . 6174)) nil (23765 3341 641858 245000) 0 nil]) ((6164 . 6171) (#("0" 0 1 (fontified t face font-lock-string-face)) . -6164) (undo-tree-id3736 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -6165) (undo-tree-id3737 . -1) 6166 (6165 . 6166) (6164 . 6165) (#("-" 0 1 (fontified t face font-lock-string-face)) . -6164) (undo-tree-id3738 . -1) 6165 (6160 . 6165) (6159 . 6161) (#("\"" 0 1 (fontified nil)) . -6159) (6159 . 6160) (6158 . 6160) (#("(" 0 1 (fontified nil)) . -6158) (6151 . 6159)) nil (23765 3341 641868 982000) 0 nil]) ((nil face font-lock-string-face 6150 . 6151) (nil fontified nil 6150 . 6151) (6150 . 6151) (#("r" 0 1 (fontified t)) . 6150)) nil (23765 3341 641874 4000) 0 nil]) ((6150 . 6151) (#(")" 0 1 (fontified nil)) . -6150) (nil face font-lock-string-face 6150 . 6151) (nil fontified nil 6150 . 6151) (6150 . 6151) (#(" " 0 1 (fontified nil)) . -6150) (nil face font-lock-string-face 6150 . 6151) (nil fontified nil 6150 . 6151) (6150 . 6151) (#(")" 0 1 (face font-lock-string-face fontified nil)) . -6150) (6150 . 6151)) nil (23765 3341 641879 579000) 0 nil]) ((#(")" 0 1 (fontified nil)) . -6150) (nil face font-lock-string-face 6150 . 6151) (nil fontified nil 6150 . 6151) (6150 . 6151) (#(" " 0 1 (fontified nil)) . -6150) (nil face font-lock-string-face 6150 . 6151) (nil fontified nil 6150 . 6151) (6150 . 6151) (#(")" 0 1 (face font-lock-string-face fontified nil)) . -6150) (6150 . 6151) (#("_" 0 1 (fontified t)) . -6150) (undo-tree-id3739 . -1) (undo-tree-id3740 . -1) 6151 (6150 . 6151) (#("." 0 1 (fontified t)) . -6150) (undo-tree-id3741 . -1) (undo-tree-id3742 . -1) 6151 (6150 . 6151) (6149 . 6150)) nil (23765 3341 641893 205000) 0 nil]) ((6146 . 6148)) nil (23765 3341 641897 289000) 0 nil]) ((6144 . 6145) (6142 . 6144)) nil (23765 3341 641899 218000) 0 nil]) ((nil rear-nonsticky nil 6128 . 6129) (nil fontified nil 6120 . 6129) (6120 . 6129) 6119) nil (23765 3341 641902 10000) 0 nil]) ((#("timeline:" 0 9 (fontified t face font-lock-string-face)) . 6133)) nil (23765 3341 641903 877000) 0 nil]) ((6134 . 6142) (6133 . 6134) (#("\\" 0 1 (fontified t face font-lock-string-face)) . -6133) (undo-tree-id3743 . -1) 6134 (6132 . 6134) (#(" " 0 1 (fontified nil)) . -6132) (6132 . 6133) (#(">" 0 1 (fontified nil face font-lock-string-face)) . -6132) (6124 . 6133) (6121 . 6124) (6120 . 6122) (#("(" 0 1 (fontified nil face font-lock-string-face)) . -6120) (6118 . 6121) (6117 . 6119) (#("(" 0 1 (fontified nil)) . -6117) (6112 . 6118) (6107 . 6112) (#("Reg" 0 3 (fontified t face font-lock-type-face)) . -6107) (undo-tree-id3744 . -3) 6110 (6103 . 6110) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -6103) (undo-tree-id3745 . -1) (#("x" 0 1 (fontified t face font-lock-variable-name-face)) . -6104) (undo-tree-id3746 . -1) 6105 (6099 . 6105) (6090 . 6099) (6086 . 6090) (6073 . 6086) (t 23765 2815 552761 94000) 6026) nil (23765 3341 641921 52000) 0 nil] [nil nil ((6338 . 6340) (#("(" 0 1 (fontified nil)) . -6338) (6334 . 6339) (6313 . 6334) (t 23765 2815 552761 94000) 6312) ((#("
                    " 0 1 (fontified t) 1 21 (fontified nil)) . 6313) (undo-tree-id3699 . -21) (undo-tree-id3700 . -21) (undo-tree-id3701 . -21) (undo-tree-id3702 . -21) (undo-tree-id3703 . -21) (undo-tree-id3704 . -21) (undo-tree-id3705 . -21) (undo-tree-id3706 . -21) (#(".get(" 0 4 (fontified nil) 4 5 (fontified nil)) . 6334) (undo-tree-id3707 . -4) (undo-tree-id3708 . -4) (undo-tree-id3709 . -1) (undo-tree-id3710 . -4) (undo-tree-id3711 . -1) (undo-tree-id3712 . -4) (undo-tree-id3713 . -4) (undo-tree-id3714 . -4) (undo-tree-id3715 . -4) (undo-tree-id3716 . -4) (6338 . 6339) (#("()" 0 1 (fontified t) 1 2 (fontified t)) . 6338) (undo-tree-id3717 . 1) (undo-tree-id3718 . -1) (undo-tree-id3719 . -2)) (23765 3011 801944 332000) 0 nil]) ((6134 . 6139) (6113 . 6134)) nil (23765 3011 825249 606000) 0 nil] [nil nil ((6112 . 6113)) ((#("a" 0 1 (fontified t)) . 6112) (undo-tree-id3690 . -1) (undo-tree-id3691 . -1) (undo-tree-id3692 . -1) (undo-tree-id3693 . -1) (undo-tree-id3694 . -1) (undo-tree-id3695 . -1) (undo-tree-id3696 . -1) (undo-tree-id3697 . -1) (undo-tree-id3698 . -1)) (23765 2807 90570 613000) 0 nil]) (6113) nil (23765 2807 92980 887000) 0 nil]) ((6134 . 6152) (#("raw" 0 3 (fontified t)) . -6134) (undo-tree-id3668 . -3) (undo-tree-id3669 . -3) 6137 (6134 . 6137) (6117 . 6134) 6096) nil (23765 2807 90589 469000) 0 nil]) ((#("                &String::from_utf8_lossy(&buffer[..num_bytes_read])
" 0 17 (fontified t) 17 23 (fontified t face font-lock-type-face) 23 45 (fontified t) 45 68 (fontified t)) . 6118) (undo-tree-id3670 . -16) (undo-tree-id3671 . -16) 6134) nil (23765 2807 90595 627000) 0 nil]) ((nil rear-nonsticky nil 5908 . 5909) (5897 . 5987)) nil (23765 2807 90598 169000) 0 nil]) ((#("            let raw_redis_response = &String::from_utf8_lossy(&buffer[..num_bytes_read]);
" 0 12 (fontified t) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 34 (fontified t face font-lock-variable-name-face) 34 37 (fontified t) 37 38 (fontified t) 38 44 (fontified t face font-lock-type-face) 44 87 (fontified t) 87 88 (fontified t rear-nonsticky t) 88 89 (fontified t) 89 90 (fontified t)) . 5984) (undo-tree-id3672 . -37) (undo-tree-id3673 . 1) (undo-tree-id3674 . -37) (undo-tree-id3675 . -87) (undo-tree-id3676 . -88) (undo-tree-id3677 . -88) 6072) nil (23765 2807 90607 80000) 0 nil]) ((6072 . 6073)) nil (23765 2807 90609 386000) 0 nil]) ((nil rear-nonsticky nil 6071 . 6072) (nil fontified nil 6021 . 6072) (6021 . 6072) 6020) nil (23765 2807 90612 124000) 0 nil]) ((6005 . 6021) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -6005) (undo-tree-id3678 . -1) (undo-tree-id3679 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -6006) (undo-tree-id3680 . -1) (undo-tree-id3681 . -1) (#("p" 0 1 (fontified t face font-lock-variable-name-face)) . -6007) (undo-tree-id3682 . -1) (undo-tree-id3683 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -6008) (undo-tree-id3684 . -1) (undo-tree-id3685 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -6009) (undo-tree-id3686 . -1) (undo-tree-id3687 . -1) 6010 (6008 . 6010) (6002 . 6008) (#("q" 0 1 (fontified t face font-lock-variable-name-face)) . -6002) (undo-tree-id3688 . -1) (undo-tree-id3689 . -1) 6003 (6000 . 6003) (5996 . 6000) (5984 . 5996) (5984 . 5985) 6004 (t 23765 2689 903630 953000)) nil (23765 2807 90633 153000) 0 nil] [nil nil ((#("&String::from_utf8_lossy(&buffer[..num_bytes_read])" 0 1 (fontified t) 1 7 (fontified t face font-lock-type-face) 7 51 (fontified t)) . 6292) (t 23765 2689 903630 953000)) ((6292 . 6343)) (23765 2742 370502 649000) 0 nil]) ((6221 . 6227) (6220 . 6222) (#("<" 0 1 (fontified nil syntax-table #1#)) . -6220) (6218 . 6221) (#("<>" 0 1 (fontified t syntax-table #1#) 1 2 (fontified t syntax-table #1#)) . 6218) (undo-tree-id3666 . -1) (undo-tree-id3667 . -1) 6219 (6218 . 6220) (#("<" 0 1 (fontified nil syntax-table #1#)) . -6218) (6218 . 6219) (6217 . 6218)) nil (23765 2742 372649 34000) 0 nil]) ((#("t" 0 1 (fontified t)) . 6217) (t 23765 2662 213832 381000)) nil (23765 2689 809007 463000) 0 nil]) ((1 . 7923) (#("//! Interfacing with Redis and stream the results on to the `StreamManager`
use crate::redis_cmd;
use crate::user::User;
use futures::stream::Stream;
use futures::{Async, Poll};
use log::info;
use regex::Regex;
use serde_json::Value;
use std::collections::{HashMap, VecDeque};
use std::io::{Read, Write};
use std::net::TcpStream;
use std::time::{Duration, Instant};
use tokio::io::{AsyncRead, Error};
use uuid::Uuid;

#[derive(Debug)]
struct MsgQueue {
    messages: VecDeque<Value>,
    last_polled_at: Instant,
    redis_channel: String,
}
impl MsgQueue {
    fn new(redis_channel: impl std::fmt::Display) -> Self {
        let redis_channel = redis_channel.to_string();
        MsgQueue {
            messages: VecDeque::new(),
            last_polled_at: Instant::now(),
            redis_channel,
        }
    }
}

/// The item that streams from Redis and is polled by the `StreamManger`
#[derive(Debug)]
pub struct Receiver {
    pubsub_connection: TcpStream,
    secondary_redis_connection: TcpStream,
    tl: String,
    pub user: User,
    manager_id: Uuid,
    msg_queues: HashMap<Uuid, MsgQueue>,
    clients_per_timeline: HashMap<String, i32>,
}
impl Default for Receiver {
    fn default() -> Self {
        Self::new()
    }
}
impl Receiver {
    pub fn new() -> Self {
        let pubsub_connection = TcpStream::connect(\"127.0.0.1:6379\").expect(\"Can connect to Redis\");
        pubsub_connection
            .set_read_timeout(Some(Duration::from_millis(10)))
            .expect(\"Can set read timeout for Redis connection\");
        let secondary_redis_connection =
            TcpStream::connect(\"127.0.0.1:6379\").expect(\"Can connect to Redis\");
        secondary_redis_connection
            .set_read_timeout(Some(Duration::from_millis(10)))
            .expect(\"Can set read timeout for Redis connection\");
        Self {
            pubsub_connection,
            secondary_redis_connection,
            tl: String::new(),
            user: User::public(),
            manager_id: Uuid::new_v4(),
            msg_queues: HashMap::new(),
            clients_per_timeline: HashMap::new(),
        }
    }

    /// Update the `StreamManager` that is currently polling the `Receiver`
    pub fn update(&mut self, id: Uuid, timeline: impl std::fmt::Display) {
        self.manager_id = id;
        self.tl = timeline.to_string();
    }

    /// Send a subscribe command to the Redis PubSub (if needed)
    pub fn maybe_subscribe(&mut self, tl: &str) {
        info!(\"Subscribing to {}\", &tl);

        let manager_id = self.manager_id;
        self.msg_queues.insert(manager_id, MsgQueue::new(tl));
        let current_clients = self
            .clients_per_timeline
            .entry(tl.to_string())
            .and_modify(|n| *n += 1)
            .or_insert(1);

        if *current_clients == 1 {
            let subscribe_cmd = redis_cmd::pubsub(\"subscribe\", tl);
            self.pubsub_connection
                .write_all(&subscribe_cmd)
                .expect(\"Can subscribe to Redis\");
            let set_subscribed_cmd = redis_cmd::set(format!(\"subscribed:timeline:{}\", tl), \"1\");
            self.secondary_redis_connection
                .write_all(&set_subscribed_cmd)
                .expect(\"Can set Redis\");
            info!(\"Now subscribed to: {:#?}\", &self.msg_queues);
        }
    }

    /// Drop any PubSub subscriptions that don't have active clients
    pub fn unsubscribe_from_empty_channels(&mut self) {
        let mut timelines_with_fewer_clients = Vec::new();

        // Keep only message queues that have been polled recently
        self.msg_queues.retain(|_id, msg_queue| {
            if msg_queue.last_polled_at.elapsed() < Duration::from_secs(30) {
                true
            } else {
                timelines_with_fewer_clients.push(msg_queue.redis_channel.clone());
                false
            }
        });

        // Record the lower number of clients subscribed to that channel
        for timeline in timelines_with_fewer_clients {
            let count_of_subscribed_clients = self
                .clients_per_timeline
                .entry(timeline.clone())
                .and_modify(|n| *n -= 1)
                .or_insert(0);
            // If no clients, unsubscribe from the channel
            if *count_of_subscribed_clients <= 0 {
                self.unsubscribe(&timeline);
            }
        }
    }

    /// Send an unsubscribe command to the Redis PubSub
    pub fn unsubscribe(&mut self, tl: &str) {
        let unsubscribe_cmd = redis_cmd::pubsub(\"unsubscribe\", tl);
        info!(\"Unsubscribing from {}\", &tl);
        self.pubsub_connection
            .write_all(&unsubscribe_cmd)
            .expect(\"Can unsubscribe from Redis\");
        let set_subscribed_cmd = redis_cmd::set(format!(\"subscribed:timeline:{}\", tl), \"0\");
        self.secondary_redis_connection
            .write_all(&set_subscribed_cmd)
            .expect(\"Can set Redis\");
        info!(\"Now subscribed only to: {:#?}\", &self.msg_queues);
    }
}
impl Stream for Receiver {
    type Item = Value;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<Value>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        info!(\"Being polled by: {}\", self.manager_id);
        let timeline = self.tl.clone();

        // Record current time as last polled time
        self.msg_queues
            .entry(self.manager_id)
            .and_modify(|msg_queue| msg_queue.last_polled_at = Instant::now());

        // Add any incomming messages to the back of the relevant `msg_queues`
        // NOTE: This could be more/other than the `msg_queue` currently being polled
        let mut async_stream = AsyncReadableStream(&mut self.pubsub_connection);
        if let Async::Ready(num_bytes_read) = async_stream.poll_read(&mut buffer)? {
            // capture everything between `{` and `}` as potential JSON
            let re = Regex::new(r\"(?P<json>\\{.*\\})\").expect(\"Valid hard-coded regex\");
            println!(
                \"{}\",
                &String::from_utf8_lossy(&buffer[..num_bytes_read])
                    .lines()
                    .filter(|line| line.starts_with(\"timeline\")).collect()
            );
            if let Some(result) = re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read])) {
                let msg: Value = serde_json::from_str(&result[\"json\"].to_string().clone())?;
                for msg_queue in self.msg_queues.values_mut() {
                    if msg_queue.redis_channel == timeline {
                        msg_queue.messages.push_back(msg.clone());
                        println!(\"Accepted msg for: {}\", &timeline);
                    } else {
                        println!(\"Rejecting msg for: {}\", &msg_queue.redis_channel);
                    }
                }

                //println!(\"{:#?}\", &self);
            }
        }

        // If the `msg_queue` being polled has any new messages, return the first (oldest) one
        match self
            .msg_queues
            .entry(self.manager_id)
            .or_insert_with(|| MsgQueue::new(timeline))
            .messages
            .pop_front()
        {
            Some(value) => Ok(Async::Ready(Some(value))),
            _ => Ok(Async::NotReady),
        }
    }
}

impl Drop for Receiver {
    fn drop(&mut self) {
        let timeline = self.tl.clone();
        self.unsubscribe(&timeline);
    }
}

struct AsyncReadableStream<'a>(&'a mut TcpStream);

impl<'a> Read for AsyncReadableStream<'a> {
    fn read(&mut self, buffer: &mut [u8]) -> Result<usize, std::io::Error> {
        self.0.read(buffer)
    }
}

impl<'a> AsyncRead for AsyncReadableStream<'a> {
    fn poll_read(&mut self, buf: &mut [u8]) -> Poll<usize, std::io::Error> {
        match self.read(buf) {
            Ok(t) => Ok(Async::Ready(t)),
            Err(_) => Ok(Async::NotReady),
        }
    }
}
" 0 76 (fontified t face font-lock-doc-face) 76 79 (fontified t face font-lock-keyword-face) 79 80 (fontified t) 80 85 (fontified t face font-lock-keyword-face) 85 98 (fontified t) 98 101 (fontified t face font-lock-keyword-face) 101 102 (fontified t) 102 107 (fontified t face font-lock-keyword-face) 107 109 (fontified t) 109 113 (fontified t face font-lock-constant-face) 113 115 (fontified t) 115 119 (fontified t face font-lock-type-face) 119 121 (fontified t) 121 124 (fontified t face font-lock-keyword-face) 124 125 (fontified t) 125 132 (fontified t face font-lock-constant-face) 132 134 (fontified t) 134 140 (fontified t face font-lock-constant-face) 140 142 (fontified t) 142 148 (fontified t face font-lock-type-face) 148 150 (fontified t) 150 153 (fontified t face font-lock-keyword-face) 153 154 (fontified t) 154 161 (fontified t face font-lock-constant-face) 161 164 (fontified t) 164 169 (fontified t face font-lock-type-face) 169 171 (fontified t) 171 175 (fontified t face font-lock-type-face) 175 178 (fontified t) 178 181 (fontified t face font-lock-keyword-face) 181 182 (fontified t) 182 185 (fontified t face font-lock-constant-face) 185 193 (fontified t) 193 196 (fontified t face font-lock-keyword-face) 196 197 (fontified t) 197 202 (fontified t face font-lock-constant-face) 202 204 (fontified t) 204 209 (fontified t face font-lock-type-face) 209 211 (fontified t) 211 214 (fontified t face font-lock-keyword-face) 214 215 (fontified t) 215 225 (fontified t face font-lock-constant-face) 225 227 (fontified t) 227 232 (fontified t face font-lock-type-face) 232 234 (fontified t) 234 237 (fontified t face font-lock-keyword-face) 237 238 (fontified t) 238 241 (fontified t face font-lock-constant-face) 241 243 (fontified t) 243 254 (fontified t face font-lock-constant-face) 254 257 (fontified t) 257 264 (fontified t face font-lock-type-face) 264 266 (fontified t) 266 274 (fontified t face font-lock-type-face) 274 277 (fontified t) 277 280 (fontified t face font-lock-keyword-face) 280 281 (fontified t) 281 284 (fontified t face font-lock-constant-face) 284 286 (fontified t) 286 288 (fontified t face font-lock-constant-face) 288 291 (fontified t) 291 295 (fontified t face font-lock-type-face) 295 297 (fontified t) 297 302 (fontified t face font-lock-type-face) 302 305 (fontified t) 305 308 (fontified t face font-lock-keyword-face) 308 309 (fontified t) 309 312 (fontified t face font-lock-constant-face) 312 314 (fontified t) 314 317 (fontified t face font-lock-constant-face) 317 319 (fontified t) 319 328 (fontified t face font-lock-type-face) 328 330 (fontified t) 330 333 (fontified t face font-lock-keyword-face) 333 334 (fontified t) 334 337 (fontified t face font-lock-constant-face) 337 339 (fontified t) 339 343 (fontified t face font-lock-constant-face) 343 346 (fontified t) 346 354 (fontified t face font-lock-type-face) 354 356 (fontified t) 356 363 (fontified t face font-lock-type-face) 363 366 (fontified t) 366 369 (fontified t face font-lock-keyword-face) 369 370 (fontified t) 370 375 (fontified t face font-lock-constant-face) 375 377 (fontified t) 377 379 (fontified t face font-lock-constant-face) 379 382 (fontified t) 382 391 (fontified t face font-lock-type-face) 391 393 (fontified t) 393 398 (fontified t face font-lock-type-face) 398 401 (fontified t) 401 404 (fontified t face font-lock-keyword-face) 404 405 (fontified t) 405 409 (fontified t face font-lock-constant-face) 409 411 (fontified t) 411 415 (fontified t face font-lock-type-face) 415 418 (fontified t) 418 434 (fontified t face font-lock-preprocessor-face) 434 435 (fontified t) 435 441 (fontified t face font-lock-keyword-face) 441 442 (fontified t) 442 450 (fontified t face font-lock-type-face) 450 457 (fontified t) 457 465 (fontified t face font-lock-variable-name-face) 465 467 (fontified t) 467 475 (fontified t face font-lock-type-face) 475 476 (fontified t) 476 481 (fontified t face font-lock-type-face) 481 488 (fontified t) 488 500 (fontified t face font-lock-variable-name-face) 500 502 (fontified t face font-lock-variable-name-face) 502 504 (fontified t) 504 511 (fontified t face font-lock-type-face) 511 513 (fontified t) 513 517 (fontified t) 517 530 (fontified t face font-lock-variable-name-face) 530 532 (fontified t) 532 538 (fontified t face font-lock-type-face) 538 542 (fontified t) 542 546 (fontified t face font-lock-keyword-face) 546 547 (fontified t) 547 555 (fontified t face font-lock-type-face) 555 562 (fontified t) 562 564 (fontified t face font-lock-keyword-face) 564 565 (fontified t) 565 568 (fontified t face font-lock-function-name-face) 568 569 (fontified t) 569 582 (fontified t face font-lock-variable-name-face) 582 584 (fontified t) 584 588 (fontified t face font-lock-keyword-face) 588 589 (fontified t) 589 592 (fontified t face font-lock-constant-face) 592 594 (fontified t) 594 597 (fontified t face font-lock-constant-face) 597 599 (fontified t) 599 606 (fontified t face font-lock-type-face) 606 609 (fontified t) 609 610 (fontified t syntax-table #1#) 610 611 (fontified t) 611 615 (fontified t face font-lock-type-face) 615 626 (fontified t) 626 629 (fontified t face font-lock-keyword-face) 629 630 (fontified t) 630 643 (fontified t face font-lock-variable-name-face) 643 681 (fontified t) 681 689 (fontified t face font-lock-type-face) 689 704 (fontified t) 704 712 (fontified t face font-lock-variable-name-face) 712 714 (fontified t) 714 722 (fontified t face font-lock-type-face) 722 743 (fontified t) 743 757 (fontified t face font-lock-variable-name-face) 757 759 (fontified t) 759 766 (fontified t face font-lock-type-face) 766 821 (fontified t) 821 894 (fontified t face font-lock-doc-face) 894 910 (fontified t face font-lock-preprocessor-face) 910 911 (fontified t) 911 914 (fontified t face font-lock-keyword-face) 914 915 (fontified t) 915 921 (fontified t face font-lock-keyword-face) 921 922 (fontified t) 922 930 (fontified t face font-lock-type-face) 930 937 (fontified t) 937 954 (fontified t face font-lock-variable-name-face) 954 956 (fontified t) 956 965 (fontified t face font-lock-type-face) 965 971 (fontified t) 971 997 (fontified t face font-lock-variable-name-face) 997 999 (fontified t) 999 1008 (fontified t face font-lock-type-face) 1008 1013 (fontified t) 1013 1014 (fontified t) 1014 1016 (fontified t face font-lock-variable-name-face) 1016 1018 (fontified t) 1018 1024 (fontified t face font-lock-type-face) 1024 1026 (fontified t) 1026 1030 (fontified t) 1030 1033 (fontified t face font-lock-keyword-face) 1033 1034 (fontified t) 1034 1038 (fontified t face font-lock-variable-name-face) 1038 1040 (fontified t) 1040 1044 (fontified t face font-lock-type-face) 1044 1050 (fontified t) 1050 1060 (fontified t face font-lock-variable-name-face) 1060 1062 (fontified t) 1062 1066 (fontified t face font-lock-type-face) 1066 1072 (fontified t) 1072 1082 (fontified t face font-lock-variable-name-face) 1082 1084 (fontified t) 1084 1091 (fontified t face font-lock-type-face) 1091 1092 (fontified t) 1092 1096 (fontified t face font-lock-type-face) 1096 1098 (fontified t) 1098 1106 (fontified t face font-lock-type-face) 1106 1113 (fontified t) 1113 1133 (fontified t face font-lock-variable-name-face) 1133 1135 (fontified t) 1135 1142 (fontified t face font-lock-type-face) 1142 1143 (fontified t) 1143 1149 (fontified t face font-lock-type-face) 1149 1151 (fontified t) 1151 1154 (fontified t face font-lock-type-face) 1154 1159 (fontified t) 1159 1163 (fontified t face font-lock-keyword-face) 1163 1164 (fontified t) 1164 1171 (fontified t face font-lock-type-face) 1171 1172 (fontified t) 1172 1175 (fontified t face font-lock-keyword-face) 1175 1176 (fontified t) 1176 1184 (fontified t face font-lock-type-face) 1184 1191 (fontified t) 1191 1193 (fontified t face font-lock-keyword-face) 1193 1194 (fontified t) 1194 1201 (fontified t face font-lock-function-name-face) 1201 1205 (fontified t) 1205 1206 (fontified t syntax-table #1#) 1206 1207 (fontified t) 1207 1211 (fontified t face font-lock-type-face) 1211 1222 (fontified t) 1222 1226 (fontified t face font-lock-type-face) 1226 1242 (fontified t) 1242 1246 (fontified t face font-lock-keyword-face) 1246 1247 (fontified t) 1247 1255 (fontified t face font-lock-type-face) 1255 1262 (fontified t) 1262 1265 (fontified t face font-lock-keyword-face) 1265 1266 (fontified t) 1266 1268 (fontified t face font-lock-keyword-face) 1268 1269 (fontified t) 1269 1272 (fontified t face font-lock-function-name-face) 1272 1276 (fontified t) 1276 1277 (fontified t syntax-table #1#) 1277 1278 (fontified t) 1278 1282 (fontified t face font-lock-type-face) 1282 1293 (fontified t) 1293 1296 (fontified t face font-lock-keyword-face) 1296 1297 (fontified t) 1297 1314 (fontified t face font-lock-variable-name-face) 1314 1317 (fontified t) 1317 1326 (fontified t face font-lock-type-face) 1326 1336 (fontified t) 1336 1352 (fontified t face font-lock-string-face) 1352 1361 (fontified t) 1361 1383 (fontified t face font-lock-string-face) 1383 1442 (fontified t) 1442 1446 (fontified t face font-lock-type-face) 1446 1447 (fontified t) 1447 1455 (fontified t face font-lock-type-face) 1455 1495 (fontified t) 1495 1526 (fontified t face font-lock-string-face) 1526 1538 (fontified t face font-lock-string-face) 1538 1541 (fontified t) 3681 3682 (syntax-table #1#) 4317 4318 (syntax-table #1#) 4935 4950 (face font-lock-string-face) 4953 4961 (fontified t) 4961 4966 (fontified t face font-lock-preprocessor-face) 4966 4967 (fontified t) 4967 4998 (fontified t face font-lock-string-face) 4998 5001 (fontified t) 5001 5005 (fontified t face font-lock-keyword-face) 5005 5027 (fontified t) 5027 5031 (fontified t face font-lock-keyword-face) 5031 5032 (fontified t) 5032 5038 (fontified t face font-lock-type-face) 5038 5039 (fontified t) 5039 5042 (fontified t face font-lock-keyword-face) 5042 5043 (fontified t) 5043 5051 (fontified t face font-lock-type-face) 5051 5058 (fontified t) 5058 5062 (fontified t face font-lock-keyword-face) 5062 5063 (fontified t) 5063 5067 (fontified t face font-lock-type-face) 5067 5070 (fontified t) 5070 5075 (fontified t face font-lock-type-face) 5075 5081 (fontified t) 5081 5085 (fontified t face font-lock-keyword-face) 5085 5086 (fontified t) 5086 5091 (fontified t face font-lock-type-face) 5091 5094 (fontified t) 5094 5099 (fontified t face font-lock-type-face) 5099 5106 (fontified t) 5106 5108 (fontified t face font-lock-keyword-face) 5108 5109 (fontified t) 5109 5113 (fontified t face font-lock-function-name-face) 5113 5115 (fontified t) 5115 5118 (fontified t face font-lock-keyword-face) 5118 5119 (fontified t) 5119 5123 (fontified t face font-lock-keyword-face) 5123 5126 (fontified t) 5126 5127 (syntax-table #1# fontified t) 5127 5128 (fontified t) 5128 5132 (fontified t face font-lock-type-face) 5132 5133 (fontified t) 5133 5139 (fontified t face font-lock-type-face) 5139 5140 (fontified t) 5140 5145 (fontified t face font-lock-type-face) 5145 5148 (fontified t) 5148 5152 (fontified t face font-lock-type-face) 5152 5154 (fontified t) 5154 5159 (fontified t face font-lock-type-face) 5159 5171 (fontified t) 5171 5174 (fontified t face font-lock-keyword-face) 5174 5175 (fontified t) 5175 5178 (fontified t face font-lock-keyword-face) 5178 5179 (fontified t) 5179 5185 (fontified t face font-lock-variable-name-face) 5185 5188 (fontified t) 5188 5192 (fontified t face font-lock-preprocessor-face) 5192 5213 (fontified t) 5213 5218 (fontified t face font-lock-preprocessor-face) 5218 5219 (fontified t) 5219 5240 (fontified t face font-lock-string-face) 5240 5242 (fontified t) 5242 5246 (fontified t face font-lock-keyword-face) 5246 5268 (fontified t) 5268 5271 (fontified t face font-lock-keyword-face) 5271 5272 (fontified t) 5272 5280 (fontified t face font-lock-variable-name-face) 5280 5283 (fontified t) 5283 5287 (fontified t face font-lock-keyword-face) 5287 5309 (fontified t) 5309 5312 (fontified t face font-lock-comment-delimiter-face) 5312 5352 (fontified t face font-lock-comment-face) 5352 5360 (fontified t) 5360 5364 (fontified t face font-lock-keyword-face) 5364 5395 (fontified t) 5395 5399 (fontified t face font-lock-keyword-face) 5399 5414 (fontified t) 5414 5453 (fontified t) 5453 5475 (fontified t) 5475 5482 (face font-lock-type-face fontified t) 5482 5492 (fontified t) 5492 5501 (fontified t) 5501 5504 (fontified t face font-lock-comment-delimiter-face) 5504 5572 (fontified t face font-lock-comment-face) 5572 5580 (fontified t) 5580 5583 (fontified t face font-lock-comment-delimiter-face) 5583 5658 (fontified t face font-lock-comment-face) 5658 5666 (fontified t) 5666 5669 (fontified t face font-lock-keyword-face) 5669 5670 (fontified t) 5670 5673 (fontified t face font-lock-keyword-face) 5673 5674 (fontified t) 5674 5686 (fontified t face font-lock-variable-name-face) 5686 5689 (fontified t) 5689 5708 (fontified t face font-lock-type-face) 5708 5710 (fontified t) 5710 5713 (fontified t face font-lock-keyword-face) 5713 5714 (fontified t) 5714 5718 (fontified t face font-lock-keyword-face) 5718 5747 (fontified t) 5747 5749 (fontified t face font-lock-keyword-face) 5749 5750 (fontified t) 5750 5753 (fontified t face font-lock-keyword-face) 5753 5754 (fontified t) 5754 5759 (fontified t face font-lock-type-face) 5759 5761 (fontified t) 5761 5766 (fontified t face font-lock-type-face) 5766 5809 (fontified t) 5809 5812 (fontified t face font-lock-keyword-face) 5812 5820 (fontified t) 5820 5821 (fontified t face rust-question-mark-face) 5821 5836 (fontified t) 5836 5839 (fontified t face font-lock-comment-delimiter-face) 5839 5896 (fontified t face font-lock-comment-face) 5896 5908 (fontified t) 5908 5911 (fontified t face font-lock-keyword-face) 5911 5912 (fontified t) 5912 5914 (fontified t face font-lock-variable-name-face) 5914 5917 (fontified t) 5917 5922 (fontified t face font-lock-type-face) 5922 5928 (fontified t) 5928 5929 (syntax-table #2# fontified t face font-lock-string-face) 5929 5946 (fontified t face font-lock-string-face) 5946 5947 (syntax-table #3# fontified t face font-lock-string-face) 5947 5956 (fontified t) 5956 5980 (fontified t face font-lock-string-face) 5980 5983 (fontified t) 5983 5992 (fontified t) 5992 5995 (fontified t) 5995 6003 (face rust-builtin-formatting-macro-face fontified t) 6003 6004 (fontified t) 6004 6005 (fontified t) 6005 6021 (fontified t) 6021 6022 (fontified t face font-lock-string-face) 6022 6024 (fontified t face font-lock-string-face) 6024 6025 (fontified t face font-lock-string-face) 6025 6044 (fontified t) 6044 6050 (fontified t face font-lock-type-face) 6050 6124 (fontified t) 6124 6176 (fontified t) 6176 6186 (fontified t face font-lock-string-face) 6186 6196 (fontified t) 6196 6198 (fontified t) 6198 6199 (fontified t) 6199 6226 (fontified t) 6226 6228 (fontified t face font-lock-keyword-face) 6228 6229 (fontified t) 6229 6232 (fontified t face font-lock-keyword-face) 6232 6233 (fontified t) 6233 6237 (fontified t face font-lock-type-face) 6237 6261 (fontified t) 6261 6267 (fontified t face font-lock-type-face) 6267 6331 (fontified t) 6331 6334 (fontified t face font-lock-keyword-face) 6334 6335 (fontified t) 6335 6338 (fontified t face font-lock-variable-name-face) 6338 6340 (fontified t) 6340 6345 (fontified t face font-lock-type-face) 6345 6348 (fontified t) 6348 6358 (fontified t face font-lock-constant-face) 6358 6377 (fontified t) 6377 6383 (fontified t face font-lock-string-face) 6383 6405 (fontified t) 6405 6406 (fontified t face rust-question-mark-face) 6406 6424 (fontified t) 6424 6427 (fontified t face font-lock-keyword-face) 6427 6438 (fontified t) 6438 6440 (fontified t face font-lock-keyword-face) 6440 6441 (fontified t) 6441 6445 (fontified t face font-lock-keyword-face) 6445 6492 (fontified t) 6492 6494 (fontified t face font-lock-keyword-face) 6494 6514 (fontified t) 6514 6515 (fontified t) 6515 6533 (fontified t) 6533 6624 (fontified t) 6624 6632 (fontified t face rust-builtin-formatting-macro-face) 6632 6633 (fontified t) 6633 6652 (fontified t face font-lock-string-face) 6652 6654 (fontified t face rust-string-interpolation-face) 6654 6655 (fontified t face font-lock-string-face) 6655 6691 (fontified t) 6691 6695 (fontified t face font-lock-keyword-face) 6695 6699 (fontified t) 6699 6722 (fontified t) 6722 6730 (face rust-builtin-formatting-macro-face fontified t) 6730 6731 (fontified t) 6731 6751 (face font-lock-string-face fontified t) 6751 6753 (face rust-string-interpolation-face fontified t) 6753 6754 (face font-lock-string-face fontified t) 6754 6783 (fontified t) 6783 6840 (fontified t) 6840 6842 (fontified t face font-lock-comment-delimiter-face) 6842 6868 (fontified t face font-lock-comment-face) 6868 6901 (fontified t) 6901 6904 (fontified t face font-lock-comment-delimiter-face) 6904 6988 (fontified t face font-lock-comment-face) 6988 6996 (fontified t) 6996 7001 (fontified t face font-lock-keyword-face) 7001 7002 (fontified t) 7002 7006 (fontified t face font-lock-keyword-face) 7006 7033 (fontified t) 7033 7050 (fontified t) 7050 7054 (fontified t face font-lock-keyword-face) 7054 7067 (fontified t) 7067 7098 (fontified t) 7098 7106 (fontified t face font-lock-type-face) 7106 7192 (fontified t) 7192 7196 (fontified t face font-lock-type-face) 7196 7205 (fontified t) 7205 7206 (syntax-table #1# fontified t) 7206 7207 (fontified t) 7207 7209 (fontified t face font-lock-type-face) 7209 7210 (fontified t) 7210 7215 (fontified t face font-lock-type-face) 7215 7217 (fontified t) 7217 7222 (fontified t face font-lock-type-face) 7222 7223 (fontified t) 7223 7227 (fontified t face font-lock-type-face) 7227 7253 (fontified t) 7253 7254 (fontified t syntax-table #1#) 7254 7255 (fontified t) 7255 7257 (fontified t face font-lock-type-face) 7257 7258 (fontified t) 7258 7263 (fontified t face font-lock-type-face) 7263 7265 (fontified t) 7265 7273 (fontified t face font-lock-type-face) 7273 7283 (fontified t) 7283 7286 (fontified t) 7570 7571 (syntax-table #1#) 7735 7736 (syntax-table #1#)) . 1) (undo-tree-id3492 . 1703) (undo-tree-id3493 . -6043) (undo-tree-id3494 . -6043) (undo-tree-id3495 . -4953) (undo-tree-id3496 . -6111) (undo-tree-id3497 . -6043) (undo-tree-id3498 . -4953) (undo-tree-id3499 . -6111) (undo-tree-id3500 . -6197) (undo-tree-id3501 . -6198) (undo-tree-id3502 . -4953) (undo-tree-id3503 . -6377) (undo-tree-id3504 . -6378) (undo-tree-id3505 . -6196) (undo-tree-id3506 . -6197) (undo-tree-id3507 . -6196) (undo-tree-id3508 . -6197) (undo-tree-id3509 . -4953) (undo-tree-id3510 . -6195) (undo-tree-id3511 . -6196) (undo-tree-id3512 . -4953) (undo-tree-id3513 . -6194) (undo-tree-id3514 . -6195) (undo-tree-id3515 . -4953) (undo-tree-id3516 . -6193) (undo-tree-id3517 . -6194) (undo-tree-id3518 . -4953) (undo-tree-id3519 . -6192) (undo-tree-id3520 . -6193) (undo-tree-id3521 . -4953) (undo-tree-id3522 . -6191) (undo-tree-id3523 . -6192) (undo-tree-id3524 . -4953) (undo-tree-id3525 . -6191) (undo-tree-id3526 . -6191) (undo-tree-id3527 . -4953) (undo-tree-id3528 . -6191) (undo-tree-id3529 . -6191) (undo-tree-id3530 . -4953) (undo-tree-id3531 . -6191) (undo-tree-id3532 . -6191) (undo-tree-id3533 . -4953) (undo-tree-id3534 . -6192) (undo-tree-id3535 . -6191) (undo-tree-id3536 . -4953) (undo-tree-id3537 . -6192) (undo-tree-id3538 . -6192) (undo-tree-id3539 . -6191) (undo-tree-id3540 . -4953) (undo-tree-id3541 . -6192) (undo-tree-id3542 . -6192) (undo-tree-id3543 . -6191) (undo-tree-id3544 . -4953) (undo-tree-id3545 . -6192) (undo-tree-id3546 . -6191) (undo-tree-id3547 . -4953) (undo-tree-id3548 . -6192) (undo-tree-id3549 . -6192) (undo-tree-id3550 . -4953) (undo-tree-id3551 . -6192) (undo-tree-id3552 . -6192) (undo-tree-id3553 . -4953) (undo-tree-id3554 . -6193) (undo-tree-id3555 . -6192) (undo-tree-id3556 . -4953) (undo-tree-id3557 . -6193) (undo-tree-id3558 . -6193) (undo-tree-id3559 . -6192) (undo-tree-id3560 . -4953) (undo-tree-id3561 . -6193) (undo-tree-id3562 . -6193) (undo-tree-id3563 . -6192) (undo-tree-id3564 . -4953) (undo-tree-id3565 . -6193) (undo-tree-id3566 . -6192) (undo-tree-id3567 . -4953) (undo-tree-id3568 . -6194) (undo-tree-id3569 . -6193) (undo-tree-id3570 . -4953) (undo-tree-id3571 . -6194) (undo-tree-id3572 . -6194) (undo-tree-id3573 . -4953) (undo-tree-id3574 . -6194) (undo-tree-id3575 . -6194) (undo-tree-id3576 . -4953) (undo-tree-id3577 . -6194) (undo-tree-id3578 . -6194) (undo-tree-id3579 . -4953) (undo-tree-id3580 . -6195) (undo-tree-id3581 . -6194) (undo-tree-id3582 . -4953) (undo-tree-id3583 . -6195) (undo-tree-id3584 . -6195) (undo-tree-id3585 . -6194) (undo-tree-id3586 . -4953) (undo-tree-id3587 . -6195) (undo-tree-id3588 . -6195) (undo-tree-id3589 . -6194) (undo-tree-id3590 . -4953) (undo-tree-id3591 . -6195) (undo-tree-id3592 . -6194) (undo-tree-id3593 . -4953) (undo-tree-id3594 . -6196) (undo-tree-id3595 . -6195) (undo-tree-id3596 . -4953) (undo-tree-id3597 . -6197) (undo-tree-id3598 . -6196) (undo-tree-id3599 . -4953) (undo-tree-id3600 . -6198) (undo-tree-id3601 . -6197) (undo-tree-id3602 . -4953) (undo-tree-id3603 . -6197) (undo-tree-id3604 . -6198) (undo-tree-id3605 . -6197) (undo-tree-id3606 . -6198) (undo-tree-id3607 . -6197) (undo-tree-id3608 . -6198) (undo-tree-id3609 . -6197) (undo-tree-id3610 . -6198) (undo-tree-id3611 . -6185) (undo-tree-id3612 . -6186) (undo-tree-id3613 . -6185) (undo-tree-id3614 . -6186) (undo-tree-id3615 . -6197) (undo-tree-id3616 . -6198) (undo-tree-id3617 . -6197) (undo-tree-id3618 . -6198) (undo-tree-id3619 . -6196) (undo-tree-id3620 . -6197) (undo-tree-id3621 . -6198) (undo-tree-id3622 . -6198) (undo-tree-id3623 . -4953) (undo-tree-id3624 . -6198) (undo-tree-id3625 . -6198) (undo-tree-id3626 . -4953) (undo-tree-id3627 . -6124) (undo-tree-id3628 . -6198) (undo-tree-id3629 . -6197) (undo-tree-id3630 . -6198) (undo-tree-id3631 . -4953) (undo-tree-id3632 . -6197) (undo-tree-id3633 . -6197) (undo-tree-id3634 . -6198) (undo-tree-id3635 . -4953) (undo-tree-id3636 . -6197) (undo-tree-id3637 . -6197) (undo-tree-id3638 . -6198) (undo-tree-id3639 . -4953) (undo-tree-id3640 . -4953) (undo-tree-id3641 . -6197) (undo-tree-id3642 . -6197) (undo-tree-id3643 . -6197) (undo-tree-id3644 . -6198) (undo-tree-id3645 . -4953) (undo-tree-id3646 . -6377) (undo-tree-id3647 . -6378) (undo-tree-id3648 . -6196) (undo-tree-id3649 . -6197) (undo-tree-id3650 . -6189) (undo-tree-id3651 . -6196) (undo-tree-id3652 . -6189) (undo-tree-id3653 . -6196) (undo-tree-id3654 . -6377) (undo-tree-id3655 . -6378) (undo-tree-id3656 . -6196) (undo-tree-id3657 . -6197) (undo-tree-id3658 . 1705) (undo-tree-id3659 . -6197) (undo-tree-id3660 . 1704) (undo-tree-id3661 . -6197) (undo-tree-id3662 . 1704) (undo-tree-id3663 . -6198) 6198) nil (23765 2662 124262 262000) 0 nil]) ((#(";" 0 1 (fontified t)) . 6199) (undo-tree-id3664 . -1) (undo-tree-id3665 . -1)) nil (23765 2662 124284 227000) 0 nil]) ((6199 . 6200) (#(")" 0 1 (fontified nil)) . 6199) (6198 . 6199) (6197 . 6199) (#("(" 0 1 (fontified nil)) . -6197) (6196 . 6198) (6189 . 6196) (t 23765 2639 697332 404000)) nil (23765 2662 124290 382000) 0 nil]) ((1 . 7892) (#("//! Interfacing with Redis and stream the results on to the `StreamManager`
use crate::redis_cmd;
use crate::user::User;
use futures::stream::Stream;
use futures::{Async, Poll};
use log::info;
use regex::Regex;
use serde_json::Value;
use std::collections::{HashMap, VecDeque};
use std::io::{Read, Write};
use std::net::TcpStream;
use std::time::{Duration, Instant};
use tokio::io::{AsyncRead, Error};
use uuid::Uuid;

#[derive(Debug)]
struct MsgQueue {
    messages: VecDeque<Value>,
    last_polled_at: Instant,
    redis_channel: String,
}
impl MsgQueue {
    fn new(redis_channel: impl std::fmt::Display) -> Self {
        let redis_channel = redis_channel.to_string();
        MsgQueue {
            messages: VecDeque::new(),
            last_polled_at: Instant::now(),
            redis_channel,
        }
    }
}

/// The item that streams from Redis and is polled by the `StreamManger`
#[derive(Debug)]
pub struct Receiver {
    pubsub_connection: TcpStream,
    secondary_redis_connection: TcpStream,
    tl: String,
    pub user: User,
    manager_id: Uuid,
    msg_queues: HashMap<Uuid, MsgQueue>,
    clients_per_timeline: HashMap<String, i32>,
}
impl Default for Receiver {
    fn default() -> Self {
        Self::new()
    }
}
impl Receiver {
    pub fn new() -> Self {
        let pubsub_connection = TcpStream::connect(\"127.0.0.1:6379\").expect(\"Can connect to Redis\");
        pubsub_connection
            .set_read_timeout(Some(Duration::from_millis(10)))
            .expect(\"Can set read timeout for Redis connection\");
        let secondary_redis_connection =
            TcpStream::connect(\"127.0.0.1:6379\").expect(\"Can connect to Redis\");
        secondary_redis_connection
            .set_read_timeout(Some(Duration::from_millis(10)))
            .expect(\"Can set read timeout for Redis connection\");
        Self {
            pubsub_connection,
            secondary_redis_connection,
            tl: String::new(),
            user: User::public(),
            manager_id: Uuid::new_v4(),
            msg_queues: HashMap::new(),
            clients_per_timeline: HashMap::new(),
        }
    }

    /// Update the `StreamManager` that is currently polling the `Receiver`
    pub fn update(&mut self, id: Uuid, timeline: impl std::fmt::Display) {
        self.manager_id = id;
        self.tl = timeline.to_string();
    }

    /// Send a subscribe command to the Redis PubSub (if needed)
    pub fn maybe_subscribe(&mut self, tl: &str) {
        info!(\"Subscribing to {}\", &tl);

        let manager_id = self.manager_id;
        self.msg_queues.insert(manager_id, MsgQueue::new(tl));
        let current_clients = self
            .clients_per_timeline
            .entry(tl.to_string())
            .and_modify(|n| *n += 1)
            .or_insert(1);

        if *current_clients == 1 {
            let subscribe_cmd = redis_cmd::pubsub(\"subscribe\", tl);
            self.pubsub_connection
                .write_all(&subscribe_cmd)
                .expect(\"Can subscribe to Redis\");
            let set_subscribed_cmd = redis_cmd::set(format!(\"subscribed:timeline:{}\", tl), \"1\");
            self.secondary_redis_connection
                .write_all(&set_subscribed_cmd)
                .expect(\"Can set Redis\");
            info!(\"Now subscribed to: {:#?}\", &self.msg_queues);
        }
    }

    /// Drop any PubSub subscriptions that don't have active clients
    pub fn unsubscribe_from_empty_channels(&mut self) {
        let mut timelines_with_fewer_clients = Vec::new();

        // Keep only message queues that have been polled recently
        self.msg_queues.retain(|_id, msg_queue| {
            if msg_queue.last_polled_at.elapsed() < Duration::from_secs(30) {
                true
            } else {
                timelines_with_fewer_clients.push(msg_queue.redis_channel.clone());
                false
            }
        });

        // Record the lower number of clients subscribed to that channel
        for timeline in timelines_with_fewer_clients {
            let count_of_subscribed_clients = self
                .clients_per_timeline
                .entry(timeline.clone())
                .and_modify(|n| *n -= 1)
                .or_insert(0);
            // If no clients, unsubscribe from the channel
            if *count_of_subscribed_clients <= 0 {
                self.unsubscribe(&timeline);
            }
        }
    }

    /// Send an unsubscribe command to the Redis PubSub
    pub fn unsubscribe(&mut self, tl: &str) {
        let unsubscribe_cmd = redis_cmd::pubsub(\"unsubscribe\", tl);
        info!(\"Unsubscribing from {}\", &tl);
        self.pubsub_connection
            .write_all(&unsubscribe_cmd)
            .expect(\"Can unsubscribe from Redis\");
        let set_subscribed_cmd = redis_cmd::set(format!(\"subscribed:timeline:{}\", tl), \"0\");
        self.secondary_redis_connection
            .write_all(&set_subscribed_cmd)
            .expect(\"Can set Redis\");
        info!(\"Now subscribed only to: {:#?}\", &self.msg_queues);
    }
}
impl Stream for Receiver {
    type Item = Value;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<Value>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        info!(\"Being polled by: {}\", self.manager_id);
        let timeline = self.tl.clone();

        // Record current time as last polled time
        self.msg_queues
            .entry(self.manager_id)
            .and_modify(|msg_queue| msg_queue.last_polled_at = Instant::now());

        // Add any incomming messages to the back of the relevant `msg_queues`
        // NOTE: This could be more/other than the `msg_queue` currently being polled
        let mut async_stream = AsyncReadableStream(&mut self.pubsub_connection);
        if let Async::Ready(num_bytes_read) = async_stream.poll_read(&mut buffer)? {
            // capture everything between `{` and `}` as potential JSON
            let re = Regex::new(r\"(?P<json>\\{.*\\})\").expect(\"Valid hard-coded regex\");
            println!(\"{}\", &String::from_utf8_lossy(&buffer[..num_bytes_read]).lines().filter(|line| line.starts_with(\"timeline\")
           ));
            if let Some(result) = re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read])) {
                let msg: Value = serde_json::from_str(&result[\"json\"].to_string().clone())?;
                for msg_queue in self.msg_queues.values_mut() {
                    if msg_queue.redis_channel == timeline {
                        msg_queue.messages.push_back(msg.clone());
                        println!(\"Accepted msg for: {}\", &timeline);
                    } else {
                        println!(\"Rejecting msg for: {}\", &msg_queue.redis_channel);
                    }
                }

                //println!(\"{:#?}\", &self);
            }
        }

        // If the `msg_queue` being polled has any new messages, return the first (oldest) one
        match self
            .msg_queues
            .entry(self.manager_id)
            .or_insert_with(|| MsgQueue::new(timeline))
            .messages
            .pop_front()
        {
            Some(value) => Ok(Async::Ready(Some(value))),
            _ => Ok(Async::NotReady),
        }
    }
}

impl Drop for Receiver {
    fn drop(&mut self) {
        let timeline = self.tl.clone();
        self.unsubscribe(&timeline);
    }
}

struct AsyncReadableStream<'a>(&'a mut TcpStream);

impl<'a> Read for AsyncReadableStream<'a> {
    fn read(&mut self, buffer: &mut [u8]) -> Result<usize, std::io::Error> {
        self.0.read(buffer)
    }
}

impl<'a> AsyncRead for AsyncReadableStream<'a> {
    fn poll_read(&mut self, buf: &mut [u8]) -> Poll<usize, std::io::Error> {
        match self.read(buf) {
            Ok(t) => Ok(Async::Ready(t)),
            Err(_) => Ok(Async::NotReady),
        }
    }
}
" 0 76 (fontified t face font-lock-doc-face) 76 79 (fontified t face font-lock-keyword-face) 79 80 (fontified t) 80 85 (fontified t face font-lock-keyword-face) 85 98 (fontified t) 98 101 (fontified t face font-lock-keyword-face) 101 102 (fontified t) 102 107 (fontified t face font-lock-keyword-face) 107 109 (fontified t) 109 113 (fontified t face font-lock-constant-face) 113 115 (fontified t) 115 119 (fontified t face font-lock-type-face) 119 121 (fontified t) 121 124 (fontified t face font-lock-keyword-face) 124 125 (fontified t) 125 132 (fontified t face font-lock-constant-face) 132 134 (fontified t) 134 140 (fontified t face font-lock-constant-face) 140 142 (fontified t) 142 148 (fontified t face font-lock-type-face) 148 150 (fontified t) 150 153 (fontified t face font-lock-keyword-face) 153 154 (fontified t) 154 161 (fontified t face font-lock-constant-face) 161 164 (fontified t) 164 169 (fontified t face font-lock-type-face) 169 171 (fontified t) 171 175 (fontified t face font-lock-type-face) 175 178 (fontified t) 178 181 (fontified t face font-lock-keyword-face) 181 182 (fontified t) 182 185 (fontified t face font-lock-constant-face) 185 193 (fontified t) 193 196 (fontified t face font-lock-keyword-face) 196 197 (fontified t) 197 202 (fontified t face font-lock-constant-face) 202 204 (fontified t) 204 209 (fontified t face font-lock-type-face) 209 211 (fontified t) 211 214 (fontified t face font-lock-keyword-face) 214 215 (fontified t) 215 225 (fontified t face font-lock-constant-face) 225 227 (fontified t) 227 232 (fontified t face font-lock-type-face) 232 234 (fontified t) 234 237 (fontified t face font-lock-keyword-face) 237 238 (fontified t) 238 241 (fontified t face font-lock-constant-face) 241 243 (fontified t) 243 254 (fontified t face font-lock-constant-face) 254 257 (fontified t) 257 264 (fontified t face font-lock-type-face) 264 266 (fontified t) 266 274 (fontified t face font-lock-type-face) 274 277 (fontified t) 277 280 (fontified t face font-lock-keyword-face) 280 281 (fontified t) 281 284 (fontified t face font-lock-constant-face) 284 286 (fontified t) 286 288 (fontified t face font-lock-constant-face) 288 291 (fontified t) 291 295 (fontified t face font-lock-type-face) 295 297 (fontified t) 297 302 (fontified t face font-lock-type-face) 302 305 (fontified t) 305 308 (fontified t face font-lock-keyword-face) 308 309 (fontified t) 309 312 (fontified t face font-lock-constant-face) 312 314 (fontified t) 314 317 (fontified t face font-lock-constant-face) 317 319 (fontified t) 319 328 (fontified t face font-lock-type-face) 328 330 (fontified t) 330 333 (fontified t face font-lock-keyword-face) 333 334 (fontified t) 334 337 (fontified t face font-lock-constant-face) 337 339 (fontified t) 339 343 (fontified t face font-lock-constant-face) 343 346 (fontified t) 346 354 (fontified t face font-lock-type-face) 354 356 (fontified t) 356 363 (fontified t face font-lock-type-face) 363 366 (fontified t) 366 369 (fontified t face font-lock-keyword-face) 369 370 (fontified t) 370 375 (fontified t face font-lock-constant-face) 375 377 (fontified t) 377 379 (fontified t face font-lock-constant-face) 379 382 (fontified t) 382 391 (fontified t face font-lock-type-face) 391 393 (fontified t) 393 398 (fontified t face font-lock-type-face) 398 401 (fontified t) 401 404 (fontified t face font-lock-keyword-face) 404 405 (fontified t) 405 409 (fontified t face font-lock-constant-face) 409 411 (fontified t) 411 415 (fontified t face font-lock-type-face) 415 418 (fontified t) 418 434 (fontified t face font-lock-preprocessor-face) 434 435 (fontified t) 435 441 (fontified t face font-lock-keyword-face) 441 442 (fontified t) 442 450 (fontified t face font-lock-type-face) 450 457 (fontified t) 457 465 (fontified t face font-lock-variable-name-face) 465 467 (fontified t) 467 475 (fontified t face font-lock-type-face) 475 476 (fontified t) 476 481 (fontified t face font-lock-type-face) 481 488 (fontified t) 488 500 (fontified t face font-lock-variable-name-face) 500 502 (fontified t face font-lock-variable-name-face) 502 504 (fontified t) 504 511 (fontified t face font-lock-type-face) 511 513 (fontified t) 513 517 (fontified t) 517 530 (fontified t face font-lock-variable-name-face) 530 532 (fontified t) 532 538 (fontified t face font-lock-type-face) 538 542 (fontified t) 542 546 (fontified t face font-lock-keyword-face) 546 547 (fontified t) 547 555 (fontified t face font-lock-type-face) 555 562 (fontified t) 562 564 (fontified t face font-lock-keyword-face) 564 565 (fontified t) 565 568 (fontified t face font-lock-function-name-face) 568 569 (fontified t) 569 582 (fontified t face font-lock-variable-name-face) 582 584 (fontified t) 584 588 (fontified t face font-lock-keyword-face) 588 589 (fontified t) 589 592 (fontified t face font-lock-constant-face) 592 594 (fontified t) 594 597 (fontified t face font-lock-constant-face) 597 599 (fontified t) 599 606 (fontified t face font-lock-type-face) 606 609 (fontified t) 609 610 (fontified t syntax-table #1#) 610 611 (fontified t) 611 615 (fontified t face font-lock-type-face) 615 626 (fontified t) 626 629 (fontified t face font-lock-keyword-face) 629 630 (fontified t) 630 643 (fontified t face font-lock-variable-name-face) 643 681 (fontified t) 681 689 (fontified t face font-lock-type-face) 689 704 (fontified t) 704 712 (fontified t face font-lock-variable-name-face) 712 714 (fontified t) 714 722 (fontified t face font-lock-type-face) 722 743 (fontified t) 743 757 (fontified t face font-lock-variable-name-face) 757 759 (fontified t) 759 766 (fontified t face font-lock-type-face) 766 821 (fontified t) 821 894 (fontified t face font-lock-doc-face) 894 910 (fontified t face font-lock-preprocessor-face) 910 911 (fontified t) 911 914 (fontified t face font-lock-keyword-face) 914 915 (fontified t) 915 921 (fontified t face font-lock-keyword-face) 921 922 (fontified t) 922 930 (fontified t face font-lock-type-face) 930 937 (fontified t) 937 954 (fontified t face font-lock-variable-name-face) 954 956 (fontified t) 956 965 (fontified t face font-lock-type-face) 965 971 (fontified t) 971 997 (fontified t face font-lock-variable-name-face) 997 999 (fontified t) 999 1008 (fontified t face font-lock-type-face) 1008 1013 (fontified t) 1013 1014 (fontified t) 1014 1016 (fontified t face font-lock-variable-name-face) 1016 1018 (fontified t) 1018 1024 (fontified t face font-lock-type-face) 1024 1026 (fontified t) 1026 1030 (fontified t) 1030 1033 (fontified t face font-lock-keyword-face) 1033 1034 (fontified t) 1034 1038 (fontified t face font-lock-variable-name-face) 1038 1040 (fontified t) 1040 1044 (fontified t face font-lock-type-face) 1044 1050 (fontified t) 1050 1060 (fontified t face font-lock-variable-name-face) 1060 1062 (fontified t) 1062 1066 (fontified t face font-lock-type-face) 1066 1072 (fontified t) 1072 1082 (fontified t face font-lock-variable-name-face) 1082 1084 (fontified t) 1084 1091 (fontified t face font-lock-type-face) 1091 1092 (fontified t) 1092 1096 (fontified t face font-lock-type-face) 1096 1098 (fontified t) 1098 1106 (fontified t face font-lock-type-face) 1106 1113 (fontified t) 1113 1133 (fontified t face font-lock-variable-name-face) 1133 1135 (fontified t) 1135 1142 (fontified t face font-lock-type-face) 1142 1143 (fontified t) 1143 1149 (fontified t face font-lock-type-face) 1149 1151 (fontified t) 1151 1154 (fontified t face font-lock-type-face) 1154 1159 (fontified t) 1159 1163 (fontified t face font-lock-keyword-face) 1163 1164 (fontified t) 1164 1171 (fontified t face font-lock-type-face) 1171 1172 (fontified t) 1172 1175 (fontified t face font-lock-keyword-face) 1175 1176 (fontified t) 1176 1184 (fontified t face font-lock-type-face) 1184 1191 (fontified t) 1191 1193 (fontified t face font-lock-keyword-face) 1193 1194 (fontified t) 1194 1201 (fontified t face font-lock-function-name-face) 1201 1205 (fontified t) 1205 1206 (fontified t syntax-table #1#) 1206 1207 (fontified t) 1207 1211 (fontified t face font-lock-type-face) 1211 1222 (fontified t) 1222 1226 (fontified t face font-lock-type-face) 1226 1242 (fontified t) 1242 1246 (fontified t face font-lock-keyword-face) 1246 1247 (fontified t) 1247 1255 (fontified t face font-lock-type-face) 1255 1262 (fontified t) 1262 1265 (fontified t face font-lock-keyword-face) 1265 1266 (fontified t) 1266 1268 (fontified t face font-lock-keyword-face) 1268 1269 (fontified t) 1269 1272 (fontified t face font-lock-function-name-face) 1272 1276 (fontified t) 1276 1277 (fontified t syntax-table #1#) 1277 1278 (fontified t) 1278 1282 (fontified t face font-lock-type-face) 1282 1293 (fontified t) 1293 1296 (fontified t face font-lock-keyword-face) 1296 1297 (fontified t) 1297 1314 (fontified t face font-lock-variable-name-face) 1314 1317 (fontified t) 1317 1326 (fontified t face font-lock-type-face) 1326 1336 (fontified t) 1336 1352 (fontified t face font-lock-string-face) 1352 1361 (fontified t) 1361 1383 (fontified t face font-lock-string-face) 1383 1442 (fontified t) 1442 1446 (fontified t face font-lock-type-face) 1446 1447 (fontified t) 1447 1455 (fontified t face font-lock-type-face) 1455 1495 (fontified t) 1495 1526 (fontified t face font-lock-string-face) 1526 1538 (fontified t face font-lock-string-face) 1538 1541 (fontified t) 3681 3682 (syntax-table #1#) 4317 4318 (syntax-table #1#) 4831 4839 (fontified t) 4839 4843 (fontified t face font-lock-keyword-face) 4843 4871 (fontified t) 4871 4935 (fontified t) 4935 4950 (fontified t face font-lock-string-face) 4950 4961 (fontified t) 4961 4966 (fontified t face font-lock-preprocessor-face) 4966 4967 (fontified t) 4967 4998 (fontified t face font-lock-string-face) 4998 5001 (fontified t) 5001 5005 (fontified t face font-lock-keyword-face) 5005 5019 (fontified t) 5019 5025 (fontified t) 5025 5027 (fontified t) 5027 5031 (fontified t face font-lock-keyword-face) 5031 5032 (fontified t) 5032 5038 (fontified t face font-lock-type-face) 5038 5039 (fontified t) 5039 5042 (fontified t face font-lock-keyword-face) 5042 5043 (fontified t) 5043 5051 (fontified t face font-lock-type-face) 5051 5058 (fontified t) 5058 5062 (fontified t face font-lock-keyword-face) 5062 5063 (fontified t) 5063 5067 (fontified t face font-lock-type-face) 5067 5070 (fontified t) 5070 5075 (fontified t face font-lock-type-face) 5075 5081 (fontified t) 5081 5085 (fontified t face font-lock-keyword-face) 5085 5086 (fontified t) 5086 5091 (fontified t face font-lock-type-face) 5091 5094 (fontified t) 5094 5099 (fontified t face font-lock-type-face) 5099 5106 (fontified t) 5106 5108 (fontified t face font-lock-keyword-face) 5108 5109 (fontified t) 5109 5113 (fontified t face font-lock-function-name-face) 5113 5115 (fontified t) 5115 5118 (fontified t face font-lock-keyword-face) 5118 5119 (fontified t) 5119 5123 (fontified t face font-lock-keyword-face) 5123 5126 (fontified t) 5126 5127 (syntax-table #1# fontified t) 5127 5128 (fontified t) 5128 5132 (fontified t face font-lock-type-face) 5132 5133 (fontified t) 5133 5139 (fontified t face font-lock-type-face) 5139 5140 (fontified t) 5140 5145 (fontified t face font-lock-type-face) 5145 5148 (fontified t) 5148 5152 (fontified t face font-lock-type-face) 5152 5154 (fontified t) 5154 5159 (fontified t face font-lock-type-face) 5159 5171 (fontified t) 5171 5174 (fontified t face font-lock-keyword-face) 5174 5175 (fontified t) 5175 5178 (fontified t face font-lock-keyword-face) 5178 5179 (fontified t) 5179 5185 (fontified t face font-lock-variable-name-face) 5185 5188 (fontified t) 5188 5192 (fontified t face font-lock-preprocessor-face) 5192 5213 (fontified t) 5213 5218 (fontified t face font-lock-preprocessor-face) 5218 5219 (fontified t) 5219 5240 (fontified t face font-lock-string-face) 5240 5242 (fontified t) 5242 5246 (fontified t face font-lock-keyword-face) 5246 5268 (fontified t) 5268 5271 (fontified t face font-lock-keyword-face) 5271 5272 (fontified t) 5272 5280 (fontified t face font-lock-variable-name-face) 5280 5283 (fontified t) 5283 5287 (fontified t face font-lock-keyword-face) 5287 5301 (fontified t) 5301 5309 (fontified t) 5309 5312 (fontified t face font-lock-comment-delimiter-face) 5312 5351 (fontified t face font-lock-comment-face) 5351 5352 (fontified t face font-lock-comment-face) 5352 5360 (fontified t) 5360 5364 (fontified t face font-lock-keyword-face) 5364 5395 (fontified t) 5395 5399 (fontified t face font-lock-keyword-face) 5399 5475 (fontified t) 5475 5482 (fontified t face font-lock-type-face) 5482 5501 (fontified t) 5501 5504 (fontified t face font-lock-comment-delimiter-face) 5504 5519 (fontified t face font-lock-comment-face) 5519 5572 (face font-lock-comment-face fontified t) 5572 5580 (fontified t) 5580 5583 (fontified t face font-lock-comment-delimiter-face) 5583 5658 (fontified t face font-lock-comment-face) 5658 5666 (fontified t) 5666 5669 (fontified t face font-lock-keyword-face) 5669 5670 (fontified t) 5670 5673 (fontified t face font-lock-keyword-face) 5673 5674 (fontified t) 5674 5686 (fontified t face font-lock-variable-name-face) 5686 5689 (fontified t) 5689 5708 (fontified t face font-lock-type-face) 5708 5710 (fontified t) 5710 5713 (fontified t face font-lock-keyword-face) 5713 5714 (fontified t) 5714 5718 (fontified t face font-lock-keyword-face) 5718 5747 (fontified t) 5747 5749 (fontified t face font-lock-keyword-face) 5749 5750 (fontified t) 5750 5753 (fontified t face font-lock-keyword-face) 5753 5754 (fontified t) 5754 5759 (fontified t face font-lock-type-face) 5759 5761 (fontified t) 5761 5766 (fontified t face font-lock-type-face) 5766 5809 (fontified t) 5809 5812 (fontified t face font-lock-keyword-face) 5812 5820 (fontified t) 5820 5821 (fontified t face rust-question-mark-face) 5821 5836 (fontified t) 5836 5839 (fontified t face font-lock-comment-delimiter-face) 5839 5851 (fontified t face font-lock-comment-face) 5851 5896 (fontified t face font-lock-comment-face) 5896 5908 (fontified t) 5908 5911 (fontified t face font-lock-keyword-face) 5911 5912 (fontified t) 5912 5914 (fontified t face font-lock-variable-name-face) 5914 5917 (fontified t) 5917 5922 (fontified t face font-lock-type-face) 5922 5928 (fontified t) 5928 5929 (fontified t syntax-table #2# face font-lock-string-face) 5929 5946 (fontified t face font-lock-string-face) 5946 5947 (fontified t syntax-table #3# face font-lock-string-face) 5947 5956 (fontified t) 5956 5980 (fontified t face font-lock-string-face) 5980 5982 (fontified t) 5982 5983 (fontified t) 5983 5995 (fontified t) 5995 6003 (fontified t face rust-builtin-formatting-macro-face) 6003 6004 (fontified t) 6004 6005 (fontified t face font-lock-string-face) 6005 6007 (fontified t face rust-string-interpolation-face) 6007 6008 (fontified t face font-lock-string-face) 6008 6010 (fontified t) 6010 6011 (fontified t) 6011 6017 (fontified t face font-lock-type-face) 6017 6060 (fontified t) 6060 6061 (fontified t rear-nonsticky t) 6061 6062 (fontified t) 6062 6067 (fontified t) 6067 6070 (fontified t) 6070 6076 (fontified t) 6076 6100 (fontified t) 6100 6101 (fontified t) 6101 6110 (fontified t face font-lock-string-face) 6110 6111 (fontified t face font-lock-string-face) 6111 6112 (fontified t) 6112 6113 (fontified t) 6113 6124 (fontified t) 6124 6125 (fontified t) 6125 6127 (fontified t) 6127 6128 (fontified t) 6128 6140 (fontified t) 6140 6142 (fontified t face font-lock-keyword-face) 6142 6143 (fontified t) 6143 6146 (fontified t face font-lock-keyword-face) 6146 6147 (fontified t) 6147 6151 (fontified t face font-lock-type-face) 6151 6174 (fontified t) 6174 6175 (fontified t) 6175 6181 (fontified t face font-lock-type-face) 6181 6217 (fontified t) 6217 6225 (fontified t) 6225 6229 (fontified t) 6229 6245 (fontified t) 6245 6248 (fontified t face font-lock-keyword-face) 6248 6249 (fontified t) 6249 6252 (fontified t face font-lock-variable-name-face) 6252 6254 (fontified t) 6254 6259 (fontified t face font-lock-type-face) 6259 6262 (fontified t) 6262 6272 (fontified t face font-lock-constant-face) 6272 6291 (fontified t) 6291 6297 (fontified t face font-lock-string-face) 6297 6319 (fontified t) 6319 6320 (fontified t face rust-question-mark-face) 6320 6322 (fontified t) 6322 6338 (fontified t) 6338 6341 (fontified t face font-lock-keyword-face) 6341 6352 (fontified t) 6352 6354 (fontified t face font-lock-keyword-face) 6354 6355 (fontified t) 6355 6359 (fontified t face font-lock-keyword-face) 6359 6406 (fontified t) 6406 6408 (fontified t face font-lock-keyword-face) 6408 6538 (fontified t) 6538 6546 (fontified t face rust-builtin-formatting-macro-face) 6546 6547 (fontified t) 6547 6566 (fontified t face font-lock-string-face) 6566 6568 (fontified t face rust-string-interpolation-face) 6568 6569 (fontified t face font-lock-string-face) 6569 6605 (fontified t) 6605 6609 (fontified t face font-lock-keyword-face) 6609 6612 (fontified t) 6612 6613 (fontified t) 6613 6628 (fontified t) 6628 6636 (fontified t) 6636 6644 (face rust-builtin-formatting-macro-face fontified t) 6644 6645 (fontified t) 6645 6665 (face font-lock-string-face fontified t) 6665 6667 (face rust-string-interpolation-face fontified t) 6667 6668 (face font-lock-string-face fontified t) 6668 6671 (fontified t) 6671 6694 (fontified t) 6694 6697 (fontified t) 6697 6702 (fontified t) 6702 6719 (fontified t) 6719 6729 (fontified t) 6729 6736 (fontified t) 6736 6737 (fontified t) 6737 6738 (fontified t) 6738 6753 (fontified t) 6753 6754 (rear-nonsticky t fontified t) 6754 6755 (fontified t face font-lock-comment-delimiter-face) 6755 6756 (fontified t face font-lock-comment-delimiter-face) 6756 6763 (fontified t face font-lock-comment-face) 6763 6764 (fontified t face font-lock-comment-face) 6764 6765 (fontified t face font-lock-comment-face) 6765 6766 (fontified t face font-lock-comment-face) 6766 6771 (fontified t face font-lock-comment-face) 6771 6772 (fontified t face font-lock-comment-face) 6772 6775 (fontified t face font-lock-comment-face) 6775 6779 (fontified t face font-lock-comment-face) 6779 6781 (fontified t face font-lock-comment-face) 6781 6782 (fontified t face font-lock-comment-face) 6782 6788 (fontified t) 6788 6796 (fontified t) 6796 6815 (fontified t) 6815 6818 (fontified t face font-lock-comment-delimiter-face) 6818 6882 (fontified t face font-lock-comment-face) 6882 6902 (fontified t face font-lock-comment-face) 6902 6910 (fontified t) 6910 6915 (fontified t face font-lock-keyword-face) 6915 6916 (fontified t) 6916 6920 (fontified t face font-lock-keyword-face) 6920 6964 (fontified t) 6964 6968 (fontified t face font-lock-keyword-face) 6968 7012 (fontified t) 7012 7020 (fontified t face font-lock-type-face) 7020 7106 (fontified t) 7106 7110 (fontified t face font-lock-type-face) 7110 7119 (fontified t) 7119 7120 (syntax-table #1# fontified t) 7120 7121 (fontified t) 7121 7123 (fontified t face font-lock-type-face) 7123 7124 (fontified t) 7124 7129 (fontified t face font-lock-type-face) 7129 7131 (fontified t) 7131 7136 (fontified t face font-lock-type-face) 7136 7137 (fontified t) 7137 7141 (fontified t face font-lock-type-face) 7141 7167 (fontified t) 7167 7168 (fontified t syntax-table #1#) 7168 7169 (fontified t) 7169 7171 (fontified t face font-lock-type-face) 7171 7172 (fontified t) 7172 7177 (fontified t face font-lock-type-face) 7177 7179 (fontified t) 7179 7187 (fontified t face font-lock-type-face) 7187 7197 (fontified t) 7197 7199 (fontified t) 7199 7200 (fontified t) 7209 7213 (face font-lock-keyword-face) 7214 7218 (face font-lock-type-face) 7219 7222 (face font-lock-keyword-face) 7223 7231 (face font-lock-type-face) 7238 7239 (face font-lock-keyword-face) 7239 7240 (face font-lock-keyword-face) 7241 7245 (face font-lock-function-name-face) 7247 7250 (face font-lock-keyword-face) 7251 7255 (face font-lock-keyword-face) 7267 7270 (face font-lock-keyword-face) 7271 7279 (face font-lock-variable-name-face) 7282 7286 (face font-lock-keyword-face) 7307 7311 (face font-lock-keyword-face) 7345 7351 (face font-lock-keyword-face) 7352 7371 (face font-lock-type-face) 7373 7374 (face font-lock-variable-name-face) 7378 7379 (face font-lock-variable-name-face) 7380 7383 (face font-lock-keyword-face) 7384 7393 (face font-lock-type-face) 7397 7401 (face font-lock-keyword-face) 7403 7404 (face font-lock-variable-name-face) 7406 7410 (face font-lock-type-face) 7411 7414 (face font-lock-keyword-face) 7415 7434 (face font-lock-type-face) 7436 7437 (face font-lock-variable-name-face) 7445 7447 (face font-lock-keyword-face) 7448 7452 (face font-lock-function-name-face) 7454 7457 (face font-lock-keyword-face) 7458 7462 (face font-lock-keyword-face) 7464 7470 (face font-lock-variable-name-face) 7473 7476 (face font-lock-keyword-face) 7478 7480 (face font-lock-type-face) 7484 7485 (syntax-table #1#) 7486 7492 (face font-lock-type-face) 7493 7498 (face font-lock-type-face) 7500 7503 (face font-lock-constant-face) 7505 7507 (face font-lock-constant-face) 7509 7514 (face font-lock-type-face) 7526 7530 (face font-lock-keyword-face) 7555 7559 (face font-lock-keyword-face) 7561 7562 (face font-lock-variable-name-face) 7564 7573 (face font-lock-type-face) 7574 7577 (face font-lock-keyword-face) 7578 7597 (face font-lock-type-face) 7599 7600 (face font-lock-variable-name-face) 7608 7610 (face font-lock-keyword-face) 7611 7620 (face font-lock-function-name-face) 7622 7625 (face font-lock-keyword-face) 7626 7630 (face font-lock-keyword-face) 7632 7635 (face font-lock-variable-name-face) 7638 7641 (face font-lock-keyword-face) 7643 7645 (face font-lock-type-face) 7649 7650 (syntax-table #1#) 7651 7655 (face font-lock-type-face) 7656 7661 (face font-lock-type-face) 7663 7666 (face font-lock-constant-face) 7668 7670 (face font-lock-constant-face) 7672 7677 (face font-lock-type-face) 7689 7694 (face font-lock-keyword-face) 7695 7699 (face font-lock-keyword-face) 7724 7726 (face font-lock-type-face) 7731 7732 (syntax-table #1#) 7733 7735 (face font-lock-type-face) 7736 7741 (face font-lock-type-face) 7743 7748 (face font-lock-type-face) 7766 7769 (face font-lock-type-face) 7774 7775 (syntax-table #1#) 7776 7778 (face font-lock-type-face) 7779 7784 (face font-lock-type-face) 7786 7794 (face font-lock-type-face)) . 1) (undo-tree-id3418 . -6010) (undo-tree-id3419 . 1705) (undo-tree-id3420 . -6174) (undo-tree-id3421 . 1590) (undo-tree-id3422 . -6174) (undo-tree-id3423 . -6224) (undo-tree-id3424 . -6010) (undo-tree-id3425 . -6060) (undo-tree-id3426 . -4871) (undo-tree-id3427 . -6040) (undo-tree-id3428 . -6229) (undo-tree-id3429 . -6229) (undo-tree-id3430 . -5019) (undo-tree-id3431 . -6229) (undo-tree-id3432 . -6229) (undo-tree-id3433 . -5019) (undo-tree-id3434 . -6737) (undo-tree-id3435 . -6737) (undo-tree-id3436 . -5896) (undo-tree-id3437 . -6737) (undo-tree-id3438 . -6737) (undo-tree-id3439 . -5896) (undo-tree-id3440 . -6755) (undo-tree-id3441 . -6772) (undo-tree-id3442 . -4871) (undo-tree-id3443 . -6755) (undo-tree-id3444 . -6755) (undo-tree-id3445 . -4871) (undo-tree-id3446 . -6224) (undo-tree-id3447 . -5982) (undo-tree-id3448 . -5982) (undo-tree-id3449 . -6004) (undo-tree-id3450 . -6040) (undo-tree-id3451 . -6040) (undo-tree-id3452 . -4871) (undo-tree-id3453 . -6040) (undo-tree-id3454 . -6040) (undo-tree-id3455 . -4871) (undo-tree-id3456 . -6040) (undo-tree-id3457 . -6090) (undo-tree-id3458 . -6089) (undo-tree-id3459 . -4871) (undo-tree-id3460 . -6091) (undo-tree-id3461 . -6090) (undo-tree-id3462 . -4871) (undo-tree-id3463 . -6091) (undo-tree-id3464 . -4871) (undo-tree-id3465 . -6091) (undo-tree-id3466 . -6111) (undo-tree-id3467 . -6010) (undo-tree-id3468 . -6011) (undo-tree-id3469 . -6010) (undo-tree-id3470 . -6125) (undo-tree-id3471 . -6111) (undo-tree-id3472 . -6110) (undo-tree-id3473 . -4871) (undo-tree-id3474 . 1715) (undo-tree-id3475 . -6101) (undo-tree-id3476 . 1714) (undo-tree-id3477 . -6111) (undo-tree-id3478 . 1704) (undo-tree-id3479 . -6112) 6112) nil (23765 2639 608313 392000) 0 nil]) ((6103 . 6111) (6102 . 6104) (#("\"" 0 1 (fontified nil)) . -6102) (6102 . 6103) (6101 . 6103) (#("(" 0 1 (fontified nil)) . -6101) (6101 . 6102) (#("\"\"" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 6101) (undo-tree-id3480 . -1) 6102 (6101 . 6103) (#("\"" 0 1 (fontified nil)) . -6101) (6101 . 6102)) nil (23765 2639 608327 872000) 0 nil]) ((#(" " 0 1 (fontified t)) . -6113) (undo-tree-id3481 . -1) 6114 (6101 . 6114) (6100 . 6101) (6090 . 6100) (#("s" 0 1 (fontified t)) . -6090) (undo-tree-id3482 . -1) (#("t" 0 1 (fontified t)) . -6091) (undo-tree-id3483 . -1) (#("a" 0 1 (fontified t)) . -6092) (undo-tree-id3484 . -1) (#("r" 0 1 (fontified t)) . -6093) (undo-tree-id3485 . -1) 6094 (6091 . 6094) (6078 . 6091)) nil (23765 2639 608339 888000) 0 nil]) ((6071 . 6077) (#("fil" 0 3 (fontified t)) . -6071) (undo-tree-id3486 . -3) 6074 (6071 . 6074) (#("first" 0 5 (fontified t)) . 6071) (undo-tree-id3487 . -3) (undo-tree-id3488 . -3) 6074) nil (23765 2639 608348 445000) 0 nil]) ((6076 . 6078) (#("(" 0 1 (fontified nil)) . -6076) (6071 . 6077) (6070 . 6071)) nil (23765 2639 608351 832000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 6070) (6069 . 6070) (6068 . 6070) (#("(" 0 1 (fontified nil)) . -6068) (6068 . 6069) (#("*" 0 1 (fontified t)) . -6068) (undo-tree-id3489 . -1) 6069 (6068 . 6069) (6063 . 6068) (#("li" 0 2 (fontified t)) . -6063) (undo-tree-id3490 . -2) (undo-tree-id3491 . -2) 6065 (6064 . 6065) (6062 . 6064) (t 23765 2289 509852 222000)) nil (23765 2639 608362 199000) 0 nil]) ((6063 . 6064)) nil (23765 2289 402048 915000) 0 nil]) ((nil rear-nonsticky nil 6061 . 6062) (nil fontified nil 6011 . 6062) (6011 . 6062) 6010) nil (23765 2289 402064 558000) 0 nil]) ((6009 . 6011) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 6009) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (6008 . 6009) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 6008) (6007 . 6008) (6006 . 6008) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -6006) (6006 . 6007) (6005 . 6007) (#("\"" 0 1 (fontified nil)) . -6005) (6005 . 6006)) nil (23765 2289 402103 762000) 0 nil] [nil nil ((nil rear-nonsticky nil 6055 . 6056) (nil fontified nil 6005 . 6056) (6005 . 6056) 6004) ((#("&String::from_utf8_lossy(&buffer[..num_bytes_read])" 0 1 (fontified nil) 1 7 (fontified nil face font-lock-type-face) 7 50 (fontified nil) 50 51 (fontified nil rear-nonsticky nil)) . 6005) (undo-tree-id3395 . -50) (undo-tree-id3396 . -50) (undo-tree-id3397 . -50) (undo-tree-id3398 . -50) (undo-tree-id3399 . -50) (undo-tree-id3400 . -50) (undo-tree-id3401 . -50) (undo-tree-id3402 . -50) (undo-tree-id3403 . -50) (undo-tree-id3404 . -50) (undo-tree-id3405 . -24) (undo-tree-id3406 . -25) (undo-tree-id3407 . 27) (undo-tree-id3408 . -25) (undo-tree-id3409 . 26) (undo-tree-id3410 . -50) (undo-tree-id3411 . 1) (undo-tree-id3412 . -51) (undo-tree-id3413 . -1) (undo-tree-id3414 . -51) (undo-tree-id3415 . -51) (nil rear-nonsticky t 6055 . 6056)) (23765 2277 71340 915000) 0 nil]) ((6004 . 6006) (#("(" 0 1 (fontified nil)) . -6004) (6004 . 6005) (5996 . 6004) (#("pri" 0 3 (fontified t)) . -5996) (undo-tree-id3391 . -3) (undo-tree-id3392 . -3) (undo-tree-id3393 . -3) (undo-tree-id3394 . -3) 5999 (5996 . 5999) (5983 . 5996) (t 23765 2138 500489 663000) 5982) nil (23765 2277 78624 778000) 0 nil] [nil nil ((nil rear-nonsticky nil 6033 . 6034) (nil fontified nil 5983 . 6034) (5983 . 6034) 5982 (t 23765 2138 500489 663000)) ((#("&String::from_utf8_lossy(&buffer[..num_bytes_read])" 0 1 (fontified nil) 1 7 (fontified nil face font-lock-type-face) 7 50 (fontified nil) 50 51 (fontified nil rear-nonsticky nil)) . 5983) (undo-tree-id3373 . -50) (undo-tree-id3374 . -50) (undo-tree-id3375 . -50) (undo-tree-id3376 . -50) (undo-tree-id3377 . -50) (undo-tree-id3378 . -50) (undo-tree-id3379 . -50) (undo-tree-id3380 . -50) (undo-tree-id3381 . -50) (undo-tree-id3382 . -50) (undo-tree-id3383 . -24) (undo-tree-id3384 . -25) (undo-tree-id3385 . 27) (undo-tree-id3386 . -25) (undo-tree-id3387 . 26) (undo-tree-id3388 . -50) (undo-tree-id3389 . 1) (undo-tree-id3390 . -51) (nil rear-nonsticky t 6033 . 6034)) (23765 2267 62072 919000) 0 nil] [nil nil ((#("&String::from_utf8_lossy(&buffer[..num_bytes_read])" 0 1 (fontified t) 1 7 (fontified t face font-lock-type-face) 7 43 (fontified t) 43 51 (fontified t)) . 6030) (undo-tree-id3338 . -50) (undo-tree-id3339 . -50) (undo-tree-id3340 . -51) (undo-tree-id3341 . -50) (undo-tree-id3342 . -48) (undo-tree-id3343 . -47) (undo-tree-id3344 . -49) (undo-tree-id3345 . -48) (undo-tree-id3346 . -49) (undo-tree-id3347 . -49) (undo-tree-id3348 . -48) (undo-tree-id3349 . -49) (undo-tree-id3350 . -48) (undo-tree-id3351 . -50) (undo-tree-id3352 . -49) (undo-tree-id3353 . -50) (undo-tree-id3354 . -50) (undo-tree-id3355 . -49) (undo-tree-id3356 . -50) (undo-tree-id3357 . -50) (undo-tree-id3358 . -49) (undo-tree-id3359 . -50) (undo-tree-id3360 . -50) (undo-tree-id3361 . -50) (undo-tree-id3362 . -49) (undo-tree-id3363 . -50) (undo-tree-id3364 . -49) (undo-tree-id3365 . -24) (undo-tree-id3366 . -25) (undo-tree-id3367 . 27) (undo-tree-id3368 . -25) (undo-tree-id3369 . 26) (undo-tree-id3370 . -50) (undo-tree-id3371 . 1) (undo-tree-id3372 . -51) 6080 (t 23765 2138 500489 663000)) ((6030 . 6081)) (23765 2265 47594 996000) 0 nil] [nil nil ((6611 . 6619) (#("/println" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 8 (fontified t face font-lock-comment-face)) . 6611) (t 23765 2138 500489 663000)) ((6611 . 6619) (#("/Println" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 8 (fontified t face font-lock-comment-face)) . 6611) (undo-tree-id3335 . 7) (undo-tree-id3336 . -8) (undo-tree-id3337 . -8)) (23765 2148 718528 887000) 0 nil]) ((6610 . 6612) (t 23765 2133 910509 89000)) nil (23765 2267 66401 320000) 0 nil]) (6634) nil (23765 2138 409938 776000) 0 nil]) ((6536 . 6550) (6527 . 6536) (#("msg" 0 3 (fontified t)) . -6527) (undo-tree-id3328 . -3) (undo-tree-id3329 . -3) (undo-tree-id3330 . -3) (undo-tree-id3331 . -3) 6530 (#("N" 0 1 (fontified t)) . -6530) (undo-tree-id3332 . -1) (undo-tree-id3333 . -1) 6531 (6527 . 6531) (#("timeline" 0 8 (fontified t)) . 6527) (undo-tree-id3334 . -8) (t 23765 1575 219580 813000)) nil (23765 2133 805971 35000) 0 nil]) ((nil rear-nonsticky nil 6594 . 6595) (#("
" 0 1 (fontified nil)) . -6620) (6578 . 6621)) nil (23765 1575 130246 707000) 0 nil]) ((#("                " 0 16 (fontified t)) . -6578) (undo-tree-id3318 . -16) (undo-tree-id3319 . -16) 6594 (6577 . 6594) 6560) nil (23765 1575 130269 399000) 0 nil]) ((#("                println!(\"{:#?}\", &self);
" 0 16 (fontified t) 16 24 (fontified t face rust-builtin-formatting-macro-face) 24 25 (fontified t) 25 26 (fontified t face font-lock-string-face) 26 31 (fontified t face rust-string-interpolation-face) 31 32 (fontified t face font-lock-string-face) 32 35 (fontified t) 35 39 (fontified t face font-lock-keyword-face) 39 41 (fontified t) 41 42 (fontified t)) . 6085) (undo-tree-id3320 . -35) (undo-tree-id3321 . -35) (undo-tree-id3322 . -35) (undo-tree-id3323 . -35) (undo-tree-id3324 . -35) (undo-tree-id3325 . -35) (undo-tree-id3326 . -33) (undo-tree-id3327 . -33) 6118 (t 23765 1479 833336 991000)) nil (23765 1575 130285 301000) 0 nil]) ((1 . 7653) (#("//! Interfacing with Redis and stream the results on to the `StreamManager`
use crate::redis_cmd;
use crate::user::User;
use futures::stream::Stream;
use futures::{Async, Poll};
use log::info;
use regex::Regex;
use serde_json::Value;
use std::collections::{HashMap, VecDeque};
use std::io::{Read, Write};
use std::net::TcpStream;
use std::time::{Duration, Instant};
use tokio::io::{AsyncRead, Error};
use uuid::Uuid;

#[derive(Debug)]
struct MsgQueue {
    messages: VecDeque<Value>,
    last_polled_at: Instant,
    redis_channel: String,
}
impl MsgQueue {
    fn new(redis_channel: impl std::fmt::Display) -> Self {
        let redis_channel = redis_channel.to_string();
        MsgQueue {
            messages: VecDeque::new(),
            last_polled_at: Instant::now(),
            redis_channel,
        }
    }
}

/// The item that streams from Redis and is polled by the `StreamManger`
#[derive(Debug)]
pub struct Receiver {
    pubsub_connection: TcpStream,
    secondary_redis_connection: TcpStream,
    tl: String,
    pub user: User,
    manager_id: Uuid,
    msg_queues: HashMap<Uuid, MsgQueue>,
    clients_per_timeline: HashMap<String, i32>,
}
impl Default for Receiver {
    fn default() -> Self {
        Self::new()
    }
}
impl Receiver {
    pub fn new() -> Self {
        let pubsub_connection = TcpStream::connect(\"127.0.0.1:6379\").expect(\"Can connect to Redis\");
        pubsub_connection
            .set_read_timeout(Some(Duration::from_millis(10)))
            .expect(\"Can set read timeout for Redis connection\");
        let secondary_redis_connection =
            TcpStream::connect(\"127.0.0.1:6379\").expect(\"Can connect to Redis\");
        secondary_redis_connection
            .set_read_timeout(Some(Duration::from_millis(10)))
            .expect(\"Can set read timeout for Redis connection\");
        Self {
            pubsub_connection,
            secondary_redis_connection,
            tl: String::new(),
            user: User::public(),
            manager_id: Uuid::new_v4(),
            msg_queues: HashMap::new(),
            clients_per_timeline: HashMap::new(),
        }
    }

    /// Update the `StreamManager` that is currently polling the `Receiver`
    pub fn update(&mut self, id: Uuid, timeline: impl std::fmt::Display) {
        self.manager_id = id;
        self.tl = timeline.to_string();
    }

    /// Send a subscribe command to the Redis PubSub (if needed)
    pub fn maybe_subscribe(&mut self, tl: &str) {
        info!(\"Subscribing to {}\", &tl);

        let manager_id = self.manager_id;
        self.msg_queues.insert(manager_id, MsgQueue::new(tl));
        let current_clients = self
            .clients_per_timeline
            .entry(tl.to_string())
            .and_modify(|n| *n += 1)
            .or_insert(1);

        if *current_clients == 1 {
            let subscribe_cmd = redis_cmd::pubsub(\"subscribe\", tl);
            self.pubsub_connection
                .write_all(&subscribe_cmd)
                .expect(\"Can subscribe to Redis\");
            let set_subscribed_cmd = redis_cmd::set(format!(\"subscribed:timeline:{}\", tl), \"1\");
            self.secondary_redis_connection
                .write_all(&set_subscribed_cmd)
                .expect(\"Can set Redis\");
            info!(\"Now subscribed to: {:#?}\", &self.msg_queues);
        }
    }

    /// Drop any PubSub subscriptions that don't have active clients
    pub fn unsubscribe_from_empty_channels(&mut self) {
        let mut timelines_with_fewer_clients = Vec::new();

        // Keep only message queues that have been polled recently
        self.msg_queues.retain(|_id, msg_queue| {
            if msg_queue.last_polled_at.elapsed() < Duration::from_secs(30) {
                true
            } else {
                timelines_with_fewer_clients.push(msg_queue.redis_channel.clone());
                false
            }
        });

        // Record the lower number of clients subscribed to that channel
        for timeline in timelines_with_fewer_clients {
            let count_of_subscribed_clients = self
                .clients_per_timeline
                .entry(timeline.clone())
                .and_modify(|n| *n -= 1)
                .or_insert(0);
            // If no clients, unsubscribe from the channel
            if *count_of_subscribed_clients <= 0 {
                self.unsubscribe(&timeline);
            }
        }
    }

    /// Send an unsubscribe command to the Redis PubSub
    pub fn unsubscribe(&mut self, tl: &str) {
        let unsubscribe_cmd = redis_cmd::pubsub(\"unsubscribe\", tl);
        info!(\"Unsubscribing from {}\", &tl);
        self.pubsub_connection
            .write_all(&unsubscribe_cmd)
            .expect(\"Can unsubscribe from Redis\");
        let set_subscribed_cmd = redis_cmd::set(format!(\"subscribed:timeline:{}\", tl), \"0\");
        self.secondary_redis_connection
            .write_all(&set_subscribed_cmd)
            .expect(\"Can set Redis\");
        info!(\"Now subscribed only to: {:#?}\", &self.msg_queues);
    }
}
impl Stream for Receiver {
    type Item = Value;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<Value>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        info!(\"Being polled by: {}\", self.manager_id);
        let timeline = self.tl.clone();

        // Record current time as last polled time
        self.msg_queues
            .entry(self.manager_id)
            .and_modify(|msg_queue| msg_queue.last_polled_at = Instant::now());

        // Add any incomming messages to the back of the relevant `msg_queues`
        // NOTE: This could be more/other than the `msg_queue` currently being polled
        let mut async_stream = AsyncReadableStream(&mut self.pubsub_connection);
        if let Async::Ready(num_bytes_read) = async_stream.poll_read(&mut buffer)? {
            // capture everything between `{` and `}` as potential JSON
            let re = Regex::new(r\"(?P<json>\\{.*\\})\").expect(\"Valid hard-coded regex\");
            if let Some(result) = re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read])) {
                        println!(\"{:#?}\", &self);
                let msg: Value = serde_json::from_str(&result[\"json\"].to_string().clone())?;
                for msg_queue in self.msg_queues.values_mut() {
                    if msg_queue.redis_channel == timeline {
                        msg_queue.messages.push_back(msg.clone());
                        println!(\"Accepted msg for: {}\", &timeline);
                    } else {
                        println!(\"Rejecting msg for: {}\", &timeline);
                    }
                }
            }
        }

        // If the `msg_queue` being polled has any new messages, return the first (oldest) one
        match self
            .msg_queues
            .entry(self.manager_id)
            .or_insert_with(|| MsgQueue::new(timeline))
            .messages
            .pop_front()
        {
            Some(value) => Ok(Async::Ready(Some(value))),
            _ => Ok(Async::NotReady),
        }
    }
}

impl Drop for Receiver {
    fn drop(&mut self) {
        let timeline = self.tl.clone();
        self.unsubscribe(&timeline);
    }
}

struct AsyncReadableStream<'a>(&'a mut TcpStream);

impl<'a> Read for AsyncReadableStream<'a> {
    fn read(&mut self, buffer: &mut [u8]) -> Result<usize, std::io::Error> {
        self.0.read(buffer)
    }
}

impl<'a> AsyncRead for AsyncReadableStream<'a> {
    fn poll_read(&mut self, buf: &mut [u8]) -> Poll<usize, std::io::Error> {
        match self.read(buf) {
            Ok(t) => Ok(Async::Ready(t)),
            Err(_) => Ok(Async::NotReady),
        }
    }
}
" 0 76 (face font-lock-doc-face) 76 79 (face font-lock-keyword-face) 80 85 (face font-lock-keyword-face) 98 101 (face font-lock-keyword-face) 102 107 (face font-lock-keyword-face) 109 113 (face font-lock-constant-face) 115 119 (face font-lock-type-face) 121 124 (face font-lock-keyword-face) 125 132 (face font-lock-constant-face) 134 140 (face font-lock-constant-face) 142 148 (face font-lock-type-face) 150 153 (face font-lock-keyword-face) 154 161 (face font-lock-constant-face) 164 169 (face font-lock-type-face) 171 175 (face font-lock-type-face) 178 181 (face font-lock-keyword-face) 182 185 (face font-lock-constant-face) 193 196 (face font-lock-keyword-face) 197 202 (face font-lock-constant-face) 204 209 (face font-lock-type-face) 211 214 (face font-lock-keyword-face) 215 225 (face font-lock-constant-face) 227 232 (face font-lock-type-face) 234 237 (face font-lock-keyword-face) 238 241 (face font-lock-constant-face) 243 254 (face font-lock-constant-face) 257 264 (face font-lock-type-face) 266 274 (face font-lock-type-face) 277 280 (face font-lock-keyword-face) 281 284 (face font-lock-constant-face) 286 288 (face font-lock-constant-face) 291 295 (face font-lock-type-face) 297 302 (face font-lock-type-face) 305 308 (face font-lock-keyword-face) 309 312 (face font-lock-constant-face) 314 317 (face font-lock-constant-face) 319 328 (face font-lock-type-face) 330 333 (face font-lock-keyword-face) 334 337 (face font-lock-constant-face) 339 343 (face font-lock-constant-face) 346 354 (face font-lock-type-face) 356 363 (face font-lock-type-face) 366 369 (face font-lock-keyword-face) 370 375 (face font-lock-constant-face) 377 379 (face font-lock-constant-face) 382 391 (face font-lock-type-face) 393 398 (face font-lock-type-face) 401 404 (face font-lock-keyword-face) 405 409 (face font-lock-constant-face) 411 415 (face font-lock-type-face) 418 434 (face font-lock-preprocessor-face) 435 441 (face font-lock-keyword-face) 442 450 (face font-lock-type-face) 457 465 (face font-lock-variable-name-face) 467 475 (face font-lock-type-face) 476 481 (face font-lock-type-face) 488 500 (face font-lock-variable-name-face) 500 502 (face font-lock-variable-name-face) 504 511 (face font-lock-type-face) 517 530 (face font-lock-variable-name-face) 532 538 (face font-lock-type-face) 542 546 (face font-lock-keyword-face) 547 555 (face font-lock-type-face) 562 564 (face font-lock-keyword-face) 565 568 (face font-lock-function-name-face) 569 582 (face font-lock-variable-name-face) 584 588 (face font-lock-keyword-face) 589 592 (face font-lock-constant-face) 594 597 (face font-lock-constant-face) 599 606 (face font-lock-type-face) 609 610 (syntax-table #1#) 611 615 (face font-lock-type-face) 626 629 (face font-lock-keyword-face) 630 643 (face font-lock-variable-name-face) 681 689 (face font-lock-type-face) 704 712 (face font-lock-variable-name-face) 714 722 (face font-lock-type-face) 743 757 (face font-lock-variable-name-face) 759 766 (face font-lock-type-face) 821 894 (face font-lock-doc-face) 894 910 (face font-lock-preprocessor-face) 911 914 (face font-lock-keyword-face) 915 921 (face font-lock-keyword-face) 922 930 (face font-lock-type-face) 937 954 (face font-lock-variable-name-face) 956 965 (face font-lock-type-face) 971 997 (face font-lock-variable-name-face) 999 1008 (face font-lock-type-face) 1014 1016 (face font-lock-variable-name-face) 1018 1024 (face font-lock-type-face) 1030 1033 (face font-lock-keyword-face) 1034 1038 (face font-lock-variable-name-face) 1040 1044 (face font-lock-type-face) 1050 1060 (face font-lock-variable-name-face) 1062 1066 (face font-lock-type-face) 1072 1082 (face font-lock-variable-name-face) 1084 1091 (face font-lock-type-face) 1092 1096 (face font-lock-type-face) 1098 1106 (face font-lock-type-face) 1113 1133 (face font-lock-variable-name-face) 1135 1142 (face font-lock-type-face) 1143 1149 (face font-lock-type-face) 1151 1154 (face font-lock-type-face) 1159 1163 (face font-lock-keyword-face) 1164 1171 (face font-lock-type-face) 1172 1175 (face font-lock-keyword-face) 1176 1184 (face font-lock-type-face) 1191 1193 (face font-lock-keyword-face) 1194 1201 (face font-lock-function-name-face) 1205 1206 (syntax-table #1#) 1207 1211 (face font-lock-type-face) 1222 1226 (face font-lock-type-face) 1242 1246 (face font-lock-keyword-face) 1247 1255 (face font-lock-type-face) 1262 1265 (face font-lock-keyword-face) 1266 1268 (face font-lock-keyword-face) 1269 1272 (face font-lock-function-name-face) 1276 1277 (syntax-table #1#) 1278 1282 (face font-lock-type-face) 1293 1296 (face font-lock-keyword-face) 1297 1314 (face font-lock-variable-name-face) 1317 1326 (face font-lock-type-face) 1336 1352 (face font-lock-string-face) 1361 1383 (face font-lock-string-face) 1442 1446 (face font-lock-type-face) 1447 1455 (face font-lock-type-face) 1495 1526 (face font-lock-string-face) 1526 1538 (face font-lock-string-face) 1728 1732 (face font-lock-type-face) 1733 1741 (face font-lock-type-face) 1781 1824 (face font-lock-string-face) 1835 1839 (face font-lock-type-face) 1925 1927 (face font-lock-variable-name-face) 1929 1935 (face font-lock-type-face) 1956 1960 (face font-lock-variable-name-face) 1962 1966 (face font-lock-type-face) 1990 2000 (face font-lock-variable-name-face) 2002 2006 (face font-lock-type-face) 2030 2040 (face font-lock-variable-name-face) 2042 2049 (face font-lock-type-face) 2070 2090 (face font-lock-variable-name-face) 2092 2099 (face font-lock-type-face) 2129 2163 (face font-lock-doc-face) 2163 2201 (face font-lock-doc-face) 2205 2208 (face font-lock-keyword-face) 2209 2211 (face font-lock-keyword-face) 2212 2218 (face font-lock-function-name-face) 2220 2223 (face font-lock-keyword-face) 2224 2228 (face font-lock-keyword-face) 2230 2232 (face font-lock-variable-name-face) 2234 2238 (face font-lock-type-face) 2240 2248 (face font-lock-variable-name-face) 2250 2254 (face font-lock-keyword-face) 2255 2258 (face font-lock-constant-face) 2260 2263 (face font-lock-constant-face) 2265 2272 (face font-lock-type-face) 2284 2288 (face font-lock-keyword-face) 2314 2318 (face font-lock-keyword-face) 2357 2418 (face font-lock-doc-face) 2422 2425 (face font-lock-keyword-face) 2426 2428 (face font-lock-keyword-face) 2429 2444 (face font-lock-function-name-face) 2446 2449 (face font-lock-keyword-face) 2450 2454 (face font-lock-keyword-face) 2456 2458 (face font-lock-variable-name-face) 2461 2464 (face font-lock-type-face) 2476 2481 (face font-lock-preprocessor-face) 2482 2501 (face font-lock-string-face) 2518 2521 (face font-lock-keyword-face) 2522 2532 (face font-lock-variable-name-face) 2535 2539 (face font-lock-keyword-face) 2560 2564 (face font-lock-keyword-face) 2595 2603 (face font-lock-type-face) 2623 2626 (face font-lock-keyword-face) 2627 2642 (face font-lock-variable-name-face) 2645 2649 (face font-lock-keyword-face) 2792 2794 (face font-lock-keyword-face) 2831 2834 (face font-lock-keyword-face) 2835 2848 (face font-lock-variable-name-face) 2851 2860 (face font-lock-constant-face) 2869 2880 (face font-lock-string-face) 2899 2903 (face font-lock-keyword-face) 2989 3013 (face font-lock-string-face) 3028 3031 (face font-lock-keyword-face) 3032 3050 (face font-lock-variable-name-face) 3053 3062 (face font-lock-constant-face) 3068 3075 (face rust-builtin-formatting-macro-face) 3076 3097 (face font-lock-string-face) 3097 3099 (face rust-string-interpolation-face) 3099 3100 (face font-lock-string-face) 3107 3110 (face font-lock-string-face) 3125 3129 (face font-lock-keyword-face) 3229 3244 (face font-lock-string-face) 3259 3264 (face font-lock-preprocessor-face) 3265 3291 (face font-lock-string-face) 3294 3298 (face font-lock-keyword-face) 3333 3398 (face font-lock-doc-face) 3402 3405 (face font-lock-keyword-face) 3406 3408 (face font-lock-keyword-face) 3409 3440 (face font-lock-function-name-face) 3442 3445 (face font-lock-keyword-face) 3446 3450 (face font-lock-keyword-face) 3462 3465 (face font-lock-keyword-face) 3466 3469 (face font-lock-keyword-face) 3470 3498 (face font-lock-variable-name-face) 3501 3504 (face font-lock-type-face) 3522 3525 (face font-lock-comment-delimiter-face) 3525 3581 (face font-lock-comment-face) 3589 3593 (face font-lock-keyword-face) 3643 3645 (face font-lock-keyword-face) 3681 3682 (syntax-table #1#) 3683 3691 (face font-lock-type-face) 3725 3729 (face font-lock-keyword-face) 3744 3748 (face font-lock-keyword-face) 3851 3856 (face font-lock-keyword-face) 3892 3895 (face font-lock-comment-delimiter-face) 3895 3957 (face font-lock-comment-face) 3965 3968 (face font-lock-keyword-face) 3978 3980 (face font-lock-keyword-face) 4024 4027 (face font-lock-keyword-face) 4028 4055 (face font-lock-variable-name-face) 4058 4062 (face font-lock-keyword-face) 4226 4229 (face font-lock-comment-delimiter-face) 4229 4273 (face font-lock-comment-face) 4285 4287 (face font-lock-keyword-face) 4317 4318 (syntax-table #1#) 4340 4344 (face font-lock-keyword-face) 4404 4456 (face font-lock-doc-face) 4460 4463 (face font-lock-keyword-face) 4464 4466 (face font-lock-keyword-face) 4467 4478 (face font-lock-function-name-face) 4480 4483 (face font-lock-keyword-face) 4484 4488 (face font-lock-keyword-face) 4490 4492 (face font-lock-variable-name-face) 4495 4498 (face font-lock-type-face) 4510 4513 (face font-lock-keyword-face) 4514 4529 (face font-lock-variable-name-face) 4532 4541 (face font-lock-constant-face) 4550 4563 (face font-lock-string-face) 4578 4583 (face font-lock-preprocessor-face) 4584 4607 (face font-lock-string-face) 4623 4627 (face font-lock-keyword-face) 4707 4735 (face font-lock-string-face) 4746 4749 (face font-lock-keyword-face) 4750 4768 (face font-lock-variable-name-face) 4771 4780 (face font-lock-constant-face) 4786 4793 (face rust-builtin-formatting-macro-face) 4794 4815 (face font-lock-string-face) 4815 4817 (face rust-string-interpolation-face) 4817 4818 (face font-lock-string-face) 4825 4828 (face font-lock-string-face) 4839 4843 (face font-lock-keyword-face) 4935 4950 (face font-lock-string-face) 4961 4966 (face font-lock-preprocessor-face) 4967 4998 (face font-lock-string-face) 5001 5005 (face font-lock-keyword-face) 5027 5031 (face font-lock-keyword-face) 5032 5038 (face font-lock-type-face) 5039 5042 (face font-lock-keyword-face) 5043 5051 (face font-lock-type-face) 5058 5062 (face font-lock-keyword-face) 5063 5067 (face font-lock-type-face) 5070 5075 (face font-lock-type-face) 5081 5085 (face font-lock-keyword-face) 5086 5091 (face font-lock-type-face) 5094 5099 (face font-lock-type-face) 5106 5108 (face font-lock-keyword-face) 5109 5113 (face font-lock-function-name-face) 5115 5118 (face font-lock-keyword-face) 5119 5123 (face font-lock-keyword-face) 5126 5127 (syntax-table #1#) 5128 5132 (face font-lock-type-face) 5133 5139 (face font-lock-type-face) 5140 5145 (face font-lock-type-face) 5148 5152 (face font-lock-type-face) 5154 5159 (face font-lock-type-face) 5171 5174 (face font-lock-keyword-face) 5175 5178 (face font-lock-keyword-face) 5179 5185 (face font-lock-variable-name-face) 5188 5192 (face font-lock-preprocessor-face) 5213 5218 (face font-lock-preprocessor-face) 5219 5240 (face font-lock-string-face) 5242 5246 (face font-lock-keyword-face) 5268 5271 (face font-lock-keyword-face) 5272 5280 (face font-lock-variable-name-face) 5283 5287 (face font-lock-keyword-face) 5301 5309 (fontified t) 5309 5312 (fontified t face font-lock-comment-delimiter-face) 5312 5352 (fontified t face font-lock-comment-face) 5352 5360 (fontified t) 5360 5362 (fontified t face font-lock-keyword-face) 5362 5364 (fontified t face font-lock-keyword-face) 5364 5376 (fontified t) 5376 5395 (fontified t) 5395 5399 (fontified t face font-lock-keyword-face) 5399 5475 (fontified t) 5475 5482 (fontified t face font-lock-type-face) 5482 5501 (fontified t) 5501 5504 (fontified t face font-lock-comment-delimiter-face) 5504 5572 (fontified t face font-lock-comment-face) 5572 5580 (fontified t) 5580 5583 (fontified t face font-lock-comment-delimiter-face) 5583 5658 (fontified t face font-lock-comment-face) 5658 5666 (fontified t) 5666 5669 (fontified t face font-lock-keyword-face) 5669 5670 (fontified t) 5670 5673 (fontified t face font-lock-keyword-face) 5673 5674 (fontified t) 5674 5686 (fontified t face font-lock-variable-name-face) 5686 5689 (fontified t) 5689 5708 (fontified t face font-lock-type-face) 5708 5710 (fontified t) 5710 5713 (fontified t face font-lock-keyword-face) 5713 5714 (fontified t) 5714 5718 (fontified t face font-lock-keyword-face) 5718 5747 (fontified t) 5747 5749 (fontified t face font-lock-keyword-face) 5749 5750 (fontified t) 5750 5753 (fontified t face font-lock-keyword-face) 5753 5754 (fontified t) 5754 5759 (fontified t face font-lock-type-face) 5759 5761 (fontified t) 5761 5766 (fontified t face font-lock-type-face) 5766 5799 (fontified t) 5799 5801 (fontified t) 5801 5809 (fontified t) 5809 5812 (face font-lock-keyword-face fontified t) 5812 5820 (fontified t) 5820 5821 (face rust-question-mark-face fontified t) 5821 5824 (fontified t) 5824 5836 (fontified t) 5836 5839 (fontified t face font-lock-comment-delimiter-face) 5839 5876 (fontified t face font-lock-comment-face) 5876 5896 (fontified t face font-lock-comment-face) 5896 5908 (fontified t) 5908 5911 (fontified t face font-lock-keyword-face) 5911 5912 (fontified t) 5912 5914 (fontified t face font-lock-variable-name-face) 5914 5917 (fontified t) 5917 5922 (fontified t face font-lock-type-face) 5922 5928 (fontified t) 5928 5929 (syntax-table #2# fontified t face font-lock-string-face) 5929 5946 (fontified t face font-lock-string-face) 5946 5947 (syntax-table #3# fontified t face font-lock-string-face) 5947 5956 (fontified t) 5956 5980 (fontified t face font-lock-string-face) 5980 5983 (fontified t) 5983 5995 (fontified t) 5995 5997 (fontified t face font-lock-keyword-face) 5997 5998 (fontified t) 5998 6001 (fontified t face font-lock-keyword-face) 6001 6002 (fontified t) 6002 6006 (fontified t face font-lock-type-face) 6006 6030 (fontified t) 6030 6036 (fontified t face font-lock-type-face) 6036 6084 (fontified t) 6084 6107 (fontified t) 6107 6108 (rear-nonsticky t fontified t) 6108 6116 (fontified t face rust-builtin-formatting-macro-face) 6116 6117 (fontified t) 6117 6118 (fontified t face font-lock-string-face) 6118 6123 (fontified t face rust-string-interpolation-face) 6123 6124 (fontified t face font-lock-string-face) 6124 6127 (fontified t) 6127 6131 (fontified t face font-lock-keyword-face) 6131 6133 (fontified t) 6133 6134 (fontified t) 6134 6150 (fontified t) 6150 6153 (fontified t face font-lock-keyword-face) 6153 6154 (fontified t) 6154 6157 (fontified t face font-lock-variable-name-face) 6157 6159 (fontified t) 6159 6164 (fontified t face font-lock-type-face) 6164 6167 (fontified t) 6167 6177 (fontified t face font-lock-constant-face) 6177 6196 (fontified t) 6196 6202 (fontified t face font-lock-string-face) 6202 6224 (fontified t) 6224 6225 (fontified t face rust-question-mark-face) 6225 6227 (fontified t) 6227 6243 (fontified t) 6243 6246 (fontified t face font-lock-keyword-face) 6246 6257 (fontified t) 6257 6259 (fontified t face font-lock-keyword-face) 6259 6260 (fontified t) 6260 6264 (fontified t face font-lock-keyword-face) 6264 6311 (fontified t) 6311 6313 (fontified t face font-lock-keyword-face) 6313 6325 (fontified t) 6325 6352 (fontified t) 6352 6374 (fontified t) 6374 6419 (fontified t) 6419 6442 (fontified t) 6442 6443 (rear-nonsticky t fontified t) 6443 6451 (fontified t face rust-builtin-formatting-macro-face) 6451 6452 (fontified t) 6452 6471 (fontified t face font-lock-string-face) 6471 6473 (fontified t face rust-string-interpolation-face) 6473 6474 (fontified t face font-lock-string-face) 6474 6487 (fontified t) 6487 6488 (fontified t) 6488 6510 (fontified t) 6510 6514 (fontified t face font-lock-keyword-face) 6514 6515 (fontified t) 6515 6517 (fontified t) 6517 6541 (fontified t) 6541 6549 (fontified t face rust-builtin-formatting-macro-face) 6549 6550 (fontified t) 6550 6570 (fontified t face font-lock-string-face) 6570 6572 (fontified t face rust-string-interpolation-face) 6572 6573 (fontified t face font-lock-string-face) 6573 6634 (fontified t) 6634 6641 (fontified t) 6641 6660 (fontified t) 6660 6663 (fontified t face font-lock-comment-delimiter-face) 6663 6727 (fontified t face font-lock-comment-face) 6727 6747 (fontified t face font-lock-comment-face) 6747 6755 (fontified t) 6755 6760 (fontified t face font-lock-keyword-face) 6760 6761 (fontified t) 6761 6765 (fontified t face font-lock-keyword-face) 6765 6809 (fontified t) 6809 6813 (fontified t face font-lock-keyword-face) 6813 6852 (fontified t) 6852 6857 (fontified t) 6857 6865 (fontified t face font-lock-type-face) 6865 6882 (fontified t) 6882 6951 (fontified t) 6951 6955 (fontified t face font-lock-type-face) 6955 6964 (fontified t) 6964 6965 (syntax-table #1# fontified t) 6965 6966 (fontified t) 6966 6968 (fontified t face font-lock-type-face) 6968 6969 (fontified t) 6969 6974 (fontified t face font-lock-type-face) 6974 6976 (fontified t) 6976 6981 (fontified t face font-lock-type-face) 6981 6982 (fontified t) 6982 6986 (fontified t face font-lock-type-face) 6986 6988 (fontified t) 6988 6997 (fontified t) 6997 7012 (fontified t) 7012 7013 (syntax-table #1# fontified t) 7013 7014 (fontified t) 7014 7016 (fontified t face font-lock-type-face) 7016 7017 (fontified t) 7017 7022 (fontified t face font-lock-type-face) 7022 7024 (fontified t) 7024 7032 (fontified t face font-lock-type-face) 7032 7035 (fontified t) 7035 7054 (fontified t) 7054 7058 (fontified t face font-lock-keyword-face) 7058 7059 (fontified t) 7059 7063 (fontified t face font-lock-type-face) 7063 7064 (fontified t) 7064 7067 (fontified t face font-lock-keyword-face) 7067 7068 (fontified t) 7068 7076 (fontified t face font-lock-type-face) 7076 7083 (fontified t) 7083 7085 (fontified t face font-lock-keyword-face) 7085 7086 (fontified t) 7086 7090 (fontified t face font-lock-function-name-face) 7090 7092 (fontified t) 7092 7095 (fontified t face font-lock-keyword-face) 7095 7096 (fontified t) 7096 7100 (fontified t face font-lock-keyword-face) 7100 7112 (fontified t) 7112 7115 (fontified t face font-lock-keyword-face) 7115 7116 (fontified t) 7116 7124 (fontified t face font-lock-variable-name-face) 7124 7127 (fontified t) 7127 7131 (fontified t face font-lock-keyword-face) 7131 7141 (fontified t) 7141 7144 (fontified t) 7144 7152 (fontified t) 7152 7156 (fontified t face font-lock-keyword-face) 7156 7190 (fontified t) 7190 7196 (fontified t face font-lock-keyword-face) 7196 7197 (fontified t) 7197 7216 (fontified t face font-lock-type-face) 7216 7218 (fontified t) 7218 7219 (fontified t face font-lock-variable-name-face) 7219 7223 (fontified t) 7223 7224 (fontified t face font-lock-variable-name-face) 7224 7225 (fontified t) 7225 7228 (fontified t face font-lock-keyword-face) 7228 7229 (fontified t) 7229 7238 (fontified t face font-lock-type-face) 7238 7242 (fontified t) 7242 7246 (fontified t face font-lock-keyword-face) 7246 7247 (fontified t) 7247 7248 (fontified t) 7248 7249 (fontified t face font-lock-variable-name-face) 7249 7251 (fontified t) 7251 7255 (fontified t face font-lock-type-face) 7255 7256 (fontified t) 7256 7259 (fontified t face font-lock-keyword-face) 7259 7260 (fontified t) 7260 7279 (fontified t face font-lock-type-face) 7279 7281 (fontified t) 7281 7282 (fontified t face font-lock-variable-name-face) 7282 7286 (fontified t) 7286 7290 (fontified t) 7290 7292 (fontified t face font-lock-keyword-face) 7292 7293 (fontified t) 7293 7297 (fontified t face font-lock-function-name-face) 7297 7299 (fontified t) 7299 7302 (fontified t face font-lock-keyword-face) 7302 7303 (fontified t) 7303 7307 (fontified t face font-lock-keyword-face) 7307 7309 (fontified t) 7309 7315 (fontified t face font-lock-variable-name-face) 7315 7318 (fontified t) 7318 7321 (fontified t face font-lock-keyword-face) 7321 7323 (fontified t) 7323 7325 (fontified t face font-lock-type-face) 7325 7329 (fontified t) 7329 7330 (fontified t syntax-table #1#) 7330 7331 (fontified t) 7331 7337 (fontified t face font-lock-type-face) 7337 7338 (fontified t) 7338 7343 (fontified t face font-lock-type-face) 7343 7345 (fontified t) 7345 7348 (fontified t face font-lock-constant-face) 7348 7350 (fontified t) 7350 7352 (fontified t face font-lock-constant-face) 7352 7354 (fontified t) 7354 7359 (fontified t face font-lock-type-face) 7359 7371 (fontified t) 7371 7375 (fontified t face font-lock-keyword-face) 7375 7382 (fontified t) 7382 7391 (fontified t) 7391 7400 (fontified t) 7400 7404 (fontified t face font-lock-keyword-face) 7404 7406 (fontified t) 7406 7407 (fontified t face font-lock-variable-name-face) 7407 7409 (fontified t) 7409 7418 (fontified t face font-lock-type-face) 7418 7419 (fontified t) 7419 7422 (fontified t face font-lock-keyword-face) 7422 7423 (fontified t) 7423 7442 (fontified t face font-lock-type-face) 7442 7444 (fontified t) 7444 7445 (fontified t face font-lock-variable-name-face) 7445 7453 (fontified t) 7453 7455 (fontified t face font-lock-keyword-face) 7455 7456 (fontified t) 7456 7465 (fontified t face font-lock-function-name-face) 7465 7467 (fontified t) 7467 7470 (fontified t face font-lock-keyword-face) 7470 7471 (fontified t) 7471 7475 (fontified t face font-lock-keyword-face) 7475 7477 (fontified t) 7477 7480 (fontified t face font-lock-variable-name-face) 7480 7483 (fontified t) 7483 7486 (fontified t face font-lock-keyword-face) 7486 7488 (fontified t) 7488 7490 (fontified t face font-lock-type-face) 7490 7494 (fontified t) 7494 7495 (fontified t syntax-table #1#) 7495 7496 (fontified t) 7496 7497 (fontified t face font-lock-type-face) 7497 7500 (fontified t face font-lock-type-face) 7500 7501 (fontified t) 7501 7506 (fontified t face font-lock-type-face) 7506 7508 (fontified t) 7508 7511 (fontified t face font-lock-constant-face) 7511 7513 (fontified t) 7513 7515 (fontified t face font-lock-constant-face) 7515 7517 (fontified t) 7517 7522 (fontified t face font-lock-type-face) 7522 7526 (fontified t) 7526 7534 (fontified t) 7534 7535 (fontified t face font-lock-keyword-face) 7535 7539 (fontified t face font-lock-keyword-face) 7539 7540 (fontified t) 7540 7544 (fontified t face font-lock-keyword-face) 7544 7557 (fontified t) 7557 7569 (fontified t) 7569 7571 (fontified t face font-lock-type-face) 7571 7576 (fontified t) 7576 7577 (fontified t syntax-table #1#) 7577 7578 (fontified t) 7578 7580 (fontified t face font-lock-type-face) 7580 7581 (fontified t) 7581 7586 (fontified t face font-lock-type-face) 7586 7588 (fontified t) 7588 7593 (fontified t face font-lock-type-face) 7593 7611 (fontified t) 7611 7614 (fontified t face font-lock-type-face) 7614 7619 (fontified t) 7619 7620 (fontified t syntax-table #1#) 7620 7621 (fontified t) 7621 7623 (fontified t face font-lock-type-face) 7623 7624 (fontified t) 7624 7629 (fontified t face font-lock-type-face) 7629 7631 (fontified t) 7631 7639 (fontified t face font-lock-type-face) 7639 7644 (fontified t) 7644 7652 (fontified t)) . 1) (undo-tree-id3269 . -6134) (undo-tree-id3270 . 1539) (undo-tree-id3271 . -6084) (undo-tree-id3272 . -6133) (undo-tree-id3273 . -5301) (undo-tree-id3274 . -6108) (undo-tree-id3275 . -5300) (undo-tree-id3276 . -5300) (undo-tree-id3277 . -4399) (undo-tree-id3278 . -5300) (undo-tree-id3279 . -5300) (undo-tree-id3280 . -4399) (undo-tree-id3281 . -6419) (undo-tree-id3282 . -6460) (undo-tree-id3283 . -6460) (undo-tree-id3284 . -4399) (undo-tree-id3285 . -6460) (undo-tree-id3286 . -6460) (undo-tree-id3287 . -5205) (undo-tree-id3288 . -2459) (undo-tree-id3289 . -2507) (undo-tree-id3290 . -1663) (undo-tree-id3291 . -6488) (undo-tree-id3292 . -2459) (undo-tree-id3293 . -6488) (undo-tree-id3294 . -6488) (undo-tree-id3295 . -2459) (undo-tree-id3296 . -5983) (undo-tree-id3297 . -5983) (undo-tree-id3298 . -6108) (undo-tree-id3299 . -6108) (undo-tree-id3300 . -5301) (undo-tree-id3301 . -6108) (undo-tree-id3302 . -6108) (undo-tree-id3303 . -5301) (undo-tree-id3304 . -6108) (undo-tree-id3305 . -6108) (undo-tree-id3306 . -6108) (undo-tree-id3307 . -5301) (undo-tree-id3308 . -6108) (undo-tree-id3309 . -6108) (undo-tree-id3310 . -5301) (undo-tree-id3311 . -6108) (undo-tree-id3312 . -5301) (undo-tree-id3313 . -6108) (undo-tree-id3314 . -6119) (undo-tree-id3315 . -6119) (undo-tree-id3316 . -6120) (undo-tree-id3317 . -5301) 6120) nil (23765 1479 743495 439000) 0 nil]) ((6121 . 6122)) nil (23765 1479 743504 82000) 0 nil] [nil ([nil nil ((#(" " 0 1 (fontified t)) . 6150) (t 23765 1373 300482 524000)) ((6150 . 6151)) (23765 1394 1598 801000) 0 nil]) ((1 . 7652) (#("//! Interfacing with Redis and stream the results on to the `StreamManager`
use crate::redis_cmd;
use crate::user::User;
use futures::stream::Stream;
use futures::{Async, Poll};
use log::info;
use regex::Regex;
use serde_json::Value;
use std::collections::{HashMap, VecDeque};
use std::io::{Read, Write};
use std::net::TcpStream;
use std::time::{Duration, Instant};
use tokio::io::{AsyncRead, Error};
use uuid::Uuid;

#[derive(Debug)]
struct MsgQueue {
    messages: VecDeque<Value>,
    last_polled_at: Instant,
    redis_channel: String,
}
impl MsgQueue {
    fn new(redis_channel: impl std::fmt::Display) -> Self {
        let redis_channel = redis_channel.to_string();
        MsgQueue {
            messages: VecDeque::new(),
            last_polled_at: Instant::now(),
            redis_channel,
        }
    }
}

/// The item that streams from Redis and is polled by the `StreamManger`
#[derive(Debug)]
pub struct Receiver {
    pubsub_connection: TcpStream,
    secondary_redis_connection: TcpStream,
    tl: String,
    pub user: User,
    manager_id: Uuid,
    msg_queues: HashMap<Uuid, MsgQueue>,
    clients_per_timeline: HashMap<String, i32>,
}
impl Default for Receiver {
    fn default() -> Self {
        Self::new()
    }
}
impl Receiver {
    pub fn new() -> Self {
        let pubsub_connection = TcpStream::connect(\"127.0.0.1:6379\").expect(\"Can connect to Redis\");
        pubsub_connection
            .set_read_timeout(Some(Duration::from_millis(10)))
            .expect(\"Can set read timeout for Redis connection\");
        let secondary_redis_connection =
            TcpStream::connect(\"127.0.0.1:6379\").expect(\"Can connect to Redis\");
        secondary_redis_connection
            .set_read_timeout(Some(Duration::from_millis(10)))
            .expect(\"Can set read timeout for Redis connection\");
        Self {
            pubsub_connection,
            secondary_redis_connection,
            tl: String::new(),
            user: User::public(),
            manager_id: Uuid::new_v4(),
            msg_queues: HashMap::new(),
            clients_per_timeline: HashMap::new(),
        }
    }

    /// Update the `StreamManager` that is currently polling the `Receiver`
    pub fn update(&mut self, id: Uuid, timeline: impl std::fmt::Display) {
        self.manager_id = id;
        self.tl = timeline.to_string();
    }

    /// Send a subscribe command to the Redis PubSub (if needed)
    pub fn maybe_subscribe(&mut self, tl: &str) {
        info!(\"Subscribing to {}\", &tl);

        let manager_id = self.manager_id;
        self.msg_queues.insert(manager_id, MsgQueue::new(tl));
        let current_clients = self
            .clients_per_timeline
            .entry(tl.to_string())
            .and_modify(|n| *n += 1)
            .or_insert(1);

        if *current_clients == 1 {
            let subscribe_cmd = redis_cmd::pubsub(\"subscribe\", tl);
            self.pubsub_connection
                .write_all(&subscribe_cmd)
                .expect(\"Can subscribe to Redis\");
            let set_subscribed_cmd = redis_cmd::set(format!(\"subscribed:timeline:{}\", tl), \"1\");
            self.secondary_redis_connection
                .write_all(&set_subscribed_cmd)
                .expect(\"Can set Redis\");
            info!(\"Now subscribed to: {:#?}\", &self.msg_queues);
        }
    }

    /// Drop any PubSub subscriptions that don't have active clients
    pub fn unsubscribe_from_empty_channels(&mut self) {
        let mut timelines_with_fewer_clients = Vec::new();

        // Keep only message queues that have been polled recently
        self.msg_queues.retain(|_id, msg_queue| {
            if msg_queue.last_polled_at.elapsed() < Duration::from_secs(30) {
                true
            } else {
                timelines_with_fewer_clients.push(msg_queue.redis_channel.clone());
                false
            }
        });

        // Record the lower number of clients subscribed to that channel
        for timeline in timelines_with_fewer_clients {
            let count_of_subscribed_clients = self
                .clients_per_timeline
                .entry(timeline.clone())
                .and_modify(|n| *n -= 1)
                .or_insert(0);
            // If no clients, unsubscribe from the channel
            if *count_of_subscribed_clients <= 0 {
                self.unsubscribe(&timeline);
            }
        }
    }

    /// Send an unsubscribe command to the Redis PubSub
    pub fn unsubscribe(&mut self, tl: &str) {
        let unsubscribe_cmd = redis_cmd::pubsub(\"unsubscribe\", tl);
        info!(\"Unsubscribing from {}\", &tl);
        self.pubsub_connection
            .write_all(&unsubscribe_cmd)
            .expect(\"Can unsubscribe from Redis\");
        let set_subscribed_cmd = redis_cmd::set(format!(\"subscribed:timeline:{}\", tl), \"0\");
        self.secondary_redis_connection
            .write_all(&set_subscribed_cmd)
            .expect(\"Can set Redis\");
        info!(\"Now subscribed only to: {:#?}\", &self.msg_queues);
    }
}
impl Stream for Receiver {
    type Item = Value;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<Value>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        info!(\"Being polled by: {}\", self.manager_id);
        let timeline = self.tl.clone();

        // Record current time as last polled time
        self.msg_queues
            .entry(self.manager_id)
            .and_modify(|msg_queue| msg_queue.last_polled_at = Instant::now());

        // Add any incomming messages to the back of the relevant `msg_queues`
        // NOTE: This could be more/other than the `msg_queue` currently being polled
        let mut async_stream = AsyncReadableStream(&mut self.pubsub_connection);
        if let Async::Ready(num_bytes_read) = async_stream.poll_read(&mut buffer)? {
            // capture everything between `{` and `}` as potential JSON
            let re = Regex::new(r\"(?P<json>\\{.*\\})\").expect(\"Valid hard-coded regex\");
            if let Some(result) = re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read])) {
                        println!(\"{:?}\", &self);
                let msg: Value = serde_json::from_str(&result[\"json\"].to_string().clone())?;
                for msg_queue in self.msg_queues.values_mut() {
                    if msg_queue.redis_channel == timeline {
                        msg_queue.messages.push_back(msg.clone());
                        println!(\"Accepted msg for: {}\", &timeline);
                    } else {
                        println!(\"Rejecting msg for: {}\", &timeline);
                    }
                }
            }
        }

        // If the `msg_queue` being polled has any new messages, return the first (oldest) one
        match self
            .msg_queues
            .entry(self.manager_id)
            .or_insert_with(|| MsgQueue::new(timeline))
            .messages
            .pop_front()
        {
            Some(value) => Ok(Async::Ready(Some(value))),
            _ => Ok(Async::NotReady),
        }
    }
}

impl Drop for Receiver {
    fn drop(&mut self) {
        let timeline = self.tl.clone();
        self.unsubscribe(&timeline);
    }
}

struct AsyncReadableStream<'a>(&'a mut TcpStream);

impl<'a> Read for AsyncReadableStream<'a> {
    fn read(&mut self, buffer: &mut [u8]) -> Result<usize, std::io::Error> {
        self.0.read(buffer)
    }
}

impl<'a> AsyncRead for AsyncReadableStream<'a> {
    fn poll_read(&mut self, buf: &mut [u8]) -> Poll<usize, std::io::Error> {
        match self.read(buf) {
            Ok(t) => Ok(Async::Ready(t)),
            Err(_) => Ok(Async::NotReady),
        }
    }
}
" 0 76 (fontified t face font-lock-doc-face) 76 79 (fontified t face font-lock-keyword-face) 79 80 (fontified t) 80 85 (fontified t face font-lock-keyword-face) 85 98 (fontified t) 98 101 (fontified t face font-lock-keyword-face) 101 102 (fontified t) 102 107 (fontified t face font-lock-keyword-face) 107 109 (fontified t) 109 113 (fontified t face font-lock-constant-face) 113 115 (fontified t) 115 119 (fontified t face font-lock-type-face) 119 121 (fontified t) 121 124 (fontified t face font-lock-keyword-face) 124 125 (fontified t) 125 132 (fontified t face font-lock-constant-face) 132 134 (fontified t) 134 140 (fontified t face font-lock-constant-face) 140 142 (fontified t) 142 148 (fontified t face font-lock-type-face) 148 150 (fontified t) 150 153 (fontified t face font-lock-keyword-face) 153 154 (fontified t) 154 161 (fontified t face font-lock-constant-face) 161 164 (fontified t) 164 169 (fontified t face font-lock-type-face) 169 171 (fontified t) 171 175 (fontified t face font-lock-type-face) 175 178 (fontified t) 178 181 (fontified t face font-lock-keyword-face) 181 182 (fontified t) 182 185 (fontified t face font-lock-constant-face) 185 193 (fontified t) 193 196 (fontified t face font-lock-keyword-face) 196 197 (fontified t) 197 202 (fontified t face font-lock-constant-face) 202 204 (fontified t) 204 209 (fontified t face font-lock-type-face) 209 211 (fontified t) 211 214 (fontified t face font-lock-keyword-face) 214 215 (fontified t) 215 225 (fontified t face font-lock-constant-face) 225 227 (fontified t) 227 232 (fontified t face font-lock-type-face) 232 234 (fontified t) 234 237 (fontified t face font-lock-keyword-face) 237 238 (fontified t) 238 241 (fontified t face font-lock-constant-face) 241 243 (fontified t) 243 254 (fontified t face font-lock-constant-face) 254 257 (fontified t) 257 264 (fontified t face font-lock-type-face) 264 266 (fontified t) 266 274 (fontified t face font-lock-type-face) 274 277 (fontified t) 277 280 (fontified t face font-lock-keyword-face) 280 281 (fontified t) 281 284 (fontified t face font-lock-constant-face) 284 286 (fontified t) 286 288 (fontified t face font-lock-constant-face) 288 291 (fontified t) 291 295 (fontified t face font-lock-type-face) 295 297 (fontified t) 297 302 (fontified t face font-lock-type-face) 302 305 (fontified t) 305 308 (fontified t face font-lock-keyword-face) 308 309 (fontified t) 309 312 (fontified t face font-lock-constant-face) 312 314 (fontified t) 314 317 (fontified t face font-lock-constant-face) 317 319 (fontified t) 319 328 (fontified t face font-lock-type-face) 328 330 (fontified t) 330 333 (fontified t face font-lock-keyword-face) 333 334 (fontified t) 334 337 (fontified t face font-lock-constant-face) 337 339 (fontified t) 339 343 (fontified t face font-lock-constant-face) 343 346 (fontified t) 346 354 (fontified t face font-lock-type-face) 354 356 (fontified t) 356 363 (fontified t face font-lock-type-face) 363 366 (fontified t) 366 369 (fontified t face font-lock-keyword-face) 369 370 (fontified t) 370 375 (fontified t face font-lock-constant-face) 375 377 (fontified t) 377 379 (fontified t face font-lock-constant-face) 379 382 (fontified t) 382 391 (fontified t face font-lock-type-face) 391 393 (fontified t) 393 398 (fontified t face font-lock-type-face) 398 401 (fontified t) 401 404 (fontified t face font-lock-keyword-face) 404 405 (fontified t) 405 409 (fontified t face font-lock-constant-face) 409 411 (fontified t) 411 415 (fontified t face font-lock-type-face) 415 418 (fontified t) 418 434 (fontified t face font-lock-preprocessor-face) 434 435 (fontified t) 435 441 (fontified t face font-lock-keyword-face) 441 442 (fontified t) 442 450 (fontified t face font-lock-type-face) 450 457 (fontified t) 457 465 (fontified t face font-lock-variable-name-face) 465 467 (fontified t) 467 475 (fontified t face font-lock-type-face) 475 476 (fontified t) 476 481 (fontified t face font-lock-type-face) 481 488 (fontified t) 488 500 (fontified t face font-lock-variable-name-face) 500 502 (fontified t face font-lock-variable-name-face) 502 504 (fontified t) 504 511 (fontified t face font-lock-type-face) 511 513 (fontified t) 513 517 (fontified t) 517 530 (fontified t face font-lock-variable-name-face) 530 532 (fontified t) 532 538 (fontified t face font-lock-type-face) 538 542 (fontified t) 542 546 (fontified t face font-lock-keyword-face) 546 547 (fontified t) 547 555 (fontified t face font-lock-type-face) 555 562 (fontified t) 562 564 (fontified t face font-lock-keyword-face) 564 565 (fontified t) 565 568 (fontified t face font-lock-function-name-face) 568 569 (fontified t) 569 582 (fontified t face font-lock-variable-name-face) 582 584 (fontified t) 584 588 (fontified t face font-lock-keyword-face) 588 589 (fontified t) 589 592 (fontified t face font-lock-constant-face) 592 594 (fontified t) 594 597 (fontified t face font-lock-constant-face) 597 599 (fontified t) 599 606 (fontified t face font-lock-type-face) 606 609 (fontified t) 609 610 (fontified t syntax-table #1#) 610 611 (fontified t) 611 615 (fontified t face font-lock-type-face) 615 626 (fontified t) 626 629 (fontified t face font-lock-keyword-face) 629 630 (fontified t) 630 643 (fontified t face font-lock-variable-name-face) 643 681 (fontified t) 681 689 (fontified t face font-lock-type-face) 689 704 (fontified t) 704 712 (fontified t face font-lock-variable-name-face) 712 714 (fontified t) 714 722 (fontified t face font-lock-type-face) 722 743 (fontified t) 743 757 (fontified t face font-lock-variable-name-face) 757 759 (fontified t) 759 766 (fontified t face font-lock-type-face) 766 821 (fontified t) 821 894 (fontified t face font-lock-doc-face) 894 910 (fontified t face font-lock-preprocessor-face) 910 911 (fontified t) 911 914 (fontified t face font-lock-keyword-face) 914 915 (fontified t) 915 921 (fontified t face font-lock-keyword-face) 921 922 (fontified t) 922 930 (fontified t face font-lock-type-face) 930 937 (fontified t) 937 954 (fontified t face font-lock-variable-name-face) 954 956 (fontified t) 956 965 (fontified t face font-lock-type-face) 965 971 (fontified t) 971 997 (fontified t face font-lock-variable-name-face) 997 999 (fontified t) 999 1008 (fontified t face font-lock-type-face) 1008 1013 (fontified t) 1013 1014 (fontified t) 1014 1016 (fontified t face font-lock-variable-name-face) 1016 1018 (fontified t) 1018 1024 (fontified t face font-lock-type-face) 1024 1026 (fontified t) 1026 1030 (fontified t) 1030 1033 (fontified t face font-lock-keyword-face) 1033 1034 (fontified t) 1034 1038 (fontified t face font-lock-variable-name-face) 1038 1040 (fontified t) 1040 1044 (fontified t face font-lock-type-face) 1044 1050 (fontified t) 1050 1060 (fontified t face font-lock-variable-name-face) 1060 1062 (fontified t) 1062 1066 (fontified t face font-lock-type-face) 1066 1072 (fontified t) 1072 1082 (fontified t face font-lock-variable-name-face) 1082 1084 (fontified t) 1084 1091 (fontified t face font-lock-type-face) 1091 1092 (fontified t) 1092 1096 (fontified t face font-lock-type-face) 1096 1098 (fontified t) 1098 1106 (fontified t face font-lock-type-face) 1106 1113 (fontified t) 1113 1133 (fontified t face font-lock-variable-name-face) 1133 1135 (fontified t) 1135 1142 (fontified t face font-lock-type-face) 1142 1143 (fontified t) 1143 1149 (fontified t face font-lock-type-face) 1149 1151 (fontified t) 1151 1154 (fontified t face font-lock-type-face) 1154 1159 (fontified t) 1159 1163 (fontified t face font-lock-keyword-face) 1163 1164 (fontified t) 1164 1171 (fontified t face font-lock-type-face) 1171 1172 (fontified t) 1172 1175 (fontified t face font-lock-keyword-face) 1175 1176 (fontified t) 1176 1184 (fontified t face font-lock-type-face) 1184 1191 (fontified t) 1191 1193 (fontified t face font-lock-keyword-face) 1193 1194 (fontified t) 1194 1201 (fontified t face font-lock-function-name-face) 1201 1205 (fontified t) 1205 1206 (fontified t syntax-table #1#) 1206 1207 (fontified t) 1207 1211 (fontified t face font-lock-type-face) 1211 1222 (fontified t) 1222 1226 (fontified t face font-lock-type-face) 1226 1242 (fontified t) 1242 1246 (fontified t face font-lock-keyword-face) 1246 1247 (fontified t) 1247 1255 (fontified t face font-lock-type-face) 1255 1262 (fontified t) 1262 1265 (fontified t face font-lock-keyword-face) 1265 1266 (fontified t) 1266 1268 (fontified t face font-lock-keyword-face) 1268 1269 (fontified t) 1269 1272 (fontified t face font-lock-function-name-face) 1272 1276 (fontified t) 1276 1277 (fontified t syntax-table #1#) 1277 1278 (fontified t) 1278 1282 (fontified t face font-lock-type-face) 1282 1293 (fontified t) 1293 1296 (fontified t face font-lock-keyword-face) 1296 1297 (fontified t) 1297 1314 (fontified t face font-lock-variable-name-face) 1314 1317 (fontified t) 1317 1326 (fontified t face font-lock-type-face) 1326 1336 (fontified t) 1336 1352 (fontified t face font-lock-string-face) 1352 1361 (fontified t) 1361 1383 (fontified t face font-lock-string-face) 1383 1442 (fontified t) 1442 1446 (fontified t face font-lock-type-face) 1446 1447 (fontified t) 1447 1455 (fontified t face font-lock-type-face) 1455 1495 (fontified t) 1495 1526 (fontified t face font-lock-string-face) 1526 1538 (fontified t face font-lock-string-face) 1538 1541 (fontified t) 1663 1728 (fontified t) 1728 1732 (fontified t face font-lock-type-face) 1732 1733 (fontified t) 1733 1741 (fontified t face font-lock-type-face) 1741 1781 (fontified t) 1781 1824 (fontified t face font-lock-string-face) 1824 1835 (fontified t) 1835 1839 (fontified t face font-lock-type-face) 1839 1925 (fontified t) 1925 1927 (fontified t face font-lock-variable-name-face) 1927 1929 (fontified t) 1929 1935 (fontified t face font-lock-type-face) 1935 1956 (fontified t) 1956 1960 (fontified t face font-lock-variable-name-face) 1960 1962 (fontified t) 1962 1966 (fontified t face font-lock-type-face) 1966 1990 (fontified t) 1990 2000 (fontified t face font-lock-variable-name-face) 2000 2002 (fontified t) 2002 2006 (fontified t face font-lock-type-face) 2006 2030 (fontified t) 2030 2040 (fontified t face font-lock-variable-name-face) 2040 2042 (fontified t) 2042 2049 (fontified t face font-lock-type-face) 2049 2070 (fontified t) 2070 2090 (fontified t face font-lock-variable-name-face) 2090 2092 (fontified t) 2092 2099 (fontified t face font-lock-type-face) 2099 2129 (fontified t) 2129 2163 (fontified t face font-lock-doc-face) 2163 2201 (face font-lock-doc-face fontified t) 2201 2205 (fontified t) 2205 2208 (fontified t face font-lock-keyword-face) 2208 2209 (fontified t) 2209 2211 (fontified t face font-lock-keyword-face) 2211 2212 (fontified t) 2212 2218 (fontified t face font-lock-function-name-face) 2218 2220 (fontified t) 2220 2223 (fontified t face font-lock-keyword-face) 2223 2224 (fontified t) 2224 2228 (fontified t face font-lock-keyword-face) 2228 2230 (fontified t) 2230 2232 (fontified t face font-lock-variable-name-face) 2232 2234 (fontified t) 2234 2238 (fontified t face font-lock-type-face) 2238 2240 (fontified t) 2240 2248 (fontified t face font-lock-variable-name-face) 2248 2250 (fontified t) 2250 2254 (fontified t face font-lock-keyword-face) 2254 2255 (fontified t) 2255 2258 (fontified t face font-lock-constant-face) 2258 2260 (fontified t) 2260 2263 (fontified t face font-lock-constant-face) 2263 2265 (fontified t) 2265 2272 (fontified t face font-lock-type-face) 2272 2284 (fontified t) 2284 2288 (fontified t face font-lock-keyword-face) 2288 2314 (fontified t) 2314 2318 (fontified t face font-lock-keyword-face) 2318 2357 (fontified t) 2357 2418 (fontified t face font-lock-doc-face) 2418 2422 (fontified t) 2422 2425 (fontified t face font-lock-keyword-face) 2425 2426 (fontified t) 2426 2428 (fontified t face font-lock-keyword-face) 2428 2429 (fontified t) 2429 2444 (fontified t face font-lock-function-name-face) 2444 2446 (fontified t) 2446 2449 (fontified t face font-lock-keyword-face) 2449 2450 (fontified t) 2450 2454 (fontified t face font-lock-keyword-face) 2454 2456 (fontified t) 2456 2458 (fontified t face font-lock-variable-name-face) 2458 2461 (fontified t) 2461 2464 (fontified t face font-lock-type-face) 2464 2476 (fontified t) 2476 2481 (fontified t face font-lock-preprocessor-face) 2481 2482 (fontified t) 2482 2501 (fontified t face font-lock-string-face) 2501 2509 (fontified t) 2509 2510 (fontified t) 2510 2518 (fontified t) 2518 2521 (fontified t face font-lock-keyword-face) 2521 2522 (fontified t) 2522 2532 (fontified t face font-lock-variable-name-face) 2532 2535 (fontified t) 2535 2539 (fontified t face font-lock-keyword-face) 2539 2552 (fontified t) 2552 2560 (fontified t) 2560 2564 (fontified t face font-lock-keyword-face) 2564 2595 (fontified t) 2595 2603 (fontified t face font-lock-type-face) 2603 2623 (fontified t) 2623 2626 (fontified t face font-lock-keyword-face) 2626 2627 (fontified t) 2627 2642 (fontified t face font-lock-variable-name-face) 2642 2645 (fontified t) 2645 2649 (fontified t face font-lock-keyword-face) 2649 2792 (fontified t) 2792 2794 (fontified t face font-lock-keyword-face) 2794 2831 (fontified t) 2831 2834 (fontified t face font-lock-keyword-face) 2834 2835 (fontified t) 2835 2848 (fontified t face font-lock-variable-name-face) 2848 2851 (fontified t) 2851 2860 (fontified t face font-lock-constant-face) 2860 2869 (fontified t) 2869 2880 (fontified t face font-lock-string-face) 2880 2899 (fontified t) 2899 2903 (fontified t face font-lock-keyword-face) 2903 2989 (fontified t) 2989 3013 (fontified t face font-lock-string-face) 3013 3028 (fontified t) 3028 3031 (fontified t face font-lock-keyword-face) 3031 3032 (fontified t) 3032 3050 (fontified t face font-lock-variable-name-face) 3050 3052 (fontified t) 3052 3053 (fontified t) 3053 3062 (face font-lock-constant-face fontified t) 3062 3068 (fontified t) 3068 3075 (face rust-builtin-formatting-macro-face fontified t) 3075 3076 (fontified t) 3076 3097 (face font-lock-string-face fontified t) 3097 3099 (face rust-string-interpolation-face fontified t) 3099 3100 (face font-lock-string-face fontified t) 3100 3107 (fontified t) 3107 3110 (face font-lock-string-face fontified t) 3110 3113 (fontified t) 3113 3125 (fontified t) 3125 3129 (fontified t face font-lock-keyword-face) 3129 3229 (fontified t) 3229 3244 (fontified t face font-lock-string-face) 3244 3259 (fontified t) 3259 3264 (fontified t face font-lock-preprocessor-face) 3264 3265 (fontified t) 3265 3291 (fontified t face font-lock-string-face) 3291 3294 (fontified t) 3294 3298 (fontified t face font-lock-keyword-face) 3298 3333 (fontified t) 3333 3398 (fontified t face font-lock-doc-face) 3398 3402 (fontified t) 3402 3405 (fontified t face font-lock-keyword-face) 3405 3406 (fontified t) 3406 3408 (fontified t face font-lock-keyword-face) 3408 3409 (fontified t) 3409 3440 (fontified t face font-lock-function-name-face) 3440 3442 (fontified t) 3442 3445 (fontified t face font-lock-keyword-face) 3445 3446 (fontified t) 3446 3450 (fontified t face font-lock-keyword-face) 3450 3454 (fontified t) 3454 3462 (fontified t) 3462 3465 (fontified t face font-lock-keyword-face) 3465 3466 (fontified t) 3466 3469 (fontified t face font-lock-keyword-face) 3469 3470 (fontified t) 3470 3498 (fontified t face font-lock-variable-name-face) 3498 3501 (fontified t) 3501 3504 (fontified t face font-lock-type-face) 3504 3513 (fontified t) 3513 3514 (fontified t) 3514 3522 (fontified t) 3522 3525 (fontified t face font-lock-comment-delimiter-face) 3525 3581 (fontified t face font-lock-comment-face) 3581 3589 (fontified t) 3589 3593 (fontified t face font-lock-keyword-face) 3593 3643 (fontified t) 3643 3645 (fontified t face font-lock-keyword-face) 3645 3681 (fontified t) 3681 3682 (syntax-table #1# fontified t) 3682 3683 (fontified t) 3683 3691 (fontified t face font-lock-type-face) 3691 3725 (fontified t) 3725 3729 (fontified t face font-lock-keyword-face) 3729 3744 (fontified t) 3744 3748 (fontified t face font-lock-keyword-face) 3748 3851 (fontified t) 3851 3856 (fontified t face font-lock-keyword-face) 3856 3892 (fontified t) 3892 3895 (fontified t face font-lock-comment-delimiter-face) 3895 3957 (fontified t face font-lock-comment-face) 3957 3965 (fontified t) 3965 3968 (fontified t face font-lock-keyword-face) 3968 3978 (fontified t) 3978 3980 (fontified t face font-lock-keyword-face) 3980 4014 (fontified t) 4014 4024 (fontified t) 4024 4027 (face font-lock-keyword-face fontified t) 4027 4028 (fontified t) 4028 4055 (face font-lock-variable-name-face fontified t) 4055 4058 (fontified t) 4058 4062 (face font-lock-keyword-face fontified t) 4062 4063 (fontified t) 4063 4226 (fontified t) 4226 4229 (fontified t face font-lock-comment-delimiter-face) 4229 4273 (fontified t face font-lock-comment-face) 4273 4285 (fontified t) 4285 4287 (fontified t face font-lock-keyword-face) 4287 4317 (fontified t) 4317 4318 (syntax-table #1# fontified t) 4318 4340 (fontified t) 4340 4344 (fontified t face font-lock-keyword-face) 4344 4393 (fontified t) 4393 4399 (fontified t) 4399 4400 (fontified t) 4400 4404 (fontified t) 4404 4456 (fontified t face font-lock-doc-face) 4456 4460 (fontified t) 4460 4463 (fontified t face font-lock-keyword-face) 4463 4464 (fontified t) 4464 4466 (fontified t face font-lock-keyword-face) 4466 4467 (fontified t) 4467 4478 (fontified t face font-lock-function-name-face) 4478 4480 (fontified t) 4480 4483 (fontified t face font-lock-keyword-face) 4483 4484 (fontified t) 4484 4488 (fontified t face font-lock-keyword-face) 4488 4490 (fontified t) 4490 4492 (fontified t face font-lock-variable-name-face) 4492 4495 (fontified t) 4495 4498 (fontified t face font-lock-type-face) 4498 4510 (fontified t) 4510 4513 (fontified t face font-lock-keyword-face) 4513 4514 (fontified t) 4514 4529 (fontified t face font-lock-variable-name-face) 4529 4532 (fontified t) 4532 4541 (fontified t face font-lock-constant-face) 4541 4550 (fontified t) 4550 4563 (fontified t face font-lock-string-face) 4563 4578 (fontified t) 4578 4583 (fontified t face font-lock-preprocessor-face) 4583 4584 (fontified t) 4584 4607 (fontified t face font-lock-string-face) 4607 4623 (fontified t) 4623 4627 (fontified t face font-lock-keyword-face) 4627 4646 (fontified t) 4646 4686 (fontified t) 4686 4707 (fontified t) 4707 4735 (fontified t face font-lock-string-face) 4735 4746 (fontified t) 4746 4749 (fontified t face font-lock-keyword-face) 4749 4750 (fontified t) 4750 4768 (fontified t face font-lock-variable-name-face) 4768 4771 (fontified t) 4771 4780 (fontified t face font-lock-constant-face) 4780 4786 (fontified t) 4786 4793 (fontified t face rust-builtin-formatting-macro-face) 4793 4794 (fontified t) 4794 4815 (fontified t face font-lock-string-face) 4815 4817 (fontified t face rust-string-interpolation-face) 4817 4818 (fontified t face font-lock-string-face) 4818 4825 (fontified t) 4825 4828 (fontified t face font-lock-string-face) 4828 4839 (fontified t) 4839 4843 (fontified t face font-lock-keyword-face) 4843 4899 (fontified t) 4899 4915 (fontified t) 4915 4935 (fontified t) 4935 4950 (fontified t face font-lock-string-face) 4950 4961 (fontified t) 4961 4966 (fontified t face font-lock-preprocessor-face) 4966 4967 (fontified t) 4967 4998 (fontified t face font-lock-string-face) 4998 5001 (fontified t) 5001 5005 (fontified t face font-lock-keyword-face) 5005 5027 (fontified t) 5027 5031 (fontified t face font-lock-keyword-face) 5031 5032 (fontified t) 5032 5038 (fontified t face font-lock-type-face) 5038 5039 (fontified t) 5039 5042 (fontified t face font-lock-keyword-face) 5042 5043 (fontified t) 5043 5051 (fontified t face font-lock-type-face) 5051 5058 (fontified t) 5058 5062 (fontified t face font-lock-keyword-face) 5062 5063 (fontified t) 5063 5067 (fontified t face font-lock-type-face) 5067 5070 (fontified t) 5070 5075 (fontified t face font-lock-type-face) 5075 5081 (fontified t) 5081 5085 (fontified t face font-lock-keyword-face) 5085 5086 (fontified t) 5086 5091 (fontified t face font-lock-type-face) 5091 5094 (fontified t) 5094 5099 (fontified t face font-lock-type-face) 5099 5106 (fontified t) 5106 5108 (fontified t face font-lock-keyword-face) 5108 5109 (fontified t) 5109 5113 (fontified t face font-lock-function-name-face) 5113 5115 (fontified t) 5115 5118 (fontified t face font-lock-keyword-face) 5118 5119 (fontified t) 5119 5123 (fontified t face font-lock-keyword-face) 5123 5126 (fontified t) 5126 5127 (syntax-table #1# fontified t) 5127 5128 (fontified t) 5128 5132 (fontified t face font-lock-type-face) 5132 5133 (fontified t) 5133 5139 (fontified t face font-lock-type-face) 5139 5140 (fontified t) 5140 5145 (fontified t face font-lock-type-face) 5145 5148 (fontified t) 5148 5152 (fontified t face font-lock-type-face) 5152 5154 (fontified t) 5154 5159 (fontified t face font-lock-type-face) 5159 5171 (fontified t) 5171 5174 (fontified t face font-lock-keyword-face) 5174 5175 (fontified t) 5175 5178 (fontified t face font-lock-keyword-face) 5178 5179 (fontified t) 5179 5185 (fontified t face font-lock-variable-name-face) 5185 5186 (fontified t) 5186 5188 (fontified t) 5188 5192 (fontified t face font-lock-preprocessor-face) 5192 5205 (fontified t) 5205 5213 (fontified t) 5213 5218 (fontified t face font-lock-preprocessor-face) 5218 5219 (fontified t) 5219 5240 (fontified t face font-lock-string-face) 5240 5242 (fontified t) 5242 5246 (fontified t face font-lock-keyword-face) 5246 5268 (fontified t) 5268 5271 (fontified t face font-lock-keyword-face) 5271 5272 (fontified t) 5272 5280 (fontified t face font-lock-variable-name-face) 5280 5283 (fontified t) 5283 5287 (fontified t face font-lock-keyword-face) 5287 5300 (fontified t) 5300 5301 (fontified t) 5301 5309 (fontified t) 5309 5312 (fontified t face font-lock-comment-delimiter-face) 5312 5352 (fontified t face font-lock-comment-face) 5352 5360 (fontified t) 5360 5362 (fontified t face font-lock-keyword-face) 5362 5364 (fontified t face font-lock-keyword-face) 5364 5376 (fontified t) 5376 5395 (fontified t) 5395 5399 (fontified t face font-lock-keyword-face) 5399 5475 (fontified t) 5475 5482 (fontified t face font-lock-type-face) 5482 5501 (fontified t) 5501 5504 (fontified t face font-lock-comment-delimiter-face) 5504 5572 (fontified t face font-lock-comment-face) 5572 5580 (fontified t) 5580 5583 (fontified t face font-lock-comment-delimiter-face) 5583 5658 (fontified t face font-lock-comment-face) 5658 5666 (fontified t) 5666 5669 (fontified t face font-lock-keyword-face) 5669 5670 (fontified t) 5670 5673 (fontified t face font-lock-keyword-face) 5673 5674 (fontified t) 5674 5686 (fontified t face font-lock-variable-name-face) 5686 5689 (fontified t) 5689 5708 (fontified t face font-lock-type-face) 5708 5710 (fontified t) 5710 5713 (fontified t face font-lock-keyword-face) 5713 5714 (fontified t) 5714 5718 (fontified t face font-lock-keyword-face) 5718 5747 (fontified t) 5747 5749 (fontified t face font-lock-keyword-face) 5749 5750 (fontified t) 5750 5753 (fontified t face font-lock-keyword-face) 5753 5754 (fontified t) 5754 5759 (fontified t face font-lock-type-face) 5759 5761 (fontified t) 5761 5766 (fontified t face font-lock-type-face) 5766 5799 (fontified t) 5799 5801 (fontified t) 5801 5809 (fontified t) 5809 5812 (face font-lock-keyword-face fontified t) 5812 5820 (fontified t) 5820 5821 (face rust-question-mark-face fontified t) 5821 5824 (fontified t) 5824 5836 (fontified t) 5836 5839 (fontified t face font-lock-comment-delimiter-face) 5839 5876 (fontified t face font-lock-comment-face) 5876 5896 (fontified t face font-lock-comment-face) 5896 5908 (fontified t) 5908 5911 (fontified t face font-lock-keyword-face) 5911 5912 (fontified t) 5912 5914 (fontified t face font-lock-variable-name-face) 5914 5917 (fontified t) 5917 5922 (fontified t face font-lock-type-face) 5922 5928 (fontified t) 5928 5929 (fontified t syntax-table #2# face font-lock-string-face) 5929 5946 (fontified t face font-lock-string-face) 5946 5947 (fontified t syntax-table #3# face font-lock-string-face) 5947 5956 (fontified t) 5956 5980 (fontified t face font-lock-string-face) 5980 5983 (fontified t) 5983 5995 (fontified t) 5995 5997 (fontified t face font-lock-keyword-face) 5997 5998 (fontified t) 5998 6001 (fontified t face font-lock-keyword-face) 6001 6002 (fontified t) 6002 6006 (fontified t face font-lock-type-face) 6006 6030 (fontified t) 6030 6036 (fontified t face font-lock-type-face) 6036 6084 (fontified t) 6084 6107 (fontified t) 6107 6108 (fontified t rear-nonsticky t) 6108 6116 (fontified t face rust-builtin-formatting-macro-face) 6116 6117 (fontified t) 6117 6118 (fontified t face font-lock-string-face) 6118 6122 (fontified t face rust-string-interpolation-face) 6122 6123 (fontified t face font-lock-string-face) 6123 6126 (fontified t) 6126 6130 (fontified t face font-lock-keyword-face) 6130 6132 (fontified t) 6132 6133 (fontified t) 6133 6149 (fontified t) 6149 6152 (fontified t face font-lock-keyword-face) 6152 6153 (fontified t) 6153 6156 (fontified t face font-lock-variable-name-face) 6156 6158 (fontified t) 6158 6163 (fontified t face font-lock-type-face) 6163 6166 (fontified t) 6166 6176 (fontified t face font-lock-constant-face) 6176 6195 (fontified t) 6195 6201 (fontified t face font-lock-string-face) 6201 6223 (fontified t) 6223 6224 (fontified t face rust-question-mark-face) 6224 6226 (fontified t) 6226 6242 (fontified t) 6242 6245 (fontified t face font-lock-keyword-face) 6245 6256 (fontified t) 6256 6258 (fontified t face font-lock-keyword-face) 6258 6259 (fontified t) 6259 6263 (fontified t face font-lock-keyword-face) 6263 6310 (fontified t) 6310 6312 (fontified t face font-lock-keyword-face) 6312 6373 (fontified t) 6373 6418 (fontified t) 6418 6441 (fontified t) 6441 6442 (rear-nonsticky t fontified t) 6442 6450 (fontified t face rust-builtin-formatting-macro-face) 6450 6451 (fontified t) 6451 6470 (fontified t face font-lock-string-face) 6470 6472 (fontified t face rust-string-interpolation-face) 6472 6473 (fontified t face font-lock-string-face) 6473 6486 (fontified t) 6486 6487 (fontified t) 6487 6509 (fontified t) 6509 6513 (fontified t face font-lock-keyword-face) 6513 6514 (fontified t) 6514 6516 (fontified t) 6516 6540 (fontified t) 6540 6548 (fontified t face rust-builtin-formatting-macro-face) 6548 6549 (fontified t) 6549 6569 (fontified t face font-lock-string-face) 6569 6571 (fontified t face rust-string-interpolation-face) 6571 6572 (fontified t face font-lock-string-face) 6572 6633 (fontified t) 6633 6640 (fontified t) 6640 6659 (fontified t) 6659 6662 (fontified t face font-lock-comment-delimiter-face) 6662 6726 (fontified t face font-lock-comment-face) 6726 6746 (face font-lock-comment-face fontified t) 6746 6754 (fontified t) 6754 6759 (fontified t face font-lock-keyword-face) 6759 6760 (fontified t) 6760 6764 (fontified t face font-lock-keyword-face) 6764 6808 (fontified t) 6808 6812 (fontified t face font-lock-keyword-face) 6812 6856 (fontified t) 6856 6864 (fontified t face font-lock-type-face) 6864 6950 (fontified t) 6950 6954 (fontified t face font-lock-type-face) 6954 6963 (fontified t) 6963 6964 (syntax-table #1# fontified t) 6964 6965 (fontified t) 6965 6967 (fontified t face font-lock-type-face) 6967 6968 (fontified t) 6968 6973 (fontified t face font-lock-type-face) 6973 6975 (fontified t) 6975 6980 (fontified t face font-lock-type-face) 6980 6981 (fontified t) 6981 6985 (fontified t face font-lock-type-face) 6985 6987 (fontified t) 6987 6996 (fontified t) 6996 7011 (fontified t) 7011 7012 (syntax-table #1# fontified t) 7012 7013 (fontified t) 7013 7015 (fontified t face font-lock-type-face) 7015 7016 (fontified t) 7016 7021 (fontified t face font-lock-type-face) 7021 7023 (fontified t) 7023 7031 (fontified t face font-lock-type-face) 7031 7034 (fontified t) 7034 7053 (fontified t) 7053 7057 (fontified t face font-lock-keyword-face) 7057 7058 (fontified t) 7058 7062 (fontified t face font-lock-type-face) 7062 7063 (fontified t) 7063 7066 (fontified t face font-lock-keyword-face) 7066 7067 (fontified t) 7067 7075 (fontified t face font-lock-type-face) 7075 7082 (fontified t) 7082 7084 (fontified t face font-lock-keyword-face) 7084 7085 (fontified t) 7085 7089 (fontified t face font-lock-function-name-face) 7089 7091 (fontified t) 7091 7094 (fontified t face font-lock-keyword-face) 7094 7095 (fontified t) 7095 7099 (fontified t face font-lock-keyword-face) 7099 7111 (fontified t) 7111 7114 (fontified t face font-lock-keyword-face) 7114 7115 (fontified t) 7115 7123 (fontified t face font-lock-variable-name-face) 7123 7126 (fontified t) 7126 7130 (fontified t face font-lock-keyword-face) 7130 7140 (fontified t) 7140 7143 (fontified t) 7143 7151 (fontified t) 7151 7155 (fontified t face font-lock-keyword-face) 7155 7189 (fontified t) 7189 7195 (fontified t face font-lock-keyword-face) 7195 7196 (fontified t) 7196 7215 (fontified t face font-lock-type-face) 7215 7217 (fontified t) 7217 7218 (fontified t face font-lock-variable-name-face) 7218 7222 (fontified t) 7222 7223 (fontified t face font-lock-variable-name-face) 7223 7224 (fontified t) 7224 7227 (fontified t face font-lock-keyword-face) 7227 7228 (fontified t) 7228 7237 (fontified t face font-lock-type-face) 7237 7241 (fontified t) 7241 7245 (fontified t face font-lock-keyword-face) 7245 7246 (fontified t) 7246 7247 (fontified t) 7247 7248 (face font-lock-variable-name-face fontified t) 7248 7250 (fontified t) 7250 7254 (face font-lock-type-face fontified t) 7254 7255 (fontified t) 7255 7258 (face font-lock-keyword-face fontified t) 7258 7259 (fontified t) 7259 7278 (face font-lock-type-face fontified t) 7278 7280 (fontified t) 7280 7281 (face font-lock-variable-name-face fontified t) 7281 7285 (fontified t) 7289 7291 (face font-lock-keyword-face) 7292 7296 (face font-lock-function-name-face) 7298 7301 (face font-lock-keyword-face) 7302 7306 (face font-lock-keyword-face) 7308 7314 (face font-lock-variable-name-face) 7317 7320 (face font-lock-keyword-face) 7322 7324 (face font-lock-type-face) 7328 7329 (syntax-table #1#) 7330 7336 (face font-lock-type-face) 7337 7342 (face font-lock-type-face) 7344 7347 (face font-lock-constant-face) 7349 7351 (face font-lock-constant-face) 7353 7358 (face font-lock-type-face) 7370 7374 (face font-lock-keyword-face) 7399 7403 (face font-lock-keyword-face) 7405 7406 (face font-lock-variable-name-face) 7408 7417 (face font-lock-type-face) 7418 7421 (face font-lock-keyword-face) 7422 7441 (face font-lock-type-face) 7443 7444 (face font-lock-variable-name-face) 7452 7454 (face font-lock-keyword-face) 7455 7464 (face font-lock-function-name-face) 7466 7469 (face font-lock-keyword-face) 7470 7474 (face font-lock-keyword-face) 7476 7479 (face font-lock-variable-name-face) 7482 7485 (face font-lock-keyword-face) 7487 7489 (face font-lock-type-face) 7493 7494 (syntax-table #1#) 7495 7496 (face font-lock-type-face) 7496 7499 (face font-lock-type-face) 7500 7505 (face font-lock-type-face) 7507 7510 (face font-lock-constant-face) 7512 7514 (face font-lock-constant-face) 7516 7521 (face font-lock-type-face) 7533 7534 (face font-lock-keyword-face) 7534 7538 (face font-lock-keyword-face) 7539 7543 (face font-lock-keyword-face) 7568 7570 (face font-lock-type-face) 7575 7576 (syntax-table #1#) 7577 7579 (face font-lock-type-face) 7580 7585 (face font-lock-type-face) 7587 7592 (face font-lock-type-face) 7610 7613 (face font-lock-type-face) 7618 7619 (syntax-table #1#) 7620 7622 (face font-lock-type-face) 7623 7628 (face font-lock-type-face) 7630 7638 (face font-lock-type-face)) . 1) (undo-tree-id3208 . -6133) (undo-tree-id3209 . 1172) (undo-tree-id3210 . -6084) (undo-tree-id3211 . -6132) (undo-tree-id3212 . -1663) (undo-tree-id3213 . -2459) (undo-tree-id3214 . -5300) (undo-tree-id3215 . -5300) (undo-tree-id3216 . -4399) (undo-tree-id3217 . -5300) (undo-tree-id3218 . -5300) (undo-tree-id3219 . -4399) (undo-tree-id3220 . -6418) (undo-tree-id3221 . -6459) (undo-tree-id3222 . -6459) (undo-tree-id3223 . -4399) (undo-tree-id3224 . -6459) (undo-tree-id3225 . -6459) (undo-tree-id3226 . -5205) (undo-tree-id3227 . -2459) (undo-tree-id3228 . -2507) (undo-tree-id3229 . -1663) (undo-tree-id3230 . -6487) (undo-tree-id3231 . -2459) (undo-tree-id3233 . -6487) (undo-tree-id3235 . -6487) (undo-tree-id3237 . -5301) (undo-tree-id3239 . -5301) (undo-tree-id3240 . -6487) (undo-tree-id3241 . -6108) (undo-tree-id3242 . -6487) (undo-tree-id3243 . -6487) (undo-tree-id3244 . -2459) (undo-tree-id3245 . -5983) (undo-tree-id3246 . -5983) (undo-tree-id3248 . -6084) 6109) ((1 . 7660) (#("//! Interfacing with Redis and stream the results on to the `StreamManager`
use crate::redis_cmd;
use crate::user::User;
use futures::stream::Stream;
use futures::{Async, Poll};
use log::info;
use regex::Regex;
use serde_json::Value;
use std::collections::{HashMap, VecDeque};
use std::io::{Read, Write};
use std::net::TcpStream;
use std::time::{Duration, Instant};
use tokio::io::{AsyncRead, Error};
use uuid::Uuid;

#[derive(Debug)]
struct MsgQueue {
    messages: VecDeque<Value>,
    last_polled_at: Instant,
    redis_channel: String,
}
impl MsgQueue {
    fn new(redis_channel: impl std::fmt::Display) -> Self {
        let redis_channel = redis_channel.to_string();
        MsgQueue {
            messages: VecDeque::new(),
            last_polled_at: Instant::now(),
            redis_channel,
        }
    }
}

/// The item that streams from Redis and is polled by the `StreamManger`
#[derive(Debug)]
pub struct Receiver {
    pubsub_connection: TcpStream,
    secondary_redis_connection: TcpStream,
    tl: String,
    pub user: User,
    manager_id: Uuid,
    msg_queues: HashMap<Uuid, MsgQueue>,
    clients_per_timeline: HashMap<String, i32>,
}
impl Default for Receiver {
    fn default() -> Self {
        Self::new()
    }
}
impl Receiver {
    pub fn new() -> Self {
        let pubsub_connection = TcpStream::connect(\"127.0.0.1:6379\").expect(\"Can connect to Redis\");
        pubsub_connection
            .set_read_timeout(Some(Duration::from_millis(10)))
            .expect(\"Can set read timeout for Redis connection\");
        let secondary_redis_connection =
            TcpStream::connect(\"127.0.0.1:6379\").expect(\"Can connect to Redis\");
        secondary_redis_connection
            .set_read_timeout(Some(Duration::from_millis(10)))
            .expect(\"Can set read timeout for Redis connection\");
        Self {
            pubsub_connection,
            secondary_redis_connection,
            tl: String::new(),
            user: User::public(),
            manager_id: Uuid::new_v4(),
            msg_queues: HashMap::new(),
            clients_per_timeline: HashMap::new(),
        }
    }

    /// Update the `StreamManager` that is currently polling the `Receiver`
    pub fn update(&mut self, id: Uuid, timeline: impl std::fmt::Display) {
        self.manager_id = id;
        self.tl = timeline.to_string();
    }

    /// Send a subscribe command to the Redis PubSub (if needed)
    pub fn maybe_subscribe(&mut self, tl: &str) {
        info!(\"Subscribing to {}\", &tl);

        let manager_id = self.manager_id;
        self.msg_queues.insert(manager_id, MsgQueue::new(tl));
        let current_clients = self
            .clients_per_timeline
            .entry(tl.to_string())
            .and_modify(|n| *n += 1)
            .or_insert(1);

        if *current_clients == 1 {
            let subscribe_cmd = redis_cmd::pubsub(\"subscribe\", tl);
            self.pubsub_connection
                .write_all(&subscribe_cmd)
                .expect(\"Can subscribe to Redis\");
            let set_subscribed_cmd = redis_cmd::set(format!(\"subscribed:timeline:{}\", tl), \"1\");
            self.secondary_redis_connection
                .write_all(&set_subscribed_cmd)
                .expect(\"Can set Redis\");
            info!(\"Now subscribed to: {:#?}\", &self.msg_queues);
        }
    }

    /// Drop any PubSub subscriptions that don't have active clients
    pub fn unsubscribe_from_empty_channels(&mut self) {
        let mut timelines_with_fewer_clients = Vec::new();

        // Keep only message queues that have been polled recently
        self.msg_queues.retain(|_id, msg_queue| {
            if msg_queue.last_polled_at.elapsed() < Duration::from_secs(30) {
                true
            } else {
                timelines_with_fewer_clients.push(msg_queue.redis_channel.clone());
                false
            }
        });

        // Record the lower number of clients subscribed to that channel
        for timeline in timelines_with_fewer_clients {
            let count_of_subscribed_clients = self
                .clients_per_timeline
                .entry(timeline.clone())
                .and_modify(|n| *n -= 1)
                .or_insert(0);
            // If no clients, unsubscribe from the channel
            if *count_of_subscribed_clients <= 0 {
                self.unsubscribe(&timeline);
            }
        }
    }

    /// Send an unsubscribe command to the Redis PubSub
    pub fn unsubscribe(&mut self, tl: &str) {
        let unsubscribe_cmd = redis_cmd::pubsub(\"unsubscribe\", tl);
        info!(\"Unsubscribing from {}\", &tl);
        self.pubsub_connection
            .write_all(&unsubscribe_cmd)
            .expect(\"Can unsubscribe from Redis\");
        let set_subscribed_cmd = redis_cmd::set(format!(\"subscribed:timeline:{}\", tl), \"0\");
        self.secondary_redis_connection
            .write_all(&set_subscribed_cmd)
            .expect(\"Can set Redis\");
        info!(\"Now subscribed only to: {:#?}\", &self.msg_queues);
    }
}
impl Stream for Receiver {
    type Item = Value;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<Value>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        info!(\"Being polled by: {}\", self.manager_id);
        let timeline = self.tl.clone();

        // Record current time as last polled time
        self.msg_queues
            .entry(self.manager_id)
            .and_modify(|msg_queue| msg_queue.last_polled_at = Instant::now());

        // Add any incomming messages to the back of the relevant `msg_queues`
        // NOTE: This could be more/other than the `msg_queue` currently being polled
        let mut async_stream = AsyncReadableStream(&mut self.pubsub_connection);
        if let Async::Ready(num_bytes_read) = async_stream.poll_read(&mut buffer)? {
            // capture everything between `{` and `}` as potential JSON
            let re = Regex::new(r\"(?P<json>\\{.*\\})\").expect(\"Valid hard-coded regex\");
            if let Some(result) = re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read])) {
                println!(\"{:?}\", &self);
                let msg: Value = serde_json::from_str(&result[\"json\"].to_string().clone())?;
                for msg_queue in self.msg_queues.values_mut() {
                    if msg_queue.redis_channel == timeline {
                        msg_queue.messages.push_back(msg.clone());
                        println!(\"Accepted msg for: {}\", &timeline);
                    } else {
                        println!(\"Rejecting msg for: {}\", &timeline);
                    }
                }
            }
        }

        // If the `msg_queue` being polled has any new messages, return the first (oldest) one
        match self
            .msg_queues
            .entry(self.manager_id)
            .or_insert_with(|| MsgQueue::new(timeline))
            .messages
            .pop_front()
        {
            Some(value) => Ok(Async::Ready(Some(value))),
            _ => Ok(Async::NotReady),
        }
    }
}

impl Drop for Receiver {
    fn drop(&mut self) {
        let timeline = self.tl.clone();
        self.unsubscribe(&timeline);
    }
}

struct AsyncReadableStream<'a>(&'a mut TcpStream);

impl<'a> Read for AsyncReadableStream<'a> {
    fn read(&mut self, buffer: &mut [u8]) -> Result<usize, std::io::Error> {
        self.0.read(buffer)
    }
}

impl<'a> AsyncRead for AsyncReadableStream<'a> {
    fn poll_read(&mut self, buf: &mut [u8]) -> Poll<usize, std::io::Error> {
        match self.read(buf) {
            Ok(t) => Ok(Async::Ready(t)),
            Err(_) => Ok(Async::NotReady),
        }
    }
}
" 0 76 (fontified t face font-lock-doc-face) 76 79 (fontified t face font-lock-keyword-face) 79 80 (fontified t) 80 85 (fontified t face font-lock-keyword-face) 85 98 (fontified t) 98 101 (fontified t face font-lock-keyword-face) 101 102 (fontified t) 102 107 (fontified t face font-lock-keyword-face) 107 109 (fontified t) 109 113 (fontified t face font-lock-constant-face) 113 115 (fontified t) 115 119 (fontified t face font-lock-type-face) 119 121 (fontified t) 121 124 (fontified t face font-lock-keyword-face) 124 125 (fontified t) 125 132 (fontified t face font-lock-constant-face) 132 134 (fontified t) 134 140 (fontified t face font-lock-constant-face) 140 142 (fontified t) 142 148 (fontified t face font-lock-type-face) 148 150 (fontified t) 150 153 (fontified t face font-lock-keyword-face) 153 154 (fontified t) 154 161 (fontified t face font-lock-constant-face) 161 164 (fontified t) 164 169 (fontified t face font-lock-type-face) 169 171 (fontified t) 171 175 (fontified t face font-lock-type-face) 175 178 (fontified t) 178 181 (fontified t face font-lock-keyword-face) 181 182 (fontified t) 182 185 (fontified t face font-lock-constant-face) 185 193 (fontified t) 193 196 (fontified t face font-lock-keyword-face) 196 197 (fontified t) 197 202 (fontified t face font-lock-constant-face) 202 204 (fontified t) 204 209 (fontified t face font-lock-type-face) 209 211 (fontified t) 211 214 (fontified t face font-lock-keyword-face) 214 215 (fontified t) 215 225 (fontified t face font-lock-constant-face) 225 227 (fontified t) 227 232 (fontified t face font-lock-type-face) 232 234 (fontified t) 234 237 (fontified t face font-lock-keyword-face) 237 238 (fontified t) 238 241 (fontified t face font-lock-constant-face) 241 243 (fontified t) 243 254 (fontified t face font-lock-constant-face) 254 257 (fontified t) 257 264 (fontified t face font-lock-type-face) 264 266 (fontified t) 266 274 (fontified t face font-lock-type-face) 274 277 (fontified t) 277 280 (fontified t face font-lock-keyword-face) 280 281 (fontified t) 281 284 (fontified t face font-lock-constant-face) 284 286 (fontified t) 286 288 (fontified t face font-lock-constant-face) 288 291 (fontified t) 291 295 (fontified t face font-lock-type-face) 295 297 (fontified t) 297 302 (fontified t face font-lock-type-face) 302 305 (fontified t) 305 308 (fontified t face font-lock-keyword-face) 308 309 (fontified t) 309 312 (fontified t face font-lock-constant-face) 312 314 (fontified t) 314 317 (fontified t face font-lock-constant-face) 317 319 (fontified t) 319 328 (fontified t face font-lock-type-face) 328 330 (fontified t) 330 333 (fontified t face font-lock-keyword-face) 333 334 (fontified t) 334 337 (fontified t face font-lock-constant-face) 337 339 (fontified t) 339 343 (fontified t face font-lock-constant-face) 343 346 (fontified t) 346 354 (fontified t face font-lock-type-face) 354 356 (fontified t) 356 363 (fontified t face font-lock-type-face) 363 366 (fontified t) 366 369 (fontified t face font-lock-keyword-face) 369 370 (fontified t) 370 375 (fontified t face font-lock-constant-face) 375 377 (fontified t) 377 379 (fontified t face font-lock-constant-face) 379 382 (fontified t) 382 391 (fontified t face font-lock-type-face) 391 393 (fontified t) 393 398 (fontified t face font-lock-type-face) 398 401 (fontified t) 401 404 (fontified t face font-lock-keyword-face) 404 405 (fontified t) 405 409 (fontified t face font-lock-constant-face) 409 411 (fontified t) 411 415 (fontified t face font-lock-type-face) 415 418 (fontified t) 418 434 (fontified t face font-lock-preprocessor-face) 434 435 (fontified t) 435 441 (fontified t face font-lock-keyword-face) 441 442 (fontified t) 442 450 (fontified t face font-lock-type-face) 450 457 (fontified t) 457 465 (fontified t face font-lock-variable-name-face) 465 467 (fontified t) 467 475 (fontified t face font-lock-type-face) 475 476 (fontified t) 476 481 (fontified t face font-lock-type-face) 481 488 (fontified t) 488 500 (fontified t face font-lock-variable-name-face) 500 502 (fontified t face font-lock-variable-name-face) 502 504 (fontified t) 504 511 (fontified t face font-lock-type-face) 511 513 (fontified t) 513 517 (fontified t) 517 530 (fontified t face font-lock-variable-name-face) 530 532 (fontified t) 532 538 (fontified t face font-lock-type-face) 538 542 (fontified t) 542 546 (fontified t face font-lock-keyword-face) 546 547 (fontified t) 547 555 (fontified t face font-lock-type-face) 555 562 (fontified t) 562 564 (fontified t face font-lock-keyword-face) 564 565 (fontified t) 565 568 (fontified t face font-lock-function-name-face) 568 569 (fontified t) 569 582 (fontified t face font-lock-variable-name-face) 582 584 (fontified t) 584 588 (fontified t face font-lock-keyword-face) 588 589 (fontified t) 589 592 (fontified t face font-lock-constant-face) 592 594 (fontified t) 594 597 (fontified t face font-lock-constant-face) 597 599 (fontified t) 599 606 (fontified t face font-lock-type-face) 606 609 (fontified t) 609 610 (fontified t syntax-table #1#) 610 611 (fontified t) 611 615 (fontified t face font-lock-type-face) 615 626 (fontified t) 626 629 (fontified t face font-lock-keyword-face) 629 630 (fontified t) 630 643 (fontified t face font-lock-variable-name-face) 643 681 (fontified t) 681 689 (fontified t face font-lock-type-face) 689 704 (fontified t) 704 712 (fontified t face font-lock-variable-name-face) 712 714 (fontified t) 714 722 (fontified t face font-lock-type-face) 722 743 (fontified t) 743 757 (fontified t face font-lock-variable-name-face) 757 759 (fontified t) 759 766 (fontified t face font-lock-type-face) 766 821 (fontified t) 821 894 (fontified t face font-lock-doc-face) 894 910 (fontified t face font-lock-preprocessor-face) 910 911 (fontified t) 911 914 (fontified t face font-lock-keyword-face) 914 915 (fontified t) 915 921 (fontified t face font-lock-keyword-face) 921 922 (fontified t) 922 930 (fontified t face font-lock-type-face) 930 937 (fontified t) 937 954 (fontified t face font-lock-variable-name-face) 954 956 (fontified t) 956 965 (fontified t face font-lock-type-face) 965 971 (fontified t) 971 997 (fontified t face font-lock-variable-name-face) 997 999 (fontified t) 999 1008 (fontified t face font-lock-type-face) 1008 1013 (fontified t) 1013 1014 (fontified t) 1014 1016 (fontified t face font-lock-variable-name-face) 1016 1018 (fontified t) 1018 1024 (fontified t face font-lock-type-face) 1024 1026 (fontified t) 1026 1030 (fontified t) 1030 1033 (fontified t face font-lock-keyword-face) 1033 1034 (fontified t) 1034 1038 (fontified t face font-lock-variable-name-face) 1038 1040 (fontified t) 1040 1044 (fontified t face font-lock-type-face) 1044 1050 (fontified t) 1050 1060 (fontified t face font-lock-variable-name-face) 1060 1062 (fontified t) 1062 1066 (fontified t face font-lock-type-face) 1066 1072 (fontified t) 1072 1082 (fontified t face font-lock-variable-name-face) 1082 1084 (fontified t) 1084 1091 (fontified t face font-lock-type-face) 1091 1092 (fontified t) 1092 1096 (fontified t face font-lock-type-face) 1096 1098 (fontified t) 1098 1106 (fontified t face font-lock-type-face) 1106 1113 (fontified t) 1113 1133 (fontified t face font-lock-variable-name-face) 1133 1135 (fontified t) 1135 1142 (fontified t face font-lock-type-face) 1142 1143 (fontified t) 1143 1149 (fontified t face font-lock-type-face) 1149 1151 (fontified t) 1151 1154 (fontified t face font-lock-type-face) 1154 1159 (fontified t) 1159 1163 (fontified t face font-lock-keyword-face) 1163 1164 (fontified t) 1164 1171 (fontified t face font-lock-type-face) 1171 1172 (fontified t) 1172 1175 (fontified t face font-lock-keyword-face) 1175 1176 (fontified t) 1176 1184 (fontified t face font-lock-type-face) 1184 1191 (fontified t) 1191 1193 (fontified t face font-lock-keyword-face) 1193 1194 (fontified t) 1194 1201 (fontified t face font-lock-function-name-face) 1201 1205 (fontified t) 1205 1206 (fontified t syntax-table #1#) 1206 1207 (fontified t) 1207 1211 (fontified t face font-lock-type-face) 1211 1222 (fontified t) 1222 1226 (fontified t face font-lock-type-face) 1226 1242 (fontified t) 1242 1246 (fontified t face font-lock-keyword-face) 1246 1247 (fontified t) 1247 1255 (fontified t face font-lock-type-face) 1255 1262 (fontified t) 1262 1265 (fontified t face font-lock-keyword-face) 1265 1266 (fontified t) 1266 1268 (fontified t face font-lock-keyword-face) 1268 1269 (fontified t) 1269 1272 (fontified t face font-lock-function-name-face) 1272 1276 (fontified t) 1276 1277 (fontified t syntax-table #1#) 1277 1278 (fontified t) 1278 1282 (fontified t face font-lock-type-face) 1282 1293 (fontified t) 1293 1296 (fontified t face font-lock-keyword-face) 1296 1297 (fontified t) 1297 1314 (fontified t face font-lock-variable-name-face) 1314 1317 (fontified t) 1317 1326 (fontified t face font-lock-type-face) 1326 1336 (fontified t) 1336 1352 (fontified t face font-lock-string-face) 1352 1361 (fontified t) 1361 1383 (fontified t face font-lock-string-face) 1383 1442 (fontified t) 1442 1446 (fontified t face font-lock-type-face) 1446 1447 (fontified t) 1447 1455 (fontified t face font-lock-type-face) 1455 1495 (fontified t) 1495 1526 (fontified t face font-lock-string-face) 1526 1538 (fontified t face font-lock-string-face) 1538 1541 (fontified t) 3681 3682 (syntax-table #1#) 4317 4318 (syntax-table #1#) 5019 5025 (fontified t) 5025 5027 (fontified t) 5027 5031 (fontified t face font-lock-keyword-face) 5031 5032 (fontified t) 5032 5038 (fontified t face font-lock-type-face) 5038 5039 (fontified t) 5039 5042 (fontified t face font-lock-keyword-face) 5042 5043 (fontified t) 5043 5051 (fontified t face font-lock-type-face) 5051 5058 (fontified t) 5058 5062 (fontified t face font-lock-keyword-face) 5062 5063 (fontified t) 5063 5067 (fontified t face font-lock-type-face) 5067 5070 (fontified t) 5070 5075 (fontified t face font-lock-type-face) 5075 5081 (fontified t) 5081 5085 (fontified t face font-lock-keyword-face) 5085 5086 (fontified t) 5086 5091 (fontified t face font-lock-type-face) 5091 5094 (fontified t) 5094 5099 (fontified t face font-lock-type-face) 5099 5106 (fontified t) 5106 5108 (fontified t face font-lock-keyword-face) 5108 5109 (fontified t) 5109 5113 (fontified t face font-lock-function-name-face) 5113 5115 (fontified t) 5115 5118 (fontified t face font-lock-keyword-face) 5118 5119 (fontified t) 5119 5123 (fontified t face font-lock-keyword-face) 5123 5126 (fontified t) 5126 5127 (syntax-table #1# fontified t) 5127 5128 (fontified t) 5128 5132 (fontified t face font-lock-type-face) 5132 5133 (fontified t) 5133 5139 (fontified t face font-lock-type-face) 5139 5140 (fontified t) 5140 5145 (fontified t face font-lock-type-face) 5145 5148 (fontified t) 5148 5152 (fontified t face font-lock-type-face) 5152 5154 (fontified t) 5154 5159 (fontified t face font-lock-type-face) 5159 5171 (fontified t) 5171 5174 (fontified t face font-lock-keyword-face) 5174 5175 (fontified t) 5175 5178 (fontified t face font-lock-keyword-face) 5178 5179 (fontified t) 5179 5185 (fontified t face font-lock-variable-name-face) 5185 5188 (fontified t) 5188 5192 (fontified t face font-lock-preprocessor-face) 5192 5213 (fontified t) 5213 5218 (fontified t face font-lock-preprocessor-face) 5218 5219 (fontified t) 5219 5240 (fontified t face font-lock-string-face) 5240 5242 (fontified t) 5242 5246 (fontified t face font-lock-keyword-face) 5246 5268 (fontified t) 5268 5271 (fontified t face font-lock-keyword-face) 5271 5272 (fontified t) 5272 5280 (fontified t face font-lock-variable-name-face) 5280 5283 (fontified t) 5283 5287 (fontified t face font-lock-keyword-face) 5287 5301 (fontified t) 5301 5309 (fontified t) 5309 5312 (fontified t face font-lock-comment-delimiter-face) 5312 5351 (fontified t face font-lock-comment-face) 5351 5352 (fontified t face font-lock-comment-face) 5352 5360 (fontified t) 5360 5364 (fontified t face font-lock-keyword-face) 5364 5395 (fontified t) 5395 5399 (fontified t face font-lock-keyword-face) 5399 5475 (fontified t) 5475 5482 (fontified t face font-lock-type-face) 5482 5501 (fontified t) 5501 5504 (fontified t face font-lock-comment-delimiter-face) 5504 5519 (fontified t face font-lock-comment-face) 5519 5572 (face font-lock-comment-face fontified t) 5572 5580 (fontified t) 5580 5583 (fontified t face font-lock-comment-delimiter-face) 5583 5658 (fontified t face font-lock-comment-face) 5658 5666 (fontified t) 5666 5669 (fontified t face font-lock-keyword-face) 5669 5670 (fontified t) 5670 5673 (fontified t face font-lock-keyword-face) 5673 5674 (fontified t) 5674 5686 (fontified t face font-lock-variable-name-face) 5686 5689 (fontified t) 5689 5708 (fontified t face font-lock-type-face) 5708 5710 (fontified t) 5710 5713 (fontified t face font-lock-keyword-face) 5713 5714 (fontified t) 5714 5718 (fontified t face font-lock-keyword-face) 5718 5747 (fontified t) 5747 5749 (fontified t face font-lock-keyword-face) 5749 5750 (fontified t) 5750 5753 (fontified t face font-lock-keyword-face) 5753 5754 (fontified t) 5754 5759 (fontified t face font-lock-type-face) 5759 5761 (fontified t) 5761 5766 (fontified t face font-lock-type-face) 5766 5809 (fontified t) 5809 5812 (fontified t face font-lock-keyword-face) 5812 5820 (fontified t) 5820 5821 (fontified t face rust-question-mark-face) 5821 5836 (fontified t) 5836 5839 (fontified t face font-lock-comment-delimiter-face) 5839 5851 (fontified t face font-lock-comment-face) 5851 5896 (fontified t face font-lock-comment-face) 5896 5908 (fontified t) 5908 5911 (fontified t face font-lock-keyword-face) 5911 5912 (fontified t) 5912 5914 (fontified t face font-lock-variable-name-face) 5914 5917 (fontified t) 5917 5922 (fontified t face font-lock-type-face) 5922 5928 (fontified t) 5928 5929 (syntax-table #2# fontified t face font-lock-string-face) 5929 5946 (fontified t face font-lock-string-face) 5946 5947 (syntax-table #3# fontified t face font-lock-string-face) 5947 5956 (fontified t) 5956 5980 (fontified t face font-lock-string-face) 5980 5995 (fontified t) 5995 5997 (fontified t face font-lock-keyword-face) 5997 5998 (fontified t) 5998 6001 (fontified t face font-lock-keyword-face) 6001 6002 (fontified t) 6002 6006 (fontified t face font-lock-type-face) 6006 6030 (fontified t) 6030 6036 (fontified t face font-lock-type-face) 6036 6072 (fontified t) 6072 6084 (fontified t) 6084 6100 (fontified t) 6100 6108 (fontified t face rust-builtin-formatting-macro-face) 6108 6109 (fontified t) 6109 6110 (fontified t face font-lock-string-face) 6110 6114 (fontified t face rust-string-interpolation-face) 6114 6115 (fontified t face font-lock-string-face) 6115 6118 (fontified t) 6118 6122 (fontified t face font-lock-keyword-face) 6122 6124 (fontified t) 6124 6125 (fontified t) 6125 6141 (fontified t) 6141 6144 (fontified t face font-lock-keyword-face) 6144 6145 (fontified t) 6145 6148 (fontified t face font-lock-variable-name-face) 6148 6149 (fontified t) 6149 6150 (fontified t) 6150 6155 (fontified t face font-lock-type-face) 6155 6158 (fontified t) 6158 6168 (fontified t face font-lock-constant-face) 6168 6187 (fontified t) 6187 6193 (fontified t face font-lock-string-face) 6193 6215 (fontified t) 6215 6216 (fontified t face rust-question-mark-face) 6216 6218 (fontified t) 6218 6234 (fontified t) 6234 6237 (fontified t face font-lock-keyword-face) 6237 6248 (fontified t) 6248 6250 (fontified t face font-lock-keyword-face) 6250 6251 (fontified t) 6251 6255 (fontified t face font-lock-keyword-face) 6255 6302 (fontified t) 6302 6304 (fontified t face font-lock-keyword-face) 6304 6434 (fontified t) 6434 6442 (fontified t face rust-builtin-formatting-macro-face) 6442 6443 (fontified t) 6443 6462 (fontified t face font-lock-string-face) 6462 6464 (fontified t face rust-string-interpolation-face) 6464 6465 (fontified t face font-lock-string-face) 6465 6501 (fontified t) 6501 6505 (fontified t face font-lock-keyword-face) 6505 6532 (fontified t) 6532 6540 (fontified t face rust-builtin-formatting-macro-face) 6540 6541 (fontified t) 6541 6561 (fontified t face font-lock-string-face) 6561 6563 (fontified t face rust-string-interpolation-face) 6563 6564 (fontified t face font-lock-string-face) 6564 6584 (fontified t) 6584 6600 (fontified t) 6600 6624 (fontified t) 6624 6632 (fontified t) 6632 6651 (fontified t) 6651 6654 (fontified t face font-lock-comment-delimiter-face) 6654 6718 (fontified t face font-lock-comment-face) 6718 6738 (face font-lock-comment-face fontified t) 6738 6746 (fontified t) 6746 6751 (fontified t face font-lock-keyword-face) 6751 6752 (fontified t) 6752 6756 (fontified t face font-lock-keyword-face) 6756 6800 (fontified t) 6800 6804 (fontified t face font-lock-keyword-face) 6804 6848 (fontified t) 6848 6856 (fontified t face font-lock-type-face) 6856 6942 (fontified t) 6942 6946 (fontified t face font-lock-type-face) 6946 6955 (fontified t) 6955 6956 (fontified t syntax-table #1#) 6956 6957 (fontified t) 6957 6959 (fontified t face font-lock-type-face) 6959 6960 (fontified t) 6960 6965 (fontified t face font-lock-type-face) 6965 6967 (fontified t) 6967 6972 (fontified t face font-lock-type-face) 6972 6973 (fontified t) 6973 6977 (fontified t face font-lock-type-face) 6977 7003 (fontified t) 7003 7004 (fontified t syntax-table #1#) 7004 7005 (fontified t) 7005 7007 (fontified t face font-lock-type-face) 7007 7008 (fontified t) 7008 7013 (fontified t face font-lock-type-face) 7013 7015 (fontified t) 7015 7023 (fontified t face font-lock-type-face) 7023 7045 (fontified t) 7045 7049 (fontified t face font-lock-keyword-face) 7049 7050 (fontified t) 7050 7054 (fontified t face font-lock-type-face) 7054 7055 (fontified t) 7055 7058 (fontified t face font-lock-keyword-face) 7058 7059 (fontified t) 7059 7067 (fontified t face font-lock-type-face) 7067 7074 (fontified t) 7074 7076 (fontified t face font-lock-keyword-face) 7076 7077 (fontified t) 7077 7081 (fontified t face font-lock-function-name-face) 7081 7083 (fontified t) 7083 7086 (fontified t face font-lock-keyword-face) 7086 7087 (fontified t) 7087 7091 (fontified t face font-lock-keyword-face) 7091 7100 (fontified t) 7100 7103 (fontified t) 7103 7106 (fontified t face font-lock-keyword-face) 7106 7107 (fontified t) 7107 7115 (fontified t face font-lock-variable-name-face) 7115 7118 (fontified t) 7118 7122 (fontified t face font-lock-keyword-face) 7122 7132 (fontified t) 7132 7135 (fontified t) 7135 7143 (fontified t) 7143 7147 (fontified t face font-lock-keyword-face) 7147 7181 (fontified t) 7181 7187 (fontified t face font-lock-keyword-face) 7187 7188 (fontified t) 7188 7207 (fontified t face font-lock-type-face) 7207 7209 (fontified t) 7209 7210 (fontified t face font-lock-variable-name-face) 7210 7214 (fontified t) 7214 7215 (fontified t face font-lock-variable-name-face) 7215 7216 (fontified t) 7216 7219 (fontified t face font-lock-keyword-face) 7219 7220 (fontified t) 7220 7229 (fontified t face font-lock-type-face) 7229 7233 (fontified t) 7233 7237 (fontified t face font-lock-keyword-face) 7237 7238 (fontified t) 7238 7239 (fontified t) 7239 7240 (face font-lock-variable-name-face fontified t) 7240 7242 (fontified t) 7242 7246 (face font-lock-type-face fontified t) 7246 7247 (fontified t) 7247 7250 (face font-lock-keyword-face fontified t) 7250 7251 (fontified t) 7251 7270 (face font-lock-type-face fontified t) 7270 7272 (fontified t) 7272 7273 (face font-lock-variable-name-face fontified t) 7273 7277 (fontified t) 7281 7283 (face font-lock-keyword-face) 7284 7288 (face font-lock-function-name-face) 7290 7293 (face font-lock-keyword-face) 7294 7298 (face font-lock-keyword-face) 7300 7306 (face font-lock-variable-name-face) 7309 7312 (face font-lock-keyword-face) 7314 7316 (face font-lock-type-face) 7320 7321 (syntax-table #1#) 7322 7328 (face font-lock-type-face) 7329 7334 (face font-lock-type-face) 7336 7339 (face font-lock-constant-face) 7341 7343 (face font-lock-constant-face) 7345 7350 (face font-lock-type-face) 7362 7366 (face font-lock-keyword-face) 7391 7395 (face font-lock-keyword-face) 7397 7398 (face font-lock-variable-name-face) 7400 7409 (face font-lock-type-face) 7410 7413 (face font-lock-keyword-face) 7414 7433 (face font-lock-type-face) 7435 7436 (face font-lock-variable-name-face) 7444 7446 (face font-lock-keyword-face) 7447 7456 (face font-lock-function-name-face) 7458 7461 (face font-lock-keyword-face) 7462 7466 (face font-lock-keyword-face) 7468 7471 (face font-lock-variable-name-face) 7474 7477 (face font-lock-keyword-face) 7479 7481 (face font-lock-type-face) 7485 7486 (syntax-table #1#) 7487 7491 (face font-lock-type-face) 7492 7497 (face font-lock-type-face) 7499 7502 (face font-lock-constant-face) 7504 7506 (face font-lock-constant-face) 7508 7513 (face font-lock-type-face) 7525 7530 (face font-lock-keyword-face) 7531 7535 (face font-lock-keyword-face) 7560 7562 (face font-lock-type-face) 7567 7568 (syntax-table #1#) 7569 7571 (face font-lock-type-face) 7572 7577 (face font-lock-type-face) 7579 7584 (face font-lock-type-face) 7602 7605 (face font-lock-type-face) 7610 7611 (syntax-table #1#) 7612 7614 (face font-lock-type-face) 7615 7620 (face font-lock-type-face) 7622 7630 (face font-lock-type-face)) . 1) (undo-tree-id3250 . -6149) (undo-tree-id3251 . 1501) (undo-tree-id3252 . -6149) (undo-tree-id3253 . -6108) (undo-tree-id3254 . -5019) (undo-tree-id3255 . -6149) (undo-tree-id3256 . -6149) (undo-tree-id3257 . -6149) (undo-tree-id3258 . -5376) (undo-tree-id3259 . -6149) (undo-tree-id3260 . -6149) (undo-tree-id3261 . -5376) (undo-tree-id3262 . -6149) (undo-tree-id3263 . -5376) (undo-tree-id3264 . -6149) (undo-tree-id3265 . -6149) (undo-tree-id3266 . -6149) (undo-tree-id3267 . -6148) (undo-tree-id3268 . -5376) (t 23765 1373 300482 524000)) (23765 1394 4857 37000) 0 nil]) ((nil rear-nonsticky nil 6108 . 6109) (6085 . 6134)) nil (23765 1394 694022 70000) 0 nil] [nil nil ((nil rear-nonsticky nil 6007 . 6008) (5984 . 6033)) ((#("                        println!(\"{:?}\", &self);
" 0 23 (fontified nil) 23 24 (fontified nil rear-nonsticky nil) 24 32 (fontified nil face rust-builtin-formatting-macro-face) 32 33 (fontified nil) 33 34 (fontified nil face font-lock-string-face) 34 38 (fontified nil face rust-string-interpolation-face) 38 39 (fontified nil face font-lock-string-face) 39 42 (fontified nil) 42 46 (fontified nil face font-lock-keyword-face) 46 48 (fontified nil) 48 49 (fontified nil)) . 5984) (undo-tree-id3202 . -49) (undo-tree-id3203 . -48) (undo-tree-id3204 . -24) (undo-tree-id3205 . -24) (undo-tree-id3206 . -24) (undo-tree-id3207 . -24) (nil rear-nonsticky t 6007 . 6008)) (23765 1368 489633 945000) 0 nil]) ((#("                        println!(\"{:?}\", &self);
" 0 24 (fontified t) 24 32 (fontified t face rust-builtin-formatting-macro-face) 32 33 (fontified t) 33 34 (fontified t face font-lock-string-face) 34 38 (fontified t face rust-string-interpolation-face) 38 39 (fontified t face font-lock-string-face) 39 42 (fontified t) 42 46 (fontified t face font-lock-keyword-face) 46 48 (fontified t) 48 49 (fontified t)) . 6439) (undo-tree-id3194 . 12) (undo-tree-id3195 . -49) (undo-tree-id3196 . -41) (undo-tree-id3197 . -41) (undo-tree-id3198 . -41) (undo-tree-id3199 . -41) 6480) nil (23765 1368 493100 987000) 0 nil]) ((6474 . 6476)) nil (23765 1368 489654 643000) 0 nil]) ((6484 . 6485)) nil (23765 1368 489656 405000) 0 nil]) ((#("." 0 1 (fontified t)) . -6483) (undo-tree-id3200 . -1) 6484 (6476 . 6484) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 6476) (6475 . 6476) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 6475) (6474 . 6475) (6473 . 6475) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -6473) (6473 . 6474) (6472 . 6474) (#("\"" 0 1 (fontified nil)) . -6472) (6472 . 6473) (#("{}" 0 1 (fontified t) 1 2 (fontified t)) . 6472) (undo-tree-id3201 . -1) 6473 (6472 . 6474) (#("{" 0 1 (fontified nil)) . -6472) (6472 . 6473) (6471 . 6473) (#("(" 0 1 (fontified nil)) . -6471) (6471 . 6472) (6463 . 6471) (6438 . 6463) (t 23765 909 546030 780000) 6411) nil (23765 1368 489669 803000) 0 nil]) ((6404 . 6412) (#("Rejecting" 0 9 (fontified t face font-lock-string-face)) . 6404) (undo-tree-id3180 . 9)) nil (23765 909 463576 352000) 0 nil]) ((nil rear-nonsticky nil 6393 . 6394) (6370 . 6440)) nil (23765 909 463580 970000) 0 nil]) ((#("        println!(\"being polled for: {}\", &timeline);
" 0 8 (fontified t) 8 16 (fontified t face rust-builtin-formatting-macro-face) 16 17 (fontified t) 17 36 (fontified t face font-lock-string-face) 36 38 (fontified t face rust-string-interpolation-face) 38 39 (fontified t face font-lock-string-face) 39 52 (fontified t) 52 53 (fontified t)) . 5301) (undo-tree-id3181 . -33) (undo-tree-id3182 . -33) (undo-tree-id3183 . -33) (undo-tree-id3184 . -33) (undo-tree-id3185 . -33) (undo-tree-id3186 . -33) (undo-tree-id3187 . -33) (undo-tree-id3188 . -33) (undo-tree-id3189 . -53) (undo-tree-id3190 . -33) (undo-tree-id3191 . -53) (undo-tree-id3192 . -53) (undo-tree-id3193 . -33) 5334 (t 23765 812 826533 779000)) nil (23765 909 463597 839000) 0 nil]) ((1 . 7595) (#("//! Interfacing with Redis and stream the results on to the `StreamManager`
use crate::redis_cmd;
use crate::user::User;
use futures::stream::Stream;
use futures::{Async, Poll};
use log::info;
use regex::Regex;
use serde_json::Value;
use std::collections::{HashMap, VecDeque};
use std::io::{Read, Write};
use std::net::TcpStream;
use std::time::{Duration, Instant};
use tokio::io::{AsyncRead, Error};
use uuid::Uuid;

#[derive(Debug)]
struct MsgQueue {
    messages: VecDeque<Value>,
    last_polled_at: Instant,
    redis_channel: String,
}
impl MsgQueue {
    fn new(redis_channel: impl std::fmt::Display) -> Self {
        let redis_channel = redis_channel.to_string();
        MsgQueue {
            messages: VecDeque::new(),
            last_polled_at: Instant::now(),
            redis_channel,
        }
    }
}

/// The item that streams from Redis and is polled by the `StreamManger`
#[derive(Debug)]
pub struct Receiver {
    pubsub_connection: TcpStream,
    secondary_redis_connection: TcpStream,
    tl: String,
    pub user: User,
    manager_id: Uuid,
    msg_queues: HashMap<Uuid, MsgQueue>,
    clients_per_timeline: HashMap<String, i32>,
}
impl Default for Receiver {
    fn default() -> Self {
        Self::new()
    }
}
impl Receiver {
    pub fn new() -> Self {
        let pubsub_connection = TcpStream::connect(\"127.0.0.1:6379\").expect(\"Can connect to Redis\");
        pubsub_connection
            .set_read_timeout(Some(Duration::from_millis(10)))
            .expect(\"Can set read timeout for Redis connection\");
        let secondary_redis_connection =
            TcpStream::connect(\"127.0.0.1:6379\").expect(\"Can connect to Redis\");
        secondary_redis_connection
            .set_read_timeout(Some(Duration::from_millis(10)))
            .expect(\"Can set read timeout for Redis connection\");
        Self {
            pubsub_connection,
            secondary_redis_connection,
            tl: String::new(),
            user: User::public(),
            manager_id: Uuid::new_v4(),
            msg_queues: HashMap::new(),
            clients_per_timeline: HashMap::new(),
        }
    }

    /// Update the `StreamManager` that is currently polling the `Receiver`
    pub fn update(&mut self, id: Uuid, timeline: impl std::fmt::Display) {
        self.manager_id = id;
        self.tl = timeline.to_string();
    }

    /// Send a subscribe command to the Redis PubSub (if needed)
    pub fn maybe_subscribe(&mut self, tl: &str) {
        info!(\"Subscribing to {}\", &tl);

        let manager_id = self.manager_id;
        self.msg_queues.insert(manager_id, MsgQueue::new(tl));
        let current_clients = self
            .clients_per_timeline
            .entry(tl.to_string())
            .and_modify(|n| *n += 1)
            .or_insert(1);

        if *current_clients == 1 {
            let subscribe_cmd = redis_cmd::pubsub(\"subscribe\", tl);
            self.pubsub_connection
                .write_all(&subscribe_cmd)
                .expect(\"Can subscribe to Redis\");
            let set_subscribed_cmd = redis_cmd::set(format!(\"subscribed:timeline:{}\", tl), \"1\");
            self.secondary_redis_connection
                .write_all(&set_subscribed_cmd)
                .expect(\"Can set Redis\");
            info!(\"Now subscribed to: {:#?}\", &self.msg_queues);
        }
    }

    /// Drop any PubSub subscriptions that don't have active clients
    pub fn unsubscribe_from_empty_channels(&mut self) {
        let mut timelines_with_fewer_clients = Vec::new();

        // Keep only message queues that have been polled recently
        self.msg_queues.retain(|_id, msg_queue| {
            if msg_queue.last_polled_at.elapsed() < Duration::from_secs(30) {
                true
            } else {
                timelines_with_fewer_clients.push(msg_queue.redis_channel.clone());
                false
            }
        });

        // Record the lower number of clients subscribed to that channel
        for timeline in timelines_with_fewer_clients {
            let count_of_subscribed_clients = self
                .clients_per_timeline
                .entry(timeline.clone())
                .and_modify(|n| *n -= 1)
                .or_insert(0);
            // If no clients, unsubscribe from the channel
            if *count_of_subscribed_clients <= 0 {
                self.unsubscribe(&timeline);
            }
        }
    }

    /// Send an unsubscribe command to the Redis PubSub
    pub fn unsubscribe(&mut self, tl: &str) {
        let unsubscribe_cmd = redis_cmd::pubsub(\"unsubscribe\", tl);
        info!(\"Unsubscribing from {}\", &tl);
        self.pubsub_connection
            .write_all(&unsubscribe_cmd)
            .expect(\"Can unsubscribe from Redis\");
        let set_subscribed_cmd = redis_cmd::set(format!(\"subscribed:timeline:{}\", tl), \"0\");
        self.secondary_redis_connection
            .write_all(&set_subscribed_cmd)
            .expect(\"Can set Redis\");
        info!(\"Now subscribed only to: {:#?}\", &self.msg_queues);
    }
}
impl Stream for Receiver {
    type Item = Value;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<Value>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        info!(\"Being polled by: {}\", self.manager_id);
        let timeline = self.tl.clone();
                        println!(\"being polled for: {}\", &timeline);

        // Record current time as last polled time
        self.msg_queues
            .entry(self.manager_id)
            .and_modify(|msg_queue| msg_queue.last_polled_at = Instant::now());

        // Add any incomming messages to the back of the relevant `msg_queues`
        // NOTE: This could be more/other than the `msg_queue` currently being polled
        let mut async_stream = AsyncReadableStream(&mut self.pubsub_connection);
        if let Async::Ready(num_bytes_read) = async_stream.poll_read(&mut buffer)? {
            // capture everything between `{` and `}` as potential JSON
            let re = Regex::new(r\"(?P<json>\\{.*\\})\").expect(\"Valid hard-coded regex\");
            if let Some(result) = re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read])) {
                let msg: Value = serde_json::from_str(&result[\"json\"].to_string().clone())?;
                for msg_queue in self.msg_queues.values_mut() {
                    if msg_queue.redis_channel == timeline {
                        msg_queue.messages.push_back(msg.clone());
                    } else {
                        println!(\"Rejecting msg for: {}\", &timeline);
                    }
                }
            }
        }

        // If the `msg_queue` being polled has any new messages, return the first (oldest) one
        match self
            .msg_queues
            .entry(self.manager_id)
            .or_insert_with(|| MsgQueue::new(timeline))
            .messages
            .pop_front()
        {
            Some(value) => Ok(Async::Ready(Some(value))),
            _ => Ok(Async::NotReady),
        }
    }
}

impl Drop for Receiver {
    fn drop(&mut self) {
        let timeline = self.tl.clone();
        self.unsubscribe(&timeline);
    }
}

struct AsyncReadableStream<'a>(&'a mut TcpStream);

impl<'a> Read for AsyncReadableStream<'a> {
    fn read(&mut self, buffer: &mut [u8]) -> Result<usize, std::io::Error> {
        self.0.read(buffer)
    }
}

impl<'a> AsyncRead for AsyncReadableStream<'a> {
    fn poll_read(&mut self, buf: &mut [u8]) -> Poll<usize, std::io::Error> {
        match self.read(buf) {
            Ok(t) => Ok(Async::Ready(t)),
            Err(_) => Ok(Async::NotReady),
        }
    }
}
" 0 75 (fontified t face font-lock-doc-face) 75 76 (fontified t face font-lock-doc-face) 76 79 (fontified t face font-lock-keyword-face) 79 80 (fontified t) 80 85 (fontified t face font-lock-keyword-face) 85 98 (fontified t) 98 101 (fontified t face font-lock-keyword-face) 101 102 (fontified t) 102 107 (fontified t face font-lock-keyword-face) 107 109 (fontified t) 109 113 (fontified t face font-lock-constant-face) 113 115 (fontified t) 115 119 (fontified t face font-lock-type-face) 119 121 (fontified t) 121 124 (fontified t face font-lock-keyword-face) 124 125 (fontified t) 125 132 (fontified t face font-lock-constant-face) 132 134 (fontified t) 134 140 (fontified t face font-lock-constant-face) 140 142 (fontified t) 142 148 (fontified t face font-lock-type-face) 148 150 (fontified t) 150 153 (fontified t face font-lock-keyword-face) 153 154 (fontified t) 154 161 (fontified t face font-lock-constant-face) 161 164 (fontified t) 164 169 (fontified t face font-lock-type-face) 169 171 (fontified t) 171 175 (fontified t face font-lock-type-face) 175 178 (fontified t) 178 181 (fontified t face font-lock-keyword-face) 181 182 (fontified t) 182 185 (fontified t face font-lock-constant-face) 185 193 (fontified t) 193 196 (fontified t face font-lock-keyword-face) 196 197 (fontified t) 197 202 (fontified t face font-lock-constant-face) 202 204 (fontified t) 204 209 (fontified t face font-lock-type-face) 209 211 (fontified t) 211 214 (fontified t face font-lock-keyword-face) 214 215 (fontified t) 215 225 (fontified t face font-lock-constant-face) 225 227 (fontified t) 227 232 (fontified t face font-lock-type-face) 232 234 (fontified t) 234 237 (fontified t face font-lock-keyword-face) 237 238 (fontified t) 238 241 (fontified t face font-lock-constant-face) 241 243 (fontified t) 243 254 (fontified t face font-lock-constant-face) 254 257 (fontified t) 257 264 (fontified t face font-lock-type-face) 264 266 (fontified t) 266 274 (fontified t face font-lock-type-face) 274 277 (fontified t) 277 280 (fontified t face font-lock-keyword-face) 280 281 (fontified t) 281 284 (fontified t face font-lock-constant-face) 284 286 (fontified t) 286 288 (fontified t face font-lock-constant-face) 288 291 (fontified t) 291 295 (fontified t face font-lock-type-face) 295 297 (fontified t) 297 302 (fontified t face font-lock-type-face) 302 305 (fontified t) 305 308 (fontified t face font-lock-keyword-face) 308 309 (fontified t) 309 312 (fontified t face font-lock-constant-face) 312 314 (fontified t) 314 317 (fontified t face font-lock-constant-face) 317 319 (fontified t) 319 328 (fontified t face font-lock-type-face) 328 330 (fontified t) 330 333 (fontified t face font-lock-keyword-face) 333 334 (fontified t) 334 337 (fontified t face font-lock-constant-face) 337 339 (fontified t) 339 343 (fontified t face font-lock-constant-face) 343 346 (fontified t) 346 354 (fontified t face font-lock-type-face) 354 356 (fontified t) 356 363 (fontified t face font-lock-type-face) 363 366 (fontified t) 366 369 (fontified t face font-lock-keyword-face) 369 370 (fontified t) 370 375 (fontified t face font-lock-constant-face) 375 377 (fontified t) 377 379 (fontified t face font-lock-constant-face) 379 382 (fontified t) 382 391 (fontified t face font-lock-type-face) 391 393 (fontified t) 393 398 (fontified t face font-lock-type-face) 398 401 (fontified t) 401 404 (fontified t face font-lock-keyword-face) 404 405 (fontified t) 405 409 (fontified t face font-lock-constant-face) 409 411 (fontified t) 411 415 (fontified t face font-lock-type-face) 415 418 (fontified t) 418 434 (fontified t face font-lock-preprocessor-face) 434 435 (fontified t) 435 441 (fontified t face font-lock-keyword-face) 441 442 (fontified t) 442 450 (fontified t face font-lock-type-face) 450 457 (fontified t) 457 465 (fontified t face font-lock-variable-name-face) 465 467 (fontified t) 467 475 (fontified t face font-lock-type-face) 475 476 (fontified t) 476 481 (fontified t face font-lock-type-face) 481 488 (fontified t) 488 500 (fontified t face font-lock-variable-name-face) 500 502 (fontified t face font-lock-variable-name-face) 502 504 (fontified t) 504 511 (fontified t face font-lock-type-face) 511 513 (fontified t) 513 517 (fontified t) 517 530 (fontified t face font-lock-variable-name-face) 530 532 (fontified t) 532 538 (fontified t face font-lock-type-face) 538 542 (fontified t) 542 546 (fontified t face font-lock-keyword-face) 546 547 (fontified t) 547 555 (fontified t face font-lock-type-face) 555 562 (fontified t) 562 564 (fontified t face font-lock-keyword-face) 564 565 (fontified t) 565 568 (fontified t face font-lock-function-name-face) 568 569 (fontified t) 569 575 (fontified t face font-lock-variable-name-face) 575 582 (fontified t face font-lock-variable-name-face) 582 584 (fontified t) 584 588 (fontified t face font-lock-keyword-face) 588 589 (fontified t) 589 592 (fontified t face font-lock-constant-face) 592 594 (fontified t) 594 597 (fontified t face font-lock-constant-face) 597 599 (fontified t) 599 606 (fontified t face font-lock-type-face) 606 609 (fontified t) 609 610 (fontified t syntax-table #1#) 610 611 (fontified t) 611 615 (fontified t face font-lock-type-face) 615 618 (fontified t) 618 626 (fontified t) 626 629 (fontified t face font-lock-keyword-face) 629 630 (fontified t) 630 643 (fontified t face font-lock-variable-name-face) 643 681 (fontified t) 681 689 (fontified t face font-lock-type-face) 689 704 (fontified t) 704 712 (fontified t face font-lock-variable-name-face) 712 714 (fontified t) 714 722 (fontified t face font-lock-type-face) 722 743 (fontified t) 743 757 (fontified t face font-lock-variable-name-face) 757 759 (fontified t) 759 766 (fontified t face font-lock-type-face) 766 821 (fontified t) 821 894 (fontified t face font-lock-doc-face) 894 910 (fontified t face font-lock-preprocessor-face) 910 911 (fontified t) 911 914 (fontified t face font-lock-keyword-face) 914 915 (fontified t) 915 921 (fontified t face font-lock-keyword-face) 921 922 (fontified t) 922 930 (fontified t face font-lock-type-face) 930 937 (fontified t) 937 954 (fontified t face font-lock-variable-name-face) 954 956 (fontified t) 956 965 (fontified t face font-lock-type-face) 965 971 (fontified t) 971 997 (fontified t face font-lock-variable-name-face) 997 999 (fontified t) 999 1008 (fontified t face font-lock-type-face) 1008 1013 (fontified t) 1013 1014 (fontified t) 1014 1016 (fontified t face font-lock-variable-name-face) 1016 1018 (fontified t) 1018 1024 (fontified t face font-lock-type-face) 1024 1026 (fontified t) 1026 1030 (fontified t) 1030 1033 (fontified t face font-lock-keyword-face) 1033 1034 (fontified t) 1034 1038 (fontified t face font-lock-variable-name-face) 1038 1040 (fontified t) 1040 1044 (fontified t face font-lock-type-face) 1044 1050 (fontified t) 1050 1060 (fontified t face font-lock-variable-name-face) 1060 1062 (fontified t) 1062 1066 (fontified t face font-lock-type-face) 1066 1072 (fontified t) 1072 1082 (fontified t face font-lock-variable-name-face) 1082 1084 (fontified t) 1084 1091 (fontified t face font-lock-type-face) 1091 1092 (fontified t) 1092 1096 (fontified t face font-lock-type-face) 1096 1098 (fontified t) 1098 1106 (fontified t face font-lock-type-face) 1106 1113 (fontified t) 1113 1118 (fontified t face font-lock-variable-name-face) 1118 1133 (fontified t face font-lock-variable-name-face) 1133 1135 (fontified t) 1135 1142 (fontified t face font-lock-type-face) 1142 1143 (fontified t) 1143 1149 (fontified t face font-lock-type-face) 1149 1151 (fontified t) 1151 1154 (fontified t face font-lock-type-face) 1154 1157 (fontified t) 1157 1159 (fontified t) 1159 1163 (fontified t face font-lock-keyword-face) 1163 1164 (fontified t) 1164 1171 (fontified t face font-lock-type-face) 1171 1172 (fontified t) 1172 1175 (fontified t face font-lock-keyword-face) 1175 1176 (fontified t) 1176 1184 (fontified t face font-lock-type-face) 1184 1191 (fontified t) 1191 1193 (fontified t face font-lock-keyword-face) 1193 1194 (fontified t) 1194 1201 (fontified t face font-lock-function-name-face) 1201 1205 (fontified t) 1205 1206 (fontified t syntax-table #1#) 1206 1207 (fontified t) 1207 1211 (fontified t face font-lock-type-face) 1211 1222 (fontified t) 1222 1226 (fontified t face font-lock-type-face) 1226 1242 (fontified t) 1242 1246 (fontified t face font-lock-keyword-face) 1246 1247 (fontified t) 1247 1255 (fontified t face font-lock-type-face) 1255 1262 (fontified t) 1262 1265 (fontified t face font-lock-keyword-face) 1265 1266 (fontified t) 1266 1268 (fontified t face font-lock-keyword-face) 1268 1269 (fontified t) 1269 1272 (fontified t face font-lock-function-name-face) 1272 1276 (fontified t) 1276 1277 (fontified t syntax-table #1#) 1277 1278 (fontified t) 1278 1282 (fontified t face font-lock-type-face) 1282 1293 (fontified t) 1293 1296 (fontified t face font-lock-keyword-face) 1296 1297 (fontified t) 1297 1314 (fontified t face font-lock-variable-name-face) 1314 1317 (fontified t) 1317 1326 (fontified t face font-lock-type-face) 1326 1336 (fontified t) 1336 1352 (fontified t face font-lock-string-face) 1352 1361 (fontified t) 1361 1383 (fontified t face font-lock-string-face) 1383 1442 (fontified t) 1442 1446 (fontified t face font-lock-type-face) 1446 1447 (fontified t) 1447 1455 (fontified t face font-lock-type-face) 1455 1495 (fontified t) 1495 1526 (fontified t face font-lock-string-face) 1526 1538 (fontified t face font-lock-string-face) 1538 1541 (fontified t) 1541 1549 (fontified t) 1549 1552 (fontified t face font-lock-keyword-face) 1552 1553 (fontified t) 1553 1579 (fontified t face font-lock-variable-name-face) 1579 1594 (fontified t) 1594 1603 (fontified t face font-lock-type-face) 1603 1613 (fontified t) 1613 1629 (fontified t face font-lock-string-face) 1629 1638 (fontified t) 1638 1657 (fontified t face font-lock-string-face) 1657 1660 (fontified t face font-lock-string-face) 1660 1663 (fontified t) 1663 1728 (fontified t) 1728 1732 (fontified t face font-lock-type-face) 1732 1733 (fontified t) 1733 1741 (fontified t face font-lock-type-face) 1741 1781 (fontified t) 1781 1824 (fontified t face font-lock-string-face) 1824 1835 (fontified t) 1835 1839 (fontified t face font-lock-type-face) 1839 1925 (fontified t) 1925 1927 (fontified t face font-lock-variable-name-face) 1927 1929 (fontified t) 1929 1935 (fontified t face font-lock-type-face) 1935 1956 (fontified t) 1956 1960 (fontified t face font-lock-variable-name-face) 1960 1962 (fontified t) 1962 1966 (fontified t face font-lock-type-face) 1966 1990 (fontified t) 1990 2000 (fontified t face font-lock-variable-name-face) 2000 2002 (fontified t) 2002 2006 (fontified t face font-lock-type-face) 2006 2030 (fontified t) 2030 2040 (fontified t face font-lock-variable-name-face) 2040 2041 (fontified t) 2041 2042 (fontified t) 2042 2049 (face font-lock-type-face fontified t) 2049 2058 (fontified t) 2058 2070 (fontified t) 2070 2090 (fontified t face font-lock-variable-name-face) 2090 2092 (fontified t) 2092 2099 (fontified t face font-lock-type-face) 2099 2129 (fontified t) 2129 2163 (fontified t face font-lock-doc-face) 2163 2201 (fontified t face font-lock-doc-face) 2201 2205 (fontified t) 2205 2208 (fontified t face font-lock-keyword-face) 2208 2209 (fontified t) 2209 2211 (fontified t face font-lock-keyword-face) 2211 2212 (fontified t) 2212 2218 (fontified t face font-lock-function-name-face) 2218 2220 (fontified t) 2220 2223 (fontified t face font-lock-keyword-face) 2223 2224 (fontified t) 2224 2228 (fontified t face font-lock-keyword-face) 2228 2230 (fontified t) 2230 2232 (fontified t face font-lock-variable-name-face) 2232 2234 (fontified t) 2234 2238 (fontified t face font-lock-type-face) 2238 2240 (fontified t) 2240 2248 (fontified t face font-lock-variable-name-face) 2248 2250 (fontified t) 2250 2254 (fontified t face font-lock-keyword-face) 2254 2255 (fontified t) 2255 2258 (fontified t face font-lock-constant-face) 2258 2260 (fontified t) 2260 2263 (fontified t face font-lock-constant-face) 2263 2265 (fontified t) 2265 2272 (fontified t face font-lock-type-face) 2272 2284 (fontified t) 2284 2288 (fontified t face font-lock-keyword-face) 2288 2314 (fontified t) 2314 2318 (fontified t face font-lock-keyword-face) 2318 2357 (fontified t) 2357 2418 (fontified t face font-lock-doc-face) 2418 2422 (fontified t) 2422 2425 (fontified t face font-lock-keyword-face) 2425 2426 (fontified t) 2426 2428 (fontified t face font-lock-keyword-face) 2428 2429 (fontified t) 2429 2444 (fontified t face font-lock-function-name-face) 2444 2446 (fontified t) 2446 2449 (fontified t face font-lock-keyword-face) 2449 2450 (fontified t) 2450 2454 (fontified t face font-lock-keyword-face) 2454 2456 (fontified t) 2456 2458 (fontified t face font-lock-variable-name-face) 2458 2461 (fontified t) 2461 2464 (fontified t face font-lock-type-face) 2464 2476 (fontified t) 2476 2481 (fontified t face font-lock-preprocessor-face) 2481 2482 (fontified t) 2482 2501 (fontified t face font-lock-string-face) 2501 2518 (fontified t) 2518 2521 (fontified t face font-lock-keyword-face) 2521 2522 (fontified t) 2522 2532 (fontified t face font-lock-variable-name-face) 2532 2535 (fontified t) 2535 2539 (fontified t face font-lock-keyword-face) 2539 2558 (fontified t) 2558 2560 (fontified t) 2560 2564 (face font-lock-keyword-face fontified t) 2564 2595 (fontified t) 2595 2603 (face font-lock-type-face fontified t) 2603 2615 (fontified t) 2615 2623 (fontified t) 2623 2626 (fontified t face font-lock-keyword-face) 2626 2627 (fontified t) 2627 2642 (fontified t face font-lock-variable-name-face) 2642 2645 (fontified t) 2645 2649 (fontified t face font-lock-keyword-face) 2649 2792 (fontified t) 2792 2794 (fontified t face font-lock-keyword-face) 2794 2831 (fontified t) 2831 2834 (fontified t face font-lock-keyword-face) 2834 2835 (fontified t) 2835 2848 (fontified t face font-lock-variable-name-face) 2848 2851 (fontified t) 2851 2860 (fontified t face font-lock-constant-face) 2860 2869 (fontified t) 2869 2880 (fontified t face font-lock-string-face) 2880 2899 (fontified t) 2899 2903 (fontified t face font-lock-keyword-face) 2903 2989 (fontified t) 2989 3013 (fontified t face font-lock-string-face) 3013 3028 (fontified t) 3028 3031 (fontified t face font-lock-keyword-face) 3031 3032 (fontified t) 3032 3050 (fontified t face font-lock-variable-name-face) 3050 3053 (fontified t) 3053 3062 (fontified t face font-lock-constant-face) 3062 3068 (fontified t) 3068 3075 (fontified t face rust-builtin-formatting-macro-face) 3075 3076 (fontified t) 3076 3097 (fontified t face font-lock-string-face) 3097 3099 (fontified t face rust-string-interpolation-face) 3099 3100 (fontified t face font-lock-string-face) 3100 3107 (fontified t) 3107 3110 (fontified t face font-lock-string-face) 3110 3115 (fontified t) 3115 3125 (fontified t) 3125 3129 (face font-lock-keyword-face fontified t) 3129 3157 (fontified t) 3157 3229 (fontified t) 3229 3244 (fontified t face font-lock-string-face) 3244 3259 (fontified t) 3259 3264 (fontified t face font-lock-preprocessor-face) 3264 3265 (fontified t) 3265 3291 (fontified t face font-lock-string-face) 3291 3294 (fontified t) 3294 3298 (fontified t face font-lock-keyword-face) 3298 3333 (fontified t) 3333 3398 (fontified t face font-lock-doc-face) 3398 3402 (fontified t) 3402 3405 (fontified t face font-lock-keyword-face) 3405 3406 (fontified t) 3406 3408 (fontified t face font-lock-keyword-face) 3408 3409 (fontified t) 3409 3440 (fontified t face font-lock-function-name-face) 3440 3442 (fontified t) 3442 3445 (fontified t face font-lock-keyword-face) 3445 3446 (fontified t) 3446 3450 (fontified t face font-lock-keyword-face) 3450 3462 (fontified t) 3462 3465 (fontified t face font-lock-keyword-face) 3465 3466 (fontified t) 3466 3469 (fontified t face font-lock-keyword-face) 3469 3470 (fontified t) 3470 3498 (fontified t face font-lock-variable-name-face) 3498 3501 (fontified t) 3501 3504 (fontified t face font-lock-type-face) 3504 3522 (fontified t) 3522 3525 (fontified t face font-lock-comment-delimiter-face) 3525 3581 (fontified t face font-lock-comment-face) 3581 3589 (fontified t) 3589 3593 (fontified t face font-lock-keyword-face) 3593 3643 (fontified t) 3643 3645 (fontified t face font-lock-keyword-face) 3645 3657 (fontified t) 3657 3681 (fontified t) 3681 3682 (syntax-table #1# fontified t) 3682 3683 (fontified t) 3683 3691 (face font-lock-type-face fontified t) 3691 3709 (fontified t) 3709 3725 (fontified t) 3725 3729 (fontified t face font-lock-keyword-face) 3729 3744 (fontified t) 3744 3748 (fontified t face font-lock-keyword-face) 3748 3851 (fontified t) 3851 3856 (fontified t face font-lock-keyword-face) 3856 3892 (fontified t) 3892 3895 (fontified t face font-lock-comment-delimiter-face) 3895 3957 (fontified t face font-lock-comment-face) 3957 3965 (fontified t) 3965 3968 (fontified t face font-lock-keyword-face) 3968 3978 (fontified t) 3978 3980 (fontified t face font-lock-keyword-face) 3980 4024 (fontified t) 4024 4027 (fontified t face font-lock-keyword-face) 4027 4028 (fontified t) 4028 4055 (fontified t face font-lock-variable-name-face) 4055 4058 (fontified t) 4058 4062 (fontified t face font-lock-keyword-face) 4062 4209 (fontified t) 4209 4214 (fontified t) 4214 4226 (fontified t) 4226 4229 (fontified t face font-lock-comment-delimiter-face) 4229 4273 (fontified t face font-lock-comment-face) 4273 4285 (fontified t) 4285 4287 (fontified t face font-lock-keyword-face) 4287 4317 (fontified t) 4317 4318 (fontified t syntax-table #1#) 4318 4340 (fontified t) 4340 4344 (fontified t face font-lock-keyword-face) 4344 4404 (fontified t) 4404 4456 (fontified t face font-lock-doc-face) 4456 4460 (fontified t) 4460 4463 (fontified t face font-lock-keyword-face) 4463 4464 (fontified t) 4464 4466 (fontified t face font-lock-keyword-face) 4466 4467 (fontified t) 4467 4478 (fontified t face font-lock-function-name-face) 4478 4480 (fontified t) 4480 4483 (fontified t face font-lock-keyword-face) 4483 4484 (fontified t) 4484 4488 (fontified t face font-lock-keyword-face) 4488 4490 (fontified t) 4490 4492 (fontified t face font-lock-variable-name-face) 4492 4495 (fontified t) 4495 4498 (fontified t face font-lock-type-face) 4498 4510 (fontified t) 4510 4513 (fontified t face font-lock-keyword-face) 4513 4514 (fontified t) 4514 4529 (fontified t face font-lock-variable-name-face) 4529 4532 (fontified t) 4532 4541 (fontified t face font-lock-constant-face) 4541 4550 (fontified t) 4550 4563 (fontified t face font-lock-string-face) 4563 4578 (fontified t) 4578 4583 (fontified t face font-lock-preprocessor-face) 4583 4584 (fontified t) 4584 4607 (fontified t face font-lock-string-face) 4607 4623 (fontified t) 4623 4627 (fontified t face font-lock-keyword-face) 4627 4707 (fontified t) 4707 4714 (fontified t face font-lock-string-face) 4714 4735 (face font-lock-string-face fontified t) 4735 4738 (fontified t) 4738 4746 (fontified t) 4746 4749 (fontified t face font-lock-keyword-face) 4749 4750 (fontified t) 4750 4768 (fontified t face font-lock-variable-name-face) 4768 4771 (fontified t) 4771 4780 (fontified t face font-lock-constant-face) 4780 4786 (fontified t) 4786 4793 (fontified t face rust-builtin-formatting-macro-face) 4793 4794 (fontified t) 4794 4815 (fontified t face font-lock-string-face) 4815 4817 (fontified t face rust-string-interpolation-face) 4817 4818 (fontified t face font-lock-string-face) 4818 4825 (fontified t) 4825 4828 (fontified t face font-lock-string-face) 4828 4839 (fontified t) 4839 4843 (fontified t face font-lock-keyword-face) 4843 4935 (fontified t) 4935 4950 (fontified t face font-lock-string-face) 4950 4961 (fontified t) 4961 4966 (fontified t face font-lock-preprocessor-face) 4966 4967 (fontified t) 4967 4998 (fontified t face font-lock-string-face) 4998 5001 (fontified t) 5001 5005 (fontified t face font-lock-keyword-face) 5005 5027 (fontified t) 5027 5031 (fontified t face font-lock-keyword-face) 5031 5032 (fontified t) 5032 5038 (fontified t face font-lock-type-face) 5038 5039 (fontified t) 5039 5042 (fontified t face font-lock-keyword-face) 5042 5043 (fontified t) 5043 5051 (fontified t face font-lock-type-face) 5051 5058 (fontified t) 5058 5062 (fontified t face font-lock-keyword-face) 5062 5063 (fontified t) 5063 5067 (fontified t face font-lock-type-face) 5067 5070 (fontified t) 5070 5075 (fontified t face font-lock-type-face) 5075 5081 (fontified t) 5081 5085 (fontified t face font-lock-keyword-face) 5085 5086 (fontified t) 5086 5091 (fontified t face font-lock-type-face) 5091 5094 (fontified t) 5094 5099 (fontified t face font-lock-type-face) 5099 5106 (fontified t) 5106 5108 (fontified t face font-lock-keyword-face) 5108 5109 (fontified t) 5109 5113 (fontified t face font-lock-function-name-face) 5113 5115 (fontified t) 5115 5118 (fontified t face font-lock-keyword-face) 5118 5119 (fontified t) 5119 5123 (fontified t face font-lock-keyword-face) 5123 5126 (fontified t) 5126 5127 (fontified t syntax-table #1#) 5127 5128 (fontified t) 5128 5132 (fontified t face font-lock-type-face) 5132 5133 (fontified t) 5133 5139 (fontified t face font-lock-type-face) 5139 5140 (fontified t) 5140 5145 (fontified t face font-lock-type-face) 5145 5148 (fontified t) 5148 5152 (fontified t face font-lock-type-face) 5152 5154 (fontified t) 5154 5159 (fontified t face font-lock-type-face) 5159 5171 (fontified t) 5171 5174 (fontified t face font-lock-keyword-face) 5174 5175 (fontified t) 5175 5178 (fontified t face font-lock-keyword-face) 5178 5179 (fontified t) 5179 5185 (fontified t face font-lock-variable-name-face) 5185 5188 (fontified t) 5188 5192 (fontified t face font-lock-preprocessor-face) 5192 5205 (fontified t) 5205 5213 (fontified t) 5213 5218 (fontified t face font-lock-preprocessor-face) 5218 5219 (fontified t) 5219 5238 (fontified t face font-lock-string-face) 5238 5240 (fontified t face font-lock-string-face) 5240 5242 (fontified t) 5242 5246 (fontified t face font-lock-keyword-face) 5246 5259 (fontified t) 5259 5260 (fontified t) 5260 5268 (fontified t) 5268 5271 (fontified t face font-lock-keyword-face) 5271 5272 (fontified t) 5272 5280 (fontified t face font-lock-variable-name-face) 5280 5283 (fontified t) 5283 5287 (fontified t face font-lock-keyword-face) 5287 5299 (fontified t) 5299 5300 (fontified t) 5300 5323 (fontified t) 5323 5324 (rear-nonsticky t fontified t) 5324 5332 (fontified t face rust-builtin-formatting-macro-face) 5332 5333 (fontified t) 5333 5350 (fontified t face font-lock-string-face) 5350 5352 (fontified t face font-lock-string-face) 5352 5353 (fontified t face rust-string-interpolation-face) 5353 5354 (fontified t face rust-string-interpolation-face) 5354 5355 (fontified t face font-lock-string-face) 5355 5366 (fontified t) 5366 5368 (fontified t) 5368 5369 (fontified t) 5369 5378 (fontified t) 5378 5381 (fontified t face font-lock-comment-delimiter-face) 5381 5421 (fontified t face font-lock-comment-face) 5421 5429 (fontified t) 5429 5433 (fontified t face font-lock-keyword-face) 5433 5464 (fontified t) 5464 5468 (fontified t face font-lock-keyword-face) 5468 5544 (fontified t) 5544 5551 (fontified t face font-lock-type-face) 5551 5570 (fontified t) 5570 5573 (fontified t face font-lock-comment-delimiter-face) 5573 5641 (fontified t face font-lock-comment-face) 5641 5649 (fontified t) 5649 5652 (fontified t face font-lock-comment-delimiter-face) 5652 5727 (fontified t face font-lock-comment-face) 5727 5735 (fontified t) 5735 5738 (fontified t face font-lock-keyword-face) 5738 5739 (fontified t) 5739 5742 (fontified t face font-lock-keyword-face) 5742 5743 (fontified t) 5743 5755 (fontified t face font-lock-variable-name-face) 5755 5758 (fontified t) 5758 5777 (fontified t face font-lock-type-face) 5777 5779 (fontified t) 5779 5782 (fontified t face font-lock-keyword-face) 5782 5783 (fontified t) 5783 5787 (fontified t face font-lock-keyword-face) 5787 5816 (fontified t) 5816 5818 (fontified t face font-lock-keyword-face) 5818 5819 (fontified t) 5819 5822 (fontified t face font-lock-keyword-face) 5822 5823 (fontified t) 5823 5828 (fontified t face font-lock-type-face) 5828 5829 (fontified t) 5829 5830 (fontified t) 5830 5835 (fontified t face font-lock-type-face) 5835 5869 (fontified t) 5869 5878 (fontified t) 5878 5881 (face font-lock-keyword-face fontified t) 5881 5889 (fontified t) 5889 5890 (face rust-question-mark-face fontified t) 5890 5893 (fontified t) 5893 5905 (fontified t) 5905 5908 (fontified t face font-lock-comment-delimiter-face) 5908 5965 (fontified t face font-lock-comment-face) 5965 5977 (fontified t) 5977 5980 (fontified t face font-lock-keyword-face) 5980 5981 (fontified t) 5981 5983 (fontified t face font-lock-variable-name-face) 5983 5986 (fontified t) 5986 5991 (fontified t face font-lock-type-face) 5991 5997 (fontified t) 5997 5998 (fontified t syntax-table #2# face font-lock-string-face) 5998 6015 (fontified t face font-lock-string-face) 6015 6016 (fontified t syntax-table #3# face font-lock-string-face) 6016 6025 (fontified t) 6025 6049 (fontified t face font-lock-string-face) 6049 6064 (fontified t) 6064 6066 (fontified t face font-lock-keyword-face) 6066 6067 (fontified t) 6067 6070 (fontified t face font-lock-keyword-face) 6070 6071 (fontified t) 6071 6075 (fontified t face font-lock-type-face) 6075 6099 (fontified t) 6099 6105 (fontified t face font-lock-type-face) 6105 6169 (fontified t) 6169 6172 (fontified t face font-lock-keyword-face) 6172 6173 (fontified t) 6173 6176 (fontified t face font-lock-variable-name-face) 6176 6178 (fontified t) 6178 6183 (fontified t face font-lock-type-face) 6183 6186 (fontified t) 6186 6196 (fontified t face font-lock-constant-face) 6196 6215 (fontified t) 6215 6221 (fontified t face font-lock-string-face) 6221 6243 (fontified t) 6243 6244 (fontified t face rust-question-mark-face) 6244 6262 (fontified t) 6262 6265 (fontified t face font-lock-keyword-face) 6265 6276 (fontified t) 6276 6278 (fontified t face font-lock-keyword-face) 6278 6279 (fontified t) 6279 6283 (fontified t face font-lock-keyword-face) 6283 6330 (fontified t) 6330 6332 (fontified t face font-lock-keyword-face) 6332 6393 (fontified t) 6393 6438 (fontified t) 6438 6460 (fontified t) 6460 6464 (fontified t face font-lock-keyword-face) 6464 6465 (fontified t) 6465 6466 (fontified t) 6466 6467 (fontified t) 6467 6491 (fontified t) 6491 6499 (fontified t face rust-builtin-formatting-macro-face) 6499 6500 (fontified t) 6500 6517 (fontified t face font-lock-string-face) 6517 6518 (fontified t face font-lock-string-face) 6518 6520 (fontified t face font-lock-string-face) 6520 6521 (fontified t face rust-string-interpolation-face) 6521 6522 (fontified t face rust-string-interpolation-face) 6522 6523 (fontified t face font-lock-string-face) 6523 6534 (fontified t) 6534 6536 (fontified t) 6536 6537 (fontified t) 6537 6557 (fontified t) 6557 6558 (fontified t) 6558 6559 (fontified t) 6559 6610 (fontified t) 6610 6613 (fontified t face font-lock-comment-delimiter-face) 6613 6697 (fontified t face font-lock-comment-face) 6697 6705 (fontified t) 6705 6710 (fontified t face font-lock-keyword-face) 6710 6711 (fontified t) 6711 6715 (fontified t face font-lock-keyword-face) 6715 6759 (fontified t) 6759 6763 (fontified t face font-lock-keyword-face) 6763 6807 (fontified t) 6807 6815 (fontified t face font-lock-type-face) 6815 6901 (fontified t) 6901 6905 (fontified t face font-lock-type-face) 6905 6914 (fontified t) 6914 6915 (fontified t syntax-table #1#) 6915 6916 (fontified t) 6916 6918 (fontified t face font-lock-type-face) 6918 6919 (fontified t) 6919 6924 (fontified t face font-lock-type-face) 6924 6926 (fontified t) 6926 6931 (fontified t face font-lock-type-face) 6931 6932 (fontified t) 6932 6936 (fontified t face font-lock-type-face) 6936 6938 (fontified t) 6938 6947 (fontified t) 6962 6963 (syntax-table #1#) 6964 6966 (face font-lock-type-face) 6967 6972 (face font-lock-type-face) 6974 6982 (face font-lock-type-face) 7004 7008 (face font-lock-keyword-face) 7009 7013 (face font-lock-type-face) 7014 7017 (face font-lock-keyword-face) 7018 7026 (face font-lock-type-face) 7033 7035 (face font-lock-keyword-face) 7036 7037 (face font-lock-function-name-face) 7037 7040 (face font-lock-function-name-face) 7042 7045 (face font-lock-keyword-face) 7046 7050 (face font-lock-keyword-face) 7062 7065 (face font-lock-keyword-face) 7066 7074 (face font-lock-variable-name-face) 7077 7081 (face font-lock-keyword-face) 7102 7106 (face font-lock-keyword-face) 7140 7146 (face font-lock-keyword-face) 7147 7166 (face font-lock-type-face) 7168 7169 (face font-lock-variable-name-face) 7173 7174 (face font-lock-variable-name-face) 7175 7178 (face font-lock-keyword-face) 7179 7188 (face font-lock-type-face) 7192 7196 (face font-lock-keyword-face) 7198 7199 (face font-lock-variable-name-face) 7201 7205 (face font-lock-type-face) 7206 7209 (face font-lock-keyword-face) 7210 7229 (face font-lock-type-face) 7231 7232 (face font-lock-variable-name-face) 7240 7242 (face font-lock-keyword-face) 7243 7247 (face font-lock-function-name-face) 7249 7252 (face font-lock-keyword-face) 7253 7257 (face font-lock-keyword-face) 7259 7265 (face font-lock-variable-name-face) 7268 7271 (face font-lock-keyword-face) 7273 7275 (face font-lock-type-face) 7279 7280 (syntax-table #1#) 7281 7287 (face font-lock-type-face) 7288 7293 (face font-lock-type-face) 7295 7298 (face font-lock-constant-face) 7300 7302 (face font-lock-constant-face) 7304 7309 (face font-lock-type-face) 7321 7325 (face font-lock-keyword-face) 7350 7354 (face font-lock-keyword-face) 7356 7357 (face font-lock-variable-name-face) 7359 7368 (face font-lock-type-face) 7369 7372 (face font-lock-keyword-face) 7373 7392 (face font-lock-type-face) 7394 7395 (face font-lock-variable-name-face) 7403 7405 (face font-lock-keyword-face) 7406 7415 (face font-lock-function-name-face) 7417 7420 (face font-lock-keyword-face) 7421 7425 (face font-lock-keyword-face) 7427 7430 (face font-lock-variable-name-face) 7433 7436 (face font-lock-keyword-face) 7438 7440 (face font-lock-type-face) 7444 7445 (syntax-table #1#) 7446 7450 (face font-lock-type-face) 7451 7456 (face font-lock-type-face) 7458 7461 (face font-lock-constant-face) 7463 7465 (face font-lock-constant-face) 7467 7472 (face font-lock-type-face) 7484 7489 (face font-lock-keyword-face) 7490 7494 (face font-lock-keyword-face) 7519 7521 (face font-lock-type-face) 7526 7527 (syntax-table #1#) 7528 7530 (face font-lock-type-face) 7531 7536 (face font-lock-type-face) 7538 7543 (face font-lock-type-face) 7561 7564 (face font-lock-type-face) 7569 7570 (syntax-table #1#) 7571 7573 (face font-lock-type-face) 7574 7579 (face font-lock-type-face) 7581 7589 (face font-lock-type-face)) . 1) (undo-tree-id3139 . -5368) (undo-tree-id3140 . 2260) (undo-tree-id3141 . -5300) (undo-tree-id3142 . -5368) (undo-tree-id3143 . -5641) (undo-tree-id3144 . -6515) (undo-tree-id3145 . -24) (undo-tree-id3146 . -24) (undo-tree-id3147 . -24) (undo-tree-id3148 . -24) (undo-tree-id3149 . -24) (undo-tree-id3150 . -24) (undo-tree-id3151 . -6438) (undo-tree-id3152 . -6310) (undo-tree-id3153 . -4142) (undo-tree-id3154 . -6438) (undo-tree-id3155 . -6438) (undo-tree-id3156 . -5077) (undo-tree-id3157 . -24) (undo-tree-id3158 . -6515) (undo-tree-id3159 . -6515) (undo-tree-id3160 . -6515) (undo-tree-id3161 . -6515) (undo-tree-id3162 . -6515) (undo-tree-id3163 . -5641) (undo-tree-id3164 . -6515) (undo-tree-id3165 . -6515) (undo-tree-id3166 . -5641) (undo-tree-id3167 . -5252) (undo-tree-id3168 . -5252) (undo-tree-id3169 . -4646) (undo-tree-id3170 . -5259) (undo-tree-id3171 . -5252) (undo-tree-id3172 . -4646) (undo-tree-id3173 . -5259) (undo-tree-id3174 . -4646) (undo-tree-id3175 . -5259) (undo-tree-id3176 . -5349) (undo-tree-id3177 . -5349) (undo-tree-id3178 . -5349) (undo-tree-id3179 . -4646) 5350) nil (23765 812 737246 592000) 0 nil]) nil nil (23765 812 737255 198000) 0 nil] #4# 85882 118 nil)