"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#3=[nil nil ((1 . 2)) nil (23743 21022 387340 741000) 0 nil]) ((#("mod error;
mod pubsub;
mod query;
mod user;
mod utils;
use futures::stream::Stream;
use pubsub::PubSub;
use user::{Filter, Scope, User};
use warp::{path, Filter as WarpFilter};

pub fn run() {
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 21 (fontified t face font-lock-constant-face) 21 23 (fontified t) 23 26 (fontified t face font-lock-keyword-face) 26 27 (fontified t) 27 32 (fontified t face font-lock-constant-face) 32 34 (fontified t) 34 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-constant-face) 42 44 (fontified t) 44 47 (fontified t face font-lock-keyword-face) 47 48 (fontified t) 48 53 (fontified t face font-lock-constant-face) 53 55 (fontified t) 55 58 (fontified t face font-lock-keyword-face) 58 59 (fontified t) 59 66 (fontified t face font-lock-constant-face) 66 68 (fontified t) 68 74 (fontified t face font-lock-constant-face) 74 76 (fontified t) 76 82 (fontified t face font-lock-type-face) 82 84 (fontified t) 84 87 (fontified t face font-lock-keyword-face) 87 88 (fontified t) 88 94 (fontified t face font-lock-constant-face) 94 96 (fontified t) 96 102 (fontified t face font-lock-type-face) 102 104 (fontified t) 104 107 (fontified t face font-lock-keyword-face) 107 108 (fontified t) 108 112 (fontified t face font-lock-constant-face) 112 115 (fontified t) 115 121 (fontified t face font-lock-type-face) 121 123 (fontified t) 123 128 (fontified t face font-lock-type-face) 128 130 (fontified t) 130 134 (fontified t face font-lock-type-face) 134 137 (fontified t) 137 140 (fontified t face font-lock-keyword-face) 140 141 (fontified t) 141 145 (fontified t face font-lock-constant-face) 145 154 (fontified t) 154 160 (fontified t face font-lock-type-face) 160 161 (fontified t) 161 163 (fontified t face font-lock-keyword-face) 163 164 (fontified t) 164 174 (fontified t face font-lock-type-face) 174 176 (fontified t) 176 178 (fontified t) 178 181 (fontified t face font-lock-keyword-face) 181 182 (fontified t) 182 184 (fontified t face font-lock-keyword-face) 184 185 (fontified t) 185 188 (fontified t face font-lock-function-name-face) 188 193 (fontified t) 193 195 (fontified t)) . 1) (undo-tree-id1608 . -193) (undo-tree-id1609 . -177) (undo-tree-id1610 . -183) (undo-tree-id1611 . -183) (undo-tree-id1612 . -16) (undo-tree-id1613 . -16) (undo-tree-id1614 . -183) (undo-tree-id1615 . -16) (undo-tree-id1616 . -16) (undo-tree-id1617 . -193) (undo-tree-id1618 . -5) (undo-tree-id1619 . -142) (undo-tree-id1620 . -142) (undo-tree-id1621 . -5) (undo-tree-id1622 . -5) (undo-tree-id1623 . -193) (undo-tree-id1624 . -177) (undo-tree-id1625 . -177) (undo-tree-id1626 . -193) (undo-tree-id1627 . -177) (undo-tree-id1628 . -177) (undo-tree-id1629 . -177) (undo-tree-id1630 . -177) (undo-tree-id1631 . -177) (undo-tree-id1632 . -154) (undo-tree-id1633 . -160) (undo-tree-id1634 . -148) (undo-tree-id1635 . -152) (undo-tree-id1636 . -130) (undo-tree-id1637 . -134) (undo-tree-id1638 . -123) (undo-tree-id1639 . -128) (undo-tree-id1640 . -115) (undo-tree-id1641 . -121) (undo-tree-id1642 . -88) (undo-tree-id1643 . -94) (undo-tree-id1644 . -59) (undo-tree-id1645 . -66) (undo-tree-id1646 . -193)) nil (23743 21022 387395 419000) 0 nil]) ((#("    // GET /api/v1/streaming/user                                  [private; language filter]
    let user_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user));

    // GET /api/v1/streaming/user/notification                     [private; notification filter]
    let user_timeline_notifications = path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user.with_notification_filter()));

    // GET /api/v1/streaming/public                                [public; language filter]
    let public_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public?only_media=true                [public; language filter]
    let public_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/public/local                          [public; language filter]
    let local_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public:local\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
    let local_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .and(path::end())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:local:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public:local\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/direct                                [private; *no* filter]
    let direct_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"direct\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(format!(\"direct:{}\", user.id), user.with_no_filter()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
    let hashtag_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}\", q.tag), User::public()));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
    let hashtag_timeline_local = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\" / \"local\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}:local\", q.tag), User::public()));

    // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
    let list_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"list\")
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .and(warp::query())
        .and_then(|user: User, q: query::List| (user.is_authorized_for_list(q.list), Ok(user)))
        .untuple_one()
        .and(path::end())
        .map(|list: i64, user: User| PubSub::from(format!(\"list:{}\", list), user.with_no_filter()));

    let routes = or!(
        user_timeline,
        user_timeline_notifications,
        public_timeline_media,
        public_timeline,
        local_timeline_media,
        local_timeline,
        direct_timeline,
        hashtag_timeline,
        hashtag_timeline_local,
        list_timeline
    )
    .and_then(|event_stream| event_stream)
    .and(warp::sse())
    .map(|event_stream: pubsub::Receiver, sse: warp::sse::Sse| {
        let user = event_stream.user.clone();
        sse.reply(warp::sse::keep(
            event_stream.filter_map(move |item| {
                let payload = item[\"payload\"].clone();
                let event = item[\"event\"].to_string().clone();
                let toot_lang = item[\"language\"].to_string().clone();

                println!(\"ding\");

                match &user.filter {
                    Filter::Notification if event != \"notification\" => None,
                    Filter::Language if !user.langs.contains(&toot_lang) => None,
                    _ => Some((warp::sse::event(event), warp::sse::data(payload))),
                }
            }),
            None,
        ))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
" 0 4 (fontified t) 4 7 (fontified t face font-lock-comment-delimiter-face) 7 94 (fontified t face font-lock-comment-face) 94 98 (fontified t) 98 101 (fontified t face font-lock-keyword-face) 101 102 (fontified t) 102 115 (fontified t face font-lock-variable-name-face) 115 118 (fontified t) 118 123 (fontified t face font-lock-preprocessor-face) 123 124 (fontified t) 124 129 (fontified t face font-lock-string-face) 129 132 (fontified t) 132 136 (fontified t face font-lock-string-face) 136 139 (fontified t) 139 150 (fontified t face font-lock-string-face) 150 153 (fontified t) 153 157 (fontified t face font-lock-string-face) 157 158 (syntax-table #1=(15) fontified t face font-lock-string-face) 158 159 (fontified t face font-lock-string-face) 159 174 (fontified t) 174 178 (fontified t face font-lock-constant-face) 178 200 (fontified t) 200 204 (fontified t face font-lock-constant-face) 204 223 (fontified t) 223 228 (fontified t face font-lock-type-face) 228 230 (fontified t) 230 237 (fontified t face font-lock-type-face) 237 266 (fontified t) 266 270 (fontified t face font-lock-constant-face) 270 291 (fontified t) 291 296 (fontified t face font-lock-type-face) 296 298 (fontified t) 298 305 (fontified t face font-lock-type-face) 305 322 (fontified t) 322 326 (fontified t face font-lock-variable-name-face) 326 328 (fontified t) 328 332 (fontified t face font-lock-type-face) 332 334 (fontified t) 334 340 (fontified t face font-lock-type-face) 340 381 (fontified t) 381 384 (fontified t face font-lock-comment-delimiter-face) 384 444 (fontified t face font-lock-comment-face) 444 475 (face font-lock-comment-face fontified t) 475 479 (fontified t) 479 482 (fontified t face font-lock-keyword-face) 482 483 (fontified t) 483 510 (fontified t face font-lock-variable-name-face) 510 513 (fontified t) 513 518 (fontified t face font-lock-preprocessor-face) 518 519 (fontified t) 519 524 (fontified t face font-lock-string-face) 524 527 (fontified t) 527 531 (fontified t face font-lock-string-face) 531 534 (fontified t) 534 545 (fontified t face font-lock-string-face) 545 548 (fontified t) 548 552 (fontified t face font-lock-string-face) 552 553 (syntax-table #1# fontified t face font-lock-string-face) 553 554 (fontified t face font-lock-string-face) 554 557 (fontified t) 557 571 (fontified t face font-lock-string-face) 571 573 (fontified t) 573 586 (fontified t) 586 590 (fontified t face font-lock-constant-face) 590 612 (fontified t) 612 616 (fontified t face font-lock-constant-face) 616 635 (fontified t) 635 640 (fontified t face font-lock-type-face) 640 642 (fontified t) 642 649 (fontified t face font-lock-type-face) 649 678 (fontified t) 678 682 (fontified t face font-lock-constant-face) 682 703 (fontified t) 703 708 (fontified t face font-lock-type-face) 708 710 (fontified t) 710 717 (fontified t face font-lock-type-face) 717 734 (fontified t) 734 738 (fontified t face font-lock-variable-name-face) 738 740 (fontified t) 740 744 (fontified t face font-lock-type-face) 744 746 (fontified t) 746 752 (fontified t face font-lock-type-face) 752 820 (fontified t) 820 823 (fontified t face font-lock-comment-delimiter-face) 823 909 (fontified t face font-lock-comment-face) 909 913 (fontified t) 913 916 (fontified t face font-lock-keyword-face) 916 917 (fontified t) 917 932 (fontified t face font-lock-variable-name-face) 932 935 (fontified t) 935 940 (fontified t face font-lock-preprocessor-face) 940 941 (fontified t) 941 946 (fontified t face font-lock-string-face) 946 949 (fontified t) 949 953 (fontified t face font-lock-string-face) 953 956 (fontified t) 956 967 (fontified t face font-lock-string-face) 967 970 (fontified t) 970 975 (fontified t face font-lock-string-face) 975 978 (face font-lock-string-face fontified t) 978 980 (fontified t) 980 993 (fontified t) 993 997 (fontified t face font-lock-constant-face) 997 1019 (fontified t) 1019 1023 (fontified t face font-lock-constant-face) 1023 1042 (fontified t) 1042 1046 (fontified t face font-lock-constant-face) 1046 1048 (fontified t) 1048 1053 (fontified t face font-lock-type-face) 1053 1055 (fontified t) 1055 1061 (fontified t face font-lock-type-face) 1061 1073 (fontified t) 1073 1090 (fontified t) 1090 1094 (fontified t face font-lock-constant-face) 1094 1115 (fontified t) 1115 1120 (fontified t face font-lock-type-face) 1120 1122 (fontified t) 1122 1128 (fontified t face font-lock-type-face) 1128 1131 (fontified t) 1131 1145 (fontified t) 1145 1149 (fontified t face font-lock-variable-name-face) 1149 1151 (fontified t) 1151 1155 (fontified t face font-lock-type-face) 1155 1157 (fontified t) 1157 1163 (fontified t face font-lock-type-face) 1163 1170 (fontified t) 1170 1178 (fontified t face font-lock-string-face) 1178 1223 (fontified t) 1223 1226 (fontified t face font-lock-comment-delimiter-face) 1226 1312 (fontified t face font-lock-comment-face) 1312 1316 (fontified t) 1316 1319 (fontified t face font-lock-keyword-face) 1319 1320 (fontified t) 1320 1341 (fontified t face font-lock-variable-name-face) 1341 1344 (fontified t) 1344 1349 (fontified t face font-lock-preprocessor-face) 1349 1350 (fontified t) 1350 1355 (fontified t face font-lock-string-face) 1355 1358 (fontified t) 1358 1362 (fontified t face font-lock-string-face) 1362 1365 (fontified t) 1365 1376 (fontified t face font-lock-string-face) 1376 1379 (fontified t) 1379 1387 (fontified t face font-lock-string-face) 1387 1402 (fontified t) 1402 1406 (fontified t face font-lock-constant-face) 1406 1428 (fontified t) 1428 1432 (fontified t face font-lock-constant-face) 1432 1451 (fontified t) 1451 1455 (fontified t face font-lock-constant-face) 1455 1457 (fontified t) 1457 1462 (fontified t face font-lock-type-face) 1462 1464 (fontified t) 1464 1470 (fontified t face font-lock-type-face) 1470 1480 (fontified t) 1480 1499 (fontified t) 1499 1503 (face font-lock-constant-face fontified t) 1503 1524 (fontified t) 1524 1529 (face font-lock-type-face fontified t) 1529 1531 (fontified t) 1531 1537 (face font-lock-type-face fontified t) 1537 1540 (fontified t) 1540 1553 (fontified t) 1553 1557 (fontified t face font-lock-constant-face) 1557 1582 (fontified t) 1582 1586 (fontified t face font-lock-variable-name-face) 1586 1588 (fontified t) 1588 1592 (fontified t face font-lock-type-face) 1592 1594 (fontified t) 1594 1595 (fontified t face font-lock-variable-name-face) 1595 1597 (fontified t) 1597 1602 (fontified t face font-lock-constant-face) 1602 1604 (fontified t) 1604 1609 (fontified t face font-lock-type-face) 1609 1611 (fontified t) 1611 1616 (fontified t face font-lock-keyword-face) 1616 1631 (fontified t) 1631 1641 (fontified t) 1641 1653 (fontified t) 1653 1656 (fontified t face font-lock-string-face) 1656 1659 (fontified t) 1659 1665 (fontified t face font-lock-string-face) 1665 1667 (fontified t) 1667 1668 (syntax-table #2=(1) fontified t) 1668 1669 (fontified t) 1669 1675 (fontified t face font-lock-type-face) 1675 1682 (fontified t) 1682 1696 (fontified t face font-lock-string-face) 1696 1750 (fontified t) 1750 1751 (syntax-table #2# fontified t) 1751 1752 (fontified t) 1752 1758 (fontified t face font-lock-type-face) 1758 1765 (fontified t) 1765 1773 (fontified t face font-lock-string-face) 1773 1829 (fontified t) 1829 1832 (fontified t face font-lock-comment-delimiter-face) 1832 1918 (fontified t face font-lock-comment-face) 1918 1922 (fontified t) 1922 1925 (fontified t face font-lock-keyword-face) 1925 1926 (fontified t) 1926 1940 (fontified t face font-lock-variable-name-face) 1940 1943 (fontified t) 1943 1948 (fontified t face font-lock-preprocessor-face) 1948 1949 (fontified t) 1949 1954 (fontified t face font-lock-string-face) 1954 1957 (fontified t) 1957 1961 (fontified t face font-lock-string-face) 1961 1964 (fontified t) 1964 1975 (fontified t face font-lock-string-face) 1975 1978 (fontified t) 1978 1986 (fontified t face font-lock-string-face) 1986 1989 (fontified t) 1989 1996 (fontified t face font-lock-string-face) 1996 2011 (fontified t) 2011 2015 (fontified t face font-lock-constant-face) 2015 2037 (fontified t) 2037 2040 (fontified t face font-lock-constant-face) 2040 2041 (face font-lock-constant-face fontified t) 2041 2060 (fontified t) 2060 2064 (face font-lock-constant-face fontified t) 2064 2066 (fontified t) 2066 2071 (face font-lock-type-face fontified t) 2071 2073 (fontified t) 2073 2079 (face font-lock-type-face fontified t) 2079 2082 (fontified t) 2108 2112 (face font-lock-constant-face) 2133 2138 (face font-lock-type-face) 2140 2141 (face font-lock-type-face) 2141 2146 (face font-lock-type-face) 2700 2701 (syntax-table #2#) 2789 2790 (syntax-table #2#) 4190 4203 (fontified t) 4203 4207 (fontified t face font-lock-constant-face) 4207 4237 (fontified t) 4237 4241 (fontified t face font-lock-variable-name-face) 4241 4243 (fontified t) 4243 4247 (fontified t face font-lock-type-face) 4247 4249 (fontified t) 4249 4250 (fontified t face font-lock-variable-name-face) 4250 4252 (fontified t) 4252 4257 (fontified t face font-lock-constant-face) 4257 4259 (fontified t) 4259 4263 (fontified t face font-lock-type-face) 4263 4303 (fontified t) 4303 4305 (fontified t face font-lock-type-face) 4305 4350 (fontified t) 4350 4354 (fontified t face font-lock-constant-face) 4354 4377 (fontified t) 4377 4381 (fontified t face font-lock-variable-name-face) 4381 4383 (fontified t) 4383 4386 (fontified t face font-lock-type-face) 4386 4388 (fontified t) 4388 4392 (fontified t face font-lock-variable-name-face) 4392 4394 (fontified t) 4394 4398 (fontified t face font-lock-type-face) 4398 4400 (fontified t) 4400 4406 (fontified t face font-lock-type-face) 4406 4413 (fontified t) 4413 4420 (fontified t face rust-builtin-formatting-macro-face) 4420 4421 (fontified t) 4421 4427 (fontified t face font-lock-string-face) 4427 4429 (fontified t face rust-string-interpolation-face) 4429 4430 (fontified t face font-lock-string-face) 4430 4469 (fontified t) 4469 4472 (fontified t face font-lock-keyword-face) 4472 4473 (fontified t) 4473 4479 (fontified t face font-lock-variable-name-face) 4479 4482 (fontified t) 4482 4485 (fontified t face font-lock-preprocessor-face) 4485 4690 (fontified t) 4690 4708 (fontified t) 4708 4820 (fontified t) 4820 4824 (fontified t face font-lock-constant-face) 4824 4843 (fontified t) 4843 4855 (fontified t face font-lock-variable-name-face) 4855 4857 (fontified t) 4857 4863 (fontified t face font-lock-constant-face) 4863 4865 (fontified t) 4865 4873 (fontified t face font-lock-type-face) 4873 4875 (fontified t) 4875 4878 (fontified t face font-lock-variable-name-face) 4878 4880 (fontified t) 4880 4884 (fontified t face font-lock-constant-face) 4884 4886 (fontified t) 4886 4889 (fontified t face font-lock-constant-face) 4889 4891 (fontified t) 4891 4894 (fontified t face font-lock-type-face) 4894 4906 (fontified t) 4906 4909 (fontified t face font-lock-keyword-face) 4909 4910 (fontified t) 4910 4914 (fontified t face font-lock-variable-name-face) 4914 4962 (fontified t) 4962 4966 (fontified t face font-lock-constant-face) 4966 4968 (fontified t) 4968 4971 (fontified t face font-lock-constant-face) 4971 5015 (fontified t) 5015 5019 (fontified t face font-lock-keyword-face) 5019 5045 (fontified t) 5045 5048 (fontified t face font-lock-keyword-face) 5048 5049 (fontified t) 5049 5056 (fontified t face font-lock-variable-name-face) 5056 5064 (fontified t) 5064 5073 (fontified t face font-lock-string-face) 5073 5100 (fontified t) 5100 5103 (fontified t face font-lock-keyword-face) 5103 5104 (fontified t) 5104 5109 (fontified t face font-lock-variable-name-face) 5109 5117 (fontified t) 5117 5124 (fontified t face font-lock-string-face) 5124 5163 (fontified t) 5163 5166 (fontified t face font-lock-keyword-face) 5166 5167 (fontified t) 5167 5176 (fontified t face font-lock-variable-name-face) 5176 5184 (fontified t) 5184 5194 (fontified t face font-lock-string-face) 5194 5208 (fontified t) 5208 5217 (fontified t) 5217 5234 (fontified t) 5234 5242 (fontified t face rust-builtin-formatting-macro-face) 5242 5243 (fontified t) 5243 5249 (fontified t face font-lock-string-face) 5249 5269 (fontified t) 5269 5274 (fontified t face font-lock-keyword-face) 5274 5310 (fontified t) 5310 5316 (fontified t face font-lock-type-face) 5316 5318 (fontified t) 5318 5330 (fontified t face font-lock-type-face) 5330 5331 (fontified t) 5331 5333 (fontified t face font-lock-keyword-face) 5333 5343 (fontified t) 5343 5357 (fontified t face font-lock-string-face) 5357 5359 (fontified t) 5359 5360 (syntax-table #2# fontified t) 5360 5361 (fontified t) 5361 5365 (fontified t face font-lock-type-face) 5365 5387 (fontified t) 5387 5393 (fontified t face font-lock-type-face) 5393 5395 (fontified t) 5395 5403 (fontified t face font-lock-type-face) 5403 5404 (fontified t) 5404 5406 (fontified t face font-lock-keyword-face) 5406 5441 (fontified t) 5441 5442 (syntax-table #2# fontified t) 5442 5443 (fontified t) 5443 5447 (fontified t face font-lock-type-face) 5447 5472 (fontified t) 5472 5473 (syntax-table #2# fontified t) 5473 5474 (fontified t) 5474 5478 (fontified t face font-lock-type-face) 5478 5480 (fontified t) 5480 5484 (fontified t face font-lock-constant-face) 5484 5486 (fontified t) 5486 5489 (fontified t face font-lock-constant-face) 5489 5505 (fontified t) 5505 5509 (fontified t face font-lock-constant-face) 5509 5511 (fontified t) 5511 5514 (fontified t face font-lock-constant-face) 5514 5579 (fontified t) 5579 5583 (fontified t face font-lock-type-face) 5583 5613 (fontified t) 5613 5617 (fontified t face font-lock-constant-face) 5617 5619 (fontified t) 5619 5624 (fontified t face font-lock-constant-face) 5624 5626 (fontified t) 5626 5630 (fontified t face font-lock-constant-face) 5630 5639 (fontified t) 5639 5651 (fontified t face font-lock-string-face) 5651 5653 (fontified t) 5653 5665 (fontified t face font-lock-string-face) 5665 5681 (fontified t) 5681 5686 (fontified t face font-lock-constant-face) 5686 5709 (fontified t) 5709 5713 (fontified t face font-lock-constant-face) 5713 5717 (fontified t) 5717 5758 (fontified t)) . 194) (undo-tree-id1647 . -5705) (undo-tree-id1648 . -4) (undo-tree-id1649 . -5705) (undo-tree-id1650 . -4) (undo-tree-id1651 . -5705) (undo-tree-id1652 . -4) (undo-tree-id1653 . -4304) (undo-tree-id1654 . -5705) (undo-tree-id1655 . -5705) 5899 (t 23743 20854 429001 507000)) nil (23743 21022 387412 90000) 0 nil]) ((1 . 5954) (#("mod error;
mod user;
mod pubsub;
mod query;
mod utils;
use futures::stream::Stream;
use pubsub::PubSub;
use user::{Filter, Scope, User};
use warp::{path, Filter as WarpFilter};

pub fn run() {
    // GET /api/v1/streaming/user                                  [private; language filter]
    let user_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user));

    // GET /api/v1/streaming/user/notification                     [private; notification filter]
    let user_timeline_notifications = path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user.with_notification_filter()));

    // GET /api/v1/streaming/public                                [public; language filter]
    let public_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public?only_media=true                [public; language filter]
    let public_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/public/local                          [public; language filter]
    let local_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public:local\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
    let local_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .and(path::end())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:local:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public:local\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/direct                                [private; *no* filter]
    let direct_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"direct\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(format!(\"direct:{}\", user.id), user.with_no_filter()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
    let hashtag_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}\", q.tag), User::public()));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
    let hashtag_timeline_local = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\" / \"local\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}:local\", q.tag), User::public()));

    // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
    let list_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"list\")
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .and(warp::query())
        .and_then(|user: User, q: query::List| (user.is_authorized_for_list(q.list), Ok(user)))
        .untuple_one()
        .and(path::end())
        .map(|list: i64, user: User| PubSub::from(format!(\"list:{}\", list), user.with_no_filter()));

    let routes = or!(
        user_timeline,
        user_timeline_notifications,
        public_timeline_media,
        public_timeline,
        local_timeline_media,
        local_timeline,
        direct_timeline,
        hashtag_timeline,
        hashtag_timeline_local,
        list_timeline
    )
    .and_then(|event_stream| event_stream)
    .and(warp::sse())
    .map(|event_stream: pubsub::Receiver, sse: warp::sse::Sse| {
        let user = event_stream.user.clone();
        sse.reply(warp::sse::keep(
            event_stream.filter_map(move |item| {
                let payload = item[\"payload\"].clone();
                let event = item[\"event\"].to_string().clone();
                let toot_lang = item[\"language\"].to_string().clone();

                println!(\"ding\");

                match &user.filter {
                    Filter::Notification if event != \"notification\" => None,
                    Filter::Language if !user.langs.contains(&toot_lang) => None,
                    _ => Some((warp::sse::event(event), warp::sse::data(payload))),
                }
            }),
            None,
        ))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 19 (fontified t face font-lock-constant-face) 19 20 (fontified t) 20 21 (fontified t) 21 24 (fontified t face font-lock-keyword-face) 24 25 (fontified t) 25 31 (fontified t face font-lock-constant-face) 31 32 (fontified t) 32 33 (fontified t) 33 36 (fontified t face font-lock-keyword-face) 36 37 (fontified t) 37 42 (fontified t face font-lock-constant-face) 42 43 (fontified t) 43 44 (fontified t) 44 47 (fontified t face font-lock-keyword-face) 47 48 (fontified t) 48 53 (fontified t face font-lock-constant-face) 53 54 (fontified t) 54 55 (fontified t) 55 58 (fontified t face font-lock-keyword-face) 58 59 (fontified t) 59 66 (fontified t face font-lock-constant-face) 66 68 (fontified t) 68 74 (fontified t face font-lock-constant-face) 74 76 (fontified t) 76 82 (fontified t face font-lock-type-face) 82 84 (fontified t) 84 87 (fontified t face font-lock-keyword-face) 87 88 (fontified t) 88 94 (fontified t face font-lock-constant-face) 94 96 (fontified t) 96 102 (fontified t face font-lock-type-face) 102 104 (fontified t) 104 107 (fontified t face font-lock-keyword-face) 107 108 (fontified t) 108 112 (fontified t face font-lock-constant-face) 112 115 (fontified t) 115 121 (fontified t face font-lock-type-face) 121 123 (fontified t) 123 128 (fontified t face font-lock-type-face) 128 130 (fontified t) 130 134 (fontified t face font-lock-type-face) 134 137 (fontified t) 137 140 (fontified t face font-lock-keyword-face) 140 141 (fontified t) 141 145 (fontified t face font-lock-constant-face) 145 154 (fontified t) 154 160 (fontified t face font-lock-type-face) 160 161 (fontified t) 161 163 (fontified t face font-lock-keyword-face) 163 164 (fontified t) 164 174 (fontified t face font-lock-type-face) 174 177 (fontified t) 177 178 (fontified t) 178 181 (fontified t face font-lock-keyword-face) 181 182 (fontified t) 182 184 (fontified t face font-lock-keyword-face) 184 185 (fontified t) 185 188 (fontified t face font-lock-function-name-face) 188 197 (fontified t) 197 200 (fontified t face font-lock-comment-delimiter-face) 200 287 (fontified t face font-lock-comment-face) 287 291 (fontified t) 291 294 (fontified t face font-lock-keyword-face) 294 295 (fontified t) 295 308 (fontified t face font-lock-variable-name-face) 308 311 (fontified t) 311 316 (fontified t face font-lock-preprocessor-face) 316 317 (fontified t) 317 322 (fontified t face font-lock-string-face) 322 325 (fontified t) 325 329 (fontified t face font-lock-string-face) 329 332 (fontified t) 332 343 (fontified t face font-lock-string-face) 343 346 (fontified t) 346 350 (fontified t face font-lock-string-face) 350 351 (syntax-table #1# fontified t face font-lock-string-face) 351 352 (fontified t face font-lock-string-face) 352 367 (fontified t) 367 371 (fontified t face font-lock-constant-face) 371 393 (fontified t) 393 397 (fontified t face font-lock-constant-face) 397 416 (fontified t) 416 421 (fontified t face font-lock-type-face) 421 423 (fontified t) 423 430 (fontified t face font-lock-type-face) 430 459 (fontified t) 459 463 (fontified t face font-lock-constant-face) 463 484 (fontified t) 484 489 (fontified t face font-lock-type-face) 489 491 (fontified t) 491 498 (fontified t face font-lock-type-face) 498 511 (fontified t) 511 515 (fontified t) 515 519 (fontified t face font-lock-variable-name-face) 519 520 (fontified t) 520 521 (fontified t) 521 525 (fontified t face font-lock-type-face) 525 527 (fontified t) 527 533 (fontified t face font-lock-type-face) 533 550 (fontified t) 550 555 (fontified t) 555 569 (fontified t) 569 574 (fontified t) 574 577 (fontified t face font-lock-comment-delimiter-face) 577 668 (fontified t face font-lock-comment-face) 668 672 (fontified t) 672 675 (fontified t face font-lock-keyword-face) 675 676 (fontified t) 676 703 (fontified t face font-lock-variable-name-face) 703 706 (fontified t) 706 711 (fontified t face font-lock-preprocessor-face) 711 712 (fontified t) 712 717 (fontified t face font-lock-string-face) 717 720 (fontified t) 720 724 (fontified t face font-lock-string-face) 724 727 (fontified t) 727 738 (fontified t face font-lock-string-face) 738 741 (fontified t) 741 745 (fontified t face font-lock-string-face) 745 746 (fontified t syntax-table #1# face font-lock-string-face) 746 747 (fontified t face font-lock-string-face) 747 750 (fontified t) 750 764 (fontified t face font-lock-string-face) 764 779 (fontified t) 779 783 (fontified t face font-lock-constant-face) 783 805 (fontified t) 805 809 (fontified t face font-lock-constant-face) 809 828 (fontified t) 828 833 (fontified t face font-lock-type-face) 833 835 (fontified t) 835 842 (fontified t face font-lock-type-face) 842 871 (fontified t) 871 875 (fontified t face font-lock-constant-face) 875 896 (fontified t) 896 901 (fontified t face font-lock-type-face) 901 903 (fontified t) 903 910 (fontified t face font-lock-type-face) 910 927 (fontified t) 927 931 (fontified t face font-lock-variable-name-face) 931 933 (fontified t) 933 937 (fontified t face font-lock-type-face) 937 939 (fontified t) 939 945 (fontified t face font-lock-type-face) 945 1013 (fontified t) 1013 1016 (fontified t face font-lock-comment-delimiter-face) 1016 1069 (fontified t face font-lock-comment-face) 1069 1102 (face font-lock-comment-face fontified t) 1102 1106 (fontified t) 1106 1109 (fontified t face font-lock-keyword-face) 1109 1110 (fontified t) 1110 1125 (fontified t face font-lock-variable-name-face) 1125 1128 (fontified t) 1128 1133 (fontified t face font-lock-preprocessor-face) 1133 1134 (fontified t) 1134 1139 (fontified t face font-lock-string-face) 1139 1142 (fontified t) 1142 1146 (fontified t face font-lock-string-face) 1146 1149 (fontified t) 1149 1160 (fontified t face font-lock-string-face) 1160 1163 (fontified t) 1163 1171 (fontified t face font-lock-string-face) 1171 1186 (fontified t) 1186 1190 (fontified t face font-lock-constant-face) 1190 1212 (fontified t) 1212 1216 (fontified t face font-lock-constant-face) 1216 1235 (fontified t) 1235 1239 (fontified t face font-lock-constant-face) 1239 1241 (fontified t) 1241 1246 (fontified t face font-lock-type-face) 1246 1248 (fontified t) 1248 1254 (fontified t face font-lock-type-face) 1254 1283 (fontified t) 1283 1287 (fontified t face font-lock-constant-face) 1287 1308 (fontified t) 1308 1313 (fontified t face font-lock-type-face) 1313 1315 (fontified t) 1315 1321 (fontified t face font-lock-type-face) 1321 1338 (fontified t) 1338 1342 (fontified t face font-lock-variable-name-face) 1342 1344 (fontified t) 1344 1348 (fontified t face font-lock-type-face) 1348 1350 (fontified t) 1350 1356 (fontified t face font-lock-type-face) 1356 1363 (fontified t) 1363 1371 (fontified t face font-lock-string-face) 1371 1416 (fontified t) 1416 1419 (fontified t face font-lock-comment-delimiter-face) 1419 1505 (fontified t face font-lock-comment-face) 1505 1509 (fontified t) 1509 1512 (fontified t face font-lock-keyword-face) 1512 1513 (fontified t) 1513 1534 (fontified t face font-lock-variable-name-face) 1534 1537 (fontified t) 1537 1542 (fontified t face font-lock-preprocessor-face) 1542 1543 (fontified t) 1543 1548 (fontified t face font-lock-string-face) 1548 1551 (fontified t) 1551 1555 (fontified t face font-lock-string-face) 1555 1558 (fontified t) 1558 1569 (fontified t face font-lock-string-face) 1569 1572 (fontified t) 1572 1580 (fontified t face font-lock-string-face) 1580 1595 (fontified t) 1595 1599 (fontified t face font-lock-constant-face) 1599 1602 (fontified t) 1602 1608 (fontified t) 1608 1621 (fontified t) 1621 1625 (fontified t face font-lock-constant-face) 1625 1644 (fontified t) 1644 1648 (fontified t face font-lock-constant-face) 1648 1650 (fontified t) 1650 1655 (fontified t face font-lock-type-face) 1655 1657 (fontified t) 1657 1663 (fontified t face font-lock-type-face) 1663 1692 (fontified t) 1692 1696 (fontified t face font-lock-constant-face) 1696 1717 (fontified t) 1717 1722 (fontified t face font-lock-type-face) 1722 1724 (fontified t) 1724 1730 (fontified t face font-lock-type-face) 1730 1746 (fontified t) 1746 1750 (fontified t face font-lock-constant-face) 1750 1775 (fontified t) 1775 1779 (fontified t face font-lock-variable-name-face) 1779 1781 (fontified t) 1781 1785 (fontified t face font-lock-type-face) 1785 1787 (fontified t) 1787 1788 (fontified t face font-lock-variable-name-face) 1788 1790 (fontified t) 1790 1795 (fontified t face font-lock-constant-face) 1795 1797 (fontified t) 1797 1802 (fontified t face font-lock-type-face) 1802 1804 (fontified t) 1804 1809 (fontified t face font-lock-keyword-face) 1809 1846 (fontified t) 1846 1849 (fontified t face font-lock-string-face) 1849 1852 (fontified t) 1852 1858 (fontified t face font-lock-string-face) 1858 1860 (fontified t) 1860 1861 (fontified t syntax-table #2#) 1861 1862 (fontified t) 1862 1868 (fontified t face font-lock-type-face) 1868 1875 (fontified t) 1875 1889 (fontified t face font-lock-string-face) 1889 1943 (fontified t) 1943 1944 (fontified t syntax-table #2#) 1944 1945 (fontified t) 1945 1951 (fontified t face font-lock-type-face) 1951 1958 (fontified t) 1958 1966 (fontified t face font-lock-string-face) 1966 2022 (fontified t) 2022 2025 (fontified t face font-lock-comment-delimiter-face) 2025 2108 (fontified t face font-lock-comment-face) 2108 2111 (face font-lock-comment-face fontified t) 2893 2894 (syntax-table #2#) 2982 2983 (syntax-table #2#) 5552 5553 (syntax-table #2#) 5634 5635 (syntax-table #2#) 5665 5666 (syntax-table #2#)) . 1) (undo-tree-id1509 . 5899) (undo-tree-id1510 . -4) (undo-tree-id1511 . -4) (undo-tree-id1512 . -4) (undo-tree-id1513 . -4) (undo-tree-id1514 . -59) (undo-tree-id1515 . -66) (undo-tree-id1516 . -55) (undo-tree-id1517 . -58) (undo-tree-id1518 . -137) (undo-tree-id1519 . -137) (undo-tree-id1520 . -104) (undo-tree-id1521 . -104) (undo-tree-id1522 . -84) (undo-tree-id1523 . -84) (undo-tree-id1524 . -4675) (undo-tree-id1525 . -4677) (undo-tree-id1526 . -137) (undo-tree-id1527 . -137) (undo-tree-id1528 . -33) (undo-tree-id1529 . -36) (undo-tree-id1530 . -104) (undo-tree-id1531 . -104) (undo-tree-id1532 . -21) (undo-tree-id1533 . -24) (undo-tree-id1534 . -84) (undo-tree-id1535 . -84) (undo-tree-id1536 . -108) (undo-tree-id1537 . -112) (undo-tree-id1538 . -88) (undo-tree-id1539 . -94) (undo-tree-id1540 . -59) (undo-tree-id1541 . -66) (undo-tree-id1542 . -4656) (undo-tree-id1543 . -4657) (undo-tree-id1544 . -108) (undo-tree-id1545 . -112) (undo-tree-id1546 . -33) (undo-tree-id1547 . -36) (undo-tree-id1548 . -88) (undo-tree-id1549 . -94) (undo-tree-id1550 . -21) (undo-tree-id1551 . -24) (undo-tree-id1552 . -59) (undo-tree-id1553 . -66) (undo-tree-id1554 . -59) (undo-tree-id1555 . -65) (undo-tree-id1556 . -21) (undo-tree-id1557 . -32) (undo-tree-id1558 . -88) (undo-tree-id1559 . -93) (undo-tree-id1560 . -33) (undo-tree-id1561 . -43) (undo-tree-id1562 . -108) (undo-tree-id1563 . -113) (undo-tree-id1564 . -4674) (undo-tree-id1565 . -4676) (undo-tree-id1566 . -59) (undo-tree-id1567 . -65) (undo-tree-id1568 . -88) (undo-tree-id1569 . -93) (undo-tree-id1570 . -108) (undo-tree-id1571 . -113) (undo-tree-id1572 . -21) (undo-tree-id1573 . -32) (undo-tree-id1574 . -33) (undo-tree-id1575 . -43) (undo-tree-id1576 . -4675) (undo-tree-id1577 . -4677) (undo-tree-id1578 . -55) (undo-tree-id1579 . -58) (undo-tree-id1580 . -59) (undo-tree-id1581 . -66) (undo-tree-id1582 . -137) (undo-tree-id1583 . -137) (undo-tree-id1584 . -137) (undo-tree-id1585 . -137) (undo-tree-id1586 . -137) (undo-tree-id1587 . -137) (undo-tree-id1588 . -137) (undo-tree-id1589 . -137) (undo-tree-id1590 . -137) 138) nil (23743 20854 414365 876000) 0 nil]) ((#("use utils;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 11 (fontified t)) . 138) (undo-tree-id1591 . -4) (undo-tree-id1592 . -9) (undo-tree-id1593 . -4) (undo-tree-id1594 . -9)) nil (23743 20854 414378 515000) 0 nil]) ((#("use query;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 11 (fontified t)) . 105) (undo-tree-id1595 . -4) (undo-tree-id1596 . -9) (undo-tree-id1597 . -4) (undo-tree-id1598 . -9)) nil (23743 20854 414384 485000) 0 nil]) ((#("use pubsub;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 10 (fontified t face font-lock-constant-face) 10 12 (fontified t)) . 85) (undo-tree-id1599 . -4) (undo-tree-id1600 . -10) (undo-tree-id1601 . -4) (undo-tree-id1602 . -10) (undo-tree-id1603 . -9) (undo-tree-id1604 . -9) 94) nil (23743 20854 414391 843000) 0 nil]) ((52 . 55) (45 . 52) (44 . 45) 43) nil (23743 20854 414394 651000) 0 nil]) ((43 . 44) (38 . 43) (#("quer" 0 4 (fontified t face font-lock-constant-face)) . -38) (undo-tree-id1605 . -4) (undo-tree-id1606 . -4) 42 (34 . 42) (33 . 34) 22) nil (23743 20854 414399 801000) 0 nil]) ((32 . 33) (26 . 32) (#("pub" 0 3 (fontified t face font-lock-keyword-face)) . -26) (undo-tree-id1607 . -3) 29 (25 . 29) (22 . 25) (21 . 22) (t 23743 20808 222827 904000) 16) nil (23743 20854 414405 202000) 0 nil] [nil ([nil ([nil ([nil nil ((#("mod user;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 9 (fontified t) 9 10 (fontified t)) . 20) (undo-tree-id1443 . -8) (undo-tree-id1445 . -8) (undo-tree-id1447 . -8) (undo-tree-id1448 . -8) (undo-tree-id1450 . -8) 28) ((20 . 30) (t 23743 20803 719543 395000)) (23743 20803 661860 984000) 0 nil]) ((13 . 17) (#("e" 0 1 (fontified t)) . -13) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (#("r" 0 1 (fontified t)) . -14) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (#("r" 0 1 (fontified t)) . -15) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (#("o" 0 1 (fontified t)) . -16) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) 17 (11 . 17)) ((#(", erro" 0 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 11) (13 . 17) (#("user" 0 4 (fontified t)) . 13)) (23743 20806 71802 284000) 0 nil]) ((11 . 12) (#("}" 0 1 (fontified t)) . -6) (undo-tree-id1459 . 1) (undo-tree-id1461 . -1)) ((6 . 7) (#("}" 0 1 (fontified t)) . 11) (undo-tree-id1463 . 1) (undo-tree-id1464 . 1) (undo-tree-id1465 . -1)) (23743 20806 381349 737000) 0 nil]) ((5 . 7) (#("{" 0 1 (fontified nil)) . -5) (5 . 6) (t 23743 20732 876997 595000)) ((#("{" 0 1 (fontified nil)) . 5) (undo-tree-id1466 . 1) (undo-tree-id1467 . 1) (undo-tree-id1468 . 1) (5 . 6) (#("{}" 0 1 (fontified t) 1 2 (fontified t)) . 5) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -2) (undo-tree-id1477 . -2) (undo-tree-id1478 . -2) (undo-tree-id1479 . -2) (undo-tree-id1480 . -2) (undo-tree-id1481 . -2) (undo-tree-id1482 . -2) (undo-tree-id1483 . -2) (undo-tree-id1484 . -2) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -2) (undo-tree-id1492 . -1) (undo-tree-id1493 . -2) (undo-tree-id1494 . -1) (undo-tree-id1495 . -2) (undo-tree-id1496 . -1) (undo-tree-id1497 . -2) (undo-tree-id1498 . -1) (undo-tree-id1499 . -2) (undo-tree-id1500 . -1) (undo-tree-id1501 . -2) (undo-tree-id1502 . -1) (undo-tree-id1503 . 2) (undo-tree-id1504 . -1) (undo-tree-id1505 . 1) (undo-tree-id1506 . -1) (undo-tree-id1507 . 1) (undo-tree-id1508 . -2)) (23743 20806 745264 850000) 0 nil]) (5) nil (23743 20807 213409 698000) 0 nil]) ((1 . 5954) (#("mod user;
mod error;
use futures::stream::Stream;
use pubsub;
use pubsub::PubSub;
use query;
use user::{Filter, Scope, User};
use utils;
use warp::{path, Filter as WarpFilter};

pub fn run() {
    // GET /api/v1/streaming/user                                  [private; language filter]
    let user_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user));

    // GET /api/v1/streaming/user/notification                     [private; notification filter]
    let user_timeline_notifications = path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user.with_notification_filter()));

    // GET /api/v1/streaming/public                                [public; language filter]
    let public_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public?only_media=true                [public; language filter]
    let public_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/public/local                          [public; language filter]
    let local_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public:local\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
    let local_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .and(path::end())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:local:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public:local\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/direct                                [private; *no* filter]
    let direct_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"direct\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(format!(\"direct:{}\", user.id), user.with_no_filter()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
    let hashtag_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}\", q.tag), User::public()));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
    let hashtag_timeline_local = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\" / \"local\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}:local\", q.tag), User::public()));

    // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
    let list_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"list\")
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .and(warp::query())
        .and_then(|user: User, q: query::List| (user.is_authorized_for_list(q.list), Ok(user)))
        .untuple_one()
        .and(path::end())
        .map(|list: i64, user: User| PubSub::from(format!(\"list:{}\", list), user.with_no_filter()));

    let routes = or!(
        user_timeline,
        user_timeline_notifications,
        public_timeline_media,
        public_timeline,
        local_timeline_media,
        local_timeline,
        direct_timeline,
        hashtag_timeline,
        hashtag_timeline_local,
        list_timeline
    )
    .and_then(|event_stream| event_stream)
    .and(warp::sse())
    .map(|event_stream: pubsub::Receiver, sse: warp::sse::Sse| {
        let user = event_stream.user.clone();
        sse.reply(warp::sse::keep(
            event_stream.filter_map(move |item| {
                let payload = item[\"payload\"].clone();
                let event = item[\"event\"].to_string().clone();
                let toot_lang = item[\"language\"].to_string().clone();

                println!(\"ding\");

                match &user.filter {
                    Filter::Notification if event != \"notification\" => None,
                    Filter::Language if !user.langs.contains(&toot_lang) => None,
                    _ => Some((warp::sse::event(event), warp::sse::data(payload))),
                }
            }),
            None,
        ))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 9 (fontified t) 9 10 (fontified t) 10 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 19 (fontified t face font-lock-constant-face) 19 20 (fontified t) 20 21 (fontified t) 21 24 (fontified t face font-lock-keyword-face) 24 25 (fontified t) 25 32 (fontified t face font-lock-constant-face) 32 34 (fontified t) 34 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 48 (fontified t face font-lock-type-face) 48 50 (fontified t) 50 53 (fontified t face font-lock-keyword-face) 53 54 (fontified t) 54 60 (fontified t face font-lock-constant-face) 60 62 (fontified t) 62 65 (fontified t face font-lock-keyword-face) 65 66 (fontified t) 66 72 (fontified t face font-lock-constant-face) 72 74 (fontified t) 74 80 (fontified t face font-lock-type-face) 80 82 (fontified t) 82 85 (fontified t face font-lock-keyword-face) 85 86 (fontified t) 86 91 (fontified t face font-lock-constant-face) 91 92 (fontified t) 92 93 (fontified t) 93 96 (fontified t face font-lock-keyword-face) 96 97 (fontified t) 97 101 (fontified t face font-lock-constant-face) 101 104 (fontified t) 104 110 (fontified t face font-lock-type-face) 110 112 (fontified t) 112 117 (fontified t face font-lock-type-face) 117 119 (fontified t) 119 123 (fontified t face font-lock-type-face) 123 126 (fontified t) 126 129 (fontified t face font-lock-keyword-face) 129 130 (fontified t) 130 135 (fontified t face font-lock-constant-face) 135 137 (fontified t) 137 140 (fontified t face font-lock-keyword-face) 140 141 (fontified t) 141 145 (fontified t face font-lock-constant-face) 145 154 (fontified t) 154 160 (fontified t face font-lock-type-face) 160 161 (fontified t) 161 163 (fontified t face font-lock-keyword-face) 163 164 (fontified t) 164 174 (fontified t face font-lock-type-face) 174 178 (fontified t) 178 181 (fontified t face font-lock-keyword-face) 181 182 (fontified t) 182 184 (fontified t face font-lock-keyword-face) 184 185 (fontified t) 185 188 (fontified t face font-lock-function-name-face) 188 197 (fontified t) 197 200 (fontified t face font-lock-comment-delimiter-face) 200 287 (fontified t face font-lock-comment-face) 287 291 (fontified t) 291 294 (fontified t face font-lock-keyword-face) 294 295 (fontified t) 295 308 (fontified t face font-lock-variable-name-face) 308 311 (fontified t) 311 316 (fontified t face font-lock-preprocessor-face) 316 317 (fontified t) 317 322 (fontified t face font-lock-string-face) 322 325 (fontified t) 325 329 (fontified t face font-lock-string-face) 329 332 (fontified t) 332 343 (fontified t face font-lock-string-face) 343 346 (fontified t) 346 350 (fontified t face font-lock-string-face) 350 351 (fontified t face font-lock-string-face syntax-table #1#) 351 352 (fontified t face font-lock-string-face) 352 367 (fontified t) 367 371 (fontified t face font-lock-constant-face) 371 393 (fontified t) 393 397 (fontified t face font-lock-constant-face) 397 414 (fontified t) 414 416 (fontified t) 416 421 (fontified t face font-lock-type-face) 421 423 (fontified t) 423 430 (fontified t face font-lock-type-face) 430 433 (fontified t) 433 459 (fontified t) 459 463 (fontified t face font-lock-constant-face) 463 484 (fontified t) 484 487 (fontified t face font-lock-type-face) 487 489 (fontified t face font-lock-type-face) 489 491 (fontified t) 491 498 (fontified t face font-lock-type-face) 498 501 (fontified t) 501 511 (fontified t) 511 515 (fontified t) 515 519 (fontified t face font-lock-variable-name-face) 519 521 (fontified t) 521 525 (face font-lock-type-face fontified t) 525 527 (fontified t) 527 533 (face font-lock-type-face fontified t) 533 569 (fontified t) 569 572 (fontified t) 572 574 (fontified t) 574 577 (fontified t face font-lock-comment-delimiter-face) 577 582 (fontified t face font-lock-comment-face) 582 626 (fontified t face font-lock-comment-face) 626 668 (fontified t face font-lock-comment-face) 668 672 (fontified t) 672 675 (fontified t face font-lock-keyword-face) 675 676 (fontified t) 676 703 (fontified t face font-lock-variable-name-face) 703 706 (fontified t) 706 711 (fontified t face font-lock-preprocessor-face) 711 712 (fontified t) 712 717 (fontified t face font-lock-string-face) 717 720 (fontified t) 720 724 (fontified t face font-lock-string-face) 724 727 (fontified t) 727 738 (fontified t face font-lock-string-face) 738 741 (fontified t) 741 745 (fontified t face font-lock-string-face) 745 746 (fontified t face font-lock-string-face syntax-table #1#) 746 747 (fontified t face font-lock-string-face) 747 750 (fontified t) 750 764 (fontified t face font-lock-string-face) 764 779 (fontified t) 779 783 (fontified t face font-lock-constant-face) 783 805 (fontified t) 805 809 (fontified t face font-lock-constant-face) 809 828 (fontified t) 828 833 (fontified t face font-lock-type-face) 833 835 (fontified t) 835 842 (fontified t face font-lock-type-face) 842 871 (fontified t) 871 875 (fontified t face font-lock-constant-face) 875 896 (fontified t) 896 901 (fontified t face font-lock-type-face) 901 903 (fontified t) 903 910 (fontified t face font-lock-type-face) 910 927 (fontified t) 927 931 (fontified t face font-lock-variable-name-face) 931 933 (fontified t) 933 937 (fontified t face font-lock-type-face) 937 939 (fontified t) 939 945 (fontified t face font-lock-type-face) 945 1001 (fontified t) 1001 1008 (fontified t) 1008 1013 (fontified t) 1013 1016 (fontified t face font-lock-comment-delimiter-face) 1016 1069 (fontified t face font-lock-comment-face) 1069 1102 (face font-lock-comment-face fontified t) 1102 1106 (fontified t) 1106 1109 (fontified t face font-lock-keyword-face) 1109 1110 (fontified t) 1110 1125 (fontified t face font-lock-variable-name-face) 1125 1128 (fontified t) 1128 1133 (fontified t face font-lock-preprocessor-face) 1133 1134 (fontified t) 1134 1139 (fontified t face font-lock-string-face) 1139 1142 (fontified t) 1142 1146 (fontified t face font-lock-string-face) 1146 1149 (fontified t) 1149 1160 (fontified t face font-lock-string-face) 1160 1163 (fontified t) 1163 1168 (fontified t face font-lock-string-face) 1168 1171 (fontified t face font-lock-string-face) 1171 1173 (fontified t) 1173 1186 (fontified t) 1186 1190 (fontified t face font-lock-constant-face) 1190 1212 (fontified t) 1212 1216 (fontified t face font-lock-constant-face) 1216 1235 (fontified t) 1235 1239 (fontified t face font-lock-constant-face) 1239 1241 (fontified t) 1241 1246 (fontified t face font-lock-type-face) 1246 1248 (fontified t) 1248 1254 (fontified t face font-lock-type-face) 1254 1283 (fontified t) 1283 1287 (fontified t face font-lock-constant-face) 1287 1308 (fontified t) 1308 1313 (fontified t face font-lock-type-face) 1313 1315 (fontified t) 1315 1321 (fontified t face font-lock-type-face) 1321 1338 (fontified t) 1338 1342 (fontified t face font-lock-variable-name-face) 1342 1344 (fontified t) 1344 1348 (fontified t face font-lock-type-face) 1348 1350 (fontified t) 1350 1356 (fontified t face font-lock-type-face) 1356 1363 (fontified t) 1363 1371 (fontified t face font-lock-string-face) 1371 1416 (fontified t) 1416 1419 (fontified t face font-lock-comment-delimiter-face) 1419 1505 (fontified t face font-lock-comment-face) 1505 1508 (fontified t) 1508 1509 (fontified t) 1509 1512 (fontified t face font-lock-keyword-face) 1512 1513 (fontified t) 1513 1534 (fontified t face font-lock-variable-name-face) 1534 1537 (fontified t) 1537 1542 (fontified t face font-lock-preprocessor-face) 1542 1543 (fontified t) 1543 1548 (fontified t face font-lock-string-face) 1548 1551 (fontified t) 1551 1555 (fontified t face font-lock-string-face) 1555 1558 (fontified t) 1558 1569 (fontified t face font-lock-string-face) 1569 1572 (fontified t) 1572 1580 (fontified t face font-lock-string-face) 1580 1582 (fontified t) 1582 1595 (fontified t) 1595 1599 (fontified t face font-lock-constant-face) 1599 1602 (fontified t) 1602 1608 (fontified t) 1608 1621 (fontified t) 1621 1625 (fontified t face font-lock-constant-face) 1625 1644 (fontified t) 1644 1648 (fontified t face font-lock-constant-face) 1648 1650 (fontified t) 1650 1655 (fontified t face font-lock-type-face) 1655 1657 (fontified t) 1657 1663 (fontified t face font-lock-type-face) 1663 1673 (fontified t) 1673 1692 (fontified t) 1692 1696 (fontified t face font-lock-constant-face) 1696 1717 (fontified t) 1717 1722 (fontified t face font-lock-type-face) 1722 1724 (fontified t) 1724 1730 (fontified t face font-lock-type-face) 1730 1733 (fontified t) 1733 1746 (fontified t) 1746 1750 (fontified t face font-lock-constant-face) 1750 1775 (fontified t) 1775 1779 (fontified t face font-lock-variable-name-face) 1779 1781 (fontified t) 1781 1785 (fontified t face font-lock-type-face) 1785 1787 (fontified t) 1787 1788 (fontified t face font-lock-variable-name-face) 1788 1790 (fontified t) 1790 1795 (fontified t face font-lock-constant-face) 1795 1797 (fontified t) 1797 1802 (fontified t face font-lock-type-face) 1802 1804 (fontified t) 1804 1809 (fontified t face font-lock-keyword-face) 1809 1846 (fontified t) 1846 1849 (fontified t face font-lock-string-face) 1849 1852 (fontified t) 1852 1858 (fontified t face font-lock-string-face) 1858 1860 (fontified t) 1860 1861 (fontified t syntax-table #2#) 1861 1862 (fontified t) 1862 1868 (fontified t face font-lock-type-face) 1868 1875 (fontified t) 1875 1889 (fontified t face font-lock-string-face) 1889 1943 (fontified t) 1943 1944 (fontified t syntax-table #2#) 1944 1945 (fontified t) 1945 1951 (fontified t face font-lock-type-face) 1951 1958 (fontified t) 1958 1966 (fontified t face font-lock-string-face) 1966 2022 (fontified t) 2022 2025 (fontified t face font-lock-comment-delimiter-face) 2025 2082 (fontified t face font-lock-comment-face) 2082 2108 (fontified t face font-lock-comment-face) 2108 2111 (face font-lock-comment-face fontified t) 2115 2118 (face font-lock-keyword-face) 2119 2133 (face font-lock-variable-name-face) 2136 2141 (face font-lock-preprocessor-face) 2142 2147 (face font-lock-string-face) 2150 2154 (face font-lock-string-face) 2157 2168 (face font-lock-string-face) 2171 2179 (face font-lock-string-face) 2182 2189 (face font-lock-string-face) 2204 2208 (face font-lock-constant-face) 2230 2233 (face font-lock-constant-face) 2233 2234 (face font-lock-constant-face) 2253 2257 (face font-lock-constant-face) 2259 2264 (face font-lock-type-face) 2266 2272 (face font-lock-type-face) 2893 2894 (syntax-table #2#) 2982 2983 (syntax-table #2#) 5552 5553 (syntax-table #2#) 5634 5635 (syntax-table #2#) 5665 5666 (syntax-table #2#)) . 1) (undo-tree-id1259 . 5933) (undo-tree-id1260 . -10) (undo-tree-id1261 . -10) (undo-tree-id1262 . -10) (undo-tree-id1263 . -10) (undo-tree-id1264 . -10) (undo-tree-id1265 . -10) (undo-tree-id1266 . -10) (undo-tree-id1267 . -10) (undo-tree-id1268 . -10) (undo-tree-id1269 . -10) (undo-tree-id1270 . -10) (undo-tree-id1271 . -54) (undo-tree-id1272 . -60) (undo-tree-id1273 . -86) (undo-tree-id1274 . -91) (undo-tree-id1275 . -130) (undo-tree-id1276 . -135) (undo-tree-id1277 . -4675) (undo-tree-id1278 . -4677) (undo-tree-id1279 . -527) (undo-tree-id1280 . -533) (undo-tree-id1281 . -939) (undo-tree-id1282 . -945) (undo-tree-id1283 . -1350) (undo-tree-id1284 . -1356) (undo-tree-id1285 . -1862) (undo-tree-id1286 . -1868) (undo-tree-id1287 . -1945) (undo-tree-id1288 . -1951) (undo-tree-id1289 . -2368) (undo-tree-id1290 . -2374) (undo-tree-id1291 . -2895) (undo-tree-id1292 . -2901) (undo-tree-id1293 . -2984) (undo-tree-id1294 . -2990) (undo-tree-id1295 . -3397) (undo-tree-id1296 . -3403) (undo-tree-id1297 . -3714) (undo-tree-id1298 . -3720) (undo-tree-id1299 . -4039) (undo-tree-id1300 . -4045) (undo-tree-id1301 . -4593) (undo-tree-id1302 . -4599) (undo-tree-id1303 . -5874) (undo-tree-id1304 . -5879) (undo-tree-id1305 . -66) (undo-tree-id1306 . -80) (undo-tree-id1307 . -130) (undo-tree-id1308 . -135) (undo-tree-id1309 . -25) (undo-tree-id1310 . -48) (undo-tree-id1311 . -11) (undo-tree-id1312 . -12) (undo-tree-id1313 . -21) (undo-tree-id1314 . -24) (undo-tree-id1315 . -14) (undo-tree-id1316 . -13) (undo-tree-id1317 . -14) (undo-tree-id1318 . -13) (undo-tree-id1319 . -15) (undo-tree-id1320 . -14) (undo-tree-id1321 . -15) (undo-tree-id1322 . -15) (undo-tree-id1323 . -14) (undo-tree-id1324 . -15) (undo-tree-id1325 . -15) (undo-tree-id1326 . -14) (undo-tree-id1327 . -15) (undo-tree-id1328 . -14) (undo-tree-id1329 . -15) (undo-tree-id1330 . -14) (undo-tree-id1331 . -16) (undo-tree-id1332 . -15) (undo-tree-id1333 . -16) (undo-tree-id1334 . -16) (undo-tree-id1335 . -15) (undo-tree-id1336 . -16) (undo-tree-id1337 . -16) (undo-tree-id1338 . -15) (undo-tree-id1339 . -16) (undo-tree-id1340 . -15) (undo-tree-id1341 . -16) (undo-tree-id1342 . -15) (undo-tree-id1343 . -15) (undo-tree-id1344 . -16) (undo-tree-id1345 . -21) (undo-tree-id1346 . -24) (undo-tree-id1347 . -17) (undo-tree-id1348 . -16) (undo-tree-id1349 . -17) (undo-tree-id1350 . -17) (undo-tree-id1351 . -16) (undo-tree-id1352 . -17) (undo-tree-id1353 . -17) (undo-tree-id1354 . -16) (undo-tree-id1355 . -17) (undo-tree-id1356 . -16) (undo-tree-id1357 . -17) (undo-tree-id1358 . -16) (undo-tree-id1359 . -16) (undo-tree-id1360 . -17) (undo-tree-id1361 . -21) (undo-tree-id1362 . -24) (undo-tree-id1363 . -18) (undo-tree-id1364 . -17) (undo-tree-id1365 . -18) (undo-tree-id1366 . -18) (undo-tree-id1367 . -17) (undo-tree-id1368 . -18) (undo-tree-id1369 . -18) (undo-tree-id1370 . -17) (undo-tree-id1371 . -18) (undo-tree-id1372 . -17) (undo-tree-id1373 . -18) (undo-tree-id1374 . -17) (undo-tree-id1375 . -17) (undo-tree-id1376 . -18) (undo-tree-id1377 . -21) (undo-tree-id1378 . -24) (undo-tree-id1379 . -18) (undo-tree-id1380 . -18) (undo-tree-id1381 . -18) (undo-tree-id1382 . -18) (undo-tree-id1383 . -18) (undo-tree-id1384 . -18) (undo-tree-id1385 . -18) (undo-tree-id1386 . -18) (undo-tree-id1387 . -18) (undo-tree-id1388 . -18) (undo-tree-id1389 . -21) (undo-tree-id1390 . -24) (undo-tree-id1391 . -14) (undo-tree-id1392 . -19) (undo-tree-id1393 . -18) (undo-tree-id1394 . -19) (undo-tree-id1395 . -21) (undo-tree-id1396 . -24) (undo-tree-id1397 . -19) (undo-tree-id1398 . -18) (undo-tree-id1399 . -19) (undo-tree-id1400 . -18) (undo-tree-id1401 . -20) (undo-tree-id1402 . -19) (undo-tree-id1403 . -20) (undo-tree-id1404 . -20) (undo-tree-id1405 . -19) (undo-tree-id1406 . -20) (undo-tree-id1407 . -20) (undo-tree-id1408 . -19) (undo-tree-id1409 . -20) (undo-tree-id1410 . -19) (undo-tree-id1411 . -20) (undo-tree-id1412 . -19) (undo-tree-id1413 . -19) (undo-tree-id1414 . -19) (undo-tree-id1415 . -19) (undo-tree-id1416 . -19) (undo-tree-id1417 . -19) (undo-tree-id1418 . -19) (undo-tree-id1419 . -19) (undo-tree-id1420 . -19) (undo-tree-id1421 . -19) (undo-tree-id1422 . -19) (undo-tree-id1423 . -19) (undo-tree-id1424 . -19) (undo-tree-id1425 . -19) (undo-tree-id1426 . -19) 20) nil (23743 20732 823108 500000) 0 nil]) ((11 . 21) (#("use crate::error;" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 11 (fontified t) 11 16 (fontified t) 16 17 (fontified t)) . 11) (undo-tree-id1427 . -11) (undo-tree-id1428 . -11) (undo-tree-id1429 . -11) (undo-tree-id1430 . -11) (undo-tree-id1431 . -11) (undo-tree-id1432 . -11) (undo-tree-id1433 . -11) (undo-tree-id1434 . -11) (undo-tree-id1435 . -4) (undo-tree-id1436 . -9) (undo-tree-id1437 . -4) (undo-tree-id1438 . -16) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (undo-tree-id1441 . -1) (t 23743 20719 213820 623000)) nil (23743 20732 823134 781000) 0 nil]) ((#("main::" 0 4 (fontified t face font-lock-constant-face) 4 6 (fontified t)) . 22) (undo-tree-id1250 . -1) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -1) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (undo-tree-id1256 . -1) (undo-tree-id1257 . -4)) nil (23743 20719 205041 135000) 0 nil]) ((#("use user;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 10 (fontified t)) . 107) (undo-tree-id1258 . -8) 115 (t 23743 20599 338596 671000)) nil (23743 20719 205047 772000) 0 nil]) ((9 . 10) (6 . 9) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -6) (undo-tree-id1237 . -1) (#("r" 0 1 (fontified t face font-lock-constant-face)) . -7) (undo-tree-id1238 . -1) 8 (1 . 8) (#("u" 0 1 (fontified t)) . -1) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) (undo-tree-id1241 . -1) (undo-tree-id1242 . -1) (#("s" 0 1 (fontified t)) . -2) (undo-tree-id1243 . -1) (#("e" 0 1 (fontified t face font-lock-keyword-face)) . -3) (undo-tree-id1244 . -1) (#(" " 0 1 (fontified t)) . -4) (undo-tree-id1245 . -1) (#("u" 0 1 (fontified t face font-lock-constant-face)) . -5) (undo-tree-id1246 . -1) (#("s" 0 1 (fontified t face font-lock-constant-face)) . -6) (undo-tree-id1247 . -1) (#("e" 0 1 (fontified t face font-lock-keyword-face)) . -7) (undo-tree-id1248 . -1) (#("r" 0 1 (fontified t face font-lock-constant-face)) . -8) (undo-tree-id1249 . -1) 9 (1 . 9) (1 . 2) 13 (t 23743 20495 979893 706000)) nil (23743 20599 325001 619000) 0 nil]) ((#("mod user;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 9 (fontified t) 9 10 (fontified t)) . 1) (undo-tree-id1221 . 6) (undo-tree-id1222 . -4) (undo-tree-id1223 . -4) (undo-tree-id1224 . -4) (undo-tree-id1225 . -8) (undo-tree-id1226 . -3) (undo-tree-id1227 . -9) (undo-tree-id1228 . -4) (undo-tree-id1229 . -8) (undo-tree-id1230 . -4) (undo-tree-id1231 . -4) (undo-tree-id1232 . -4) (undo-tree-id1233 . -4) (undo-tree-id1234 . -8) (undo-tree-id1235 . -4) (undo-tree-id1236 . -4) 5) nil (23743 20495 965577 667000) 0 nil] [nil nil ((5 . 12) (t 23743 20461 166779 755000)) ((#("super::" 0 5 (fontified t face font-lock-keyword-face) 5 7 (fontified t)) . 5) (undo-tree-id1190 . -2) (undo-tree-id1191 . -1) (undo-tree-id1192 . -5) (undo-tree-id1193 . -5) (undo-tree-id1194 . -6) (undo-tree-id1195 . -7) (undo-tree-id1196 . -7) (undo-tree-id1197 . -7) (undo-tree-id1198 . -7) (undo-tree-id1199 . -7) (undo-tree-id1200 . -4) (undo-tree-id1201 . -4) (undo-tree-id1202 . -5) (undo-tree-id1203 . -5) (undo-tree-id1204 . -5) (undo-tree-id1205 . -5) (undo-tree-id1206 . -7) (undo-tree-id1207 . -6) (undo-tree-id1208 . -6) (undo-tree-id1209 . -6) (undo-tree-id1210 . -6) (undo-tree-id1211 . -5) (undo-tree-id1212 . -6) (undo-tree-id1213 . -4) (undo-tree-id1214 . -5) (undo-tree-id1215 . -4) (undo-tree-id1216 . -4) (undo-tree-id1217 . -4) (undo-tree-id1218 . -4) (undo-tree-id1219 . -4) (undo-tree-id1220 . -4) (t 23743 20473 736700 545000)) (23743 20473 667918 277000) 0 nil]) ((1 . 10) (1 . 2)) nil (23743 20477 623350 234000) 0 nil] [nil ([nil nil ((14 . 16) (9 . 14) (t 23743 20253 158090 486000)) ((#("crate" 0 5 (fontified nil face font-lock-keyword-face)) . 9) (undo-tree-id1136 . -5) (undo-tree-id1137 . -5) (undo-tree-id1138 . -5) (undo-tree-id1139 . -5) (undo-tree-id1140 . -5) (undo-tree-id1141 . -5) (undo-tree-id1142 . -3) (undo-tree-id1143 . -3) (undo-tree-id1144 . -5) (undo-tree-id1145 . -5) (undo-tree-id1146 . -5) (undo-tree-id1147 . -5) (undo-tree-id1148 . -5) (undo-tree-id1149 . -5) (undo-tree-id1150 . -5) (undo-tree-id1151 . -4) (undo-tree-id1152 . -5) (undo-tree-id1153 . -3) (undo-tree-id1154 . -4) (undo-tree-id1155 . -3) (undo-tree-id1156 . -3) (undo-tree-id1157 . -3) (undo-tree-id1158 . -3) (undo-tree-id1159 . -3) (undo-tree-id1160 . -3) (#("::" 0 2 (fontified t)) . 14) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . -2) (undo-tree-id1164 . -1) (undo-tree-id1165 . -2) (undo-tree-id1166 . -2) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . -1)) (23743 20279 548180 935000) 0 nil]) ((1 . 89)) ((#("pub mod error;
pub mod lib;
pub mod pubsub;
pub mod query;
pub mod user;
pub mod utils;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 13 (fontified t face font-lock-constant-face) 13 15 (fontified t) 15 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 22 (fontified t face font-lock-keyword-face) 22 23 (fontified t) 23 26 (fontified t face font-lock-constant-face) 26 28 (fontified t) 28 31 (fontified t face font-lock-keyword-face) 31 32 (fontified t) 32 35 (fontified t face font-lock-keyword-face) 35 36 (fontified t) 36 42 (fontified t face font-lock-constant-face) 42 44 (fontified t) 44 47 (fontified t face font-lock-keyword-face) 47 48 (fontified t) 48 49 (fontified t face font-lock-keyword-face) 49 51 (fontified t face font-lock-keyword-face) 51 52 (fontified t) 52 57 (fontified t face font-lock-constant-face) 57 59 (fontified t) 59 62 (fontified t face font-lock-keyword-face) 62 63 (fontified t) 63 66 (fontified t face font-lock-keyword-face) 66 67 (fontified t) 67 71 (fontified t face font-lock-constant-face) 71 73 (fontified t) 73 76 (fontified t face font-lock-keyword-face) 76 77 (fontified t) 77 80 (fontified t face font-lock-keyword-face) 80 81 (fontified t) 81 86 (fontified t face font-lock-constant-face) 86 88 (fontified t)) . 1) (undo-tree-id1170 . 80) (undo-tree-id1171 . -88) (undo-tree-id1172 . -87) (undo-tree-id1173 . -8) (undo-tree-id1174 . -8) (undo-tree-id1175 . -8) (undo-tree-id1176 . -8) (undo-tree-id1177 . -8) (undo-tree-id1178 . -8) (undo-tree-id1179 . -8) (undo-tree-id1180 . -8) (undo-tree-id1181 . -8) (undo-tree-id1182 . -8) (undo-tree-id1183 . -18) (undo-tree-id1184 . -8) (undo-tree-id1185 . -13) (undo-tree-id1186 . -8) (undo-tree-id1187 . -13) (undo-tree-id1188 . -8) (undo-tree-id1189 . -13) (t 23743 20253 158090 486000)) (23743 20279 553729 286000) 0 nil]) ((#("mod main;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 9 (fontified t) 9 10 (fontified t)) . 1) (undo-tree-id1133 . 1) (undo-tree-id1134 . -6) (undo-tree-id1135 . -6) 7 (t 23743 19953 689977 549000)) nil (23743 20304 56359 956000) 0 nil]) ((8 . 10) (1 . 8) (1 . 2) 13 (t 23743 19940 706726 31000)) nil (23743 19953 674733 810000) 0 nil]) ((12 . 18) (t 23743 19922 803505 518000)) nil (23743 19940 656742 837000) 0 nil]) ((5 . 12) (t 23743 19901 580305 930000)) nil (23743 19922 793071 704000) 0 nil]) ((1 . 5954) (#("use error;
use pubsub;
use query;
use user;
use utils;
use futures::stream::Stream;
use pubsub::PubSub;
use user::{Filter, Scope, User};
use warp::{path, Filter as WarpFilter};

pub fn run() {
    // GET /api/v1/streaming/user                                  [private; language filter]
    let user_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user));

    // GET /api/v1/streaming/user/notification                     [private; notification filter]
    let user_timeline_notifications = path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user.with_notification_filter()));

    // GET /api/v1/streaming/public                                [public; language filter]
    let public_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public?only_media=true                [public; language filter]
    let public_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/public/local                          [public; language filter]
    let local_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public:local\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
    let local_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .and(path::end())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:local:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public:local\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/direct                                [private; *no* filter]
    let direct_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"direct\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(format!(\"direct:{}\", user.id), user.with_no_filter()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
    let hashtag_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}\", q.tag), User::public()));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
    let hashtag_timeline_local = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\" / \"local\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}:local\", q.tag), User::public()));

    // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
    let list_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"list\")
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .and(warp::query())
        .and_then(|user: User, q: query::List| (user.is_authorized_for_list(q.list), Ok(user)))
        .untuple_one()
        .and(path::end())
        .map(|list: i64, user: User| PubSub::from(format!(\"list:{}\", list), user.with_no_filter()));

    let routes = or!(
        user_timeline,
        user_timeline_notifications,
        public_timeline_media,
        public_timeline,
        local_timeline_media,
        local_timeline,
        direct_timeline,
        hashtag_timeline,
        hashtag_timeline_local,
        list_timeline
    )
    .and_then(|event_stream| event_stream)
    .and(warp::sse())
    .map(|event_stream: pubsub::Receiver, sse: warp::sse::Sse| {
        let user = event_stream.user.clone();
        sse.reply(warp::sse::keep(
            event_stream.filter_map(move |item| {
                let payload = item[\"payload\"].clone();
                let event = item[\"event\"].to_string().clone();
                let toot_lang = item[\"language\"].to_string().clone();

                println!(\"ding\");

                match &user.filter {
                    Filter::Notification if event != \"notification\" => None,
                    Filter::Language if !user.langs.contains(&toot_lang) => None,
                    _ => Some((warp::sse::event(event), warp::sse::data(payload))),
                }
            }),
            None,
        ))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 9 (fontified t face font-lock-constant-face) 9 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 21 (fontified t face font-lock-constant-face) 21 23 (fontified t) 23 26 (fontified t face font-lock-keyword-face) 26 27 (fontified t) 27 32 (fontified t face font-lock-constant-face) 32 34 (fontified t) 34 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-constant-face) 42 44 (fontified t) 44 47 (fontified t face font-lock-keyword-face) 47 48 (fontified t) 48 53 (fontified t face font-lock-constant-face) 53 54 (fontified t) 54 55 (fontified t) 55 58 (fontified t face font-lock-keyword-face) 58 59 (fontified t) 59 66 (fontified t face font-lock-constant-face) 66 68 (fontified t) 68 74 (fontified t face font-lock-constant-face) 74 76 (fontified t) 76 82 (fontified t face font-lock-type-face) 82 84 (fontified t) 84 87 (fontified t face font-lock-keyword-face) 87 88 (fontified t) 88 94 (fontified t face font-lock-constant-face) 94 96 (fontified t) 96 102 (fontified t face font-lock-type-face) 102 104 (fontified t) 104 107 (fontified t face font-lock-keyword-face) 107 108 (fontified t) 108 112 (fontified t face font-lock-constant-face) 112 115 (fontified t) 115 121 (fontified t face font-lock-type-face) 121 123 (fontified t) 123 128 (fontified t face font-lock-type-face) 128 130 (fontified t) 130 134 (fontified t face font-lock-type-face) 134 137 (fontified t) 137 140 (fontified t face font-lock-keyword-face) 140 141 (fontified t) 141 145 (fontified t face font-lock-constant-face) 145 154 (fontified t) 154 160 (fontified t face font-lock-type-face) 160 161 (fontified t) 161 163 (fontified t face font-lock-keyword-face) 163 164 (fontified t) 164 174 (fontified t face font-lock-type-face) 174 178 (fontified t) 178 181 (fontified t face font-lock-keyword-face) 181 182 (fontified t) 182 184 (fontified t face font-lock-keyword-face) 184 185 (fontified t) 185 188 (fontified t face font-lock-function-name-face) 188 197 (fontified t) 197 200 (fontified t face font-lock-comment-delimiter-face) 200 287 (fontified t face font-lock-comment-face) 287 291 (fontified t) 291 294 (fontified t face font-lock-keyword-face) 294 295 (fontified t) 295 308 (fontified t face font-lock-variable-name-face) 308 311 (fontified t) 311 316 (fontified t face font-lock-preprocessor-face) 316 317 (fontified t) 317 322 (fontified t face font-lock-string-face) 322 325 (fontified t) 325 329 (fontified t face font-lock-string-face) 329 332 (fontified t) 332 343 (fontified t face font-lock-string-face) 343 346 (fontified t) 346 350 (fontified t face font-lock-string-face) 350 351 (syntax-table #1# fontified t face font-lock-string-face) 351 352 (fontified t face font-lock-string-face) 352 367 (fontified t) 367 371 (fontified t face font-lock-constant-face) 371 393 (fontified t) 393 397 (fontified t face font-lock-constant-face) 397 416 (fontified t) 416 421 (fontified t face font-lock-type-face) 421 423 (fontified t) 423 430 (fontified t face font-lock-type-face) 430 459 (fontified t) 459 463 (fontified t face font-lock-constant-face) 463 484 (fontified t) 484 489 (fontified t face font-lock-type-face) 489 491 (fontified t) 491 498 (fontified t face font-lock-type-face) 498 515 (fontified t) 515 519 (fontified t face font-lock-variable-name-face) 519 521 (fontified t) 521 525 (fontified t face font-lock-type-face) 525 527 (fontified t) 527 533 (fontified t face font-lock-type-face) 533 554 (fontified t) 554 555 (fontified t) 555 569 (fontified t) 569 574 (fontified t) 574 577 (fontified t face font-lock-comment-delimiter-face) 577 668 (fontified t face font-lock-comment-face) 668 672 (fontified t) 672 675 (fontified t face font-lock-keyword-face) 675 676 (fontified t) 676 703 (fontified t face font-lock-variable-name-face) 703 706 (fontified t) 706 711 (fontified t face font-lock-preprocessor-face) 711 712 (fontified t) 712 717 (fontified t face font-lock-string-face) 717 720 (fontified t) 720 724 (fontified t face font-lock-string-face) 724 727 (fontified t) 727 738 (fontified t face font-lock-string-face) 738 741 (fontified t) 741 745 (fontified t face font-lock-string-face) 745 746 (fontified t syntax-table #1# face font-lock-string-face) 746 747 (fontified t face font-lock-string-face) 747 750 (fontified t) 750 764 (fontified t face font-lock-string-face) 764 779 (fontified t) 779 783 (fontified t face font-lock-constant-face) 783 805 (fontified t) 805 809 (fontified t face font-lock-constant-face) 809 828 (fontified t) 828 833 (fontified t face font-lock-type-face) 833 835 (fontified t) 835 842 (fontified t face font-lock-type-face) 842 871 (fontified t) 871 875 (fontified t face font-lock-constant-face) 875 896 (fontified t) 896 901 (fontified t face font-lock-type-face) 901 903 (fontified t) 903 910 (fontified t face font-lock-type-face) 910 927 (fontified t) 927 931 (fontified t face font-lock-variable-name-face) 931 933 (fontified t) 933 937 (fontified t face font-lock-type-face) 937 939 (fontified t) 939 945 (fontified t face font-lock-type-face) 945 1013 (fontified t) 1013 1016 (fontified t face font-lock-comment-delimiter-face) 1016 1069 (fontified t face font-lock-comment-face) 1069 1102 (face font-lock-comment-face fontified t) 1102 1106 (fontified t) 1106 1109 (fontified t face font-lock-keyword-face) 1109 1110 (fontified t) 1110 1125 (fontified t face font-lock-variable-name-face) 1125 1128 (fontified t) 1128 1133 (fontified t face font-lock-preprocessor-face) 1133 1134 (fontified t) 1134 1139 (fontified t face font-lock-string-face) 1139 1142 (fontified t) 1142 1146 (fontified t face font-lock-string-face) 1146 1149 (fontified t) 1149 1160 (fontified t face font-lock-string-face) 1160 1163 (fontified t) 1163 1171 (fontified t face font-lock-string-face) 1171 1186 (fontified t) 1186 1190 (fontified t face font-lock-constant-face) 1190 1212 (fontified t) 1212 1216 (fontified t face font-lock-constant-face) 1216 1235 (fontified t) 1235 1239 (fontified t face font-lock-constant-face) 1239 1241 (fontified t) 1241 1246 (fontified t face font-lock-type-face) 1246 1248 (fontified t) 1248 1254 (fontified t face font-lock-type-face) 1254 1283 (fontified t) 1283 1287 (fontified t face font-lock-constant-face) 1287 1308 (fontified t) 1308 1313 (fontified t face font-lock-type-face) 1313 1315 (fontified t) 1315 1321 (fontified t face font-lock-type-face) 1321 1338 (fontified t) 1338 1342 (fontified t face font-lock-variable-name-face) 1342 1344 (fontified t) 1344 1348 (fontified t face font-lock-type-face) 1348 1350 (fontified t) 1350 1356 (fontified t face font-lock-type-face) 1356 1363 (fontified t) 1363 1371 (fontified t face font-lock-string-face) 1371 1416 (fontified t) 1416 1419 (fontified t face font-lock-comment-delimiter-face) 1419 1505 (fontified t face font-lock-comment-face) 1505 1509 (fontified t) 1509 1512 (fontified t face font-lock-keyword-face) 1512 1513 (fontified t) 1513 1534 (fontified t face font-lock-variable-name-face) 1534 1537 (fontified t) 1537 1542 (fontified t face font-lock-preprocessor-face) 1542 1543 (fontified t) 1543 1548 (fontified t face font-lock-string-face) 1548 1551 (fontified t) 1551 1555 (fontified t face font-lock-string-face) 1555 1558 (fontified t) 1558 1569 (fontified t face font-lock-string-face) 1569 1572 (fontified t) 1572 1580 (fontified t face font-lock-string-face) 1580 1595 (fontified t) 1595 1599 (fontified t face font-lock-constant-face) 1599 1602 (fontified t) 1602 1608 (fontified t) 1608 1621 (fontified t) 1621 1625 (fontified t face font-lock-constant-face) 1625 1644 (fontified t) 1644 1648 (fontified t face font-lock-constant-face) 1648 1650 (fontified t) 1650 1655 (fontified t face font-lock-type-face) 1655 1657 (fontified t) 1657 1663 (fontified t face font-lock-type-face) 1663 1692 (fontified t) 1692 1696 (fontified t face font-lock-constant-face) 1696 1717 (fontified t) 1717 1722 (fontified t face font-lock-type-face) 1722 1724 (fontified t) 1724 1730 (fontified t face font-lock-type-face) 1730 1746 (fontified t) 1746 1750 (fontified t face font-lock-constant-face) 1750 1775 (fontified t) 1775 1779 (fontified t face font-lock-variable-name-face) 1779 1781 (fontified t) 1781 1785 (fontified t face font-lock-type-face) 1785 1787 (fontified t) 1787 1788 (fontified t face font-lock-variable-name-face) 1788 1790 (fontified t) 1790 1795 (fontified t face font-lock-constant-face) 1795 1797 (fontified t) 1797 1802 (fontified t face font-lock-type-face) 1802 1804 (fontified t) 1804 1809 (fontified t face font-lock-keyword-face) 1809 1846 (fontified t) 1846 1849 (fontified t face font-lock-string-face) 1849 1852 (fontified t) 1852 1858 (fontified t face font-lock-string-face) 1858 1860 (fontified t) 1860 1861 (fontified t syntax-table #2#) 1861 1862 (fontified t) 1862 1868 (fontified t face font-lock-type-face) 1868 1875 (fontified t) 1875 1889 (fontified t face font-lock-string-face) 1889 1943 (fontified t) 1943 1944 (fontified t syntax-table #2#) 1944 1945 (fontified t) 1945 1951 (fontified t face font-lock-type-face) 1951 1958 (fontified t) 1958 1966 (fontified t face font-lock-string-face) 1966 2022 (fontified t) 2022 2025 (fontified t face font-lock-comment-delimiter-face) 2025 2108 (fontified t face font-lock-comment-face) 2108 2111 (face font-lock-comment-face fontified t) 2893 2894 (syntax-table #2#) 2982 2983 (syntax-table #2#) 5552 5553 (syntax-table #2#) 5634 5635 (syntax-table #2#) 5665 5666 (syntax-table #2#)) . 1) (undo-tree-id1086 . 5905) (undo-tree-id1087 . -27) (undo-tree-id1088 . -27) (undo-tree-id1089 . -28) (undo-tree-id1090 . -27) (undo-tree-id1091 . -28) (undo-tree-id1092 . -48) (undo-tree-id1093 . -48) (undo-tree-id1094 . -47) (undo-tree-id1095 . -42) (undo-tree-id1096 . -43) (undo-tree-id1097 . -48) (undo-tree-id1098 . -49) (undo-tree-id1099 . -50) (undo-tree-id1100 . -50) (undo-tree-id1101 . -51) (undo-tree-id1102 . -49) (undo-tree-id1103 . -50) (undo-tree-id1104 . -48) (undo-tree-id1105 . -53) (undo-tree-id1106 . -48) (undo-tree-id1107 . -53) (undo-tree-id1108 . -48) (undo-tree-id1109 . -53) (undo-tree-id1110 . -50) (undo-tree-id1111 . -51) (undo-tree-id1112 . -51) (undo-tree-id1113 . -52) (undo-tree-id1114 . -52) (undo-tree-id1115 . -53) (undo-tree-id1116 . -48) (undo-tree-id1117 . -47) (undo-tree-id1118 . -48) (undo-tree-id1119 . -48) (undo-tree-id1120 . -48) (undo-tree-id1121 . -48) (undo-tree-id1122 . -48) (undo-tree-id1123 . -48) (undo-tree-id1124 . -48) (undo-tree-id1125 . -48) 49) nil (23743 19901 534183 923000) 0 nil]) ((45 . 49) (#(" " 0 1 (fontified nil)) . -45) (44 . 45) (43 . 44) (#("," 0 1 (fontified t)) . 43)) nil (23743 19901 534192 785000) 0 nil]) ((35 . 39) (#(" " 0 1 (fontified nil)) . -35) (34 . 35) (33 . 34) (#("," 0 1 (fontified t)) . 33) (undo-tree-id1126 . -1)) nil (23743 19901 534198 253000) 0 nil]) ((24 . 28) (#(" " 0 1 (fontified nil)) . -24) (23 . 24) (22 . 23) (#("," 0 1 (fontified t)) . 22) (undo-tree-id1127 . -1) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1)) nil (23743 19901 534206 200000) 0 nil]) ((12 . 16) (#(" " 0 1 (fontified nil)) . -12) (undo-tree-id1131 . 1) (11 . 12) (10 . 11)) nil (23743 19901 534211 535000) 0 nil]) ((#("," 0 1 (fontified t)) . 10) (undo-tree-id1132 . 1) (t 23743 19874 917140 610000)) nil (23743 19901 534214 368000) 0 nil] [nil nil ((10 . 11) (t 23743 19874 917140 610000)) ((#(";" 0 1 (fontified t)) . 10) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1)) (23743 19891 230106 479000) 0 nil] [nil ([nil nil ((#("u" 0 1 (fontified t)) . -10) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (undo-tree-id1026 . -1) 11 (10 . 11)) ((#("u" 0 1 (fontified nil)) . 10) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (10 . 11)) (23743 19883 806466 440000) 0 nil]) ((9 . 10) (#("r" 0 1 (fontified t face font-lock-constant-face)) . 9) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (t 23743 19874 917140 610000)) ((9 . 10) (#(";" 0 1 (fontified t)) . 9) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1)) (23743 19883 815232 757000) 0 nil]) ((#("}" 0 1 (fontified nil)) . 38) (undo-tree-id1005 . 1) (#("{" 0 1 (fontified t)) . -5) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) 6) nil (23743 19891 234991 23000) 0 nil]) ((#("crate::" 0 5 (fontified t face font-lock-keyword-face) 5 7 (fontified t)) . 5) (undo-tree-id1022 . -6) (t 23743 19856 157258 819000)) nil (23743 19874 860991 610000) 0 nil]) ((1 . 5947) (#("use pubsub::PubSub;
use crate::{error, pubsub, query, user, utils};
use futures::stream::Stream;
use user::{Filter, Scope, User};
use warp::{path, Filter as WarpFilter};

pub fn run() {
    // GET /api/v1/streaming/user                                  [private; language filter]
    let user_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user));

    // GET /api/v1/streaming/user/notification                     [private; notification filter]
    let user_timeline_notifications = path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user.with_notification_filter()));

    // GET /api/v1/streaming/public                                [public; language filter]
    let public_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public?only_media=true                [public; language filter]
    let public_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/public/local                          [public; language filter]
    let local_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public:local\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
    let local_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .and(path::end())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:local:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public:local\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/direct                                [private; *no* filter]
    let direct_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"direct\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(format!(\"direct:{}\", user.id), user.with_no_filter()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
    let hashtag_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}\", q.tag), User::public()));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
    let hashtag_timeline_local = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\" / \"local\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}:local\", q.tag), User::public()));

    // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
    let list_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"list\")
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .and(warp::query())
        .and_then(|user: User, q: query::List| (user.is_authorized_for_list(q.list), Ok(user)))
        .untuple_one()
        .and(path::end())
        .map(|list: i64, user: User| PubSub::from(format!(\"list:{}\", list), user.with_no_filter()));

    let routes = or!(
        user_timeline,
        user_timeline_notifications,
        public_timeline_media,
        public_timeline,
        local_timeline_media,
        local_timeline,
        direct_timeline,
        hashtag_timeline,
        hashtag_timeline_local,
        list_timeline
    )
    .and_then(|event_stream| event_stream)
    .and(warp::sse())
    .map(|event_stream: pubsub::Receiver, sse: warp::sse::Sse| {
        let user = event_stream.user.clone();
        sse.reply(warp::sse::keep(
            event_stream.filter_map(move |item| {
                let payload = item[\"payload\"].clone();
                let event = item[\"event\"].to_string().clone();
                let toot_lang = item[\"language\"].to_string().clone();

                println!(\"ding\");

                match &user.filter {
                    Filter::Notification if event != \"notification\" => None,
                    Filter::Language if !user.langs.contains(&toot_lang) => None,
                    _ => Some((warp::sse::event(event), warp::sse::data(payload))),
                }
            }),
            None,
        ))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 10 (fontified t face font-lock-constant-face) 10 12 (fontified t) 12 18 (fontified t face font-lock-type-face) 18 19 (fontified t) 19 20 (fontified t) 20 23 (fontified t face font-lock-keyword-face) 23 24 (fontified t) 24 29 (fontified t face font-lock-keyword-face) 29 68 (fontified t) 68 71 (fontified t face font-lock-keyword-face) 71 72 (fontified t) 72 79 (fontified t face font-lock-constant-face) 79 81 (fontified t) 81 87 (fontified t face font-lock-constant-face) 87 89 (fontified t) 89 95 (fontified t face font-lock-type-face) 95 97 (fontified t) 97 100 (fontified t face font-lock-keyword-face) 100 101 (fontified t) 101 105 (fontified t face font-lock-constant-face) 105 108 (fontified t) 108 114 (fontified t face font-lock-type-face) 114 116 (fontified t) 116 121 (fontified t face font-lock-type-face) 121 123 (fontified t) 123 127 (fontified t face font-lock-type-face) 127 130 (fontified t) 130 133 (fontified t face font-lock-keyword-face) 133 134 (fontified t) 134 138 (fontified t face font-lock-constant-face) 138 147 (fontified t) 147 153 (fontified t face font-lock-type-face) 153 154 (fontified t) 154 156 (fontified t face font-lock-keyword-face) 156 157 (fontified t) 157 167 (fontified t face font-lock-type-face) 167 169 (fontified t) 169 171 (fontified t) 171 174 (fontified t face font-lock-keyword-face) 174 175 (fontified t) 175 177 (fontified t face font-lock-keyword-face) 177 178 (fontified t) 178 181 (fontified t face font-lock-function-name-face) 181 190 (fontified t) 190 193 (fontified t face font-lock-comment-delimiter-face) 193 280 (fontified t face font-lock-comment-face) 280 284 (fontified t) 284 287 (fontified t face font-lock-keyword-face) 287 288 (fontified t) 288 301 (fontified t face font-lock-variable-name-face) 301 304 (fontified t) 304 309 (fontified t face font-lock-preprocessor-face) 309 310 (fontified t) 310 315 (fontified t face font-lock-string-face) 315 318 (fontified t) 318 322 (fontified t face font-lock-string-face) 322 325 (fontified t) 325 336 (fontified t face font-lock-string-face) 336 339 (fontified t) 339 343 (fontified t face font-lock-string-face) 343 344 (syntax-table #1# fontified t face font-lock-string-face) 344 345 (fontified t face font-lock-string-face) 345 360 (fontified t) 360 364 (fontified t face font-lock-constant-face) 364 386 (fontified t) 386 390 (fontified t face font-lock-constant-face) 390 409 (fontified t) 409 414 (fontified t face font-lock-type-face) 414 416 (fontified t) 416 423 (fontified t face font-lock-type-face) 423 452 (fontified t) 452 456 (fontified t face font-lock-constant-face) 456 477 (fontified t) 477 482 (fontified t face font-lock-type-face) 482 484 (fontified t) 484 491 (fontified t face font-lock-type-face) 491 493 (fontified t) 493 494 (fontified t) 494 508 (fontified t) 508 512 (fontified t face font-lock-variable-name-face) 512 514 (fontified t) 514 518 (fontified t face font-lock-type-face) 518 520 (fontified t) 520 526 (face font-lock-type-face fontified t) 526 562 (fontified t) 562 567 (fontified t) 567 570 (fontified t face font-lock-comment-delimiter-face) 570 630 (fontified t face font-lock-comment-face) 630 661 (fontified t face font-lock-comment-face) 661 665 (fontified t) 665 668 (fontified t face font-lock-keyword-face) 668 669 (fontified t) 669 696 (fontified t face font-lock-variable-name-face) 696 699 (fontified t) 699 704 (fontified t face font-lock-preprocessor-face) 704 705 (fontified t) 705 710 (fontified t face font-lock-string-face) 710 713 (fontified t) 713 717 (fontified t face font-lock-string-face) 717 720 (fontified t) 720 731 (fontified t face font-lock-string-face) 731 734 (fontified t) 734 738 (fontified t face font-lock-string-face) 738 739 (fontified t syntax-table #1# face font-lock-string-face) 739 740 (fontified t face font-lock-string-face) 740 743 (fontified t) 743 757 (fontified t face font-lock-string-face) 757 759 (fontified t) 759 772 (fontified t) 772 776 (fontified t face font-lock-constant-face) 776 798 (fontified t) 798 802 (fontified t face font-lock-constant-face) 802 821 (fontified t) 821 826 (fontified t face font-lock-type-face) 826 828 (fontified t) 828 835 (fontified t face font-lock-type-face) 835 864 (fontified t) 864 868 (fontified t face font-lock-constant-face) 868 889 (fontified t) 889 894 (fontified t face font-lock-type-face) 894 896 (fontified t) 896 903 (fontified t face font-lock-type-face) 903 920 (fontified t) 920 924 (fontified t face font-lock-variable-name-face) 924 926 (fontified t) 926 930 (fontified t face font-lock-type-face) 930 932 (fontified t) 932 938 (fontified t face font-lock-type-face) 938 994 (fontified t) 994 1001 (fontified t) 1001 1006 (fontified t) 1006 1009 (fontified t face font-lock-comment-delimiter-face) 1009 1062 (fontified t face font-lock-comment-face) 1062 1095 (face font-lock-comment-face fontified t) 1095 1099 (fontified t) 1099 1102 (fontified t face font-lock-keyword-face) 1102 1103 (fontified t) 1103 1118 (fontified t face font-lock-variable-name-face) 1118 1121 (fontified t) 1121 1126 (fontified t face font-lock-preprocessor-face) 1126 1127 (fontified t) 1127 1132 (fontified t face font-lock-string-face) 1132 1135 (fontified t) 1135 1139 (fontified t face font-lock-string-face) 1139 1142 (fontified t) 1142 1153 (fontified t face font-lock-string-face) 1153 1156 (fontified t) 1156 1161 (fontified t face font-lock-string-face) 1161 1164 (fontified t face font-lock-string-face) 1164 1166 (fontified t) 1166 1179 (fontified t) 1179 1183 (fontified t face font-lock-constant-face) 1183 1205 (fontified t) 1205 1209 (fontified t face font-lock-constant-face) 1209 1228 (fontified t) 1228 1232 (fontified t face font-lock-constant-face) 1232 1234 (fontified t) 1234 1239 (fontified t face font-lock-type-face) 1239 1241 (fontified t) 1241 1247 (fontified t face font-lock-type-face) 1247 1259 (fontified t) 1259 1276 (fontified t) 1276 1280 (fontified t face font-lock-constant-face) 1280 1301 (fontified t) 1301 1306 (fontified t face font-lock-type-face) 1306 1308 (fontified t) 1308 1314 (fontified t face font-lock-type-face) 1314 1317 (fontified t) 1317 1331 (fontified t) 1331 1335 (fontified t face font-lock-variable-name-face) 1335 1337 (fontified t) 1337 1341 (fontified t face font-lock-type-face) 1341 1343 (fontified t) 1343 1349 (fontified t face font-lock-type-face) 1349 1356 (fontified t) 1356 1364 (fontified t face font-lock-string-face) 1364 1409 (fontified t) 1409 1412 (fontified t face font-lock-comment-delimiter-face) 1412 1498 (fontified t face font-lock-comment-face) 1498 1501 (fontified t) 1501 1502 (fontified t) 1502 1505 (fontified t face font-lock-keyword-face) 1505 1506 (fontified t) 1506 1527 (fontified t face font-lock-variable-name-face) 1527 1530 (fontified t) 1530 1535 (fontified t face font-lock-preprocessor-face) 1535 1536 (fontified t) 1536 1541 (fontified t face font-lock-string-face) 1541 1544 (fontified t) 1544 1548 (fontified t face font-lock-string-face) 1548 1551 (fontified t) 1551 1562 (fontified t face font-lock-string-face) 1562 1565 (fontified t) 1565 1573 (fontified t face font-lock-string-face) 1573 1575 (fontified t) 1575 1588 (fontified t) 1588 1592 (fontified t face font-lock-constant-face) 1592 1595 (fontified t) 1595 1601 (fontified t) 1601 1614 (fontified t) 1614 1618 (fontified t face font-lock-constant-face) 1618 1637 (fontified t) 1637 1641 (fontified t face font-lock-constant-face) 1641 1643 (fontified t) 1643 1648 (fontified t face font-lock-type-face) 1648 1650 (fontified t) 1650 1656 (fontified t face font-lock-type-face) 1656 1666 (fontified t) 1666 1685 (fontified t) 1685 1689 (fontified t face font-lock-constant-face) 1689 1710 (fontified t) 1710 1715 (fontified t face font-lock-type-face) 1715 1717 (fontified t) 1717 1723 (fontified t face font-lock-type-face) 1723 1726 (fontified t) 1726 1739 (fontified t) 1739 1743 (fontified t face font-lock-constant-face) 1743 1768 (fontified t) 1768 1772 (fontified t face font-lock-variable-name-face) 1772 1774 (fontified t) 1774 1778 (fontified t face font-lock-type-face) 1778 1780 (fontified t) 1780 1781 (fontified t face font-lock-variable-name-face) 1781 1783 (fontified t) 1783 1788 (fontified t face font-lock-constant-face) 1788 1790 (fontified t) 1790 1795 (fontified t face font-lock-type-face) 1795 1797 (fontified t) 1797 1802 (fontified t face font-lock-keyword-face) 1802 1817 (fontified t) 1817 1827 (fontified t) 1827 1839 (fontified t) 1839 1842 (fontified t face font-lock-string-face) 1842 1845 (fontified t) 1845 1851 (fontified t face font-lock-string-face) 1851 1853 (fontified t) 1853 1854 (fontified t syntax-table #2#) 1854 1855 (fontified t) 1855 1861 (fontified t face font-lock-type-face) 1861 1868 (fontified t) 1868 1882 (fontified t face font-lock-string-face) 1882 1936 (fontified t) 1936 1937 (fontified t syntax-table #2#) 1937 1938 (fontified t) 1938 1944 (fontified t face font-lock-type-face) 1944 1951 (fontified t) 1951 1959 (fontified t face font-lock-string-face) 1959 2015 (fontified t) 2015 2018 (fontified t face font-lock-comment-delimiter-face) 2018 2075 (fontified t face font-lock-comment-face) 2075 2101 (fontified t face font-lock-comment-face) 2101 2104 (face font-lock-comment-face fontified t) 2108 2111 (face font-lock-keyword-face) 2112 2126 (face font-lock-variable-name-face) 2129 2134 (face font-lock-preprocessor-face) 2135 2140 (face font-lock-string-face) 2143 2147 (face font-lock-string-face) 2150 2161 (face font-lock-string-face) 2164 2172 (face font-lock-string-face) 2175 2182 (face font-lock-string-face) 2197 2201 (face font-lock-constant-face) 2223 2226 (face font-lock-constant-face) 2226 2227 (face font-lock-constant-face) 2246 2250 (face font-lock-constant-face) 2252 2257 (face font-lock-type-face) 2259 2265 (face font-lock-type-face) 2294 2298 (face font-lock-constant-face) 2319 2324 (face font-lock-type-face) 2326 2327 (face font-lock-type-face) 2327 2332 (face font-lock-type-face) 2886 2887 (syntax-table #2#) 2975 2976 (syntax-table #2#) 5545 5546 (syntax-table #2#) 5627 5628 (syntax-table #2#) 5658 5659 (syntax-table #2#)) . 1) (undo-tree-id896 . 5946) (undo-tree-id897 . -4668) (undo-tree-id898 . -4670) (undo-tree-id899 . -72) (undo-tree-id900 . -79) (undo-tree-id901 . -123) (undo-tree-id902 . -127) (undo-tree-id903 . -116) (undo-tree-id904 . -121) (undo-tree-id905 . -108) (undo-tree-id906 . -114) (undo-tree-id907 . -60) (undo-tree-id908 . -65) (undo-tree-id909 . -4580) (undo-tree-id910 . -4584) (undo-tree-id911 . -4429) (undo-tree-id912 . -4433) (undo-tree-id913 . -3384) (undo-tree-id914 . -3388) (undo-tree-id915 . -2807) (undo-tree-id916 . -2811) (undo-tree-id917 . -2355) (undo-tree-id918 . -2359) (undo-tree-id919 . -1774) (undo-tree-id920 . -1778) (undo-tree-id921 . -1337) (undo-tree-id922 . -1341) (undo-tree-id923 . -926) (undo-tree-id924 . -930) (undo-tree-id925 . -514) (undo-tree-id926 . -518) (undo-tree-id927 . -5573) (undo-tree-id928 . -5579) (undo-tree-id929 . -5496) (undo-tree-id930 . -5502) (undo-tree-id931 . -4359) (undo-tree-id932 . -4364) (undo-tree-id933 . -4291) (undo-tree-id934 . -4296) (undo-tree-id935 . -4081) (undo-tree-id936 . -4085) (undo-tree-id937 . -3750) (undo-tree-id938 . -3754) (undo-tree-id939 . -3347) (undo-tree-id940 . -3352) (undo-tree-id941 . -3279) (undo-tree-id942 . -3284) (undo-tree-id943 . -2717) (undo-tree-id944 . -2722) (undo-tree-id945 . -2319) (undo-tree-id946 . -2324) (undo-tree-id947 . -1710) (undo-tree-id948 . -1715) (undo-tree-id949 . -1301) (undo-tree-id950 . -1306) (undo-tree-id951 . -889) (undo-tree-id952 . -894) (undo-tree-id953 . -821) (undo-tree-id954 . -826) (undo-tree-id955 . -477) (undo-tree-id956 . -482) (undo-tree-id957 . -409) (undo-tree-id958 . -414) (undo-tree-id959 . -4668) (undo-tree-id960 . -4670) (undo-tree-id961 . -60) (undo-tree-id962 . -65) (undo-tree-id963 . -54) (undo-tree-id964 . -58) (undo-tree-id965 . -47) (undo-tree-id966 . -52) (undo-tree-id967 . -39) (undo-tree-id968 . -45) (undo-tree-id969 . -32) (undo-tree-id970 . -37) (undo-tree-id971 . -4) (undo-tree-id972 . -10) (undo-tree-id973 . -12) (undo-tree-id974 . -18) (undo-tree-id975 . -4) (undo-tree-id976 . -4) (undo-tree-id977 . -520) (undo-tree-id978 . -526) (undo-tree-id979 . -932) (undo-tree-id980 . -938) (undo-tree-id981 . -1343) (undo-tree-id982 . -1349) (undo-tree-id983 . -1855) (undo-tree-id984 . -1861) (undo-tree-id985 . -1938) (undo-tree-id986 . -1944) (undo-tree-id987 . -4) (undo-tree-id988 . -4) (undo-tree-id989 . -4) (undo-tree-id990 . -4) (undo-tree-id991 . -4) (undo-tree-id992 . -4) (undo-tree-id993 . -4) (undo-tree-id994 . -4) (undo-tree-id995 . -4) 5) nil (23743 19856 143494 601000) 0 nil]) ((#("crate::" 0 5 (fontified t face font-lock-keyword-face) 5 7 (fontified t)) . 5) (undo-tree-id996 . -7) (undo-tree-id997 . -5) (undo-tree-id998 . -5)) nil (23743 19856 143508 372000) 0 nil]) ((#("d
" 0 1 (fontified t) 1 2 (fontified t)) . 1) (undo-tree-id999 . 1)) nil (23743 19856 143511 938000) 0 nil]) ((1 . 2) (#("m" 0 1 (fontified t)) . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (#("o" 0 1 (fontified t)) . -2) (undo-tree-id1002 . -1) (#("d" 0 1 (fontified t face font-lock-keyword-face)) . -3) (undo-tree-id1003 . -1) (#(" " 0 1 (fontified t)) . -4) (undo-tree-id1004 . -1) 5 (1 . 5) (1 . 2) 13 (t 23743 19724 34758 38000)) nil (23743 19856 143520 676000) 0 nil]) ((1 . 5954) (#("use crate::pubsub::PubSub;
use futures::stream::Stream;
use user::{Filter, Scope, User};
use warp::{path, Filter as WarpFilter};
use crate::{error, pubsub, query, user, utils};

pub fn run() {
    // GET /api/v1/streaming/user                                  [private; language filter]
    let user_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user));

    // GET /api/v1/streaming/user/notification                     [private; notification filter]
    let user_timeline_notifications = path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user.with_notification_filter()));

    // GET /api/v1/streaming/public                                [public; language filter]
    let public_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public?only_media=true                [public; language filter]
    let public_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/public/local                          [public; language filter]
    let local_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public:local\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
    let local_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .and(path::end())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:local:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public:local\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/direct                                [private; *no* filter]
    let direct_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"direct\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(format!(\"direct:{}\", user.id), user.with_no_filter()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
    let hashtag_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}\", q.tag), User::public()));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
    let hashtag_timeline_local = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\" / \"local\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}:local\", q.tag), User::public()));

    // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
    let list_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"list\")
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .and(warp::query())
        .and_then(|user: User, q: query::List| (user.is_authorized_for_list(q.list), Ok(user)))
        .untuple_one()
        .and(path::end())
        .map(|list: i64, user: User| PubSub::from(format!(\"list:{}\", list), user.with_no_filter()));

    let routes = or!(
        user_timeline,
        user_timeline_notifications,
        public_timeline_media,
        public_timeline,
        local_timeline_media,
        local_timeline,
        direct_timeline,
        hashtag_timeline,
        hashtag_timeline_local,
        list_timeline
    )
    .and_then(|event_stream| event_stream)
    .and(warp::sse())
    .map(|event_stream: pubsub::Receiver, sse: warp::sse::Sse| {
        let user = event_stream.user.clone();
        sse.reply(warp::sse::keep(
            event_stream.filter_map(move |item| {
                let payload = item[\"payload\"].clone();
                let event = item[\"event\"].to_string().clone();
                let toot_lang = item[\"language\"].to_string().clone();

                println!(\"ding\");

                match &user.filter {
                    Filter::Notification if event != \"notification\" => None,
                    Filter::Language if !user.langs.contains(&toot_lang) => None,
                    _ => Some((warp::sse::event(event), warp::sse::data(payload))),
                }
            }),
            None,
        ))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 11 (fontified t) 11 17 (fontified t face font-lock-constant-face) 17 19 (fontified t) 19 25 (fontified t face font-lock-type-face) 25 26 (fontified t) 26 27 (fontified t) 27 30 (fontified t face font-lock-keyword-face) 30 31 (fontified t) 31 38 (fontified t face font-lock-constant-face) 38 40 (fontified t) 40 46 (fontified t face font-lock-constant-face) 46 48 (fontified t) 48 54 (fontified t face font-lock-type-face) 54 55 (fontified t) 55 56 (fontified t) 56 59 (fontified t face font-lock-keyword-face) 59 60 (fontified t) 60 64 (fontified t face font-lock-constant-face) 64 67 (fontified t) 67 73 (fontified t face font-lock-type-face) 73 75 (fontified t) 75 80 (fontified t face font-lock-type-face) 80 82 (fontified t) 82 86 (fontified t face font-lock-type-face) 86 89 (fontified t) 89 92 (fontified t face font-lock-keyword-face) 92 93 (fontified t) 93 97 (fontified t face font-lock-constant-face) 97 106 (fontified t) 106 112 (fontified t face font-lock-type-face) 112 113 (fontified t) 113 115 (fontified t face font-lock-keyword-face) 115 116 (fontified t) 116 126 (fontified t face font-lock-type-face) 126 129 (fontified t) 129 132 (fontified t face font-lock-keyword-face) 132 133 (fontified t) 133 138 (fontified t face font-lock-keyword-face) 138 140 (fontified t) 140 177 (fontified t) 177 178 (fontified t) 178 181 (fontified t face font-lock-keyword-face) 181 182 (fontified t) 182 184 (fontified t face font-lock-keyword-face) 184 185 (fontified t) 185 188 (fontified t face font-lock-function-name-face) 188 197 (fontified t) 197 200 (fontified t face font-lock-comment-delimiter-face) 200 287 (fontified t face font-lock-comment-face) 287 291 (fontified t) 291 294 (fontified t face font-lock-keyword-face) 294 295 (fontified t) 295 308 (fontified t face font-lock-variable-name-face) 308 311 (fontified t) 311 316 (fontified t face font-lock-preprocessor-face) 316 317 (fontified t) 317 322 (fontified t face font-lock-string-face) 322 325 (fontified t) 325 329 (fontified t face font-lock-string-face) 329 332 (fontified t) 332 343 (fontified t face font-lock-string-face) 343 346 (fontified t) 346 350 (fontified t face font-lock-string-face) 350 351 (syntax-table #1# fontified t face font-lock-string-face) 351 352 (fontified t face font-lock-string-face) 352 367 (fontified t) 367 371 (fontified t face font-lock-constant-face) 371 393 (fontified t) 393 397 (fontified t face font-lock-constant-face) 397 416 (fontified t) 416 421 (fontified t face font-lock-type-face) 421 423 (fontified t) 423 430 (fontified t face font-lock-type-face) 430 459 (fontified t) 459 463 (fontified t face font-lock-constant-face) 463 484 (fontified t) 484 489 (fontified t face font-lock-type-face) 489 491 (fontified t) 491 498 (fontified t face font-lock-type-face) 498 515 (fontified t) 515 519 (fontified t face font-lock-variable-name-face) 519 521 (fontified t) 521 525 (fontified t face font-lock-type-face) 525 527 (fontified t) 527 533 (fontified t face font-lock-type-face) 533 534 (fontified t) 534 562 (fontified t) 562 569 (fontified t) 569 574 (fontified t) 574 577 (fontified t face font-lock-comment-delimiter-face) 577 668 (fontified t face font-lock-comment-face) 668 672 (fontified t) 672 675 (fontified t face font-lock-keyword-face) 675 676 (fontified t) 676 677 (fontified t face font-lock-variable-name-face) 677 703 (face font-lock-variable-name-face fontified t) 703 706 (fontified t) 706 711 (face font-lock-preprocessor-face fontified t) 711 712 (fontified t) 712 717 (face font-lock-string-face fontified t) 717 720 (fontified t) 720 724 (face font-lock-string-face fontified t) 724 727 (fontified t) 727 738 (face font-lock-string-face fontified t) 738 741 (fontified t) 741 745 (face font-lock-string-face fontified t) 745 746 (syntax-table #1# face font-lock-string-face fontified t) 746 747 (face font-lock-string-face fontified t) 747 750 (fontified t) 750 764 (face font-lock-string-face fontified t) 764 766 (fontified t) 766 779 (fontified t) 779 783 (fontified t face font-lock-constant-face) 783 805 (fontified t) 805 809 (fontified t face font-lock-constant-face) 809 828 (fontified t) 828 833 (fontified t face font-lock-type-face) 833 835 (fontified t) 835 842 (fontified t face font-lock-type-face) 842 871 (fontified t) 871 875 (fontified t face font-lock-constant-face) 875 896 (fontified t) 896 901 (fontified t face font-lock-type-face) 901 903 (fontified t) 903 910 (fontified t face font-lock-type-face) 910 927 (fontified t) 927 931 (fontified t face font-lock-variable-name-face) 931 933 (fontified t) 933 937 (fontified t face font-lock-type-face) 937 939 (fontified t) 939 945 (fontified t face font-lock-type-face) 945 1013 (fontified t) 1013 1016 (fontified t face font-lock-comment-delimiter-face) 1016 1069 (fontified t face font-lock-comment-face) 1069 1102 (fontified t face font-lock-comment-face) 1102 1106 (fontified t) 1106 1109 (fontified t face font-lock-keyword-face) 1109 1110 (fontified t) 1110 1125 (fontified t face font-lock-variable-name-face) 1125 1128 (fontified t) 1128 1133 (fontified t face font-lock-preprocessor-face) 1133 1134 (fontified t) 1134 1139 (fontified t face font-lock-string-face) 1139 1142 (fontified t) 1142 1146 (fontified t face font-lock-string-face) 1146 1149 (fontified t) 1149 1160 (fontified t face font-lock-string-face) 1160 1163 (fontified t) 1163 1171 (fontified t face font-lock-string-face) 1171 1186 (fontified t) 1186 1190 (fontified t face font-lock-constant-face) 1190 1212 (fontified t) 1212 1216 (fontified t face font-lock-constant-face) 1216 1235 (fontified t) 1235 1239 (fontified t face font-lock-constant-face) 1239 1241 (fontified t) 1241 1246 (fontified t face font-lock-type-face) 1246 1248 (fontified t) 1248 1254 (fontified t face font-lock-type-face) 1254 1266 (fontified t) 1266 1283 (fontified t) 1283 1287 (face font-lock-constant-face fontified t) 1287 1308 (fontified t) 1308 1313 (face font-lock-type-face fontified t) 1313 1315 (fontified t) 1315 1321 (face font-lock-type-face fontified t) 1321 1324 (fontified t) 1324 1338 (fontified t) 1338 1342 (fontified t face font-lock-variable-name-face) 1342 1344 (fontified t) 1344 1348 (fontified t face font-lock-type-face) 1348 1350 (fontified t) 1350 1356 (fontified t face font-lock-type-face) 1356 1363 (fontified t) 1363 1371 (fontified t face font-lock-string-face) 1371 1416 (fontified t) 1416 1419 (fontified t face font-lock-comment-delimiter-face) 1419 1505 (fontified t face font-lock-comment-face) 1505 1509 (fontified t) 1509 1512 (fontified t face font-lock-keyword-face) 1512 1513 (fontified t) 1513 1534 (fontified t face font-lock-variable-name-face) 1534 1537 (fontified t) 1537 1542 (fontified t face font-lock-preprocessor-face) 1542 1543 (fontified t) 1543 1548 (fontified t face font-lock-string-face) 1548 1551 (fontified t) 1551 1555 (fontified t face font-lock-string-face) 1555 1558 (fontified t) 1558 1569 (fontified t face font-lock-string-face) 1569 1572 (fontified t) 1572 1580 (fontified t face font-lock-string-face) 1580 1595 (fontified t) 1595 1599 (fontified t face font-lock-constant-face) 1599 1602 (fontified t) 1602 1608 (fontified t) 1608 1621 (fontified t) 1621 1625 (fontified t face font-lock-constant-face) 1625 1644 (fontified t) 1644 1648 (fontified t face font-lock-constant-face) 1648 1650 (fontified t) 1650 1655 (fontified t face font-lock-type-face) 1655 1657 (fontified t) 1657 1663 (fontified t face font-lock-type-face) 1663 1692 (fontified t) 1692 1696 (fontified t face font-lock-constant-face) 1696 1717 (fontified t) 1717 1722 (fontified t face font-lock-type-face) 1722 1724 (fontified t) 1724 1730 (fontified t face font-lock-type-face) 1730 1746 (fontified t) 1746 1750 (fontified t face font-lock-constant-face) 1750 1775 (fontified t) 1775 1779 (fontified t face font-lock-variable-name-face) 1779 1781 (fontified t) 1781 1785 (fontified t face font-lock-type-face) 1785 1787 (fontified t) 1787 1788 (fontified t face font-lock-variable-name-face) 1788 1790 (fontified t) 1790 1795 (fontified t face font-lock-constant-face) 1795 1797 (fontified t) 1797 1802 (fontified t face font-lock-type-face) 1802 1804 (fontified t) 1804 1809 (fontified t face font-lock-keyword-face) 1809 1824 (fontified t) 1824 1834 (fontified t) 1834 1846 (fontified t) 1846 1849 (fontified t face font-lock-string-face) 1849 1852 (fontified t) 1852 1858 (fontified t face font-lock-string-face) 1858 1860 (fontified t) 1860 1861 (syntax-table #2# fontified t) 1861 1862 (fontified t) 1862 1868 (fontified t face font-lock-type-face) 1868 1875 (fontified t) 1875 1889 (fontified t face font-lock-string-face) 1889 1943 (fontified t) 1943 1944 (syntax-table #2# fontified t) 1944 1945 (fontified t) 1945 1951 (fontified t face font-lock-type-face) 1951 1958 (fontified t) 1958 1966 (fontified t face font-lock-string-face) 1966 2022 (fontified t) 2022 2025 (fontified t face font-lock-comment-delimiter-face) 2025 2108 (fontified t face font-lock-comment-face) 2108 2111 (fontified t face font-lock-comment-face) 2111 2115 (fontified t) 2115 2118 (fontified t face font-lock-keyword-face) 2118 2119 (fontified t) 2119 2133 (fontified t face font-lock-variable-name-face) 2133 2136 (fontified t) 2136 2141 (fontified t face font-lock-preprocessor-face) 2141 2142 (fontified t) 2142 2147 (fontified t face font-lock-string-face) 2147 2150 (fontified t) 2150 2154 (fontified t face font-lock-string-face) 2154 2157 (fontified t) 2157 2168 (fontified t face font-lock-string-face) 2168 2171 (fontified t) 2171 2179 (fontified t face font-lock-string-face) 2179 2182 (fontified t) 2182 2189 (fontified t face font-lock-string-face) 2189 2204 (fontified t) 2204 2208 (fontified t face font-lock-constant-face) 2208 2230 (fontified t) 2230 2234 (fontified t face font-lock-constant-face) 2234 2253 (fontified t) 2253 2257 (fontified t face font-lock-constant-face) 2257 2259 (fontified t) 2259 2264 (fontified t face font-lock-type-face) 2264 2266 (fontified t) 2266 2272 (fontified t face font-lock-type-face) 2272 2301 (fontified t) 2301 2305 (fontified t face font-lock-constant-face) 2305 2326 (fontified t) 2326 2331 (fontified t face font-lock-type-face) 2331 2333 (fontified t) 2333 2334 (fontified t face font-lock-type-face) 2334 2339 (face font-lock-type-face fontified t) 2339 2342 (fontified t) 2893 2894 (syntax-table #2#) 2982 2983 (syntax-table #2#) 5552 5553 (syntax-table #2#) 5634 5635 (syntax-table #2#) 5665 5666 (syntax-table #2#)) . 1) (undo-tree-id551 . 5813) (undo-tree-id552 . -11) (undo-tree-id553 . -17) (undo-tree-id554 . -60) (undo-tree-id555 . -64) (undo-tree-id556 . -141) (undo-tree-id557 . -146) (undo-tree-id558 . -148) (undo-tree-id559 . -154) (undo-tree-id560 . -156) (undo-tree-id561 . -161) (undo-tree-id562 . -163) (undo-tree-id563 . -167) (undo-tree-id564 . -169) (undo-tree-id565 . -174) (undo-tree-id566 . -4675) (undo-tree-id567 . -4677) (undo-tree-id568 . -169) (undo-tree-id569 . -174) (undo-tree-id570 . -31) (undo-tree-id571 . -54) (undo-tree-id572 . -60) (undo-tree-id573 . -64) (undo-tree-id574 . -4675) (undo-tree-id575 . -4677) (undo-tree-id576 . -11) (undo-tree-id577 . -10) (undo-tree-id578 . -12) (undo-tree-id579 . -11) (undo-tree-id580 . -11) (undo-tree-id581 . -12) (undo-tree-id582 . -11) (undo-tree-id583 . -17) (undo-tree-id584 . -60) (undo-tree-id585 . -64) (undo-tree-id586 . -141) (undo-tree-id587 . -146) (undo-tree-id588 . -148) (undo-tree-id589 . -154) (undo-tree-id590 . -156) (undo-tree-id591 . -161) (undo-tree-id592 . -163) (undo-tree-id593 . -167) (undo-tree-id594 . -169) (undo-tree-id595 . -174) (undo-tree-id596 . -4675) (undo-tree-id597 . -4677) (undo-tree-id598 . -169) (undo-tree-id599 . -174) (undo-tree-id600 . -31) (undo-tree-id601 . -54) (undo-tree-id602 . -60) (undo-tree-id603 . -64) (undo-tree-id604 . -4675) (undo-tree-id605 . -4677) (undo-tree-id606 . -11) (undo-tree-id607 . -17) (undo-tree-id608 . -60) (undo-tree-id609 . -64) (undo-tree-id610 . -141) (undo-tree-id611 . -146) (undo-tree-id612 . -148) (undo-tree-id613 . -154) (undo-tree-id614 . -156) (undo-tree-id615 . -161) (undo-tree-id616 . -163) (undo-tree-id617 . -167) (undo-tree-id618 . -169) (undo-tree-id619 . -174) (undo-tree-id620 . -4675) (undo-tree-id621 . -4677) (undo-tree-id622 . -169) (undo-tree-id623 . -174) (undo-tree-id624 . -31) (undo-tree-id625 . -54) (undo-tree-id626 . -60) (undo-tree-id627 . -64) (undo-tree-id628 . -4675) (undo-tree-id629 . -4677) (undo-tree-id630 . -11) (undo-tree-id631 . -17) (undo-tree-id632 . -60) (undo-tree-id633 . -64) (undo-tree-id634 . -141) (undo-tree-id635 . -146) (undo-tree-id636 . -148) (undo-tree-id637 . -154) (undo-tree-id638 . -156) (undo-tree-id639 . -161) (undo-tree-id640 . -163) (undo-tree-id641 . -167) (undo-tree-id642 . -169) (undo-tree-id643 . -174) (undo-tree-id644 . -4675) (undo-tree-id645 . -4677) (undo-tree-id646 . -169) (undo-tree-id647 . -174) (undo-tree-id648 . -31) (undo-tree-id649 . -54) (undo-tree-id650 . -11) (undo-tree-id651 . -17) (undo-tree-id652 . -60) (undo-tree-id653 . -64) (undo-tree-id654 . -141) (undo-tree-id655 . -146) (undo-tree-id656 . -148) (undo-tree-id657 . -154) (undo-tree-id658 . -156) (undo-tree-id659 . -161) (undo-tree-id660 . -163) (undo-tree-id661 . -167) (undo-tree-id662 . -169) (undo-tree-id663 . -174) (undo-tree-id664 . -4675) (undo-tree-id665 . -4677) (undo-tree-id666 . -169) (undo-tree-id667 . -174) (undo-tree-id668 . -31) (undo-tree-id669 . -54) (undo-tree-id670 . -60) (undo-tree-id671 . -64) (undo-tree-id672 . -4675) (undo-tree-id673 . -4677) (undo-tree-id674 . -11) (undo-tree-id675 . -17) (undo-tree-id676 . -60) (undo-tree-id677 . -64) (undo-tree-id678 . -141) (undo-tree-id679 . -146) (undo-tree-id680 . -148) (undo-tree-id681 . -154) (undo-tree-id682 . -156) (undo-tree-id683 . -161) (undo-tree-id684 . -163) (undo-tree-id685 . -167) (undo-tree-id686 . -169) (undo-tree-id687 . -174) (undo-tree-id688 . -4675) (undo-tree-id689 . -4677) (undo-tree-id690 . -169) (undo-tree-id691 . -174) (undo-tree-id692 . -31) (undo-tree-id693 . -54) (undo-tree-id694 . -11) (undo-tree-id695 . -17) (undo-tree-id696 . -60) (undo-tree-id697 . -64) (undo-tree-id698 . -141) (undo-tree-id699 . -146) (undo-tree-id700 . -148) (undo-tree-id701 . -154) (undo-tree-id702 . -156) (undo-tree-id703 . -161) (undo-tree-id704 . -163) (undo-tree-id705 . -167) (undo-tree-id706 . -169) (undo-tree-id707 . -174) (undo-tree-id708 . -4675) (undo-tree-id709 . -4677) (undo-tree-id710 . -169) (undo-tree-id711 . -174) (undo-tree-id712 . -31) (undo-tree-id713 . -54) (undo-tree-id714 . -60) (undo-tree-id715 . -64) (undo-tree-id716 . -4675) (undo-tree-id717 . -4677) (undo-tree-id718 . -11) (undo-tree-id719 . -17) (undo-tree-id720 . -60) (undo-tree-id721 . -64) (undo-tree-id722 . -141) (undo-tree-id723 . -146) (undo-tree-id724 . -148) (undo-tree-id725 . -154) (undo-tree-id726 . -156) (undo-tree-id727 . -161) (undo-tree-id728 . -163) (undo-tree-id729 . -167) (undo-tree-id730 . -169) (undo-tree-id731 . -174) (undo-tree-id732 . -4675) (undo-tree-id733 . -4677) (undo-tree-id734 . -169) (undo-tree-id735 . -174) (undo-tree-id736 . -31) (undo-tree-id737 . -54) (undo-tree-id738 . -60) (undo-tree-id739 . -64) (undo-tree-id740 . -4675) (undo-tree-id741 . -4677) (undo-tree-id742 . -12) (undo-tree-id743 . -12) (undo-tree-id744 . -11) (undo-tree-id745 . -12) (undo-tree-id746 . -12) (undo-tree-id747 . -11) (undo-tree-id748 . -17) (undo-tree-id749 . -60) (undo-tree-id750 . -64) (undo-tree-id751 . -141) (undo-tree-id752 . -146) (undo-tree-id753 . -148) (undo-tree-id754 . -154) (undo-tree-id755 . -156) (undo-tree-id756 . -161) (undo-tree-id757 . -163) (undo-tree-id758 . -167) (undo-tree-id759 . -169) (undo-tree-id760 . -174) (undo-tree-id761 . -4675) (undo-tree-id762 . -4677) (undo-tree-id763 . -169) (undo-tree-id764 . -174) (undo-tree-id765 . -31) (undo-tree-id766 . -54) (undo-tree-id767 . -60) (undo-tree-id768 . -64) (undo-tree-id769 . -4675) (undo-tree-id770 . -4677) (undo-tree-id771 . -11) (undo-tree-id772 . -17) (undo-tree-id773 . -60) (undo-tree-id774 . -64) (undo-tree-id775 . -141) (undo-tree-id776 . -146) (undo-tree-id777 . -148) (undo-tree-id778 . -154) (undo-tree-id779 . -156) (undo-tree-id780 . -161) (undo-tree-id781 . -163) (undo-tree-id782 . -167) (undo-tree-id783 . -169) (undo-tree-id784 . -174) (undo-tree-id785 . -4675) (undo-tree-id786 . -4677) (undo-tree-id787 . -169) (undo-tree-id788 . -174) (undo-tree-id789 . -31) (undo-tree-id790 . -54) (undo-tree-id791 . -60) (undo-tree-id792 . -64) (undo-tree-id793 . -4675) (undo-tree-id794 . -4677) (undo-tree-id795 . -11) (undo-tree-id796 . -17) (undo-tree-id797 . -60) (undo-tree-id798 . -64) (undo-tree-id799 . -141) (undo-tree-id800 . -146) (undo-tree-id801 . -148) (undo-tree-id802 . -154) (undo-tree-id803 . -156) (undo-tree-id804 . -161) (undo-tree-id805 . -163) (undo-tree-id806 . -167) (undo-tree-id807 . -169) (undo-tree-id808 . -174) (undo-tree-id809 . -4675) (undo-tree-id810 . -4677) (undo-tree-id811 . -169) (undo-tree-id812 . -174) (undo-tree-id813 . -31) (undo-tree-id814 . -54) (undo-tree-id815 . -11) (undo-tree-id816 . -17) (undo-tree-id817 . -60) (undo-tree-id818 . -64) (undo-tree-id819 . -141) (undo-tree-id820 . -146) (undo-tree-id821 . -148) (undo-tree-id822 . -154) (undo-tree-id823 . -156) (undo-tree-id824 . -161) (undo-tree-id825 . -163) (undo-tree-id826 . -167) (undo-tree-id827 . -169) (undo-tree-id828 . -174) (undo-tree-id829 . -4675) (undo-tree-id830 . -4677) (undo-tree-id831 . -169) (undo-tree-id832 . -174) (undo-tree-id833 . -31) (undo-tree-id834 . -54) (undo-tree-id835 . -60) (undo-tree-id836 . -64) (undo-tree-id837 . -4675) (undo-tree-id838 . -4677) (undo-tree-id839 . -4675) (undo-tree-id840 . -4677) (undo-tree-id841 . -60) (undo-tree-id842 . -64) (undo-tree-id843 . -31) (undo-tree-id844 . -38) (undo-tree-id845 . -169) (undo-tree-id846 . -174) (undo-tree-id847 . -4675) (undo-tree-id848 . -4677) (undo-tree-id849 . -169) (undo-tree-id850 . -174) (undo-tree-id851 . -163) (undo-tree-id852 . -167) (undo-tree-id853 . -156) (undo-tree-id854 . -161) (undo-tree-id855 . -148) (undo-tree-id856 . -154) (undo-tree-id857 . -141) (undo-tree-id858 . -146) (undo-tree-id859 . -60) (undo-tree-id860 . -64) (undo-tree-id861 . -11) (undo-tree-id862 . -17) (undo-tree-id863 . -11) (undo-tree-id864 . -17) (undo-tree-id865 . -60) (undo-tree-id866 . -64) (undo-tree-id867 . -141) (undo-tree-id868 . -146) (undo-tree-id869 . -148) (undo-tree-id870 . -154) (undo-tree-id871 . -156) (undo-tree-id872 . -161) (undo-tree-id873 . -163) (undo-tree-id874 . -167) (undo-tree-id875 . -169) (undo-tree-id876 . -174) (undo-tree-id877 . -4675) (undo-tree-id878 . -4677) (undo-tree-id879 . -169) (undo-tree-id880 . -174) (undo-tree-id881 . -31) (undo-tree-id882 . -54) (undo-tree-id883 . -60) (undo-tree-id884 . -64) (undo-tree-id885 . -4675) (undo-tree-id886 . -4677) (undo-tree-id887 . -11) (undo-tree-id888 . -12) (undo-tree-id889 . -38) (undo-tree-id890 . -11) (undo-tree-id891 . -38) (undo-tree-id892 . -38) (undo-tree-id893 . -139) (undo-tree-id894 . -139) (undo-tree-id895 . -139) 140) nil (23743 19724 22753 902000) 0 nil]) ((134 . 141) (t 23743 19612 715459 402000)) nil (23743 19724 22777 859000) 0 nil]) ((1 . 5947) (#("use futures::stream::Stream;
use crate::pubsub::PubSub;
use user::{Filter, Scope, User};
use warp::{path, Filter as WarpFilter};
use {error, pubsub, query, user, utils};

pub fn run() {
    // GET /api/v1/streaming/user                                  [private; language filter]
    let user_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user));

    // GET /api/v1/streaming/user/notification                     [private; notification filter]
    let user_timeline_notifications = path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user.with_notification_filter()));

    // GET /api/v1/streaming/public                                [public; language filter]
    let public_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public?only_media=true                [public; language filter]
    let public_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/public/local                          [public; language filter]
    let local_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public:local\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
    let local_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .and(path::end())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:local:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public:local\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/direct                                [private; *no* filter]
    let direct_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"direct\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(format!(\"direct:{}\", user.id), user.with_no_filter()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
    let hashtag_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}\", q.tag), User::public()));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
    let hashtag_timeline_local = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\" / \"local\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}:local\", q.tag), User::public()));

    // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
    let list_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"list\")
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .and(warp::query())
        .and_then(|user: User, q: query::List| (user.is_authorized_for_list(q.list), Ok(user)))
        .untuple_one()
        .and(path::end())
        .map(|list: i64, user: User| PubSub::from(format!(\"list:{}\", list), user.with_no_filter()));

    let routes = or!(
        user_timeline,
        user_timeline_notifications,
        public_timeline_media,
        public_timeline,
        local_timeline_media,
        local_timeline,
        direct_timeline,
        hashtag_timeline,
        hashtag_timeline_local,
        list_timeline
    )
    .and_then(|event_stream| event_stream)
    .and(warp::sse())
    .map(|event_stream: pubsub::Receiver, sse: warp::sse::Sse| {
        let user = event_stream.user.clone();
        sse.reply(warp::sse::keep(
            event_stream.filter_map(move |item| {
                let payload = item[\"payload\"].clone();
                let event = item[\"event\"].to_string().clone();
                let toot_lang = item[\"language\"].to_string().clone();

                println!(\"ding\");

                match &user.filter {
                    Filter::Notification if event != \"notification\" => None,
                    Filter::Language if !user.langs.contains(&toot_lang) => None,
                    _ => Some((warp::sse::event(event), warp::sse::data(payload))),
                }
            }),
            None,
        ))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 13 (fontified t) 13 19 (fontified t face font-lock-constant-face) 19 21 (fontified t) 21 27 (fontified t face font-lock-type-face) 27 28 (fontified t) 28 29 (fontified t) 29 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 38 (fontified t face font-lock-keyword-face) 38 40 (fontified t) 40 46 (fontified t face font-lock-constant-face) 46 48 (fontified t) 48 54 (fontified t face font-lock-type-face) 54 56 (fontified t) 56 59 (fontified t face font-lock-keyword-face) 59 60 (fontified t) 60 64 (fontified t face font-lock-constant-face) 64 67 (fontified t) 67 73 (fontified t face font-lock-type-face) 73 75 (fontified t) 75 80 (fontified t face font-lock-type-face) 80 82 (fontified t) 82 86 (fontified t face font-lock-type-face) 86 89 (fontified t) 89 92 (fontified t face font-lock-keyword-face) 92 93 (fontified t) 93 97 (fontified t face font-lock-constant-face) 97 106 (fontified t) 106 112 (fontified t face font-lock-type-face) 112 113 (fontified t) 113 115 (fontified t face font-lock-keyword-face) 115 116 (fontified t) 116 126 (fontified t face font-lock-type-face) 126 129 (fontified t) 129 132 (fontified t face font-lock-keyword-face) 132 171 (fontified t) 171 174 (fontified t face font-lock-keyword-face) 174 175 (fontified t) 175 177 (fontified t face font-lock-keyword-face) 177 178 (fontified t) 178 181 (fontified t face font-lock-function-name-face) 181 190 (fontified t) 190 193 (fontified t face font-lock-comment-delimiter-face) 193 280 (fontified t face font-lock-comment-face) 280 284 (fontified t) 284 287 (fontified t face font-lock-keyword-face) 287 288 (fontified t) 288 301 (fontified t face font-lock-variable-name-face) 301 304 (fontified t) 304 309 (fontified t face font-lock-preprocessor-face) 309 310 (fontified t) 310 315 (fontified t face font-lock-string-face) 315 318 (fontified t) 318 322 (fontified t face font-lock-string-face) 322 325 (fontified t) 325 336 (fontified t face font-lock-string-face) 336 339 (fontified t) 339 343 (fontified t face font-lock-string-face) 343 344 (syntax-table #1# fontified t face font-lock-string-face) 344 345 (fontified t face font-lock-string-face) 345 360 (fontified t) 360 364 (fontified t face font-lock-constant-face) 364 386 (fontified t) 386 390 (fontified t face font-lock-constant-face) 390 409 (fontified t) 409 414 (fontified t face font-lock-type-face) 414 416 (fontified t) 416 423 (fontified t face font-lock-type-face) 423 452 (fontified t) 452 456 (fontified t face font-lock-constant-face) 456 477 (fontified t) 477 482 (fontified t face font-lock-type-face) 482 484 (fontified t) 484 491 (fontified t face font-lock-type-face) 491 508 (fontified t) 508 512 (fontified t face font-lock-variable-name-face) 512 514 (fontified t) 514 518 (fontified t face font-lock-type-face) 518 520 (fontified t) 520 526 (fontified t face font-lock-type-face) 526 535 (fontified t) 535 556 (fontified t) 556 562 (fontified t) 562 567 (fontified t) 567 570 (fontified t face font-lock-comment-delimiter-face) 570 661 (fontified t face font-lock-comment-face) 661 665 (fontified t) 665 668 (fontified t face font-lock-keyword-face) 668 669 (fontified t) 669 696 (fontified t face font-lock-variable-name-face) 696 699 (fontified t) 699 704 (fontified t face font-lock-preprocessor-face) 704 705 (fontified t) 705 710 (fontified t face font-lock-string-face) 710 713 (fontified t) 713 717 (fontified t face font-lock-string-face) 717 720 (fontified t) 720 731 (fontified t face font-lock-string-face) 731 734 (fontified t) 734 738 (fontified t face font-lock-string-face) 738 739 (fontified t syntax-table #1# face font-lock-string-face) 739 740 (fontified t face font-lock-string-face) 740 743 (fontified t) 743 757 (fontified t face font-lock-string-face) 757 772 (fontified t) 772 776 (fontified t face font-lock-constant-face) 776 798 (fontified t) 798 802 (fontified t face font-lock-constant-face) 802 821 (fontified t) 821 826 (fontified t face font-lock-type-face) 826 828 (fontified t) 828 835 (fontified t face font-lock-type-face) 835 864 (fontified t) 864 868 (fontified t face font-lock-constant-face) 868 889 (fontified t) 889 894 (fontified t face font-lock-type-face) 894 896 (fontified t) 896 903 (fontified t face font-lock-type-face) 903 920 (fontified t) 920 924 (fontified t face font-lock-variable-name-face) 924 926 (fontified t) 926 930 (fontified t face font-lock-type-face) 930 932 (fontified t) 932 938 (fontified t face font-lock-type-face) 938 1006 (fontified t) 1006 1009 (fontified t face font-lock-comment-delimiter-face) 1009 1062 (fontified t face font-lock-comment-face) 1062 1095 (face font-lock-comment-face fontified t) 1095 1099 (fontified t) 1099 1102 (fontified t face font-lock-keyword-face) 1102 1103 (fontified t) 1103 1118 (fontified t face font-lock-variable-name-face) 1118 1121 (fontified t) 1121 1126 (fontified t face font-lock-preprocessor-face) 1126 1127 (fontified t) 1127 1132 (fontified t face font-lock-string-face) 1132 1135 (fontified t) 1135 1139 (fontified t face font-lock-string-face) 1139 1142 (fontified t) 1142 1153 (fontified t face font-lock-string-face) 1153 1156 (fontified t) 1156 1164 (fontified t face font-lock-string-face) 1164 1179 (fontified t) 1179 1183 (fontified t face font-lock-constant-face) 1183 1205 (fontified t) 1205 1209 (fontified t face font-lock-constant-face) 1209 1228 (fontified t) 1228 1232 (fontified t face font-lock-constant-face) 1232 1234 (fontified t) 1234 1239 (fontified t face font-lock-type-face) 1239 1241 (fontified t) 1241 1247 (fontified t face font-lock-type-face) 1247 1276 (fontified t) 1276 1280 (fontified t face font-lock-constant-face) 1280 1301 (fontified t) 1301 1306 (fontified t face font-lock-type-face) 1306 1308 (fontified t) 1308 1314 (fontified t face font-lock-type-face) 1314 1331 (fontified t) 1331 1335 (fontified t face font-lock-variable-name-face) 1335 1337 (fontified t) 1337 1341 (fontified t face font-lock-type-face) 1341 1343 (fontified t) 1343 1349 (fontified t face font-lock-type-face) 1349 1356 (fontified t) 1356 1364 (fontified t face font-lock-string-face) 1364 1409 (fontified t) 1409 1412 (fontified t face font-lock-comment-delimiter-face) 1412 1498 (fontified t face font-lock-comment-face) 1498 1502 (fontified t) 1502 1505 (fontified t face font-lock-keyword-face) 1505 1506 (fontified t) 1506 1527 (fontified t face font-lock-variable-name-face) 1527 1530 (fontified t) 1530 1535 (fontified t face font-lock-preprocessor-face) 1535 1536 (fontified t) 1536 1541 (fontified t face font-lock-string-face) 1541 1544 (fontified t) 1544 1548 (fontified t face font-lock-string-face) 1548 1551 (fontified t) 1551 1562 (fontified t face font-lock-string-face) 1562 1565 (fontified t) 1565 1573 (fontified t face font-lock-string-face) 1573 1588 (fontified t) 1588 1592 (fontified t face font-lock-constant-face) 1592 1595 (fontified t) 1595 1601 (fontified t) 1601 1614 (fontified t) 1614 1618 (fontified t face font-lock-constant-face) 1618 1637 (fontified t) 1637 1641 (fontified t face font-lock-constant-face) 1641 1643 (fontified t) 1643 1648 (fontified t face font-lock-type-face) 1648 1650 (fontified t) 1650 1656 (fontified t face font-lock-type-face) 1656 1685 (fontified t) 1685 1689 (fontified t face font-lock-constant-face) 1689 1710 (fontified t) 1710 1715 (fontified t face font-lock-type-face) 1715 1717 (fontified t) 1717 1723 (fontified t face font-lock-type-face) 1723 1739 (fontified t) 1739 1743 (fontified t face font-lock-constant-face) 1743 1768 (fontified t) 1768 1772 (fontified t face font-lock-variable-name-face) 1772 1774 (fontified t) 1774 1778 (fontified t face font-lock-type-face) 1778 1780 (fontified t) 1780 1781 (fontified t face font-lock-variable-name-face) 1781 1783 (fontified t) 1783 1788 (fontified t face font-lock-constant-face) 1788 1790 (fontified t) 1790 1795 (fontified t face font-lock-type-face) 1795 1797 (fontified t) 1797 1802 (fontified t face font-lock-keyword-face) 1802 1839 (fontified t) 1839 1842 (fontified t face font-lock-string-face) 1842 1845 (fontified t) 1845 1851 (fontified t face font-lock-string-face) 1851 1853 (fontified t) 1853 1854 (fontified t syntax-table #2#) 1854 1855 (fontified t) 1855 1861 (fontified t face font-lock-type-face) 1861 1868 (fontified t) 1868 1882 (fontified t face font-lock-string-face) 1882 1936 (fontified t) 1936 1937 (fontified t syntax-table #2#) 1937 1938 (fontified t) 1938 1944 (fontified t face font-lock-type-face) 1944 1951 (fontified t) 1951 1959 (fontified t face font-lock-string-face) 1959 2015 (fontified t) 2015 2018 (fontified t face font-lock-comment-delimiter-face) 2018 2101 (fontified t face font-lock-comment-face) 2101 2104 (face font-lock-comment-face fontified t) 2886 2887 (syntax-table #2#) 2975 2976 (syntax-table #2#) 5545 5546 (syntax-table #2#) 5627 5628 (syntax-table #2#) 5658 5659 (syntax-table #2#)) . 1) (undo-tree-id259 . -12) (undo-tree-id260 . -17) (undo-tree-id261 . -19) (undo-tree-id262 . -25) (undo-tree-id263 . -27) (undo-tree-id264 . -32) (undo-tree-id265 . -41) (undo-tree-id266 . -45) (undo-tree-id267 . -47) (undo-tree-id268 . -52) (undo-tree-id269 . -4668) (undo-tree-id270 . -4670) (undo-tree-id271 . -409) (undo-tree-id272 . -414) (undo-tree-id273 . -477) (undo-tree-id274 . -482) (undo-tree-id275 . -520) (undo-tree-id276 . -526) (undo-tree-id277 . -821) (undo-tree-id278 . -826) (undo-tree-id279 . -889) (undo-tree-id280 . -894) (undo-tree-id281 . -932) (undo-tree-id282 . -938) (undo-tree-id283 . -1301) (undo-tree-id284 . -1306) (undo-tree-id285 . -1343) (undo-tree-id286 . -1349) (undo-tree-id287 . -1710) (undo-tree-id288 . -1715) (undo-tree-id289 . -1855) (undo-tree-id290 . -1861) (undo-tree-id291 . -1938) (undo-tree-id292 . -1944) (undo-tree-id293 . -2319) (undo-tree-id294 . -2324) (undo-tree-id295 . -2361) (undo-tree-id296 . -2367) (undo-tree-id297 . -2717) (undo-tree-id298 . -2722) (undo-tree-id299 . -2888) (undo-tree-id300 . -2894) (undo-tree-id301 . -2977) (undo-tree-id302 . -2983) (undo-tree-id303 . -3279) (undo-tree-id304 . -3284) (undo-tree-id305 . -3347) (undo-tree-id306 . -3352) (undo-tree-id307 . -3390) (undo-tree-id308 . -3396) (undo-tree-id309 . -3707) (undo-tree-id310 . -3713) (undo-tree-id311 . -3750) (undo-tree-id312 . -3754) (undo-tree-id313 . -4032) (undo-tree-id314 . -4038) (undo-tree-id315 . -4081) (undo-tree-id316 . -4085) (undo-tree-id317 . -4291) (undo-tree-id318 . -4296) (undo-tree-id319 . -4359) (undo-tree-id320 . -4364) (undo-tree-id321 . -4586) (undo-tree-id322 . -4592) (undo-tree-id323 . -5496) (undo-tree-id324 . -5502) (undo-tree-id325 . -5573) (undo-tree-id326 . -5579) (undo-tree-id327 . -514) (undo-tree-id328 . -518) (undo-tree-id329 . -926) (undo-tree-id330 . -930) (undo-tree-id331 . -1337) (undo-tree-id332 . -1341) (undo-tree-id333 . -1774) (undo-tree-id334 . -1778) (undo-tree-id335 . -2355) (undo-tree-id336 . -2359) (undo-tree-id337 . -2807) (undo-tree-id338 . -2811) (undo-tree-id339 . -3384) (undo-tree-id340 . -3388) (undo-tree-id341 . -4429) (undo-tree-id342 . -4433) (undo-tree-id343 . -4580) (undo-tree-id344 . -4584) (undo-tree-id345 . -47) (undo-tree-id346 . -52) (undo-tree-id347 . -60) (undo-tree-id348 . -74) (undo-tree-id349 . -100) (undo-tree-id350 . -106) (undo-tree-id351 . -108) (undo-tree-id352 . -113) (undo-tree-id353 . -115) (undo-tree-id354 . -119) (undo-tree-id355 . -33) (undo-tree-id356 . -63) (undo-tree-id357 . -7) (undo-tree-id358 . -12) (undo-tree-id359 . -14) (undo-tree-id360 . -20) (undo-tree-id361 . -22) (undo-tree-id362 . -27) (undo-tree-id363 . -29) (undo-tree-id364 . -33) (undo-tree-id365 . -42) (undo-tree-id366 . -47) (undo-tree-id367 . -4668) (undo-tree-id368 . -4670) (undo-tree-id369 . -409) (undo-tree-id370 . -414) (undo-tree-id371 . -477) (undo-tree-id372 . -482) (undo-tree-id373 . -520) (undo-tree-id374 . -526) (undo-tree-id375 . -821) (undo-tree-id376 . -826) (undo-tree-id377 . -889) (undo-tree-id378 . -894) (undo-tree-id379 . -932) (undo-tree-id380 . -938) (undo-tree-id381 . -1301) (undo-tree-id382 . -1306) (undo-tree-id383 . -1343) (undo-tree-id384 . -1349) (undo-tree-id385 . -1710) (undo-tree-id386 . -1715) (undo-tree-id387 . -1855) (undo-tree-id388 . -1861) (undo-tree-id389 . -1938) (undo-tree-id390 . -1944) (undo-tree-id391 . -2319) (undo-tree-id392 . -2324) (undo-tree-id393 . -2361) (undo-tree-id394 . -2367) (undo-tree-id395 . -2717) (undo-tree-id396 . -2722) (undo-tree-id397 . -2888) (undo-tree-id398 . -2894) (undo-tree-id399 . -2977) (undo-tree-id400 . -2983) (undo-tree-id401 . -3279) (undo-tree-id402 . -3284) (undo-tree-id403 . -3347) (undo-tree-id404 . -3352) (undo-tree-id405 . -3390) (undo-tree-id406 . -3396) (undo-tree-id407 . -3707) (undo-tree-id408 . -3713) (undo-tree-id409 . -3750) (undo-tree-id410 . -3754) (undo-tree-id411 . -4032) (undo-tree-id412 . -4038) (undo-tree-id413 . -4081) (undo-tree-id414 . -4085) (undo-tree-id415 . -4291) (undo-tree-id416 . -4296) (undo-tree-id417 . -4359) (undo-tree-id418 . -4364) (undo-tree-id419 . -4586) (undo-tree-id420 . -4592) (undo-tree-id421 . -5496) (undo-tree-id422 . -5502) (undo-tree-id423 . -5573) (undo-tree-id424 . -5579) (undo-tree-id425 . -514) (undo-tree-id426 . -518) (undo-tree-id427 . -926) (undo-tree-id428 . -930) (undo-tree-id429 . -1337) (undo-tree-id430 . -1341) (undo-tree-id431 . -1774) (undo-tree-id432 . -1778) (undo-tree-id433 . -2355) (undo-tree-id434 . -2359) (undo-tree-id435 . -2807) (undo-tree-id436 . -2811) (undo-tree-id437 . -3384) (undo-tree-id438 . -3388) (undo-tree-id439 . -4429) (undo-tree-id440 . -4433) (undo-tree-id441 . -4580) (undo-tree-id442 . -4584) (undo-tree-id443 . -42) (undo-tree-id444 . -47) (undo-tree-id445 . -60) (undo-tree-id446 . -74) (undo-tree-id447 . -100) (undo-tree-id448 . -106) (undo-tree-id449 . -108) (undo-tree-id450 . -113) (undo-tree-id451 . -115) (undo-tree-id452 . -119) (undo-tree-id453 . -33) (undo-tree-id454 . -63) (undo-tree-id455 . -4668) (undo-tree-id456 . -4670) (undo-tree-id457 . -60) (undo-tree-id458 . -64) (undo-tree-id459 . -33) (undo-tree-id460 . -46) (undo-tree-id461 . -4) (undo-tree-id462 . -11) (undo-tree-id463 . -162) (undo-tree-id464 . -167) (undo-tree-id465 . -4668) (undo-tree-id466 . -4670) (undo-tree-id467 . -162) (undo-tree-id468 . -167) (undo-tree-id469 . -156) (undo-tree-id470 . -160) (undo-tree-id471 . -149) (undo-tree-id472 . -154) (undo-tree-id473 . -141) (undo-tree-id474 . -147) (undo-tree-id475 . -134) (undo-tree-id476 . -139) (undo-tree-id477 . -60) (undo-tree-id478 . -64) (undo-tree-id479 . -33) (undo-tree-id480 . -46) (undo-tree-id481 . -33) (undo-tree-id482 . -46) (undo-tree-id483 . -60) (undo-tree-id484 . -64) (undo-tree-id485 . -134) (undo-tree-id486 . -139) (undo-tree-id487 . -141) (undo-tree-id488 . -147) (undo-tree-id489 . -149) (undo-tree-id490 . -154) (undo-tree-id491 . -156) (undo-tree-id492 . -160) (undo-tree-id493 . -162) (undo-tree-id494 . -167) (undo-tree-id495 . -4668) (undo-tree-id496 . -4670) (undo-tree-id497 . -162) (undo-tree-id498 . -167) (undo-tree-id499 . -4) (undo-tree-id500 . -27) (undo-tree-id501 . -33) (undo-tree-id502 . -46) (undo-tree-id503 . -60) (undo-tree-id504 . -64) (undo-tree-id505 . -4668) (undo-tree-id506 . -4670) (undo-tree-id507 . -34) (undo-tree-id508 . -33) (undo-tree-id509 . -34) (undo-tree-id510 . -36) (undo-tree-id511 . -35) (undo-tree-id512 . -36) (undo-tree-id513 . -36) (undo-tree-id514 . -37) (undo-tree-id515 . -36) (undo-tree-id516 . -37) (undo-tree-id517 . -37) (undo-tree-id518 . -36) (undo-tree-id519 . -37) (undo-tree-id520 . -37) (undo-tree-id521 . -36) (undo-tree-id522 . -37) (undo-tree-id523 . -36) (undo-tree-id524 . -37) (undo-tree-id525 . -37) (undo-tree-id526 . -37) (undo-tree-id527 . -37) (undo-tree-id528 . -38) (undo-tree-id529 . -37) (undo-tree-id530 . -38) (undo-tree-id531 . -38) (undo-tree-id532 . -37) (undo-tree-id533 . -38) (undo-tree-id534 . -38) (undo-tree-id535 . -37) (undo-tree-id536 . -39) (undo-tree-id537 . -39) (undo-tree-id538 . -38) (undo-tree-id539 . -37) (undo-tree-id540 . -39) (undo-tree-id541 . -38) (undo-tree-id542 . -40) (undo-tree-id543 . -39) (undo-tree-id544 . 5906) (undo-tree-id545 . -39) (undo-tree-id546 . -39) (undo-tree-id547 . -39) (undo-tree-id548 . -39) (undo-tree-id549 . -39) (undo-tree-id550 . -39) 40) nil (23743 19612 711582 281000) 0 nil]) ((34 . 41) (t 23743 19519 462713 775000)) nil (23743 19612 711604 318000) 0 nil]) ((1 . 5940) (#("use ::{error, pubsub, query, user, utils};
use futures::stream::Stream;
use pubsub::PubSub;
use user::{Filter, Scope, User};
use warp::{path, Filter as WarpFilter};

pub fn run() {
    // GET /api/v1/streaming/user                                  [private; language filter]
    let user_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user));

    // GET /api/v1/streaming/user/notification                     [private; notification filter]
    let user_timeline_notifications = path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user.with_notification_filter()));

    // GET /api/v1/streaming/public                                [public; language filter]
    let public_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public?only_media=true                [public; language filter]
    let public_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/public/local                          [public; language filter]
    let local_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public:local\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
    let local_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .and(path::end())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:local:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public:local\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/direct                                [private; *no* filter]
    let direct_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"direct\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(format!(\"direct:{}\", user.id), user.with_no_filter()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
    let hashtag_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}\", q.tag), User::public()));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
    let hashtag_timeline_local = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\" / \"local\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}:local\", q.tag), User::public()));

    // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
    let list_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"list\")
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .and(warp::query())
        .and_then(|user: User, q: query::List| (user.is_authorized_for_list(q.list), Ok(user)))
        .untuple_one()
        .and(path::end())
        .map(|list: i64, user: User| PubSub::from(format!(\"list:{}\", list), user.with_no_filter()));

    let routes = or!(
        user_timeline,
        user_timeline_notifications,
        public_timeline_media,
        public_timeline,
        local_timeline_media,
        local_timeline,
        direct_timeline,
        hashtag_timeline,
        hashtag_timeline_local,
        list_timeline
    )
    .and_then(|event_stream| event_stream)
    .and(warp::sse())
    .map(|event_stream: pubsub::Receiver, sse: warp::sse::Sse| {
        let user = event_stream.user.clone();
        sse.reply(warp::sse::keep(
            event_stream.filter_map(move |item| {
                let payload = item[\"payload\"].clone();
                let event = item[\"event\"].to_string().clone();
                let toot_lang = item[\"language\"].to_string().clone();

                println!(\"ding\");

                match &user.filter {
                    Filter::Notification if event != \"notification\" => None,
                    Filter::Language if !user.langs.contains(&toot_lang) => None,
                    _ => Some((warp::sse::event(event), warp::sse::data(payload))),
                }
            }),
            None,
        ))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 41 (fontified t) 41 42 (fontified t) 42 43 (fontified t) 43 46 (fontified t face font-lock-keyword-face) 46 47 (fontified t) 47 54 (fontified t face font-lock-constant-face) 54 56 (fontified t) 56 62 (fontified t face font-lock-constant-face) 62 64 (fontified t) 64 70 (fontified t face font-lock-type-face) 70 72 (fontified t) 72 75 (fontified t face font-lock-keyword-face) 75 76 (fontified t) 76 82 (fontified t face font-lock-constant-face) 82 84 (fontified t) 84 90 (fontified t face font-lock-type-face) 90 92 (fontified t) 92 95 (fontified t face font-lock-keyword-face) 95 96 (fontified t) 96 100 (fontified t face font-lock-constant-face) 100 103 (fontified t) 103 109 (fontified t face font-lock-type-face) 109 111 (fontified t) 111 116 (fontified t face font-lock-type-face) 116 118 (fontified t) 118 122 (fontified t face font-lock-type-face) 122 125 (fontified t) 125 128 (fontified t face font-lock-keyword-face) 128 129 (fontified t) 129 133 (fontified t face font-lock-constant-face) 133 142 (fontified t) 142 148 (fontified t face font-lock-type-face) 148 149 (fontified t) 149 151 (fontified t face font-lock-keyword-face) 151 152 (fontified t) 152 162 (fontified t face font-lock-type-face) 162 166 (fontified t) 166 169 (fontified t face font-lock-keyword-face) 169 170 (fontified t) 170 172 (fontified t face font-lock-keyword-face) 172 173 (fontified t) 173 176 (fontified t face font-lock-function-name-face) 176 185 (fontified t) 185 188 (fontified t face font-lock-comment-delimiter-face) 188 275 (fontified t face font-lock-comment-face) 275 279 (fontified t) 279 282 (fontified t face font-lock-keyword-face) 282 283 (fontified t) 283 296 (fontified t face font-lock-variable-name-face) 296 299 (fontified t) 299 304 (fontified t face font-lock-preprocessor-face) 304 305 (fontified t) 305 310 (fontified t face font-lock-string-face) 310 313 (fontified t) 313 317 (fontified t face font-lock-string-face) 317 320 (fontified t) 320 331 (fontified t face font-lock-string-face) 331 334 (fontified t) 334 338 (fontified t face font-lock-string-face) 338 339 (syntax-table #1# fontified t face font-lock-string-face) 339 340 (fontified t face font-lock-string-face) 340 355 (fontified t) 355 359 (fontified t face font-lock-constant-face) 359 381 (fontified t) 381 385 (fontified t face font-lock-constant-face) 385 404 (fontified t) 404 409 (fontified t face font-lock-type-face) 409 411 (fontified t) 411 418 (fontified t face font-lock-type-face) 418 447 (fontified t) 447 451 (fontified t face font-lock-constant-face) 451 472 (fontified t) 472 477 (fontified t face font-lock-type-face) 477 479 (fontified t) 479 486 (fontified t face font-lock-type-face) 486 503 (fontified t) 503 507 (fontified t face font-lock-variable-name-face) 507 509 (fontified t) 509 513 (fontified t face font-lock-type-face) 513 515 (fontified t) 515 521 (fontified t face font-lock-type-face) 521 542 (fontified t) 542 543 (fontified t) 543 557 (fontified t) 557 562 (fontified t) 562 565 (fontified t face font-lock-comment-delimiter-face) 565 656 (fontified t face font-lock-comment-face) 656 660 (fontified t) 660 663 (fontified t face font-lock-keyword-face) 663 664 (fontified t) 664 691 (fontified t face font-lock-variable-name-face) 691 694 (fontified t) 694 699 (fontified t face font-lock-preprocessor-face) 699 700 (fontified t) 700 705 (fontified t face font-lock-string-face) 705 708 (fontified t) 708 712 (fontified t face font-lock-string-face) 712 715 (fontified t) 715 726 (fontified t face font-lock-string-face) 726 729 (fontified t) 729 733 (fontified t face font-lock-string-face) 733 734 (fontified t syntax-table #1# face font-lock-string-face) 734 735 (fontified t face font-lock-string-face) 735 738 (fontified t) 738 752 (fontified t face font-lock-string-face) 752 767 (fontified t) 767 771 (fontified t face font-lock-constant-face) 771 793 (fontified t) 793 797 (fontified t face font-lock-constant-face) 797 816 (fontified t) 816 821 (fontified t face font-lock-type-face) 821 823 (fontified t) 823 830 (fontified t face font-lock-type-face) 830 859 (fontified t) 859 863 (fontified t face font-lock-constant-face) 863 884 (fontified t) 884 889 (fontified t face font-lock-type-face) 889 891 (fontified t) 891 898 (fontified t face font-lock-type-face) 898 915 (fontified t) 915 919 (fontified t face font-lock-variable-name-face) 919 921 (fontified t) 921 925 (fontified t face font-lock-type-face) 925 927 (fontified t) 927 933 (fontified t face font-lock-type-face) 933 1001 (fontified t) 1001 1004 (fontified t face font-lock-comment-delimiter-face) 1004 1057 (fontified t face font-lock-comment-face) 1057 1090 (face font-lock-comment-face fontified t) 1090 1094 (fontified t) 1094 1097 (fontified t face font-lock-keyword-face) 1097 1098 (fontified t) 1098 1113 (fontified t face font-lock-variable-name-face) 1113 1116 (fontified t) 1116 1121 (fontified t face font-lock-preprocessor-face) 1121 1122 (fontified t) 1122 1127 (fontified t face font-lock-string-face) 1127 1130 (fontified t) 1130 1134 (fontified t face font-lock-string-face) 1134 1137 (fontified t) 1137 1148 (fontified t face font-lock-string-face) 1148 1151 (fontified t) 1151 1159 (fontified t face font-lock-string-face) 1159 1174 (fontified t) 1174 1178 (fontified t face font-lock-constant-face) 1178 1200 (fontified t) 1200 1204 (fontified t face font-lock-constant-face) 1204 1223 (fontified t) 1223 1227 (fontified t face font-lock-constant-face) 1227 1229 (fontified t) 1229 1234 (fontified t face font-lock-type-face) 1234 1236 (fontified t) 1236 1242 (fontified t face font-lock-type-face) 1242 1271 (fontified t) 1271 1275 (fontified t face font-lock-constant-face) 1275 1296 (fontified t) 1296 1301 (fontified t face font-lock-type-face) 1301 1303 (fontified t) 1303 1309 (fontified t face font-lock-type-face) 1309 1326 (fontified t) 1326 1330 (fontified t face font-lock-variable-name-face) 1330 1332 (fontified t) 1332 1336 (fontified t face font-lock-type-face) 1336 1338 (fontified t) 1338 1344 (fontified t face font-lock-type-face) 1344 1351 (fontified t) 1351 1359 (fontified t face font-lock-string-face) 1359 1404 (fontified t) 1404 1407 (fontified t face font-lock-comment-delimiter-face) 1407 1493 (fontified t face font-lock-comment-face) 1493 1497 (fontified t) 1497 1500 (fontified t face font-lock-keyword-face) 1500 1501 (fontified t) 1501 1522 (fontified t face font-lock-variable-name-face) 1522 1525 (fontified t) 1525 1530 (fontified t face font-lock-preprocessor-face) 1530 1531 (fontified t) 1531 1536 (fontified t face font-lock-string-face) 1536 1539 (fontified t) 1539 1543 (fontified t face font-lock-string-face) 1543 1546 (fontified t) 1546 1557 (fontified t face font-lock-string-face) 1557 1560 (fontified t) 1560 1568 (fontified t face font-lock-string-face) 1568 1583 (fontified t) 1583 1587 (fontified t face font-lock-constant-face) 1587 1590 (fontified t) 1590 1596 (fontified t) 1596 1609 (fontified t) 1609 1613 (fontified t face font-lock-constant-face) 1613 1632 (fontified t) 1632 1636 (fontified t face font-lock-constant-face) 1636 1638 (fontified t) 1638 1643 (fontified t face font-lock-type-face) 1643 1645 (fontified t) 1645 1651 (fontified t face font-lock-type-face) 1651 1680 (fontified t) 1680 1684 (fontified t face font-lock-constant-face) 1684 1705 (fontified t) 1705 1710 (fontified t face font-lock-type-face) 1710 1712 (fontified t) 1712 1718 (fontified t face font-lock-type-face) 1718 1734 (fontified t) 1734 1738 (fontified t face font-lock-constant-face) 1738 1763 (fontified t) 1763 1767 (fontified t face font-lock-variable-name-face) 1767 1769 (fontified t) 1769 1773 (fontified t face font-lock-type-face) 1773 1775 (fontified t) 1775 1776 (fontified t face font-lock-variable-name-face) 1776 1778 (fontified t) 1778 1783 (fontified t face font-lock-constant-face) 1783 1785 (fontified t) 1785 1790 (fontified t face font-lock-type-face) 1790 1792 (fontified t) 1792 1797 (fontified t face font-lock-keyword-face) 1797 1834 (fontified t) 1834 1837 (fontified t face font-lock-string-face) 1837 1840 (fontified t) 1840 1846 (fontified t face font-lock-string-face) 1846 1848 (fontified t) 1848 1849 (fontified t syntax-table #2#) 1849 1850 (fontified t) 1850 1856 (fontified t face font-lock-type-face) 1856 1863 (fontified t) 1863 1877 (fontified t face font-lock-string-face) 1877 1931 (fontified t) 1931 1932 (fontified t syntax-table #2#) 1932 1933 (fontified t) 1933 1939 (fontified t face font-lock-type-face) 1939 1946 (fontified t) 1946 1954 (fontified t face font-lock-string-face) 1954 2010 (fontified t) 2010 2013 (fontified t face font-lock-comment-delimiter-face) 2013 2096 (fontified t face font-lock-comment-face) 2096 2099 (face font-lock-comment-face fontified t) 2881 2882 (syntax-table #2#) 2970 2971 (syntax-table #2#) 5540 5541 (syntax-table #2#) 5622 5623 (syntax-table #2#) 5653 5654 (syntax-table #2#)) . 1) (undo-tree-id238 . -4) (undo-tree-id239 . -42) (undo-tree-id240 . -4) (undo-tree-id241 . -42) (undo-tree-id242 . -4) (undo-tree-id243 . -4) (undo-tree-id244 . -4) (undo-tree-id245 . -4) (undo-tree-id246 . -4) (undo-tree-id247 . -4) (undo-tree-id248 . -4) (undo-tree-id249 . -4) (undo-tree-id250 . -4) (undo-tree-id251 . -4) (undo-tree-id252 . -4) (undo-tree-id253 . -4) (undo-tree-id254 . -4) (undo-tree-id255 . -4) (undo-tree-id256 . -4) (undo-tree-id257 . -4) (undo-tree-id258 . -4) 5) nil (23743 19519 453542 265000) 0 nil]) ((#("crate" 0 5 (fontified t face font-lock-keyword-face)) . 5) (t 23743 19504 692806 851000)) nil (23743 19519 453548 453000) 0 nil] [nil nil ((#("crate::{error, pubsub, query, user, utils}" 0 5 (fontified t face font-lock-keyword-face) 5 42 (fontified t)) . 5) (undo-tree-id201 . -4) (undo-tree-id202 . -36) (undo-tree-id203 . -41) (undo-tree-id204 . -8) (undo-tree-id205 . -13) (undo-tree-id206 . -15) (undo-tree-id207 . -21) (undo-tree-id208 . -23) (undo-tree-id209 . -28) (undo-tree-id210 . -30) (undo-tree-id211 . -34) (undo-tree-id212 . -36) (undo-tree-id213 . -41) (undo-tree-id214 . -36) (undo-tree-id215 . -41) (undo-tree-id216 . -36) (undo-tree-id217 . -41) (undo-tree-id218 . -30) (undo-tree-id219 . -34) (undo-tree-id220 . -23) (undo-tree-id221 . -28) (undo-tree-id222 . -15) (undo-tree-id223 . -21) (undo-tree-id224 . -8) (undo-tree-id225 . -13) (undo-tree-id226 . -8) (undo-tree-id227 . -13) (undo-tree-id228 . -15) (undo-tree-id229 . -21) (undo-tree-id230 . -23) (undo-tree-id231 . -28) (undo-tree-id232 . -30) (undo-tree-id233 . -34) (undo-tree-id234 . -36) (undo-tree-id235 . -41) (undo-tree-id236 . -36) (undo-tree-id237 . -41) (t 23743 19504 692806 851000)) ((5 . 47)) (23743 19516 384618 679000) 0 nil]) ((1 . 5947) (#("use user::{Filter, Scope, User};
use crate::{error, pubsub, query, user, utils};
use futures::stream::Stream;
use pubsub::PubSub;
use warp::{path, Filter as WarpFilter};

pub fn run() {
    // GET /api/v1/streaming/user                                  [private; language filter]
    let user_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user));

    // GET /api/v1/streaming/user/notification                     [private; notification filter]
    let user_timeline_notifications = path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user.with_notification_filter()));

    // GET /api/v1/streaming/public                                [public; language filter]
    let public_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public?only_media=true                [public; language filter]
    let public_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/public/local                          [public; language filter]
    let local_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public:local\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
    let local_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .and(path::end())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:local:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public:local\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/direct                                [private; *no* filter]
    let direct_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"direct\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(format!(\"direct:{}\", user.id), user.with_no_filter()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
    let hashtag_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}\", q.tag), User::public()));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
    let hashtag_timeline_local = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\" / \"local\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}:local\", q.tag), User::public()));

    // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
    let list_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"list\")
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .and(warp::query())
        .and_then(|user: User, q: query::List| (user.is_authorized_for_list(q.list), Ok(user)))
        .untuple_one()
        .and(path::end())
        .map(|list: i64, user: User| PubSub::from(format!(\"list:{}\", list), user.with_no_filter()));

    let routes = or!(
        user_timeline,
        user_timeline_notifications,
        public_timeline_media,
        public_timeline,
        local_timeline_media,
        local_timeline,
        direct_timeline,
        hashtag_timeline,
        hashtag_timeline_local,
        list_timeline
    )
    .and_then(|event_stream| event_stream)
    .and(warp::sse())
    .map(|event_stream: pubsub::Receiver, sse: warp::sse::Sse| {
        let user = event_stream.user.clone();
        sse.reply(warp::sse::keep(
            event_stream.filter_map(move |item| {
                let payload = item[\"payload\"].clone();
                let event = item[\"event\"].to_string().clone();
                let toot_lang = item[\"language\"].to_string().clone();

                println!(\"ding\");

                match &user.filter {
                    Filter::Notification if event != \"notification\" => None,
                    Filter::Language if !user.langs.contains(&toot_lang) => None,
                    _ => Some((warp::sse::event(event), warp::sse::data(payload))),
                }
            }),
            None,
        ))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 11 (fontified t) 11 17 (fontified t face font-lock-type-face) 17 19 (fontified t) 19 24 (fontified t face font-lock-type-face) 24 26 (fontified t) 26 30 (fontified t face font-lock-type-face) 30 32 (fontified t) 32 33 (fontified t) 33 36 (fontified t face font-lock-keyword-face) 36 37 (fontified t) 37 42 (fontified t face font-lock-keyword-face) 42 81 (fontified t) 81 84 (fontified t face font-lock-keyword-face) 84 85 (fontified t) 85 92 (fontified t face font-lock-constant-face) 92 94 (fontified t) 94 100 (fontified t face font-lock-constant-face) 100 102 (fontified t) 102 108 (fontified t face font-lock-type-face) 108 110 (fontified t) 110 113 (fontified t face font-lock-keyword-face) 113 114 (fontified t) 114 120 (fontified t face font-lock-constant-face) 120 122 (fontified t) 122 128 (fontified t face font-lock-type-face) 128 130 (fontified t) 130 133 (fontified t face font-lock-keyword-face) 133 134 (fontified t) 134 138 (fontified t face font-lock-constant-face) 138 147 (fontified t) 147 153 (fontified t face font-lock-type-face) 153 154 (fontified t) 154 156 (fontified t face font-lock-keyword-face) 156 157 (fontified t) 157 167 (fontified t face font-lock-type-face) 167 171 (fontified t) 171 174 (fontified t face font-lock-keyword-face) 174 175 (fontified t) 175 177 (fontified t face font-lock-keyword-face) 177 178 (fontified t) 178 181 (fontified t face font-lock-function-name-face) 181 190 (fontified t) 190 193 (fontified t face font-lock-comment-delimiter-face) 193 280 (fontified t face font-lock-comment-face) 280 284 (fontified t) 284 287 (fontified t face font-lock-keyword-face) 287 288 (fontified t) 288 301 (fontified t face font-lock-variable-name-face) 301 304 (fontified t) 304 309 (fontified t face font-lock-preprocessor-face) 309 310 (fontified t) 310 315 (fontified t face font-lock-string-face) 315 318 (fontified t) 318 322 (fontified t face font-lock-string-face) 322 325 (fontified t) 325 336 (fontified t face font-lock-string-face) 336 339 (fontified t) 339 343 (fontified t face font-lock-string-face) 343 344 (syntax-table #1# fontified t face font-lock-string-face) 344 345 (fontified t face font-lock-string-face) 345 360 (fontified t) 360 364 (fontified t face font-lock-constant-face) 364 386 (fontified t) 386 390 (fontified t face font-lock-constant-face) 390 409 (fontified t) 409 414 (fontified t face font-lock-type-face) 414 416 (fontified t) 416 423 (fontified t face font-lock-type-face) 423 452 (fontified t) 452 456 (fontified t face font-lock-constant-face) 456 477 (fontified t) 477 482 (fontified t face font-lock-type-face) 482 484 (fontified t) 484 491 (fontified t face font-lock-type-face) 491 508 (fontified t) 508 512 (fontified t face font-lock-variable-name-face) 512 514 (fontified t) 514 518 (fontified t face font-lock-type-face) 518 520 (fontified t) 520 526 (fontified t face font-lock-type-face) 526 532 (fontified t) 532 533 (fontified t) 533 562 (fontified t) 562 567 (fontified t) 567 570 (fontified t face font-lock-comment-delimiter-face) 570 661 (fontified t face font-lock-comment-face) 661 665 (fontified t) 665 668 (fontified t face font-lock-keyword-face) 668 669 (fontified t) 669 696 (fontified t face font-lock-variable-name-face) 696 699 (fontified t) 699 704 (fontified t face font-lock-preprocessor-face) 704 705 (fontified t) 705 710 (fontified t face font-lock-string-face) 710 713 (fontified t) 713 717 (fontified t face font-lock-string-face) 717 720 (fontified t) 720 731 (fontified t face font-lock-string-face) 731 734 (fontified t) 734 738 (fontified t face font-lock-string-face) 738 739 (fontified t syntax-table #1# face font-lock-string-face) 739 740 (fontified t face font-lock-string-face) 740 743 (fontified t) 743 757 (fontified t face font-lock-string-face) 757 772 (fontified t) 772 776 (fontified t face font-lock-constant-face) 776 798 (fontified t) 798 802 (fontified t face font-lock-constant-face) 802 821 (fontified t) 821 826 (fontified t face font-lock-type-face) 826 828 (fontified t) 828 835 (fontified t face font-lock-type-face) 835 864 (fontified t) 864 868 (fontified t face font-lock-constant-face) 868 889 (fontified t) 889 894 (fontified t face font-lock-type-face) 894 896 (fontified t) 896 903 (fontified t face font-lock-type-face) 903 920 (fontified t) 920 924 (fontified t face font-lock-variable-name-face) 924 926 (fontified t) 926 930 (fontified t face font-lock-type-face) 930 932 (fontified t) 932 938 (fontified t face font-lock-type-face) 938 1006 (fontified t) 1006 1009 (fontified t face font-lock-comment-delimiter-face) 1009 1062 (fontified t face font-lock-comment-face) 1062 1095 (face font-lock-comment-face fontified t) 1095 1099 (fontified t) 1099 1102 (fontified t face font-lock-keyword-face) 1102 1103 (fontified t) 1103 1118 (fontified t face font-lock-variable-name-face) 1118 1121 (fontified t) 1121 1126 (fontified t face font-lock-preprocessor-face) 1126 1127 (fontified t) 1127 1132 (fontified t face font-lock-string-face) 1132 1135 (fontified t) 1135 1139 (fontified t face font-lock-string-face) 1139 1142 (fontified t) 1142 1153 (fontified t face font-lock-string-face) 1153 1156 (fontified t) 1156 1164 (fontified t face font-lock-string-face) 1164 1179 (fontified t) 1179 1183 (fontified t face font-lock-constant-face) 1183 1205 (fontified t) 1205 1209 (fontified t face font-lock-constant-face) 1209 1228 (fontified t) 1228 1232 (fontified t face font-lock-constant-face) 1232 1234 (fontified t) 1234 1239 (fontified t face font-lock-type-face) 1239 1241 (fontified t) 1241 1247 (fontified t face font-lock-type-face) 1247 1276 (fontified t) 1276 1280 (fontified t face font-lock-constant-face) 1280 1301 (fontified t) 1301 1306 (fontified t face font-lock-type-face) 1306 1308 (fontified t) 1308 1314 (fontified t face font-lock-type-face) 1314 1331 (fontified t) 1331 1335 (fontified t face font-lock-variable-name-face) 1335 1337 (fontified t) 1337 1341 (fontified t face font-lock-type-face) 1341 1343 (fontified t) 1343 1349 (fontified t face font-lock-type-face) 1349 1356 (fontified t) 1356 1364 (fontified t face font-lock-string-face) 1364 1409 (fontified t) 1409 1412 (fontified t face font-lock-comment-delimiter-face) 1412 1498 (fontified t face font-lock-comment-face) 1498 1502 (fontified t) 1502 1505 (fontified t face font-lock-keyword-face) 1505 1506 (fontified t) 1506 1527 (fontified t face font-lock-variable-name-face) 1527 1530 (fontified t) 1530 1535 (fontified t face font-lock-preprocessor-face) 1535 1536 (fontified t) 1536 1541 (fontified t face font-lock-string-face) 1541 1544 (fontified t) 1544 1548 (fontified t face font-lock-string-face) 1548 1551 (fontified t) 1551 1562 (fontified t face font-lock-string-face) 1562 1565 (fontified t) 1565 1573 (fontified t face font-lock-string-face) 1573 1588 (fontified t) 1588 1592 (fontified t face font-lock-constant-face) 1592 1595 (fontified t) 1595 1601 (fontified t) 1601 1614 (fontified t) 1614 1618 (fontified t face font-lock-constant-face) 1618 1637 (fontified t) 1637 1641 (fontified t face font-lock-constant-face) 1641 1643 (fontified t) 1643 1648 (fontified t face font-lock-type-face) 1648 1650 (fontified t) 1650 1656 (fontified t face font-lock-type-face) 1656 1685 (fontified t) 1685 1689 (fontified t face font-lock-constant-face) 1689 1710 (fontified t) 1710 1715 (fontified t face font-lock-type-face) 1715 1717 (fontified t) 1717 1723 (fontified t face font-lock-type-face) 1723 1739 (fontified t) 1739 1743 (fontified t face font-lock-constant-face) 1743 1768 (fontified t) 1768 1772 (fontified t face font-lock-variable-name-face) 1772 1774 (fontified t) 1774 1778 (fontified t face font-lock-type-face) 1778 1780 (fontified t) 1780 1781 (fontified t face font-lock-variable-name-face) 1781 1783 (fontified t) 1783 1788 (fontified t face font-lock-constant-face) 1788 1790 (fontified t) 1790 1795 (fontified t face font-lock-type-face) 1795 1797 (fontified t) 1797 1802 (fontified t face font-lock-keyword-face) 1802 1839 (fontified t) 1839 1842 (fontified t face font-lock-string-face) 1842 1845 (fontified t) 1845 1851 (fontified t face font-lock-string-face) 1851 1853 (fontified t) 1853 1854 (fontified t syntax-table #2#) 1854 1855 (fontified t) 1855 1861 (fontified t face font-lock-type-face) 1861 1868 (fontified t) 1868 1882 (fontified t face font-lock-string-face) 1882 1936 (fontified t) 1936 1937 (fontified t syntax-table #2#) 1937 1938 (fontified t) 1938 1944 (fontified t face font-lock-type-face) 1944 1951 (fontified t) 1951 1959 (fontified t face font-lock-string-face) 1959 2015 (fontified t) 2015 2018 (fontified t face font-lock-comment-delimiter-face) 2018 2101 (fontified t face font-lock-comment-face) 2101 2104 (face font-lock-comment-face fontified t) 2886 2887 (syntax-table #2#) 2975 2976 (syntax-table #2#) 5545 5546 (syntax-table #2#) 5627 5628 (syntax-table #2#) 5658 5659 (syntax-table #2#)) . 1) (undo-tree-id88 . -4668) (undo-tree-id89 . -4670) (undo-tree-id90 . -85) (undo-tree-id91 . -92) (undo-tree-id92 . -114) (undo-tree-id93 . -120) (undo-tree-id94 . -73) (undo-tree-id95 . -78) (undo-tree-id96 . -4586) (undo-tree-id97 . -4592) (undo-tree-id98 . -4032) (undo-tree-id99 . -4038) (undo-tree-id100 . -3707) (undo-tree-id101 . -3713) (undo-tree-id102 . -3390) (undo-tree-id103 . -3396) (undo-tree-id104 . -2977) (undo-tree-id105 . -2983) (undo-tree-id106 . -2888) (undo-tree-id107 . -2894) (undo-tree-id108 . -2361) (undo-tree-id109 . -2367) (undo-tree-id110 . -1938) (undo-tree-id111 . -1944) (undo-tree-id112 . -1855) (undo-tree-id113 . -1861) (undo-tree-id114 . -1343) (undo-tree-id115 . -1349) (undo-tree-id116 . -932) (undo-tree-id117 . -938) (undo-tree-id118 . -520) (undo-tree-id119 . -526) (undo-tree-id120 . -4668) (undo-tree-id121 . -4670) (undo-tree-id122 . -73) (undo-tree-id123 . -78) (undo-tree-id124 . -67) (undo-tree-id125 . -71) (undo-tree-id126 . -60) (undo-tree-id127 . -65) (undo-tree-id128 . -52) (undo-tree-id129 . -58) (undo-tree-id130 . -45) (undo-tree-id131 . -50) (undo-tree-id132 . -4) (undo-tree-id133 . -8) (undo-tree-id134 . -4) (undo-tree-id135 . -8) (undo-tree-id136 . -45) (undo-tree-id137 . -50) (undo-tree-id138 . -52) (undo-tree-id139 . -58) (undo-tree-id140 . -60) (undo-tree-id141 . -65) (undo-tree-id142 . -67) (undo-tree-id143 . -71) (undo-tree-id144 . -73) (undo-tree-id145 . -78) (undo-tree-id146 . -4668) (undo-tree-id147 . -4670) (undo-tree-id148 . -520) (undo-tree-id149 . -526) (undo-tree-id150 . -932) (undo-tree-id151 . -938) (undo-tree-id152 . -1343) (undo-tree-id153 . -1349) (undo-tree-id154 . -1855) (undo-tree-id155 . -1861) (undo-tree-id156 . -1938) (undo-tree-id157 . -1944) (undo-tree-id158 . -2361) (undo-tree-id159 . -2367) (undo-tree-id160 . -2888) (undo-tree-id161 . -2894) (undo-tree-id162 . -2977) (undo-tree-id163 . -2983) (undo-tree-id164 . -3390) (undo-tree-id165 . -3396) (undo-tree-id166 . -3707) (undo-tree-id167 . -3713) (undo-tree-id168 . -4032) (undo-tree-id169 . -4038) (undo-tree-id170 . -4586) (undo-tree-id171 . -4592) (undo-tree-id172 . -73) (undo-tree-id173 . -78) (undo-tree-id174 . -114) (undo-tree-id175 . -128) (undo-tree-id176 . -85) (undo-tree-id177 . -108) (undo-tree-id178 . -4668) (undo-tree-id179 . -4670) (undo-tree-id180 . -85) (undo-tree-id181 . -85) (undo-tree-id182 . -37) (undo-tree-id183 . -85) (undo-tree-id184 . -37) (undo-tree-id185 . -4) (undo-tree-id186 . -4) (undo-tree-id187 . -4) (undo-tree-id188 . -37) (undo-tree-id189 . -4) (undo-tree-id190 . -4) (undo-tree-id191 . -4) (undo-tree-id192 . -4) (undo-tree-id193 . -4) (undo-tree-id194 . -4) (undo-tree-id195 . -4) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) 5) nil (23743 19516 389556 133000) 0 nil]) ((#("crate::" 0 5 (fontified t face font-lock-keyword-face) 5 7 (fontified t)) . 5) (undo-tree-id199 . -7) (undo-tree-id200 . -7) (t 23743 19482 796278 169000)) nil (23743 19504 671578 783000) 0 nil]) ((1 . 5954) (#("use pubsub::PubSub;
use crate::user::{Filter, Scope, User};
use crate::{error, pubsub, query, user, utils};
use futures::stream::Stream;
use warp::{path, Filter as WarpFilter};

pub fn run() {
    // GET /api/v1/streaming/user                                  [private; language filter]
    let user_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"user\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user));

    // GET /api/v1/streaming/user/notification                     [private; notification filter]
    let user_timeline_notifications = path!(\"api\" / \"v1\" / \"streaming\" / \"user\" / \"notification\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(user.id.to_string(), user.with_notification_filter()));

    // GET /api/v1/streaming/public                                [public; language filter]
    let public_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public?only_media=true                [public; language filter]
    let public_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/public/local                          [public; language filter]
    let local_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(path::end())
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .map(|user: User| PubSub::from(\"public:local\".into(), user.with_language_filter()));

    // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
    let local_timeline_media = path!(\"api\" / \"v1\" / \"streaming\" / \"public\" / \"local\")
        .and(user::get_access_token(user::Scope::Public))
        .and_then(|token| user::get_account(token, Scope::Public))
        .and(warp::query())
        .and(path::end())
        .map(|user: User, q: query::Media| match q.only_media.as_ref() {
            \"1\" | \"true\" => PubSub::from(\"public:local:media\".into(), user.with_language_filter()),
            _ => PubSub::from(\"public:local\".into(), user.with_language_filter()),
        });

    // GET /api/v1/streaming/direct                                [private; *no* filter]
    let direct_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"direct\")
        .and(path::end())
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .map(|user: User| PubSub::from(format!(\"direct:{}\", user.id), user.with_no_filter()));

    // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
    let hashtag_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}\", q.tag), User::public()));

    // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
    let hashtag_timeline_local = path!(\"api\" / \"v1\" / \"streaming\" / \"hashtag\" / \"local\")
        .and(warp::query())
        .and(path::end())
        .map(|q: query::Hashtag| PubSub::from(format!(\"hashtag:{}:local\", q.tag), User::public()));

    // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
    let list_timeline = path!(\"api\" / \"v1\" / \"streaming\" / \"list\")
        .and(user::get_access_token(Scope::Private))
        .and_then(|token| user::get_account(token, Scope::Private))
        .and(warp::query())
        .and_then(|user: User, q: query::List| (user.is_authorized_for_list(q.list), Ok(user)))
        .untuple_one()
        .and(path::end())
        .map(|list: i64, user: User| PubSub::from(format!(\"list:{}\", list), user.with_no_filter()));

    let routes = or!(
        user_timeline,
        user_timeline_notifications,
        public_timeline_media,
        public_timeline,
        local_timeline_media,
        local_timeline,
        direct_timeline,
        hashtag_timeline,
        hashtag_timeline_local,
        list_timeline
    )
    .and_then(|event_stream| event_stream)
    .and(warp::sse())
    .map(|event_stream: pubsub::Receiver, sse: warp::sse::Sse| {
        let user = event_stream.user.clone();
        sse.reply(warp::sse::keep(
            event_stream.filter_map(move |item| {
                let payload = item[\"payload\"].clone();
                let event = item[\"event\"].to_string().clone();
                let toot_lang = item[\"language\"].to_string().clone();

                println!(\"ding\");

                match &user.filter {
                    Filter::Notification if event != \"notification\" => None,
                    Filter::Language if !user.langs.contains(&toot_lang) => None,
                    _ => Some((warp::sse::event(event), warp::sse::data(payload))),
                }
            }),
            None,
        ))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    warp::serve(routes).run(([127, 0, 0, 1], 3030));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 10 (fontified t face font-lock-constant-face) 10 12 (fontified t) 12 18 (fontified t face font-lock-type-face) 18 20 (fontified t) 20 23 (fontified t face font-lock-keyword-face) 23 24 (fontified t) 24 29 (fontified t face font-lock-keyword-face) 29 31 (fontified t) 31 35 (fontified t face font-lock-constant-face) 35 38 (fontified t) 38 44 (fontified t face font-lock-type-face) 44 46 (fontified t) 46 51 (fontified t face font-lock-type-face) 51 53 (fontified t) 53 57 (fontified t face font-lock-type-face) 57 60 (fontified t) 60 63 (fontified t face font-lock-keyword-face) 63 64 (fontified t) 64 69 (fontified t face font-lock-keyword-face) 69 108 (fontified t) 108 111 (fontified t face font-lock-keyword-face) 111 112 (fontified t) 112 119 (fontified t face font-lock-constant-face) 119 121 (fontified t) 121 127 (fontified t face font-lock-constant-face) 127 129 (fontified t) 129 135 (fontified t face font-lock-type-face) 135 137 (fontified t) 137 140 (fontified t face font-lock-keyword-face) 140 141 (fontified t) 141 145 (fontified t face font-lock-constant-face) 145 154 (fontified t) 154 160 (fontified t face font-lock-type-face) 160 161 (fontified t) 161 163 (fontified t face font-lock-keyword-face) 163 164 (fontified t) 164 174 (fontified t face font-lock-type-face) 174 178 (fontified t) 178 181 (fontified t face font-lock-keyword-face) 181 182 (fontified t) 182 184 (fontified t face font-lock-keyword-face) 184 185 (fontified t) 185 188 (fontified t face font-lock-function-name-face) 188 197 (fontified t) 197 200 (fontified t face font-lock-comment-delimiter-face) 200 287 (fontified t face font-lock-comment-face) 287 291 (fontified t) 291 294 (fontified t face font-lock-keyword-face) 294 295 (fontified t) 295 308 (fontified t face font-lock-variable-name-face) 308 311 (fontified t) 311 316 (fontified t face font-lock-preprocessor-face) 316 317 (fontified t) 317 322 (fontified t face font-lock-string-face) 322 325 (fontified t) 325 329 (fontified t face font-lock-string-face) 329 332 (fontified t) 332 343 (fontified t face font-lock-string-face) 343 346 (fontified t) 346 350 (fontified t face font-lock-string-face) 350 351 (syntax-table #1# fontified t face font-lock-string-face) 351 352 (fontified t face font-lock-string-face) 352 367 (fontified t) 367 371 (fontified t face font-lock-constant-face) 371 393 (fontified t) 393 397 (fontified t face font-lock-constant-face) 397 416 (fontified t) 416 421 (fontified t face font-lock-type-face) 421 423 (fontified t) 423 430 (fontified t face font-lock-type-face) 430 459 (fontified t) 459 463 (fontified t face font-lock-constant-face) 463 484 (fontified t) 484 489 (fontified t face font-lock-type-face) 489 491 (fontified t) 491 493 (fontified t face font-lock-type-face) 493 498 (fontified t face font-lock-type-face) 498 501 (fontified t) 501 515 (fontified t) 515 519 (fontified t face font-lock-variable-name-face) 519 520 (fontified t) 520 521 (fontified t) 521 525 (face font-lock-type-face fontified t) 525 527 (fontified t) 527 533 (face font-lock-type-face fontified t) 533 569 (fontified t) 569 574 (fontified t) 574 577 (fontified t face font-lock-comment-delimiter-face) 577 668 (fontified t face font-lock-comment-face) 668 672 (fontified t) 672 675 (fontified t face font-lock-keyword-face) 675 676 (fontified t) 676 703 (fontified t face font-lock-variable-name-face) 703 706 (fontified t) 706 711 (fontified t face font-lock-preprocessor-face) 711 712 (fontified t) 712 717 (fontified t face font-lock-string-face) 717 720 (fontified t) 720 724 (fontified t face font-lock-string-face) 724 727 (fontified t) 727 738 (fontified t face font-lock-string-face) 738 741 (fontified t) 741 745 (fontified t face font-lock-string-face) 745 746 (fontified t syntax-table #1# face font-lock-string-face) 746 747 (fontified t face font-lock-string-face) 747 750 (fontified t) 750 764 (fontified t face font-lock-string-face) 764 779 (fontified t) 779 783 (fontified t face font-lock-constant-face) 783 805 (fontified t) 805 809 (fontified t face font-lock-constant-face) 809 828 (fontified t) 828 833 (fontified t face font-lock-type-face) 833 835 (fontified t) 835 842 (fontified t face font-lock-type-face) 842 871 (fontified t) 871 875 (fontified t face font-lock-constant-face) 875 896 (fontified t) 896 901 (fontified t face font-lock-type-face) 901 903 (fontified t) 903 910 (fontified t face font-lock-type-face) 910 927 (fontified t) 927 931 (fontified t face font-lock-variable-name-face) 931 933 (fontified t) 933 937 (fontified t face font-lock-type-face) 937 939 (fontified t) 939 945 (fontified t face font-lock-type-face) 945 1001 (fontified t) 1001 1008 (fontified t) 1008 1013 (fontified t) 1013 1016 (fontified t face font-lock-comment-delimiter-face) 1016 1069 (fontified t face font-lock-comment-face) 1069 1102 (face font-lock-comment-face fontified t) 1102 1106 (fontified t) 1106 1109 (fontified t face font-lock-keyword-face) 1109 1110 (fontified t) 1110 1125 (fontified t face font-lock-variable-name-face) 1125 1128 (fontified t) 1128 1133 (fontified t face font-lock-preprocessor-face) 1133 1134 (fontified t) 1134 1139 (fontified t face font-lock-string-face) 1139 1142 (fontified t) 1142 1146 (fontified t face font-lock-string-face) 1146 1149 (fontified t) 1149 1160 (fontified t face font-lock-string-face) 1160 1163 (fontified t) 1163 1171 (fontified t face font-lock-string-face) 1171 1186 (fontified t) 1186 1190 (fontified t face font-lock-constant-face) 1190 1212 (fontified t) 1212 1216 (fontified t face font-lock-constant-face) 1216 1235 (fontified t) 1235 1239 (fontified t face font-lock-constant-face) 1239 1241 (fontified t) 1241 1246 (fontified t face font-lock-type-face) 1246 1248 (fontified t) 1248 1254 (fontified t face font-lock-type-face) 1254 1283 (fontified t) 1283 1287 (fontified t face font-lock-constant-face) 1287 1308 (fontified t) 1308 1313 (fontified t face font-lock-type-face) 1313 1315 (fontified t) 1315 1321 (fontified t face font-lock-type-face) 1321 1338 (fontified t) 1338 1342 (fontified t face font-lock-variable-name-face) 1342 1344 (fontified t) 1344 1348 (fontified t face font-lock-type-face) 1348 1350 (fontified t) 1350 1356 (fontified t face font-lock-type-face) 1356 1363 (fontified t) 1363 1371 (fontified t face font-lock-string-face) 1371 1416 (fontified t) 1416 1419 (fontified t face font-lock-comment-delimiter-face) 1419 1505 (fontified t face font-lock-comment-face) 1505 1508 (fontified t) 1508 1509 (fontified t) 1509 1512 (fontified t face font-lock-keyword-face) 1512 1513 (fontified t) 1513 1534 (fontified t face font-lock-variable-name-face) 1534 1537 (fontified t) 1537 1542 (fontified t face font-lock-preprocessor-face) 1542 1543 (fontified t) 1543 1548 (fontified t face font-lock-string-face) 1548 1551 (fontified t) 1551 1555 (fontified t face font-lock-string-face) 1555 1558 (fontified t) 1558 1569 (fontified t face font-lock-string-face) 1569 1572 (fontified t) 1572 1580 (fontified t face font-lock-string-face) 1580 1582 (fontified t) 1582 1595 (fontified t) 1595 1599 (fontified t face font-lock-constant-face) 1599 1602 (fontified t) 1602 1608 (fontified t) 1608 1621 (fontified t) 1621 1625 (fontified t face font-lock-constant-face) 1625 1644 (fontified t) 1644 1648 (fontified t face font-lock-constant-face) 1648 1650 (fontified t) 1650 1655 (fontified t face font-lock-type-face) 1655 1657 (fontified t) 1657 1663 (fontified t face font-lock-type-face) 1663 1692 (fontified t) 1692 1696 (fontified t face font-lock-constant-face) 1696 1717 (fontified t) 1717 1722 (fontified t face font-lock-type-face) 1722 1724 (fontified t) 1724 1730 (fontified t face font-lock-type-face) 1730 1746 (fontified t) 1746 1750 (fontified t face font-lock-constant-face) 1750 1775 (fontified t) 1775 1779 (fontified t face font-lock-variable-name-face) 1779 1781 (fontified t) 1781 1785 (fontified t face font-lock-type-face) 1785 1787 (fontified t) 1787 1788 (fontified t face font-lock-variable-name-face) 1788 1790 (fontified t) 1790 1795 (fontified t face font-lock-constant-face) 1795 1797 (fontified t) 1797 1802 (fontified t face font-lock-type-face) 1802 1804 (fontified t) 1804 1809 (fontified t face font-lock-keyword-face) 1809 1846 (fontified t) 1846 1849 (fontified t face font-lock-string-face) 1849 1852 (fontified t) 1852 1858 (fontified t face font-lock-string-face) 1858 1860 (fontified t) 1860 1861 (fontified t syntax-table #2#) 1861 1862 (fontified t) 1862 1868 (fontified t face font-lock-type-face) 1868 1875 (fontified t) 1875 1889 (fontified t face font-lock-string-face) 1889 1943 (fontified t) 1943 1944 (fontified t syntax-table #2#) 1944 1945 (fontified t) 1945 1951 (fontified t face font-lock-type-face) 1951 1958 (fontified t) 1958 1966 (fontified t face font-lock-string-face) 1966 2022 (fontified t) 2022 2025 (fontified t face font-lock-comment-delimiter-face) 2025 2082 (fontified t face font-lock-comment-face) 2082 2108 (fontified t face font-lock-comment-face) 2108 2111 (face font-lock-comment-face fontified t) 2893 2894 (syntax-table #2#) 2982 2983 (syntax-table #2#) 5552 5553 (syntax-table #2#) 5634 5635 (syntax-table #2#) 5665 5666 (syntax-table #2#)) . 1) (undo-tree-id0 . -4) (undo-tree-id1 . -4) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -5) (undo-tree-id8 . -4) (undo-tree-id9 . -5) (undo-tree-id10 . -5) (undo-tree-id11 . -4) (undo-tree-id12 . -5) (undo-tree-id13 . -5) (undo-tree-id14 . -4) (undo-tree-id15 . -5) (undo-tree-id16 . -4) (undo-tree-id17 . -5) (undo-tree-id18 . -4) (undo-tree-id19 . -5) (undo-tree-id20 . -4) (undo-tree-id21 . -4) (undo-tree-id22 . -5) (undo-tree-id23 . -4) (undo-tree-id24 . -4) (undo-tree-id25 . -5) (undo-tree-id26 . -4) (undo-tree-id27 . -4) (undo-tree-id28 . -5) (undo-tree-id29 . -4) (undo-tree-id30 . -4) (undo-tree-id31 . -4) (undo-tree-id32 . -5) (undo-tree-id33 . -4) (undo-tree-id34 . -4) (undo-tree-id35 . -4) (undo-tree-id36 . -4) (undo-tree-id37 . -4675) (undo-tree-id38 . -4677) (undo-tree-id39 . -112) (undo-tree-id40 . -119) (undo-tree-id41 . -100) (undo-tree-id42 . -105) (undo-tree-id43 . -4675) (undo-tree-id44 . -4677) (undo-tree-id45 . -100) (undo-tree-id46 . -105) (undo-tree-id47 . -94) (undo-tree-id48 . -98) (undo-tree-id49 . -87) (undo-tree-id50 . -92) (undo-tree-id51 . -79) (undo-tree-id52 . -85) (undo-tree-id53 . -72) (undo-tree-id54 . -77) (undo-tree-id55 . -31) (undo-tree-id56 . -35) (undo-tree-id57 . -4) (undo-tree-id58 . -10) (undo-tree-id59 . -4) (undo-tree-id60 . -10) (undo-tree-id61 . -31) (undo-tree-id62 . -35) (undo-tree-id63 . -72) (undo-tree-id64 . -77) (undo-tree-id65 . -79) (undo-tree-id66 . -85) (undo-tree-id67 . -87) (undo-tree-id68 . -92) (undo-tree-id69 . -94) (undo-tree-id70 . -98) (undo-tree-id71 . -100) (undo-tree-id72 . -105) (undo-tree-id73 . -4675) (undo-tree-id74 . -4677) (undo-tree-id75 . -100) (undo-tree-id76 . -105) (undo-tree-id77 . -112) (undo-tree-id78 . -135) (undo-tree-id79 . -4675) (undo-tree-id80 . -4677) (undo-tree-id81 . -4) (undo-tree-id82 . -4) (undo-tree-id83 . -4) (undo-tree-id84 . -4) 5) nil (23743 19482 788153 811000) 0 nil]) ((#("crate::" 0 5 (fontified t face font-lock-keyword-face) 5 7 (fontified t)) . 5) (undo-tree-id85 . -7) (undo-tree-id86 . -7) (undo-tree-id87 . -5) (t 23743 19172 908230 834000)) nil (23743 19482 788183 479000) 0 nil]) nil nil (23743 19482 788187 943000) 0 nil] #3# 74629 55 nil)