"f891ab625f592549d2f9cd29fd20840c391be56e"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#2=[nil nil ((324 . 325)) nil (23741 63114 498501 560000) 0 nil]) ((284 . 285) (t 23741 63103 749467 233000)) nil (23741 63114 498507 169000) 0 nil]) ((nil rear-nonsticky nil 284 . 285) (nil fontified nil 284 . 285) (284 . 285) 283) nil (23741 63103 730342 932000) 0 nil]) ((#("‚Ä¶" 0 1 (fontified t face font-lock-variable-name-face)) . 284)) nil (23741 63103 730347 820000) 0 nil]) ((#("a" 0 1 (fontified t face font-lock-variable-name-face)) . 284)) nil (23741 63103 730350 550000) 0 nil] [nil ([nil ([nil nil ((nil rear-nonsticky nil 285 . 286) (nil fontified nil 285 . 286) (285 . 286) 284) ((#("‚Ä¶" 0 1 (fontified nil rear-nonsticky nil)) . 285) (nil rear-nonsticky t 285 . 286)) (23741 63091 885100 67000) 0 nil]) ((#("‚Ä¶" 0 1 (fontified t face font-lock-variable-name-face)) . 284)) ((284 . 285)) (23741 63091 885415 163000) 0 nil]) ((#("a" 0 1 (fontified t face font-lock-variable-name-face)) . 284) (undo-tree-id164 . -1)) ((284 . 285)) (23741 63092 108158 283000) 0 nil]) ((#("‚Ä¶" 0 1 (fontified t)) . 325) (undo-tree-id165 . 1)) nil (23741 63092 541326 420000) 0 nil]) ((#("a" 0 1 (fontified t)) . 325) (undo-tree-id166 . -1)) nil (23741 63091 885151 229000) 0 nil]) ((nil rear-nonsticky nil 324 . 325) (nil fontified nil 324 . 325) (324 . 325) 323 (t 23741 62818 881425 586000)) nil (23741 63091 885158 719000) 0 nil] [nil nil ((nil rear-nonsticky nil 325 . 326) (nil fontified nil 325 . 326) (325 . 326) 324 (t 23741 62818 881425 586000)) ((#("üôÇ" 0 1 (fontified nil rear-nonsticky nil)) . 325) (nil rear-nonsticky t 325 . 326)) (23741 63083 309144 702000) 0 nil]) ((324 . 325)) nil (23741 63083 309885 625000) 0 nil]) ((284 . 285) (t 23741 62798 554896 889000)) nil (23741 62818 868599 631000) 0 nil]) ((323 . 324) (#("." 0 1 (fontified t)) . -323) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (#("." 0 1 (fontified t)) . -324) (undo-tree-id152 . -1) (undo-tree-id153 . -1) 325 (323 . 325) (#("." 0 1 (fontified t)) . -323) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (#("." 0 1 (fontified t)) . -324) (undo-tree-id160 . -1) (undo-tree-id161 . -1) 325 (323 . 325)) nil (23741 62798 534318 727000) 0 nil]) ((#("‚ç≥" 0 1 (fontified t)) . 323)) nil (23741 62798 534335 523000) 0 nil]) ((284 . 285) (#("‚ç≥" 0 1 (fontified t)) . -284) (undo-tree-id162 . -1) (undo-tree-id163 . -1) 285 (t 23741 62666 639118 56000)) nil (23741 62798 534349 565000) 0 nil]) (nil . #1=(undo-tree-canary)) nil (23741 62798 534354 704000) 0 nil]) ((284 . 285)) nil (23741 62666 621483 603000) 0 nil]) ((#("l" 0 1 (fontified t face font-lock-variable-name-face)) . 284) (undo-tree-id144 . -1) (undo-tree-id145 . -1)) nil (23741 62666 621496 643000) 0 nil] [nil nil ((284 . 285) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . 284) (undo-tree-id132 . -1) (undo-tree-id133 . -1)) ((284 . 285) (#("	" 0 1 (fontified t)) . 284)) (23741 62659 248051 200000) 0 nil]) ((323 . 324)) nil (23741 62659 248407 495000) 0 nil]) ((#("l" 0 1 (fontified t)) . 323) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1)) nil (23741 62659 248087 311000) 0 nil]) ((#("k" 0 1 (fontified t)) . -324) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) 325 (324 . 325) (t 23741 62644 395932 977000)) nil (23741 62659 248105 679000) 0 nil]) (nil . #1#) nil (23741 62659 248110 997000) 0 nil]) ((323 . 324)) nil (23741 62644 383009 456000) 0 nil]) ((#("msg" 0 3 (fontified t)) . 323) (t 23741 62633 732670 553000)) nil (23741 62644 383015 213000) 0 nil]) ((284 . 285) (#("‚ç≥" 0 1 (fontified t)) . 284) (t 23741 62578 89705 401000)) nil (23741 62633 711409 232000) 0 nil]) ((284 . 285) (#("msg" 0 3 (fontified t face font-lock-variable-name-face)) . 284) (undo-tree-id126 . -1) (undo-tree-id127 . -3) (undo-tree-id128 . -2) (undo-tree-id129 . -3) (undo-tree-id130 . -1) (undo-tree-id131 . -2) 285 (t 23741 62559 966491 291000)) nil (23741 62578 79999 634000) 0 nil]) ((323 . 328) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 323) (undo-tree-id104 . -1) (322 . 323) (#(" " 0 1 (fontified nil)) . -322) (undo-tree-id105 . -1) (322 . 323) (#("\"" 0 1 (fontified nil face rust-string-interpolation-face)) . -322) (undo-tree-id106 . -1) (322 . 323) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 322) (undo-tree-id107 . -1) (321 . 322) (320 . 322) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -320) (undo-tree-id108 . 1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (320 . 321) (#("Hi guys!  Eddie here!" 0 21 (fontified t face font-lock-string-face)) . 320) (undo-tree-id111 . -8) (undo-tree-id112 . -14) (undo-tree-id113 . -13) (undo-tree-id114 . -14) (undo-tree-id115 . -12) (undo-tree-id116 . -13) (undo-tree-id117 . -11) (undo-tree-id118 . -12) (undo-tree-id119 . -10) (undo-tree-id120 . -11) (undo-tree-id121 . -9) (undo-tree-id122 . -10) (undo-tree-id123 . -8) (undo-tree-id124 . -9) 328) nil (23741 62559 952991 450000) 0 nil]) ((304 . 305)) nil (23741 62559 953011 778000) 0 nil]) ((#(":" 0 1 (fontified t)) . -304) (undo-tree-id125 . -1) 305 (304 . 305) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 304) (291 . 304) (290 . 292) (#("\"" 0 1 (fontified nil)) . -290) (280 . 291) (276 . 280) (276 . 277) 281 (t 23741 62493 253593 500000)) nil (23741 62559 953029 813000) 0 nil]) ((1 . 317) (#("// snippet of code @ 2019-04-22 13:03:50

// === Rust Playground ===
// This snippet is in: ~/.emacs.d/rust-playground/at-2019-04-22-130345/

// Execute the snippet: C-c C-c
// Delete the snippet completely: C-c k
// Toggle between main.rs and Cargo.toml: C-c b

fn main() {
    
    println!(\"Hi guys!  Eddie here!\");
}
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 41 (fontified t face font-lock-comment-face) 41 42 (fontified t) 42 45 (fontified t face font-lock-comment-delimiter-face) 45 69 (fontified t face font-lock-comment-face) 69 72 (fontified t face font-lock-comment-delimiter-face) 72 141 (fontified t face font-lock-comment-face) 141 142 (fontified t) 142 145 (fontified t face font-lock-comment-delimiter-face) 145 174 (fontified t face font-lock-comment-face) 174 177 (fontified t face font-lock-comment-delimiter-face) 177 214 (fontified t face font-lock-comment-face) 214 217 (fontified t face font-lock-comment-delimiter-face) 217 262 (fontified t face font-lock-comment-face) 262 263 (fontified t) 263 265 (fontified t face font-lock-keyword-face) 265 266 (fontified t) 266 270 (fontified t face font-lock-function-name-face) 270 280 (fontified t) 280 284 (fontified t) 284 292 (fontified t face rust-builtin-formatting-macro-face) 292 293 (fontified t) 293 316 (fontified t face font-lock-string-face) 316 319 (fontified t) 319 320 (fontified nil) 320 321 (fontified nil)) . 1) (undo-tree-id0 . -278) (undo-tree-id1 . -279) (undo-tree-id2 . -278) (undo-tree-id3 . -278) (undo-tree-id4 . -317) (undo-tree-id5 . -294) (undo-tree-id6 . -294) (undo-tree-id7 . -309) (undo-tree-id8 . -308) (undo-tree-id9 . -310) (undo-tree-id10 . -309) (undo-tree-id11 . -311) (undo-tree-id12 . -310) (undo-tree-id13 . -312) (undo-tree-id14 . -311) (undo-tree-id15 . -313) (undo-tree-id16 . -312) (undo-tree-id17 . -314) (undo-tree-id18 . -313) (undo-tree-id19 . -315) (undo-tree-id20 . -314) (undo-tree-id21 . 3) (undo-tree-id22 . -314) (undo-tree-id23 . -314) (undo-tree-id24 . -315) (undo-tree-id25 . -314) (undo-tree-id26 . -315) (undo-tree-id27 . -315) (undo-tree-id28 . -317) (undo-tree-id29 . -315) (undo-tree-id30 . -316) (undo-tree-id31 . -317) (undo-tree-id32 . -316) (undo-tree-id33 . -317) (undo-tree-id34 . -316) (undo-tree-id35 . -317) (undo-tree-id36 . -316) (undo-tree-id37 . -317) (undo-tree-id38 . -315) (undo-tree-id39 . -316) (undo-tree-id40 . -315) (undo-tree-id41 . -316) (undo-tree-id42 . -316) (undo-tree-id43 . -317) (undo-tree-id44 . -316) (undo-tree-id45 . -317) (undo-tree-id46 . -292) (undo-tree-id47 . -293) (undo-tree-id48 . -318) (undo-tree-id49 . -317) (undo-tree-id50 . -317) (undo-tree-id51 . -317) (undo-tree-id52 . -316) (undo-tree-id53 . -317) (undo-tree-id54 . -316) (undo-tree-id55 . -317) (undo-tree-id56 . -316) (undo-tree-id57 . -317) (undo-tree-id58 . -316) (undo-tree-id59 . -317) (undo-tree-id60 . -315) (undo-tree-id61 . -316) (undo-tree-id62 . -315) (undo-tree-id63 . -316) (undo-tree-id64 . -316) (undo-tree-id65 . -317) (undo-tree-id66 . -316) (undo-tree-id67 . -317) (undo-tree-id68 . -292) (undo-tree-id69 . -293) (undo-tree-id70 . -316) (undo-tree-id71 . -317) (undo-tree-id72 . -316) (undo-tree-id73 . -317) (undo-tree-id74 . -316) (undo-tree-id75 . -317) (undo-tree-id76 . -316) (undo-tree-id77 . -317) (undo-tree-id78 . -315) (undo-tree-id79 . -316) (undo-tree-id80 . -315) (undo-tree-id81 . -316) (undo-tree-id82 . -316) (undo-tree-id83 . -317) (undo-tree-id84 . -316) (undo-tree-id85 . -317) (undo-tree-id86 . -292) (undo-tree-id87 . -293) (undo-tree-id88 . 29) (undo-tree-id89 . -293) (undo-tree-id90 . 28) (undo-tree-id91 . -316) (undo-tree-id92 . 5) (undo-tree-id93 . -317) (321 . 322) 318) nil (23741 62493 247171 685000) 0 nil]) ((318 . 319)) nil (23741 62493 247201 299000) 0 nil]) ((#(":" 0 1 (fontified t face font-lock-string-face)) . 316) (undo-tree-id94 . 1)) nil (23741 62493 247209 259000) 0 nil]) ((315 . 316) (302 . 315) (#("@" 0 1 (fontified t face font-lock-string-face)) . -302) (undo-tree-id95 . -1) 303 (298 . 303) (#("G" 0 1 (fontified t face font-lock-string-face)) . -298) (undo-tree-id96 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -299) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (#("y" 0 1 (fontified t face font-lock-string-face)) . -300) (undo-tree-id99 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -301) (undo-tree-id100 . -1) 302 (297 . 302) (295 . 297) (#("Results" 0 7 (fontified t face font-lock-string-face)) . 295) (undo-tree-id101 . -2) (undo-tree-id102 . -2) (undo-tree-id103 . -1) 297) nil (23741 62493 247265 745000) 0 nil]) ((264 . 307) (215 . 218) (175 . 178) (143 . 146) (70 . 73) (43 . 46) (1 . 4) (1 . 246)) nil (23741 62493 247281 960000) 0 nil]) nil nil (23741 62493 247285 978000) 0 nil] #2# 2790 37 nil)