"6204b053a58cedeba14bf74b757704010c0af14a"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#3=[nil nil ((1 . 1094) (#("fn match_literal(expected: &'static str) -> impl Fn(&str) -> Result<(&str, ()), &str> {
    move |input| match input.get(0..expected.len()) {
        Some(next) if next == expected => Ok((&input[expected.len()..], ())),
        _ => Err(input),
    }
}

fn identifier(input: &str) -> Result<(&str, String), &str> {
    let mut matched = String::new();
    let mut chars = input.chars();

    match chars.next() {
        Some(next) if next.is_alphabetic() => matched.push(next),
        _ => return Err(input),
    };

    while let Some(next) = chars.next() {
        if next.is_alphanumeric() || next == '-' { matched.push(next)} else {
            break;
        }
    } 

    let next_index = matched.len();
    Ok((&input[next_index..], matched))
}

fn main() {}

#[test]
fn literal_parser() {
    let parse_joe = match_literal(\"Hello, Joe!\");
    assert_eq!(Ok((\"\", ())), parse_joe(\"Hello, Joe!\"));
    assert_eq!(
        Ok((\" Hello, Bob!\", ())),
        parse_joe(\"Hello, Joe! Hello, Bob!\")
    );
    assert_eq!(Err(\"Hello, Mike!\"), parse_joe(\"Hello, Mike!\"));
}
" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t) 17 25 (fontified t face font-lock-variable-name-face) 25 29 (fontified t) 29 35 (fontified t face font-lock-keyword-face) 35 36 (fontified t) 36 39 (fontified t face font-lock-type-face) 39 42 (fontified t) 42 43 (fontified t syntax-table #1=(1)) 43 44 (fontified t) 44 48 (fontified t face font-lock-keyword-face) 48 49 (fontified t) 49 51 (fontified t face font-lock-type-face) 51 53 (fontified t) 53 56 (fontified t face font-lock-type-face) 56 59 (fontified t) 59 60 (fontified t syntax-table #1#) 60 61 (fontified t) 61 67 (fontified t face font-lock-type-face) 67 70 (fontified t) 70 73 (fontified t face font-lock-type-face) 73 81 (fontified t) 81 84 (fontified t face font-lock-type-face) 84 87 (fontified t) 87 92 (fontified t) 92 96 (fontified t face font-lock-keyword-face) 96 105 (fontified t) 105 110 (fontified t face font-lock-keyword-face) 110 150 (fontified t) 150 154 (fontified t face font-lock-type-face) 154 161 (fontified t) 161 163 (fontified t face font-lock-keyword-face) 163 182 (fontified t) 182 183 (fontified t syntax-table #1#) 183 184 (fontified t) 184 186 (fontified t face font-lock-type-face) 186 231 (fontified t) 231 232 (fontified t syntax-table #1#) 232 233 (fontified t) 233 236 (fontified t face font-lock-type-face) 236 251 (fontified t) 251 252 (fontified t) 252 253 (fontified t) 253 254 (fontified t) 254 256 (fontified t face font-lock-keyword-face) 256 257 (fontified t) 257 267 (fontified t face font-lock-function-name-face) 267 268 (fontified t) 268 273 (fontified t face font-lock-variable-name-face) 273 276 (fontified t) 276 279 (fontified t face font-lock-type-face) 279 282 (fontified t) 282 283 (fontified t syntax-table #1#) 283 284 (fontified t) 284 290 (fontified t face font-lock-type-face) 290 291 (fontified t) 291 293 (fontified t) 293 296 (fontified t face font-lock-type-face) 296 298 (fontified t) 298 304 (fontified t face font-lock-type-face) 304 308 (fontified t) 308 311 (fontified t face font-lock-type-face) 311 313 (fontified t) 313 314 (fontified t) 314 315 (fontified t) 315 319 (fontified t) 319 322 (fontified t face font-lock-keyword-face) 322 323 (fontified t) 323 326 (fontified t face font-lock-keyword-face) 326 327 (fontified t) 327 334 (fontified t face font-lock-variable-name-face) 334 337 (fontified t) 337 343 (fontified t face font-lock-type-face) 343 348 (fontified t) 348 352 (fontified t) 352 356 (fontified t) 356 359 (fontified t face font-lock-keyword-face) 359 360 (fontified t) 360 363 (fontified t face font-lock-keyword-face) 363 364 (fontified t) 364 369 (fontified t face font-lock-variable-name-face) 369 372 (fontified t) 372 378 (fontified t) 378 383 (fontified t) 383 387 (fontified t) 387 388 (fontified t) 388 392 (fontified t) 392 397 (fontified t face font-lock-keyword-face) 397 398 (fontified t) 398 408 (fontified t) 408 411 (fontified t) 411 412 (fontified t) 412 413 (fontified t) 413 421 (fontified t) 421 425 (fontified t face font-lock-type-face) 425 432 (fontified t) 432 434 (fontified t face font-lock-keyword-face) 434 453 (fontified t) 453 457 (fontified t) 457 458 (fontified t syntax-table #1#) 458 459 (fontified t) 459 471 (fontified t) 471 479 (fontified t) 479 490 (fontified t) 490 491 (fontified t syntax-table #1#) 491 492 (fontified t) 492 498 (fontified t face font-lock-keyword-face) 498 499 (fontified t) 499 502 (fontified t face font-lock-type-face) 502 503 (fontified t) 503 510 (fontified t) 510 511 (fontified t) 511 515 (fontified t) 515 517 (fontified t) 517 518 (fontified t) 518 519 (fontified t) 519 523 (fontified t) 523 528 (fontified t face font-lock-keyword-face) 528 529 (fontified t) 529 532 (fontified t face font-lock-keyword-face) 532 533 (fontified t) 533 537 (fontified t face font-lock-type-face) 537 546 (fontified t) 546 556 (fontified t) 556 559 (fontified t) 559 561 (fontified t) 561 569 (fontified t) 569 571 (fontified t face font-lock-keyword-face) 571 577 (fontified t) 577 592 (fontified t) 592 606 (fontified t) 606 607 (fontified t syntax-table #2=(7) face font-lock-string-face) 607 608 (fontified t face font-lock-string-face) 608 609 (fontified t syntax-table #2# face font-lock-string-face) 609 610 (fontified t) 610 611 (fontified t) 611 612 (fontified t) 612 619 (fontified t) 619 624 (fontified t) 624 630 (fontified t) 630 632 (fontified t) 632 636 (fontified t face font-lock-keyword-face) 636 637 (fontified t) 637 638 (fontified t) 638 639 (fontified t) 639 651 (fontified t) 651 656 (fontified t face font-lock-keyword-face) 656 657 (fontified t) 657 658 (fontified t) 658 666 (fontified t) 666 667 (fontified t) 667 668 (fontified t) 668 672 (fontified t) 672 673 (fontified t) 673 674 (fontified t) 674 675 (fontified t) 675 676 (fontified t) 676 680 (fontified t) 680 683 (fontified t face font-lock-keyword-face) 683 684 (fontified t) 684 694 (fontified t face font-lock-variable-name-face) 694 697 (fontified t) 697 708 (fontified t) 708 712 (fontified t) 712 716 (fontified t) 716 718 (fontified t face font-lock-type-face) 718 719 (fontified t) 719 721 (fontified t) 721 726 (fontified t) 726 727 (fontified t) 727 742 (fontified t) 742 749 (fontified t) 749 750 (fontified t) 750 751 (fontified t) 751 752 (fontified t) 752 753 (fontified t) 753 754 (fontified t) 754 755 (fontified t) 755 757 (fontified t face font-lock-keyword-face) 757 758 (fontified t) 758 762 (fontified t face font-lock-function-name-face) 762 769 (fontified t) 769 776 (fontified t face font-lock-preprocessor-face) 776 777 (fontified t) 777 779 (fontified t face font-lock-keyword-face) 779 780 (fontified t) 780 794 (fontified t face font-lock-function-name-face) 794 803 (fontified t) 803 806 (fontified t face font-lock-keyword-face) 806 807 (fontified t) 807 816 (fontified t face font-lock-variable-name-face) 816 833 (fontified t) 833 846 (fontified t face font-lock-string-face) 846 853 (fontified t) 853 863 (fontified t face font-lock-preprocessor-face) 863 864 (fontified t) 864 866 (fontified t face font-lock-type-face) 866 868 (fontified t) 868 870 (fontified t face font-lock-string-face) 870 888 (fontified t) 888 901 (fontified t face font-lock-string-face) 901 909 (fontified t) 909 919 (fontified t face font-lock-preprocessor-face) 919 929 (fontified t) 929 931 (fontified t face font-lock-type-face) 931 933 (fontified t) 933 947 (fontified t face font-lock-string-face) 947 973 (fontified t) 973 998 (fontified t face font-lock-string-face) 998 1011 (fontified t) 1011 1021 (fontified t face font-lock-preprocessor-face) 1021 1022 (fontified t) 1022 1025 (fontified t face font-lock-type-face) 1025 1026 (fontified t) 1026 1040 (fontified t face font-lock-string-face) 1040 1053 (fontified t) 1053 1067 (fontified t face font-lock-string-face) 1067 1073 (fontified t)) . 1) (undo-tree-id514 . 324) (undo-tree-id515 . -610) (undo-tree-id516 . -1007) (undo-tree-id517 . -1071) (undo-tree-id518 . -1007) (undo-tree-id519 . -1007) (undo-tree-id520 . -1007) (undo-tree-id521 . -1007) (undo-tree-id522 . -1007) (undo-tree-id523 . -1007) (undo-tree-id524 . -1007) (undo-tree-id525 . -1007) (undo-tree-id526 . -1007) (undo-tree-id527 . -1007) (undo-tree-id528 . -1007) (undo-tree-id529 . -1007) (undo-tree-id530 . -1007) (undo-tree-id531 . -1007) (undo-tree-id532 . -1007) (undo-tree-id533 . -1007) (undo-tree-id534 . -777) (undo-tree-id535 . -1007) (undo-tree-id536 . -1007) (undo-tree-id537 . -777) (undo-tree-id538 . -1007) (undo-tree-id539 . -1007) (undo-tree-id540 . -777) (undo-tree-id541 . -1007) (undo-tree-id542 . -1007) (undo-tree-id543 . -1007) (undo-tree-id544 . -1007) (undo-tree-id545 . -777) (undo-tree-id546 . -1007) (undo-tree-id547 . -1007) (undo-tree-id548 . -777) (undo-tree-id549 . -1007) (undo-tree-id550 . -1007) (undo-tree-id551 . -777) (undo-tree-id552 . -1007) (undo-tree-id553 . -1007) (undo-tree-id554 . -777) (undo-tree-id555 . -1007) (undo-tree-id556 . -777) (undo-tree-id557 . -1007) (undo-tree-id558 . -1007) (undo-tree-id559 . -610) (undo-tree-id560 . -610) (undo-tree-id561 . -610) (undo-tree-id562 . -727) (undo-tree-id563 . -726) (undo-tree-id564 . -387) (undo-tree-id565 . -672) (undo-tree-id566 . -672) (undo-tree-id567 . -387) (undo-tree-id568 . -672) (undo-tree-id569 . -387) (undo-tree-id570 . -672) (undo-tree-id571 . -672) (undo-tree-id572 . -672) (undo-tree-id573 . -672) (undo-tree-id574 . -387) (undo-tree-id575 . -672) (undo-tree-id576 . -672) (undo-tree-id577 . -387) (undo-tree-id578 . -85) (undo-tree-id579 . -254) (undo-tree-id580 . -312) (undo-tree-id581 . -254) (undo-tree-id582 . -312) (undo-tree-id583 . -833) (undo-tree-id584 . -834) (undo-tree-id585 . -666) (undo-tree-id586 . -667) (undo-tree-id587 . -637) (undo-tree-id588 . -638) (undo-tree-id589 . -630) (undo-tree-id590 . -631) (undo-tree-id591 . -610) (undo-tree-id592 . -611) (undo-tree-id593 . -559) (undo-tree-id594 . -560) (undo-tree-id595 . -254) (undo-tree-id596 . -256) (undo-tree-id597 . -254) (undo-tree-id598 . -256) (undo-tree-id599 . -2) (undo-tree-id600 . -85) (undo-tree-id601 . -254) (undo-tree-id602 . -312) (undo-tree-id603 . -254) (undo-tree-id604 . -312) (undo-tree-id605 . -833) (undo-tree-id606 . -834) (undo-tree-id607 . -666) (undo-tree-id608 . -667) (undo-tree-id609 . -637) (undo-tree-id610 . -638) (undo-tree-id611 . -630) (undo-tree-id612 . -631) (undo-tree-id613 . -610) (undo-tree-id614 . -611) (undo-tree-id615 . -559) (undo-tree-id616 . -560) (undo-tree-id617 . 514) (undo-tree-id618 . -560) (undo-tree-id619 . 513) (undo-tree-id620 . -672) (undo-tree-id621 . 401) (undo-tree-id622 . -673) 673) nil (23739 22704 828746 504000) 0 nil]) ((#(" " 0 1 (fontified t)) . 673)) nil (23739 22704 828759 733000) 0 nil]) ((#("_" 0 1 (fontified t)) . 673) (undo-tree-id623 . -1) (t 23739 22697 491137 349000)) nil (23739 22704 828764 136000) 0 nil]) ((743 . 752) (#("]" 0 1 (fontified nil)) . 743) (742 . 743) (740 . 742) (730 . 740) (#("next" 0 4 (fontified t)) . -730) (undo-tree-id508 . -4) (undo-tree-id509 . -4) 734 (730 . 734) (729 . 731) (#("[" 0 1 (fontified nil)) . -729) (723 . 730) (#("*" 0 1 (fontified t)) . -723) (undo-tree-id510 . -1) (undo-tree-id511 . -1) 724 (723 . 724) (722 . 724) (#("(" 0 1 (fontified nil)) . -722) (722 . 723) (721 . 723) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -721) (719 . 722) (#(")" 0 1 (fontified nil)) . -719) (719 . 720) (#(" " 0 1 (fontified nil)) . -719) (719 . 720) (#(")" 0 1 (fontified nil)) . -719) (719 . 720) (714 . 719) (713 . 714) (#(")" 0 1 (fontified nil)) . 713) (712 . 713) (711 . 713) (#("(" 0 1 (fontified nil)) . -711) (707 . 712) (704 . 707) (683 . 704) (679 . 683) (#("    " 0 4 (fontified nil)) . 678) (undo-tree-id512 . -4) (undo-tree-id513 . -4) (682 . 683) (677 . 682) (t 23739 22645 828023 90000) 669) nil (23739 22697 471317 768000) 0 nil]) ((653 . 658) (652 . 653) (639 . 652) 570) nil (23739 22645 815310 93000) 0 nil]) ((#("," 0 1 (fontified t)) . 649) (undo-tree-id499 . -1) (undo-tree-id500 . -1)) nil (23739 22645 815323 910000) 0 nil]) ((639 . 648) (638 . 640) (#("{" 0 1 (fontified nil)) . -638) (632 . 639)) nil (23739 22645 815328 114000) 0 nil]) ((631 . 632) (#("}" 0 1 (fontified t)) . -625) (undo-tree-id501 . 1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (625 . 626) (#("}" 0 1 (fontified t)) . -620) (620 . 621) (#("}" 0 1 (fontified t)) . -612) (611 . 613) (#("{" 0 1 (fontified nil)) . -611) (611 . 612)) nil (23739 22645 815338 901000) 0 nil]) ((#("r" 0 1 (fontified t)) . 611) (undo-tree-id505 . -1) (undo-tree-id506 . -1)) nil (23739 22645 815344 405000) 0 nil]) ((611 . 612) (#(">" 0 1 (fontified t syntax-table #1#)) . 611) (undo-tree-id507 . 1)) nil (23739 22645 815347 959000) 0 nil]) ((#("=" 0 1 (fontified t)) . 611)) nil (23739 22645 815349 713000) 0 nil] [nil nil ((#("=" 0 1 (fontified t)) . 611)) ((611 . 612)) (23739 22613 951197 135000) 0 nil] [nil nil ((#("=" 0 1 (fontified t)) . 611)) ((611 . 612)) (23739 22608 479119 953000) 0 nil]) ((638 . 640) (634 . 638) (562 . 570) (#("    " 0 4 (fontified nil)) . 562) (629 . 630) (628 . 629) (#(")" 0 1 (fontified nil)) . 628) (623 . 628) (622 . 624) (#("(" 0 1 (fontified nil)) . -622) (619 . 623) (#("s" 0 1 (fontified t)) . -619) (undo-tree-id467 . -1) (undo-tree-id468 . -1) 620 (610 . 620) (#("{}" 0 1 (fontified t) 1 2 (fontified t)) . 610) (undo-tree-id469 . -1) (undo-tree-id470 . -1) 611 (610 . 612) (#("{" 0 1 (fontified nil)) . -610) (608 . 611) (#(" " 0 1 (fontified nil)) . -608) (608 . 609) (#(">" 0 1 (fontified nil syntax-table #1#)) . -608) (608 . 609) (#("?" 0 1 (fontified t face rust-question-mark-face)) . -608) (undo-tree-id471 . -1) (undo-tree-id472 . -1) 609 (607 . 609) (606 . 607) (#("'" 0 1 (fontified nil face font-lock-string-face)) . 606) (604 . 606) (603 . 605) (#("'" 0 1 (fontified nil)) . -603) (594 . 604) (591 . 594) (#(")" 0 1 (fontified nil)) . 591) (590 . 591) (589 . 591) (#("(" 0 1 (fontified nil)) . -589) (589 . 590) (574 . 589) (#("is" 0 2 (fontified t)) . -574) (undo-tree-id473 . -2) (undo-tree-id474 . -2) 576 (573 . 576) (#(" " 0 1 (fontified t)) . -573) (undo-tree-id475 . -1) (undo-tree-id476 . -1) 574 (571 . 574) (#("c" 0 1 (fontified t)) . -571) (undo-tree-id477 . -1) (undo-tree-id478 . -1) 572 (566 . 572) (561 . 566) (560 . 562) (#("{" 0 1 (fontified nil)) . -560) (559 . 561) (#(")" 0 1 (fontified nil)) . 559) (558 . 559) (557 . 559) (#("(" 0 1 (fontified nil)) . -557) (557 . 558) (545 . 557) (#("-" 0 1 (fontified t)) . -545) (undo-tree-id479 . -1) (undo-tree-id480 . -1) 546 (545 . 546) (#("c" 0 1 (fontified t)) . -545) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (#("h" 0 1 (fontified t)) . -546) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (#("a" 0 1 (fontified t)) . -547) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -548) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (#("s" 0 1 (fontified t)) . -549) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (#("." 0 1 (fontified t)) . -550) (undo-tree-id491 . -1) (undo-tree-id492 . -1) 551 (549 . 551) (544 . 549) (#(")" 0 1 (fontified nil)) . 544) (539 . 544) (538 . 540) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -538) (529 . 539)) nil (23739 22613 955727 296000) 0 nil]) ((517 . 518)) nil (23739 22608 479347 911000) 0 nil]) ((523 . 529) (519 . 523) (#("    " 0 4 (fontified nil)) . 518) (undo-tree-id493 . -4) (undo-tree-id494 . -4) (522 . 523) (517 . 522) 516) nil (23739 22608 479364 424000) 0 nil]) ((510 . 511) (#(")" 0 1 (fontified nil)) . 510) (504 . 510) (503 . 505) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -503) (500 . 504) (#("e" 0 1 (fontified t)) . -500) (undo-tree-id495 . -1) (undo-tree-id496 . -1) 501 (491 . 501) (#(" " 0 1 (fontified nil)) . -491) (491 . 492) (#(">" 0 1 (fontified nil syntax-table #1#)) . -491) (488 . 492) (479 . 488) (478 . 479) (#(")" 0 1 (fontified nil)) . 478) (473 . 478) (472 . 474) (#("(" 0 1 (fontified nil)) . -472) (472 . 473) (470 . 472) (458 . 470) (#(" " 0 1 (fontified nil)) . -458) (458 . 459) (#(">" 0 1 (fontified nil syntax-table #1#)) . -458) (456 . 459) (#(")" 0 1 (fontified nil)) . 456) (455 . 456) (454 . 456) (#("(" 0 1 (fontified nil)) . -454) (449 . 455) (440 . 449) (438 . 440) (#("e" 0 1 (fontified t)) . -438) (undo-tree-id497 . -1) (undo-tree-id498 . -1) 439 (432 . 439) (#(")" 0 1 (fontified nil)) . 432) (427 . 432) (426 . 428) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -426) (422 . 427) (413 . 422) 392) nil (23739 22608 479423 346000) 0 nil] [nil nil ((#("    " 0 4 (fontified t)) . -389) (undo-tree-id420 . -4) (undo-tree-id421 . -4) (undo-tree-id422 . -4) (undo-tree-id423 . -4) (undo-tree-id424 . -4) (undo-tree-id425 . -4) (undo-tree-id426 . -4) (undo-tree-id427 . -4) (undo-tree-id428 . -4) 393 (389 . 393) (389 . 390) 392) ((#("
" 0 1 (fontified nil)) . 389) (undo-tree-id457 . 1) (#("    " 0 4 (fontified nil)) . 389) (undo-tree-id458 . -4) (undo-tree-id459 . -4) (undo-tree-id460 . -4) (undo-tree-id461 . -4) (undo-tree-id462 . -4) (undo-tree-id463 . -4) (undo-tree-id464 . -4) (undo-tree-id465 . -4) (undo-tree-id466 . -4) (389 . 393)) (23739 22403 150994 494000) 0 nil]) ((413 . 418) (412 . 414) (#("{" 0 1 (fontified nil)) . -412) (undo-tree-id429 . -1) (undo-tree-id430 . -1) (411 . 413) (#(")" 0 1 (fontified nil)) . 411) (undo-tree-id431 . -1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . -1) (410 . 411) (409 . 411) (#("(" 0 1 (fontified nil)) . -409) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (402 . 410) (393 . 402) (389 . 393) (#("    " 0 4 (fontified nil)) . 388) (undo-tree-id437 . -4) (undo-tree-id438 . -4) (392 . 393) (387 . 392) (386 . 387) (#(")" 0 1 (fontified nil)) . 386) (385 . 386) (384 . 386) (#("(" 0 1 (fontified nil)) . -384) (384 . 385) (#("*" 0 1 (fontified t)) . -384) (undo-tree-id439 . -1) (undo-tree-id440 . -1) 385 (#("()" 0 1 (fontified t) 1 2 (fontified t)) . 385) (undo-tree-id441 . -1) (undo-tree-id442 . -1) 386 (385 . 387) (#("(" 0 1 (fontified nil)) . -385) (371 . 386) (#("-" 0 1 (fontified t)) . -371) (undo-tree-id443 . -1) (undo-tree-id444 . -1) 372 (357 . 372) (352 . 357) (351 . 352) (#(")" 0 1 (fontified nil)) . 351) (350 . 351) (349 . 351) (#("(" 0 1 (fontified nil)) . -349) (349 . 350) (#("*" 0 1 (fontified t)) . -349) (undo-tree-id445 . -1) (undo-tree-id446 . -1) 350 (344 . 350) (336 . 344) (#("-" 0 1 (fontified t)) . -336) (undo-tree-id447 . -1) (undo-tree-id448 . -1) 337 (320 . 337) (315 . 320) 255) nil (23739 22403 156419 541000) 0 nil]) ((315 . 316) (314 . 316) (#("{" 0 1 (fontified nil)) . -314) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (313 . 315) (#(">" 0 1 (fontified nil syntax-table #1#)) . 313) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (312 . 313) (#(" " 0 1 (fontified nil)) . -312) (312 . 313) (#(">" 0 1 (fontified nil face font-lock-type-face)) . -312) (306 . 313) (#(")" 0 1 (fontified nil)) . 306) (305 . 306) (#(" " 0 1 (fontified nil)) . -305) (305 . 306) (#(")" 0 1 (fontified nil face font-lock-type-face)) . -305) (293 . 306) (#("*" 0 1 (fontified t)) . -293) (undo-tree-id455 . -1) (undo-tree-id456 . -1) 294 (293 . 294) (292 . 294) (#("(" 0 1 (fontified nil)) . -292) (292 . 293) (291 . 293) (#("<" 0 1 (fontified nil face font-lock-type-face)) . -291) (283 . 292) (#(" " 0 1 (fontified nil)) . -283) (283 . 284) (#(">" 0 1 (fontified nil syntax-table #1#)) . -283) (281 . 284) (#(")" 0 1 (fontified nil)) . 281) (273 . 281) (269 . 273) (268 . 270) (#("(" 0 1 (fontified nil face font-lock-function-name-face)) . -268) (255 . 269) (254 . 255) (253 . 254) 252) nil (23739 22403 151112 566000) 0 nil]) ((253 . 254) (t 23739 22127 146707 683000) 252) nil (23739 22403 151124 638000) 0 nil]) ((1 . 572) (#("fn match_literal(expected: &'static str) -> impl Fn(&str) -> Result<(&str, ()), &str> {
    move |input| match input.get(0..expected.len()) {
        Some(next) if next == expected => Ok((&input[expected.len()..], ())),
        _ => Err(input),
    }
}
fn main() {}

#[test]
fn literal_parser() {
    let parse_joe = match_literal(\"Hello, Joe!\");
    assert_eq!(
        Ok((\"\", ())),
        parse_joe(\"Hello, Joe!\")
    );
    assert_eq!(
        Ok((\" Hello, Bob!\", ())),
        parse_joe(\"Hello, Joe! Hello, Bob!\")
    );
    assert_eq!(
        Err(\"Hello, Mike!\"),
        parse_joe(\"Hello, Mike!\")
    );
}
" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t) 17 25 (fontified t face font-lock-variable-name-face) 25 29 (fontified t) 29 35 (fontified t face font-lock-keyword-face) 35 36 (fontified t) 36 39 (fontified t face font-lock-type-face) 39 42 (fontified t) 42 43 (fontified t syntax-table #1#) 43 44 (fontified t) 44 48 (fontified t face font-lock-keyword-face) 48 49 (fontified t) 49 51 (fontified t face font-lock-type-face) 51 53 (fontified t) 53 56 (fontified t face font-lock-type-face) 56 59 (fontified t) 59 60 (fontified t syntax-table #1#) 60 61 (fontified t) 61 67 (fontified t face font-lock-type-face) 67 70 (fontified t) 70 73 (fontified t face font-lock-type-face) 73 81 (fontified t) 81 84 (fontified t face font-lock-type-face) 84 87 (fontified t) 87 92 (fontified t) 92 96 (fontified t face font-lock-keyword-face) 96 105 (fontified t) 105 110 (fontified t face font-lock-keyword-face) 110 150 (fontified t) 150 154 (fontified t face font-lock-type-face) 154 161 (fontified t) 161 163 (fontified t face font-lock-keyword-face) 163 182 (fontified t) 182 183 (fontified t syntax-table #1#) 183 184 (fontified t) 184 186 (fontified t face font-lock-type-face) 186 231 (fontified t) 231 232 (fontified t syntax-table #1#) 232 233 (fontified t) 233 236 (fontified t face font-lock-type-face) 236 253 (fontified t) 253 255 (fontified t face font-lock-keyword-face) 255 256 (fontified t) 256 260 (fontified t face font-lock-function-name-face) 260 266 (fontified t) 266 267 (fontified t) 267 268 (fontified t face font-lock-preprocessor-face) 268 273 (fontified t face font-lock-preprocessor-face) 273 274 (fontified t face font-lock-preprocessor-face) 274 275 (fontified t) 275 277 (fontified t face font-lock-keyword-face) 277 278 (fontified t) 278 292 (fontified t face font-lock-function-name-face) 292 295 (fontified t) 295 296 (fontified t) 296 297 (fontified t) 297 301 (fontified t) 301 304 (fontified t face font-lock-keyword-face) 304 305 (fontified t) 305 314 (fontified t face font-lock-variable-name-face) 314 317 (fontified t) 317 330 (fontified t) 330 331 (fontified t) 331 343 (fontified t face font-lock-string-face) 343 344 (fontified t face font-lock-string-face) 344 347 (fontified t) 347 351 (fontified t) 351 361 (fontified t face font-lock-preprocessor-face) 361 362 (fontified t) 362 363 (fontified t) 363 371 (fontified t) 371 373 (fontified t face font-lock-type-face) 373 374 (fontified t) 374 375 (fontified t) 375 377 (fontified t face font-lock-string-face) 377 379 (fontified t) 379 385 (fontified t) 385 402 (fontified t) 402 403 (fontified t) 403 415 (fontified t face font-lock-string-face) 415 416 (fontified t face font-lock-string-face) 416 417 (fontified t) 417 418 (fontified t) 418 422 (fontified t) 422 424 (fontified t) 424 425 (fontified t) 425 429 (fontified t) 429 439 (fontified t face font-lock-preprocessor-face) 439 440 (fontified t) 440 441 (fontified t) 441 449 (fontified t) 449 451 (fontified t face font-lock-type-face) 451 452 (fontified t) 452 453 (fontified t) 453 467 (fontified t face font-lock-string-face) 467 469 (fontified t) 469 475 (fontified t) 475 492 (fontified t) 492 493 (fontified t) 493 517 (fontified t face font-lock-string-face) 517 518 (fontified t face font-lock-string-face) 518 519 (fontified t) 519 520 (fontified t) 520 524 (fontified t) 524 526 (fontified t) 526 527 (fontified t) 527 530 (fontified t) 530 531 (rear-nonsticky t fontified t) 531 541 (fontified t face font-lock-preprocessor-face) 541 542 (fontified t) 542 543 (fontified t) 543 551 (fontified t) 551 554 (fontified t face font-lock-type-face) 554 555 (fontified t) 555 569 (fontified t face font-lock-string-face) 569 572 (fontified t) 572 589 (fontified t) 589 590 (fontified t) 590 603 (fontified t face font-lock-string-face) 603 604 (fontified t face font-lock-string-face) 604 605 (fontified t) 605 606 (fontified t) 606 610 (fontified t) 610 612 (fontified t) 612 613 (fontified t) 613 614 (fontified nil) 614 615 (fontified nil)) . 1) (undo-tree-id369 . 12) (undo-tree-id370 . -425) (undo-tree-id371 . -347) (undo-tree-id372 . 2) (undo-tree-id373 . -423) (undo-tree-id374 . -352) (undo-tree-id375 . -425) (undo-tree-id376 . -425) (undo-tree-id377 . -542) (undo-tree-id378 . -527) (undo-tree-id379 . -551) (undo-tree-id380 . -551) (undo-tree-id381 . -551) (undo-tree-id382 . -551) (undo-tree-id383 . -551) (undo-tree-id384 . -551) (undo-tree-id385 . -555) (undo-tree-id386 . -567) (undo-tree-id387 . -568) (undo-tree-id388 . -555) (undo-tree-id389 . -555) (undo-tree-id390 . -555) (undo-tree-id391 . -555) (undo-tree-id392 . -555) (undo-tree-id393 . -555) (undo-tree-id394 . -555) (undo-tree-id395 . -555) (undo-tree-id396 . -567) (undo-tree-id397 . -555) (undo-tree-id398 . -555) (undo-tree-id399 . -567) (undo-tree-id400 . -610) (undo-tree-id401 . -611) (undo-tree-id402 . -295) (undo-tree-id403 . -296) (undo-tree-id404 . -613) (undo-tree-id405 . -614) (undo-tree-id406 . -2) (undo-tree-id407 . -85) (undo-tree-id408 . 60) (undo-tree-id409 . -556) (undo-tree-id410 . 59) (undo-tree-id411 . -568) (undo-tree-id412 . 47) (undo-tree-id413 . -569) (615 . 616) 556) nil (23739 22127 137970 506000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 570) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . 1) (#("(" 0 1 (fontified t)) . 556) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) 569) nil (23739 22127 137993 926000) 0 nil] [nil nil ((571 . 572) (556 . 557) (#(")" 0 1 (fontified nil)) . 570) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . 1) (#("(" 0 1 (fontified t)) . 556) (undo-tree-id359 . -1) 569) ((556 . 557) (570 . 571) (#("" 0 1 (fontified nil)) . 556) (undo-tree-id366 . -1) (undo-tree-id367 . -1) (undo-tree-id368 . -1) (#("" 0 1 (fontified t)) . 571)) (23739 22123 177201 943000) 0 nil]) ((601 . 606) (#("Joe" 0 3 (fontified t face font-lock-string-face)) . 601)) nil (23739 22123 190624 287000) 0 nil]) ((#(", ()" 0 2 (fontified t) 2 4 (fontified t)) . 571)) nil (23739 22123 177229 473000) 0 nil]) ((558 . 570)) nil (23739 22123 177236 4000) 0 nil]) ((552 . 555) (#("Ok" 0 2 (fontified t face font-lock-type-face)) . 552)) nil (23739 22123 177242 977000) 0 nil]) ((#("``" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 518) (undo-tree-id360 . -1) 519 (518 . 520) (#("`" 0 1 (fontified nil)) . -518) (518 . 519) (#(" " 0 1 (fontified nil)) . -518) (518 . 519) (#("`" 0 1 (fontified nil face font-lock-string-face)) . -518) (518 . 519) (#("j" 0 1 (fontified t face font-lock-string-face)) . -518) (undo-tree-id361 . -1) 519 (518 . 519) (512 . 518) (505 . 512) (#("A" 0 1 (fontified t face font-lock-string-face)) . -505) (undo-tree-id362 . -1) 506 (505 . 506)) nil (23739 22123 177280 511000) 0 nil]) ((415 . 416)) nil (23739 22123 177295 208000) 0 nil]) ((#("j" 0 1 (fontified t face font-lock-string-face)) . -466) (undo-tree-id363 . -1) 467 (462 . 467) (#("b" 0 1 (fontified t face font-lock-string-face)) . -462) (undo-tree-id364 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -463) (undo-tree-id365 . -1) 464 (460 . 464) (454 . 460)) nil (23739 22123 177319 352000) 0 nil] [nil nil ((425 . 502) 429) ((#("    assert_eq!(
        Ok((\"\", ())),
        parse_joe(\"Hello, Joe\")
    );
" 0 4 (fontified t) 4 14 (fontified t face font-lock-preprocessor-face) 14 15 (fontified t) 15 16 (fontified t) 16 24 (fontified t) 24 26 (fontified t face font-lock-type-face) 26 27 (fontified t) 27 28 (fontified t) 28 30 (fontified t face font-lock-string-face) 30 32 (fontified t) 32 38 (fontified t) 38 55 (fontified t) 55 56 (fontified t) 56 67 (fontified t face font-lock-string-face) 67 68 (fontified t face font-lock-string-face) 68 69 (fontified t) 69 70 (fontified t) 70 74 (fontified t) 74 76 (fontified t) 76 77 (fontified t)) . 425) (undo-tree-id350 . -77) (undo-tree-id351 . -76) (undo-tree-id352 . -4) (undo-tree-id353 . -4) (undo-tree-id354 . -4) (undo-tree-id355 . -4)) (23739 22027 106632 486000) 0 nil]) ((425 . 502) 429) nil (23739 22027 112701 658000) 0 nil] [nil nil ((nil rear-nonsticky nil 444 . 445) (#("
" 0 1 (fontified nil)) . -517) (440 . 518) 429) ((#("
    assert_eq!(
        Ok((\"\", ())),
        parse_joe(\"Hello, Joe\")
    );
" 0 1 (fontified t) 1 4 (fontified nil) 4 5 (fontified nil rear-nonsticky nil) 5 15 (fontified nil face font-lock-preprocessor-face) 15 16 (fontified nil) 16 17 (fontified nil) 17 25 (fontified t) 25 27 (fontified t face font-lock-type-face) 27 28 (fontified t) 28 29 (fontified t) 29 31 (fontified t face font-lock-string-face) 31 33 (fontified t) 33 39 (fontified t) 39 56 (fontified t) 56 57 (fontified t) 57 68 (fontified t face font-lock-string-face) 68 69 (fontified t face font-lock-string-face) 69 70 (fontified t) 70 71 (fontified t) 71 75 (fontified nil) 75 77 (fontified nil) 77 78 (fontified nil)) . 440) (undo-tree-id339 . -77) (undo-tree-id340 . -1) (undo-tree-id341 . -77) (undo-tree-id342 . -5) (undo-tree-id343 . -5) (undo-tree-id344 . -76) (undo-tree-id345 . -77) (undo-tree-id346 . -76) (undo-tree-id347 . -77) (undo-tree-id348 . -76) (undo-tree-id349 . -77) (517 . 518) (nil rear-nonsticky t 444 . 445)) (23739 22023 841475 530000) 0 nil]) ((nil rear-nonsticky nil 428 . 429) (#("
" 0 1 (fontified nil)) . -501) (424 . 502) 423) nil (23739 22023 852088 691000) 0 nil]) ((423 . 424)) nil (23739 22023 841501 690000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 417) (416 . 417) (#(" " 0 1 (fontified nil)) . -416) (416 . 417) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -416) (416 . 417) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 416) (415 . 416) (#(" " 0 1 (fontified nil)) . -415) (415 . 416) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -415) (412 . 416) (#("H" 0 1 (fontified t face font-lock-string-face)) . -412) (undo-tree-id335 . -1) 413 (410 . 413) (#("k" 0 1 (fontified t face font-lock-string-face)) . -410) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -411) (undo-tree-id338 . -1) 412 (405 . 412) (404 . 406) (#("\"" 0 1 (fontified nil)) . -404) (404 . 405) (403 . 405) (#("(" 0 1 (fontified nil)) . -403) (403 . 404) (394 . 403) (385 . 394) (384 . 385) (#(")" 0 1 (fontified nil)) . 384) (383 . 384) (#(")" 0 1 (fontified nil)) . 383) (382 . 383) (#(")" 0 1 (fontified nil)) . 382) (381 . 382) (380 . 382) (#("(" 0 1 (fontified nil)) . -380) (378 . 381) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 378) (377 . 378) (376 . 378) (#("\"" 0 1 (fontified nil)) . -376) (376 . 377) (375 . 377) (#("(" 0 1 (fontified nil)) . -375) (375 . 376) (374 . 376) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -374) (372 . 375) (363 . 372) 351) nil (23739 22023 841582 290000) 0 nil] [nil nil ((#("    " 0 4 (fontified t)) . -348) (undo-tree-id240 . -4) (undo-tree-id241 . -4) 352 (348 . 352) (348 . 349) 351) ((#("
" 0 1 (fontified nil)) . 348) (undo-tree-id332 . 1) (#("    " 0 4 (fontified nil)) . 348) (undo-tree-id333 . -4) (undo-tree-id334 . -4) (348 . 352)) (23739 21984 907097 578000) 0 nil]) ((363 . 368) (362 . 364) (#("(" 0 1 (fontified nil)) . -362) (358 . 363) (#("+" 0 1 (fontified t)) . -358) (undo-tree-id242 . -1) 359 (358 . 359) (352 . 358) (347 . 352) (346 . 347) (#(":" 0 1 (fontified t)) . -346) (undo-tree-id243 . -1) (undo-tree-id244 . -1) 347 (346 . 347) (#(")" 0 1 (fontified nil)) . 346) (345 . 346) (#(" " 0 1 (fontified nil)) . -345) (345 . 346) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -345) (345 . 346) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 345) (344 . 345) (#(" " 0 1 (fontified nil)) . -344) (344 . 345) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -344) (341 . 345) (340 . 341) (#("H" 0 1 (fontified t face font-lock-string-face)) . -340) (undo-tree-id245 . -1) 341 (333 . 341) (332 . 334) (#("\"" 0 1 (fontified nil)) . -332) (332 . 333) (331 . 333) (#("(" 0 1 (fontified nil)) . -331) (325 . 332) (#("t" 0 1 (fontified t)) . -325) (undo-tree-id246 . -1) (undo-tree-id247 . -1) (#("e" 0 1 (fontified t)) . -326) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#("r" 0 1 (fontified t)) . -327) (undo-tree-id250 . -1) (undo-tree-id251 . -1) (#("a" 0 1 (fontified t)) . -328) (undo-tree-id252 . -1) (undo-tree-id253 . -1) (#("t" 0 1 (fontified t)) . -329) (undo-tree-id254 . -1) (undo-tree-id255 . -1) (#("l" 0 1 (fontified t)) . -330) (undo-tree-id256 . -1) (undo-tree-id257 . -1) 331 (#("()" 0 1 (fontified t) 1 2 (fontified t)) . 331) (undo-tree-id258 . -1) (undo-tree-id259 . -1) 332 (#("\"\"" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 332) (undo-tree-id260 . -1) 333 (332 . 334) (#("\"" 0 1 (fontified nil)) . -332) (332 . 333) (331 . 333) (#("(" 0 1 (fontified nil)) . -331) (327 . 332) (306 . 327) (302 . 306) (297 . 302) 276) nil (23739 21984 926241 285000) 0 nil]) ((#("``" 0 1 (fontified t) 1 2 (fontified t)) . 298) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . -1) (undo-tree-id264 . -1) (undo-tree-id265 . -1) (undo-tree-id266 . -1) (undo-tree-id267 . -1) (undo-tree-id268 . -2) (undo-tree-id269 . -1) (undo-tree-id270 . -2) (undo-tree-id271 . -1) (undo-tree-id272 . -2) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . -2) (undo-tree-id276 . -1) (undo-tree-id277 . -2) (undo-tree-id278 . -1) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . -2) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (undo-tree-id289 . -1) (undo-tree-id290 . -2) (undo-tree-id291 . -1) (undo-tree-id292 . -2) (undo-tree-id293 . -1) (undo-tree-id294 . -2) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (undo-tree-id297 . -2) (undo-tree-id298 . -1) (undo-tree-id299 . -2) (undo-tree-id300 . -1) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -2) (undo-tree-id304 . 2) (undo-tree-id305 . -1) (undo-tree-id306 . 1) (undo-tree-id307 . -1) (undo-tree-id308 . 1) (undo-tree-id309 . -2) (undo-tree-id310 . -1) 299 (#("k" 0 1 (fontified t)) . -299) (undo-tree-id311 . -1) (undo-tree-id312 . 1) (undo-tree-id313 . -1) 300 (299 . 300) (298 . 300) (#("`" 0 1 (fontified nil)) . -298) (undo-tree-id314 . -1) (undo-tree-id315 . -1) (298 . 299) (297 . 298) (296 . 298) (#("{" 0 1 (fontified nil)) . -296) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (295 . 297) (#(")" 0 1 (fontified nil)) . 295) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (294 . 295) (293 . 295) (#("(" 0 1 (fontified nil face font-lock-function-name-face)) . -293) (285 . 294) (277 . 285) (#("u" 0 1 (fontified t)) . -277) (undo-tree-id321 . -1) (#(" " 0 1 (fontified t)) . -278) (undo-tree-id322 . -1) (#("l" 0 1 (fontified t)) . -279) (undo-tree-id323 . -1) (#("i" 0 1 (fontified t)) . -280) (undo-tree-id324 . -1) (#("t" 0 1 (fontified t)) . -281) (undo-tree-id325 . -1) (#("e" 0 1 (fontified t)) . -282) (undo-tree-id326 . -1) (#("r" 0 1 (fontified t)) . -283) (undo-tree-id327 . -1) (#("a" 0 1 (fontified t)) . -284) (undo-tree-id328 . -1) (#("l" 0 1 (fontified t)) . -285) (undo-tree-id329 . -1) (#("_" 0 1 (fontified t)) . -286) (undo-tree-id330 . -1) 287 (276 . 287) (275 . 276) (#("]" 0 1 (fontified nil face font-lock-preprocessor-face)) . 275) (274 . 275) (#(" " 0 1 (fontified nil)) . -274) (274 . 275) (#("]" 0 1 (fontified nil face font-lock-preprocessor-face)) . -274) (272 . 275) (#("t" 0 1 (fontified t face font-lock-preprocessor-face)) . -272) (undo-tree-id331 . -1) 273 (270 . 273) (269 . 271) (#("[" 0 1 (fontified nil)) . -269) (268 . 270) (267 . 268) (t 23739 21787 971029 550000) 267) nil (23739 21984 907505 64000) 0 nil]) ((1 . 267) (#("    fn match_literal(expected: &'static str) -> impl Fn(&str) -> Result<(&str, ()), &str> {
        move |input| match input.get(0..expected.len()) {
            Some(next) if next == expected => Ok((&input[expected.len()..], ())),
            _ => Err(input),
        }
    }
fn main() {
}
" 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t) 4 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 20 (fontified t face font-lock-function-name-face) 20 21 (fontified t) 21 29 (fontified t face font-lock-variable-name-face) 29 33 (fontified t) 33 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 43 (fontified t face font-lock-type-face) 43 46 (fontified t) 46 47 (fontified t syntax-table #1#) 47 48 (fontified t) 48 52 (fontified t face font-lock-keyword-face) 52 53 (fontified t) 53 55 (fontified t face font-lock-type-face) 55 57 (fontified t) 57 60 (fontified t face font-lock-type-face) 60 63 (fontified t) 63 64 (fontified t syntax-table #1#) 64 65 (fontified t) 65 71 (fontified t face font-lock-type-face) 71 74 (fontified t) 74 77 (fontified t face font-lock-type-face) 77 85 (fontified t) 85 88 (fontified t face font-lock-type-face) 88 100 (fontified t) 100 104 (fontified t face font-lock-keyword-face) 104 113 (fontified t) 113 118 (fontified t face font-lock-keyword-face) 118 162 (fontified t) 162 166 (fontified t face font-lock-type-face) 166 173 (fontified t) 173 175 (fontified t face font-lock-keyword-face) 175 194 (fontified t) 194 195 (fontified t syntax-table #1#) 195 196 (fontified t) 196 198 (fontified t face font-lock-type-face) 198 232 (fontified t) 232 247 (fontified t) 247 248 (fontified t syntax-table #1#) 248 249 (fontified t) 249 252 (fontified t face font-lock-type-face) 252 260 (fontified t) 260 277 (fontified t) 277 279 (fontified t face font-lock-keyword-face) 279 280 (fontified t) 280 284 (fontified t face font-lock-function-name-face) 284 288 (fontified t) 288 289 (fontified t) 289 291 (fontified t)) . 1) (undo-tree-id173 . -277) (undo-tree-id174 . -289) (undo-tree-id175 . 2) (undo-tree-id176 . -289) (undo-tree-id177 . -289) (undo-tree-id178 . -289) (undo-tree-id179 . -289) (undo-tree-id180 . -289) (undo-tree-id181 . -289) (undo-tree-id182 . -289) (undo-tree-id183 . -289) (undo-tree-id184 . -4) (undo-tree-id185 . -289) (undo-tree-id186 . -289) (undo-tree-id187 . -289) (undo-tree-id188 . -289) (undo-tree-id189 . -289) (undo-tree-id190 . -289) (undo-tree-id191 . -287) (undo-tree-id192 . -288) (undo-tree-id193 . -289) (undo-tree-id194 . -289) (undo-tree-id195 . -276) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4) (undo-tree-id200 . -4) (undo-tree-id201 . -4) (undo-tree-id202 . -89) (undo-tree-id203 . -4) (undo-tree-id204 . -6) (undo-tree-id205 . -4) (undo-tree-id206 . -89) (undo-tree-id207 . -4) (undo-tree-id208 . -4) (undo-tree-id209 . -4) (undo-tree-id210 . -4) 5) nil (23739 21787 960042 123000) 0 nil]) ((nil rear-nonsticky nil 4 . 5) (1 . 278)) nil (23739 21787 960051 483000) 0 nil]) ((#("    fn match_literal(expected: &'static str) -> impl Fn(&str) -> Result<(&str, ()), &str> {
        move |input| match input.get(0..expected.len()) {
            Some(next) if next == expected => Ok((&input[expected.len()..], ())),
            _ => Err(input),
        }
    }
" 0 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 20 (fontified t face font-lock-function-name-face) 20 21 (fontified t) 21 29 (fontified t face font-lock-variable-name-face) 29 33 (fontified t) 33 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 43 (fontified t face font-lock-type-face) 43 46 (fontified t) 46 47 (fontified t syntax-table #1#) 47 48 (fontified t) 48 52 (fontified t face font-lock-keyword-face) 52 53 (fontified t) 53 55 (fontified t face font-lock-type-face) 55 57 (fontified t) 57 60 (fontified t face font-lock-type-face) 60 63 (fontified t) 63 64 (fontified t syntax-table #1#) 64 65 (fontified t) 65 71 (fontified t face font-lock-type-face) 71 74 (fontified t) 74 77 (fontified t face font-lock-type-face) 77 85 (fontified t) 85 88 (fontified t face font-lock-type-face) 88 100 (fontified t) 100 104 (fontified t face font-lock-keyword-face) 104 113 (fontified t) 113 118 (fontified t face font-lock-keyword-face) 118 162 (fontified t) 162 166 (fontified t face font-lock-type-face) 166 173 (fontified t) 173 175 (fontified t face font-lock-keyword-face) 175 194 (fontified t) 194 195 (fontified t syntax-table #1#) 195 196 (fontified t) 196 198 (fontified t face font-lock-type-face) 198 232 (fontified t) 232 247 (fontified t) 247 248 (syntax-table #1# fontified t) 248 249 (fontified t) 249 252 (fontified t face font-lock-type-face) 252 260 (fontified t) 260 277 (fontified t)) . 13) (undo-tree-id211 . -276) (undo-tree-id212 . -4) (undo-tree-id213 . -89) (undo-tree-id214 . -4) (undo-tree-id215 . -6) (undo-tree-id216 . -4) (undo-tree-id217 . -89) (undo-tree-id218 . -5) (undo-tree-id219 . -276) (undo-tree-id220 . -5) (undo-tree-id221 . -5) (undo-tree-id222 . -97) (undo-tree-id223 . -97) (undo-tree-id224 . -97) (undo-tree-id225 . -97) (undo-tree-id226 . -276) (undo-tree-id227 . -277) (undo-tree-id228 . -5) (undo-tree-id229 . -276) (undo-tree-id230 . -276) (undo-tree-id231 . -266) (undo-tree-id232 . 187) (undo-tree-id233 . -91) (undo-tree-id234 . 186) (undo-tree-id235 . -275) (undo-tree-id236 . 2) (undo-tree-id237 . -276) (undo-tree-id238 . -252) (undo-tree-id239 . -253) 289 (t 23739 21768 501072 844000)) nil (23739 21787 960088 450000) 0 nil]) ((1 . 292) (#("fn main() {
    fn match_literal(expected: &'static str) -> impl Fn(&str) -> Result<(&str, ()), &str> {
        move |input| match input.get(0..expected.len()) {
            Some(next) if next == expected => Ok((&input[expected.len()..], ())),
            _ => Err(input),

        }}
}
" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 7 (fontified t face font-lock-function-name-face) 7 12 (fontified t) 12 16 (fontified t) 16 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 32 (fontified t face font-lock-function-name-face) 32 33 (fontified t) 33 41 (fontified t face font-lock-variable-name-face) 41 45 (fontified t) 45 51 (fontified t face font-lock-keyword-face) 51 52 (fontified t) 52 55 (fontified t face font-lock-type-face) 55 58 (fontified t) 58 59 (fontified t syntax-table #1#) 59 60 (fontified t) 60 64 (fontified t face font-lock-keyword-face) 64 65 (fontified t) 65 67 (fontified t face font-lock-type-face) 67 69 (fontified t) 69 72 (fontified t face font-lock-type-face) 72 75 (fontified t) 75 76 (fontified t syntax-table #1#) 76 77 (fontified t) 77 83 (fontified t face font-lock-type-face) 83 84 (fontified t) 84 86 (fontified t) 86 89 (fontified t face font-lock-type-face) 89 91 (fontified t) 91 97 (fontified t) 97 100 (fontified t face font-lock-type-face) 100 102 (fontified t) 102 104 (fontified t) 104 112 (fontified t) 112 116 (fontified t face font-lock-keyword-face) 116 118 (fontified t) 118 125 (fontified t) 125 130 (fontified t face font-lock-keyword-face) 130 131 (fontified t) 131 140 (fontified t) 140 144 (fontified t) 144 156 (fontified t) 156 160 (fontified t) 160 161 (fontified t) 161 162 (fontified t) 162 174 (fontified t) 174 178 (fontified t face font-lock-type-face) 178 185 (fontified t) 185 187 (fontified t face font-lock-keyword-face) 187 206 (fontified t) 206 207 (fontified t syntax-table #1#) 207 208 (fontified t) 208 210 (fontified t face font-lock-type-face) 210 211 (fontified t) 211 213 (fontified t) 213 218 (fontified t) 218 231 (fontified t) 231 235 (fontified t) 235 238 (fontified t) 238 240 (fontified t) 240 241 (fontified t) 241 244 (fontified t) 244 259 (fontified t) 259 260 (fontified t syntax-table #1#) 260 261 (fontified t) 261 264 (fontified t face font-lock-type-face) 264 265 (fontified t) 265 272 (fontified t) 272 273 (fontified t) 273 274 (fontified t) 274 282 (fontified t) 282 283 (fontified t) 283 284 (fontified t) 284 285 (fontified t) 285 287 (fontified t)) . 1) (undo-tree-id0 . 15) (undo-tree-id1 . -219) (undo-tree-id2 . -218) (undo-tree-id3 . -234) (undo-tree-id4 . -219) (undo-tree-id5 . -219) (undo-tree-id6 . -235) (undo-tree-id7 . -235) (undo-tree-id8 . -234) (undo-tree-id9 . -234) (undo-tree-id10 . -234) (undo-tree-id11 . -219) (undo-tree-id12 . -234) (undo-tree-id13 . -238) (undo-tree-id14 . -238) (undo-tree-id15 . -273) (undo-tree-id16 . -261) (undo-tree-id17 . -262) (undo-tree-id18 . -264) (undo-tree-id19 . -263) (undo-tree-id20 . -261) (undo-tree-id21 . -263) (undo-tree-id22 . -125) (undo-tree-id23 . -283) (undo-tree-id24 . -261) (undo-tree-id25 . -264) (undo-tree-id26 . -264) (undo-tree-id27 . -264) (undo-tree-id28 . -264) (undo-tree-id29 . -265) (undo-tree-id30 . -265) (undo-tree-id31 . -264) (undo-tree-id32 . -282) (undo-tree-id33 . -283) (undo-tree-id34 . -264) (undo-tree-id35 . -265) (undo-tree-id36 . -160) (undo-tree-id37 . -161) (undo-tree-id38 . -261) (undo-tree-id39 . -283) (undo-tree-id40 . -261) (undo-tree-id41 . -271) (undo-tree-id42 . -266) (undo-tree-id43 . -265) (undo-tree-id44 . -267) (undo-tree-id45 . -266) (undo-tree-id46 . -265) (undo-tree-id47 . -266) (undo-tree-id48 . -268) (undo-tree-id49 . -267) (undo-tree-id50 . -267) (undo-tree-id51 . -268) (undo-tree-id52 . -258) (undo-tree-id53 . -260) (undo-tree-id54 . -269) (undo-tree-id55 . -268) (undo-tree-id56 . -265) (undo-tree-id57 . -268) (undo-tree-id58 . -270) (undo-tree-id59 . -269) (undo-tree-id60 . -265) (undo-tree-id61 . -269) (undo-tree-id62 . -16) (undo-tree-id63 . -101) (undo-tree-id64 . -16) (undo-tree-id65 . -101) (undo-tree-id66 . -271) (undo-tree-id67 . -271) (undo-tree-id68 . -271) (undo-tree-id69 . -271) (undo-tree-id70 . -271) (undo-tree-id71 . -273) (undo-tree-id72 . -160) (undo-tree-id73 . -161) (undo-tree-id74 . -285) (undo-tree-id75 . -286) (undo-tree-id76 . -16) (undo-tree-id77 . -101) (undo-tree-id78 . -271) (undo-tree-id79 . -271) (undo-tree-id80 . -271) (undo-tree-id81 . -271) (undo-tree-id82 . -271) (undo-tree-id83 . -271) (undo-tree-id84 . -271) (undo-tree-id85 . -271) (undo-tree-id86 . -271) (undo-tree-id87 . -271) (undo-tree-id88 . -271) (undo-tree-id89 . -271) (undo-tree-id90 . -271) (undo-tree-id91 . -271) (undo-tree-id92 . -272) (undo-tree-id93 . -271) (undo-tree-id94 . -272) (undo-tree-id95 . -272) (undo-tree-id96 . -271) (undo-tree-id97 . -272) (undo-tree-id98 . -272) (undo-tree-id99 . -271) (undo-tree-id100 . -272) (undo-tree-id101 . -271) (undo-tree-id102 . -272) (undo-tree-id103 . -271) (undo-tree-id104 . -16) (undo-tree-id105 . -18) (undo-tree-id106 . -16) (undo-tree-id107 . -101) (undo-tree-id108 . -271) (undo-tree-id109 . -271) (undo-tree-id110 . -270) (undo-tree-id111 . -271) (undo-tree-id112 . -270) (undo-tree-id113 . -271) (undo-tree-id114 . -270) (undo-tree-id115 . -271) (undo-tree-id116 . -270) (undo-tree-id117 . -271) (undo-tree-id118 . -44) (undo-tree-id119 . -45) (undo-tree-id120 . -44) (undo-tree-id121 . -45) (undo-tree-id122 . -270) (undo-tree-id123 . -271) (undo-tree-id124 . -270) (undo-tree-id125 . -271) (undo-tree-id126 . -264) (undo-tree-id127 . -265) (undo-tree-id128 . -270) (undo-tree-id129 . -271) (undo-tree-id130 . -270) (undo-tree-id131 . -271) (undo-tree-id132 . -270) (undo-tree-id133 . -271) (undo-tree-id134 . -270) (undo-tree-id135 . -271) (undo-tree-id136 . -44) (undo-tree-id137 . -45) (undo-tree-id138 . -44) (undo-tree-id139 . -45) (undo-tree-id140 . -270) (undo-tree-id141 . -271) (undo-tree-id142 . -270) (undo-tree-id143 . -271) (undo-tree-id144 . -264) (undo-tree-id145 . -265) (undo-tree-id146 . 23) (undo-tree-id147 . -265) (undo-tree-id148 . 22) (undo-tree-id149 . -270) (undo-tree-id150 . 17) (undo-tree-id151 . -271) 272) nil (23739 21768 486086 805000) 0 nil]) ((272 . 273) (#(")" 0 1 (fontified nil)) . 272) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (266 . 272) (265 . 267) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -265) (undo-tree-id154 . -1) (262 . 266) (260 . 262) (#(" " 0 1 (fontified nil)) . -260) (260 . 261) (#(">" 0 1 (fontified nil syntax-table #1#)) . -260) (259 . 261) (#("0" 0 1 (fontified t)) . -259) (undo-tree-id155 . -1) 260 (257 . 260) (244 . 257) (243 . 244)) nil (23739 21768 486178 145000) 0 nil]) ((#("                " 0 16 (fontified t)) . -244) (undo-tree-id156 . -16) (undo-tree-id157 . -16) 260 (243 . 260) 240) nil (23739 21768 486208 710000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 241) (undo-tree-id158 . -1) (240 . 241) (239 . 241) (#("(" 0 1 (fontified nil)) . -239) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (237 . 240)) nil (23739 21768 486237 316000) 0 nil]) ((#("}" 0 1 (fontified nil)) . -236) (236 . 237) (#(" " 0 1 (fontified nil)) . -236) (236 . 237) (#("}" 0 1 (fontified nil)) . -236) (236 . 237) (#("," 0 1 (fontified t)) . -236) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (#(" " 0 1 (fontified t)) . -237) (undo-tree-id163 . -1) (undo-tree-id164 . -1) 238 (#("()" 0 2 (fontified t)) . 238) (undo-tree-id165 . -2) (undo-tree-id166 . -1) 239 (#(")" 0 1 (fontified nil)) . 240) (239 . 240) (238 . 240) (#("(" 0 1 (fontified nil)) . -238) (238 . 239) (234 . 238) (#(")" 0 1 (fontified nil)) . 234) (233 . 234) (232 . 234) (#("(" 0 1 (fontified nil)) . -232) (222 . 233) (220 . 222) (219 . 221) (#("[" 0 1 (fontified nil)) . -219) (213 . 220) (212 . 214) (#("(" 0 1 (fontified nil)) . -212) (212 . 213) (211 . 213) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -211) (209 . 212) (207 . 209) (#(" " 0 1 (fontified nil)) . -207) (207 . 208) (#(">" 0 1 (fontified nil syntax-table #1#)) . -207) (193 . 208) (#("=" 0 1 (fontified t)) . -193) (undo-tree-id167 . -1) 194 (185 . 194) (#(")" 0 1 (fontified nil)) . 185) (180 . 185) (179 . 181) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -179) (175 . 180) (#("s" 0 1 (fontified t)) . -175) (undo-tree-id168 . -1) 176 (175 . 176) (162 . 175) 112) nil (23739 21768 486356 655000) 0 nil]) ((163 . 171) (105 . 113) (#("    " 0 4 (fontified nil)) . 105) (158 . 159) (157 . 159) (#("{" 0 1 (fontified nil)) . -157) (156 . 158) (#(")" 0 1 (fontified nil)) . 156) (155 . 156) (#(")" 0 1 (fontified nil)) . 155) (154 . 155) (153 . 155) (#("(" 0 1 (fontified nil)) . -153) (149 . 154) (141 . 149) (#("ex" 0 2 (fontified t)) . -141) (undo-tree-id169 . -2) 143 (138 . 143) (137 . 139) (#("(" 0 1 (fontified nil)) . -137) (128 . 138) (125 . 128) (#(" " 0 1 (fontified t)) . -125) (undo-tree-id170 . -1) (#("h" 0 1 (fontified t)) . -126) (undo-tree-id171 . -1) 127 (109 . 127) (104 . 109) (103 . 105) (#("{" 0 1 (fontified nil)) . -103) (103 . 104) (102 . 103) (#(">" 0 1 (fontified nil syntax-table #1#)) . 102) (101 . 102) (#(")" 0 1 (fontified nil)) . -101) (101 . 102) (#(" " 0 1 (fontified nil)) . -101) (101 . 102) (#(")" 0 1 (fontified nil face font-lock-type-face)) . -101) (95 . 102) (#(")" 0 1 (fontified nil)) . 95) (94 . 95) (#(")" 0 1 (fontified nil)) . 94) (93 . 94) (92 . 94) (#("(" 0 1 (fontified nil)) . -92) (86 . 93) (85 . 87) (#("(" 0 1 (fontified nil)) . -85) (85 . 86) (84 . 86) (#("<" 0 1 (fontified nil face font-lock-type-face)) . -84) (79 . 85) (76 . 79) (#(" " 0 1 (fontified nil)) . -76) (76 . 77) (#(">" 0 1 (fontified nil syntax-table #1#)) . -76) (75 . 77) (74 . 75) (#(")" 0 1 (fontified nil)) . 74) (69 . 74) (68 . 70) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -68) (65 . 69) (63 . 65) (59 . 63) (#(" " 0 1 (fontified nil)) . -59) (59 . 60) (#(">" 0 1 (fontified nil syntax-table #1#)) . -59) (57 . 60) (#(")" 0 1 (fontified nil)) . 57) (42 . 57) (34 . 42) (33 . 35) (#("(" 0 1 (fontified nil face font-lock-function-name-face)) . -33) (25 . 34) (#(" " 0 1 (fontified t)) . -25) (undo-tree-id172 . -1) 26 (20 . 26) (17 . 20) (#("println!(\"Hello, world!\");" 0 8 (fontified t face rust-builtin-formatting-macro-face) 8 9 (fontified t) 9 24 (fontified t face font-lock-string-face) 24 26 (fontified t)) . 17) (t 23739 21367 994762 238000)) nil (23739 21768 486474 975000) 0 nil]) nil nil (23739 21768 486520 857000) 0 nil] #3# 13495 49 nil)