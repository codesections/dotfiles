"63697704af0a11be162b86159b0bfe1894887c44"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#3=[nil nil ((185 . 201) (#("w" 0 1 (fontified t face font-lock-doc-face)) . -185) (undo-tree-id79 . -1) (#("e" 0 1 (fontified t face font-lock-doc-face)) . -186) (undo-tree-id80 . -1) (#("b" 0 1 (fontified t face font-lock-doc-face)) . -187) (undo-tree-id81 . -1) (#("s" 0 1 (fontified t face font-lock-doc-face)) . -188) (undo-tree-id82 . -1) (#("o" 0 1 (fontified t face font-lock-doc-face)) . -189) (undo-tree-id83 . -1) (#("c" 0 1 (fontified t face font-lock-doc-face)) . -190) (undo-tree-id84 . -1) 191 (#("k" 0 1 (fontified t face font-lock-doc-face)) . -191) (undo-tree-id85 . -1) 192 (183 . 192) (162 . 183) (151 . 162) (150 . 151) 150) nil (23764 55780 118256 222000) 0 nil]) ((30 . 37) (24 . 30) (16 . 24) (#("e" 0 1 (fontified t face font-lock-doc-face)) . -16) (undo-tree-id86 . -1) 17 (14 . 17) (#(" " 0 1 (fontified t face font-lock-doc-face)) . -14) (undo-tree-id87 . -1) 15 (10 . 15) (8 . 10) (#("_" 0 1 (fontified t face font-lock-doc-face)) . -8) (undo-tree-id88 . -1) 9 (1 . 9) (1 . 2) 19) nil (23764 55780 118297 187000) 0 nil]) ((121 . 133) (#("handle_ws" 0 9 (fontified t face font-lock-function-name-face)) . 121) (t 23764 13561 331363 342000)) nil (23764 55780 118309 591000) 0 nil]) ((1 . 1273) (#("use futures::Async;
use crate::stream::StreamManager;
use futures::stream::Stream;
use futures::future::Future;

pub fn handle_ws(
    socket: warp::ws::WebSocket,
    mut stream: StreamManager,
) -> impl futures::future::Future<Item = (), Error = ()> {
    let (tx, rx) = futures::sync::mpsc::unbounded();
    let (ws_tx, mut ws_rx) = socket.split();
    warp::spawn(
        rx.map_err(|()| -> warp::Error { unreachable!() })
            .forward(ws_tx)
            .map_err(|_| ())
            .map(|_r| ()),
    );
    let event_stream = tokio::timer::Interval::new(
        std::time::Instant::now(),
        std::time::Duration::from_millis(100),
    )
    .take_while(move |_| {
        if ws_rx.poll().is_err() {
            futures::future::ok(false)
        } else {
            futures::future::ok(true)
        }
    });

    event_stream
        .for_each(move |_json_value| {
            if let Ok(Async::Ready(Some(json_value))) = stream.poll() {
                let msg = warp::ws::Message::text(json_value.to_string());
                if !tx.is_closed() {
                    tx.unbounded_send(msg).expect(\"No send error\");
                }
            };
            Ok(())
        })
        .then(|msg| msg)
        .map_err(|e| println!(\"{}\", e))
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 13 (fontified t) 13 18 (fontified t face font-lock-type-face) 18 19 (fontified t) 19 20 (fontified t) 20 23 (fontified t face font-lock-keyword-face) 23 24 (fontified t) 24 29 (fontified t face font-lock-keyword-face) 29 31 (fontified t) 31 37 (fontified t face font-lock-constant-face) 37 39 (fontified t) 39 52 (fontified t face font-lock-type-face) 52 53 (fontified t) 53 54 (fontified t) 54 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t) 58 65 (fontified t face font-lock-constant-face) 65 67 (fontified t) 67 73 (fontified t face font-lock-constant-face) 73 75 (fontified t) 75 81 (fontified t face font-lock-type-face) 81 82 (fontified t) 82 83 (rear-nonsticky t fontified t) 83 86 (fontified t face font-lock-keyword-face) 86 87 (fontified t) 87 94 (fontified t face font-lock-constant-face) 94 96 (fontified t) 96 102 (fontified t face font-lock-constant-face) 102 104 (fontified t) 104 110 (fontified t face font-lock-type-face) 110 111 (fontified t) 111 112 (fontified t) 112 113 (fontified t) 113 116 (fontified t face font-lock-keyword-face) 116 117 (fontified t) 117 119 (fontified t face font-lock-keyword-face) 119 120 (fontified t) 120 129 (fontified t face font-lock-function-name-face) 129 130 (fontified t) 130 131 (fontified t) 131 135 (fontified t) 135 141 (fontified t face font-lock-variable-name-face) 141 143 (fontified t) 143 147 (fontified t face font-lock-constant-face) 147 149 (fontified t) 149 151 (fontified t face font-lock-constant-face) 151 153 (fontified t) 153 162 (fontified t face font-lock-type-face) 162 168 (fontified t) 168 171 (fontified t face font-lock-keyword-face) 171 172 (fontified t) 172 178 (fontified t face font-lock-variable-name-face) 178 180 (fontified t) 180 193 (fontified t face font-lock-type-face) 193 198 (fontified t) 198 199 (syntax-table #1=(1) fontified t) 199 200 (fontified t) 200 204 (fontified t face font-lock-keyword-face) 204 205 (fontified t) 205 212 (fontified t face font-lock-constant-face) 212 214 (fontified t) 214 220 (fontified t face font-lock-constant-face) 220 222 (fontified t) 222 228 (fontified t face font-lock-type-face) 228 229 (fontified t) 229 233 (fontified t face font-lock-type-face) 233 240 (fontified t) 240 245 (fontified t face font-lock-type-face) 245 258 (fontified t) 258 261 (fontified t face font-lock-keyword-face) 261 273 (fontified t) 273 280 (fontified t face font-lock-constant-face) 280 282 (fontified t) 282 286 (fontified t face font-lock-constant-face) 286 288 (fontified t) 288 292 (fontified t face font-lock-constant-face) 292 311 (fontified t) 311 314 (fontified t face font-lock-keyword-face) 314 323 (fontified t) 323 326 (fontified t face font-lock-keyword-face) 326 356 (fontified t) 356 360 (fontified t face font-lock-constant-face) 360 394 (fontified t) 394 395 (syntax-table #1# fontified t) 395 396 (fontified t) 396 400 (fontified t face font-lock-constant-face) 400 402 (fontified t) 402 407 (fontified t face font-lock-type-face) 407 410 (fontified t) 410 422 (fontified t face font-lock-preprocessor-face) 422 523 (fontified t) 523 526 (fontified t face font-lock-keyword-face) 526 527 (fontified t) 527 539 (fontified t face font-lock-variable-name-face) 539 542 (fontified t) 542 547 (fontified t face font-lock-constant-face) 547 549 (fontified t) 549 554 (fontified t face font-lock-constant-face) 554 556 (fontified t) 556 564 (face font-lock-type-face fontified t) 564 571 (fontified t) 571 579 (fontified t) 579 582 (fontified t face font-lock-constant-face) 582 584 (fontified t) 584 588 (fontified t face font-lock-constant-face) 588 590 (fontified t) 590 597 (fontified t face font-lock-type-face) 597 612 (fontified t) 612 613 (fontified t) 613 614 (fontified t) 614 617 (fontified t face font-lock-constant-face) 617 619 (fontified t) 619 623 (fontified t face font-lock-constant-face) 623 625 (fontified t) 625 630 (fontified t face font-lock-type-face) 630 631 (fontified t face font-lock-type-face) 631 633 (fontified t face font-lock-type-face) 633 653 (fontified t) 653 675 (fontified t) 675 679 (fontified t face font-lock-keyword-face) 679 694 (fontified t) 694 696 (fontified t face font-lock-keyword-face) 696 733 (fontified t) 733 740 (fontified t face font-lock-constant-face) 740 742 (fontified t) 742 748 (fontified t face font-lock-constant-face) 748 753 (fontified t) 753 758 (fontified t face font-lock-keyword-face) 758 770 (fontified t) 770 774 (fontified t face font-lock-keyword-face) 774 789 (fontified t) 789 796 (fontified t face font-lock-constant-face) 796 798 (fontified t) 798 804 (fontified t face font-lock-constant-face) 804 809 (fontified t) 809 813 (fontified t face font-lock-keyword-face) 813 869 (fontified t) 869 873 (fontified t face font-lock-keyword-face) 873 902 (fontified t) 902 904 (fontified t face font-lock-keyword-face) 904 905 (fontified t) 905 908 (fontified t face font-lock-keyword-face) 908 909 (fontified t) 909 911 (fontified t face font-lock-type-face) 911 912 (fontified t) 912 917 (fontified t face font-lock-type-face) 917 919 (fontified t) 919 924 (fontified t face font-lock-type-face) 924 925 (fontified t) 925 929 (fontified t face font-lock-type-face) 929 978 (fontified t) 978 981 (fontified t face font-lock-keyword-face) 981 982 (fontified t) 982 985 (fontified t face font-lock-variable-name-face) 985 988 (fontified t) 988 992 (fontified t face font-lock-constant-face) 992 994 (fontified t) 994 996 (fontified t face font-lock-constant-face) 996 998 (fontified t) 998 1005 (fontified t face font-lock-type-face) 1005 1053 (fontified t) 1053 1055 (fontified t face font-lock-keyword-face) 1055 1071 (fontified t) 1071 1074 (fontified t) 1074 1124 (fontified t) 1124 1137 (fontified t face font-lock-string-face) 1137 1138 (fontified t syntax-table #2=(15) face font-lock-string-face) 1138 1139 (fontified t face font-lock-string-face) 1139 1153 (fontified t) 1153 1160 (fontified t) 1160 1187 (fontified t) 1187 1189 (fontified t face font-lock-type-face) 1189 1251 (fontified t) 1251 1259 (fontified t face rust-builtin-formatting-macro-face) 1259 1260 (fontified t) 1260 1261 (fontified t face font-lock-string-face) 1261 1263 (fontified t face rust-string-interpolation-face) 1263 1264 (fontified t face font-lock-string-face) 1264 1272 (fontified t)) . 1) (undo-tree-id11 . -96) (undo-tree-id12 . -83) (undo-tree-id13 . -96) (undo-tree-id14 . -760) (undo-tree-id15 . -721) (undo-tree-id16 . -760) (undo-tree-id17 . -20) (undo-tree-id18 . 1161) (undo-tree-id19 . -116) (undo-tree-id20 . -116) (undo-tree-id21 . -760) (undo-tree-id22 . -116) (undo-tree-id23 . -116) (undo-tree-id24 . -116) (undo-tree-id25 . -116) (undo-tree-id26 . -20) (undo-tree-id27 . -20) (undo-tree-id28 . -113) (undo-tree-id29 . -20) (undo-tree-id30 . -20) (undo-tree-id31 . -20) (undo-tree-id32 . -20) (undo-tree-id33 . -20) (undo-tree-id34 . -20) (undo-tree-id35 . -20) (undo-tree-id36 . -20) (undo-tree-id37 . -20) (undo-tree-id38 . -20) (undo-tree-id39 . -20) (undo-tree-id40 . -20) (undo-tree-id41 . -20) (undo-tree-id42 . -20) (undo-tree-id43 . -20) (undo-tree-id44 . -20) (undo-tree-id45 . -20) (undo-tree-id46 . -20) 21) nil (23764 13561 312184 383000) 0 nil]) ((#("use warp;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 9 (fontified t) 9 10 (fontified t)) . 21) (undo-tree-id47 . -3) (undo-tree-id48 . -3) (undo-tree-id49 . -3) (undo-tree-id50 . -3) (undo-tree-id51 . -3) (undo-tree-id52 . -3) (undo-tree-id53 . -3) (undo-tree-id54 . -8) (undo-tree-id55 . -8) (undo-tree-id56 . -3) (undo-tree-id57 . -8) (undo-tree-id58 . -8) (undo-tree-id59 . -8) (undo-tree-id60 . -8) 29) nil (23764 13561 312236 979000) 0 nil]) ((121 . 122) (115 . 121) (#("Fut" 0 3 (fontified t face font-lock-type-face)) . -115) (undo-tree-id61 . -3) 118 (116 . 118) (113 . 116) (107 . 113) (#("fu" 0 2 (fontified t)) . -107) (undo-tree-id62 . -2) 109 (107 . 109) (#("stream::Stream;" 0 6 (fontified t face font-lock-constant-face) 6 8 (fontified t) 8 14 (fontified t face font-lock-type-face) 14 15 (fontified t)) . 107) (undo-tree-id63 . -15) (undo-tree-id64 . -15)) nil (23764 13561 312265 408000) 0 nil]) ((nil rear-nonsticky nil 93 . 94) (#("
" 0 1 (fontified nil)) . -122) (93 . 123) 80) nil (23764 13561 312276 681000) 0 nil]) ((89 . 93) (76 . 89) (#(";" 0 1 (fontified t)) . -76) (undo-tree-id65 . -1) (undo-tree-id66 . -1) 77 (76 . 77) (69 . 76) (#("fut" 0 3 (fontified t face font-lock-constant-face)) . -69) (undo-tree-id67 . -3) (undo-tree-id68 . -3) 72 (65 . 72) (64 . 65) 63) nil (23764 13561 312302 634000) 0 nil]) ((63 . 64) (50 . 63) (#("S" 0 1 (fontified t face font-lock-type-face)) . -50) (undo-tree-id69 . -1) (undo-tree-id70 . -1) 51 (48 . 51) (42 . 48) (#("str" 0 3 (fontified t face font-lock-type-face)) . -42) (undo-tree-id71 . -3) (undo-tree-id72 . -3) 45 (44 . 45) (#("e" 0 1 (fontified t)) . -44) (undo-tree-id73 . -1) (undo-tree-id74 . -1) 45 (31 . 45) (30 . 31) 29) nil (23764 13561 312343 269000) 0 nil]) ((29 . 30) (#("l" 0 1 (fontified t face font-lock-constant-face)) . -29) (undo-tree-id75 . -1) (undo-tree-id76 . -1) 30 (27 . 30) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -27) (undo-tree-id77 . -1) (undo-tree-id78 . -1) 28 (25 . 28)) nil (23764 13561 312367 220000) 0 nil]) ((21 . 25) (20 . 21) 1) nil (23764 13561 312376 125000) 0 nil]) ((20 . 21) 1) nil (23764 13561 312380 792000) 0 nil]) ((1 . 21) 4) nil (23764 13561 312385 21000) 0 nil]) ((1 . 5) (t 23764 13271 112395 42000)) nil (23764 13561 312389 553000) 0 nil]) ((1 . 1156) (#("    fn handle_ws(
        socket: warp::ws::WebSocket,
        mut stream: StreamManager,
    ) -> impl futures::future::Future<Item = (), Error = ()> {
        let (tx, rx) = futures::sync::mpsc::unbounded();
        let (ws_tx, mut ws_rx) = socket.split();
        warp::spawn(
            rx.map_err(|()| -> warp::Error { unreachable!() })
                .forward(ws_tx)
                .map_err(|_| ())
                .map(|_r| ()),
        );
        let event_stream = tokio::timer::Interval::new(
            std::time::Instant::now(),
            std::time::Duration::from_millis(100),
        )
        .take_while(move |_| {
            if ws_rx.poll().is_err() {
                futures::future::ok(false)
            } else {
                futures::future::ok(true)
            }
        });

        event_stream
            .for_each(move |_json_value| {
                if let Ok(Async::Ready(Some(json_value))) = stream.poll() {
                    let msg = warp::ws::Message::text(json_value.to_string());
                    if !tx.is_closed() {
                        tx.unbounded_send(msg).expect(\"No send error\");
                    }
                };
                Ok(())
            })
            .then(|msg| msg)
            .map_err(|e| println!(\"{}\", e))
    }
" 0 3 (fontified t) 3 4 (fontified t rear-nonsticky t) 4 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 16 (fontified t face font-lock-function-name-face) 16 20 (fontified t) 20 26 (fontified t) 26 32 (fontified t face font-lock-variable-name-face) 32 34 (fontified t) 34 38 (fontified t face font-lock-constant-face) 38 40 (fontified t) 40 42 (fontified t face font-lock-constant-face) 42 44 (fontified t) 44 53 (fontified t face font-lock-type-face) 53 55 (fontified t) 55 63 (fontified t) 63 66 (fontified t face font-lock-keyword-face) 66 67 (fontified t) 67 73 (fontified t face font-lock-variable-name-face) 73 75 (fontified t) 75 88 (fontified t face font-lock-type-face) 88 97 (fontified t) 97 98 (fontified t syntax-table #1#) 98 99 (fontified t) 99 103 (fontified t face font-lock-keyword-face) 103 104 (fontified t) 104 111 (fontified t face font-lock-constant-face) 111 113 (fontified t) 113 119 (fontified t face font-lock-constant-face) 119 121 (fontified t) 121 127 (fontified t face font-lock-type-face) 127 128 (fontified t) 128 132 (fontified t face font-lock-type-face) 132 139 (fontified t) 139 144 (fontified t face font-lock-type-face) 144 161 (fontified t) 161 164 (fontified t face font-lock-keyword-face) 164 176 (fontified t) 176 183 (fontified t face font-lock-constant-face) 183 185 (fontified t) 185 189 (fontified t face font-lock-constant-face) 189 191 (fontified t) 191 195 (fontified t face font-lock-constant-face) 195 218 (fontified t) 218 221 (fontified t face font-lock-keyword-face) 221 230 (fontified t) 230 233 (fontified t face font-lock-keyword-face) 233 267 (fontified t) 267 271 (fontified t face font-lock-constant-face) 271 309 (fontified t) 309 310 (fontified t syntax-table #1#) 310 311 (fontified t) 311 315 (fontified t face font-lock-constant-face) 315 317 (fontified t) 317 322 (fontified t face font-lock-type-face) 322 325 (fontified t) 325 337 (fontified t face font-lock-preprocessor-face) 337 458 (fontified t) 458 461 (fontified t face font-lock-keyword-face) 461 462 (fontified t) 462 474 (fontified t face font-lock-variable-name-face) 474 477 (fontified t) 477 482 (fontified t face font-lock-constant-face) 482 484 (fontified t) 484 489 (fontified t face font-lock-constant-face) 489 491 (fontified t) 491 499 (fontified t face font-lock-type-face) 499 500 (fontified t) 500 506 (fontified t) 506 518 (fontified t) 518 521 (fontified t face font-lock-constant-face) 521 523 (fontified t) 523 527 (fontified t face font-lock-constant-face) 527 529 (fontified t) 529 536 (fontified t face font-lock-type-face) 536 555 (fontified t) 555 557 (fontified t) 557 560 (fontified t face font-lock-constant-face) 560 562 (fontified t) 562 566 (fontified t face font-lock-constant-face) 566 568 (fontified t) 568 576 (fontified t face font-lock-type-face) 576 596 (fontified t) 596 626 (fontified t) 626 630 (fontified t face font-lock-keyword-face) 630 649 (fontified t) 649 651 (fontified t face font-lock-keyword-face) 651 692 (fontified t) 692 699 (fontified t face font-lock-constant-face) 699 701 (fontified t) 701 707 (fontified t face font-lock-constant-face) 707 712 (fontified t) 712 717 (fontified t face font-lock-keyword-face) 717 733 (fontified t) 733 737 (fontified t face font-lock-keyword-face) 737 756 (fontified t) 756 763 (fontified t face font-lock-constant-face) 763 765 (fontified t) 765 771 (fontified t face font-lock-constant-face) 771 776 (fontified t) 776 780 (fontified t face font-lock-keyword-face) 780 852 (fontified t) 852 856 (fontified t face font-lock-keyword-face) 856 889 (fontified t) 889 891 (fontified t face font-lock-keyword-face) 891 892 (fontified t) 892 895 (fontified t face font-lock-keyword-face) 895 896 (fontified t) 896 898 (fontified t face font-lock-type-face) 898 899 (fontified t) 899 904 (fontified t face font-lock-type-face) 904 906 (fontified t) 906 911 (fontified t face font-lock-type-face) 911 912 (fontified t) 912 916 (fontified t face font-lock-type-face) 916 969 (fontified t) 969 972 (fontified t face font-lock-keyword-face) 972 973 (fontified t) 973 976 (fontified t face font-lock-variable-name-face) 976 979 (fontified t) 979 983 (fontified t face font-lock-constant-face) 983 985 (fontified t) 985 987 (fontified t face font-lock-constant-face) 987 989 (fontified t) 989 996 (fontified t face font-lock-type-face) 996 1006 (fontified t) 1006 1028 (fontified t) 1028 1048 (fontified t) 1048 1050 (fontified t face font-lock-keyword-face) 1050 1096 (fontified t) 1096 1123 (fontified t) 1123 1136 (fontified t face font-lock-string-face) 1136 1137 (fontified t syntax-table #2# face font-lock-string-face) 1137 1138 (fontified t face font-lock-string-face) 1138 1141 (fontified t) 1141 1198 (fontified t) 1198 1200 (fontified t face font-lock-type-face) 1200 1274 (fontified t) 1274 1282 (fontified t face rust-builtin-formatting-macro-face) 1282 1283 (fontified t) 1283 1284 (fontified t face font-lock-string-face) 1284 1286 (fontified t face rust-string-interpolation-face) 1286 1287 (fontified t face font-lock-string-face) 1287 1299 (fontified t)) . 1) (undo-tree-id0 . -1299) (undo-tree-id1 . -1298) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -4) (undo-tree-id5 . -4) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (undo-tree-id8 . -4) (undo-tree-id9 . -4) (undo-tree-id10 . -4) 5) nil (23764 13271 101903 784000) 0 nil]) ((nil rear-nonsticky nil 4 . 5) (1 . 1300) (t . -1)) nil (23764 13271 101936 509000) 0 nil]) nil nil (23764 13271 101938 460000) 0 nil] #3# 4144 16 nil)