"e930e9194288326ad57cee0698741f16f3129210"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#4=[nil nil ((192 . 196) (t 23732 47561 683421 612000)) nil (23732 47691 519806 430000) 0 nil]) ((1 . 2456) (#("use futures::{Async, Future, Poll};
use regex::Regex;
use serde_json::Value;
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use warp::Stream;

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Stream for Receiver {
    type Item = Value;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<Value>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            let re = Regex::new(r\"(?x)(?P<json>\\{.*\\})\").unwrap();

            if let Some(cap) = re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read])) {
                let json_string = cap[\"json\"].to_string();
                let json: Value = serde_json::from_str(&json_string.clone())?;
                return Ok(Async::Ready(Some(json)));
            }
            return Ok(Async::NotReady);
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
    channel: String,
}
impl Future for Sender {
    type Item = ();
    type Error = Box<Error>;
    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        println!(\"Subscribing to {}\", &self.channel);
        let subscribe_cmd = format!(
            \"*2\\r\\n$9\\r\\nsubscribe\\r\\n${}\\r\\n{}\\r\\n\",
            self.channel.len(),
            self.channel
        );
        let mut buffer = subscribe_cmd.as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn get_socket() -> impl Future<Item = TcpStream, Error = Box<Error>> {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    connection
        .and_then(|socket| Ok(socket))
        .map_err(|e| Box::new(e))
}

fn send_subscribe_cmd(tx: WriteHalf<TcpStream>, channel: String) {
    let sender = Sender { tx, channel };
    tokio::spawn(sender.map_err(|e| eprintln!(\"{}\", e)));
}

pub fn stream_from(timeline: String) -> impl Future<Item = Receiver, Error = warp::reject::Rejection> {
    get_socket()
        .and_then(move |socket| {
            let (rx, tx) = socket.split();
            send_subscribe_cmd(tx, format!(\"timeline:{}\", timeline));
            let stream_of_data_from_redis = Receiver { rx };
            Ok(stream_of_data_from_redis)
        })
        .and_then(|stream| Ok(stream))
        .map_err(|e| warp::reject::custom(e))
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 19 (fontified t face font-lock-type-face) 19 21 (fontified t) 21 27 (fontified t face font-lock-type-face) 27 29 (fontified t) 29 33 (fontified t face font-lock-type-face) 33 36 (fontified t) 36 39 (fontified t face font-lock-keyword-face) 39 40 (fontified t) 40 45 (fontified t face font-lock-constant-face) 45 47 (fontified t) 47 52 (fontified t face font-lock-type-face) 52 54 (fontified t) 54 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t) 58 68 (fontified t face font-lock-constant-face) 68 70 (fontified t) 70 75 (fontified t face font-lock-type-face) 75 77 (fontified t) 77 80 (fontified t face font-lock-keyword-face) 80 81 (fontified t) 81 86 (fontified t face font-lock-constant-face) 86 88 (fontified t) 88 90 (fontified t face font-lock-constant-face) 90 93 (fontified t) 93 102 (fontified t face font-lock-type-face) 102 104 (fontified t) 104 114 (fontified t face font-lock-type-face) 114 116 (fontified t) 116 121 (fontified t face font-lock-type-face) 121 123 (fontified t) 123 131 (fontified t face font-lock-type-face) 131 133 (fontified t) 133 142 (fontified t face font-lock-type-face) 142 145 (fontified t) 145 148 (fontified t face font-lock-keyword-face) 148 149 (fontified t) 149 154 (fontified t face font-lock-constant-face) 154 156 (fontified t) 156 159 (fontified t face font-lock-constant-face) 159 161 (fontified t) 161 170 (fontified t face font-lock-type-face) 170 171 (fontified t) 171 172 (fontified t rear-nonsticky t) 172 175 (fontified t face font-lock-keyword-face) 175 176 (fontified t) 176 180 (fontified t face font-lock-constant-face) 180 182 (fontified t) 182 188 (fontified t face font-lock-type-face) 188 189 (fontified t) 189 190 (fontified t) 190 191 (fontified t) 191 197 (fontified t face font-lock-keyword-face) 197 198 (fontified t) 198 206 (fontified t face font-lock-type-face) 206 209 (fontified t) 209 213 (fontified t) 213 215 (fontified t face font-lock-variable-name-face) 215 217 (fontified t) 217 225 (fontified t face font-lock-type-face) 225 226 (fontified t) 226 235 (fontified t face font-lock-type-face) 235 240 (fontified t) 240 244 (fontified t face font-lock-keyword-face) 244 245 (fontified t) 245 251 (fontified t face font-lock-type-face) 251 252 (fontified t) 252 255 (fontified t face font-lock-keyword-face) 255 256 (fontified t) 256 264 (fontified t face font-lock-type-face) 264 271 (fontified t) 271 275 (fontified t face font-lock-keyword-face) 275 276 (fontified t) 276 280 (fontified t face font-lock-type-face) 280 283 (fontified t) 283 288 (fontified t face font-lock-type-face) 288 294 (fontified t) 294 298 (fontified t face font-lock-keyword-face) 298 299 (fontified t) 299 304 (fontified t face font-lock-type-face) 304 307 (fontified t) 307 312 (fontified t face font-lock-type-face) 312 319 (fontified t) 319 321 (fontified t face font-lock-keyword-face) 321 322 (fontified t) 322 326 (fontified t face font-lock-function-name-face) 326 328 (fontified t) 328 331 (fontified t face font-lock-keyword-face) 331 332 (fontified t) 332 336 (fontified t face font-lock-keyword-face) 336 339 (fontified t) 339 340 (syntax-table #1=(1) fontified t) 340 341 (fontified t) 341 345 (fontified t face font-lock-type-face) 345 346 (fontified t) 346 352 (fontified t face font-lock-type-face) 352 353 (fontified t) 353 358 (fontified t face font-lock-type-face) 358 361 (fontified t) 361 365 (fontified t face font-lock-type-face) 365 367 (fontified t) 367 372 (fontified t face font-lock-type-face) 372 384 (fontified t) 384 387 (fontified t face font-lock-keyword-face) 387 388 (fontified t) 388 391 (fontified t face font-lock-keyword-face) 391 392 (fontified t) 392 398 (fontified t face font-lock-variable-name-face) 398 401 (fontified t) 401 405 (fontified t face font-lock-preprocessor-face) 405 426 (fontified t) 426 431 (fontified t face font-lock-keyword-face) 431 432 (fontified t) 432 435 (fontified t face font-lock-keyword-face) 435 436 (fontified t) 436 441 (fontified t face font-lock-type-face) 441 443 (fontified t) 443 448 (fontified t face font-lock-type-face) 448 453 (fontified t) 453 467 (fontified t) 467 471 (fontified t face font-lock-keyword-face) 471 486 (fontified t) 486 489 (fontified t face font-lock-keyword-face) 489 497 (fontified t) 497 498 (fontified t face rust-question-mark-face) 498 501 (fontified t) 501 513 (fontified t) 513 516 (fontified t face font-lock-keyword-face) 516 517 (fontified t) 517 519 (fontified t face font-lock-variable-name-face) 519 522 (fontified t) 522 527 (fontified t face font-lock-type-face) 527 533 (fontified t) 533 534 (syntax-table #2=(15) fontified t face font-lock-string-face) 534 555 (fontified t face font-lock-string-face) 555 556 (syntax-table #3=(15) fontified t face font-lock-string-face) 556 561 (fontified t) 561 568 (fontified t) 568 581 (fontified t) 581 583 (fontified t face font-lock-keyword-face) 583 584 (fontified t) 584 587 (fontified t face font-lock-keyword-face) 587 588 (fontified t) 588 592 (fontified t face font-lock-type-face) 592 595 (fontified t) 595 613 (fontified t) 613 619 (fontified t face font-lock-type-face) 619 667 (fontified t) 667 683 (fontified t) 683 686 (fontified t face font-lock-keyword-face) 686 687 (fontified t) 687 690 (fontified t face font-lock-variable-name-face) 690 691 (face font-lock-variable-name-face fontified t) 691 698 (face font-lock-variable-name-face fontified t) 698 705 (fontified t) 705 709 (face font-lock-string-face fontified t) 709 711 (face font-lock-string-face fontified t) 711 726 (fontified t) 726 742 (fontified t) 742 745 (fontified t face font-lock-keyword-face) 745 746 (fontified t) 746 750 (fontified t face font-lock-variable-name-face) 750 752 (fontified t) 752 757 (fontified t face font-lock-type-face) 757 760 (fontified t) 760 770 (fontified t face font-lock-constant-face) 770 802 (fontified t) 802 803 (fontified t face rust-question-mark-face) 803 804 (fontified t) 804 805 (fontified t) 805 821 (fontified t) 821 827 (fontified t face font-lock-keyword-face) 827 828 (fontified t) 828 830 (fontified t face font-lock-type-face) 830 831 (fontified t) 831 836 (fontified t face font-lock-type-face) 836 838 (fontified t) 838 843 (fontified t face font-lock-type-face) 843 844 (fontified t) 844 848 (fontified t face font-lock-type-face) 848 858 (fontified t) 858 884 (fontified t) 884 890 (fontified t face font-lock-keyword-face) 890 891 (fontified t) 891 893 (fontified t face font-lock-type-face) 893 894 (fontified t) 894 899 (fontified t face font-lock-type-face) 899 901 (fontified t) 901 909 (fontified t face font-lock-type-face) 909 930 (fontified t) 930 936 (fontified t face font-lock-keyword-face) 936 937 (fontified t) 937 939 (fontified t face font-lock-type-face) 939 940 (fontified t) 940 943 (fontified t face font-lock-type-face) 943 945 (fontified t face font-lock-type-face) 945 947 (fontified t) 947 955 (fontified t face font-lock-type-face) 955 958 (fontified t) 958 967 (fontified t) 967 973 (fontified t face font-lock-keyword-face) 973 974 (fontified t) 974 980 (fontified t face font-lock-type-face) 980 987 (fontified t) 987 989 (fontified t face font-lock-variable-name-face) 989 991 (fontified t) 991 1000 (fontified t face font-lock-type-face) 1000 1001 (fontified t) 1001 1010 (fontified t face font-lock-type-face) 1010 1013 (fontified t) 1013 1017 (fontified t) 1017 1024 (fontified t face font-lock-variable-name-face) 1024 1026 (fontified t) 1026 1032 (fontified t face font-lock-type-face) 1032 1036 (fontified t) 1036 1040 (fontified t face font-lock-keyword-face) 1040 1041 (fontified t) 1041 1047 (fontified t face font-lock-type-face) 1047 1048 (fontified t) 1048 1051 (fontified t face font-lock-keyword-face) 1051 1052 (fontified t) 1052 1058 (fontified t face font-lock-type-face) 1058 1065 (fontified t) 1065 1069 (fontified t face font-lock-keyword-face) 1069 1070 (fontified t) 1070 1074 (fontified t face font-lock-type-face) 1074 1085 (fontified t) 1085 1089 (fontified t face font-lock-keyword-face) 1089 1090 (fontified t) 1090 1095 (fontified t face font-lock-type-face) 1095 1098 (fontified t) 1098 1101 (fontified t face font-lock-type-face) 1101 1102 (fontified t) 1102 1107 (fontified t face font-lock-type-face) 1107 1114 (fontified t) 1114 1116 (fontified t face font-lock-keyword-face) 1116 1117 (fontified t) 1117 1121 (fontified t face font-lock-function-name-face) 1121 1123 (fontified t) 1123 1126 (fontified t face font-lock-keyword-face) 1126 1127 (fontified t) 1127 1131 (fontified t face font-lock-keyword-face) 1131 1134 (fontified t) 1134 1135 (fontified t syntax-table #1#) 1135 1136 (fontified t) 1136 1140 (fontified t face font-lock-type-face) 1140 1141 (fontified t) 1141 1145 (fontified t face font-lock-type-face) 1145 1147 (fontified t) 1147 1151 (fontified t face font-lock-type-face) 1151 1153 (fontified t) 1153 1157 (fontified t face font-lock-type-face) 1157 1159 (fontified t) 1159 1164 (fontified t face font-lock-type-face) 1164 1167 (fontified t) 1167 1168 (fontified t) 1168 1176 (fontified t) 1176 1184 (fontified t face rust-builtin-formatting-macro-face) 1184 1185 (fontified t) 1185 1201 (fontified t face font-lock-string-face) 1201 1203 (fontified t face rust-string-interpolation-face) 1203 1204 (fontified t face font-lock-string-face) 1204 1207 (fontified t) 1207 1211 (fontified t face font-lock-keyword-face) 1211 1226 (fontified t) 1226 1230 (fontified t) 1230 1233 (face font-lock-keyword-face fontified t) 1233 1234 (fontified t) 1234 1247 (face font-lock-variable-name-face fontified t) 1247 1250 (fontified t) 1250 1253 (face rust-builtin-formatting-macro-face fontified t) 1253 1257 (face rust-builtin-formatting-macro-face fontified t) 1257 1259 (fontified t) 1259 1271 (fontified t) 1271 1298 (fontified t face font-lock-string-face) 1298 1300 (fontified t face font-lock-string-face) 1300 1304 (fontified t face font-lock-string-face) 1304 1305 (fontified t face font-lock-string-face) 1305 1306 (fontified t face font-lock-string-face) 1306 1311 (fontified t face font-lock-string-face) 1311 1313 (fontified t) 1313 1325 (fontified t) 1325 1329 (fontified t face font-lock-keyword-face) 1329 1357 (fontified t) 1357 1358 (fontified t face font-lock-keyword-face) 1358 1361 (fontified t face font-lock-keyword-face) 1361 1370 (fontified t) 1370 1389 (fontified t) 1389 1392 (fontified t face font-lock-keyword-face) 1392 1393 (fontified t) 1393 1396 (fontified t face font-lock-keyword-face) 1396 1397 (fontified t) 1397 1403 (fontified t face font-lock-variable-name-face) 1403 1440 (fontified t) 1440 1444 (fontified t face font-lock-keyword-face) 1444 1458 (fontified t) 1458 1460 (fontified t) 1460 1463 (fontified t face font-lock-keyword-face) 1463 1471 (fontified t) 1471 1472 (fontified t face rust-question-mark-face) 1472 1474 (fontified t) 1474 1482 (fontified t) 1482 1488 (fontified t face font-lock-keyword-face) 1488 1489 (fontified t) 1489 1491 (fontified t face font-lock-type-face) 1491 1492 (fontified t) 1492 1497 (fontified t face font-lock-type-face) 1497 1499 (fontified t) 1499 1507 (fontified t face font-lock-type-face) 1507 1513 (fontified t) 1513 1516 (fontified t) 1516 1519 (fontified t) 1519 1521 (fontified t face font-lock-keyword-face) 1521 1522 (fontified t) 1522 1532 (fontified t face font-lock-function-name-face) 1532 1536 (fontified t) 1536 1537 (syntax-table #1# fontified t) 1537 1538 (fontified t) 1538 1542 (fontified t face font-lock-keyword-face) 1542 1543 (fontified t) 1543 1549 (fontified t face font-lock-type-face) 1549 1550 (fontified t) 1550 1554 (fontified t face font-lock-type-face) 1554 1557 (fontified t) 1557 1566 (fontified t face font-lock-type-face) 1566 1568 (fontified t) 1568 1573 (fontified t face font-lock-type-face) 1573 1576 (fontified t) 1576 1579 (fontified t face font-lock-type-face) 1579 1580 (fontified t) 1580 1585 (fontified t face font-lock-type-face) 1585 1594 (fontified t) 1594 1597 (fontified t face font-lock-keyword-face) 1597 1598 (fontified t) 1598 1605 (fontified t face font-lock-variable-name-face) 1605 1608 (fontified t) 1608 1624 (fontified t face font-lock-string-face) 1624 1640 (fontified t) 1640 1665 (fontified t face font-lock-string-face) 1665 1668 (fontified t) 1668 1672 (fontified t) 1672 1675 (fontified t face font-lock-keyword-face) 1675 1676 (fontified t) 1676 1686 (fontified t face font-lock-variable-name-face) 1686 1689 (fontified t) 1689 1698 (fontified t face font-lock-type-face) 1698 1759 (fontified t) 1759 1761 (fontified t) 1761 1763 (face font-lock-type-face fontified t) 1763 1773 (fontified t) 1773 1794 (fontified t) 1794 1797 (fontified t face font-lock-type-face) 1797 1807 (fontified t) 1807 1809 (fontified t) 1809 1810 (fontified t) 1810 1812 (fontified t face font-lock-keyword-face) 1812 1813 (fontified t) 1813 1831 (fontified t face font-lock-function-name-face) 1831 1832 (fontified t) 1832 1834 (fontified t face font-lock-variable-name-face) 1834 1836 (fontified t) 1836 1845 (fontified t face font-lock-type-face) 1845 1846 (fontified t) 1846 1855 (fontified t face font-lock-type-face) 1855 1858 (fontified t) 1858 1865 (fontified t face font-lock-variable-name-face) 1865 1867 (fontified t) 1867 1870 (fontified t face font-lock-type-face) 1870 1873 (fontified t face font-lock-type-face) 1873 1877 (fontified t) 1877 1881 (fontified t) 1881 1884 (fontified t face font-lock-keyword-face) 1884 1885 (fontified t) 1885 1891 (fontified t face font-lock-variable-name-face) 1891 1894 (fontified t) 1894 1900 (fontified t face font-lock-type-face) 1900 1906 (fontified t) 1906 1922 (fontified t) 1922 1927 (fontified t face font-lock-constant-face) 1927 1954 (fontified t) 1954 1963 (fontified t face rust-builtin-formatting-macro-face) 1963 1964 (fontified t) 1964 1965 (fontified t face font-lock-string-face) 1965 1967 (fontified t face rust-string-interpolation-face) 1967 1968 (fontified t face font-lock-string-face) 1968 1979 (fontified t) 1979 1982 (fontified t face font-lock-keyword-face) 1982 1983 (fontified t) 1983 1985 (fontified t face font-lock-keyword-face) 1985 1986 (fontified t) 1986 1997 (fontified t face font-lock-function-name-face) 1997 1998 (fontified t) 1998 2006 (fontified t face font-lock-variable-name-face) 2006 2008 (fontified t) 2008 2014 (fontified t face font-lock-type-face) 2014 2017 (fontified t) 2017 2018 (fontified t syntax-table #1#) 2018 2019 (fontified t) 2019 2020 (fontified t face font-lock-keyword-face) 2020 2023 (fontified t face font-lock-keyword-face) 2023 2024 (fontified t) 2024 2030 (fontified t face font-lock-type-face) 2030 2031 (fontified t) 2031 2035 (fontified t face font-lock-type-face) 2035 2038 (fontified t) 2038 2046 (fontified t face font-lock-type-face) 2046 2048 (fontified t) 2048 2053 (fontified t face font-lock-type-face) 2053 2056 (fontified t) 2056 2060 (fontified t face font-lock-constant-face) 2060 2062 (fontified t) 2062 2068 (fontified t face font-lock-constant-face) 2068 2070 (fontified t) 2070 2079 (fontified t face font-lock-type-face) 2079 2083 (fontified t) 2083 2118 (fontified t) 2118 2122 (fontified t face font-lock-keyword-face) 2122 2146 (fontified t) 2146 2149 (fontified t face font-lock-keyword-face) 2149 2212 (fontified t) 2212 2219 (fontified t face rust-builtin-formatting-macro-face) 2219 2220 (fontified t) 2220 2230 (fontified t face font-lock-string-face) 2230 2232 (fontified t face rust-string-interpolation-face) 2232 2233 (fontified t face font-lock-string-face) 2233 2259 (fontified t) 2259 2262 (fontified t face font-lock-keyword-face) 2262 2263 (fontified t) 2263 2277 (fontified t face font-lock-variable-name-face) 2277 2288 (fontified t face font-lock-variable-name-face) 2288 2291 (fontified t) 2291 2299 (fontified t face font-lock-type-face) 2299 2308 (fontified t) 2308 2313 (fontified t) 2313 2320 (fontified t) 2320 2322 (fontified t face font-lock-type-face) 2322 2350 (fontified t) 2350 2388 (fontified t) 2388 2390 (fontified t face font-lock-type-face) 2390 2410 (fontified t) 2410 2421 (fontified t) 2421 2425 (fontified t face font-lock-constant-face) 2425 2427 (fontified t) 2427 2433 (fontified t face font-lock-constant-face) 2433 2446 (fontified t) 2446 2447 (fontified t) 2447 2448 (fontified t)) . 1) (undo-tree-id296 . -2446) (undo-tree-id297 . -1313) (undo-tree-id298 . -2446) (undo-tree-id299 . -172) (undo-tree-id300 . -189) (undo-tree-id301 . -217) (undo-tree-id302 . -199) (undo-tree-id303 . -2447) (undo-tree-id304 . -217) (undo-tree-id305 . -217) (undo-tree-id306 . -217) (undo-tree-id307 . -199) (undo-tree-id308 . 462) (undo-tree-id309 . -245) (undo-tree-id310 . -244) (undo-tree-id311 . -191) (undo-tree-id312 . -245) (undo-tree-id313 . -245) (undo-tree-id314 . -245) (undo-tree-id315 . -245) (undo-tree-id316 . -2446) (undo-tree-id317 . -2446) (undo-tree-id318 . -1313) (undo-tree-id319 . -189) (undo-tree-id320 . -2446) (undo-tree-id321 . -2446) (undo-tree-id322 . -1980) (undo-tree-id323 . -1978) (undo-tree-id324 . -1313) (undo-tree-id325 . -1980) (undo-tree-id326 . -1313) (undo-tree-id327 . -1980) (undo-tree-id328 . -1981) (undo-tree-id329 . -1981) (undo-tree-id330 . -1982) (undo-tree-id331 . -1313) (undo-tree-id332 . -1981) (undo-tree-id333 . -1981) (undo-tree-id334 . -1313) (undo-tree-id335 . -1981) (undo-tree-id336 . -1981) (undo-tree-id337 . -1313) (undo-tree-id338 . -1981) (undo-tree-id339 . -1981) (undo-tree-id340 . -1313) 1982) nil (23732 47561 672957 64000) 0 nil]) ((1986 . 1987) (t 23732 47552 526802 994000)) nil (23732 47561 672967 395000) 0 nil]) ((2447 . 2448) 1981) nil (23732 47552 516375 344000) 0 nil]) ((1980 . 1984)) nil (23732 47552 516385 148000) 0 nil] [nil nil ((1982 . 1987)) ((#(" pub " 0 1 (fontified t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t)) . 1982) (undo-tree-id253 . -1) (undo-tree-id254 . -1) (undo-tree-id255 . -2) (undo-tree-id256 . -1) (undo-tree-id257 . -2) (undo-tree-id258 . -2) (undo-tree-id259 . -1) (undo-tree-id260 . -3) (undo-tree-id261 . -2) (undo-tree-id262 . -4) (undo-tree-id263 . -3) (undo-tree-id264 . -5) (undo-tree-id265 . -4) (undo-tree-id266 . -5) (undo-tree-id267 . -5) (undo-tree-id268 . -5) (undo-tree-id269 . -5) (undo-tree-id270 . -5) (undo-tree-id271 . -1) (undo-tree-id272 . -4) (undo-tree-id273 . -5) (undo-tree-id274 . -5) (undo-tree-id275 . -5) (undo-tree-id276 . -5) (undo-tree-id277 . -1) (undo-tree-id278 . -4) (undo-tree-id279 . -5) (undo-tree-id280 . -4) (undo-tree-id281 . -4) (undo-tree-id282 . -4) (undo-tree-id283 . -4) (undo-tree-id284 . -4) (undo-tree-id285 . -4) (undo-tree-id286 . -4) (undo-tree-id287 . -4) (undo-tree-id288 . -4) (undo-tree-id289 . -4) (undo-tree-id290 . -4) (undo-tree-id291 . -4) (undo-tree-id292 . -4) (undo-tree-id293 . -4) (undo-tree-id294 . -4) (undo-tree-id295 . -4)) (23732 47543 811994 792000) 0 nil]) ((#(" " 0 1 (fontified t)) . 1982)) nil (23732 47543 814113 265000) 0 nil]) ((#("path, Filter, " 0 6 (fontified t) 6 12 (fontified t face font-lock-type-face) 12 14 (fontified t)) . 183)) nil (23732 47543 812001 979000) 0 nil]) ((#("}" 0 1 (fontified nil)) . 203) (#("{" 0 1 (fontified t)) . 183) 185) nil (23732 47543 812004 906000) 0 nil]) ((nil rear-nonsticky nil 172 . 173) (#("
" 0 1 (fontified nil)) . -206) (172 . 207) 151) nil (23732 47543 812008 303000) 0 nil]) ((#("use serde_derive::Deserialize;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 16 (fontified t face font-lock-constant-face) 16 18 (fontified t) 18 29 (fontified t face font-lock-type-face) 29 31 (fontified t)) . 55) (undo-tree-id251 . -5)) nil (23732 47543 812016 803000) 0 nil]) ((203 . 204) 177) nil (23732 47543 812018 810000) 0 nil]) ((1 . 204) 9) nil (23732 47543 812020 870000) 0 nil]) ((#("
" 0 1 (fontified t rear-nonsticky t)) . 1) (undo-tree-id252 . -1)) nil (23732 47543 812023 717000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((30 . 31)) ((#("U" 0 1 (fontified t face font-lock-type-face)) . 30) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1)) (23732 47410 708747 487000) 0 nil]) ((20 . 30) (#("<TcpStream" 0 1 (fontified t) 1 10 (fontified t face font-lock-type-face)) . 20)) ((20 . 30) (#("<TCPSTREAM" 0 1 (fontified t) 1 10 (fontified t face font-lock-type-face)) . 20) (undo-tree-id25 . -10) (undo-tree-id26 . -10) (undo-tree-id27 . -10) (undo-tree-id28 . -10) (undo-tree-id29 . -10) (undo-tree-id30 . -10) (undo-tree-id31 . -10) (undo-tree-id32 . -10) (undo-tree-id33 . -10) (undo-tree-id34 . -10) (undo-tree-id35 . -10) (undo-tree-id36 . -10) (undo-tree-id37 . -10) (undo-tree-id38 . -1) (undo-tree-id39 . -10) (undo-tree-id40 . -10) (undo-tree-id41 . -1) (undo-tree-id42 . -10) (undo-tree-id43 . -10) (undo-tree-id44 . -1) (undo-tree-id45 . 10) (undo-tree-id46 . -1) (undo-tree-id47 . 9) (undo-tree-id48 . -10)) (23732 47410 712769 612000) 0 nil]) ((19 . 20)) ((#("U" 0 1 (fontified t face font-lock-type-face)) . 19) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (undo-tree-id73 . -1)) (23732 47411 45746 864000) 0 nil]) ((9 . 19) (#(": ReadHalf" 0 2 (fontified t) 2 10 (fontified t face font-lock-type-face)) . 9)) ((9 . 19) (#(": READHALF" 0 2 (fontified t) 2 10 (fontified t face font-lock-type-face)) . 9) (undo-tree-id74 . -10) (undo-tree-id75 . -10) (undo-tree-id76 . -10) (undo-tree-id77 . -10) (undo-tree-id78 . -10) (undo-tree-id79 . -10) (undo-tree-id80 . -10) (undo-tree-id81 . -10) (undo-tree-id82 . -10) (undo-tree-id83 . -10) (undo-tree-id84 . -10) (undo-tree-id85 . -10) (undo-tree-id86 . -10) (undo-tree-id87 . -10) (undo-tree-id88 . -10) (undo-tree-id89 . -10) (undo-tree-id90 . -10) (undo-tree-id91 . -10) (undo-tree-id92 . -10) (undo-tree-id93 . -10) (undo-tree-id94 . -10) (undo-tree-id95 . -1) (undo-tree-id96 . -10) (undo-tree-id97 . -10) (undo-tree-id98 . -10) (undo-tree-id99 . -10) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (undo-tree-id102 . -1) (undo-tree-id103 . -10) (undo-tree-id104 . -10) (undo-tree-id105 . -1)) (23732 47411 360934 97000) 0 nil]) ((8 . 9)) ((#("u" 0 1 (fontified t face font-lock-variable-name-face)) . 8) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (undo-tree-id114 . -1) (undo-tree-id115 . -1) (undo-tree-id116 . -1) (undo-tree-id117 . -1) (undo-tree-id118 . -1) (undo-tree-id119 . -1) (undo-tree-id120 . -1) (undo-tree-id121 . -1) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1)) (23732 47411 632021 348000) 0 nil]) ((7 . 8)) ((#("u" 0 1 (fontified t face font-lock-variable-name-face)) . 7) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -1) (undo-tree-id144 . -1) (undo-tree-id145 . -1) (undo-tree-id146 . -1) (undo-tree-id147 . -1) (undo-tree-id148 . -1) (undo-tree-id149 . -1) (undo-tree-id150 . -1) (undo-tree-id151 . -1) (undo-tree-id152 . -1) (undo-tree-id153 . -1) (undo-tree-id154 . -1) (undo-tree-id155 . -1) (undo-tree-id156 . -1) (undo-tree-id157 . -1) (undo-tree-id158 . -1) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1)) (23732 47411 923285 712000) 0 nil]) ((1 . 7) (#("    rx" 0 4 (fontified t) 4 6 (fontified t face font-lock-variable-name-face)) . 1)) ((1 . 7) (#("    RX" 0 4 (fontified t) 4 6 (fontified t face font-lock-variable-name-face)) . 1) (undo-tree-id175 . -6) (undo-tree-id176 . -6) (undo-tree-id177 . -6) (undo-tree-id178 . -6) (undo-tree-id179 . -6) (undo-tree-id180 . -6) (undo-tree-id181 . -6) (undo-tree-id182 . -6) (undo-tree-id183 . -6) (undo-tree-id184 . -6) (undo-tree-id185 . -6) (undo-tree-id186 . -6) (undo-tree-id187 . -6) (undo-tree-id188 . -6) (undo-tree-id189 . -6) (undo-tree-id190 . -6) (undo-tree-id191 . -6) (undo-tree-id192 . -6) (undo-tree-id193 . -6) (undo-tree-id194 . -6) (undo-tree-id195 . -6) (undo-tree-id196 . -6) (undo-tree-id197 . -6) (undo-tree-id198 . -6) (undo-tree-id199 . -6) (undo-tree-id200 . -6) (undo-tree-id201 . -6) (undo-tree-id202 . -6) (undo-tree-id203 . -6) (undo-tree-id204 . -6) (undo-tree-id205 . -6) (undo-tree-id206 . -6) (undo-tree-id207 . -6) (undo-tree-id208 . -6) (undo-tree-id209 . -6) (undo-tree-id210 . -6) (undo-tree-id211 . -6) (undo-tree-id212 . -4) (undo-tree-id213 . -6) (undo-tree-id214 . -6)) (23732 47412 197432 248000) 0 nil]) ((#("k" 0 1 (fontified t)) . -1) (undo-tree-id6 . -1) 2) ((1 . 2)) (23732 47412 444442 165000) 0 nil]) ((1 . 2)) ((#("k" 0 1 (fontified t)) . 1) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (undo-tree-id219 . -1) (undo-tree-id220 . -1) (undo-tree-id221 . -1) (undo-tree-id222 . -1) (undo-tree-id223 . -1) (undo-tree-id224 . -1) (undo-tree-id225 . -1) (undo-tree-id226 . -1) (undo-tree-id227 . -1) (undo-tree-id228 . -1) (undo-tree-id229 . -1) (undo-tree-id230 . -1)) (23732 47412 657062 102000) 0 nil]) ((#("    rx: ReadHalf<TcpStream>,
" 0 4 (fontified nil) 4 6 (fontified nil face font-lock-variable-name-face) 6 8 (fontified nil) 8 16 (fontified nil face font-lock-type-face) 16 17 (fontified nil) 17 26 (fontified nil face font-lock-type-face) 26 29 (fontified nil)) . 48) (30 . 48) (#("struct Receiver {
" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 15 (fontified t face font-lock-type-face) 15 17 (fontified t) 17 18 (fontified t)) . 1) (19 . 48)) ((#("    rx: ReadHalf<TcpStream>,
" 0 4 (fontified nil) 4 6 (fontified nil face font-lock-variable-name-face) 6 8 (fontified nil) 8 16 (fontified nil face font-lock-type-face) 16 17 (fontified nil) 17 26 (fontified nil face font-lock-type-face) 26 29 (fontified nil)) . 19) (undo-tree-id231 . -4) (undo-tree-id232 . -6) (undo-tree-id233 . -6) (undo-tree-id234 . -7) (1 . 19) (#("struct Receiver {
" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 15 (fontified t face font-lock-type-face) 15 17 (fontified t) 17 18 (fontified t)) . 30) (48 . 77)) (23732 47413 308499 229000) 0 nil]) ((#("k" 0 1 (fontified t)) . -19) (undo-tree-id7 . -1) (#("k" 0 1 (fontified t)) . -20) (undo-tree-id8 . -1) 21) ((19 . 21)) (23732 47413 696025 487000) 0 nil]) ((19 . 21) (t 23732 47382 541033 717000)) ((#("kk" 0 1 (fontified t) 1 2 (fontified t)) . 19) (undo-tree-id235 . -2) (undo-tree-id236 . -2) (undo-tree-id237 . -2)) (23732 47414 660405 70000) 0 nil]) ((1 . 2254) (#("
struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Stream for Receiver {
    type Item = Value;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<Value>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            let re = Regex::new(r\"(?x)(?P<json>\\{.*\\})\").unwrap();

            if let Some(cap) = re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read])) {
                let json_string = cap[\"json\"].to_string();
                let json: Value = serde_json::from_str(&json_string.clone())?;
                return Ok(Async::Ready(Some(json)));
            }
            return Ok(Async::NotReady);
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
    channel: String,
}
impl Future for Sender {
    type Item = ();
    type Error = Box<Error>;
    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        println!(\"Subscribing to {}\", &self.channel);
        let subscribe_cmd = format!(
            \"*2\\r\\n$9\\r\\nsubscribe\\r\\n${}\\r\\n{}\\r\\n\",
            self.channel.len(),
            self.channel
        );
        let mut buffer = subscribe_cmd.as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn get_socket() -> impl Future<Item = TcpStream, Error = Box<Error>> {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    connection
        .and_then(|socket| Ok(socket))
        .map_err(|e| Box::new(e))
}

fn send_subscribe_cmd(tx: WriteHalf<TcpStream>, channel: String) {
    let sender = Sender { tx, channel };
    tokio::spawn(sender.map_err(|e| eprintln!(\"{}\", e)));
}

fn stream_from(timeline: String) -> impl Future<Item = Receiver, Error = warp::reject::Rejection> {
    get_socket()
        .and_then(move |socket| {
            let (rx, tx) = socket.split();
            send_subscribe_cmd(tx, format!(\"timeline:{}\", timeline));
            let stream_of_data_from_redis = Receiver { rx };
            Ok(stream_of_data_from_redis)
        })
        .and_then(|stream| Ok(stream))
        .map_err(|e| warp::reject::custom(e))
}
" 0 1 (fontified t rear-nonsticky t) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 16 (fontified t face font-lock-type-face) 16 23 (fontified t) 23 25 (fontified t face font-lock-variable-name-face) 25 27 (fontified t) 27 35 (fontified t face font-lock-type-face) 35 36 (fontified t) 36 45 (fontified t face font-lock-type-face) 45 50 (fontified t) 50 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-type-face) 61 62 (fontified t) 62 65 (fontified t face font-lock-keyword-face) 65 66 (fontified t) 66 74 (fontified t face font-lock-type-face) 74 81 (fontified t) 81 85 (fontified t face font-lock-keyword-face) 85 86 (fontified t) 86 90 (fontified t face font-lock-type-face) 90 93 (fontified t) 93 98 (fontified t face font-lock-type-face) 98 104 (fontified t) 104 108 (fontified t face font-lock-keyword-face) 108 109 (fontified t) 109 114 (fontified t face font-lock-type-face) 114 117 (fontified t) 117 122 (fontified t face font-lock-type-face) 122 129 (fontified t) 129 131 (fontified t face font-lock-keyword-face) 131 132 (fontified t) 132 136 (fontified t face font-lock-function-name-face) 136 138 (fontified t) 138 141 (fontified t face font-lock-keyword-face) 141 142 (fontified t) 142 146 (fontified t face font-lock-keyword-face) 146 149 (fontified t) 149 150 (fontified t syntax-table #1#) 150 151 (fontified t) 151 155 (fontified t face font-lock-type-face) 155 156 (fontified t) 156 162 (fontified t face font-lock-type-face) 162 163 (fontified t) 163 168 (fontified t face font-lock-type-face) 168 171 (fontified t) 171 175 (fontified t face font-lock-type-face) 175 177 (fontified t) 177 182 (fontified t face font-lock-type-face) 182 194 (fontified t) 194 197 (fontified t face font-lock-keyword-face) 197 198 (fontified t) 198 201 (fontified t face font-lock-keyword-face) 201 202 (fontified t) 202 208 (fontified t face font-lock-variable-name-face) 208 211 (fontified t) 211 215 (fontified t face font-lock-preprocessor-face) 215 236 (fontified t) 236 241 (fontified t face font-lock-keyword-face) 241 242 (fontified t) 242 245 (fontified t face font-lock-keyword-face) 245 246 (fontified t) 246 251 (fontified t face font-lock-type-face) 251 253 (fontified t) 253 258 (fontified t face font-lock-type-face) 258 263 (fontified t) 263 277 (fontified t) 277 281 (fontified t face font-lock-keyword-face) 281 296 (fontified t) 296 299 (fontified t face font-lock-keyword-face) 299 307 (fontified t) 307 308 (fontified t face rust-question-mark-face) 308 311 (fontified t) 311 323 (fontified t) 323 326 (fontified t face font-lock-keyword-face) 326 327 (fontified t) 327 329 (fontified t face font-lock-variable-name-face) 329 332 (fontified t) 332 337 (fontified t face font-lock-type-face) 337 343 (fontified t) 343 344 (fontified t syntax-table #2# face font-lock-string-face) 344 365 (fontified t face font-lock-string-face) 365 366 (fontified t syntax-table #3# face font-lock-string-face) 366 371 (fontified t) 371 378 (fontified t) 378 391 (fontified t) 391 393 (fontified t face font-lock-keyword-face) 393 394 (fontified t) 394 397 (fontified t face font-lock-keyword-face) 397 398 (fontified t) 398 402 (fontified t face font-lock-type-face) 402 423 (fontified t) 423 429 (fontified t face font-lock-type-face) 429 493 (fontified t) 493 496 (fontified t face font-lock-keyword-face) 496 497 (fontified t) 497 500 (fontified t face font-lock-variable-name-face) 500 508 (fontified t face font-lock-variable-name-face) 508 515 (fontified t) 515 521 (fontified t face font-lock-string-face) 521 536 (fontified t) 536 552 (fontified t) 552 555 (fontified t face font-lock-keyword-face) 555 556 (fontified t) 556 560 (fontified t face font-lock-variable-name-face) 560 562 (fontified t) 562 567 (fontified t face font-lock-type-face) 567 570 (fontified t) 570 580 (fontified t face font-lock-constant-face) 580 612 (fontified t) 612 613 (fontified t face rust-question-mark-face) 613 614 (fontified t) 614 615 (fontified t) 615 631 (fontified t) 631 637 (fontified t face font-lock-keyword-face) 637 638 (fontified t) 638 640 (fontified t face font-lock-type-face) 640 641 (fontified t) 641 646 (fontified t face font-lock-type-face) 646 648 (fontified t) 648 653 (fontified t face font-lock-type-face) 653 654 (fontified t) 654 658 (fontified t face font-lock-type-face) 658 668 (fontified t) 668 694 (fontified t) 694 700 (fontified t face font-lock-keyword-face) 700 701 (fontified t) 701 703 (fontified t face font-lock-type-face) 703 704 (fontified t) 704 709 (fontified t face font-lock-type-face) 709 711 (fontified t) 711 719 (fontified t face font-lock-type-face) 719 740 (fontified t) 740 746 (fontified t face font-lock-keyword-face) 746 747 (fontified t) 747 749 (fontified t face font-lock-type-face) 749 750 (fontified t) 750 753 (fontified t face font-lock-type-face) 753 755 (fontified t face font-lock-type-face) 755 757 (fontified t) 757 765 (fontified t face font-lock-type-face) 765 768 (fontified t) 768 777 (fontified t) 777 783 (fontified t face font-lock-keyword-face) 783 784 (fontified t) 784 790 (fontified t face font-lock-type-face) 790 797 (fontified t) 797 799 (fontified t face font-lock-variable-name-face) 799 801 (fontified t) 801 810 (fontified t face font-lock-type-face) 810 811 (fontified t) 811 820 (fontified t face font-lock-type-face) 820 823 (fontified t) 823 827 (fontified t) 827 834 (fontified t face font-lock-variable-name-face) 834 836 (fontified t) 836 842 (fontified t face font-lock-type-face) 842 846 (fontified t) 846 850 (fontified t face font-lock-keyword-face) 850 851 (fontified t) 851 857 (fontified t face font-lock-type-face) 857 858 (fontified t) 858 861 (fontified t face font-lock-keyword-face) 861 862 (fontified t) 862 868 (fontified t face font-lock-type-face) 868 875 (fontified t) 875 879 (fontified t face font-lock-keyword-face) 879 880 (fontified t) 880 884 (fontified t face font-lock-type-face) 884 895 (fontified t) 895 899 (fontified t face font-lock-keyword-face) 899 900 (fontified t) 900 905 (fontified t face font-lock-type-face) 905 908 (fontified t) 908 911 (fontified t face font-lock-type-face) 911 912 (fontified t) 912 917 (fontified t face font-lock-type-face) 917 924 (fontified t) 924 926 (fontified t face font-lock-keyword-face) 926 927 (fontified t) 927 931 (fontified t face font-lock-function-name-face) 931 933 (fontified t) 933 936 (fontified t face font-lock-keyword-face) 936 937 (fontified t) 937 941 (fontified t face font-lock-keyword-face) 941 944 (fontified t) 944 945 (fontified t syntax-table #1#) 945 946 (fontified t) 946 950 (fontified t face font-lock-type-face) 950 951 (fontified t) 951 955 (fontified t face font-lock-type-face) 955 957 (fontified t) 957 961 (fontified t face font-lock-type-face) 961 963 (fontified t) 963 967 (fontified t face font-lock-type-face) 967 969 (fontified t) 969 974 (fontified t face font-lock-type-face) 974 986 (fontified t) 986 994 (fontified t face rust-builtin-formatting-macro-face) 994 995 (fontified t) 995 1011 (fontified t face font-lock-string-face) 1011 1013 (fontified t face rust-string-interpolation-face) 1013 1014 (fontified t face font-lock-string-face) 1014 1017 (fontified t) 1017 1021 (fontified t face font-lock-keyword-face) 1021 1036 (fontified t) 1036 1040 (fontified t) 1040 1043 (fontified t face font-lock-keyword-face) 1043 1044 (fontified t) 1044 1057 (fontified t face font-lock-variable-name-face) 1057 1060 (fontified t) 1060 1063 (fontified t face rust-builtin-formatting-macro-face) 1063 1067 (fontified t face rust-builtin-formatting-macro-face) 1067 1069 (fontified t) 1069 1081 (fontified t) 1081 1108 (fontified t face font-lock-string-face) 1108 1110 (fontified t face font-lock-string-face) 1110 1114 (fontified t face font-lock-string-face) 1114 1115 (fontified t face font-lock-string-face) 1115 1116 (fontified t face font-lock-string-face) 1116 1121 (fontified t face font-lock-string-face) 1121 1123 (fontified t) 1123 1135 (fontified t) 1135 1139 (fontified t face font-lock-keyword-face) 1139 1167 (fontified t) 1167 1168 (fontified t face font-lock-keyword-face) 1168 1171 (fontified t face font-lock-keyword-face) 1171 1180 (fontified t) 1180 1199 (fontified t) 1199 1202 (fontified t face font-lock-keyword-face) 1202 1203 (fontified t) 1203 1206 (fontified t face font-lock-keyword-face) 1206 1207 (fontified t) 1207 1213 (fontified t face font-lock-variable-name-face) 1213 1250 (fontified t) 1250 1254 (fontified t face font-lock-keyword-face) 1254 1268 (fontified t) 1268 1270 (fontified t) 1270 1273 (fontified t face font-lock-keyword-face) 1273 1281 (fontified t) 1281 1282 (fontified t face rust-question-mark-face) 1282 1284 (fontified t) 1284 1292 (fontified t) 1292 1298 (fontified t face font-lock-keyword-face) 1298 1299 (fontified t) 1299 1301 (fontified t face font-lock-type-face) 1301 1302 (fontified t) 1302 1307 (fontified t face font-lock-type-face) 1307 1309 (fontified t) 1309 1317 (fontified t face font-lock-type-face) 1317 1323 (fontified t) 1323 1326 (fontified t) 1326 1329 (fontified t) 1329 1331 (fontified t face font-lock-keyword-face) 1331 1332 (fontified t) 1332 1342 (fontified t face font-lock-function-name-face) 1342 1346 (fontified t) 1346 1347 (fontified t syntax-table #1#) 1347 1348 (fontified t) 1348 1352 (fontified t face font-lock-keyword-face) 1352 1353 (fontified t) 1353 1359 (fontified t face font-lock-type-face) 1359 1360 (fontified t) 1360 1364 (fontified t face font-lock-type-face) 1364 1367 (fontified t) 1367 1376 (fontified t face font-lock-type-face) 1376 1378 (fontified t) 1378 1383 (fontified t face font-lock-type-face) 1383 1386 (fontified t) 1386 1389 (fontified t face font-lock-type-face) 1389 1390 (fontified t) 1390 1395 (fontified t face font-lock-type-face) 1395 1404 (fontified t) 1404 1407 (fontified t face font-lock-keyword-face) 1407 1408 (fontified t) 1408 1415 (fontified t face font-lock-variable-name-face) 1415 1418 (fontified t) 1418 1434 (fontified t face font-lock-string-face) 1434 1450 (fontified t) 1450 1475 (fontified t face font-lock-string-face) 1475 1482 (fontified t) 1482 1485 (fontified t face font-lock-keyword-face) 1485 1486 (fontified t) 1486 1496 (fontified t face font-lock-variable-name-face) 1496 1499 (fontified t) 1499 1508 (fontified t face font-lock-type-face) 1508 1569 (fontified t) 1569 1571 (fontified t) 1571 1573 (fontified t face font-lock-type-face) 1573 1583 (fontified t) 1604 1607 (face font-lock-type-face) 1620 1622 (face font-lock-keyword-face) 1623 1641 (face font-lock-function-name-face) 1642 1644 (face font-lock-variable-name-face) 1646 1655 (face font-lock-type-face) 1656 1665 (face font-lock-type-face) 1668 1675 (face font-lock-variable-name-face) 1677 1680 (face font-lock-type-face) 1680 1683 (face font-lock-type-face) 1691 1694 (face font-lock-keyword-face) 1695 1701 (face font-lock-variable-name-face) 1704 1710 (face font-lock-type-face) 1732 1737 (face font-lock-constant-face) 1764 1773 (face rust-builtin-formatting-macro-face) 1774 1775 (face font-lock-string-face) 1775 1777 (face rust-string-interpolation-face) 1777 1778 (face font-lock-string-face) 1789 1791 (face font-lock-keyword-face) 1792 1803 (face font-lock-function-name-face) 1804 1812 (face font-lock-variable-name-face) 1814 1820 (face font-lock-type-face) 1823 1824 (syntax-table #1#) 1825 1826 (face font-lock-keyword-face) 1826 1829 (face font-lock-keyword-face) 1830 1836 (face font-lock-type-face) 1837 1841 (face font-lock-type-face) 1844 1852 (face font-lock-type-face) 1854 1859 (face font-lock-type-face) 1862 1866 (face font-lock-constant-face) 1868 1874 (face font-lock-constant-face) 1876 1885 (face font-lock-type-face) 1924 1928 (face font-lock-keyword-face) 1952 1955 (face font-lock-keyword-face) 2018 2025 (face rust-builtin-formatting-macro-face) 2026 2036 (face font-lock-string-face) 2036 2038 (face rust-string-interpolation-face) 2038 2039 (face font-lock-string-face) 2065 2068 (face font-lock-keyword-face) 2069 2094 (face font-lock-variable-name-face) 2097 2105 (face font-lock-type-face) 2126 2128 (face font-lock-type-face) 2194 2196 (face font-lock-type-face) 2227 2231 (face font-lock-constant-face) 2233 2239 (face font-lock-constant-face) 2252 2253 (fontified nil) 2253 2254 (fontified nil)) . 1) (undo-tree-id0 . -2253) (undo-tree-id1 . -50) (undo-tree-id2 . -1) (undo-tree-id3 . -2253) (undo-tree-id5 . -48) (2254 . 2255) 51) ((#("
" 0 1 (fontified nil)) . 2254) (1 . 2255) (#("struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Stream for Receiver {
    type Item = Value;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<Value>, Self::Error> {
        let mut buffer = vec![0u8; 3000];
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            let re = Regex::new(r\"(?x)(?P<json>\\{.*\\})\").unwrap();

            if let Some(cap) = re.captures(&String::from_utf8_lossy(&buffer[..num_bytes_read])) {
                let json_string = cap[\"json\"].to_string();
                let json: Value = serde_json::from_str(&json_string.clone())?;
                return Ok(Async::Ready(Some(json)));
            }
            return Ok(Async::NotReady);
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
    channel: String,
}
impl Future for Sender {
    type Item = ();
    type Error = Box<Error>;
    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        println!(\"Subscribing to {}\", &self.channel);
        let subscribe_cmd = format!(
            \"*2\\r\\n$9\\r\\nsubscribe\\r\\n${}\\r\\n{}\\r\\n\",
            self.channel.len(),
            self.channel
        );
        let mut buffer = subscribe_cmd.as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn get_socket() -> impl Future<Item = TcpStream, Error = Box<Error>> {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    connection
        .and_then(|socket| Ok(socket))
        .map_err(|e| Box::new(e))
}

fn send_subscribe_cmd(tx: WriteHalf<TcpStream>, channel: String) {
    let sender = Sender { tx, channel };
    tokio::spawn(sender.map_err(|e| eprintln!(\"{}\", e)));
}

fn stream_from(timeline: String) -> impl Future<Item = Receiver, Error = warp::reject::Rejection> {
    get_socket()
        .and_then(move |socket| {
            let (rx, tx) = socket.split();
            send_subscribe_cmd(tx, format!(\"timeline:{}\", timeline));
            let stream_of_data_from_redis = Receiver { rx };
            Ok(stream_of_data_from_redis)
        })
        .and_then(|stream| Ok(stream))
        .map_err(|e| warp::reject::custom(e))
}
" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 15 (fontified t face font-lock-type-face) 15 17 (fontified t) 17 18 (fontified t) 18 22 (fontified t) 22 24 (fontified t face font-lock-variable-name-face) 24 26 (fontified t) 26 34 (fontified t face font-lock-type-face) 34 35 (fontified t) 35 44 (fontified t face font-lock-type-face) 44 47 (fontified t) 47 49 (fontified t) 49 53 (fontified t face font-lock-keyword-face) 53 54 (fontified t) 54 60 (fontified t face font-lock-type-face) 60 61 (fontified t) 61 64 (fontified t face font-lock-keyword-face) 64 65 (fontified t) 65 73 (fontified t face font-lock-type-face) 73 75 (fontified t) 75 80 (fontified t) 80 84 (fontified t face font-lock-keyword-face) 84 85 (fontified t) 85 89 (fontified t face font-lock-type-face) 89 92 (fontified t) 92 97 (fontified t face font-lock-type-face) 97 103 (fontified t) 103 107 (fontified t face font-lock-keyword-face) 107 108 (fontified t) 108 113 (fontified t face font-lock-type-face) 113 116 (fontified t) 116 121 (fontified t face font-lock-type-face) 121 128 (fontified t) 128 130 (fontified t face font-lock-keyword-face) 130 131 (fontified t) 131 135 (fontified t face font-lock-function-name-face) 135 137 (fontified t) 137 140 (fontified t face font-lock-keyword-face) 140 141 (fontified t) 141 145 (fontified t face font-lock-keyword-face) 145 148 (fontified t) 148 149 (syntax-table #1# fontified t) 149 150 (fontified t) 150 154 (fontified t face font-lock-type-face) 154 155 (fontified t) 155 161 (fontified t face font-lock-type-face) 161 162 (fontified t) 162 167 (fontified t face font-lock-type-face) 167 170 (fontified t) 170 174 (fontified t face font-lock-type-face) 174 176 (fontified t) 176 181 (fontified t face font-lock-type-face) 181 193 (fontified t) 193 196 (fontified t face font-lock-keyword-face) 196 197 (fontified t) 197 200 (fontified t face font-lock-keyword-face) 200 201 (fontified t) 201 207 (fontified t face font-lock-variable-name-face) 207 210 (fontified t) 210 214 (fontified t face font-lock-preprocessor-face) 214 235 (fontified t) 235 240 (fontified t face font-lock-keyword-face) 240 241 (fontified t) 241 244 (fontified t face font-lock-keyword-face) 244 245 (fontified t) 245 250 (fontified t face font-lock-type-face) 250 252 (fontified t) 252 257 (fontified t face font-lock-type-face) 257 276 (fontified t) 276 280 (fontified t face font-lock-keyword-face) 280 295 (fontified t) 295 298 (fontified t face font-lock-keyword-face) 298 306 (fontified t) 306 307 (fontified t face rust-question-mark-face) 307 322 (fontified t) 322 325 (fontified t face font-lock-keyword-face) 325 326 (fontified t) 326 328 (fontified t face font-lock-variable-name-face) 328 331 (fontified t) 331 336 (fontified t face font-lock-type-face) 336 342 (fontified t) 342 343 (syntax-table #2# fontified t face font-lock-string-face) 343 364 (fontified t face font-lock-string-face) 364 365 (syntax-table #3# fontified t face font-lock-string-face) 365 390 (fontified t) 390 392 (fontified t face font-lock-keyword-face) 392 393 (fontified t) 393 396 (fontified t face font-lock-keyword-face) 396 397 (fontified t) 397 401 (fontified t face font-lock-type-face) 401 422 (fontified t) 422 428 (fontified t face font-lock-type-face) 428 492 (fontified t) 492 495 (fontified t face font-lock-keyword-face) 495 496 (fontified t) 496 507 (fontified t face font-lock-variable-name-face) 507 514 (fontified t) 514 520 (fontified t face font-lock-string-face) 520 529 (fontified t) 529 535 (fontified t) 535 547 (fontified t) 547 549 (fontified t) 549 551 (fontified t) 551 554 (face font-lock-keyword-face fontified t) 554 555 (fontified t) 555 559 (face font-lock-variable-name-face fontified t) 559 561 (fontified t) 561 566 (face font-lock-type-face fontified t) 566 569 (fontified t) 569 575 (face font-lock-constant-face fontified t) 575 579 (face font-lock-constant-face fontified t) 579 611 (fontified t) 611 612 (face rust-question-mark-face fontified t) 612 614 (fontified t) 614 630 (fontified t) 630 636 (fontified t face font-lock-keyword-face) 636 637 (fontified t) 637 639 (fontified t face font-lock-type-face) 639 640 (fontified t) 640 645 (fontified t face font-lock-type-face) 645 647 (fontified t) 647 652 (fontified t face font-lock-type-face) 652 653 (fontified t) 653 657 (fontified t face font-lock-type-face) 657 693 (fontified t) 693 699 (fontified t face font-lock-keyword-face) 699 700 (fontified t) 700 702 (fontified t face font-lock-type-face) 702 703 (fontified t) 703 708 (fontified t face font-lock-type-face) 708 710 (fontified t) 710 718 (fontified t face font-lock-type-face) 718 739 (fontified t) 739 745 (fontified t face font-lock-keyword-face) 745 746 (fontified t) 746 748 (fontified t face font-lock-type-face) 748 749 (fontified t) 749 754 (fontified t face font-lock-type-face) 754 756 (fontified t) 756 764 (fontified t face font-lock-type-face) 764 776 (fontified t) 776 782 (fontified t face font-lock-keyword-face) 782 783 (fontified t) 783 789 (fontified t face font-lock-type-face) 789 796 (fontified t) 796 798 (fontified t face font-lock-variable-name-face) 798 800 (fontified t) 800 809 (fontified t face font-lock-type-face) 809 810 (fontified t) 810 819 (fontified t face font-lock-type-face) 819 826 (fontified t) 826 833 (fontified t face font-lock-variable-name-face) 833 835 (fontified t) 835 841 (fontified t face font-lock-type-face) 841 845 (fontified t) 845 849 (fontified t face font-lock-keyword-face) 849 850 (fontified t) 850 856 (fontified t face font-lock-type-face) 856 857 (fontified t) 857 860 (fontified t face font-lock-keyword-face) 860 861 (fontified t) 861 867 (fontified t face font-lock-type-face) 867 874 (fontified t) 874 878 (fontified t face font-lock-keyword-face) 878 879 (fontified t) 879 883 (fontified t face font-lock-type-face) 883 894 (fontified t) 894 898 (fontified t face font-lock-keyword-face) 898 899 (fontified t) 899 904 (fontified t face font-lock-type-face) 904 907 (fontified t) 907 910 (fontified t face font-lock-type-face) 910 911 (fontified t) 911 916 (fontified t face font-lock-type-face) 916 923 (fontified t) 923 925 (fontified t face font-lock-keyword-face) 925 926 (fontified t) 926 930 (fontified t face font-lock-function-name-face) 930 932 (fontified t) 932 935 (fontified t face font-lock-keyword-face) 935 936 (fontified t) 936 940 (fontified t face font-lock-keyword-face) 940 943 (fontified t) 943 944 (syntax-table #1# fontified t) 944 945 (fontified t) 945 949 (fontified t face font-lock-type-face) 949 950 (fontified t) 950 954 (fontified t face font-lock-type-face) 954 956 (fontified t) 956 960 (fontified t face font-lock-type-face) 960 962 (fontified t) 962 966 (fontified t face font-lock-type-face) 966 968 (fontified t) 968 973 (fontified t face font-lock-type-face) 973 985 (fontified t) 985 993 (fontified t face rust-builtin-formatting-macro-face) 993 994 (fontified t) 994 1010 (fontified t face font-lock-string-face) 1010 1012 (fontified t face rust-string-interpolation-face) 1012 1013 (fontified t face font-lock-string-face) 1013 1016 (fontified t) 1016 1020 (fontified t face font-lock-keyword-face) 1020 1035 (fontified t) 1035 1039 (fontified t) 1039 1042 (fontified t face font-lock-keyword-face) 1042 1043 (fontified t) 1043 1056 (fontified t face font-lock-variable-name-face) 1056 1059 (fontified t) 1059 1066 (fontified t face rust-builtin-formatting-macro-face) 1066 1068 (fontified t) 1068 1080 (fontified t) 1080 1107 (fontified t face font-lock-string-face) 1107 1109 (fontified t face rust-string-interpolation-face) 1109 1113 (fontified t face font-lock-string-face) 1113 1114 (fontified t face rust-string-interpolation-face) 1114 1115 (face rust-string-interpolation-face fontified t) 1115 1120 (face font-lock-string-face fontified t) 1120 1122 (fontified t) 1122 1134 (fontified t) 1134 1138 (fontified t face font-lock-keyword-face) 1138 1166 (fontified t) 1166 1170 (fontified t face font-lock-keyword-face) 1170 1198 (fontified t) 1198 1201 (fontified t face font-lock-keyword-face) 1201 1202 (fontified t) 1202 1205 (fontified t face font-lock-keyword-face) 1205 1206 (fontified t) 1206 1212 (fontified t face font-lock-variable-name-face) 1212 1249 (fontified t) 1249 1253 (fontified t face font-lock-keyword-face) 1253 1269 (fontified t) 1269 1272 (fontified t face font-lock-keyword-face) 1272 1280 (fontified t) 1280 1281 (fontified t face rust-question-mark-face) 1281 1291 (fontified t) 1291 1297 (fontified t face font-lock-keyword-face) 1297 1298 (fontified t) 1298 1300 (fontified t face font-lock-type-face) 1300 1301 (fontified t) 1301 1306 (fontified t face font-lock-type-face) 1306 1308 (fontified t) 1308 1316 (fontified t face font-lock-type-face) 1316 1328 (fontified t) 1328 1330 (fontified t face font-lock-keyword-face) 1330 1331 (fontified t) 1331 1341 (fontified t face font-lock-function-name-face) 1341 1345 (fontified t) 1345 1346 (syntax-table #1# fontified t) 1346 1347 (fontified t) 1347 1351 (fontified t face font-lock-keyword-face) 1351 1352 (fontified t) 1352 1358 (fontified t face font-lock-type-face) 1358 1359 (fontified t) 1359 1363 (fontified t face font-lock-type-face) 1363 1366 (fontified t) 1366 1375 (fontified t face font-lock-type-face) 1375 1377 (fontified t) 1377 1382 (fontified t face font-lock-type-face) 1382 1385 (fontified t) 1385 1388 (fontified t face font-lock-type-face) 1388 1389 (fontified t) 1389 1394 (fontified t face font-lock-type-face) 1394 1403 (fontified t) 1403 1406 (fontified t face font-lock-keyword-face) 1406 1407 (fontified t) 1407 1414 (fontified t face font-lock-variable-name-face) 1414 1417 (fontified t) 1417 1433 (fontified t face font-lock-string-face) 1433 1449 (fontified t) 1449 1474 (fontified t face font-lock-string-face) 1474 1481 (fontified t) 1481 1484 (fontified t face font-lock-keyword-face) 1484 1485 (fontified t) 1485 1495 (fontified t face font-lock-variable-name-face) 1495 1498 (fontified t) 1498 1507 (fontified t face font-lock-type-face) 1507 1568 (fontified t) 1568 1570 (fontified t) 1570 1572 (fontified t face font-lock-type-face) 1572 1582 (fontified t) 1582 1603 (fontified t) 1603 1606 (fontified t face font-lock-type-face) 1606 1619 (fontified t) 1619 1621 (fontified t face font-lock-keyword-face) 1621 1622 (fontified t) 1622 1640 (face font-lock-function-name-face fontified t) 1640 1641 (fontified t) 1641 1643 (face font-lock-variable-name-face fontified t) 1643 1645 (fontified t) 1645 1654 (face font-lock-type-face fontified t) 1654 1655 (fontified t) 1655 1664 (face font-lock-type-face fontified t) 1664 1667 (fontified t) 1667 1674 (face font-lock-variable-name-face fontified t) 1674 1676 (fontified t) 1676 1682 (face font-lock-type-face fontified t) 1682 1686 (fontified t) 1822 1823 (syntax-table #1#)) . 1) (undo-tree-id238 . -18) (undo-tree-id239 . -18) (undo-tree-id240 . -47) (undo-tree-id241 . -48) (undo-tree-id242 . -6) (undo-tree-id243 . -6) (undo-tree-id244 . -7) (undo-tree-id245 . -47) (undo-tree-id246 . -48) (undo-tree-id247 . -18) (undo-tree-id248 . -18) (undo-tree-id249 . -18) (undo-tree-id250 . -18) (t 23732 47382 541033 717000)) (23732 47415 121438 347000) 0 nil]) ((nil rear-nonsticky nil 1 . 2) (#("
" 0 1 (fontified nil)) . -2254) (1 . 2255) (t . -1)) nil (23732 47415 643219 95000) 0 nil]) nil nil (23732 47382 531457 767000) 0 nil] #4# 10520 28 nil)