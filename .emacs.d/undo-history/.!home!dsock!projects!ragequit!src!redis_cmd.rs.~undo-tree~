"67397024b1f6bc5e91c7105735ebd70a63bcc757"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#2=[nil nil ((552 . 560) (#("`" 0 1 (fontified nil face font-lock-doc-face)) . 552) (548 . 552) (547 . 549) (#("`" 0 1 (fontified nil face font-lock-doc-face)) . -547) (540 . 548) (538 . 540) (536 . 538) (535 . 536) 535) nil (23764 55584 890319 47000) 0 nil]) ((133 . 141) (#("c" 0 1 (fontified t face font-lock-doc-face)) . -133) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (#("h" 0 1 (fontified t face font-lock-doc-face)) . -134) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (#("a" 0 1 (fontified t face font-lock-doc-face)) . -135) (undo-tree-id100 . -1) (undo-tree-id101 . -1) (#("n" 0 1 (fontified t face font-lock-doc-face)) . -136) (undo-tree-id102 . -1) (undo-tree-id103 . -1) (#("n" 0 1 (fontified t face font-lock-doc-face)) . -137) (undo-tree-id104 . -1) (undo-tree-id105 . -1) 138 (133 . 138)) nil (23764 55584 890346 168000) 0 nil]) ((127 . 133) (#("c" 0 1 (fontified t face font-lock-doc-face)) . -127) (undo-tree-id106 . -1) (undo-tree-id107 . -1) (#("i" 0 1 (fontified t face font-lock-doc-face)) . -128) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (#("v" 0 1 (fontified t face font-lock-doc-face)) . -129) (undo-tree-id110 . -1) (undo-tree-id111 . -1) (#("i" 0 1 (fontified t face font-lock-doc-face)) . -130) (undo-tree-id112 . -1) (undo-tree-id113 . -1) (#("d" 0 1 (fontified t face font-lock-doc-face)) . -131) (undo-tree-id114 . -1) (undo-tree-id115 . -1) 132 (113 . 132) (111 . 113) (#("v" 0 1 (fontified t face font-lock-doc-face)) . -111) (undo-tree-id116 . -1) (undo-tree-id117 . -1) 112 (110 . 112) (#("`" 0 1 (fontified nil face font-lock-doc-face)) . 110) (98 . 110) (97 . 99) (#("`" 0 1 (fontified nil face font-lock-doc-face)) . -97) (97 . 98) (93 . 97) (#("`" 0 1 (fontified nil face font-lock-doc-face)) . 93) (92 . 93) (#(" " 0 1 (fontified nil)) . -92) (92 . 93) (#("`" 0 1 (fontified nil)) . -92) (92 . 93) (#(" " 0 1 (fontified nil)) . -92) (92 . 93) (#("`" 0 1 (fontified nil face font-lock-doc-face)) . -92) (84 . 93) (#("U" 0 1 (fontified t face font-lock-doc-face)) . -84) (undo-tree-id118 . -1) (undo-tree-id119 . -1) 85 (83 . 85) (82 . 84) (#("`" 0 1 (fontified nil face font-lock-doc-face)) . -82) (75 . 83) (71 . 75) (70 . 71) 70) nil (23764 55584 890383 332000) 0 nil]) ((40 . 46) (34 . 40) (14 . 34) (#("t" 0 1 (fontified t face font-lock-doc-face)) . -14) (undo-tree-id120 . -1) (undo-tree-id121 . -1) 15 (10 . 15) (#("w" 0 1 (fontified t face font-lock-doc-face)) . -10) (undo-tree-id122 . -1) (undo-tree-id123 . -1) (#("r" 0 1 (fontified t face font-lock-doc-face)) . -11) (undo-tree-id124 . -1) (undo-tree-id125 . -1) (#("a" 0 1 (fontified t face font-lock-doc-face)) . -12) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("w" 0 1 (fontified t face font-lock-doc-face)) . -13) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (#(" " 0 1 (fontified t face font-lock-doc-face)) . -14) (undo-tree-id130 . -1) (undo-tree-id131 . -1) 15 (11 . 15) (#("a" 0 1 (fontified t face font-lock-doc-face)) . -11) (undo-tree-id132 . -1) (undo-tree-id133 . -1) 12 (10 . 12) (#("q" 0 1 (fontified t face font-lock-doc-face)) . -10) (undo-tree-id134 . -1) (undo-tree-id135 . -1) 11 (2 . 11) (#("." 0 1 (fontified t)) . -2) (undo-tree-id136 . -1) (undo-tree-id137 . -1) 3 (1 . 3) (1 . 2) (t 23764 41243 762390 182000)) nil (23764 55584 890420 872000) 0 nil]) ((417 . 418) 416) nil (23764 41243 746534 360000) 0 nil]) ((23 . 24) (22 . 23) (15 . 22) (#("Di" 0 2 (fontified t face font-lock-type-face)) . -15) (undo-tree-id92 . -2) (undo-tree-id93 . -2) 17 (13 . 17) (10 . 13) (#("fm" 0 2 (fontified t)) . -10) (undo-tree-id94 . -2) (undo-tree-id95 . -2) 12 (1 . 12) (1 . 2) (t 23764 41205 589249 699000)) nil (23764 41243 746553 588000) 0 nil]) ((1 . 768) (#("
pub fn pubsub(command: impl Display, timeline: impl Display) -> Vec<u8> {
        let arg = format!(\"timeline:{}\", timeline);
        let command = command.to_string();
        format!(
            \"*2\\r\\n${cmd_length}\\r\\n{cmd}\\r\\n${arg_length}\\r\\n{arg}\\r\\n\",
            cmd_length = command.len(),
            cmd = command,
            arg_length = arg.len(),
            arg = arg
        )
        .as_bytes()
        .to_owned()
    }
   pub fn set(key: impl Display, value: impl Display) -> Vec<u8> {
        let (key, value) = (key.to_string(), value.to_string());
        format!(
            \"*3\\r\\n$3\\r\\nSET\\r\\n${key_length}\\r\\n{key}\\r\\n${value_length}\\r\\n{value}\\r\\n\",
            key_length = key.len(),
            key = key,
            value_length = value.len(),
            value = value
        )
        .as_bytes()
        .to_owned()
    }
" 0 1 (fontified t rear-nonsticky t) 1 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 14 (fontified t face font-lock-function-name-face) 14 15 (fontified t) 15 22 (fontified t face font-lock-variable-name-face) 22 24 (fontified t) 24 28 (fontified t face font-lock-keyword-face) 28 29 (fontified t) 29 36 (fontified t face font-lock-type-face) 36 38 (fontified t) 38 46 (fontified t face font-lock-variable-name-face) 46 48 (fontified t) 48 52 (fontified t face font-lock-keyword-face) 52 53 (fontified t) 53 60 (fontified t face font-lock-type-face) 60 63 (fontified t) 63 64 (fontified t syntax-table #1=(1)) 64 65 (fontified t) 65 68 (fontified t face font-lock-type-face) 68 69 (fontified t) 69 71 (fontified t face font-lock-type-face) 71 75 (fontified t) 75 83 (fontified t) 83 86 (fontified t face font-lock-keyword-face) 86 87 (fontified t) 87 90 (fontified t face font-lock-variable-name-face) 90 93 (fontified t) 93 100 (fontified t face rust-builtin-formatting-macro-face) 100 101 (fontified t) 101 111 (fontified t face font-lock-string-face) 111 113 (fontified t face rust-string-interpolation-face) 113 114 (fontified t face font-lock-string-face) 114 135 (fontified t) 135 138 (fontified t face font-lock-keyword-face) 138 139 (fontified t) 139 146 (fontified t face font-lock-variable-name-face) 146 178 (fontified t) 178 185 (fontified t face rust-builtin-formatting-macro-face) 185 199 (fontified t) 199 207 (fontified t face font-lock-string-face) 207 219 (fontified t face rust-string-interpolation-face) 219 223 (fontified t face font-lock-string-face) 223 228 (fontified t face rust-string-interpolation-face) 228 233 (fontified t face font-lock-string-face) 233 245 (fontified t face rust-string-interpolation-face) 245 249 (fontified t face font-lock-string-face) 249 254 (fontified t face rust-string-interpolation-face) 254 259 (fontified t face font-lock-string-face) 259 331 (fontified t) 331 361 (fontified t) 361 364 (fontified t) 364 442 (fontified t) 442 445 (fontified t) 445 448 (fontified t face font-lock-keyword-face) 448 449 (fontified t) 449 451 (fontified t face font-lock-keyword-face) 451 452 (fontified t) 452 455 (fontified t face font-lock-function-name-face) 455 456 (fontified t) 456 459 (fontified t face font-lock-variable-name-face) 459 461 (fontified t) 461 465 (fontified t face font-lock-keyword-face) 465 466 (fontified t) 466 468 (fontified t face font-lock-type-face) 468 473 (fontified t face font-lock-type-face) 473 475 (fontified t) 475 480 (fontified t face font-lock-variable-name-face) 480 482 (fontified t) 482 486 (fontified t face font-lock-keyword-face) 486 487 (fontified t) 487 494 (fontified t face font-lock-type-face) 494 497 (fontified t) 497 498 (fontified t syntax-table #1#) 498 499 (fontified t) 499 502 (fontified t face font-lock-type-face) 502 503 (fontified t) 503 504 (fontified t face font-lock-type-face) 504 505 (fontified t face font-lock-type-face) 505 509 (fontified t) 509 517 (fontified t) 517 520 (fontified t face font-lock-keyword-face) 520 578 (fontified t) 578 582 (fontified t) 582 589 (fontified t face rust-builtin-formatting-macro-face) 589 591 (fontified t) 591 603 (fontified t) 603 624 (fontified t face font-lock-string-face) 624 636 (fontified t face rust-string-interpolation-face) 636 640 (fontified t face font-lock-string-face) 640 645 (fontified t face rust-string-interpolation-face) 645 650 (fontified t face font-lock-string-face) 650 664 (fontified t face rust-string-interpolation-face) 664 668 (fontified t face font-lock-string-face) 668 675 (fontified t face rust-string-interpolation-face) 675 680 (fontified t face font-lock-string-face) 680 863 (fontified t)) . 1) (undo-tree-id0 . -863) (undo-tree-id1 . -1) (undo-tree-id2 . -863) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . 415) (undo-tree-id18 . -446) (undo-tree-id19 . -445) (undo-tree-id20 . -446) (undo-tree-id21 . -445) (undo-tree-id22 . -447) (undo-tree-id23 . -446) (undo-tree-id24 . -447) (undo-tree-id25 . -447) (undo-tree-id26 . -446) (undo-tree-id27 . -447) (undo-tree-id28 . -447) (undo-tree-id29 . -446) (undo-tree-id30 . -447) (undo-tree-id31 . -446) (undo-tree-id32 . -447) (undo-tree-id33 . -446) (undo-tree-id34 . -448) (undo-tree-id35 . -447) (undo-tree-id36 . -448) (undo-tree-id37 . -448) (undo-tree-id38 . -447) (undo-tree-id39 . -448) (undo-tree-id40 . -448) (undo-tree-id41 . -447) (undo-tree-id42 . -448) (undo-tree-id43 . -447) (undo-tree-id44 . -448) (undo-tree-id45 . -447) (undo-tree-id46 . -448) (undo-tree-id47 . -448) (undo-tree-id48 . -448) (undo-tree-id49 . -448) (undo-tree-id50 . -448) (undo-tree-id51 . -448) (undo-tree-id52 . -448) (undo-tree-id53 . -448) (undo-tree-id54 . -448) (undo-tree-id55 . -448) (undo-tree-id56 . -448) (undo-tree-id57 . -448) (undo-tree-id58 . -448) (undo-tree-id59 . -448) (undo-tree-id60 . -448) (undo-tree-id61 . -448) (undo-tree-id62 . -448) (undo-tree-id63 . -514) (undo-tree-id64 . -448) (undo-tree-id65 . -448) (undo-tree-id66 . -447) (undo-tree-id67 . -447) (undo-tree-id68 . -447) (undo-tree-id69 . -447) (undo-tree-id70 . -514) (undo-tree-id71 . -447) (undo-tree-id72 . -514) (undo-tree-id73 . -514) 515) nil (23764 41205 577789 0) 0 nil]) ((446 . 449)) nil (23764 41205 577800 946000) 0 nil]) ((2 . 6)) nil (23764 41205 577803 519000) 0 nil]) ((#("struct RedisCmd {}
" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 15 (fontified t face font-lock-type-face) 15 19 (fontified t)) . 2) (undo-tree-id74 . -19) (undo-tree-id75 . -19) (undo-tree-id76 . -19) (undo-tree-id77 . -19) (undo-tree-id78 . -19) (undo-tree-id79 . -19) (undo-tree-id80 . -19) (undo-tree-id81 . -19) (undo-tree-id82 . -19) (undo-tree-id83 . -19) (undo-tree-id84 . -19) (undo-tree-id85 . -19) (undo-tree-id86 . -19) (undo-tree-id87 . -19)) nil (23764 41205 577823 962000) 0 nil]) ((#("}" 0 1 (fontified t)) . 876) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (#("{
    " 0 2 (fontified t) 2 6 (fontified t)) . 21) (undo-tree-id90 . -2) (undo-tree-id91 . -2) 23) nil (23764 41205 577835 860000) 0 nil]) ((#("impl RedisCmd " 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t) 5 13 (fontified t face font-lock-type-face) 13 14 (fontified t)) . 21)) nil (23764 41205 577839 316000) 0 nil]) ((nil rear-nonsticky nil 1 . 2) (#("
" 0 1 (fontified nil)) . -897) (1 . 898) (t . -1)) nil (23764 41205 577843 120000) 0 nil]) nil nil (23764 41205 577844 924000) 0 nil] #2# 2899 13 nil)