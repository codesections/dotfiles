"7044a39f24b9a7e66cbd2bd1adef078f15edff3c"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#2=[nil nil ((1802 . 1807)) nil (23730 33717 555621 274000) 0 nil]) ((#("G" 0 1 (fontified t face rust-string-interpolation-face)) . -1803) (undo-tree-id4678 . -1) 1804 (1803 . 1804) (t 23730 18799 452685 90000)) nil (23730 33717 555657 20000) 0 nil]) ((1 . 2000) (#("use futures::{Future, Poll};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use tokio::prelude::*;

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Stream for Receiver {
    type Item = String;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<String>, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(Some(\"Finished getting message.\".to_string())));
            }
            return Ok(Async::Ready(Some(String::from_utf8_lossy(&buffer[..num_bytes_read]).to_string())));
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
}
impl Future for Sender {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = \"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn create_connections() {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);

    let client = connection
        .and_then(|socket| {
            let (rx, tx) = socket.split();
            let sender = Sender { tx };
            tokio::spawn(sender.map_err(|e| println!(\"{}\", e)));
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)).for_each(|text| {
                println!(\"{}\", text);
                Ok(())
            }));
            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));
    tokio::run(client);
}

fn main() {
    create_connections();
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-type-face) 26 29 (fontified t) 29 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 38 (fontified t face font-lock-constant-face) 38 40 (fontified t) 40 42 (fontified t face font-lock-constant-face) 42 45 (fontified t) 45 54 (fontified t face font-lock-type-face) 54 56 (fontified t) 56 66 (fontified t face font-lock-type-face) 66 68 (fontified t) 68 73 (fontified t face font-lock-type-face) 73 75 (fontified t) 75 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 94 (fontified t face font-lock-type-face) 94 97 (fontified t) 97 100 (fontified t face font-lock-keyword-face) 100 101 (fontified t) 101 106 (fontified t face font-lock-constant-face) 106 108 (fontified t) 108 111 (fontified t face font-lock-constant-face) 111 113 (fontified t) 113 122 (fontified t face font-lock-type-face) 122 124 (fontified t) 124 127 (fontified t face font-lock-keyword-face) 127 128 (fontified t) 128 133 (fontified t face font-lock-constant-face) 133 135 (fontified t) 135 142 (fontified t face font-lock-constant-face) 142 148 (fontified t) 148 154 (fontified t face font-lock-keyword-face) 154 155 (fontified t) 155 163 (fontified t face font-lock-type-face) 163 170 (fontified t) 170 172 (fontified t face font-lock-variable-name-face) 172 174 (fontified t) 174 182 (fontified t face font-lock-type-face) 182 183 (fontified t) 183 192 (fontified t face font-lock-type-face) 192 197 (fontified t) 197 201 (fontified t face font-lock-keyword-face) 201 202 (fontified t) 202 208 (fontified t face font-lock-type-face) 208 209 (fontified t) 209 212 (fontified t face font-lock-keyword-face) 212 213 (fontified t) 213 221 (fontified t face font-lock-type-face) 221 228 (fontified t) 228 232 (fontified t face font-lock-keyword-face) 232 233 (fontified t) 233 237 (fontified t face font-lock-type-face) 237 240 (fontified t) 240 246 (fontified t face font-lock-type-face) 246 252 (fontified t) 252 256 (fontified t face font-lock-keyword-face) 256 257 (fontified t) 257 262 (fontified t face font-lock-type-face) 262 265 (fontified t) 265 270 (fontified t face font-lock-type-face) 270 277 (fontified t) 277 279 (fontified t face font-lock-keyword-face) 279 280 (fontified t) 280 284 (fontified t face font-lock-function-name-face) 284 286 (fontified t) 286 289 (fontified t face font-lock-keyword-face) 289 290 (fontified t) 290 294 (fontified t face font-lock-keyword-face) 294 297 (fontified t) 297 298 (fontified t syntax-table #1=(1)) 298 299 (fontified t) 299 303 (fontified t face font-lock-type-face) 303 304 (fontified t) 304 310 (fontified t face font-lock-type-face) 310 311 (fontified t) 311 317 (fontified t face font-lock-type-face) 317 320 (fontified t) 320 324 (fontified t face font-lock-type-face) 324 326 (fontified t) 326 331 (fontified t face font-lock-type-face) 331 343 (fontified t) 343 346 (fontified t face font-lock-keyword-face) 346 347 (fontified t) 347 350 (fontified t face font-lock-keyword-face) 350 351 (fontified t) 351 357 (fontified t face font-lock-variable-name-face) 357 360 (fontified t) 360 364 (fontified t face font-lock-preprocessor-face) 364 377 (fontified t) 377 379 (fontified t face font-lock-comment-delimiter-face) 379 420 (fontified t face font-lock-comment-face) 420 462 (fontified t) 462 464 (fontified t face font-lock-comment-delimiter-face) 464 500 (fontified t face font-lock-comment-face) 500 518 (fontified t face font-lock-comment-face) 518 526 (fontified t) 526 531 (fontified t face font-lock-keyword-face) 531 532 (fontified t) 532 535 (fontified t face font-lock-keyword-face) 535 536 (fontified t) 536 541 (fontified t face font-lock-type-face) 541 543 (fontified t) 543 548 (fontified t face font-lock-type-face) 548 567 (fontified t) 567 571 (fontified t face font-lock-keyword-face) 571 586 (fontified t) 586 589 (fontified t face font-lock-keyword-face) 589 597 (fontified t) 597 598 (fontified t face rust-question-mark-face) 598 613 (fontified t) 613 615 (fontified t face font-lock-keyword-face) 615 654 (fontified t) 654 660 (fontified t face font-lock-keyword-face) 660 661 (fontified t) 661 663 (fontified t face font-lock-type-face) 663 664 (fontified t) 664 669 (fontified t face font-lock-type-face) 669 671 (fontified t) 671 676 (fontified t face font-lock-type-face) 676 677 (fontified t) 677 681 (fontified t face font-lock-type-face) 681 682 (fontified t) 682 709 (fontified t face font-lock-string-face) 709 740 (fontified t) 740 752 (fontified t) 752 758 (fontified t face font-lock-keyword-face) 758 759 (fontified t) 759 761 (fontified t face font-lock-type-face) 761 762 (fontified t) 762 767 (fontified t face font-lock-type-face) 767 769 (fontified t) 769 774 (fontified t face font-lock-type-face) 774 775 (fontified t) 775 779 (fontified t face font-lock-type-face) 779 780 (fontified t) 780 786 (fontified t face font-lock-type-face) 786 840 (fontified t) 840 842 (fontified t) 842 846 (fontified t) 846 847 (fontified t) 847 865 (fontified t) 865 871 (fontified t face font-lock-keyword-face) 871 872 (fontified t) 872 874 (fontified t face font-lock-type-face) 874 875 (fontified t) 875 880 (fontified t face font-lock-type-face) 880 882 (fontified t) 882 890 (fontified t face font-lock-type-face) 890 902 (fontified t) 902 908 (fontified t face font-lock-keyword-face) 908 909 (fontified t) 909 915 (fontified t face font-lock-type-face) 915 922 (fontified t) 922 924 (fontified t face font-lock-variable-name-face) 924 926 (fontified t) 926 935 (fontified t face font-lock-type-face) 935 936 (fontified t) 936 945 (fontified t face font-lock-type-face) 945 950 (fontified t) 950 954 (fontified t face font-lock-keyword-face) 954 955 (fontified t) 955 961 (fontified t face font-lock-type-face) 961 962 (fontified t) 962 965 (fontified t face font-lock-keyword-face) 965 966 (fontified t) 966 972 (fontified t face font-lock-type-face) 972 975 (fontified t) 975 979 (fontified t) 979 983 (fontified t face font-lock-keyword-face) 983 984 (fontified t) 984 988 (fontified t face font-lock-type-face) 988 999 (fontified t) 999 1003 (fontified t face font-lock-keyword-face) 1003 1004 (fontified t) 1004 1009 (fontified t face font-lock-type-face) 1009 1012 (fontified t) 1012 1017 (fontified t face font-lock-type-face) 1017 1024 (fontified t) 1024 1026 (fontified t face font-lock-keyword-face) 1026 1027 (fontified t) 1027 1031 (fontified t face font-lock-function-name-face) 1031 1033 (fontified t) 1033 1036 (fontified t face font-lock-keyword-face) 1036 1037 (fontified t) 1037 1041 (fontified t face font-lock-keyword-face) 1041 1044 (fontified t) 1044 1045 (syntax-table #1# fontified t) 1045 1046 (fontified t) 1046 1050 (fontified t face font-lock-type-face) 1050 1051 (fontified t) 1051 1055 (fontified t face font-lock-type-face) 1055 1057 (fontified t) 1057 1061 (fontified t face font-lock-type-face) 1061 1063 (fontified t) 1063 1067 (fontified t face font-lock-type-face) 1067 1069 (fontified t) 1069 1074 (fontified t face font-lock-type-face) 1074 1078 (fontified t) 1078 1086 (fontified t) 1086 1089 (fontified t face font-lock-keyword-face) 1089 1090 (fontified t) 1090 1093 (fontified t face font-lock-keyword-face) 1093 1094 (fontified t) 1094 1100 (fontified t face font-lock-variable-name-face) 1100 1103 (fontified t) 1103 1156 (fontified t face font-lock-string-face) 1156 1168 (fontified t) 1168 1177 (fontified t) 1177 1181 (fontified t face font-lock-keyword-face) 1181 1197 (fontified t) 1197 1200 (fontified t face font-lock-keyword-face) 1200 1208 (fontified t) 1208 1209 (fontified t face rust-question-mark-face) 1209 1219 (fontified t) 1219 1225 (fontified t face font-lock-keyword-face) 1225 1226 (fontified t) 1226 1228 (fontified t face font-lock-type-face) 1228 1229 (fontified t) 1229 1234 (fontified t face font-lock-type-face) 1234 1236 (fontified t) 1236 1244 (fontified t face font-lock-type-face) 1244 1256 (fontified t) 1256 1258 (fontified t face font-lock-keyword-face) 1258 1259 (fontified t) 1259 1263 (fontified t face font-lock-function-name-face) 1263 1277 (fontified t face font-lock-function-name-face) 1277 1282 (fontified t) 1282 1286 (fontified t) 1286 1289 (fontified t face font-lock-keyword-face) 1289 1290 (fontified t) 1290 1297 (fontified t face font-lock-variable-name-face) 1297 1300 (fontified t) 1300 1316 (fontified t face font-lock-string-face) 1316 1330 (fontified t) 1330 1332 (fontified t) 1332 1347 (fontified t face font-lock-string-face) 1347 1357 (face font-lock-string-face fontified t) 1357 1360 (fontified t) 1360 1364 (fontified t) 1364 1367 (fontified t face font-lock-keyword-face) 1367 1368 (fontified t) 1368 1378 (fontified t face font-lock-variable-name-face) 1378 1381 (fontified t) 1381 1390 (fontified t face font-lock-type-face) 1390 1416 (fontified t) 1416 1419 (fontified t face font-lock-keyword-face) 1419 1420 (fontified t) 1420 1426 (fontified t face font-lock-variable-name-face) 1426 1481 (fontified t) 1481 1484 (fontified t face font-lock-keyword-face) 1484 1524 (fontified t) 1524 1527 (fontified t face font-lock-keyword-face) 1527 1528 (fontified t) 1528 1534 (fontified t face font-lock-variable-name-face) 1534 1537 (fontified t) 1537 1543 (fontified t face font-lock-type-face) 1543 1564 (fontified t) 1564 1569 (fontified t face font-lock-constant-face) 1569 1578 (fontified t) 1578 1596 (fontified t) 1596 1604 (fontified t face rust-builtin-formatting-macro-face) 1604 1605 (fontified t) 1605 1606 (fontified t face font-lock-string-face) 1606 1608 (fontified t face rust-string-interpolation-face) 1608 1609 (fontified t face font-lock-string-face) 1609 1617 (fontified t) 1617 1629 (fontified t) 1629 1632 (fontified t face font-lock-keyword-face) 1632 1633 (fontified t) 1633 1641 (fontified t face font-lock-variable-name-face) 1641 1644 (fontified t) 1644 1652 (fontified t face font-lock-type-face) 1652 1668 (fontified t) 1668 1673 (fontified t) 1673 1678 (fontified t face font-lock-constant-face) 1678 1707 (fontified t) 1707 1715 (fontified t face rust-builtin-formatting-macro-face) 1715 1716 (fontified t) 1716 1717 (fontified t face font-lock-string-face) 1717 1719 (fontified t face rust-string-interpolation-face) 1719 1720 (fontified t face font-lock-string-face) 1720 1744 (fontified t) 1744 1760 (fontified t) 1760 1768 (fontified t face rust-builtin-formatting-macro-face) 1768 1769 (fontified t) 1769 1770 (fontified t face font-lock-string-face) 1770 1772 (fontified t face rust-string-interpolation-face) 1772 1773 (fontified t face font-lock-string-face) 1773 1781 (fontified t) 1781 1782 (fontified t) 1782 1798 (fontified t) 1798 1800 (fontified t face font-lock-type-face) 1800 1834 (fontified t) 1834 1840 (fontified t face font-lock-keyword-face) 1840 1841 (fontified t) 1841 1843 (fontified t face font-lock-type-face) 1843 1860 (fontified t) 1881 1889 (face rust-builtin-formatting-macro-face) 1890 1891 (face font-lock-string-face) 1891 1893 (face rust-string-interpolation-face) 1893 1894 (face font-lock-string-face) 1905 1910 (face font-lock-constant-face) 1928 1930 (face font-lock-keyword-face) 1931 1935 (face font-lock-function-name-face)) . 1) (undo-tree-id4517 . 1126) (undo-tree-id4518 . -830) (undo-tree-id4519 . -780) (undo-tree-id4520 . -830) (undo-tree-id4521 . -780) (undo-tree-id4522 . 1126) (undo-tree-id4523 . -780) (undo-tree-id4524 . -780) (undo-tree-id4525 . -780) (undo-tree-id4526 . -780) (undo-tree-id4527 . -780) (undo-tree-id4528 . -224) (undo-tree-id4529 . -780) (undo-tree-id4530 . -780) (undo-tree-id4531 . -224) (undo-tree-id4532 . -780) (undo-tree-id4533 . -751) (undo-tree-id4534 . -224) (undo-tree-id4535 . -752) (undo-tree-id4536 . -780) (undo-tree-id4537 . -224) (undo-tree-id4538 . -830) (undo-tree-id4539 . -780) (undo-tree-id4540 . -224) (undo-tree-id4541 . -830) (undo-tree-id4542 . -830) (undo-tree-id4543 . -224) (undo-tree-id4544 . -820) (undo-tree-id4545 . -821) (undo-tree-id4546 . -224) (undo-tree-id4547 . -779) (undo-tree-id4548 . -780) (undo-tree-id4549 . -224) (undo-tree-id4550 . -780) (undo-tree-id4551 . -779) (undo-tree-id4552 . -224) (undo-tree-id4553 . -830) (undo-tree-id4554 . -780) (undo-tree-id4555 . -224) (undo-tree-id4556 . -830) (undo-tree-id4557 . -830) (undo-tree-id4558 . -224) (undo-tree-id4559 . -780) (undo-tree-id4560 . -780) (undo-tree-id4561 . -224) (undo-tree-id4562 . -780) (undo-tree-id4563 . -780) (undo-tree-id4564 . -224) (undo-tree-id4565 . -752) (undo-tree-id4566 . -752) (undo-tree-id4567 . -224) (undo-tree-id4568 . -751) (undo-tree-id4569 . -751) (undo-tree-id4570 . -224) (undo-tree-id4571 . -839) (undo-tree-id4572 . -751) (undo-tree-id4573 . -224) (undo-tree-id4574 . -839) (undo-tree-id4575 . -751) (undo-tree-id4576 . -224) (undo-tree-id4577 . -839) (undo-tree-id4578 . -839) (undo-tree-id4579 . -224) (undo-tree-id4580 . -839) (undo-tree-id4581 . -224) (undo-tree-id4582 . -839) (undo-tree-id4583 . -724) (undo-tree-id4584 . -831) (undo-tree-id4585 . -839) (undo-tree-id4586 . -841) (undo-tree-id4587 . -840) (undo-tree-id4588 . -224) (undo-tree-id4589 . -831) (undo-tree-id4590 . -840) (undo-tree-id4591 . -842) (undo-tree-id4592 . -842) (undo-tree-id4593 . -224) (undo-tree-id4594 . -841) (undo-tree-id4595 . -841) (undo-tree-id4596 . -224) (undo-tree-id4597 . -1103) (undo-tree-id4598 . -1104) (undo-tree-id4599 . -840) (undo-tree-id4600 . -841) (undo-tree-id4601 . -738) (undo-tree-id4602 . -841) (undo-tree-id4603 . -224) (undo-tree-id4604 . -1103) (undo-tree-id4605 . -1104) (undo-tree-id4606 . -636) (undo-tree-id4607 . -637) (undo-tree-id4608 . -724) (undo-tree-id4609 . -738) (undo-tree-id4610 . -224) (undo-tree-id4611 . -723) (undo-tree-id4612 . -724) (undo-tree-id4613 . -723) (undo-tree-id4614 . -724) (undo-tree-id4615 . -723) (undo-tree-id4616 . -724) (undo-tree-id4617 . -723) (undo-tree-id4618 . -724) (undo-tree-id4619 . -708) (undo-tree-id4620 . -709) (undo-tree-id4621 . -708) (undo-tree-id4622 . -709) (undo-tree-id4623 . -723) (undo-tree-id4624 . -724) (undo-tree-id4625 . -723) (undo-tree-id4626 . -724) (undo-tree-id4627 . -722) (undo-tree-id4628 . -723) (undo-tree-id4629 . -721) (undo-tree-id4630 . -722) (undo-tree-id4631 . -720) (undo-tree-id4632 . -721) (undo-tree-id4633 . -719) (undo-tree-id4634 . -720) (undo-tree-id4635 . -681) (undo-tree-id4636 . -682) (undo-tree-id4637 . -676) (undo-tree-id4638 . -677) (undo-tree-id4639 . -663) (undo-tree-id4640 . -664) (undo-tree-id4641 . -723) (undo-tree-id4642 . -724) (undo-tree-id4643 . -723) (undo-tree-id4644 . -724) (undo-tree-id4645 . -723) (undo-tree-id4646 . -724) (undo-tree-id4647 . -723) (undo-tree-id4648 . -724) (undo-tree-id4649 . -708) (undo-tree-id4650 . -709) (undo-tree-id4651 . -708) (undo-tree-id4652 . -709) (undo-tree-id4653 . -723) (undo-tree-id4654 . -724) (undo-tree-id4655 . -723) (undo-tree-id4656 . -724) (undo-tree-id4657 . -722) (undo-tree-id4658 . -723) (undo-tree-id4659 . -721) (undo-tree-id4660 . -722) (undo-tree-id4661 . -720) (undo-tree-id4662 . -721) (undo-tree-id4663 . -719) (undo-tree-id4664 . -720) (undo-tree-id4665 . -681) (undo-tree-id4666 . -682) (undo-tree-id4667 . -676) (undo-tree-id4668 . -677) (undo-tree-id4669 . -663) (undo-tree-id4670 . -664) (undo-tree-id4671 . 1305) (undo-tree-id4672 . -664) (undo-tree-id4673 . 1304) (undo-tree-id4674 . -723) (undo-tree-id4675 . 1245) (undo-tree-id4676 . -724) 725) nil (23730 18799 376176 217000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 843) (undo-tree-id4677 . -1) (842 . 843) (841 . 843) (#("(" 0 1 (fontified nil)) . -841) (840 . 842)) nil (23730 18799 376209 669000) 0 nil] [nil nil ((753 . 754) (#("return Ok(Async::Ready(Some(String::from_utf8_lossy(&buffer[..num_bytes_read]).to_strin)));" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 9 (fontified t face font-lock-type-face) 9 10 (fontified t) 10 15 (fontified t face font-lock-type-face) 15 17 (fontified t) 17 22 (fontified t face font-lock-type-face) 22 23 (fontified t) 23 27 (fontified t face font-lock-type-face) 27 28 (fontified t) 28 34 (fontified t face font-lock-type-face) 34 87 (fontified t) 87 91 (fontified t)) . 753) (undo-tree-id4455 . 4) (undo-tree-id4456 . -78) (undo-tree-id4457 . -28) (undo-tree-id4458 . -78) (undo-tree-id4459 . -28) (undo-tree-id4460 . 4) (undo-tree-id4461 . -28) (undo-tree-id4462 . -28) (undo-tree-id4463 . -28) (undo-tree-id4464 . -28) (undo-tree-id4465 . -28) (undo-tree-id4466 . -28) (undo-tree-id4467 . -28) (undo-tree-id4468 . -28) (undo-tree-id4469 . -28) (undo-tree-id4470 . -78) (undo-tree-id4471 . -28) (undo-tree-id4472 . -78) (undo-tree-id4473 . -78) (undo-tree-id4474 . -68) (undo-tree-id4475 . -69) (undo-tree-id4476 . -27) (undo-tree-id4477 . -28) (undo-tree-id4478 . -28) (undo-tree-id4479 . -27) (undo-tree-id4480 . -78) (undo-tree-id4481 . -28) (undo-tree-id4482 . -78) (undo-tree-id4483 . -78) (undo-tree-id4484 . -28) (undo-tree-id4485 . -28) (undo-tree-id4486 . -28) (undo-tree-id4487 . -28) (undo-tree-id4488 . -87) (undo-tree-id4489 . -87) (undo-tree-id4490 . 64) (undo-tree-id4491 . -28) (undo-tree-id4492 . 63) (undo-tree-id4493 . -87) (undo-tree-id4494 . 4) (undo-tree-id4495 . -88) (undo-tree-id4496 . -79) (undo-tree-id4497 . -87) (undo-tree-id4498 . -79) (undo-tree-id4499 . -87) (undo-tree-id4500 . -87) (undo-tree-id4501 . -87) (undo-tree-id4502 . -87) (undo-tree-id4503 . -87) (undo-tree-id4504 . -87) (undo-tree-id4505 . -87) (undo-tree-id4506 . -87) 840) ((753 . 844) (#("u" 0 1 (fontified t)) . 753) (undo-tree-id4514 . -1) (undo-tree-id4515 . -1) (undo-tree-id4516 . -1)) (23730 18791 356661 350000) 0 nil]) ((#("g" 0 1 (fontified t)) . 840) (undo-tree-id4507 . -1) (undo-tree-id4508 . -1) (undo-tree-id4509 . -1) (undo-tree-id4510 . -1) (undo-tree-id4511 . -1) (undo-tree-id4512 . -1) (undo-tree-id4513 . -1) 841) nil (23730 18791 369273 704000) 0 nil] [nil nil ((#("return Ok(Async::Ready(Some(String::from_utf8_lossy(&buffer[..num_bytes_read]).to_string)));" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 9 (fontified t face font-lock-type-face) 9 10 (fontified t) 10 15 (fontified t face font-lock-type-face) 15 17 (fontified t) 17 22 (fontified t face font-lock-type-face) 22 23 (fontified t) 23 27 (fontified t face font-lock-type-face) 27 28 (fontified t) 28 34 (fontified t face font-lock-type-face) 34 88 (fontified t) 88 92 (fontified t)) . 753) (undo-tree-id4383 . 4) (undo-tree-id4384 . -78) (undo-tree-id4385 . -28) (undo-tree-id4386 . -78) (undo-tree-id4387 . -28) (undo-tree-id4388 . 4) (undo-tree-id4389 . -28) (undo-tree-id4390 . -28) (undo-tree-id4391 . -28) (undo-tree-id4392 . -28) (undo-tree-id4393 . -28) (undo-tree-id4394 . -28) (undo-tree-id4395 . -28) (undo-tree-id4396 . -28) (undo-tree-id4397 . -28) (undo-tree-id4398 . -78) (undo-tree-id4399 . -28) (undo-tree-id4400 . -78) (undo-tree-id4401 . -78) (undo-tree-id4402 . -68) (undo-tree-id4403 . -69) (undo-tree-id4404 . -27) (undo-tree-id4405 . -28) (undo-tree-id4406 . -28) (undo-tree-id4407 . -27) (undo-tree-id4408 . -78) (undo-tree-id4409 . -28) (undo-tree-id4410 . -78) (undo-tree-id4411 . -78) (undo-tree-id4412 . -28) (undo-tree-id4413 . -28) (undo-tree-id4414 . -28) (undo-tree-id4415 . -28) (undo-tree-id4416 . -28) (undo-tree-id4417 . -28) (undo-tree-id4418 . -34) (undo-tree-id4419 . -33) (undo-tree-id4420 . -35) (undo-tree-id4421 . -34) (undo-tree-id4422 . -35) (undo-tree-id4423 . -35) (undo-tree-id4424 . -88) (undo-tree-id4425 . -79) (undo-tree-id4426 . -89) (undo-tree-id4427 . -79) (undo-tree-id4428 . -80) (undo-tree-id4429 . -79) (undo-tree-id4430 . -81) (undo-tree-id4431 . -79) (undo-tree-id4432 . -82) (undo-tree-id4433 . -79) (undo-tree-id4434 . -84) (undo-tree-id4435 . -88) (undo-tree-id4436 . -88) (undo-tree-id4437 . 65) (undo-tree-id4438 . -28) (undo-tree-id4439 . 64) (undo-tree-id4440 . -88) (undo-tree-id4441 . 4) (undo-tree-id4442 . -89) 841) ((753 . 845)) (23730 18787 181446 803000) 0 nil]) ((#("()" 0 2 (fontified t)) . 841) (undo-tree-id4443 . -1) 842) nil (23730 18787 187031 693000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 843) (842 . 843) (841 . 843) (#("(" 0 1 (fontified nil)) . -841) (839 . 842) (831 . 839)) nil (23730 18787 181487 16000) 0 nil]) ((#("\"{}\", " 0 1 (fontified t face font-lock-string-face) 1 3 (fontified t face font-lock-string-face) 3 4 (fontified t face font-lock-string-face) 4 6 (fontified t)) . 781)) nil (23730 18787 181493 211000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 837) (undo-tree-id4444 . -1) (undo-tree-id4445 . -1) (undo-tree-id4446 . -1) (undo-tree-id4447 . -1) (undo-tree-id4448 . -1) (undo-tree-id4449 . -1) (undo-tree-id4450 . -1) (undo-tree-id4451 . -1) (#("(" 0 1 (fontified t)) . -781) (undo-tree-id4452 . -1) (undo-tree-id4453 . -1) (undo-tree-id4454 . -1) 782) nil (23730 18787 181527 478000) 0 nil]) ((#("!" 0 1 (fontified t)) . 781)) nil (23730 18787 181534 563000) 0 nil]) ((#("println" 0 7 (fontified t face rust-builtin-formatting-macro-face)) . 781)) nil (23730 18787 181538 884000) 0 nil] [nil nil ((#("println!(\"{}\", String::from_utf8_lossy(&buffer[..num_bytes_read]))" 0 8 (fontified t face rust-builtin-formatting-macro-face) 8 9 (fontified t) 9 10 (fontified t face font-lock-string-face) 10 12 (fontified t face rust-string-interpolation-face) 12 13 (fontified t face font-lock-string-face) 13 15 (fontified t) 15 21 (fontified t face font-lock-type-face) 21 65 (fontified t) 65 66 (fontified t)) . 781) (undo-tree-id4371 . -66) (undo-tree-id4372 . -66) (undo-tree-id4373 . -66) (undo-tree-id4374 . -66) (undo-tree-id4375 . -66) (undo-tree-id4376 . -55) (undo-tree-id4377 . -56) (undo-tree-id4378 . -66) (undo-tree-id4379 . -66) (undo-tree-id4380 . -66) (undo-tree-id4381 . -7) (undo-tree-id4382 . -1)) ((781 . 847)) (23730 18763 642877 432000) 0 nil]) ((#(";" 0 1 (fontified t)) . 847) (undo-tree-id4361 . -1) (undo-tree-id4362 . -1) (undo-tree-id4363 . -1) (undo-tree-id4364 . -1) (undo-tree-id4365 . -1) (undo-tree-id4366 . -1) (undo-tree-id4367 . -1) (undo-tree-id4368 . -1) (undo-tree-id4369 . -1) (undo-tree-id4370 . -1)) ((847 . 848)) (23730 18763 648974 984000) 0 nil]) ((#("            " 0 12 (fontified nil)) . 848) (#("
" 0 1 (fontified t)) . -848) 781) nil (23730 18749 121090 848000) 0 nil]) ((#("            " 0 11 (fontified nil) 11 12 (fontified nil rear-nonsticky t)) . 781) (undo-tree-id4355 . -12) (undo-tree-id4356 . -12) (#("
" 0 1 (fontified t)) . -781) (undo-tree-id4357 . -1) 753) nil (23730 18749 116510 239000) 0 nil]) ((nil rear-nonsticky nil 793 . 794) (#("
" 0 1 (fontified nil)) . -861) (781 . 862) 752) nil (23730 18749 116520 807000) 0 nil]) ((781 . 794)) nil (23730 18749 116526 197000) 0 nil]) ((#("            println!(\"{}\", String::from_utf8_lossy(&buffer[..num_bytes_read]));
" 0 12 (fontified t) 12 20 (fontified t face rust-builtin-formatting-macro-face) 20 21 (fontified t) 21 22 (fontified t face font-lock-string-face) 22 24 (fontified t face rust-string-interpolation-face) 24 25 (fontified t face font-lock-string-face) 25 27 (fontified t) 27 33 (fontified t face font-lock-type-face) 33 77 (fontified t) 77 80 (fontified t)) . 741) (undo-tree-id4358 . -40) 781) nil (23730 18749 116535 171000) 0 nil]) ((#("\"Finished getting message.\".to_string()" 0 27 (fontified t face font-lock-string-face) 27 39 (fontified t)) . 861) (undo-tree-id4359 . -39) (undo-tree-id4360 . -38) (t 23730 18606 483647 822000)) nil (23730 18749 116604 357000) 0 nil] [nil ([nil nil ((nil rear-nonsticky nil 860 . 861) (nil fontified nil 805 . 861) (805 . 861) 844 (#("\"Finished getting message.\".to_string()" 0 27 (fontified t face font-lock-string-face) 27 39 (fontified t)) . 805) (undo-tree-id4332 . -39) (undo-tree-id4333 . -38) (undo-tree-id4334 . -38) (undo-tree-id4335 . -38) 844) ((805 . 844) (#("\"{}\", String::from_utf8_lossy(&buffer[..num_bytes_read])" 0 4 (fontified nil face font-lock-string-face) 4 6 (fontified nil) 6 12 (fontified nil face font-lock-type-face) 12 55 (fontified nil) 55 56 (fontified nil rear-nonsticky nil)) . 805) (undo-tree-id4337 . 56) (undo-tree-id4338 . -55) (undo-tree-id4339 . -1) (undo-tree-id4340 . -54) (undo-tree-id4341 . -55) (undo-tree-id4342 . -40) (undo-tree-id4343 . -54) (undo-tree-id4344 . -52) (undo-tree-id4345 . -53) (undo-tree-id4346 . -52) (undo-tree-id4347 . -1) (undo-tree-id4348 . 56) (undo-tree-id4349 . -56) (nil rear-nonsticky t 860 . 861)) (23730 18723 241071 283000) 0 nil]) ((#("\"{}\", String::from_utf8_lossy(&buffer[..num_bytes_read])" 0 1 (fontified t face font-lock-string-face) 1 3 (fontified t face rust-string-interpolation-face) 3 4 (fontified t face font-lock-string-face) 4 6 (fontified t) 6 12 (fontified t face font-lock-type-face) 12 56 (fontified t)) . 762) (undo-tree-id4336 . -12) (t 23730 18606 483647 822000)) ((762 . 818)) (23730 18723 250679 461000) 0 nil]) ((1 . 2026) (#("use futures::{Future, Poll};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use tokio::prelude::*;

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Stream for Receiver {
    type Item = String;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<String>, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(Some(\"Finished getting message.\".to_string())));
            }
            println!(\"{}\", String::from_utf8_lossy(&buffer[..num_bytes_read]));
            return Ok(Async::Ready(Some(\"Finished getting message.\".to_string())));
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
}
impl Future for Sender {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = \"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn create_connections() {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);

    let client = connection
        .and_then(|socket| {
            let (rx, tx) = socket.split();
            let sender = Sender { tx };
            tokio::spawn(sender.map_err(|e| println!(\"{}\", e)));
            let receiver = Receiver { rx };
            tokio::spawn(
                receiver.map_err(|e| println!(\"{}\", e))
                    .for_each(|text| {
                        println!(\"{}\", text);
                        Ok(())
                    }),
            );
            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));
    tokio::run(client);
}

fn main() {
    create_connections();
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-type-face) 26 29 (fontified t) 29 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 38 (fontified t face font-lock-constant-face) 38 40 (fontified t) 40 42 (fontified t face font-lock-constant-face) 42 45 (fontified t) 45 54 (fontified t face font-lock-type-face) 54 56 (fontified t) 56 66 (fontified t face font-lock-type-face) 66 68 (fontified t) 68 73 (fontified t face font-lock-type-face) 73 75 (fontified t) 75 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 94 (fontified t face font-lock-type-face) 94 97 (fontified t) 97 100 (fontified t face font-lock-keyword-face) 100 101 (fontified t) 101 106 (fontified t face font-lock-constant-face) 106 108 (fontified t) 108 111 (fontified t face font-lock-constant-face) 111 113 (fontified t) 113 122 (fontified t face font-lock-type-face) 122 124 (fontified t) 124 127 (fontified t face font-lock-keyword-face) 127 128 (fontified t) 128 133 (fontified t face font-lock-constant-face) 133 135 (fontified t) 135 142 (fontified t face font-lock-constant-face) 142 148 (fontified t) 148 154 (fontified t face font-lock-keyword-face) 154 155 (fontified t) 155 163 (fontified t face font-lock-type-face) 163 170 (fontified t) 170 172 (fontified t face font-lock-variable-name-face) 172 174 (fontified t) 174 182 (fontified t face font-lock-type-face) 182 183 (fontified t) 183 192 (fontified t face font-lock-type-face) 192 197 (fontified t) 197 201 (fontified t face font-lock-keyword-face) 201 202 (fontified t) 202 208 (fontified t face font-lock-type-face) 208 209 (fontified t) 209 212 (fontified t face font-lock-keyword-face) 212 213 (fontified t) 213 221 (fontified t face font-lock-type-face) 221 228 (fontified t) 228 232 (fontified t face font-lock-keyword-face) 232 233 (fontified t) 233 237 (fontified t face font-lock-type-face) 237 240 (fontified t) 240 246 (fontified t face font-lock-type-face) 246 252 (fontified t) 252 256 (fontified t face font-lock-keyword-face) 256 257 (fontified t) 257 262 (fontified t face font-lock-type-face) 262 265 (fontified t) 265 270 (fontified t face font-lock-type-face) 270 277 (fontified t) 277 279 (fontified t face font-lock-keyword-face) 279 280 (fontified t) 280 284 (fontified t face font-lock-function-name-face) 284 286 (fontified t) 286 289 (fontified t face font-lock-keyword-face) 289 290 (fontified t) 290 294 (fontified t face font-lock-keyword-face) 294 297 (fontified t) 297 298 (fontified t syntax-table #1#) 298 299 (fontified t) 299 303 (fontified t face font-lock-type-face) 303 304 (fontified t) 304 310 (fontified t face font-lock-type-face) 310 311 (fontified t) 311 317 (fontified t face font-lock-type-face) 317 320 (fontified t) 320 324 (fontified t face font-lock-type-face) 324 326 (fontified t) 326 331 (fontified t face font-lock-type-face) 331 343 (fontified t) 343 346 (fontified t face font-lock-keyword-face) 346 347 (fontified t) 347 350 (fontified t face font-lock-keyword-face) 350 351 (fontified t) 351 357 (fontified t face font-lock-variable-name-face) 357 360 (fontified t) 360 364 (fontified t face font-lock-preprocessor-face) 364 377 (fontified t) 377 379 (fontified t face font-lock-comment-delimiter-face) 379 420 (fontified t face font-lock-comment-face) 420 462 (fontified t) 462 464 (fontified t face font-lock-comment-delimiter-face) 464 500 (fontified t face font-lock-comment-face) 500 518 (fontified t face font-lock-comment-face) 518 526 (fontified t) 526 531 (fontified t face font-lock-keyword-face) 531 532 (fontified t) 532 535 (fontified t face font-lock-keyword-face) 535 536 (fontified t) 536 541 (fontified t face font-lock-type-face) 541 543 (fontified t) 543 548 (fontified t face font-lock-type-face) 548 567 (fontified t) 567 571 (fontified t face font-lock-keyword-face) 571 586 (fontified t) 586 589 (fontified t face font-lock-keyword-face) 589 597 (fontified t) 597 598 (fontified t face rust-question-mark-face) 598 613 (fontified t) 613 615 (fontified t face font-lock-keyword-face) 615 654 (fontified t) 654 660 (fontified t face font-lock-keyword-face) 660 661 (fontified t) 661 663 (fontified t face font-lock-type-face) 663 664 (fontified t) 664 669 (fontified t face font-lock-type-face) 669 671 (fontified t) 671 676 (fontified t face font-lock-type-face) 676 677 (fontified t) 677 681 (fontified t face font-lock-type-face) 681 682 (fontified t) 682 709 (fontified t face font-lock-string-face) 709 752 (fontified t) 752 760 (fontified t face rust-builtin-formatting-macro-face) 760 761 (fontified t) 761 762 (fontified t face font-lock-string-face) 762 764 (fontified t face rust-string-interpolation-face) 764 765 (fontified t face font-lock-string-face) 765 767 (fontified t) 767 773 (fontified t face font-lock-type-face) 773 832 (fontified t) 832 838 (fontified t face font-lock-keyword-face) 838 839 (fontified t) 839 841 (fontified t face font-lock-type-face) 841 842 (fontified t) 842 847 (fontified t face font-lock-type-face) 847 849 (fontified t) 849 854 (fontified t face font-lock-type-face) 854 855 (fontified t) 855 859 (fontified t face font-lock-type-face) 859 860 (fontified t) 860 887 (fontified t face font-lock-string-face) 887 922 (fontified t) 922 928 (fontified t face font-lock-keyword-face) 928 929 (fontified t) 929 931 (fontified t face font-lock-type-face) 931 932 (fontified t) 932 937 (fontified t face font-lock-type-face) 937 939 (fontified t) 939 947 (fontified t face font-lock-type-face) 947 959 (fontified t) 959 965 (face font-lock-keyword-face) 966 972 (face font-lock-type-face) 979 981 (face font-lock-variable-name-face) 983 992 (face font-lock-type-face) 993 1002 (face font-lock-type-face) 1007 1011 (face font-lock-keyword-face) 1012 1018 (face font-lock-type-face) 1019 1022 (face font-lock-keyword-face) 1023 1029 (face font-lock-type-face) 1036 1040 (face font-lock-keyword-face) 1041 1045 (face font-lock-type-face) 1056 1060 (face font-lock-keyword-face) 1061 1066 (face font-lock-type-face) 1069 1074 (face font-lock-type-face) 1081 1083 (face font-lock-keyword-face) 1084 1088 (face font-lock-function-name-face) 1090 1093 (face font-lock-keyword-face) 1094 1098 (face font-lock-keyword-face) 1101 1102 (syntax-table #1#) 1103 1107 (face font-lock-type-face) 1108 1112 (face font-lock-type-face) 1114 1118 (face font-lock-type-face) 1120 1124 (face font-lock-type-face) 1126 1131 (face font-lock-type-face) 1135 1143 (fontified t) 1143 1146 (fontified t face font-lock-keyword-face) 1146 1147 (fontified t) 1147 1150 (fontified t face font-lock-keyword-face) 1150 1151 (fontified t) 1151 1157 (fontified t face font-lock-variable-name-face) 1157 1160 (fontified t) 1160 1213 (fontified t face font-lock-string-face) 1213 1234 (fontified t) 1234 1238 (fontified t face font-lock-keyword-face) 1238 1254 (fontified t) 1254 1257 (fontified t face font-lock-keyword-face) 1257 1265 (fontified t) 1265 1266 (fontified t face rust-question-mark-face) 1266 1276 (fontified t) 1276 1282 (fontified t face font-lock-keyword-face) 1282 1283 (fontified t) 1283 1285 (fontified t face font-lock-type-face) 1285 1286 (fontified t) 1286 1291 (fontified t face font-lock-type-face) 1291 1293 (fontified t) 1293 1301 (fontified t face font-lock-type-face) 1301 1313 (fontified t) 1313 1315 (fontified t face font-lock-keyword-face) 1315 1316 (fontified t) 1316 1334 (fontified t face font-lock-function-name-face) 1334 1343 (fontified t) 1343 1346 (fontified t face font-lock-keyword-face) 1346 1347 (fontified t) 1347 1354 (fontified t face font-lock-variable-name-face) 1354 1357 (fontified t) 1357 1373 (fontified t face font-lock-string-face) 1373 1389 (fontified t) 1389 1414 (fontified t face font-lock-string-face) 1414 1421 (fontified t) 1421 1424 (fontified t face font-lock-keyword-face) 1424 1425 (fontified t) 1425 1435 (fontified t face font-lock-variable-name-face) 1435 1438 (fontified t) 1438 1447 (fontified t face font-lock-type-face) 1447 1473 (fontified t) 1473 1474 (fontified t face font-lock-keyword-face) 1474 1476 (fontified t face font-lock-keyword-face) 1476 1477 (fontified t) 1477 1483 (fontified t face font-lock-variable-name-face) 1483 1497 (fontified t) 1497 1538 (fontified t) 1538 1541 (fontified t face font-lock-keyword-face) 1541 1581 (fontified t) 1581 1584 (fontified t face font-lock-keyword-face) 1584 1585 (fontified t) 1585 1591 (fontified t face font-lock-variable-name-face) 1591 1594 (fontified t) 1594 1600 (fontified t face font-lock-type-face) 1600 1621 (fontified t) 1621 1626 (fontified t face font-lock-constant-face) 1626 1635 (fontified t) 1635 1653 (fontified t) 1653 1661 (face rust-builtin-formatting-macro-face fontified t) 1661 1662 (fontified t) 1662 1663 (face font-lock-string-face fontified t) 1663 1665 (face rust-string-interpolation-face fontified t) 1665 1666 (face font-lock-string-face fontified t) 1666 1674 (fontified t) 1674 1686 (fontified t) 1686 1689 (fontified t face font-lock-keyword-face) 1689 1690 (fontified t) 1690 1698 (fontified t face font-lock-variable-name-face) 1698 1701 (fontified t) 1701 1709 (fontified t face font-lock-type-face) 1709 1730 (fontified t) 1730 1735 (fontified t face font-lock-constant-face) 1735 1744 (fontified t) 1744 1768 (fontified t) 1768 1781 (fontified t) 1781 1789 (fontified t face rust-builtin-formatting-macro-face) 1789 1790 (fontified t) 1790 1791 (fontified t face font-lock-string-face) 1791 1793 (fontified t face rust-string-interpolation-face) 1793 1794 (fontified t face font-lock-string-face) 1794 1800 (fontified t) 1800 1838 (fontified t) 1838 1863 (fontified t) 1863 1871 (fontified t face rust-builtin-formatting-macro-face) 1871 1872 (fontified t) 1872 1873 (fontified t face font-lock-string-face) 1873 1875 (fontified t face rust-string-interpolation-face) 1875 1876 (fontified t face font-lock-string-face) 1876 1909 (fontified t) 1909 1911 (fontified t face font-lock-type-face) 1911 1967 (fontified t) 1967 1973 (fontified t face font-lock-keyword-face) 1973 1974 (fontified t) 1974 1976 (fontified t face font-lock-type-face) 1976 2014 (fontified t) 2014 2022 (fontified t face rust-builtin-formatting-macro-face) 2022 2023 (fontified t) 2023 2024 (fontified t face font-lock-string-face) 2024 2026 (fontified t face rust-string-interpolation-face) 2026 2027 (fontified t face font-lock-string-face) 2027 2038 (fontified t) 2038 2043 (fontified t face font-lock-constant-face) 2043 2061 (fontified t) 2061 2063 (fontified t face font-lock-keyword-face) 2063 2064 (fontified t) 2064 2068 (fontified t face font-lock-function-name-face) 2068 2101 (fontified t)) . 1) (undo-tree-id4253 . -1828) (undo-tree-id4254 . -1828) (undo-tree-id4255 . -1135) (undo-tree-id4256 . -1776) (undo-tree-id4257 . -1828) (undo-tree-id4258 . -1135) (undo-tree-id4259 . -1742) (undo-tree-id4260 . -1768) (undo-tree-id4261 . -1135) (undo-tree-id4262 . -1742) (undo-tree-id4263 . -1742) (undo-tree-id4264 . -1135) (undo-tree-id4265 . -1768) (undo-tree-id4266 . -1742) (undo-tree-id4267 . -1135) (undo-tree-id4268 . -1768) (undo-tree-id4269 . -1768) (undo-tree-id4270 . -1742) (undo-tree-id4271 . -1135) (undo-tree-id4272 . -1768) (undo-tree-id4273 . -1768) (undo-tree-id4274 . -1135) (undo-tree-id4275 . -1768) (undo-tree-id4276 . -1768) (undo-tree-id4277 . -1135) (undo-tree-id4278 . -1760) (undo-tree-id4279 . -1768) (undo-tree-id4280 . -1768) (undo-tree-id4281 . -1768) (undo-tree-id4282 . -1135) (undo-tree-id4283 . -1768) (undo-tree-id4284 . -1768) (undo-tree-id4285 . -1135) (undo-tree-id4286 . -1768) (undo-tree-id4287 . -1768) (undo-tree-id4288 . -1768) (undo-tree-id4289 . -1135) (undo-tree-id4290 . -1768) (undo-tree-id4291 . -1768) (undo-tree-id4292 . -1768) (undo-tree-id4293 . -1135) (undo-tree-id4294 . -1135) (undo-tree-id4295 . -1768) (undo-tree-id4296 . -1768) (undo-tree-id4297 . -1768) (undo-tree-id4298 . -1135) (undo-tree-id4299 . -1768) (undo-tree-id4300 . -1768) (undo-tree-id4301 . -1135) (undo-tree-id4302 . -1768) (undo-tree-id4303 . -1768) (undo-tree-id4304 . -1135) (undo-tree-id4305 . -1768) (undo-tree-id4306 . -1768) (undo-tree-id4307 . -1135) (undo-tree-id4308 . -1768) (undo-tree-id4309 . -1768) (undo-tree-id4310 . -1768) (undo-tree-id4311 . -1135) (undo-tree-id4312 . -1768) (undo-tree-id4313 . -1768) (undo-tree-id4314 . -1768) (undo-tree-id4315 . -1135) (undo-tree-id4316 . -1135) (undo-tree-id4317 . -1768) (undo-tree-id4318 . -1135) (undo-tree-id4319 . -1768) (undo-tree-id4320 . -1768) (undo-tree-id4321 . -1768) (undo-tree-id4322 . -1768) (undo-tree-id4323 . -1135) (undo-tree-id4324 . -1768) (undo-tree-id4325 . -1768) (undo-tree-id4326 . -1135) (undo-tree-id4327 . -1768) (undo-tree-id4328 . -1768) (undo-tree-id4329 . -1135) 1769) nil (23730 18726 307166 619000) 0 nil]) ((#(" " 0 1 (fontified t)) . 1769)) nil (23730 18606 416412 180000) 0 nil]) ((1769 . 1770) (#("                    " 0 20 (fontified nil)) . 1769) (#("
" 0 1 (fontified t)) . -1769) 1768) nil (23730 18606 416418 147000) 0 nil]) ((#("                    " 0 20 (fontified nil)) . 1769) (undo-tree-id4330 . -20) (#("
" 0 1 (fontified t)) . -1769) 1764) nil (23730 18606 416425 851000) 0 nil]) ((#(".take(3)" 0 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t)) . 1790) (undo-tree-id4331 . -6) (t 23730 18523 654037 789000)) nil (23730 18606 416432 304000) 0 nil]) ((1796 . 1797) (#("1" 0 1 (fontified t)) . 1796) (undo-tree-id4244 . -1) (undo-tree-id4245 . -1) (undo-tree-id4246 . -1) (undo-tree-id4247 . -1) (undo-tree-id4248 . -1) (undo-tree-id4249 . -1) (undo-tree-id4250 . -1) (undo-tree-id4251 . -1) (undo-tree-id4252 . -1) (t 23730 18482 154226 753000)) nil (23730 18523 585052 728000) 0 nil]) ((1 . 2152) (#("use futures::{Future, Poll};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use tokio::prelude::*;

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Stream for Receiver {
    type Item = String;
    type Error = Error;

    fn poll(&mut self) -> Poll<Option<String>, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(Some(\"Finished getting message.\".to_string())));
            }
            println!(\"{}\", String::from_utf8_lossy(&buffer[..num_bytes_read]));
            return Ok(Async::Ready(Some(\"Finished getting message.\".to_string())));
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
}
impl Future for Sender {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = \"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn create_connections() {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);

    let client = connection
        .and_then(|socket| {
            let (rx, tx) = socket.split();
            let sender = Sender { tx };
            tokio::spawn(sender.map_err(|e| println!(\"{}\", e)));
            let receiver = Receiver { rx };
            tokio::spawn(receiver.take(1).map_err(|e| println!(\"{}\", e)).for_each(|text| {
                println!(\"{}\", text);
                Ok(())
            }));
            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));
    tokio::run(client);
}

fn main() {
    create_connections();
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-type-face) 26 28 (fontified t) 28 29 (fontified t) 29 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 38 (fontified t face font-lock-constant-face) 38 40 (fontified t) 40 42 (fontified t face font-lock-constant-face) 42 45 (fontified t) 45 54 (fontified t face font-lock-type-face) 54 56 (fontified t) 56 66 (fontified t face font-lock-type-face) 66 68 (fontified t) 68 73 (fontified t face font-lock-type-face) 73 75 (fontified t) 75 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 94 (fontified t face font-lock-type-face) 94 97 (fontified t) 97 100 (fontified t face font-lock-keyword-face) 100 101 (fontified t) 101 106 (fontified t face font-lock-constant-face) 106 108 (fontified t) 108 111 (fontified t face font-lock-constant-face) 111 113 (fontified t) 113 122 (fontified t face font-lock-type-face) 122 124 (fontified t) 124 127 (fontified t face font-lock-keyword-face) 127 128 (fontified t) 128 133 (fontified t face font-lock-constant-face) 133 135 (fontified t) 135 142 (fontified t face font-lock-constant-face) 142 148 (fontified t) 148 154 (fontified t face font-lock-keyword-face) 154 155 (fontified t) 155 163 (fontified t face font-lock-type-face) 163 170 (fontified t) 170 172 (fontified t face font-lock-variable-name-face) 172 174 (fontified t) 174 182 (fontified t face font-lock-type-face) 182 183 (fontified t) 183 192 (fontified t face font-lock-type-face) 192 197 (fontified t) 197 201 (fontified t face font-lock-keyword-face) 201 202 (fontified t) 202 208 (fontified t face font-lock-type-face) 208 209 (fontified t) 209 212 (fontified t face font-lock-keyword-face) 212 213 (fontified t) 213 221 (fontified t face font-lock-type-face) 221 224 (fontified t) 224 228 (fontified t) 228 232 (fontified t face font-lock-keyword-face) 232 233 (fontified t) 233 237 (fontified t face font-lock-type-face) 237 240 (fontified t) 240 246 (fontified t face font-lock-type-face) 246 247 (fontified t) 247 248 (fontified t) 248 252 (fontified t) 252 256 (fontified t face font-lock-keyword-face) 256 257 (fontified t) 257 262 (fontified t face font-lock-type-face) 262 265 (fontified t) 265 270 (fontified t face font-lock-type-face) 270 273 (fontified t) 273 277 (fontified t) 277 279 (fontified t face font-lock-keyword-face) 279 280 (fontified t) 280 284 (fontified t face font-lock-function-name-face) 284 286 (fontified t) 286 289 (fontified t face font-lock-keyword-face) 289 290 (fontified t) 290 294 (fontified t face font-lock-keyword-face) 294 297 (fontified t) 297 298 (syntax-table #1# fontified t) 298 299 (fontified t) 299 303 (fontified t face font-lock-type-face) 303 304 (fontified t) 304 310 (fontified t face font-lock-type-face) 310 311 (fontified t) 311 317 (fontified t face font-lock-type-face) 317 318 (fontified t) 318 320 (fontified t) 320 324 (fontified t face font-lock-type-face) 324 326 (fontified t) 326 331 (fontified t face font-lock-type-face) 331 332 (fontified t) 332 335 (fontified t) 335 343 (fontified t) 343 346 (fontified t face font-lock-keyword-face) 346 347 (fontified t) 347 350 (fontified t face font-lock-keyword-face) 350 351 (fontified t) 351 357 (fontified t face font-lock-variable-name-face) 357 360 (fontified t) 360 364 (fontified t face font-lock-preprocessor-face) 364 377 (fontified t) 377 379 (fontified t face font-lock-comment-delimiter-face) 379 420 (fontified t face font-lock-comment-face) 420 462 (fontified t) 462 464 (fontified t face font-lock-comment-delimiter-face) 464 518 (fontified t face font-lock-comment-face) 518 524 (fontified t) 524 526 (fontified t) 526 531 (fontified t face font-lock-keyword-face) 531 532 (fontified t) 532 535 (fontified t face font-lock-keyword-face) 535 536 (fontified t) 536 541 (fontified t face font-lock-type-face) 541 543 (fontified t) 543 548 (fontified t face font-lock-type-face) 548 567 (fontified t) 567 571 (fontified t face font-lock-keyword-face) 571 586 (fontified t) 586 589 (fontified t face font-lock-keyword-face) 589 597 (fontified t) 597 598 (fontified t face rust-question-mark-face) 598 601 (fontified t) 601 613 (fontified t) 613 615 (fontified t face font-lock-keyword-face) 615 654 (fontified t) 654 660 (fontified t face font-lock-keyword-face) 660 661 (fontified t) 661 663 (fontified t face font-lock-type-face) 663 664 (fontified t) 664 669 (fontified t face font-lock-type-face) 669 671 (fontified t) 671 676 (fontified t face font-lock-type-face) 676 677 (fontified t) 677 681 (fontified t face font-lock-type-face) 681 682 (fontified t) 682 693 (fontified t face font-lock-string-face) 693 709 (fontified t face font-lock-string-face) 709 720 (fontified t) 720 724 (fontified t) 724 726 (fontified t) 726 740 (fontified t) 740 752 (fontified t) 752 760 (fontified t face rust-builtin-formatting-macro-face) 760 761 (fontified t) 761 762 (fontified t face font-lock-string-face) 762 764 (fontified t face rust-string-interpolation-face) 764 765 (fontified t face font-lock-string-face) 765 767 (fontified t) 767 773 (fontified t face font-lock-type-face) 773 819 (fontified t) 819 820 (fontified t) 820 832 (fontified t) 832 835 (fontified t face font-lock-keyword-face) 835 838 (fontified t face font-lock-keyword-face) 838 839 (fontified t) 839 841 (fontified t face font-lock-type-face) 841 842 (fontified t) 842 847 (fontified t face font-lock-type-face) 847 849 (fontified t) 849 854 (fontified t face font-lock-type-face) 854 855 (fontified t) 855 859 (fontified t face font-lock-type-face) 859 860 (fontified t) 860 887 (fontified t face font-lock-string-face) 887 899 (fontified t) 899 900 (fontified t) 900 903 (fontified t) 903 904 (fontified t) 904 913 (fontified t) 913 922 (fontified t) 922 928 (fontified t face font-lock-keyword-face) 928 929 (fontified t) 929 931 (fontified t face font-lock-type-face) 931 932 (fontified t) 932 937 (fontified t face font-lock-type-face) 937 939 (fontified t) 939 947 (fontified t face font-lock-type-face) 947 959 (fontified t) 959 965 (fontified t face font-lock-keyword-face) 965 966 (fontified t) 966 972 (fontified t face font-lock-type-face) 972 979 (fontified t) 979 981 (fontified t face font-lock-variable-name-face) 981 983 (fontified t) 983 992 (fontified t face font-lock-type-face) 992 993 (fontified t) 993 1002 (fontified t face font-lock-type-face) 1002 1007 (fontified t) 1007 1011 (fontified t face font-lock-keyword-face) 1011 1012 (fontified t) 1012 1018 (fontified t face font-lock-type-face) 1018 1019 (fontified t) 1019 1022 (fontified t face font-lock-keyword-face) 1022 1023 (fontified t) 1023 1029 (fontified t face font-lock-type-face) 1029 1036 (fontified t) 1036 1040 (fontified t face font-lock-keyword-face) 1040 1041 (fontified t) 1041 1045 (fontified t face font-lock-type-face) 1045 1056 (fontified t) 1056 1060 (fontified t face font-lock-keyword-face) 1060 1061 (fontified t) 1061 1066 (fontified t face font-lock-type-face) 1066 1069 (fontified t) 1069 1074 (fontified t face font-lock-type-face) 1074 1081 (fontified t) 1081 1083 (fontified t face font-lock-keyword-face) 1083 1084 (fontified t) 1084 1088 (fontified t face font-lock-function-name-face) 1088 1090 (fontified t) 1090 1093 (fontified t face font-lock-keyword-face) 1093 1094 (fontified t) 1094 1098 (fontified t face font-lock-keyword-face) 1098 1101 (fontified t) 1101 1102 (syntax-table #1# fontified t) 1102 1103 (fontified t) 1103 1107 (fontified t face font-lock-type-face) 1107 1108 (fontified t) 1108 1112 (fontified t face font-lock-type-face) 1112 1114 (fontified t) 1114 1118 (fontified t face font-lock-type-face) 1118 1120 (fontified t) 1120 1124 (fontified t face font-lock-type-face) 1124 1126 (fontified t) 1126 1131 (fontified t face font-lock-type-face) 1131 1143 (fontified t) 1143 1146 (fontified t face font-lock-keyword-face) 1146 1147 (fontified t) 1147 1150 (fontified t face font-lock-keyword-face) 1150 1151 (fontified t) 1151 1157 (fontified t face font-lock-variable-name-face) 1157 1160 (fontified t) 1160 1213 (fontified t face font-lock-string-face) 1213 1226 (fontified t) 1226 1234 (fontified t) 1234 1238 (fontified t face font-lock-keyword-face) 1238 1254 (fontified t) 1254 1257 (fontified t face font-lock-keyword-face) 1257 1265 (fontified t) 1265 1266 (fontified t face rust-question-mark-face) 1266 1276 (fontified t) 1276 1282 (fontified t face font-lock-keyword-face) 1282 1283 (fontified t) 1283 1285 (fontified t face font-lock-type-face) 1285 1286 (fontified t) 1286 1291 (fontified t face font-lock-type-face) 1291 1293 (fontified t) 1293 1301 (fontified t face font-lock-type-face) 1301 1313 (fontified t) 1313 1315 (fontified t face font-lock-keyword-face) 1315 1316 (fontified t) 1316 1320 (fontified t face font-lock-function-name-face) 1320 1334 (fontified t face font-lock-function-name-face) 1334 1339 (fontified t) 1339 1343 (fontified t) 1343 1346 (fontified t face font-lock-keyword-face) 1346 1347 (fontified t) 1347 1354 (fontified t face font-lock-variable-name-face) 1354 1357 (fontified t) 1357 1373 (fontified t face font-lock-string-face) 1373 1389 (fontified t) 1389 1404 (fontified t face font-lock-string-face) 1404 1413 (fontified t face font-lock-string-face) 1413 1414 (fontified t face font-lock-string-face) 1414 1417 (fontified t) 1417 1421 (fontified t) 1421 1424 (fontified t face font-lock-keyword-face) 1424 1425 (fontified t) 1425 1435 (fontified t face font-lock-variable-name-face) 1435 1438 (fontified t) 1438 1447 (fontified t face font-lock-type-face) 1447 1473 (fontified t) 1473 1476 (fontified t face font-lock-keyword-face) 1476 1477 (fontified t) 1477 1483 (fontified t face font-lock-variable-name-face) 1483 1538 (fontified t) 1538 1541 (fontified t face font-lock-keyword-face) 1541 1581 (fontified t) 1581 1584 (fontified t face font-lock-keyword-face) 1584 1585 (fontified t) 1585 1591 (fontified t face font-lock-variable-name-face) 1591 1594 (fontified t) 1594 1600 (fontified t face font-lock-type-face) 1600 1621 (fontified t) 1621 1626 (fontified t face font-lock-constant-face) 1626 1653 (fontified t) 1653 1661 (fontified t face rust-builtin-formatting-macro-face) 1661 1662 (fontified t) 1662 1663 (fontified t face font-lock-string-face) 1663 1665 (fontified t face rust-string-interpolation-face) 1665 1666 (fontified t face font-lock-string-face) 1666 1686 (fontified t) 1686 1689 (fontified t face font-lock-keyword-face) 1689 1690 (fontified t) 1690 1698 (fontified t face font-lock-variable-name-face) 1698 1701 (fontified t) 1701 1709 (fontified t face font-lock-type-face) 1709 1718 (fontified t) 1718 1726 (fontified t) 1726 1730 (fontified t) 1730 1735 (fontified t face font-lock-constant-face) 1735 1737 (fontified t) 1737 1742 (fontified t) 1742 1743 (fontified t) 1743 1756 (fontified t) 1756 1759 (fontified t) 1759 1772 (fontified t) 1772 1780 (fontified t face rust-builtin-formatting-macro-face) 1780 1781 (fontified t) 1781 1782 (fontified t face font-lock-string-face) 1782 1784 (fontified t face rust-string-interpolation-face) 1784 1785 (fontified t face font-lock-string-face) 1785 1790 (fontified t) 1790 1791 (fontified t) 1791 1799 (fontified t) 1799 1809 (fontified t) 1809 1825 (fontified t) 1825 1833 (fontified t face rust-builtin-formatting-macro-face) 1833 1834 (fontified t) 1834 1835 (fontified t face font-lock-string-face) 1835 1837 (fontified t face rust-string-interpolation-face) 1837 1838 (fontified t face font-lock-string-face) 1838 1847 (fontified t) 1847 1863 (fontified t) 1863 1865 (fontified t face font-lock-type-face) 1865 1884 (fontified t) 1884 1887 (fontified t) 1887 1899 (fontified t) 1899 1905 (fontified t face font-lock-keyword-face) 1905 1906 (fontified t) 1906 1908 (fontified t face font-lock-type-face) 1908 1916 (fontified t) 1916 1925 (fontified t) 1925 1946 (fontified t) 1946 1954 (fontified t face rust-builtin-formatting-macro-face) 1954 1955 (fontified t) 1955 1956 (fontified t face font-lock-string-face) 1956 1958 (fontified t face rust-string-interpolation-face) 1958 1959 (fontified t face font-lock-string-face) 1959 1970 (fontified t) 1970 1975 (fontified t face font-lock-constant-face) 1975 1993 (fontified t) 1993 1995 (fontified t face font-lock-keyword-face) 1995 1996 (fontified t) 1996 2000 (fontified t face font-lock-function-name-face) 2000 2033 (fontified t)) . 1) (undo-tree-id4124 . 234) (undo-tree-id4125 . -1791) (undo-tree-id4126 . -820) (undo-tree-id4127 . -903) (undo-tree-id4128 . -820) (undo-tree-id4129 . -820) (undo-tree-id4130 . -820) (undo-tree-id4131 . -820) (undo-tree-id4132 . -278) (undo-tree-id4133 . -279) (undo-tree-id4134 . -340) (undo-tree-id4135 . -278) (undo-tree-id4136 . -245) (undo-tree-id4137 . -245) (undo-tree-id4138 . -269) (undo-tree-id4139 . -245) (undo-tree-id4140 . -1844) (undo-tree-id4141 . -1761) (undo-tree-id4142 . -904) (undo-tree-id4143 . -1844) (undo-tree-id4144 . -1844) (undo-tree-id4145 . -904) (undo-tree-id4146 . -1761) (undo-tree-id4147 . -1844) (undo-tree-id4148 . -904) (undo-tree-id4149 . -1732) (undo-tree-id4150 . -1733) (undo-tree-id4151 . -904) (undo-tree-id4152 . -1732) (undo-tree-id4153 . -1732) (undo-tree-id4154 . -904) (undo-tree-id4155 . -1732) (undo-tree-id4156 . -1732) (undo-tree-id4157 . -904) (undo-tree-id4158 . -1733) (undo-tree-id4159 . -1732) (undo-tree-id4160 . -904) (undo-tree-id4161 . -1790) (undo-tree-id4162 . -1789) (undo-tree-id4163 . -904) (undo-tree-id4164 . -903) (undo-tree-id4165 . -1772) (undo-tree-id4166 . -1751) (undo-tree-id4167 . -1707) (undo-tree-id4168 . -904) (undo-tree-id4169 . -1732) (undo-tree-id4170 . -1733) (undo-tree-id4171 . -904) (undo-tree-id4172 . -1737) (undo-tree-id4173 . -1737) (undo-tree-id4174 . -904) (undo-tree-id4175 . -1737) (undo-tree-id4176 . -1737) (undo-tree-id4177 . -904) (undo-tree-id4178 . -1737) (undo-tree-id4179 . -1737) (undo-tree-id4180 . -904) (undo-tree-id4181 . -1732) (undo-tree-id4182 . -1733) (undo-tree-id4183 . -904) (undo-tree-id4184 . -804) (undo-tree-id4185 . -738) (undo-tree-id4186 . -912) (undo-tree-id4187 . -884) (undo-tree-id4188 . -1772) (undo-tree-id4189 . -912) (undo-tree-id4190 . -912) (undo-tree-id4191 . -1732) (undo-tree-id4192 . -1733) (undo-tree-id4193 . -958) (undo-tree-id4194 . -1732) (undo-tree-id4195 . -1732) (undo-tree-id4196 . -958) (undo-tree-id4197 . -1760) (undo-tree-id4198 . -1759) (undo-tree-id4199 . -958) (undo-tree-id4200 . -1791) (undo-tree-id4201 . -1790) (undo-tree-id4202 . -958) (undo-tree-id4203 . -1791) (undo-tree-id4204 . -1791) (undo-tree-id4205 . -958) (undo-tree-id4206 . -1790) (undo-tree-id4207 . -1790) (undo-tree-id4208 . -958) (undo-tree-id4209 . -1791) (undo-tree-id4210 . -1790) (undo-tree-id4211 . -958) (undo-tree-id4212 . -912) (undo-tree-id4213 . -1791) (undo-tree-id4214 . -1743) (undo-tree-id4215 . -1743) (undo-tree-id4216 . -958) (undo-tree-id4217 . -1791) (undo-tree-id4218 . -1791) (undo-tree-id4219 . -958) (undo-tree-id4220 . -1791) (undo-tree-id4221 . -1791) (undo-tree-id4222 . -958) (undo-tree-id4223 . -1791) (undo-tree-id4224 . -1791) (undo-tree-id4225 . -958) (undo-tree-id4226 . -1791) (undo-tree-id4227 . -958) (undo-tree-id4228 . -1791) (undo-tree-id4229 . -1798) (undo-tree-id4230 . -1799) (undo-tree-id4231 . -1791) (undo-tree-id4232 . -958) (undo-tree-id4233 . -1798) (undo-tree-id4234 . -1798) (undo-tree-id4235 . -958) 1799) nil (23730 18482 85958 467000) 0 nil]) ((1792 . 1800) (#("for_" 0 4 (fontified t)) . -1792) (undo-tree-id4236 . -1) (undo-tree-id4237 . -1) (undo-tree-id4238 . -1) (undo-tree-id4239 . -4) (undo-tree-id4240 . -4) 1796 (1794 . 1796) (1792 . 1794) (#("then" 0 4 (fontified t)) . 1792) (undo-tree-id4241 . 4) (undo-tree-id4242 . -4)) nil (23730 18482 85979 835000) 0 nil]) ((#("_" 0 1 (fontified t)) . 1792) (undo-tree-id4243 . 1)) nil (23730 18482 85984 103000) 0 nil] [nil nil ((#("receiver.take(1).map_err(|e| println!(\"{}\", e))._then(|text| {
                println!(\"{}\", text);
                Ok(())
            })" 0 13 (fontified t) 13 16 (fontified t) 16 29 (fontified t) 29 37 (fontified t face rust-builtin-formatting-macro-face) 37 38 (fontified t) 38 39 (fontified t face font-lock-string-face) 39 41 (fontified t face rust-string-interpolation-face) 41 42 (fontified t face font-lock-string-face) 42 47 (fontified t) 47 63 (fontified t) 63 79 (fontified t) 79 87 (fontified t face rust-builtin-formatting-macro-face) 87 88 (fontified t) 88 89 (fontified t face font-lock-string-face) 89 91 (fontified t face rust-string-interpolation-face) 91 92 (fontified t face font-lock-string-face) 92 101 (fontified t) 101 117 (fontified t) 117 119 (fontified t face font-lock-type-face) 119 138 (fontified t)) . 1744) (undo-tree-id4088 . 90) (undo-tree-id4089 . -48) (undo-tree-id4090 . -98) (undo-tree-id4091 . -18) (undo-tree-id4092 . -98) (undo-tree-id4093 . -98) (undo-tree-id4094 . -18) (undo-tree-id4095 . -98) (undo-tree-id4096 . -47) (undo-tree-id4097 . -46) (undo-tree-id4098 . -29) (undo-tree-id4099 . -8) (undo-tree-id4100 . -29) (undo-tree-id4101 . -17) (undo-tree-id4102 . -16) (undo-tree-id4103 . -48) (undo-tree-id4104 . -47) (undo-tree-id4105 . -48) (undo-tree-id4106 . -48) (undo-tree-id4107 . -48) (undo-tree-id4108 . -53) (undo-tree-id4109 . -48) (undo-tree-id4110 . -53) (undo-tree-id4111 . -47) (undo-tree-id4112 . -47) (undo-tree-id4113 . -48) (undo-tree-id4114 . -47) (undo-tree-id4115 . -48) (undo-tree-id4116 . -48) (undo-tree-id4117 . -48) (undo-tree-id4118 . -48) (undo-tree-id4119 . -47) (undo-tree-id4120 . -48) (undo-tree-id4121 . -48) (undo-tree-id4122 . -48) 1792) ((1744 . 1882)) (23730 18472 973506 151000) 0 nil]) ((#("and" 0 3 (fontified t)) . 1792)) nil (23730 18472 979859 796000) 0 nil]) ((#("." 0 1 (fontified t)) . -1760) (undo-tree-id4123 . -1) 1761 (1760 . 1761)) nil (23730 18472 973541 714000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 1760) (1758 . 1760) (1757 . 1759) (#("(" 0 1 (fontified nil)) . -1757) (1752 . 1758)) nil (23730 18472 973552 313000) 0 nil] [nil ([nil ([nil ([nil nil ((1740 . 1741)) ((#("n" 0 1 (fontified t)) . 1740) (undo-tree-id4073 . -1)) (23730 18349 138901 952000) 0 nil]) ((1738 . 1740) (#("spawn" 0 5 (fontified t)) . 1738) (t 23730 18171 222126 195000)) ((1738 . 1743) (#("ru" 0 2 (fontified t)) . 1738) (undo-tree-id4074 . -1) (undo-tree-id4075 . -1) (undo-tree-id4076 . -2) (undo-tree-id4077 . -1) (undo-tree-id4078 . -2) (undo-tree-id4079 . -1) (undo-tree-id4080 . -2) (undo-tree-id4081 . -2) (undo-tree-id4082 . -2) (undo-tree-id4083 . -2) (undo-tree-id4084 . -2) (undo-tree-id4085 . -2) (undo-tree-id4086 . -2) (undo-tree-id4087 . -2)) (23730 18349 144134 661000) 0 nil]) ((#(".map_err(|e| println!(\"{}\", e))" 0 13 (fontified t) 13 21 (fontified t face rust-builtin-formatting-macro-face) 21 22 (fontified t) 22 23 (fontified t face font-lock-string-face) 23 25 (fontified t face rust-string-interpolation-face) 25 26 (fontified t face font-lock-string-face) 26 31 (fontified t)) . 1752) (undo-tree-id4062 . -13) (undo-tree-id4063 . -31) (undo-tree-id4064 . -2) (undo-tree-id4065 . -31) (undo-tree-id4066 . -31) (undo-tree-id4067 . -2) (undo-tree-id4068 . -31) (undo-tree-id4069 . -31) (undo-tree-id4070 . -30) (undo-tree-id4071 . -13) (undo-tree-id4072 . -13) (t 23730 18152 28855 481000)) ((1752 . 1783) (t 23730 18171 222126 195000)) (23730 18349 516380 759000) 0 nil]) ((#(".and_then(|text| {
                println!(\"{}\", text);
                Ok(())
            })" 0 19 (fontified t) 19 35 (fontified t) 35 43 (fontified t face rust-builtin-formatting-macro-face) 43 44 (fontified t) 44 45 (fontified t face font-lock-string-face) 45 47 (fontified t face rust-string-interpolation-face) 47 48 (fontified t face font-lock-string-face) 48 57 (fontified t) 57 73 (fontified t) 73 75 (fontified t face font-lock-type-face) 75 94 (fontified t)) . 1783) (undo-tree-id4058 . -54) (undo-tree-id4059 . -54) (undo-tree-id4060 . -54) (undo-tree-id4061 . -54) (t 23730 18124 975607 105000)) ((1783 . 1877)) (23730 18349 875232 628000) 0 nil]) ((#(".unwrap()" 0 9 (fontified t)) . 1837) (undo-tree-id4056 . -1)) nil (23730 18350 270729 104000) 0 nil]) ((#("// Note: we've implemented a *future*, but what we really want is a **stream**.
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 15 (fontified t face font-lock-comment-face) 15 26 (fontified t face font-lock-comment-face) 26 79 (fontified t face font-lock-comment-face) 79 80 (fontified t face font-lock-comment-face)) . 198) (undo-tree-id4057 . -32) 230 (t 23730 18061 202457 530000)) nil (23730 18124 887898 671000) 0 nil]) ((#(">" 0 1 (fontified nil)) . 399) (392 . 399) (391 . 393) (#("<" 0 1 (fontified nil face font-lock-type-face)) . -391) (388 . 392) (#("i" 0 1 (fontified t face font-lock-type-face)) . -388) (undo-tree-id4053 . -1) (undo-tree-id4054 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -389) (undo-tree-id4055 . -1) 390 (385 . 390) (#("Self::Item" 0 4 (fontified t face font-lock-type-face) 4 6 (fontified t) 6 10 (fontified t face font-lock-type-face)) . 385)) nil (23730 18061 131888 387000) 0 nil]) ((327 . 328)) nil (23730 18061 131895 189000) 0 nil]) ((321 . 327)) nil (23730 18061 131897 390000) 0 nil]) ((#("Option<String>;" 0 6 (fontified t face font-lock-type-face) 6 7 (fontified t) 7 13 (fontified t face font-lock-type-face) 13 15 (fontified t)) . 321) (t 23730 17975 996106 523000)) nil (23730 18061 131899 504000) 0 nil] [nil ([nil nil ((#(")" 0 1 (fontified nil)) . 979) (#("(" 0 1 (fontified t)) . 940)) ((940 . 941) (979 . 980)) (23730 17956 666835 55000) 0 nil]) ((#("Some" 0 4 (fontified t face font-lock-type-face)) . 940)) ((940 . 944)) (23730 17956 671455 904000) 0 nil]) ((283 . 289) (#("Future" 0 6 (fontified t face font-lock-type-face)) . 283) (undo-tree-id4036 . -1) 284) nil (23730 17957 13507 15000) 0 nil]) ((276 . 277) (#("/" 0 1 (fontified t face font-lock-comment-face)) . -276) (undo-tree-id4037 . -1) (#("." 0 1 (fontified t face font-lock-comment-face)) . -277) (undo-tree-id4038 . -1) 278 (276 . 278)) nil (23730 17956 666860 945000) 0 nil]) ((210 . 212) (#("re" 0 2 (fontified t face font-lock-comment-face)) . 210)) nil (23730 17956 666864 485000) 0 nil]) ((222 . 224) (#("ing" 0 3 (fontified t face font-lock-comment-face)) . 222)) nil (23730 17956 666867 38000) 0 nil]) ((213 . 225) (#("implemeting" 0 11 (fontified t face font-lock-comment-face)) . -213)) nil (23730 17956 666869 250000) 0 nil]) ((267 . 276) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -267) (undo-tree-id4039 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -268) (undo-tree-id4040 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -269) (undo-tree-id4041 . -1) 270 (254 . 270) (246 . 254) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -246) (undo-tree-id4042 . -1) 247 (230 . 247) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -230) (undo-tree-id4043 . -1) 231 (228 . 231) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -228) (undo-tree-id4044 . -1) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -229) (undo-tree-id4045 . -1) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -230) (undo-tree-id4046 . -1) 231 (227 . 231) (#("f" 0 1 (fontified t face font-lock-comment-face)) . -227) (undo-tree-id4047 . -1) (#("u" 0 1 (fontified t face font-lock-comment-face)) . -228) (undo-tree-id4048 . -1) (#("t" 0 1 (fontified t face font-lock-comment-face)) . -229) (undo-tree-id4049 . -1) 230 (216 . 230) (#("l" 0 1 (fontified t face font-lock-comment-face)) . -216) (undo-tree-id4050 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -217) (undo-tree-id4051 . -1) 218 (214 . 218) (#("p" 0 1 (fontified t face font-lock-comment-face)) . -214) (undo-tree-id4052 . -1) 215 (208 . 215) (198 . 208) (198 . 199) (t 23730 17586 485481 800000)) nil (23730 17956 666903 432000) 0 nil]) ((#("              " 0 14 (fontified nil)) . -837) (undo-tree-id4034 . -14) (825 . 837)) nil (23730 17586 410398 548000) 0 nil]) ((#("                " 0 15 (fontified nil) 15 16 (fontified nil rear-nonsticky t)) . -839) (undo-tree-id4035 . -16) (825 . 839) 841) nil (23730 17586 410406 691000) 0 nil]) ((nil rear-nonsticky nil 840 . 841) (#("
" 0 1 (fontified nil)) . -912) (824 . 913) 761 (t 23730 17491 832825 982000)) nil (23730 17586 410411 3000) 0 nil]) ((1 . 1955) (#("use futures::{Future, Poll};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use tokio::prelude::*;

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Future for Receiver {
    type Item = Option<String>;
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(Some(\"Finished getting message.\".to_string())));
                
            }
            println!(\"{}\", String::from_utf8_lossy(&buffer[..num_bytes_read]));
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
}
impl Future for Sender {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = \"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn create_connections() {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);

    let client = connection
        .and_then(|socket| {
            let (rx, tx) = socket.split();
            let sender = Sender { tx };
            tokio::spawn(sender.map_err(|e| println!(\"{}\", e)));
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)).and_then(|text| {
                println!(\"{}\", text.unwrap());
                Ok(())
            }));
            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));
    tokio::run(client);
}

fn main() {
    create_connections();
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-type-face) 26 29 (fontified t) 29 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 38 (fontified t face font-lock-constant-face) 38 40 (fontified t) 40 42 (fontified t face font-lock-constant-face) 42 45 (fontified t) 45 54 (fontified t face font-lock-type-face) 54 56 (fontified t) 56 66 (fontified t face font-lock-type-face) 66 68 (fontified t) 68 73 (fontified t face font-lock-type-face) 73 75 (fontified t) 75 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 94 (fontified t face font-lock-type-face) 94 97 (fontified t) 97 100 (fontified t face font-lock-keyword-face) 100 101 (fontified t) 101 106 (fontified t face font-lock-constant-face) 106 108 (fontified t) 108 111 (fontified t face font-lock-constant-face) 111 113 (fontified t) 113 122 (fontified t face font-lock-type-face) 122 124 (fontified t) 124 127 (fontified t face font-lock-keyword-face) 127 128 (fontified t) 128 133 (fontified t face font-lock-constant-face) 133 135 (fontified t) 135 142 (fontified t face font-lock-constant-face) 142 148 (fontified t) 148 154 (fontified t face font-lock-keyword-face) 154 155 (fontified t) 155 163 (fontified t face font-lock-type-face) 163 170 (fontified t) 170 172 (fontified t face font-lock-variable-name-face) 172 174 (fontified t) 174 182 (fontified t face font-lock-type-face) 182 183 (fontified t) 183 192 (fontified t face font-lock-type-face) 192 197 (fontified t) 197 201 (fontified t face font-lock-keyword-face) 201 202 (fontified t) 202 208 (fontified t face font-lock-type-face) 208 209 (fontified t) 209 212 (fontified t face font-lock-keyword-face) 212 213 (fontified t) 213 221 (fontified t face font-lock-type-face) 221 228 (fontified t) 228 232 (fontified t face font-lock-keyword-face) 232 233 (fontified t) 233 237 (fontified t face font-lock-type-face) 237 240 (fontified t) 240 246 (fontified t face font-lock-type-face) 246 247 (fontified t) 247 253 (fontified t face font-lock-type-face) 253 256 (fontified t) 256 260 (fontified t) 260 264 (fontified t face font-lock-keyword-face) 264 265 (fontified t) 265 270 (fontified t face font-lock-type-face) 270 273 (fontified t) 273 278 (fontified t face font-lock-type-face) 278 279 (fontified t) 279 285 (fontified t) 285 287 (fontified t face font-lock-keyword-face) 287 288 (fontified t) 288 292 (fontified t face font-lock-function-name-face) 292 294 (fontified t) 294 297 (fontified t face font-lock-keyword-face) 297 298 (fontified t) 298 302 (fontified t face font-lock-keyword-face) 302 305 (fontified t) 305 306 (fontified t syntax-table #1#) 306 307 (fontified t) 307 311 (fontified t face font-lock-type-face) 311 312 (fontified t) 312 316 (fontified t face font-lock-type-face) 316 318 (fontified t) 318 322 (fontified t face font-lock-type-face) 322 324 (fontified t) 324 328 (fontified t face font-lock-type-face) 328 330 (fontified t) 330 335 (fontified t face font-lock-type-face) 335 347 (fontified t) 347 350 (fontified t face font-lock-keyword-face) 350 351 (fontified t) 351 354 (fontified t face font-lock-keyword-face) 354 355 (fontified t) 355 361 (fontified t face font-lock-variable-name-face) 361 364 (fontified t) 364 368 (fontified t face font-lock-preprocessor-face) 368 381 (fontified t) 381 383 (fontified t face font-lock-comment-delimiter-face) 383 424 (fontified t face font-lock-comment-face) 424 466 (fontified t) 466 468 (fontified t face font-lock-comment-delimiter-face) 468 500 (fontified t face font-lock-comment-face) 500 522 (fontified t face font-lock-comment-face) 522 530 (fontified t) 530 535 (fontified t face font-lock-keyword-face) 535 536 (fontified t) 536 539 (fontified t face font-lock-keyword-face) 539 540 (fontified t) 540 545 (fontified t face font-lock-type-face) 545 547 (fontified t) 547 552 (fontified t face font-lock-type-face) 552 571 (fontified t) 571 575 (fontified t face font-lock-keyword-face) 575 590 (fontified t) 590 593 (fontified t face font-lock-keyword-face) 593 601 (fontified t) 601 602 (fontified t face rust-question-mark-face) 602 617 (fontified t) 617 619 (fontified t face font-lock-keyword-face) 619 658 (fontified t) 658 664 (fontified t face font-lock-keyword-face) 664 665 (fontified t) 665 667 (fontified t face font-lock-type-face) 667 668 (fontified t) 668 673 (fontified t face font-lock-type-face) 673 675 (fontified t) 675 680 (fontified t face font-lock-type-face) 680 681 (fontified t) 681 685 (fontified t face font-lock-type-face) 685 686 (fontified t) 686 713 (fontified t face font-lock-string-face) 713 730 (fontified t) 730 746 (fontified t) 746 747 (fontified t) 747 760 (fontified t) 760 761 (fontified t) 761 773 (fontified t) 773 781 (fontified t face rust-builtin-formatting-macro-face) 781 782 (fontified t) 782 783 (fontified t face font-lock-string-face) 783 785 (fontified t face rust-string-interpolation-face) 785 786 (fontified t face font-lock-string-face) 786 788 (fontified t) 788 794 (fontified t face font-lock-type-face) 794 811 (fontified t) 811 837 (fontified t) 837 838 (fontified t rear-nonsticky t) 838 840 (fontified t) 840 841 (fontified t) 841 850 (fontified t) 850 859 (fontified t) 859 865 (fontified t face font-lock-keyword-face) 865 866 (fontified t) 866 868 (fontified t face font-lock-type-face) 868 869 (fontified t) 869 874 (fontified t face font-lock-type-face) 874 876 (fontified t) 876 884 (fontified t face font-lock-type-face) 884 896 (fontified t) 896 902 (fontified t face font-lock-keyword-face) 902 903 (fontified t) 903 909 (fontified t face font-lock-type-face) 909 916 (fontified t) 916 918 (fontified t face font-lock-variable-name-face) 918 920 (fontified t) 920 929 (fontified t face font-lock-type-face) 929 930 (fontified t) 930 939 (fontified t face font-lock-type-face) 939 940 (fontified t) 940 944 (fontified t) 944 948 (fontified t face font-lock-keyword-face) 948 949 (fontified t) 949 955 (fontified t face font-lock-type-face) 955 956 (fontified t) 956 959 (fontified t face font-lock-keyword-face) 959 960 (fontified t) 960 966 (fontified t face font-lock-type-face) 966 973 (fontified t) 973 977 (fontified t face font-lock-keyword-face) 977 978 (fontified t) 978 982 (fontified t face font-lock-type-face) 982 993 (fontified t) 993 997 (fontified t face font-lock-keyword-face) 997 998 (fontified t) 998 1003 (fontified t face font-lock-type-face) 1003 1006 (fontified t) 1006 1011 (fontified t face font-lock-type-face) 1011 1018 (fontified t) 1018 1020 (fontified t face font-lock-keyword-face) 1020 1021 (fontified t) 1021 1025 (fontified t face font-lock-function-name-face) 1025 1027 (fontified t) 1027 1030 (fontified t face font-lock-keyword-face) 1030 1031 (fontified t) 1031 1035 (fontified t face font-lock-keyword-face) 1035 1038 (fontified t) 1038 1039 (syntax-table #1# fontified t) 1039 1040 (fontified t) 1040 1044 (fontified t face font-lock-type-face) 1044 1045 (fontified t) 1045 1049 (fontified t face font-lock-type-face) 1049 1051 (fontified t) 1051 1055 (fontified t face font-lock-type-face) 1055 1057 (fontified t) 1057 1061 (fontified t face font-lock-type-face) 1061 1063 (fontified t) 1063 1068 (fontified t face font-lock-type-face) 1068 1069 (fontified t) 1069 1072 (fontified t) 1072 1080 (fontified t) 1080 1083 (fontified t face font-lock-keyword-face) 1083 1084 (fontified t) 1084 1087 (fontified t face font-lock-keyword-face) 1087 1088 (fontified t) 1088 1094 (fontified t face font-lock-variable-name-face) 1094 1097 (fontified t) 1097 1150 (fontified t face font-lock-string-face) 1150 1171 (fontified t) 1171 1175 (fontified t face font-lock-keyword-face) 1175 1191 (fontified t) 1191 1194 (fontified t face font-lock-keyword-face) 1194 1202 (fontified t) 1202 1203 (fontified t face rust-question-mark-face) 1203 1213 (fontified t) 1213 1219 (fontified t face font-lock-keyword-face) 1219 1220 (fontified t) 1220 1222 (fontified t face font-lock-type-face) 1222 1223 (fontified t) 1223 1228 (fontified t face font-lock-type-face) 1228 1230 (fontified t) 1230 1238 (fontified t face font-lock-type-face) 1238 1250 (fontified t) 1250 1252 (fontified t face font-lock-keyword-face) 1252 1253 (fontified t) 1253 1271 (fontified t face font-lock-function-name-face) 1271 1280 (fontified t) 1280 1283 (fontified t face font-lock-keyword-face) 1283 1284 (fontified t) 1284 1291 (fontified t face font-lock-variable-name-face) 1291 1294 (fontified t) 1294 1310 (fontified t face font-lock-string-face) 1310 1326 (fontified t) 1326 1327 (fontified t face font-lock-string-face) 1327 1341 (fontified t face font-lock-string-face) 1341 1350 (face font-lock-string-face fontified t) 1350 1351 (face font-lock-string-face fontified t) 1351 1354 (fontified t) 1358 1361 (face font-lock-keyword-face) 1362 1372 (face font-lock-variable-name-face) 1375 1384 (face font-lock-type-face) 1410 1413 (face font-lock-keyword-face) 1414 1420 (face font-lock-variable-name-face) 1475 1478 (face font-lock-keyword-face) 1518 1521 (face font-lock-keyword-face) 1522 1528 (face font-lock-variable-name-face) 1531 1537 (face font-lock-type-face) 1558 1563 (face font-lock-constant-face) 1590 1598 (face rust-builtin-formatting-macro-face) 1599 1600 (face font-lock-string-face) 1600 1602 (face rust-string-interpolation-face) 1602 1603 (face font-lock-string-face) 1623 1626 (face font-lock-keyword-face) 1627 1635 (face font-lock-variable-name-face) 1638 1646 (face font-lock-type-face) 1667 1672 (face font-lock-constant-face) 1701 1709 (face rust-builtin-formatting-macro-face) 1710 1711 (face font-lock-string-face) 1711 1713 (face rust-string-interpolation-face) 1713 1714 (face font-lock-string-face) 1754 1762 (face rust-builtin-formatting-macro-face) 1763 1764 (face font-lock-string-face) 1764 1766 (face rust-string-interpolation-face) 1766 1767 (face font-lock-string-face) 1801 1803 (face font-lock-type-face) 1837 1843 (face font-lock-keyword-face) 1844 1846 (face font-lock-type-face)) . 1) (undo-tree-id3985 . 1183) (undo-tree-id3986 . -761) (undo-tree-id3987 . -761) (undo-tree-id3988 . -837) (undo-tree-id3989 . -760) (undo-tree-id3990 . -761) (undo-tree-id3991 . -761) (undo-tree-id3992 . -761) (undo-tree-id3993 . -761) (undo-tree-id3994 . -761) (undo-tree-id3995 . -761) (undo-tree-id3996 . -782) (undo-tree-id3997 . -781) (undo-tree-id3998 . -782) (undo-tree-id3999 . -782) (undo-tree-id4000 . -781) (undo-tree-id4001 . -781) (undo-tree-id4002 . -782) (undo-tree-id4003 . -781) (undo-tree-id4004 . -785) (undo-tree-id4005 . -785) (undo-tree-id4006 . -785) (undo-tree-id4007 . -786) (undo-tree-id4008 . -788) (undo-tree-id4009 . -786) (undo-tree-id4010 . -794) (undo-tree-id4011 . -782) (undo-tree-id4012 . -793) (undo-tree-id4013 . -793) (undo-tree-id4014 . -795) (undo-tree-id4015 . -788) (undo-tree-id4016 . -787) (undo-tree-id4017 . -247) (undo-tree-id4018 . -253) (undo-tree-id4019 . -788) (undo-tree-id4020 . -794) (undo-tree-id4021 . -788) (undo-tree-id4022 . -788) 789) nil (23730 17491 774238 472000) 0 nil]) ((787 . 789) (#(" " 0 1 (fontified t)) . -787) (undo-tree-id4023 . -1) (undo-tree-id4024 . -1) 788 (787 . 788) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 787) (786 . 787) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 786) (785 . 786) (784 . 786) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -784) (784 . 785) (783 . 785) (#("\"" 0 1 (fontified nil)) . -783) (783 . 784)) nil (23730 17491 774258 551000) 0 nil]) ((834 . 835)) nil (23730 17491 774264 69000) 0 nil]) ((833 . 834) (#(")" 0 1 (fontified t)) . -806) (806 . 807) (#(")" 0 1 (fontified t)) . -789) (762 . 774) (#(" " 0 1 (fontified nil)) . 762) (undo-tree-id4025 . -1) (undo-tree-id4026 . -1) (undo-tree-id4027 . -1) (undo-tree-id4028 . -1) (undo-tree-id4029 . -1) (778 . 779) (#(")" 0 1 (fontified t)) . -772) (undo-tree-id4030 . 1)) nil (23730 17491 774278 602000) 0 nil]) ((771 . 773) (#("(" 0 1 (fontified nil)) . -771) (768 . 772) (763 . 768) (#("P" 0 1 (fontified t face font-lock-type-face)) . -763) (undo-tree-id4031 . -1) (undo-tree-id4032 . -1) (undo-tree-id4033 . -1) 764 (763 . 764)) nil (23730 17491 774290 863000) 0 nil]) ((#("/" 0 1 (fontified t)) . 762)) nil (23730 17491 774294 1000) 0 nil]) ((#("/" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 762)) nil (23730 17491 774296 15000) 0 nil]) ((nil rear-nonsticky nil 814 . 815) (762 . 815)) ((#("// String::from_utf8_lossy(&buffer[..num_bytes_read])" 0 3 (fontified nil face font-lock-comment-delimiter-face) 3 52 (fontified nil face font-lock-comment-face) 52 53 (fontified nil rear-nonsticky nil face font-lock-comment-face)) . 762) (undo-tree-id2828 . -52) (undo-tree-id2829 . -52) (undo-tree-id2831 . -26) (undo-tree-id2833 . -52) (undo-tree-id2835 . -26) (undo-tree-id2837 . 27) (undo-tree-id2839 . 26) (undo-tree-id2841 . 1) (nil rear-nonsticky t 814 . 815)) (23730 17450 562579 274000) 0 nil]) ((#("            " 0 12 (fontified nil)) . 762) (761 . 774)) ((#("
            " 0 1 (fontified t) 1 13 (fontified nil)) . 761) (undo-tree-id2843 . -1) (undo-tree-id2844 . -1) (undo-tree-id2845 . -1) (undo-tree-id2846 . -13) (undo-tree-id2848 . -1) (762 . 774)) (23730 17450 522371 986000) 0 nil] [nil nil ((nil rear-nonsticky nil 813 . 814) (nil fontified nil 761 . 814) (761 . 814) 760) ((#("// String::from_utf8_lossy(&buffer[..num_bytes_read])" 0 3 (fontified nil face font-lock-comment-delimiter-face) 3 52 (fontified nil face font-lock-comment-face) 52 53 (fontified nil rear-nonsticky nil face font-lock-comment-face)) . 761) (undo-tree-id2815 . -52) (undo-tree-id2816 . -52) (undo-tree-id2817 . -52) (undo-tree-id2818 . -26) (undo-tree-id2819 . -27) (undo-tree-id2820 . 27) (undo-tree-id2821 . -27) (undo-tree-id2822 . 26) (undo-tree-id2823 . -52) (undo-tree-id2824 . 1) (undo-tree-id2825 . -53) (nil rear-nonsticky t 813 . 814)) (23730 17434 503721 741000) 0 nil]) ((#("// String::from_utf8_lossy(&buffer[..num_bytes_read])" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 10 (fontified t face font-lock-comment-face) 10 33 (fontified t face font-lock-comment-face) 33 53 (fontified t face font-lock-comment-face)) . 747) (t 23730 17385 746931 663000)) ((747 . 800)) (23730 17450 505566 352000) 0 nil]) ((1 . 1945) (#("use futures::{Future, Poll};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use tokio::prelude::*;

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Future for Receiver {
    type Item = Option<String>;
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(Some(
                    \"Finished getting message.\".to_string(),
                )));
                // String::from_utf8_lossy(&buffer[..num_bytes_read])
            }
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
}
impl Future for Sender {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = \"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn create_connections() {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);

    let client = connection
        .and_then(|socket| {
            let (rx, tx) = socket.split();
            let sender = Sender { tx };
            tokio::spawn(sender.map_err(|e| println!(\"{}\", e)));
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)).and_then(|text| {
                println!(\"{}\", text.unwrap());
                Ok(())
            }));
            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));
    tokio::run(client);
}

fn main() {
    create_connections();
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-type-face) 26 29 (fontified t) 29 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 38 (fontified t face font-lock-constant-face) 38 40 (fontified t) 40 42 (fontified t face font-lock-constant-face) 42 45 (fontified t) 45 54 (fontified t face font-lock-type-face) 54 56 (fontified t) 56 66 (fontified t face font-lock-type-face) 66 68 (fontified t) 68 73 (fontified t face font-lock-type-face) 73 75 (fontified t) 75 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 94 (fontified t face font-lock-type-face) 94 97 (fontified t) 97 100 (fontified t face font-lock-keyword-face) 100 101 (fontified t) 101 106 (fontified t face font-lock-constant-face) 106 108 (fontified t) 108 111 (fontified t face font-lock-constant-face) 111 113 (fontified t) 113 122 (fontified t face font-lock-type-face) 122 124 (fontified t) 124 127 (fontified t face font-lock-keyword-face) 127 128 (fontified t) 128 133 (fontified t face font-lock-constant-face) 133 135 (fontified t) 135 142 (fontified t face font-lock-constant-face) 142 148 (fontified t) 148 154 (fontified t face font-lock-keyword-face) 154 155 (fontified t) 155 163 (fontified t face font-lock-type-face) 163 170 (fontified t) 170 172 (fontified t face font-lock-variable-name-face) 172 174 (fontified t) 174 182 (fontified t face font-lock-type-face) 182 183 (fontified t) 183 192 (fontified t face font-lock-type-face) 192 197 (fontified t) 197 201 (fontified t face font-lock-keyword-face) 201 202 (fontified t) 202 208 (fontified t face font-lock-type-face) 208 209 (fontified t) 209 212 (fontified t face font-lock-keyword-face) 212 213 (fontified t) 213 221 (fontified t face font-lock-type-face) 221 228 (fontified t) 228 232 (fontified t face font-lock-keyword-face) 232 233 (fontified t) 233 237 (fontified t face font-lock-type-face) 237 240 (fontified t) 240 246 (fontified t face font-lock-type-face) 246 247 (fontified t) 247 253 (fontified t face font-lock-type-face) 253 256 (fontified t) 256 260 (fontified t) 260 264 (fontified t face font-lock-keyword-face) 264 265 (fontified t) 265 270 (fontified t face font-lock-type-face) 270 273 (fontified t) 273 278 (fontified t face font-lock-type-face) 278 285 (fontified t) 285 287 (fontified t face font-lock-keyword-face) 287 288 (fontified t) 288 292 (fontified t face font-lock-function-name-face) 292 294 (fontified t) 294 297 (fontified t face font-lock-keyword-face) 297 298 (fontified t) 298 302 (fontified t face font-lock-keyword-face) 302 305 (fontified t) 305 306 (fontified t syntax-table #1#) 306 307 (fontified t) 307 311 (fontified t face font-lock-type-face) 311 312 (fontified t) 312 316 (fontified t face font-lock-type-face) 316 318 (fontified t) 318 322 (fontified t face font-lock-type-face) 322 324 (fontified t) 324 328 (fontified t face font-lock-type-face) 328 330 (fontified t) 330 335 (fontified t face font-lock-type-face) 335 347 (fontified t) 347 350 (fontified t face font-lock-keyword-face) 350 351 (fontified t) 351 354 (fontified t face font-lock-keyword-face) 354 355 (fontified t) 355 361 (fontified t face font-lock-variable-name-face) 361 364 (fontified t) 364 368 (fontified t face font-lock-preprocessor-face) 368 381 (fontified t) 381 383 (fontified t face font-lock-comment-delimiter-face) 383 424 (fontified t face font-lock-comment-face) 424 466 (fontified t) 466 468 (fontified t face font-lock-comment-delimiter-face) 468 500 (fontified t face font-lock-comment-face) 500 522 (fontified t face font-lock-comment-face) 522 530 (fontified t) 530 535 (fontified t face font-lock-keyword-face) 535 536 (fontified t) 536 539 (fontified t face font-lock-keyword-face) 539 540 (fontified t) 540 545 (fontified t face font-lock-type-face) 545 547 (fontified t) 547 552 (fontified t face font-lock-type-face) 552 571 (fontified t) 571 575 (fontified t face font-lock-keyword-face) 575 590 (fontified t) 590 593 (fontified t face font-lock-keyword-face) 593 601 (fontified t) 601 602 (fontified t face rust-question-mark-face) 602 617 (fontified t) 617 619 (fontified t face font-lock-keyword-face) 619 658 (fontified t) 658 664 (fontified t face font-lock-keyword-face) 664 665 (fontified t) 665 667 (fontified t face font-lock-type-face) 667 668 (fontified t) 668 673 (fontified t face font-lock-type-face) 673 675 (fontified t) 675 680 (fontified t face font-lock-type-face) 680 681 (fontified t) 681 685 (fontified t face font-lock-type-face) 685 687 (fontified t) 687 707 (fontified t) 707 708 (fontified t face font-lock-string-face) 708 729 (fontified t face font-lock-string-face) 729 733 (fontified t face font-lock-string-face) 733 734 (fontified t face font-lock-string-face) 734 748 (fontified t) 748 756 (fontified t) 756 768 (fontified t) 768 769 (fontified t) 769 785 (fontified t) 785 788 (fontified t face font-lock-comment-delimiter-face) 788 837 (fontified t face font-lock-comment-face) 837 838 (fontified t rear-nonsticky t face font-lock-comment-face) 838 839 (fontified t face font-lock-comment-face) 839 871 (fontified t) 871 877 (fontified t face font-lock-keyword-face) 877 878 (fontified t) 878 880 (fontified t face font-lock-type-face) 880 881 (fontified t) 881 886 (fontified t face font-lock-type-face) 886 888 (fontified t) 888 896 (fontified t face font-lock-type-face) 896 908 (fontified t) 908 914 (fontified t face font-lock-keyword-face) 914 915 (fontified t) 915 921 (fontified t face font-lock-type-face) 921 928 (fontified t) 928 930 (fontified t face font-lock-variable-name-face) 930 932 (fontified t) 932 941 (fontified t face font-lock-type-face) 941 942 (fontified t) 942 951 (fontified t face font-lock-type-face) 951 952 (fontified t) 952 956 (fontified t) 956 960 (fontified t face font-lock-keyword-face) 960 961 (fontified t) 961 967 (fontified t face font-lock-type-face) 967 968 (fontified t) 968 971 (fontified t face font-lock-keyword-face) 971 972 (fontified t) 972 978 (fontified t face font-lock-type-face) 978 985 (fontified t) 985 989 (fontified t face font-lock-keyword-face) 989 990 (fontified t) 990 994 (fontified t face font-lock-type-face) 994 1005 (fontified t) 1005 1009 (fontified t face font-lock-keyword-face) 1009 1010 (fontified t) 1010 1015 (fontified t face font-lock-type-face) 1015 1018 (fontified t) 1018 1023 (fontified t face font-lock-type-face) 1023 1026 (fontified t) 1026 1030 (fontified t) 1030 1032 (fontified t face font-lock-keyword-face) 1032 1033 (fontified t) 1033 1037 (fontified t face font-lock-function-name-face) 1037 1039 (fontified t) 1039 1042 (fontified t face font-lock-keyword-face) 1042 1043 (fontified t) 1043 1047 (fontified t face font-lock-keyword-face) 1047 1050 (fontified t) 1050 1051 (fontified t syntax-table #1#) 1051 1052 (fontified t) 1052 1056 (fontified t face font-lock-type-face) 1056 1057 (fontified t) 1057 1061 (fontified t face font-lock-type-face) 1061 1063 (fontified t) 1063 1067 (fontified t face font-lock-type-face) 1067 1069 (fontified t) 1069 1073 (fontified t face font-lock-type-face) 1073 1075 (fontified t) 1075 1080 (fontified t face font-lock-type-face) 1080 1081 (fontified t) 1081 1083 (fontified t) 1083 1084 (fontified t) 1084 1092 (fontified t) 1092 1095 (fontified t face font-lock-keyword-face) 1095 1096 (fontified t) 1096 1099 (fontified t face font-lock-keyword-face) 1099 1100 (fontified t) 1100 1106 (fontified t face font-lock-variable-name-face) 1106 1109 (fontified t) 1109 1162 (fontified t face font-lock-string-face) 1162 1183 (fontified t) 1183 1187 (fontified t face font-lock-keyword-face) 1187 1203 (fontified t) 1203 1206 (fontified t face font-lock-keyword-face) 1206 1214 (fontified t) 1214 1215 (fontified t face rust-question-mark-face) 1215 1225 (fontified t) 1225 1231 (fontified t face font-lock-keyword-face) 1231 1232 (fontified t) 1232 1234 (fontified t face font-lock-type-face) 1234 1235 (fontified t) 1235 1240 (fontified t face font-lock-type-face) 1240 1242 (fontified t) 1242 1250 (fontified t face font-lock-type-face) 1250 1262 (fontified t) 1262 1264 (fontified t face font-lock-keyword-face) 1264 1265 (fontified t) 1265 1269 (fontified t face font-lock-function-name-face) 1269 1283 (fontified t face font-lock-function-name-face) 1283 1288 (fontified t) 1288 1292 (fontified t) 1292 1295 (fontified t face font-lock-keyword-face) 1295 1296 (fontified t) 1296 1303 (fontified t face font-lock-variable-name-face) 1303 1306 (fontified t) 1306 1318 (fontified t face font-lock-string-face) 1318 1322 (fontified t face font-lock-string-face) 1322 1338 (fontified t) 1338 1339 (fontified t face font-lock-string-face) 1339 1363 (fontified t face font-lock-string-face) 1363 1366 (fontified t) 1366 1370 (fontified t) 1370 1373 (fontified t face font-lock-keyword-face) 1373 1374 (fontified t) 1374 1384 (fontified t face font-lock-variable-name-face) 1384 1387 (fontified t) 1387 1396 (fontified t face font-lock-type-face) 1396 1422 (fontified t) 1422 1425 (fontified t face font-lock-keyword-face) 1425 1426 (fontified t) 1426 1432 (fontified t face font-lock-variable-name-face) 1432 1487 (fontified t) 1487 1490 (fontified t face font-lock-keyword-face) 1490 1526 (fontified t) 1526 1530 (fontified t) 1530 1533 (fontified t face font-lock-keyword-face) 1533 1534 (fontified t) 1534 1540 (fontified t face font-lock-variable-name-face) 1540 1543 (fontified t) 1543 1549 (fontified t face font-lock-type-face) 1549 1558 (fontified t) 1558 1570 (fontified t) 1570 1575 (fontified t face font-lock-constant-face) 1575 1583 (fontified t) 1583 1584 (fontified t) 1584 1602 (fontified t) 1602 1610 (fontified t face rust-builtin-formatting-macro-face) 1610 1611 (fontified t) 1611 1612 (fontified t face font-lock-string-face) 1612 1614 (fontified t face rust-string-interpolation-face) 1614 1615 (fontified t face font-lock-string-face) 1615 1623 (fontified t) 1623 1635 (fontified nil) 1635 1638 (fontified nil face font-lock-keyword-face) 1638 1639 (fontified nil) 1639 1647 (fontified nil face font-lock-variable-name-face) 1647 1650 (fontified nil) 1650 1658 (fontified nil face font-lock-type-face) 1658 1679 (fontified nil) 1679 1684 (fontified nil face font-lock-constant-face) 1684 1713 (fontified nil) 1713 1721 (fontified nil face rust-builtin-formatting-macro-face) 1721 1722 (fontified nil) 1722 1723 (fontified nil face font-lock-string-face) 1723 1725 (fontified nil face rust-string-interpolation-face) 1725 1726 (fontified nil face font-lock-string-face) 1726 1750 (fontified nil) 1750 1766 (fontified nil) 1766 1774 (fontified nil face rust-builtin-formatting-macro-face) 1774 1775 (fontified nil) 1775 1776 (fontified nil face font-lock-string-face) 1776 1778 (fontified nil face rust-string-interpolation-face) 1778 1779 (fontified nil face font-lock-string-face) 1779 1788 (fontified nil) 1788 1796 (fontified nil) 1796 1797 (fontified nil) 1797 1813 (fontified nil) 1813 1815 (fontified nil face font-lock-type-face) 1815 1849 (fontified nil) 1849 1855 (fontified nil face font-lock-keyword-face) 1855 1856 (fontified nil) 1856 1858 (fontified nil face font-lock-type-face) 1858 1866 (fontified nil) 1866 1875 (fontified nil) 1875 1896 (fontified nil) 1896 1904 (face rust-builtin-formatting-macro-face fontified nil) 1904 1905 (fontified nil) 1905 1906 (face font-lock-string-face fontified nil) 1906 1908 (face rust-string-interpolation-face fontified nil) 1908 1909 (face font-lock-string-face fontified nil) 1909 1920 (fontified nil) 1920 1925 (face font-lock-constant-face fontified nil) 1925 1943 (fontified nil) 1943 1945 (face font-lock-keyword-face fontified nil) 1945 1946 (fontified nil) 1946 1950 (face font-lock-function-name-face fontified nil) 1950 1983 (fontified nil)) . 1) (undo-tree-id3965 . 1145) (undo-tree-id3966 . -788) (undo-tree-id3967 . -788) (undo-tree-id3968 . -837) (undo-tree-id3969 . -707) (undo-tree-id3970 . 1249) (undo-tree-id3971 . -707) (undo-tree-id3972 . -707) (undo-tree-id3973 . -707) (undo-tree-id3974 . -768) (undo-tree-id3975 . -768) (undo-tree-id3976 . -708) (undo-tree-id3977 . -788) (undo-tree-id3978 . -707) (undo-tree-id3979 . -256) (undo-tree-id3980 . -729) (undo-tree-id3981 . -785) (undo-tree-id3982 . -729) (undo-tree-id3983 . -788) (undo-tree-id3984 . -785)) ((1 . 1984) (#("use futures::{Future, Poll};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use tokio::prelude::*;

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Future for Receiver {
    type Item = Option<String>;
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(Some(\"Finished getting message.\".to_string())));
                // String::from_utf8_lossy(&buffer[..num_bytes_read])
            }
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
}
impl Future for Sender {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = \"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn create_connections() {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);

    let client = connection
        .and_then(|socket| {
            let (rx, tx) = socket.split();
            let sender = Sender { tx };
            tokio::spawn(sender.map_err(|e| println!(\"{}\", e)));
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)).and_then(|text| {
                println!(\"{}\", text.unwrap());
                Ok(())
            }));
            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));
    tokio::run(client);
}

fn main() {
    create_connections();
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-type-face) 26 29 (fontified t) 29 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 38 (fontified t face font-lock-constant-face) 38 40 (fontified t) 40 42 (fontified t face font-lock-constant-face) 42 45 (fontified t) 45 54 (fontified t face font-lock-type-face) 54 56 (fontified t) 56 66 (fontified t face font-lock-type-face) 66 68 (fontified t) 68 73 (fontified t face font-lock-type-face) 73 75 (fontified t) 75 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 94 (fontified t face font-lock-type-face) 94 97 (fontified t) 97 100 (fontified t face font-lock-keyword-face) 100 101 (fontified t) 101 106 (fontified t face font-lock-constant-face) 106 108 (fontified t) 108 111 (fontified t face font-lock-constant-face) 111 113 (fontified t) 113 122 (fontified t face font-lock-type-face) 122 124 (fontified t) 124 127 (fontified t face font-lock-keyword-face) 127 128 (fontified t) 128 133 (fontified t face font-lock-constant-face) 133 135 (fontified t) 135 142 (fontified t face font-lock-constant-face) 142 148 (fontified t) 148 154 (fontified t face font-lock-keyword-face) 154 155 (fontified t) 155 163 (fontified t face font-lock-type-face) 163 170 (fontified t) 170 172 (fontified t face font-lock-variable-name-face) 172 174 (fontified t) 174 182 (fontified t face font-lock-type-face) 182 183 (fontified t) 183 192 (fontified t face font-lock-type-face) 192 197 (fontified t) 197 201 (fontified t face font-lock-keyword-face) 201 202 (fontified t) 202 208 (fontified t face font-lock-type-face) 208 209 (fontified t) 209 212 (fontified t face font-lock-keyword-face) 212 213 (fontified t) 213 221 (fontified t face font-lock-type-face) 221 228 (fontified t) 228 232 (fontified t face font-lock-keyword-face) 232 233 (fontified t) 233 237 (fontified t face font-lock-type-face) 237 240 (fontified t) 240 246 (fontified t face font-lock-type-face) 246 247 (fontified t) 247 253 (fontified t face font-lock-type-face) 253 256 (fontified t) 256 260 (fontified t) 260 264 (fontified t face font-lock-keyword-face) 264 265 (fontified t) 265 270 (fontified t face font-lock-type-face) 270 273 (fontified t) 273 278 (fontified t face font-lock-type-face) 278 279 (fontified t) 279 285 (fontified t) 285 287 (fontified t face font-lock-keyword-face) 287 288 (fontified t) 288 292 (fontified t face font-lock-function-name-face) 292 294 (fontified t) 294 297 (fontified t face font-lock-keyword-face) 297 298 (fontified t) 298 302 (fontified t face font-lock-keyword-face) 302 305 (fontified t) 305 306 (syntax-table #1# fontified t) 306 307 (fontified t) 307 311 (fontified t face font-lock-type-face) 311 312 (fontified t) 312 316 (fontified t face font-lock-type-face) 316 318 (fontified t) 318 322 (fontified t face font-lock-type-face) 322 324 (fontified t) 324 328 (fontified t face font-lock-type-face) 328 330 (fontified t) 330 335 (fontified t face font-lock-type-face) 335 347 (fontified t) 347 350 (fontified t face font-lock-keyword-face) 350 351 (fontified t) 351 354 (fontified t face font-lock-keyword-face) 354 355 (fontified t) 355 361 (fontified t face font-lock-variable-name-face) 361 364 (fontified t) 364 368 (fontified t face font-lock-preprocessor-face) 368 381 (fontified t) 381 383 (fontified t face font-lock-comment-delimiter-face) 383 424 (fontified t face font-lock-comment-face) 424 466 (fontified t) 466 468 (fontified t face font-lock-comment-delimiter-face) 468 522 (fontified t face font-lock-comment-face) 522 530 (fontified t) 530 535 (fontified t face font-lock-keyword-face) 535 536 (fontified t) 536 539 (fontified t face font-lock-keyword-face) 539 540 (fontified t) 540 545 (fontified t face font-lock-type-face) 545 547 (fontified t) 547 552 (fontified t face font-lock-type-face) 552 571 (fontified t) 571 575 (fontified t face font-lock-keyword-face) 575 590 (fontified t) 590 593 (fontified t face font-lock-keyword-face) 593 601 (fontified t) 601 602 (fontified t face rust-question-mark-face) 602 617 (fontified t) 617 619 (fontified t face font-lock-keyword-face) 619 658 (fontified t) 658 664 (fontified t face font-lock-keyword-face) 664 665 (fontified t) 665 667 (fontified t face font-lock-type-face) 667 668 (fontified t) 668 673 (fontified t face font-lock-type-face) 673 675 (fontified t) 675 680 (fontified t face font-lock-type-face) 680 681 (fontified t) 681 685 (fontified t face font-lock-type-face) 685 686 (fontified t) 686 713 (fontified t face font-lock-string-face) 713 730 (fontified t) 730 746 (fontified t) 746 749 (fontified t face font-lock-comment-delimiter-face) 749 756 (fontified t face font-lock-comment-face) 756 779 (fontified t face font-lock-comment-face) 779 799 (fontified t face font-lock-comment-face) 799 800 (fontified t face font-lock-comment-face) 800 813 (fontified t) 813 814 (fontified t) 814 823 (fontified t) 823 832 (fontified t) 832 838 (fontified t face font-lock-keyword-face) 838 839 (fontified t) 839 841 (fontified t face font-lock-type-face) 841 842 (fontified t) 842 847 (fontified t face font-lock-type-face) 847 849 (fontified t) 849 857 (fontified t face font-lock-type-face) 857 869 (fontified t) 869 875 (fontified t face font-lock-keyword-face) 875 876 (fontified t) 876 882 (fontified t face font-lock-type-face) 882 889 (fontified t) 889 891 (fontified t face font-lock-variable-name-face) 891 893 (fontified t) 893 902 (fontified t face font-lock-type-face) 902 903 (fontified t) 903 912 (fontified t face font-lock-type-face) 912 917 (fontified t) 917 921 (fontified t face font-lock-keyword-face) 921 922 (fontified t) 922 928 (fontified t face font-lock-type-face) 928 929 (fontified t) 929 932 (fontified t face font-lock-keyword-face) 932 933 (fontified t) 933 939 (fontified t face font-lock-type-face) 939 946 (fontified t) 946 950 (fontified t face font-lock-keyword-face) 950 951 (fontified t) 951 955 (fontified t face font-lock-type-face) 955 966 (fontified t) 966 970 (fontified t face font-lock-keyword-face) 970 971 (fontified t) 971 976 (fontified t face font-lock-type-face) 976 979 (fontified t) 979 984 (fontified t face font-lock-type-face) 984 991 (fontified t) 991 993 (fontified t face font-lock-keyword-face) 993 994 (fontified t) 994 998 (fontified t face font-lock-function-name-face) 998 1000 (fontified t) 1000 1003 (fontified t face font-lock-keyword-face) 1003 1004 (fontified t) 1004 1008 (fontified t face font-lock-keyword-face) 1008 1011 (fontified t) 1011 1012 (fontified t syntax-table #1#) 1012 1013 (fontified t) 1013 1017 (fontified t face font-lock-type-face) 1017 1018 (fontified t) 1018 1022 (fontified t face font-lock-type-face) 1022 1024 (fontified t) 1024 1028 (fontified t face font-lock-type-face) 1028 1030 (fontified t) 1030 1034 (fontified t face font-lock-type-face) 1034 1036 (fontified t) 1036 1041 (fontified t face font-lock-type-face) 1041 1053 (fontified t) 1053 1056 (fontified t face font-lock-keyword-face) 1056 1057 (fontified t) 1057 1060 (fontified t face font-lock-keyword-face) 1060 1061 (fontified t) 1061 1067 (fontified t face font-lock-variable-name-face) 1067 1070 (fontified t) 1070 1123 (fontified t face font-lock-string-face) 1123 1144 (fontified t) 1144 1148 (fontified t face font-lock-keyword-face) 1148 1164 (fontified t) 1164 1167 (fontified t face font-lock-keyword-face) 1167 1175 (fontified t) 1175 1176 (fontified t face rust-question-mark-face) 1176 1186 (fontified t) 1186 1192 (fontified t face font-lock-keyword-face) 1192 1193 (fontified t) 1193 1195 (fontified t face font-lock-type-face) 1195 1196 (fontified t) 1196 1201 (fontified t face font-lock-type-face) 1201 1203 (fontified t) 1203 1211 (fontified t face font-lock-type-face) 1211 1223 (fontified t) 1223 1225 (fontified t face font-lock-keyword-face) 1225 1226 (fontified t) 1226 1244 (fontified t face font-lock-function-name-face) 1244 1253 (fontified t) 1253 1256 (fontified t face font-lock-keyword-face) 1256 1257 (fontified t) 1257 1264 (fontified t face font-lock-variable-name-face) 1264 1267 (fontified t) 1267 1283 (fontified t face font-lock-string-face) 1283 1299 (fontified t) 1299 1300 (fontified t face font-lock-string-face) 1300 1314 (fontified t face font-lock-string-face) 1314 1323 (face font-lock-string-face fontified t) 1323 1324 (face font-lock-string-face fontified t) 1324 1327 (fontified t) 1327 1331 (fontified t) 1331 1334 (fontified t face font-lock-keyword-face) 1334 1335 (fontified t) 1335 1345 (fontified t face font-lock-variable-name-face) 1345 1348 (fontified t) 1348 1357 (fontified t face font-lock-type-face) 1357 1383 (fontified t) 1383 1386 (fontified t face font-lock-keyword-face) 1386 1387 (fontified t) 1387 1393 (fontified t face font-lock-variable-name-face) 1393 1448 (fontified t) 1448 1451 (fontified t face font-lock-keyword-face) 1451 1491 (fontified t) 1491 1494 (fontified t face font-lock-keyword-face) 1494 1495 (fontified t) 1495 1501 (fontified t face font-lock-variable-name-face) 1501 1504 (fontified t) 1504 1510 (fontified t face font-lock-type-face) 1510 1531 (fontified t) 1531 1536 (fontified t face font-lock-constant-face) 1536 1563 (fontified t) 1563 1571 (fontified t face rust-builtin-formatting-macro-face) 1571 1572 (fontified t) 1572 1573 (fontified t face font-lock-string-face) 1573 1575 (fontified t face rust-string-interpolation-face) 1575 1576 (fontified t face font-lock-string-face) 1576 1596 (fontified t) 1596 1599 (fontified t face font-lock-keyword-face) 1599 1600 (fontified t) 1600 1608 (fontified t face font-lock-variable-name-face) 1608 1611 (fontified t) 1611 1619 (fontified t face font-lock-type-face) 1619 1640 (fontified t) 1640 1645 (fontified t face font-lock-constant-face) 1645 1674 (fontified t) 1674 1682 (fontified t face rust-builtin-formatting-macro-face) 1682 1683 (fontified t) 1683 1684 (fontified t face font-lock-string-face) 1684 1686 (fontified t face rust-string-interpolation-face) 1686 1687 (fontified t face font-lock-string-face) 1687 1727 (fontified t) 1727 1735 (fontified t face rust-builtin-formatting-macro-face) 1735 1736 (fontified t) 1736 1737 (fontified t face font-lock-string-face) 1737 1739 (fontified t face rust-string-interpolation-face) 1739 1740 (fontified t face font-lock-string-face) 1740 1774 (fontified t) 1774 1776 (fontified t face font-lock-type-face) 1776 1810 (fontified t) 1810 1816 (fontified t face font-lock-keyword-face) 1816 1817 (fontified t) 1817 1819 (fontified t face font-lock-type-face) 1819 1827 (fontified t) 1827 1836 (fontified t)) . 1) (undo-tree-id2849 . 1131) (undo-tree-id2850 . -813) (undo-tree-id2851 . -813) (undo-tree-id2852 . -813) (undo-tree-id2854 . -822) (undo-tree-id2856 . -822) (undo-tree-id2858 . -822) (undo-tree-id2859 . -822) (undo-tree-id2860 . -746) (undo-tree-id2861 . -813) (undo-tree-id2863 . -813) (undo-tree-id2865 . -813) (undo-tree-id2867 . -1071) (undo-tree-id2869 . -641) (undo-tree-id2871 . -812) (t 23730 17385 746931 663000)) (23730 17450 444984 279000) 0 nil]) ((nil rear-nonsticky nil 838 . 839) (789 . 839)) ((#("String::from_utf8_lossy(&buffer[..num_bytes_read])" 0 49 (fontified nil face font-lock-comment-face) 49 50 (fontified nil rear-nonsticky nil face font-lock-comment-face)) . 789) (undo-tree-id2872 . -49) (undo-tree-id2873 . -49) (undo-tree-id2875 . -49) (undo-tree-id2877 . -24) (undo-tree-id2879 . -24) (undo-tree-id2881 . -49) (undo-tree-id2883 . -50) (nil rear-nonsticky t 838 . 839)) (23730 17450 403100 710000) 0 nil]) ((769 . 789)) ((#("
                " 0 1 (fontified t) 1 17 (fontified nil)) . 769) (undo-tree-id2884 . -17) (undo-tree-id2885 . -17) (undo-tree-id2886 . -17) (undo-tree-id2887 . -17) (undo-tree-id2889 . -17) (undo-tree-id2891 . -17) (undo-tree-id2893 . -17) (#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 786) (undo-tree-id2894 . -3) (undo-tree-id2895 . -3) (undo-tree-id2896 . -3) (undo-tree-id2897 . -2) (undo-tree-id2899 . -3) (undo-tree-id2901 . -3) (undo-tree-id2903 . -3)) (23730 17450 360781 277000) 0 nil] [nil nil ((nil rear-nonsticky nil 818 . 819) (nil fontified nil 769 . 819) (769 . 819) 768) ((#("String::from_utf8_lossy(&buffer[..num_bytes_read])" 0 6 (fontified nil face font-lock-type-face) 6 49 (fontified nil) 49 50 (fontified nil rear-nonsticky nil)) . 769) (undo-tree-id2746 . -49) (undo-tree-id2747 . -49) (undo-tree-id2748 . -49) (undo-tree-id2749 . -23) (undo-tree-id2750 . -24) (undo-tree-id2751 . 27) (undo-tree-id2752 . -24) (undo-tree-id2753 . 26) (undo-tree-id2754 . -49) (undo-tree-id2755 . 1) (undo-tree-id2756 . -50) (undo-tree-id2757 . -6) (undo-tree-id2758 . -6) (undo-tree-id2759 . -50) (undo-tree-id2760 . -50) (nil rear-nonsticky t 818 . 819)) (23730 17380 961274 997000) 0 nil]) ((709 . 734) (#("H" 0 1 (fontified nil face font-lock-string-face)) . 709) (undo-tree-id3962 . -1) (709 . 710) (708 . 710) (#("\"" 0 1 (fontified nil)) . 708) (708 . 709) (#("String::from_utf8_lossy(&buffer[..num_bytes_read])" 0 6 (fontified t face font-lock-type-face) 6 50 (fontified t)) . 708) (undo-tree-id3963 . -49) (undo-tree-id3964 . -49)) ((708 . 758) (#("\"" 0 1 (fontified nil)) . 708) (708 . 709) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 708) (undo-tree-id2904 . -1) (undo-tree-id2906 . -2) (undo-tree-id2908 . -2) (#("H" 0 1 (fontified nil face font-lock-string-face)) . 709) (undo-tree-id2909 . -1) (709 . 710) (#("Finished getting mess" 0 21 (fontified nil face font-lock-string-face)) . 709) (undo-tree-id2911 . -21) (#("age." 0 4 (fontified t face font-lock-string-face)) . 730) (undo-tree-id2913 . -4)) (23730 17450 332517 562000) 0 nil]) ((1 . 1937) (#("use futures::{Future, Poll};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use tokio::prelude::*;

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Future for Receiver {
    type Item = Option<String>;
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(Some(
                    String::from_utf8_lossy(&buffer[..num_bytes_read]).to_string(),
                )));
            }
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
}
impl Future for Sender {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = \"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn create_connections() {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);

    let client = connection
        .and_then(|socket| {
            let (rx, tx) = socket.split();
            let sender = Sender { tx };
            tokio::spawn(sender.map_err(|e| println!(\"{}\", e)));
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)).and_then(|text| {
                println!(\"{}\", text.unwrap());
                Ok(())}));
            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));
    tokio::run(client);
}

fn main() {
    create_connections();
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-type-face) 26 29 (fontified t) 29 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 38 (fontified t face font-lock-constant-face) 38 40 (fontified t) 40 42 (fontified t face font-lock-constant-face) 42 45 (fontified t) 45 54 (fontified t face font-lock-type-face) 54 56 (fontified t) 56 66 (fontified t face font-lock-type-face) 66 68 (fontified t) 68 73 (fontified t face font-lock-type-face) 73 75 (fontified t) 75 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 94 (fontified t face font-lock-type-face) 94 97 (fontified t) 97 100 (fontified t face font-lock-keyword-face) 100 101 (fontified t) 101 106 (fontified t face font-lock-constant-face) 106 108 (fontified t) 108 111 (fontified t face font-lock-constant-face) 111 113 (fontified t) 113 122 (fontified t face font-lock-type-face) 122 124 (fontified t) 124 127 (fontified t face font-lock-keyword-face) 127 128 (fontified t) 128 133 (fontified t face font-lock-constant-face) 133 135 (fontified t) 135 142 (fontified t face font-lock-constant-face) 142 148 (fontified t) 148 154 (fontified t face font-lock-keyword-face) 154 155 (fontified t) 155 163 (fontified t face font-lock-type-face) 163 170 (fontified t) 170 172 (fontified t face font-lock-variable-name-face) 172 174 (fontified t) 174 182 (fontified t face font-lock-type-face) 182 183 (fontified t) 183 192 (fontified t face font-lock-type-face) 192 197 (fontified t) 197 201 (fontified t face font-lock-keyword-face) 201 202 (fontified t) 202 208 (fontified t face font-lock-type-face) 208 209 (fontified t) 209 212 (fontified t face font-lock-keyword-face) 212 213 (fontified t) 213 221 (fontified t face font-lock-type-face) 221 228 (fontified t) 228 232 (fontified t face font-lock-keyword-face) 232 233 (fontified t) 233 237 (fontified t face font-lock-type-face) 237 240 (fontified t) 240 246 (fontified t face font-lock-type-face) 246 247 (fontified t) 247 253 (fontified t face font-lock-type-face) 253 260 (fontified t) 260 264 (fontified t face font-lock-keyword-face) 264 265 (fontified t) 265 270 (fontified t face font-lock-type-face) 270 273 (fontified t) 273 278 (fontified t face font-lock-type-face) 278 285 (fontified t) 285 287 (fontified t face font-lock-keyword-face) 287 288 (fontified t) 288 292 (fontified t face font-lock-function-name-face) 292 294 (fontified t) 294 297 (fontified t face font-lock-keyword-face) 297 298 (fontified t) 298 302 (fontified t face font-lock-keyword-face) 302 305 (fontified t) 305 306 (fontified t syntax-table #1#) 306 307 (fontified t) 307 311 (fontified t face font-lock-type-face) 311 312 (fontified t) 312 316 (fontified t face font-lock-type-face) 316 318 (fontified t) 318 322 (fontified t face font-lock-type-face) 322 324 (fontified t) 324 328 (fontified t face font-lock-type-face) 328 330 (fontified t) 330 335 (fontified t face font-lock-type-face) 335 347 (fontified t) 347 350 (fontified t face font-lock-keyword-face) 350 351 (fontified t) 351 354 (fontified t face font-lock-keyword-face) 354 355 (fontified t) 355 361 (fontified t face font-lock-variable-name-face) 361 364 (fontified t) 364 368 (fontified t face font-lock-preprocessor-face) 368 381 (fontified t) 381 383 (fontified t face font-lock-comment-delimiter-face) 383 424 (fontified t face font-lock-comment-face) 424 466 (fontified t) 466 468 (fontified t face font-lock-comment-delimiter-face) 468 500 (fontified t face font-lock-comment-face) 500 522 (fontified t face font-lock-comment-face) 522 530 (fontified t) 530 535 (fontified t face font-lock-keyword-face) 535 536 (fontified t) 536 539 (fontified t face font-lock-keyword-face) 539 540 (fontified t) 540 545 (fontified t face font-lock-type-face) 545 547 (fontified t) 547 552 (fontified t face font-lock-type-face) 552 571 (fontified t) 571 575 (fontified t face font-lock-keyword-face) 575 590 (fontified t) 590 593 (fontified t face font-lock-keyword-face) 593 601 (fontified t) 601 602 (fontified t face rust-question-mark-face) 602 617 (fontified t) 617 619 (fontified t face font-lock-keyword-face) 619 658 (fontified t) 658 664 (fontified t face font-lock-keyword-face) 664 665 (fontified t) 665 667 (fontified t face font-lock-type-face) 667 668 (fontified t) 668 673 (fontified t face font-lock-type-face) 673 675 (fontified t) 675 680 (fontified t face font-lock-type-face) 680 681 (fontified t) 681 685 (fontified t face font-lock-type-face) 685 707 (fontified t) 707 713 (fontified t face font-lock-type-face) 713 792 (fontified t) 792 805 (fontified t) 805 824 (fontified t) 824 830 (fontified t face font-lock-keyword-face) 830 831 (fontified t) 831 833 (fontified t face font-lock-type-face) 833 834 (fontified t) 834 839 (fontified t face font-lock-type-face) 839 841 (fontified t) 841 849 (fontified t face font-lock-type-face) 849 861 (fontified t) 861 867 (fontified t face font-lock-keyword-face) 867 868 (fontified t) 868 874 (fontified t face font-lock-type-face) 874 881 (fontified t) 881 883 (fontified t face font-lock-variable-name-face) 883 885 (fontified t) 885 894 (fontified t face font-lock-type-face) 894 895 (fontified t) 895 904 (fontified t face font-lock-type-face) 904 909 (fontified t) 909 913 (fontified t face font-lock-keyword-face) 913 914 (fontified t) 914 920 (fontified t face font-lock-type-face) 920 921 (fontified t) 921 924 (fontified t face font-lock-keyword-face) 924 925 (fontified t) 925 931 (fontified t face font-lock-type-face) 931 938 (fontified t) 938 942 (fontified t face font-lock-keyword-face) 942 943 (fontified t) 943 947 (fontified t face font-lock-type-face) 947 954 (fontified t) 954 958 (fontified t) 958 962 (fontified t face font-lock-keyword-face) 962 963 (fontified t) 963 968 (fontified t face font-lock-type-face) 968 971 (fontified t) 971 976 (fontified t face font-lock-type-face) 976 978 (fontified t) 978 983 (fontified t) 983 985 (fontified t face font-lock-keyword-face) 985 986 (fontified t) 986 990 (fontified t face font-lock-function-name-face) 990 992 (fontified t) 992 995 (fontified t face font-lock-keyword-face) 995 996 (fontified t) 996 1000 (fontified t face font-lock-keyword-face) 1000 1003 (fontified t) 1003 1004 (fontified t syntax-table #1#) 1004 1005 (fontified t) 1005 1009 (fontified t face font-lock-type-face) 1009 1010 (fontified t) 1010 1014 (fontified t face font-lock-type-face) 1014 1016 (fontified t) 1016 1020 (fontified t face font-lock-type-face) 1020 1022 (fontified t) 1022 1026 (fontified t face font-lock-type-face) 1026 1028 (fontified t) 1028 1033 (fontified t face font-lock-type-face) 1033 1037 (fontified t) 1037 1045 (fontified t) 1045 1048 (fontified t face font-lock-keyword-face) 1048 1049 (fontified t) 1049 1052 (fontified t face font-lock-keyword-face) 1052 1053 (fontified t) 1053 1059 (fontified t face font-lock-variable-name-face) 1059 1062 (fontified t) 1062 1115 (fontified t face font-lock-string-face) 1115 1136 (fontified t) 1136 1140 (fontified t face font-lock-keyword-face) 1140 1156 (fontified t) 1156 1159 (fontified t face font-lock-keyword-face) 1159 1167 (fontified t) 1167 1168 (fontified t face rust-question-mark-face) 1168 1178 (fontified t) 1178 1184 (fontified t face font-lock-keyword-face) 1184 1185 (fontified t) 1185 1187 (fontified t face font-lock-type-face) 1187 1188 (fontified t) 1188 1193 (fontified t face font-lock-type-face) 1193 1195 (fontified t) 1195 1203 (fontified t face font-lock-type-face) 1203 1215 (fontified t) 1215 1217 (fontified t face font-lock-keyword-face) 1217 1218 (fontified t) 1218 1236 (fontified t face font-lock-function-name-face) 1236 1245 (fontified t) 1245 1248 (fontified t face font-lock-keyword-face) 1248 1249 (fontified t) 1249 1256 (fontified t face font-lock-variable-name-face) 1256 1259 (fontified t) 1259 1275 (fontified t face font-lock-string-face) 1275 1291 (fontified t) 1291 1305 (fontified t face font-lock-string-face) 1305 1316 (fontified t face font-lock-string-face) 1316 1319 (fontified t) 1319 1323 (fontified t) 1323 1326 (fontified t face font-lock-keyword-face) 1326 1327 (fontified t) 1327 1337 (fontified t face font-lock-variable-name-face) 1337 1340 (fontified t) 1340 1349 (fontified t face font-lock-type-face) 1349 1375 (fontified t) 1375 1378 (fontified t face font-lock-keyword-face) 1378 1379 (fontified t) 1379 1385 (fontified t face font-lock-variable-name-face) 1385 1440 (fontified t) 1440 1443 (fontified t face font-lock-keyword-face) 1443 1478 (fontified t) 1478 1483 (fontified t) 1483 1486 (fontified t face font-lock-keyword-face) 1486 1487 (fontified t) 1487 1493 (fontified t face font-lock-variable-name-face) 1493 1496 (fontified t) 1496 1502 (fontified t face font-lock-type-face) 1502 1511 (fontified t) 1511 1523 (fontified t) 1523 1528 (fontified t face font-lock-constant-face) 1528 1537 (fontified t) 1537 1555 (fontified t) 1555 1563 (fontified t face rust-builtin-formatting-macro-face) 1563 1564 (fontified t) 1564 1565 (fontified t face font-lock-string-face) 1565 1567 (fontified t face rust-string-interpolation-face) 1567 1568 (fontified t face font-lock-string-face) 1568 1576 (fontified t) 1576 1588 (fontified t) 1588 1591 (fontified t face font-lock-keyword-face) 1591 1592 (fontified t) 1592 1600 (fontified t face font-lock-variable-name-face) 1600 1603 (fontified t) 1603 1611 (fontified t face font-lock-type-face) 1611 1620 (fontified t) 1620 1632 (fontified t) 1632 1637 (fontified t face font-lock-constant-face) 1637 1666 (fontified t) 1666 1674 (fontified t face rust-builtin-formatting-macro-face) 1674 1675 (fontified t) 1675 1676 (fontified t face font-lock-string-face) 1676 1678 (fontified t face rust-string-interpolation-face) 1678 1679 (fontified t face font-lock-string-face) 1679 1694 (fontified t) 1694 1695 (fontified t) 1695 1699 (fontified t) 1699 1700 (fontified t) 1700 1701 (fontified t) 1701 1702 (fontified t) 1702 1703 (fontified t) 1703 1719 (fontified t) 1719 1720 (fontified t face rust-builtin-formatting-macro-face) 1720 1726 (fontified t face rust-builtin-formatting-macro-face) 1726 1727 (fontified t face rust-builtin-formatting-macro-face) 1727 1728 (fontified t) 1728 1729 (fontified t face font-lock-string-face) 1729 1730 (fontified t face rust-string-interpolation-face) 1730 1731 (fontified t face rust-string-interpolation-face) 1731 1732 (fontified t face font-lock-string-face) 1732 1733 (fontified t) 1733 1738 (fontified t) 1738 1743 (fontified t) 1743 1744 (fontified t) 1744 1745 (fontified t) 1745 1746 (fontified t) 1746 1747 (fontified t) 1747 1748 (fontified t) 1748 1749 (fontified t) 1749 1750 (fontified t) 1750 1766 (fontified t) 1766 1768 (fontified t face font-lock-type-face) 1768 1772 (fontified t) 1772 1773 (fontified t) 1773 1777 (fontified t) 1777 1789 (fontified t) 1789 1795 (fontified t face font-lock-keyword-face) 1795 1796 (fontified t) 1796 1798 (fontified t face font-lock-type-face) 1798 1804 (fontified t) 1804 1814 (fontified t) 1814 1836 (fontified t) 1836 1844 (fontified t face rust-builtin-formatting-macro-face) 1844 1845 (fontified t) 1845 1846 (fontified t face font-lock-string-face) 1846 1848 (fontified t face rust-string-interpolation-face) 1848 1849 (fontified t face font-lock-string-face) 1849 1860 (fontified t) 1860 1865 (fontified t face font-lock-constant-face) 1865 1883 (fontified t) 1883 1885 (fontified t face font-lock-keyword-face) 1885 1886 (fontified t) 1886 1890 (fontified t face font-lock-function-name-face) 1890 1923 (fontified t)) . 1) (undo-tree-id3924 . 176) (undo-tree-id3925 . -1734) (undo-tree-id3926 . -1733) (undo-tree-id3927 . -978) (undo-tree-id3928 . -1738) (undo-tree-id3929 . -1737) (undo-tree-id3930 . -978) (undo-tree-id3931 . -1725) (undo-tree-id3932 . -1726) (undo-tree-id3933 . -934) (undo-tree-id3934 . -1695) (undo-tree-id3935 . -1747) (undo-tree-id3936 . -1701) (undo-tree-id3937 . -978) (undo-tree-id3938 . -1620) (undo-tree-id3939 . -1702) (undo-tree-id3940 . -1701) (undo-tree-id3941 . -1719) (undo-tree-id3942 . -1701) (undo-tree-id3943 . -934) (undo-tree-id3944 . -1695) (undo-tree-id3945 . -1719) (undo-tree-id3946 . -934) (undo-tree-id3947 . -1695) (undo-tree-id3948 . -1695) (undo-tree-id3949 . -934) (undo-tree-id3950 . -1720) (undo-tree-id3951 . -1695) (undo-tree-id3952 . -934) (undo-tree-id3953 . -1748) (undo-tree-id3954 . -1720) (undo-tree-id3955 . -934) (undo-tree-id3956 . -1732) (undo-tree-id3957 . -1748) (undo-tree-id3958 . -934) (undo-tree-id3959 . -1747) (undo-tree-id3960 . -1732) (undo-tree-id3961 . -934)) ((1 . 1924) (#("use futures::{Future, Poll};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use tokio::prelude::*;

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Future for Receiver {
    type Item = Option<String>;
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(Some(
                    String::from_utf8_lossy(&buffer[..num_bytes_read]).to_string(),
                )));
            }
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
}
impl Future for Sender {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = \"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn create_connections() {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);

    let client = connection
        .and_then(|socket| {
            let (rx, tx) = socket.split();
            let sender = Sender { tx };
            tokio::spawn(sender.map_err(|e| println!(\"{}\", e)));
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)).and_then(|text| {
                println!(\"{}\", text.unwrap());
                Ok(())
            }));
            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));
    tokio::run(client);
}

fn main() {
    create_connections();
}
" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil) 4 11 (fontified nil face font-lock-constant-face) 11 14 (fontified nil) 14 20 (fontified nil face font-lock-type-face) 20 22 (fontified nil) 22 26 (fontified nil face font-lock-type-face) 26 29 (fontified nil) 29 32 (fontified nil face font-lock-keyword-face) 32 33 (fontified nil) 33 38 (fontified nil face font-lock-constant-face) 38 40 (fontified nil) 40 42 (fontified nil face font-lock-constant-face) 42 45 (fontified nil) 45 54 (fontified nil face font-lock-type-face) 54 56 (fontified nil) 56 66 (fontified nil face font-lock-type-face) 66 68 (fontified nil) 68 73 (fontified nil face font-lock-type-face) 73 75 (fontified nil) 75 83 (fontified nil face font-lock-type-face) 83 85 (fontified nil) 85 94 (fontified nil face font-lock-type-face) 94 97 (fontified nil) 97 100 (fontified nil face font-lock-keyword-face) 100 101 (fontified nil) 101 106 (fontified nil face font-lock-constant-face) 106 108 (fontified nil) 108 111 (fontified nil face font-lock-constant-face) 111 113 (fontified nil) 113 122 (fontified nil face font-lock-type-face) 122 124 (fontified nil) 124 127 (fontified nil face font-lock-keyword-face) 127 128 (fontified nil) 128 133 (fontified nil face font-lock-constant-face) 133 135 (fontified nil) 135 142 (fontified nil face font-lock-constant-face) 142 148 (fontified nil) 148 154 (fontified nil face font-lock-keyword-face) 154 155 (fontified nil) 155 163 (fontified nil face font-lock-type-face) 163 170 (fontified nil) 170 172 (fontified nil face font-lock-variable-name-face) 172 174 (fontified nil) 174 182 (fontified nil face font-lock-type-face) 182 183 (fontified nil) 183 192 (fontified nil face font-lock-type-face) 192 197 (fontified nil) 197 201 (fontified nil face font-lock-keyword-face) 201 202 (fontified nil) 202 208 (fontified nil face font-lock-type-face) 208 209 (fontified nil) 209 212 (fontified nil face font-lock-keyword-face) 212 213 (fontified nil) 213 221 (fontified nil face font-lock-type-face) 221 228 (fontified nil) 228 232 (fontified nil face font-lock-keyword-face) 232 233 (fontified nil) 233 237 (fontified nil face font-lock-type-face) 237 240 (fontified nil) 240 246 (fontified nil face font-lock-type-face) 246 247 (fontified nil) 247 253 (fontified nil face font-lock-type-face) 253 256 (fontified nil) 256 260 (fontified t) 260 264 (fontified t face font-lock-keyword-face) 264 265 (fontified t) 265 270 (fontified t face font-lock-type-face) 270 273 (fontified t) 273 278 (fontified t face font-lock-type-face) 278 285 (fontified t) 285 287 (fontified t face font-lock-keyword-face) 287 288 (fontified t) 288 292 (fontified t face font-lock-function-name-face) 292 294 (fontified t) 294 297 (fontified t face font-lock-keyword-face) 297 298 (fontified t) 298 302 (fontified t face font-lock-keyword-face) 302 305 (fontified t) 305 306 (fontified t syntax-table #1#) 306 307 (fontified t) 307 311 (fontified t face font-lock-type-face) 311 312 (fontified t) 312 316 (fontified t face font-lock-type-face) 316 318 (fontified t) 318 322 (fontified t face font-lock-type-face) 322 324 (fontified t) 324 328 (fontified t face font-lock-type-face) 328 330 (fontified t) 330 335 (fontified t face font-lock-type-face) 335 347 (fontified t) 347 350 (fontified t face font-lock-keyword-face) 350 351 (fontified t) 351 354 (fontified t face font-lock-keyword-face) 354 355 (fontified t) 355 361 (fontified t face font-lock-variable-name-face) 361 364 (fontified t) 364 368 (fontified t face font-lock-preprocessor-face) 368 381 (fontified t) 381 383 (fontified t face font-lock-comment-delimiter-face) 383 424 (fontified t face font-lock-comment-face) 424 466 (fontified t) 466 468 (fontified t face font-lock-comment-delimiter-face) 468 500 (fontified t face font-lock-comment-face) 500 522 (fontified t face font-lock-comment-face) 522 530 (fontified t) 530 535 (fontified t face font-lock-keyword-face) 535 536 (fontified t) 536 539 (fontified t face font-lock-keyword-face) 539 540 (fontified t) 540 545 (fontified t face font-lock-type-face) 545 547 (fontified t) 547 552 (fontified t face font-lock-type-face) 552 571 (fontified t) 571 575 (fontified t face font-lock-keyword-face) 575 590 (fontified t) 590 593 (fontified t face font-lock-keyword-face) 593 601 (fontified t) 601 602 (fontified t face rust-question-mark-face) 602 617 (fontified t) 617 619 (fontified t face font-lock-keyword-face) 619 658 (fontified t) 658 664 (fontified t face font-lock-keyword-face) 664 665 (fontified t) 665 667 (fontified t face font-lock-type-face) 667 668 (fontified t) 668 673 (fontified t face font-lock-type-face) 673 675 (fontified t) 675 680 (fontified t face font-lock-type-face) 680 681 (fontified t) 681 685 (fontified t face font-lock-type-face) 685 687 (fontified t) 687 707 (fontified t) 707 713 (fontified t face font-lock-type-face) 713 757 (fontified t) 757 771 (fontified t) 771 779 (fontified t) 779 791 (fontified t) 791 792 (fontified t) 792 824 (fontified t) 824 830 (fontified t face font-lock-keyword-face) 830 831 (fontified t) 831 833 (fontified t face font-lock-type-face) 833 834 (fontified t) 834 839 (fontified t face font-lock-type-face) 839 841 (fontified t) 841 849 (fontified t face font-lock-type-face) 849 861 (fontified t) 861 867 (fontified t face font-lock-keyword-face) 867 868 (fontified t) 868 874 (fontified t face font-lock-type-face) 874 881 (fontified t) 881 883 (fontified t face font-lock-variable-name-face) 883 885 (fontified t) 885 894 (fontified t face font-lock-type-face) 894 895 (fontified t) 895 904 (fontified t face font-lock-type-face) 904 905 (fontified t) 905 909 (fontified t) 909 913 (fontified t face font-lock-keyword-face) 913 914 (fontified t) 914 920 (fontified t face font-lock-type-face) 920 921 (fontified t) 921 924 (fontified t face font-lock-keyword-face) 924 925 (fontified t) 925 931 (fontified t face font-lock-type-face) 931 938 (fontified t) 938 942 (fontified t face font-lock-keyword-face) 942 943 (fontified t) 943 947 (fontified t face font-lock-type-face) 947 958 (fontified t) 958 962 (fontified t face font-lock-keyword-face) 962 963 (fontified t) 963 968 (fontified t face font-lock-type-face) 968 971 (fontified t) 971 976 (fontified t face font-lock-type-face) 976 979 (fontified t) 979 983 (fontified t) 983 985 (fontified t face font-lock-keyword-face) 985 986 (fontified t) 986 990 (fontified t face font-lock-function-name-face) 990 992 (fontified t) 992 995 (fontified t face font-lock-keyword-face) 995 996 (fontified t) 996 1000 (fontified t face font-lock-keyword-face) 1000 1003 (fontified t) 1003 1004 (fontified t syntax-table #1#) 1004 1005 (fontified t) 1005 1009 (fontified t face font-lock-type-face) 1009 1010 (fontified t) 1010 1014 (fontified t face font-lock-type-face) 1014 1016 (fontified t) 1016 1020 (fontified t face font-lock-type-face) 1020 1022 (fontified t) 1022 1026 (fontified t face font-lock-type-face) 1026 1028 (fontified t) 1028 1033 (fontified t face font-lock-type-face) 1033 1034 (fontified t) 1034 1036 (fontified t) 1036 1045 (fontified t) 1045 1048 (fontified t face font-lock-keyword-face) 1048 1049 (fontified t) 1049 1052 (fontified t face font-lock-keyword-face) 1052 1053 (fontified t) 1053 1059 (fontified t face font-lock-variable-name-face) 1059 1062 (fontified t) 1062 1115 (fontified t face font-lock-string-face) 1115 1136 (fontified t) 1136 1140 (fontified t face font-lock-keyword-face) 1140 1156 (fontified t) 1156 1159 (fontified t face font-lock-keyword-face) 1159 1167 (fontified t) 1167 1168 (fontified t face rust-question-mark-face) 1168 1178 (fontified t) 1178 1184 (fontified t face font-lock-keyword-face) 1184 1185 (fontified t) 1185 1187 (fontified t face font-lock-type-face) 1187 1188 (fontified t) 1188 1193 (fontified t face font-lock-type-face) 1193 1195 (fontified t) 1195 1203 (fontified t face font-lock-type-face) 1203 1215 (fontified t) 1215 1217 (fontified t face font-lock-keyword-face) 1217 1218 (fontified t) 1218 1222 (fontified t face font-lock-function-name-face) 1222 1236 (fontified t face font-lock-function-name-face) 1236 1241 (fontified t) 1241 1245 (fontified t) 1245 1248 (fontified t face font-lock-keyword-face) 1248 1249 (fontified t) 1249 1256 (fontified t face font-lock-variable-name-face) 1256 1259 (fontified t) 1259 1271 (fontified t face font-lock-string-face) 1271 1275 (fontified t face font-lock-string-face) 1275 1291 (fontified t) 1291 1292 (fontified t face font-lock-string-face) 1292 1316 (fontified t face font-lock-string-face) 1316 1319 (fontified t) 1319 1323 (fontified t) 1323 1326 (fontified t face font-lock-keyword-face) 1326 1327 (fontified t) 1327 1337 (fontified t face font-lock-variable-name-face) 1337 1340 (fontified t) 1340 1349 (fontified t face font-lock-type-face) 1349 1375 (fontified t) 1375 1378 (fontified t face font-lock-keyword-face) 1378 1379 (fontified t) 1379 1385 (fontified t face font-lock-variable-name-face) 1385 1440 (fontified t) 1440 1443 (fontified t face font-lock-keyword-face) 1443 1479 (fontified t) 1479 1483 (fontified t) 1483 1486 (fontified t face font-lock-keyword-face) 1486 1487 (fontified t) 1487 1493 (fontified t face font-lock-variable-name-face) 1493 1496 (fontified t) 1496 1502 (fontified t face font-lock-type-face) 1502 1511 (fontified t) 1511 1523 (fontified t) 1523 1528 (fontified t face font-lock-constant-face) 1528 1536 (fontified t) 1536 1555 (fontified t) 1555 1563 (fontified t face rust-builtin-formatting-macro-face) 1563 1564 (fontified t) 1564 1565 (fontified t face font-lock-string-face) 1565 1567 (fontified t face rust-string-interpolation-face) 1567 1568 (fontified t face font-lock-string-face) 1568 1576 (fontified t) 1576 1588 (fontified t) 1588 1591 (fontified t face font-lock-keyword-face) 1591 1592 (fontified t) 1592 1600 (fontified t face font-lock-variable-name-face) 1600 1603 (fontified t) 1603 1611 (fontified t face font-lock-type-face) 1611 1632 (fontified t) 1632 1637 (fontified t face font-lock-constant-face) 1637 1666 (fontified t) 1666 1674 (fontified t face rust-builtin-formatting-macro-face) 1674 1675 (fontified t) 1675 1676 (fontified t face font-lock-string-face) 1676 1678 (fontified t face rust-string-interpolation-face) 1678 1679 (fontified t face font-lock-string-face) 1679 1703 (fontified t) 1703 1719 (fontified t) 1719 1727 (fontified t face rust-builtin-formatting-macro-face) 1727 1728 (fontified t) 1728 1729 (fontified t face font-lock-string-face) 1729 1731 (fontified t face rust-string-interpolation-face) 1731 1732 (fontified t face font-lock-string-face) 1732 1741 (fontified t) 1741 1749 (fontified t) 1749 1750 (fontified t) 1750 1766 (fontified nil) 1766 1768 (fontified nil face font-lock-type-face) 1768 1802 (fontified nil) 1802 1808 (fontified nil face font-lock-keyword-face) 1808 1809 (fontified nil) 1809 1811 (fontified nil face font-lock-type-face) 1811 1819 (fontified nil) 1819 1828 (fontified nil) 1828 1849 (fontified nil) 1849 1857 (face rust-builtin-formatting-macro-face fontified nil) 1857 1858 (fontified nil) 1858 1859 (face font-lock-string-face fontified nil) 1859 1861 (face rust-string-interpolation-face fontified nil) 1861 1862 (face font-lock-string-face fontified nil) 1862 1873 (fontified nil) 1873 1878 (face font-lock-constant-face fontified nil) 1878 1896 (fontified nil) 1896 1898 (face font-lock-keyword-face fontified nil) 1898 1899 (fontified nil) 1899 1903 (face font-lock-function-name-face fontified nil) 1903 1936 (fontified nil)) . 1) (undo-tree-id2914 . 1145) (undo-tree-id2915 . -791) (undo-tree-id2916 . -791) (undo-tree-id2917 . -791) (undo-tree-id2918 . -707) (undo-tree-id2919 . 1179) (undo-tree-id2920 . -707) (undo-tree-id2921 . -756) (undo-tree-id2922 . -707) (undo-tree-id2923 . -791) (undo-tree-id2924 . -791) (undo-tree-id2925 . -256) (undo-tree-id2926 . -707) (undo-tree-id2927 . -756) (undo-tree-id2929 . -790) (undo-tree-id2931 . -1062) (undo-tree-id2933 . -730) (undo-tree-id2935 . 1206) (undo-tree-id2937 . 1205) (undo-tree-id2939 . 1180)) (23730 17450 281381 757000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 1748) (1747 . 1748) (1746 . 1748) (#("(" 0 1 (fontified nil)) . 1746) (1745 . 1747) (#("[]" 0 1 (fontified nil) 1 2 (fontified nil)) . 1745) (1745 . 1747) (#("[" 0 1 (fontified nil)) . 1745) (1744 . 1746) (#("q" 0 1 (fontified nil)) . 1744) (1739 . 1745)) ((#(".unwrq" 0 5 (fontified nil) 5 6 (fontified nil)) . 1739) (undo-tree-id2941 . -5) (1744 . 1745) (#("a[" 0 1 (fontified nil) 1 2 (fontified nil)) . 1744) (1745 . 1746) (#("[]" 0 1 (fontified nil) 1 2 (fontified nil)) . 1745) (1745 . 1747) (#("p(" 0 1 (fontified nil) 1 2 (fontified nil)) . 1745) (1746 . 1747) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 1746) (#(")" 0 1 (fontified nil)) . 1747) (1748 . 1749)) (23730 17450 255400 270000) 0 nil]) ((1733 . 1734)) ((#("," 0 1 (fontified t)) . 1733) (undo-tree-id2942 . -1) (undo-tree-id2944 . -1)) (23730 17450 214053 544000) 0 nil]) ((1739 . 1740) (#(")" 0 1 (fontified nil)) . 1739) (1733 . 1739) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 1733) (1732 . 1733) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 1732) (1731 . 1732) (1730 . 1732) (#("{" 0 1 (fontified nil face font-lock-string-face)) . 1730) (1730 . 1731) (1729 . 1731) (#("\"" 0 1 (fontified nil)) . 1729) (1729 . 1730) (1728 . 1730) (#("(" 0 1 (fontified nil)) . 1728) (1727 . 1729)) ((#("!(" 0 1 (fontified nil face rust-builtin-formatting-macro-face) 1 2 (fontified nil)) . 1727) (undo-tree-id2946 . -1) (undo-tree-id2947 . -1) (undo-tree-id2948 . -1) (undo-tree-id2949 . -1) (undo-tree-id2950 . -1) (undo-tree-id2951 . -1) (undo-tree-id2953 . -1) (undo-tree-id2955 . -1) (undo-tree-id2957 . -1) (undo-tree-id2959 . -1) (undo-tree-id2961 . -1) (undo-tree-id2963 . -1) (undo-tree-id2965 . -1) (undo-tree-id2967 . -1) (undo-tree-id2969 . -1) (1728 . 1729) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 1728) (undo-tree-id2970 . 1) (undo-tree-id2971 . -1) (undo-tree-id2972 . -1) (undo-tree-id2973 . -1) (undo-tree-id2974 . -1) (undo-tree-id2975 . -1) (undo-tree-id2976 . -1) (undo-tree-id2978 . -1) (undo-tree-id2980 . -1) (undo-tree-id2982 . -1) (undo-tree-id2984 . -1) (undo-tree-id2986 . -1) (undo-tree-id2988 . 1) (undo-tree-id2990 . 1) (undo-tree-id2992 . 1) (#("\"" 0 1 (fontified nil)) . 1729) (undo-tree-id2995 . 1) (1729 . 1730) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 1729) (undo-tree-id2997 . -1) (undo-tree-id2998 . -1) (undo-tree-id2999 . -1) (undo-tree-id3000 . -1) (undo-tree-id3001 . -1) (undo-tree-id3002 . -1) (undo-tree-id3004 . -1) (undo-tree-id3006 . -1) (undo-tree-id3008 . -1) (undo-tree-id3010 . -1) (undo-tree-id3012 . -1) (undo-tree-id3014 . -1) (undo-tree-id3016 . -1) (undo-tree-id3018 . -1) (#("{" 0 1 (fontified nil face font-lock-string-face)) . 1730) (undo-tree-id3020 . 1) (1730 . 1731) (#("{}" 0 1 (fontified nil face rust-string-interpolation-face) 1 2 (fontified nil face rust-string-interpolation-face)) . 1730) (undo-tree-id3021 . -1) (undo-tree-id3022 . -1) (undo-tree-id3023 . -1) (undo-tree-id3024 . -1) (undo-tree-id3025 . -1) (undo-tree-id3026 . -1) (undo-tree-id3028 . -1) (undo-tree-id3030 . -1) (undo-tree-id3032 . -1) (undo-tree-id3034 . -1) (undo-tree-id3036 . -1) (undo-tree-id3038 . -1) (undo-tree-id3040 . -1) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 1731) (undo-tree-id3041 . -1) (undo-tree-id3042 . -1) (undo-tree-id3043 . -1) (undo-tree-id3044 . -1) (undo-tree-id3045 . -1) (undo-tree-id3046 . -1) (undo-tree-id3048 . -1) (undo-tree-id3050 . -1) (undo-tree-id3052 . -1) (undo-tree-id3054 . -1) (undo-tree-id3056 . -1) (undo-tree-id3058 . -1) (1732 . 1733) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 1732) (undo-tree-id3059 . -1) (undo-tree-id3060 . -1) (undo-tree-id3061 . -1) (undo-tree-id3062 . -1) (undo-tree-id3063 . -1) (undo-tree-id3064 . -1) (undo-tree-id3066 . -1) (undo-tree-id3068 . -1) (undo-tree-id3070 . -1) (undo-tree-id3072 . -1) (undo-tree-id3074 . 1) (1733 . 1734) (#(" text)" 0 5 (fontified nil) 5 6 (fontified nil)) . 1733) (undo-tree-id3076 . 1) (undo-tree-id3077 . -1) (undo-tree-id3078 . -5) (undo-tree-id3079 . -4) (undo-tree-id3080 . -5) (undo-tree-id3082 . -1) (undo-tree-id3084 . -1) (undo-tree-id3086 . -5) (1739 . 1740) (#(";" 0 1 (fontified t)) . 1739)) (23730 17450 208699 512000) 0 nil]) ((1721 . 1727)) ((#("rintln" 0 6 (fontified t)) . 1721) (undo-tree-id3087 . -6) (undo-tree-id3088 . -6) (undo-tree-id3089 . -6) (undo-tree-id3090 . -6) (undo-tree-id3091 . -5) (undo-tree-id3093 . -5) (undo-tree-id3094 . -6) (undo-tree-id3096 . -6) (undo-tree-id3097 . -5) (undo-tree-id3099 . -5)) (23730 17450 123277 595000) 0 nil]) ((1696 . 1700)) ((#("text" 0 4 (fontified t)) . 1696)) (23730 17450 79031 307000) 0 nil]) ((#("_" 0 1 (fontified t)) . 1696)) ((1696 . 1697)) (23730 17450 38909 195000) 0 nil] [nil nil ((#("_|" 0 2 (fontified t)) . 1696)) ((1696 . 1698)) (23730 17240 461985 181000) 0 nil] [nil nil ((#("|_|" 0 3 (fontified t)) . 1695) (undo-tree-id2593 . -1) (undo-tree-id2594 . -1) 1696) ((1695 . 1698)) (23730 17238 67772 891000) 0 nil] [nil nil ((#("|_|" 0 3 (fontified t)) . 1695) (undo-tree-id2591 . -1) (undo-tree-id2592 . -1) 1696) ((1695 . 1698)) (23730 17230 753119 414000) 0 nil]) ((1701 . 1718) (1701 . 1702)) ((#("
" 0 1 (fontified nil)) . 1701) (undo-tree-id3100 . 1) (#("                " 0 16 (fontified nil)) . 1701) (undo-tree-id3101 . -16) (undo-tree-id3102 . -16) (undo-tree-id3103 . -16) (undo-tree-id3104 . -16) (undo-tree-id3106 . -16) (undo-tree-id3107 . -16) (undo-tree-id3109 . -16) (undo-tree-id3111 . -16) (undo-tree-id3113 . -16) (undo-tree-id3115 . -16) (undo-tree-id3117 . -16) (undo-tree-id3119 . -16) (undo-tree-id3121 . -16) (undo-tree-id3123 . -16) (undo-tree-id3125 . -16) (undo-tree-id3127 . -16) (undo-tree-id3129 . -16) (undo-tree-id3131 . -16) (undo-tree-id3133 . -16) (undo-tree-id3135 . -16) (undo-tree-id3137 . -16) (undo-tree-id3139 . -16) (undo-tree-id3141 . -16) (undo-tree-id3143 . -16) (undo-tree-id3145 . -16) (#("p" 0 1 (fontified t)) . 1717) (undo-tree-id3147 . -1) (undo-tree-id3148 . -1) (undo-tree-id3149 . -1) (undo-tree-id3150 . -1) (undo-tree-id3152 . -1) (undo-tree-id3153 . -1) (undo-tree-id3155 . -1) (undo-tree-id3157 . -1) (undo-tree-id3159 . -1) (undo-tree-id3161 . -1) (undo-tree-id3163 . -1) (undo-tree-id3165 . -1) (undo-tree-id3167 . -1) (undo-tree-id3169 . -1)) (23730 17450 17980 386000) 0 nil]) ((1700 . 1717) (1706 . 1707) (#("}" 0 1 (fontified nil)) . 1702) (1702 . 1703) (#("}" 0 1 (fontified nil)) . 1700) (1699 . 1701) (#("{" 0 1 (fontified nil)) . 1699) (1699 . 1700)) ((#("{" 0 1 (fontified nil)) . 1699) (1699 . 1700) (#("{}" 0 1 (fontified nil) 1 2 (fontified nil)) . 1699) (undo-tree-id3171 . -1) (undo-tree-id3172 . -1) (undo-tree-id3173 . -1) (undo-tree-id3174 . -1) (undo-tree-id3176 . -1) (undo-tree-id3177 . -1) (undo-tree-id3178 . -1) (undo-tree-id3180 . -1) (undo-tree-id3182 . -1) (undo-tree-id3184 . -1) (undo-tree-id3186 . -1) (undo-tree-id3188 . -1) (undo-tree-id3190 . -1) (undo-tree-id3192 . -1) (undo-tree-id3194 . -1) (undo-tree-id3196 . -1) (undo-tree-id3198 . -1) (undo-tree-id3200 . -1) (undo-tree-id3202 . -1) (undo-tree-id3204 . -1) (undo-tree-id3206 . -1) (undo-tree-id3208 . -1) (undo-tree-id3210 . -1) (undo-tree-id3212 . -1) (undo-tree-id3214 . -1) (undo-tree-id3216 . -1) (undo-tree-id3218 . -1) (undo-tree-id3220 . -1) (undo-tree-id3222 . -1) (1700 . 1701) (#("}" 0 1 (fontified nil)) . 1702) (1702 . 1703) (#("}" 0 1 (fontified nil)) . 1706) (#("
                " 0 1 (fontified t) 1 17 (fontified t)) . 1700) (undo-tree-id3224 . 16) (undo-tree-id3225 . -1) (undo-tree-id3226 . -1) (undo-tree-id3227 . -1) (undo-tree-id3228 . -1) (undo-tree-id3230 . -1) (undo-tree-id3231 . -1) (undo-tree-id3232 . -1) (undo-tree-id3234 . -12) (undo-tree-id3236 . -11) (undo-tree-id3238 . -1) (undo-tree-id3240 . -1) (undo-tree-id3242 . -1) (undo-tree-id3244 . -1) (undo-tree-id3246 . -1) (undo-tree-id3248 . -1) (undo-tree-id3250 . -1) (undo-tree-id3252 . -1) (undo-tree-id3254 . -1) (undo-tree-id3256 . -1) (undo-tree-id3258 . -1) (undo-tree-id3260 . -1) (undo-tree-id3262 . -1) (undo-tree-id3264 . -1) (undo-tree-id3266 . -1) (undo-tree-id3268 . -1) (undo-tree-id3270 . -17) (undo-tree-id3272 . -1) (undo-tree-id3274 . -1) (undo-tree-id3276 . -1) (undo-tree-id3278 . -5) (undo-tree-id3280 . -17) (undo-tree-id3282 . -6) (undo-tree-id3284 . -17)) (23730 17450 4963 96000) 0 nil]) ((1 . 1855) (#("use futures::{Future, Poll};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use tokio::prelude::*;

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Future for Receiver {
    type Item = Option<String>;
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(
                    Some(String::from_utf8_lossy(&buffer[..num_bytes_read]).to_string()),
                ));
            }
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
}
impl Future for Sender {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = \"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn create_connections() {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);

    let client = connection
        .and_then(|socket| {
            let (rx, tx) = socket.split();
            let sender = Sender { tx };
            tokio::spawn(sender.map_err(|e| println!(\"{}\", e)));
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)).and_then(|_| Ok(())));
            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));
    tokio::run(client);
}

fn main() {
    create_connections();
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-type-face) 26 28 (fontified t) 28 29 (fontified t) 29 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 38 (fontified t face font-lock-constant-face) 38 40 (fontified t) 40 42 (fontified t face font-lock-constant-face) 42 45 (fontified t) 45 54 (fontified t face font-lock-type-face) 54 56 (fontified t) 56 66 (fontified t face font-lock-type-face) 66 68 (fontified t) 68 73 (fontified t face font-lock-type-face) 73 75 (fontified t) 75 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 94 (fontified t face font-lock-type-face) 94 97 (fontified t) 97 100 (fontified t face font-lock-keyword-face) 100 101 (fontified t) 101 106 (fontified t face font-lock-constant-face) 106 108 (fontified t) 108 111 (fontified t face font-lock-constant-face) 111 113 (fontified t) 113 122 (fontified t face font-lock-type-face) 122 124 (fontified t) 124 127 (fontified t face font-lock-keyword-face) 127 128 (fontified t) 128 133 (fontified t face font-lock-constant-face) 133 135 (fontified t) 135 142 (fontified t face font-lock-constant-face) 142 148 (fontified t) 148 154 (fontified t face font-lock-keyword-face) 154 155 (fontified t) 155 163 (fontified t face font-lock-type-face) 163 170 (fontified t) 170 172 (fontified t face font-lock-variable-name-face) 172 174 (fontified t) 174 182 (fontified t face font-lock-type-face) 182 183 (fontified t) 183 192 (fontified t face font-lock-type-face) 192 197 (fontified t) 197 201 (fontified t face font-lock-keyword-face) 201 202 (fontified t) 202 208 (fontified t face font-lock-type-face) 208 209 (fontified t) 209 212 (fontified t face font-lock-keyword-face) 212 213 (fontified t) 213 221 (fontified t face font-lock-type-face) 221 228 (fontified t) 228 232 (fontified t face font-lock-keyword-face) 232 233 (fontified t) 233 237 (fontified t face font-lock-type-face) 237 240 (fontified t) 240 246 (fontified t face font-lock-type-face) 246 247 (fontified t) 247 253 (fontified t face font-lock-type-face) 253 260 (fontified t) 260 264 (fontified t face font-lock-keyword-face) 264 265 (fontified t) 265 270 (fontified t face font-lock-type-face) 270 273 (fontified t) 273 278 (fontified t face font-lock-type-face) 278 285 (fontified t) 285 287 (fontified t face font-lock-keyword-face) 287 288 (fontified t) 288 292 (fontified t face font-lock-function-name-face) 292 294 (fontified t) 294 297 (fontified t face font-lock-keyword-face) 297 298 (fontified t) 298 302 (fontified t face font-lock-keyword-face) 302 305 (fontified t) 305 306 (fontified t syntax-table #1#) 306 307 (fontified t) 307 311 (fontified t face font-lock-type-face) 311 312 (fontified t) 312 316 (fontified t face font-lock-type-face) 316 318 (fontified t) 318 322 (fontified t face font-lock-type-face) 322 324 (fontified t) 324 328 (fontified t face font-lock-type-face) 328 330 (fontified t) 330 335 (fontified t face font-lock-type-face) 335 347 (fontified t) 347 350 (fontified t face font-lock-keyword-face) 350 351 (fontified t) 351 354 (fontified t face font-lock-keyword-face) 354 355 (fontified t) 355 361 (fontified t face font-lock-variable-name-face) 361 364 (fontified t) 364 368 (fontified t face font-lock-preprocessor-face) 368 381 (fontified t) 381 383 (fontified t face font-lock-comment-delimiter-face) 383 424 (fontified t face font-lock-comment-face) 424 466 (fontified t) 466 468 (fontified t face font-lock-comment-delimiter-face) 468 500 (fontified t face font-lock-comment-face) 500 522 (fontified t face font-lock-comment-face) 522 528 (fontified t) 528 530 (fontified t) 530 535 (fontified t face font-lock-keyword-face) 535 536 (fontified t) 536 539 (fontified t face font-lock-keyword-face) 539 540 (fontified t) 540 545 (fontified t face font-lock-type-face) 545 547 (fontified t) 547 552 (fontified t face font-lock-type-face) 552 571 (fontified t) 571 575 (fontified t face font-lock-keyword-face) 575 590 (fontified t) 590 593 (fontified t face font-lock-keyword-face) 593 601 (fontified t) 601 602 (fontified t face rust-question-mark-face) 602 605 (fontified t) 605 617 (fontified t) 617 619 (fontified t face font-lock-keyword-face) 619 642 (fontified t) 642 658 (fontified t) 658 664 (fontified t face font-lock-keyword-face) 664 665 (fontified t) 665 667 (fontified t face font-lock-type-face) 667 668 (fontified t) 668 673 (fontified t face font-lock-type-face) 673 675 (fontified t) 675 680 (fontified t face font-lock-type-face) 680 681 (fontified t) 681 682 (fontified t) 682 702 (fontified t) 702 704 (fontified t face font-lock-type-face) 704 706 (fontified t face font-lock-type-face) 706 707 (fontified t) 707 713 (fontified t face font-lock-type-face) 713 730 (fontified t) 730 757 (fontified t) 757 767 (fontified t) 767 769 (fontified t) 769 770 (fontified t) 770 772 (fontified t) 772 792 (fontified t) 792 824 (fontified t) 824 830 (fontified t face font-lock-keyword-face) 830 831 (fontified t) 831 833 (fontified t face font-lock-type-face) 833 834 (fontified t) 834 839 (fontified t face font-lock-type-face) 839 841 (fontified t) 841 849 (fontified t face font-lock-type-face) 849 861 (fontified t) 861 867 (fontified t face font-lock-keyword-face) 867 868 (fontified t) 868 874 (fontified t face font-lock-type-face) 874 881 (fontified t) 881 883 (fontified t face font-lock-variable-name-face) 883 885 (fontified t) 885 894 (fontified t face font-lock-type-face) 894 895 (fontified t) 895 904 (fontified t face font-lock-type-face) 904 909 (fontified t) 909 913 (fontified t face font-lock-keyword-face) 913 914 (fontified t) 914 920 (fontified t face font-lock-type-face) 920 921 (fontified t) 921 924 (fontified t face font-lock-keyword-face) 924 925 (fontified t) 925 931 (fontified t face font-lock-type-face) 931 938 (fontified t) 938 942 (fontified t face font-lock-keyword-face) 942 943 (fontified t) 943 947 (fontified t face font-lock-type-face) 947 958 (fontified t) 958 962 (fontified t face font-lock-keyword-face) 962 963 (fontified t) 963 968 (fontified t face font-lock-type-face) 968 971 (fontified t) 971 976 (fontified t face font-lock-type-face) 976 983 (fontified t) 983 985 (fontified t face font-lock-keyword-face) 985 986 (fontified t) 986 990 (fontified t face font-lock-function-name-face) 990 992 (fontified t) 992 995 (fontified t face font-lock-keyword-face) 995 996 (fontified t) 996 1000 (fontified t face font-lock-keyword-face) 1000 1003 (fontified t) 1003 1004 (fontified t syntax-table #1#) 1004 1005 (fontified t) 1005 1009 (fontified t face font-lock-type-face) 1009 1010 (fontified t) 1010 1014 (fontified t face font-lock-type-face) 1014 1016 (fontified t) 1016 1020 (fontified t face font-lock-type-face) 1020 1022 (fontified t) 1022 1026 (fontified t face font-lock-type-face) 1026 1028 (fontified t) 1028 1033 (fontified t face font-lock-type-face) 1033 1037 (fontified t) 1037 1045 (fontified t) 1045 1048 (fontified t face font-lock-keyword-face) 1048 1049 (fontified t) 1049 1052 (fontified t face font-lock-keyword-face) 1052 1053 (fontified t) 1053 1059 (fontified t face font-lock-variable-name-face) 1059 1062 (fontified t) 1062 1115 (fontified t face font-lock-string-face) 1115 1136 (fontified t) 1136 1140 (fontified t face font-lock-keyword-face) 1140 1148 (fontified t) 1148 1156 (fontified t) 1156 1159 (fontified t face font-lock-keyword-face) 1159 1167 (fontified t) 1167 1168 (fontified t face rust-question-mark-face) 1168 1170 (fontified t) 1170 1178 (fontified t) 1178 1184 (fontified t face font-lock-keyword-face) 1184 1185 (fontified t) 1185 1187 (fontified t face font-lock-type-face) 1187 1188 (fontified t) 1188 1193 (fontified t face font-lock-type-face) 1193 1195 (fontified t) 1195 1203 (fontified t face font-lock-type-face) 1203 1206 (fontified t) 1206 1215 (fontified t) 1215 1217 (fontified t face font-lock-keyword-face) 1217 1218 (fontified t) 1218 1236 (fontified t face font-lock-function-name-face) 1236 1245 (fontified t) 1245 1248 (fontified t face font-lock-keyword-face) 1248 1249 (fontified t) 1249 1256 (fontified t face font-lock-variable-name-face) 1256 1259 (fontified t) 1259 1272 (fontified t face font-lock-string-face) 1272 1275 (fontified t face font-lock-string-face) 1275 1291 (fontified t) 1291 1292 (fontified t face font-lock-string-face) 1292 1316 (fontified t face font-lock-string-face) 1316 1319 (fontified t) 1319 1323 (fontified t) 1323 1326 (fontified t face font-lock-keyword-face) 1326 1327 (fontified t) 1327 1337 (fontified t face font-lock-variable-name-face) 1337 1340 (fontified t) 1340 1349 (fontified t face font-lock-type-face) 1349 1375 (fontified t) 1375 1378 (fontified t face font-lock-keyword-face) 1378 1379 (fontified t) 1379 1385 (fontified t face font-lock-variable-name-face) 1385 1440 (fontified t) 1440 1443 (fontified t face font-lock-keyword-face) 1443 1483 (fontified t) 1483 1486 (fontified t face font-lock-keyword-face) 1486 1487 (fontified t) 1487 1493 (fontified t face font-lock-variable-name-face) 1493 1496 (fontified t) 1496 1502 (fontified t face font-lock-type-face) 1502 1523 (fontified t) 1523 1528 (fontified t face font-lock-constant-face) 1528 1537 (fontified t) 1537 1555 (fontified t) 1555 1563 (fontified t face rust-builtin-formatting-macro-face) 1563 1564 (fontified t) 1564 1565 (fontified t face font-lock-string-face) 1565 1567 (fontified t face rust-string-interpolation-face) 1567 1568 (fontified t face font-lock-string-face) 1568 1576 (fontified t) 1576 1588 (fontified t) 1588 1591 (fontified t face font-lock-keyword-face) 1591 1592 (fontified t) 1592 1600 (fontified t face font-lock-variable-name-face) 1600 1603 (fontified t) 1603 1611 (fontified t face font-lock-type-face) 1611 1620 (fontified t) 1620 1632 (fontified t) 1632 1637 (fontified t face font-lock-constant-face) 1637 1666 (fontified t) 1666 1670 (fontified t face rust-builtin-formatting-macro-face) 1670 1674 (fontified t face rust-builtin-formatting-macro-face) 1674 1675 (fontified t) 1675 1676 (fontified t face font-lock-string-face) 1676 1678 (fontified t face rust-string-interpolation-face) 1678 1679 (fontified t face font-lock-string-face) 1679 1684 (fontified t) 1684 1685 (fontified t) 1685 1693 (fontified t) 1693 1694 (fontified t) 1694 1698 (fontified t) 1698 1700 (fontified t face font-lock-type-face) 1700 1701 (fontified t) 1701 1702 (fontified t) 1702 1703 (fontified t) 1703 1704 (fontified t) 1704 1705 (fontified t) 1705 1708 (fontified t) 1708 1720 (fontified t) 1720 1726 (fontified t face font-lock-keyword-face) 1726 1727 (fontified t) 1727 1729 (fontified t face font-lock-type-face) 1729 1735 (fontified t) 1735 1767 (fontified t) 1767 1775 (fontified t face rust-builtin-formatting-macro-face) 1775 1776 (fontified t) 1776 1777 (fontified t face font-lock-string-face) 1777 1779 (fontified t face rust-string-interpolation-face) 1779 1780 (fontified t face font-lock-string-face) 1780 1791 (fontified t) 1791 1796 (fontified t face font-lock-constant-face) 1796 1814 (fontified t) 1814 1816 (fontified t face font-lock-keyword-face) 1816 1817 (fontified t) 1817 1819 (fontified t face font-lock-function-name-face) 1819 1821 (fontified t face font-lock-function-name-face) 1821 1826 (fontified t) 1826 1840 (fontified t) 1840 1852 (fontified t) 1852 1854 (fontified t)) . 1) (undo-tree-id3858 . 152) (undo-tree-id3859 . -1469) (undo-tree-id3860 . -702) (undo-tree-id3861 . -702) (undo-tree-id3862 . -704) (undo-tree-id3863 . -704) (undo-tree-id3864 . -707) (undo-tree-id3865 . -706) (undo-tree-id3866 . -1633) (undo-tree-id3867 . -1634) (undo-tree-id3868 . -806) (undo-tree-id3869 . -1633) (undo-tree-id3870 . -1633) (undo-tree-id3871 . -1633) (undo-tree-id3872 . -1469) (undo-tree-id3873 . -1469) (undo-tree-id3874 . -1635) (undo-tree-id3875 . -1634) (undo-tree-id3876 . -806) (undo-tree-id3877 . -1635) (undo-tree-id3878 . -1635) (undo-tree-id3879 . -806) (undo-tree-id3880 . -620) (undo-tree-id3881 . -537) (undo-tree-id3882 . -1591) (undo-tree-id3883 . -1526) (undo-tree-id3884 . -792) (undo-tree-id3885 . -1639) (undo-tree-id3886 . -1595) (undo-tree-id3887 . -792) (undo-tree-id3888 . -1683) (undo-tree-id3889 . -1682) (undo-tree-id3890 . -792) (undo-tree-id3891 . -1695) (undo-tree-id3892 . -1694) (undo-tree-id3893 . -792) (undo-tree-id3894 . -1701) (undo-tree-id3895 . -1701) (undo-tree-id3896 . -792) (undo-tree-id3897 . -1699) (undo-tree-id3898 . -1699) (undo-tree-id3899 . -792) (undo-tree-id3900 . -1698) (undo-tree-id3901 . -1699) (undo-tree-id3902 . -792) (undo-tree-id3903 . -1649) (undo-tree-id3904 . -1650) (undo-tree-id3905 . -792) (undo-tree-id3906 . -1744) (undo-tree-id3907 . -1733) (undo-tree-id3908 . -792) (undo-tree-id3909 . -934) (undo-tree-id3910 . -702) (undo-tree-id3911 . -1701) (undo-tree-id3912 . -702) (undo-tree-id3913 . -769) (undo-tree-id3914 . -1704) (undo-tree-id3915 . -769) (undo-tree-id3916 . -1620) (undo-tree-id3917 . -1704) (undo-tree-id3918 . -1698) (undo-tree-id3919 . -1704) (undo-tree-id3920 . -934) (undo-tree-id3921 . -1701) (undo-tree-id3922 . -1698) (undo-tree-id3923 . -934)) ((1 . 1855) (#("use futures::{Future, Poll};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use tokio::prelude::*;

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Future for Receiver {
    type Item = Option<String>;
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(Some(
                    String::from_utf8_lossy(&buffer[..num_bytes_read]).to_string(),
                )));
            }
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
}
impl Future for Sender {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = \"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn create_connections() {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);

    let client = connection
        .and_then(|socket| {
            let (rx, tx) = socket.split();
            let sender = Sender { tx };
            tokio::spawn(sender.map_err(|e| println!(\"{}\", e)));
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)).and_then(|_| Ok(())));
            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));
    tokio::run(client);
}

fn main() {
    create_connections();
}
" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil) 4 11 (fontified nil face font-lock-constant-face) 11 14 (fontified nil) 14 20 (fontified nil face font-lock-type-face) 20 22 (fontified nil) 22 26 (fontified nil face font-lock-type-face) 26 29 (fontified nil) 29 32 (fontified nil face font-lock-keyword-face) 32 33 (fontified nil) 33 38 (fontified nil face font-lock-constant-face) 38 40 (fontified nil) 40 42 (fontified nil face font-lock-constant-face) 42 45 (fontified nil) 45 54 (fontified nil face font-lock-type-face) 54 56 (fontified nil) 56 66 (fontified nil face font-lock-type-face) 66 68 (fontified nil) 68 73 (fontified nil face font-lock-type-face) 73 75 (fontified nil) 75 83 (fontified nil face font-lock-type-face) 83 85 (fontified nil) 85 94 (fontified nil face font-lock-type-face) 94 97 (fontified nil) 97 100 (fontified nil face font-lock-keyword-face) 100 101 (fontified nil) 101 106 (fontified nil face font-lock-constant-face) 106 108 (fontified nil) 108 111 (fontified nil face font-lock-constant-face) 111 113 (fontified nil) 113 122 (fontified nil face font-lock-type-face) 122 124 (fontified nil) 124 127 (fontified nil face font-lock-keyword-face) 127 128 (fontified nil) 128 133 (fontified nil face font-lock-constant-face) 133 135 (fontified nil) 135 142 (fontified nil face font-lock-constant-face) 142 148 (fontified nil) 148 154 (fontified nil face font-lock-keyword-face) 154 155 (fontified nil) 155 163 (fontified nil face font-lock-type-face) 163 170 (fontified nil) 170 172 (fontified nil face font-lock-variable-name-face) 172 174 (fontified nil) 174 182 (fontified nil face font-lock-type-face) 182 183 (fontified nil) 183 192 (fontified nil face font-lock-type-face) 192 197 (fontified nil) 197 201 (fontified nil face font-lock-keyword-face) 201 202 (fontified nil) 202 208 (fontified nil face font-lock-type-face) 208 209 (fontified nil) 209 212 (fontified nil face font-lock-keyword-face) 212 213 (fontified nil) 213 221 (fontified nil face font-lock-type-face) 221 228 (fontified nil) 228 232 (fontified nil face font-lock-keyword-face) 232 233 (fontified nil) 233 237 (fontified nil face font-lock-type-face) 237 240 (fontified nil) 240 246 (fontified nil face font-lock-type-face) 246 247 (fontified nil) 247 253 (fontified nil face font-lock-type-face) 253 260 (fontified nil) 260 264 (fontified nil face font-lock-keyword-face) 264 265 (fontified nil) 265 270 (fontified nil face font-lock-type-face) 270 273 (fontified nil) 273 278 (fontified nil face font-lock-type-face) 278 285 (fontified nil) 285 287 (fontified nil face font-lock-keyword-face) 287 288 (fontified nil) 288 292 (fontified nil face font-lock-function-name-face) 292 294 (fontified nil) 294 297 (fontified nil face font-lock-keyword-face) 297 298 (fontified nil) 298 302 (fontified nil face font-lock-keyword-face) 302 305 (fontified nil) 305 306 (fontified nil syntax-table #1#) 306 307 (fontified nil) 307 311 (fontified nil face font-lock-type-face) 311 312 (fontified nil) 312 316 (fontified nil face font-lock-type-face) 316 318 (fontified nil) 318 322 (fontified nil face font-lock-type-face) 322 324 (fontified nil) 324 328 (fontified nil face font-lock-type-face) 328 330 (fontified nil) 330 335 (fontified nil face font-lock-type-face) 335 347 (fontified nil) 347 350 (fontified nil face font-lock-keyword-face) 350 351 (fontified nil) 351 354 (fontified nil face font-lock-keyword-face) 354 355 (fontified nil) 355 361 (fontified nil face font-lock-variable-name-face) 361 364 (fontified nil) 364 368 (fontified nil face font-lock-preprocessor-face) 368 381 (fontified nil) 381 383 (fontified nil face font-lock-comment-delimiter-face) 383 424 (fontified nil face font-lock-comment-face) 424 466 (fontified nil) 466 468 (fontified nil face font-lock-comment-delimiter-face) 468 500 (fontified nil face font-lock-comment-face) 500 522 (fontified nil face font-lock-comment-face) 522 530 (fontified nil) 530 535 (fontified nil face font-lock-keyword-face) 535 536 (fontified nil) 536 539 (fontified nil face font-lock-keyword-face) 539 540 (fontified nil) 540 545 (fontified nil face font-lock-type-face) 545 547 (fontified nil) 547 552 (fontified nil face font-lock-type-face) 552 571 (fontified nil) 571 575 (fontified nil face font-lock-keyword-face) 575 590 (fontified nil) 590 593 (fontified nil face font-lock-keyword-face) 593 601 (fontified nil) 601 602 (fontified nil face rust-question-mark-face) 602 617 (fontified nil) 617 619 (fontified nil face font-lock-keyword-face) 619 658 (fontified nil) 658 664 (fontified nil face font-lock-keyword-face) 664 665 (fontified nil) 665 667 (fontified nil face font-lock-type-face) 667 668 (fontified nil) 668 673 (fontified nil face font-lock-type-face) 673 675 (fontified nil) 675 680 (fontified nil face font-lock-type-face) 680 681 (fontified nil) 681 685 (fontified nil face font-lock-type-face) 685 707 (fontified nil) 707 713 (fontified nil face font-lock-type-face) 713 792 (fontified nil) 792 805 (fontified nil) 805 824 (fontified nil) 824 830 (face font-lock-keyword-face fontified nil) 830 831 (fontified nil) 831 833 (face font-lock-type-face fontified nil) 833 834 (fontified nil) 834 839 (face font-lock-type-face fontified nil) 839 841 (fontified nil) 841 849 (face font-lock-type-face fontified nil) 849 861 (fontified nil) 861 867 (face font-lock-keyword-face fontified nil) 867 868 (fontified nil) 868 874 (face font-lock-type-face fontified nil) 874 881 (fontified nil) 881 883 (face font-lock-variable-name-face fontified nil) 883 885 (fontified nil) 885 894 (face font-lock-type-face fontified nil) 894 895 (fontified nil) 895 904 (face font-lock-type-face fontified nil) 904 909 (fontified nil) 909 913 (face font-lock-keyword-face fontified nil) 913 914 (fontified nil) 914 920 (face font-lock-type-face fontified nil) 920 921 (fontified nil) 921 924 (face font-lock-keyword-face fontified nil) 924 925 (fontified nil) 925 931 (face font-lock-type-face fontified nil) 931 938 (fontified nil) 938 942 (face font-lock-keyword-face fontified nil) 942 943 (fontified nil) 943 947 (face font-lock-type-face fontified nil) 947 954 (fontified nil) 954 958 (fontified nil) 958 962 (fontified nil face font-lock-keyword-face) 962 963 (fontified nil) 963 968 (fontified nil face font-lock-type-face) 968 971 (fontified nil) 971 976 (fontified nil face font-lock-type-face) 976 978 (fontified nil) 978 983 (fontified t) 983 985 (fontified t face font-lock-keyword-face) 985 986 (fontified t) 986 990 (fontified t face font-lock-function-name-face) 990 992 (fontified t) 992 995 (fontified t face font-lock-keyword-face) 995 996 (fontified t) 996 1000 (fontified t face font-lock-keyword-face) 1000 1003 (fontified t) 1003 1004 (fontified t syntax-table #1#) 1004 1005 (fontified t) 1005 1009 (fontified t face font-lock-type-face) 1009 1010 (fontified t) 1010 1014 (fontified t face font-lock-type-face) 1014 1016 (fontified t) 1016 1020 (fontified t face font-lock-type-face) 1020 1022 (fontified t) 1022 1026 (fontified t face font-lock-type-face) 1026 1028 (fontified t) 1028 1033 (fontified t face font-lock-type-face) 1033 1045 (fontified t) 1045 1048 (fontified t face font-lock-keyword-face) 1048 1049 (fontified t) 1049 1052 (fontified t face font-lock-keyword-face) 1052 1053 (fontified t) 1053 1059 (fontified t face font-lock-variable-name-face) 1059 1062 (fontified t) 1062 1115 (fontified t face font-lock-string-face) 1115 1136 (fontified t) 1136 1140 (fontified t face font-lock-keyword-face) 1140 1156 (fontified t) 1156 1159 (fontified t face font-lock-keyword-face) 1159 1167 (fontified t) 1167 1168 (fontified t face rust-question-mark-face) 1168 1178 (fontified t) 1178 1184 (fontified t face font-lock-keyword-face) 1184 1185 (fontified t) 1185 1187 (fontified t face font-lock-type-face) 1187 1188 (fontified t) 1188 1193 (fontified t face font-lock-type-face) 1193 1195 (fontified t) 1195 1203 (fontified t face font-lock-type-face) 1203 1215 (fontified t) 1215 1217 (fontified t face font-lock-keyword-face) 1217 1218 (fontified t) 1218 1236 (fontified t face font-lock-function-name-face) 1236 1245 (fontified t) 1245 1248 (fontified t face font-lock-keyword-face) 1248 1249 (fontified t) 1249 1256 (fontified t face font-lock-variable-name-face) 1256 1259 (fontified t) 1259 1275 (fontified t face font-lock-string-face) 1275 1291 (fontified t) 1291 1305 (fontified t face font-lock-string-face) 1305 1316 (fontified t face font-lock-string-face) 1316 1319 (fontified t) 1319 1323 (fontified t) 1323 1326 (fontified t face font-lock-keyword-face) 1326 1327 (fontified t) 1327 1337 (fontified t face font-lock-variable-name-face) 1337 1340 (fontified t) 1340 1349 (fontified t face font-lock-type-face) 1349 1375 (fontified t) 1375 1378 (fontified t face font-lock-keyword-face) 1378 1379 (fontified t) 1379 1385 (fontified t face font-lock-variable-name-face) 1385 1440 (fontified t) 1440 1443 (fontified t face font-lock-keyword-face) 1443 1478 (fontified t) 1478 1483 (fontified t) 1483 1486 (fontified t face font-lock-keyword-face) 1486 1487 (fontified t) 1487 1493 (fontified t face font-lock-variable-name-face) 1493 1496 (fontified t) 1496 1502 (fontified t face font-lock-type-face) 1502 1511 (fontified t) 1511 1523 (fontified t) 1523 1528 (fontified t face font-lock-constant-face) 1528 1555 (fontified t) 1555 1563 (fontified t face rust-builtin-formatting-macro-face) 1563 1564 (fontified t) 1564 1565 (fontified t face font-lock-string-face) 1565 1567 (fontified t face rust-string-interpolation-face) 1567 1568 (fontified t face font-lock-string-face) 1568 1588 (fontified t) 1588 1591 (fontified t face font-lock-keyword-face) 1591 1592 (fontified t) 1592 1600 (fontified t face font-lock-variable-name-face) 1600 1603 (fontified t) 1603 1611 (fontified t face font-lock-type-face) 1611 1620 (fontified t) 1620 1632 (fontified t) 1632 1637 (fontified t face font-lock-constant-face) 1637 1666 (fontified t) 1666 1674 (fontified t face rust-builtin-formatting-macro-face) 1674 1675 (fontified t) 1675 1676 (fontified t face font-lock-string-face) 1676 1678 (fontified t face rust-string-interpolation-face) 1678 1679 (fontified t face font-lock-string-face) 1679 1694 (fontified t) 1694 1695 (fontified t) 1695 1696 (fontified t) 1696 1697 (fontified t) 1697 1698 (fontified t) 1698 1700 (fontified t face font-lock-type-face) 1700 1704 (fontified t) 1704 1708 (fontified t) 1708 1720 (fontified t) 1720 1726 (fontified t face font-lock-keyword-face) 1726 1727 (fontified t) 1727 1729 (fontified t face font-lock-type-face) 1729 1735 (fontified t) 1735 1745 (fontified t) 1745 1767 (fontified t) 1767 1775 (fontified t face rust-builtin-formatting-macro-face) 1775 1776 (fontified t) 1776 1777 (fontified t face font-lock-string-face) 1777 1779 (fontified t face rust-string-interpolation-face) 1779 1780 (fontified t face font-lock-string-face) 1780 1791 (fontified t) 1791 1796 (fontified t face font-lock-constant-face) 1796 1814 (fontified t) 1814 1816 (fontified t face font-lock-keyword-face) 1816 1817 (fontified t) 1817 1821 (fontified t face font-lock-function-name-face) 1821 1854 (fontified t)) . 1) (undo-tree-id3286 . 156) (undo-tree-id3287 . -1698) (undo-tree-id3288 . -1698) (undo-tree-id3289 . -978) (undo-tree-id3290 . -1698) (undo-tree-id3291 . -1698) (undo-tree-id3292 . -978) (undo-tree-id3294 . -1698) (undo-tree-id3295 . -1698) (undo-tree-id3296 . -1698) (undo-tree-id3297 . -978) (undo-tree-id3299 . -1698) (undo-tree-id3301 . -1698) (undo-tree-id3303 . -1698) (undo-tree-id3305 . -978) (undo-tree-id3307 . -1698) (undo-tree-id3309 . -978) (undo-tree-id3311 . -1698) (undo-tree-id3313 . -978) (undo-tree-id3315 . -1698) (undo-tree-id3317 . -1698) (undo-tree-id3319 . -1698) (undo-tree-id3321 . -978) (undo-tree-id3323 . -1698) (undo-tree-id3325 . -1698) (undo-tree-id3327 . -978) (undo-tree-id3329 . -1698) (undo-tree-id3331 . -1698) (undo-tree-id3333 . -978) (undo-tree-id3335 . -1698) (undo-tree-id3337 . -1695) (undo-tree-id3339 . -1698) (undo-tree-id3341 . -1695) (undo-tree-id3343 . -1698) (undo-tree-id3345 . -978) (undo-tree-id3347 . -1695) (undo-tree-id3349 . -978) (undo-tree-id3351 . -1698) (undo-tree-id3353 . -1695) (undo-tree-id3355 . -978) (undo-tree-id3357 . -1700) (undo-tree-id3359 . -1700) (undo-tree-id3361 . -1695) (undo-tree-id3363 . -1695) (undo-tree-id3365 . -1695) (undo-tree-id3367 . -1695) (undo-tree-id3369 . -1695) (undo-tree-id3371 . -978) (undo-tree-id3373 . -978) (undo-tree-id3374 . -1695) (undo-tree-id3375 . -1698) (undo-tree-id3377 . -1695) (undo-tree-id3379 . -1695) (undo-tree-id3381 . -978) (undo-tree-id3383 . -1695) (undo-tree-id3385 . -1698) (undo-tree-id3387 . -978) (undo-tree-id3389 . -1726) (undo-tree-id3391 . -1746) (undo-tree-id3393 . -1726) (undo-tree-id3395 . -1726) (undo-tree-id3397 . -1753) (undo-tree-id3399 . -1725)) (23730 17449 928009 276000) 0 nil]) ((1702 . 1704) (#("(" 0 1 (fontified nil)) . 1702) (1702 . 1703)) ((#("(" 0 1 (fontified nil)) . 1702) (1702 . 1703) (#("()" 0 1 (fontified t) 1 2 (fontified t)) . 1702) (undo-tree-id3400 . 1) (undo-tree-id3402 . -1) (undo-tree-id3404 . -1)) (23730 17449 883744 869000) 0 nil]) ((1699 . 1701)) ((#("Ok" 0 2 (fontified t face font-lock-type-face)) . 1699) (undo-tree-id3405 . -1) (undo-tree-id3406 . -1) (undo-tree-id3407 . -1) (undo-tree-id3409 . -2)) (23730 17449 838467 129000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 1701) (1700 . 1701) (1699 . 1701) (#("(" 0 1 (fontified nil)) . 1699) (1695 . 1700) (1694 . 1696) (#("(" 0 1 (fontified nil)) . 1694) (1686 . 1695) (#("a" 0 1 (fontified nil)) . 1686) (1685 . 1687)) ((#(".a" 0 1 (fontified nil) 1 2 (fontified nil)) . 1685) (undo-tree-id3411 . -1) (undo-tree-id3412 . -1) (undo-tree-id3413 . -1) (undo-tree-id3414 . -1) (undo-tree-id3415 . -1) (undo-tree-id3416 . -1) (undo-tree-id3417 . -1) (undo-tree-id3418 . -1) (undo-tree-id3419 . -1) (undo-tree-id3420 . -2) (undo-tree-id3422 . -1) (undo-tree-id3424 . -1) (undo-tree-id3426 . -1) (undo-tree-id3428 . -1) (undo-tree-id3430 . -1) (undo-tree-id3432 . -1) (undo-tree-id3434 . -1) (undo-tree-id3436 . -1) (undo-tree-id3438 . -1) (undo-tree-id3440 . -1) (undo-tree-id3442 . -1) (undo-tree-id3444 . -1) (undo-tree-id3446 . 1) (undo-tree-id3448 . 1) (undo-tree-id3450 . 1) (undo-tree-id3452 . -1) (1686 . 1687) (#("and_then" 0 8 (fontified nil)) . 1686) (undo-tree-id3454 . -8) (undo-tree-id3455 . -8) (undo-tree-id3456 . -8) (undo-tree-id3457 . -8) (undo-tree-id3458 . -8) (undo-tree-id3459 . -8) (undo-tree-id3460 . -8) (undo-tree-id3461 . -8) (undo-tree-id3462 . -8) (undo-tree-id3463 . -8) (undo-tree-id3465 . -8) (undo-tree-id3467 . -8) (undo-tree-id3469 . -8) (undo-tree-id3471 . -8) (undo-tree-id3473 . -8) (undo-tree-id3475 . -8) (undo-tree-id3477 . -8) (undo-tree-id3479 . -8) (undo-tree-id3481 . -8) (undo-tree-id3483 . -8) (undo-tree-id3485 . -8) (undo-tree-id3487 . -8) (undo-tree-id3489 . -8) (undo-tree-id3491 . -8) (undo-tree-id3493 . -8) (#("(" 0 1 (fontified nil)) . 1694) (undo-tree-id3495 . 1) (1694 . 1695) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 1694) (undo-tree-id3497 . 1) (undo-tree-id3498 . -1) (undo-tree-id3499 . -1) (undo-tree-id3500 . -1) (undo-tree-id3501 . -1) (undo-tree-id3502 . -1) (undo-tree-id3503 . -1) (undo-tree-id3504 . -1) (undo-tree-id3505 . -1) (undo-tree-id3506 . -1) (undo-tree-id3507 . -1) (undo-tree-id3509 . -1) (undo-tree-id3511 . -1) (undo-tree-id3513 . -1) (undo-tree-id3515 . -1) (undo-tree-id3517 . -1) (undo-tree-id3519 . -1) (undo-tree-id3521 . -1) (undo-tree-id3523 . -1) (undo-tree-id3525 . -1) (undo-tree-id3527 . -1) (undo-tree-id3529 . -1) (undo-tree-id3531 . -1) (undo-tree-id3533 . -1) (undo-tree-id3535 . -1) (undo-tree-id3537 . -1) (#("|_| " 0 4 (fontified nil)) . 1695) (undo-tree-id3538 . -1) (undo-tree-id3539 . -4) (undo-tree-id3540 . -4) (undo-tree-id3541 . -4) (undo-tree-id3542 . -4) (undo-tree-id3543 . -4) (undo-tree-id3544 . -4) (undo-tree-id3545 . -4) (undo-tree-id3546 . -4) (undo-tree-id3548 . -4) (undo-tree-id3550 . -4) (undo-tree-id3552 . -4) (undo-tree-id3554 . -4) (undo-tree-id3556 . -4) (undo-tree-id3558 . -4) (undo-tree-id3560 . -4) (undo-tree-id3562 . -4) (undo-tree-id3564 . -4) (undo-tree-id3566 . -4) (undo-tree-id3568 . -4) (undo-tree-id3570 . -4) (#("(" 0 1 (fontified nil)) . 1699) (undo-tree-id3572 . 1) (1699 . 1700) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 1699) (undo-tree-id3574 . 1) (undo-tree-id3575 . -1) (undo-tree-id3576 . -1) (undo-tree-id3578 . -1) (undo-tree-id3580 . -1) (undo-tree-id3582 . -1) (undo-tree-id3584 . -1) (undo-tree-id3586 . -1) (undo-tree-id3588 . -1) (undo-tree-id3590 . -1) (undo-tree-id3592 . -1) (undo-tree-id3594 . -1) (#(")" 0 1 (fontified nil)) . 1700) (undo-tree-id3595 . 1) (undo-tree-id3597 . -1) (undo-tree-id3599 . 1) (undo-tree-id3601 . -1) (1701 . 1702)) (23730 17449 813997 788000) 0 nil] [nil nil ((#(".to_string()" 0 10 (fontified t) 10 12 (fontified t)) . 758)) ((758 . 770)) (23730 16762 754414 481000) 0 nil]) ((770 . 771) (#(")" 0 1 (fontified nil)) . 768) (768 . 769) (#(")" 0 1 (fontified nil)) . 758) (758 . 759) (#(")" 0 1 (fontified nil)) . 731) (731 . 732) (#(")" 0 1 (fontified nil)) . 714) (714 . 715) (#(")" 0 1 (fontified nil)) . 708) (707 . 709) (#("(" 0 1 (fontified nil face font-lock-type-face)) . 707) (705 . 708) (#("nm" 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face)) . 705) (undo-tree-id3856 . -2) (undo-tree-id3857 . -1) (703 . 707)) ((#("Sonm" 0 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face) 3 4 (fontified nil face font-lock-type-face)) . 703) (undo-tree-id3602 . -4) (undo-tree-id3603 . -3) (undo-tree-id3604 . -2) (undo-tree-id3605 . -2) (705 . 707) (#("me(" 0 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face)) . 705) (undo-tree-id3606 . -2) (undo-tree-id3607 . -2) (707 . 708) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 707) (undo-tree-id3608 . -1) (708 . 709) (#(")" 0 1 (fontified nil)) . 714) (714 . 715) (#(")" 0 1 (fontified nil)) . 731) (731 . 732) (#(")" 0 1 (fontified nil)) . 758) (758 . 759) (#(")" 0 1 (fontified nil)) . 768) (768 . 769) (#(")" 0 1 (fontified nil)) . 770)) (23730 17449 778724 530000) 0 nil]) ((1 . 1828) (#("use futures::{Future, Poll};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use tokio::prelude::*;

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Future for Receiver {
    type Item = Option<String>;
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(String::from_utf8_lossy(&buffer[..num_bytes_read]).to_string()));
            }
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
}
impl Future for Sender {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = \"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn create_connections() {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);

    let client = connection
        .and_then(|socket| {
            let (rx, tx) = socket.split();
            let sender = Sender { tx };
            tokio::spawn(sender.map_err(|e| println!(\"{}\", e)));
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)));
            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));
    tokio::run(client);
}

fn main() {
    create_connections();
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-type-face) 26 28 (fontified t) 28 29 (fontified t) 29 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 38 (fontified t face font-lock-constant-face) 38 40 (fontified t) 40 42 (fontified t face font-lock-constant-face) 42 45 (fontified t) 45 54 (fontified t face font-lock-type-face) 54 56 (fontified t) 56 66 (fontified t face font-lock-type-face) 66 68 (fontified t) 68 73 (fontified t face font-lock-type-face) 73 75 (fontified t) 75 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 94 (fontified t face font-lock-type-face) 94 97 (fontified t) 97 100 (fontified t face font-lock-keyword-face) 100 101 (fontified t) 101 106 (fontified t face font-lock-constant-face) 106 108 (fontified t) 108 111 (fontified t face font-lock-constant-face) 111 113 (fontified t) 113 122 (fontified t face font-lock-type-face) 122 124 (fontified t) 124 127 (fontified t face font-lock-keyword-face) 127 128 (fontified t) 128 133 (fontified t face font-lock-constant-face) 133 135 (fontified t) 135 142 (fontified t face font-lock-constant-face) 142 148 (fontified t) 148 154 (fontified t face font-lock-keyword-face) 154 155 (fontified t) 155 163 (fontified t face font-lock-type-face) 163 170 (fontified t) 170 172 (fontified t face font-lock-variable-name-face) 172 174 (fontified t) 174 182 (fontified t face font-lock-type-face) 182 183 (fontified t) 183 192 (fontified t face font-lock-type-face) 192 197 (fontified t) 197 201 (fontified t face font-lock-keyword-face) 201 202 (fontified t) 202 208 (fontified t face font-lock-type-face) 208 209 (fontified t) 209 212 (fontified t face font-lock-keyword-face) 212 213 (fontified t) 213 221 (fontified t face font-lock-type-face) 221 224 (fontified t) 224 228 (fontified t) 228 232 (fontified t face font-lock-keyword-face) 232 233 (fontified t) 233 237 (fontified t face font-lock-type-face) 237 240 (fontified t) 240 246 (fontified t face font-lock-type-face) 246 247 (fontified t) 247 253 (fontified t face font-lock-type-face) 253 254 (fontified t) 254 255 (fontified t) 255 256 (fontified t) 256 260 (fontified t) 260 264 (fontified t face font-lock-keyword-face) 264 265 (fontified t) 265 270 (fontified t face font-lock-type-face) 270 273 (fontified t) 273 278 (fontified t face font-lock-type-face) 278 285 (fontified t) 285 287 (fontified t face font-lock-keyword-face) 287 288 (fontified t) 288 292 (fontified t face font-lock-function-name-face) 292 294 (fontified t) 294 297 (fontified t face font-lock-keyword-face) 297 298 (fontified t) 298 302 (fontified t face font-lock-keyword-face) 302 305 (fontified t) 305 306 (fontified t syntax-table #1#) 306 307 (fontified t) 307 311 (fontified t face font-lock-type-face) 311 312 (fontified t) 312 316 (fontified t face font-lock-type-face) 316 318 (fontified t) 318 322 (fontified t face font-lock-type-face) 322 324 (fontified t) 324 328 (fontified t face font-lock-type-face) 328 330 (fontified t) 330 335 (fontified t face font-lock-type-face) 335 347 (fontified t) 347 350 (fontified t face font-lock-keyword-face) 350 351 (fontified t) 351 354 (fontified t face font-lock-keyword-face) 354 355 (fontified t) 355 361 (fontified t face font-lock-variable-name-face) 361 364 (fontified t) 364 368 (fontified t face font-lock-preprocessor-face) 368 381 (fontified t) 381 383 (fontified t face font-lock-comment-delimiter-face) 383 424 (fontified t face font-lock-comment-face) 424 466 (fontified t) 466 468 (fontified t face font-lock-comment-delimiter-face) 468 500 (fontified t face font-lock-comment-face) 500 522 (fontified t face font-lock-comment-face) 522 530 (fontified t) 530 535 (fontified t face font-lock-keyword-face) 535 536 (fontified t) 536 539 (fontified t face font-lock-keyword-face) 539 540 (fontified t) 540 545 (fontified t face font-lock-type-face) 545 547 (fontified t) 547 552 (fontified t face font-lock-type-face) 552 571 (fontified t) 571 575 (fontified t face font-lock-keyword-face) 575 590 (fontified t) 590 593 (fontified t face font-lock-keyword-face) 593 601 (fontified t) 601 602 (fontified t face rust-question-mark-face) 602 605 (fontified t) 605 617 (fontified t) 617 619 (fontified t face font-lock-keyword-face) 619 642 (fontified t) 642 658 (fontified t) 658 664 (fontified t face font-lock-keyword-face) 664 665 (fontified t) 665 667 (fontified t face font-lock-type-face) 667 668 (fontified t) 668 673 (fontified t face font-lock-type-face) 673 675 (fontified t) 675 680 (fontified t face font-lock-type-face) 680 681 (fontified t) 681 687 (fontified t face font-lock-type-face) 687 689 (fontified t) 689 704 (fontified t) 704 705 (fontified t) 705 706 (fontified t) 706 712 (fontified t) 712 713 (fontified t) 713 715 (fontified t) 715 729 (fontified t) 729 730 (fontified t) 730 741 (fontified t) 741 743 (fontified t) 743 747 (fontified t) 747 761 (fontified t) 761 769 (fontified t) 769 770 (fontified t) 770 771 (fontified t) 771 779 (fontified t) 779 785 (fontified t face font-lock-keyword-face) 785 786 (fontified t) 786 788 (fontified t face font-lock-type-face) 788 789 (fontified t) 789 794 (fontified t face font-lock-type-face) 794 796 (fontified t) 796 804 (fontified t face font-lock-type-face) 804 807 (fontified t) 807 816 (fontified t) 816 822 (fontified t face font-lock-keyword-face) 822 823 (fontified t) 823 829 (fontified t face font-lock-type-face) 829 831 (fontified t) 831 836 (fontified t) 836 838 (fontified t face font-lock-variable-name-face) 838 840 (fontified t) 840 849 (fontified t face font-lock-type-face) 849 850 (fontified t) 850 859 (fontified t face font-lock-type-face) 859 864 (fontified t) 864 868 (fontified t face font-lock-keyword-face) 868 869 (fontified t) 869 875 (fontified t face font-lock-type-face) 875 876 (fontified t) 876 879 (fontified t face font-lock-keyword-face) 879 880 (fontified t) 880 886 (fontified t face font-lock-type-face) 886 893 (fontified t) 893 897 (fontified t face font-lock-keyword-face) 897 898 (fontified t) 898 902 (fontified t face font-lock-type-face) 902 913 (fontified t) 913 917 (fontified t face font-lock-keyword-face) 917 918 (fontified t) 918 923 (fontified t face font-lock-type-face) 923 926 (fontified t) 926 931 (fontified t face font-lock-type-face) 931 938 (fontified t) 938 940 (fontified t face font-lock-keyword-face) 940 941 (fontified t) 941 945 (fontified t face font-lock-function-name-face) 945 947 (fontified t) 947 950 (fontified t face font-lock-keyword-face) 950 951 (fontified t) 951 955 (fontified t face font-lock-keyword-face) 955 958 (fontified t) 958 959 (syntax-table #1# fontified t) 959 960 (fontified t) 960 964 (fontified t face font-lock-type-face) 964 965 (fontified t) 965 969 (fontified t face font-lock-type-face) 969 971 (fontified t) 971 975 (fontified t face font-lock-type-face) 975 977 (fontified t) 977 981 (fontified t face font-lock-type-face) 981 983 (fontified t) 983 988 (fontified t face font-lock-type-face) 988 1000 (fontified t) 1000 1003 (fontified t face font-lock-keyword-face) 1003 1004 (fontified t) 1004 1007 (fontified t face font-lock-keyword-face) 1007 1008 (fontified t) 1008 1014 (fontified t face font-lock-variable-name-face) 1014 1017 (fontified t) 1017 1022 (fontified t face font-lock-string-face) 1022 1070 (fontified t face font-lock-string-face) 1070 1083 (fontified t) 1083 1091 (fontified t) 1091 1095 (fontified t face font-lock-keyword-face) 1095 1111 (fontified t) 1111 1114 (fontified t face font-lock-keyword-face) 1114 1122 (fontified t) 1122 1123 (fontified t face rust-question-mark-face) 1123 1133 (fontified t) 1133 1139 (fontified t face font-lock-keyword-face) 1139 1140 (fontified t) 1140 1142 (fontified t face font-lock-type-face) 1142 1143 (fontified t) 1143 1148 (fontified t face font-lock-type-face) 1148 1150 (fontified t) 1150 1158 (fontified t face font-lock-type-face) 1158 1159 (fontified t) 1159 1161 (fontified t) 1161 1167 (fontified t) 1167 1168 (fontified t) 1168 1169 (fontified t) 1169 1170 (fontified t) 1170 1172 (fontified t face font-lock-keyword-face) 1172 1173 (fontified t) 1173 1191 (fontified t face font-lock-function-name-face) 1191 1194 (fontified t) 1194 1195 (fontified t) 1195 1196 (fontified t) 1196 1199 (fontified t) 1199 1200 (rear-nonsticky t fontified t) 1200 1203 (fontified t face font-lock-keyword-face) 1203 1204 (fontified t) 1204 1211 (fontified t face font-lock-variable-name-face) 1211 1214 (fontified t) 1214 1230 (fontified t face font-lock-string-face) 1230 1246 (fontified t) 1246 1261 (fontified t face font-lock-string-face) 1261 1271 (fontified t face font-lock-string-face) 1271 1274 (fontified t) 1274 1278 (fontified t) 1278 1281 (fontified t face font-lock-keyword-face) 1281 1282 (fontified t) 1282 1292 (fontified t face font-lock-variable-name-face) 1292 1295 (fontified t) 1295 1304 (fontified t face font-lock-type-face) 1304 1325 (fontified t) 1325 1326 (fontified t) 1326 1330 (fontified t) 1330 1333 (fontified t face font-lock-keyword-face) 1333 1334 (fontified t) 1334 1340 (fontified t face font-lock-variable-name-face) 1340 1354 (fontified t) 1354 1383 (fontified t) 1383 1395 (fontified t) 1395 1398 (fontified t face font-lock-keyword-face) 1398 1404 (fontified t) 1404 1426 (fontified t) 1426 1438 (fontified t) 1438 1441 (fontified t face font-lock-keyword-face) 1441 1442 (fontified t) 1442 1448 (fontified t face font-lock-variable-name-face) 1448 1451 (fontified t) 1451 1457 (fontified t face font-lock-type-face) 1457 1478 (fontified t) 1478 1483 (fontified t face font-lock-constant-face) 1483 1510 (fontified t) 1510 1518 (fontified t face rust-builtin-formatting-macro-face) 1518 1519 (fontified t) 1519 1520 (fontified t face font-lock-string-face) 1520 1522 (fontified t face rust-string-interpolation-face) 1522 1523 (fontified t face font-lock-string-face) 1523 1543 (fontified t) 1543 1546 (fontified t face font-lock-keyword-face) 1546 1547 (fontified t) 1547 1555 (fontified t face font-lock-variable-name-face) 1555 1558 (fontified t) 1558 1566 (fontified t face font-lock-type-face) 1566 1583 (fontified t) 1583 1587 (fontified t) 1587 1592 (fontified t face font-lock-constant-face) 1592 1621 (fontified t) 1621 1629 (fontified t face rust-builtin-formatting-macro-face) 1629 1630 (fontified t) 1630 1631 (fontified t face font-lock-string-face) 1631 1633 (fontified t face rust-string-interpolation-face) 1633 1634 (fontified t face font-lock-string-face) 1634 1642 (fontified t) 1642 1654 (fontified t) 1654 1660 (fontified t face font-lock-keyword-face) 1660 1661 (fontified t) 1661 1663 (fontified t face font-lock-type-face) 1663 1667 (fontified t) 1667 1669 (fontified t) 1669 1681 (fontified t) 1681 1683 (fontified t) 1683 1695 (fontified t) 1695 1701 (fontified t) 1701 1709 (fontified t face rust-builtin-formatting-macro-face) 1709 1710 (fontified t) 1710 1711 (fontified t face font-lock-string-face) 1711 1713 (fontified t face rust-string-interpolation-face) 1713 1714 (fontified t face font-lock-string-face) 1714 1721 (fontified t) 1721 1725 (fontified t) 1725 1730 (fontified t face font-lock-constant-face) 1730 1744 (fontified t) 1744 1745 (fontified t) 1745 1746 (fontified t) 1746 1747 (fontified t) 1747 1748 (fontified t) 1748 1750 (fontified t face font-lock-keyword-face) 1750 1751 (fontified t) 1751 1755 (fontified t face font-lock-function-name-face) 1755 1759 (fontified t) 1759 1760 (fontified t) 1760 1764 (fontified t) 1764 1774 (fontified t) 1774 1782 (fontified t) 1782 1783 (fontified t) 1783 1784 (fontified t) 1784 1785 (fontified t) 1785 1786 (fontified t)) . 1) (undo-tree-id3747 . 1045) (undo-tree-id3748 . -761) (undo-tree-id3749 . -1196) (undo-tree-id3750 . -1744) (undo-tree-id3751 . -1786) (undo-tree-id3752 . 2) (undo-tree-id3753 . -1786) (undo-tree-id3754 . -1786) (undo-tree-id3755 . -1786) (undo-tree-id3756 . -1786) (undo-tree-id3757 . -771) (undo-tree-id3758 . -1194) (undo-tree-id3759 . -1193) (undo-tree-id3760 . -771) (undo-tree-id3761 . -1194) (undo-tree-id3762 . -1194) (undo-tree-id3763 . -771) (undo-tree-id3764 . -240) (undo-tree-id3765 . -240) (undo-tree-id3766 . -1744) (undo-tree-id3767 . -240) (undo-tree-id3768 . -240) (undo-tree-id3769 . -240) (undo-tree-id3770 . -240) (undo-tree-id3771 . -240) (undo-tree-id3772 . -240) (undo-tree-id3773 . -247) (undo-tree-id3774 . -247) (undo-tree-id3775 . -240) (undo-tree-id3776 . -240) (undo-tree-id3777 . -240) (undo-tree-id3778 . -240) (undo-tree-id3779 . -240) (undo-tree-id3780 . -240) (undo-tree-id3781 . -240) (undo-tree-id3782 . -240) (undo-tree-id3783 . -240) (undo-tree-id3784 . -240) (undo-tree-id3785 . -240) (undo-tree-id3786 . -240) (undo-tree-id3787 . -240) (undo-tree-id3788 . -240) (undo-tree-id3789 . -247) (undo-tree-id3790 . -761) (undo-tree-id3791 . -761) (undo-tree-id3792 . -727) (undo-tree-id3793 . -728) (undo-tree-id3794 . -683) (undo-tree-id3795 . -684) (undo-tree-id3796 . -684) (undo-tree-id3797 . -684) (undo-tree-id3798 . -681) (undo-tree-id3799 . -680) (undo-tree-id3800 . -681) (undo-tree-id3801 . -681) (undo-tree-id3802 . -681) (undo-tree-id3803 . -681) (undo-tree-id3804 . -681) (undo-tree-id3805 . -681) (undo-tree-id3806 . -681) (undo-tree-id3807 . -681) (undo-tree-id3808 . -681) (undo-tree-id3809 . -681) (undo-tree-id3810 . -681) (undo-tree-id3811 . -681) (undo-tree-id3812 . -681) (undo-tree-id3813 . -681) (undo-tree-id3814 . -682) (undo-tree-id3815 . -681) (undo-tree-id3816 . -1784) (undo-tree-id3817 . -1784) (undo-tree-id3818 . -1161) (undo-tree-id3819 . -1784) (undo-tree-id3820 . -1784) (undo-tree-id3821 . -1161) (undo-tree-id3822 . -716) (undo-tree-id3823 . -715) (undo-tree-id3824 . -730) (undo-tree-id3825 . -729) (undo-tree-id3826 . -761) (undo-tree-id3827 . -642) (undo-tree-id3828 . -761) (undo-tree-id3829 . -761) (undo-tree-id3830 . -642) (undo-tree-id3831 . -761) (undo-tree-id3832 . -642) (undo-tree-id3833 . -761) (undo-tree-id3834 . -761) (undo-tree-id3835 . -761) (undo-tree-id3836 . -761) (undo-tree-id3837 . -761) (undo-tree-id3838 . -761) (undo-tree-id3839 . -761) (undo-tree-id3840 . -761) (undo-tree-id3841 . -761) (undo-tree-id3842 . -761) (undo-tree-id3843 . -761) (undo-tree-id3844 . -761) (undo-tree-id3845 . -761) (undo-tree-id3846 . -761) (undo-tree-id3847 . -761) (undo-tree-id3848 . -1587) (undo-tree-id3849 . -1592) (undo-tree-id3850 . -681) (undo-tree-id3851 . -687) (undo-tree-id3852 . -681) (undo-tree-id3853 . -743) (undo-tree-id3854 . -1587) (undo-tree-id3855 . -1599)) ((1 . 1789) (#("use futures::{Future, Poll};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use tokio::prelude::*;

struct Receiver {
    rx: ReadHalf<TcpStream>,
}
impl Future for Receiver {
    type Item = Option<String>;
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(
                    String::from_utf8_lossy(&buffer[..num_bytes_read]).to_string(),
                ));
            }
        }
        return Ok(Async::NotReady);
    }
}

struct Sender {
    tx: WriteHalf<TcpStream>,
}
impl Future for Sender {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = \"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn create_connections() {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);

    let client = connection
        .and_then(|socket| {
            let (rx, tx) = socket.split();
            let sender = Sender { tx };
            tokio::spawn(sender.map_err(|e| println!(\"{}\", e)));
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)));
            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));
    tokio::run(client);
}

fn main() {
    create_connections();
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-type-face) 26 28 (fontified t) 28 29 (fontified t) 29 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 38 (fontified t face font-lock-constant-face) 38 40 (fontified t) 40 42 (fontified t face font-lock-constant-face) 42 45 (fontified t) 45 54 (fontified t face font-lock-type-face) 54 56 (fontified t) 56 66 (fontified t face font-lock-type-face) 66 68 (fontified t) 68 73 (fontified t face font-lock-type-face) 73 75 (fontified t) 75 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 94 (fontified t face font-lock-type-face) 94 97 (fontified t) 97 100 (fontified t face font-lock-keyword-face) 100 101 (fontified t) 101 106 (fontified t face font-lock-constant-face) 106 108 (fontified t) 108 111 (fontified t face font-lock-constant-face) 111 113 (fontified t) 113 122 (fontified t face font-lock-type-face) 122 124 (fontified t) 124 127 (fontified t face font-lock-keyword-face) 127 128 (fontified t) 128 133 (fontified t face font-lock-constant-face) 133 135 (fontified t) 135 142 (fontified t face font-lock-constant-face) 142 148 (fontified t) 148 154 (fontified t face font-lock-keyword-face) 154 155 (fontified t) 155 163 (fontified t face font-lock-type-face) 163 170 (fontified t) 170 172 (fontified t face font-lock-variable-name-face) 172 174 (fontified t) 174 182 (fontified t face font-lock-type-face) 182 183 (fontified t) 183 192 (fontified t face font-lock-type-face) 192 197 (fontified t) 197 201 (fontified t face font-lock-keyword-face) 201 202 (fontified t) 202 208 (fontified t face font-lock-type-face) 208 209 (fontified t) 209 212 (fontified t face font-lock-keyword-face) 212 213 (fontified t) 213 221 (fontified t face font-lock-type-face) 221 228 (fontified t) 228 232 (fontified t face font-lock-keyword-face) 232 233 (fontified t) 233 237 (fontified t face font-lock-type-face) 237 240 (fontified t) 240 246 (fontified t face font-lock-type-face) 246 247 (fontified t) 247 253 (fontified t face font-lock-type-face) 253 260 (fontified t) 260 264 (fontified t face font-lock-keyword-face) 264 265 (fontified t) 265 270 (fontified t face font-lock-type-face) 270 273 (fontified t) 273 278 (fontified t face font-lock-type-face) 278 285 (fontified t) 285 287 (fontified t face font-lock-keyword-face) 287 288 (fontified t) 288 292 (fontified t face font-lock-function-name-face) 292 294 (fontified t) 294 297 (fontified t face font-lock-keyword-face) 297 298 (fontified t) 298 302 (fontified t face font-lock-keyword-face) 302 305 (fontified t) 305 306 (fontified t syntax-table #1#) 306 307 (fontified t) 307 311 (fontified t face font-lock-type-face) 311 312 (fontified t) 312 316 (fontified t face font-lock-type-face) 316 318 (fontified t) 318 322 (fontified t face font-lock-type-face) 322 324 (fontified t) 324 328 (fontified t face font-lock-type-face) 328 330 (fontified t) 330 335 (fontified t face font-lock-type-face) 335 347 (fontified t) 347 350 (fontified t face font-lock-keyword-face) 350 351 (fontified t) 351 354 (fontified t face font-lock-keyword-face) 354 355 (fontified t) 355 361 (fontified t face font-lock-variable-name-face) 361 364 (fontified t) 364 368 (fontified t face font-lock-preprocessor-face) 368 381 (fontified t) 381 383 (fontified t face font-lock-comment-delimiter-face) 383 424 (fontified t face font-lock-comment-face) 424 466 (fontified t) 466 468 (fontified t face font-lock-comment-delimiter-face) 468 500 (fontified t face font-lock-comment-face) 500 522 (fontified t face font-lock-comment-face) 522 528 (fontified t) 528 530 (fontified t) 530 535 (fontified t face font-lock-keyword-face) 535 536 (fontified t) 536 539 (fontified t face font-lock-keyword-face) 539 540 (fontified t) 540 545 (fontified t face font-lock-type-face) 545 547 (fontified t) 547 552 (fontified t face font-lock-type-face) 552 571 (fontified t) 571 575 (fontified t face font-lock-keyword-face) 575 590 (fontified t) 590 593 (fontified t face font-lock-keyword-face) 593 601 (fontified t) 601 602 (fontified t face rust-question-mark-face) 602 605 (fontified t) 605 617 (fontified t) 617 619 (fontified t face font-lock-keyword-face) 619 642 (fontified t) 642 658 (fontified t) 658 664 (fontified t face font-lock-keyword-face) 664 665 (fontified t) 665 667 (fontified t face font-lock-type-face) 667 668 (fontified t) 668 673 (fontified t face font-lock-type-face) 673 675 (fontified t) 675 680 (fontified t face font-lock-type-face) 680 681 (fontified t) 681 682 (fontified t) 682 702 (fontified t) 702 708 (fontified t face font-lock-type-face) 708 725 (fontified t) 725 752 (fontified t) 752 762 (fontified t) 762 764 (fontified t) 764 766 (fontified t) 766 786 (fontified t) 786 818 (fontified t) 818 824 (fontified t face font-lock-keyword-face) 824 825 (fontified t) 825 827 (fontified t face font-lock-type-face) 827 828 (fontified t) 828 833 (fontified t face font-lock-type-face) 833 835 (fontified t) 835 843 (fontified t face font-lock-type-face) 843 855 (fontified t) 855 861 (fontified t face font-lock-keyword-face) 861 862 (fontified t) 862 868 (fontified t face font-lock-type-face) 868 875 (fontified t) 875 877 (fontified t face font-lock-variable-name-face) 877 879 (fontified t) 879 888 (fontified t face font-lock-type-face) 888 889 (fontified t) 889 898 (fontified t face font-lock-type-face) 898 903 (fontified t) 903 907 (fontified t face font-lock-keyword-face) 907 908 (fontified t) 908 914 (fontified t face font-lock-type-face) 914 915 (fontified t) 915 918 (fontified t face font-lock-keyword-face) 918 919 (fontified t) 919 925 (fontified t face font-lock-type-face) 925 932 (fontified t) 932 936 (fontified t face font-lock-keyword-face) 936 937 (fontified t) 937 941 (fontified t face font-lock-type-face) 941 952 (fontified t) 952 956 (fontified t face font-lock-keyword-face) 956 957 (fontified t) 957 962 (fontified t face font-lock-type-face) 962 965 (fontified t) 965 970 (fontified t face font-lock-type-face) 970 977 (fontified t) 977 979 (fontified t face font-lock-keyword-face) 979 980 (fontified t) 980 984 (fontified t face font-lock-function-name-face) 984 986 (fontified t) 986 989 (fontified t face font-lock-keyword-face) 989 990 (fontified t) 990 994 (fontified t face font-lock-keyword-face) 994 997 (fontified t) 997 998 (syntax-table #1# fontified t) 998 999 (fontified t) 999 1003 (fontified t face font-lock-type-face) 1003 1004 (fontified t) 1004 1008 (fontified t face font-lock-type-face) 1008 1010 (fontified t) 1010 1014 (fontified t face font-lock-type-face) 1014 1016 (fontified t) 1016 1020 (fontified t face font-lock-type-face) 1020 1022 (fontified t) 1022 1027 (fontified t face font-lock-type-face) 1027 1039 (fontified t) 1039 1042 (fontified t face font-lock-keyword-face) 1042 1043 (fontified t) 1043 1046 (fontified t face font-lock-keyword-face) 1046 1047 (fontified t) 1047 1053 (fontified t face font-lock-variable-name-face) 1053 1056 (fontified t) 1056 1109 (fontified t face font-lock-string-face) 1109 1130 (fontified t) 1130 1134 (fontified t face font-lock-keyword-face) 1134 1142 (fontified t) 1142 1150 (fontified t) 1150 1153 (fontified t face font-lock-keyword-face) 1153 1161 (fontified t) 1161 1162 (fontified t face rust-question-mark-face) 1162 1164 (fontified t) 1164 1172 (fontified t) 1172 1178 (fontified t face font-lock-keyword-face) 1178 1179 (fontified t) 1179 1181 (fontified t face font-lock-type-face) 1181 1182 (fontified t) 1182 1187 (face font-lock-type-face fontified t) 1187 1189 (fontified t) 1189 1197 (face font-lock-type-face fontified t) 1197 1200 (fontified t) 1209 1211 (face font-lock-keyword-face) 1212 1230 (face font-lock-function-name-face) 1239 1242 (face font-lock-keyword-face) 1243 1250 (face font-lock-variable-name-face) 1253 1266 (face font-lock-string-face) 1266 1269 (face font-lock-string-face) 1285 1286 (face font-lock-string-face) 1286 1310 (face font-lock-string-face) 1317 1320 (face font-lock-keyword-face) 1321 1331 (face font-lock-variable-name-face) 1334 1343 (face font-lock-type-face) 1369 1372 (face font-lock-keyword-face) 1373 1379 (face font-lock-variable-name-face) 1434 1437 (face font-lock-keyword-face) 1477 1480 (face font-lock-keyword-face) 1481 1487 (face font-lock-variable-name-face) 1490 1496 (face font-lock-type-face) 1517 1522 (face font-lock-constant-face) 1549 1557 (face rust-builtin-formatting-macro-face) 1558 1559 (face font-lock-string-face) 1559 1561 (face rust-string-interpolation-face) 1561 1562 (face font-lock-string-face) 1582 1585 (face font-lock-keyword-face) 1586 1594 (face font-lock-variable-name-face) 1597 1605 (face font-lock-type-face) 1626 1631 (face font-lock-constant-face) 1660 1664 (face rust-builtin-formatting-macro-face) 1664 1668 (face rust-builtin-formatting-macro-face) 1669 1670 (face font-lock-string-face) 1670 1672 (face rust-string-interpolation-face) 1672 1673 (face font-lock-string-face) 1693 1699 (face font-lock-keyword-face) 1700 1702 (face font-lock-type-face) 1740 1748 (face rust-builtin-formatting-macro-face) 1749 1750 (face font-lock-string-face) 1750 1752 (face rust-string-interpolation-face) 1752 1753 (face font-lock-string-face) 1764 1769 (face font-lock-constant-face) 1787 1789 (face font-lock-keyword-face) 1790 1792 (face font-lock-function-name-face) 1792 1794 (face font-lock-function-name-face)) . 1) (undo-tree-id3609 . 149) (undo-tree-id3610 . -1463) (undo-tree-id3611 . -702) (undo-tree-id3612 . -702) (undo-tree-id3613 . -702) (undo-tree-id3614 . -702) (undo-tree-id3615 . -702) (undo-tree-id3616 . -702) (undo-tree-id3617 . -1627) (undo-tree-id3618 . -1628) (undo-tree-id3619 . -800) (undo-tree-id3620 . -1627) (undo-tree-id3621 . -1627) (undo-tree-id3622 . -1627) (undo-tree-id3623 . -1463) (undo-tree-id3624 . -1463) (undo-tree-id3625 . -1629) (undo-tree-id3626 . -1628) (undo-tree-id3627 . -800) (undo-tree-id3628 . -1629) (undo-tree-id3629 . -1629) (undo-tree-id3630 . -800) (undo-tree-id3631 . -620) (undo-tree-id3632 . -537) (undo-tree-id3633 . -1585) (undo-tree-id3634 . -1520) (undo-tree-id3635 . -786) (undo-tree-id3636 . -1633) (undo-tree-id3637 . -1589) (undo-tree-id3638 . -786) (undo-tree-id3639 . -1677) (undo-tree-id3640 . -1676) (undo-tree-id3641 . -786) (undo-tree-id3642 . -1678) (undo-tree-id3643 . -1678) (undo-tree-id3644 . -786) (undo-tree-id3645 . -1678) (undo-tree-id3646 . -1678) (undo-tree-id3647 . -786) (undo-tree-id3648 . -1678) (undo-tree-id3649 . -1678) (undo-tree-id3650 . -786) (undo-tree-id3651 . -1678) (undo-tree-id3652 . -1678) (undo-tree-id3653 . -786) (undo-tree-id3654 . -1643) (undo-tree-id3655 . -1644) (undo-tree-id3656 . -786) (undo-tree-id3657 . -1717) (undo-tree-id3658 . -1706) (undo-tree-id3659 . -786) (undo-tree-id3661 . -1679) (undo-tree-id3663 . -1638) (undo-tree-id3665 . -1678) (undo-tree-id3667 . -1678) (undo-tree-id3669 . -1678) (undo-tree-id3671 . -1678) (undo-tree-id3673 . -786) (undo-tree-id3675 . -1697) (undo-tree-id3677 . -1421) (undo-tree-id3679 . -1718) (undo-tree-id3681 . -1687) (undo-tree-id3683 . -1638) (undo-tree-id3685 . -1750) (undo-tree-id3687 . -1678) (undo-tree-id3689 . -1677) (undo-tree-id3691 . -1669) (undo-tree-id3693 . -1656) (undo-tree-id3695 . -1639) (undo-tree-id3697 . -1678) (undo-tree-id3699 . -702) (undo-tree-id3701 . -1678) (undo-tree-id3703 . -702) (undo-tree-id3705 . -1678) (undo-tree-id3707 . -786) (undo-tree-id3709 . -702) (undo-tree-id3710 . -702) (undo-tree-id3712 . -1678) (undo-tree-id3714 . -702) (undo-tree-id3716 . -786) (undo-tree-id3718 . -1678) (undo-tree-id3720 . -682) (undo-tree-id3722 . -1626) (undo-tree-id3724 . -1626) (undo-tree-id3725 . -1631) (undo-tree-id3726 . -702) (undo-tree-id3727 . -708) (undo-tree-id3729 . -702) (undo-tree-id3731 . -702) (undo-tree-id3733 . -764) (undo-tree-id3735 . -1638) (undo-tree-id3737 . -702)) (23730 17449 728980 429000) 0 nil]) ((#("            print!(\"{}\", String::from_utf8_lossy(&buffer[..num_bytes_read]));
" 0 7 (fontified t) 7 12 (fontified t) 12 18 (fontified t face rust-builtin-formatting-macro-face) 18 19 (fontified t) 19 20 (fontified t face font-lock-string-face) 20 22 (fontified t face rust-string-interpolation-face) 22 23 (fontified t face font-lock-string-face) 23 25 (fontified t) 25 31 (fontified t face font-lock-type-face) 31 55 (fontified t) 55 78 (fontified t)) . 762) (undo-tree-id3738 . -12) (undo-tree-id3739 . -12) (undo-tree-id3740 . -12) (undo-tree-id3741 . -41) (undo-tree-id3742 . -41) (undo-tree-id3743 . -41) (undo-tree-id3744 . -41) (undo-tree-id3745 . -41) (undo-tree-id3746 . -41)) ((762 . 840)) (23730 17449 62028 636000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 744) (743 . 744) (742 . 744) (#("(" 0 1 (fontified nil)) . -742) (735 . 743) (732 . 735)) nil (23730 17446 824355 765000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil nil ((#(")" 0 1 (fontified nil)) . 749) (748 . 749) (747 . 749) (#("(" 0 1 (fontified nil)) . -747) (737 . 748)) ((#(".to_string(" 0 10 (fontified nil) 10 11 (fontified nil)) . 737) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -2) (undo-tree-id2102 . -1) (undo-tree-id2103 . -3) (undo-tree-id2104 . -1) (undo-tree-id2105 . -4) (undo-tree-id2106 . -1) (undo-tree-id2107 . -5) (undo-tree-id2108 . -10) (undo-tree-id2109 . -10) (undo-tree-id2110 . -9) (undo-tree-id2111 . -10) (undo-tree-id2112 . -8) (undo-tree-id2113 . -9) (undo-tree-id2114 . -8) (undo-tree-id2115 . -8) (747 . 748) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 747) (undo-tree-id2116 . -1) (#(")" 0 1 (fontified nil)) . 748) (749 . 750)) (23730 16552 685700 563000) 0 nil]) ((737 . 738) (#(")" 0 1 (fontified t)) . -710) 687) ((710 . 711) (#(")" 0 1 (fontified t)) . 737) (undo-tree-id2117 . 1) (undo-tree-id2118 . 1) (undo-tree-id2119 . -1)) (23730 16552 700075 883000) 0 nil]) ((710 . 711) (#(")" 0 1 (fontified t)) . -693) (693 . 694) (#(")" 0 1 (fontified t)) . -687)) ((687 . 688) (#(")" 0 1 (fontified nil)) . 693) (693 . 694) (#(")" 0 1 (fontified t)) . 710)) (23730 16553 61155 20000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 688) (687 . 688) (686 . 688) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -686) (682 . 687)) ((#("Some(" 0 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil face font-lock-type-face)) . 682) (undo-tree-id2120 . -4) (undo-tree-id2121 . -4) (undo-tree-id2122 . -4) (undo-tree-id2123 . -4) (undo-tree-id2124 . -4) (undo-tree-id2125 . -4) (undo-tree-id2126 . -4) (undo-tree-id2127 . -4) (undo-tree-id2128 . -4) (undo-tree-id2129 . -4) (undo-tree-id2130 . -4) (undo-tree-id2131 . -4) (undo-tree-id2132 . -4) (undo-tree-id2133 . -4) (undo-tree-id2134 . -4) (undo-tree-id2135 . -4) (undo-tree-id2136 . -4) (undo-tree-id2137 . -4) (undo-tree-id2138 . -4) (undo-tree-id2139 . -4) (undo-tree-id2140 . -4) (undo-tree-id2141 . -4) (undo-tree-id2142 . -4) (undo-tree-id2143 . -4) (undo-tree-id2144 . -4) (undo-tree-id2145 . -4) (undo-tree-id2146 . -4) (undo-tree-id2147 . -4) (undo-tree-id2148 . -4) (undo-tree-id2149 . -4) (undo-tree-id2150 . -4) (undo-tree-id2151 . 1) (undo-tree-id2152 . -4) (undo-tree-id2153 . 1) (undo-tree-id2154 . -4) (undo-tree-id2155 . 1) (undo-tree-id2156 . -4) (686 . 687) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 686) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . 2) (undo-tree-id2188 . -1) (undo-tree-id2189 . 1) (undo-tree-id2190 . -1) (undo-tree-id2191 . 1) (undo-tree-id2192 . -1) (#(")" 0 1 (fontified nil)) . 687) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (undo-tree-id2205 . 1) (undo-tree-id2206 . 1) (undo-tree-id2207 . -1) (688 . 689)) (23730 16553 436479 274000) 0 nil] [nil ([nil ([nil nil ((737 . 738) (#(")" 0 1 (fontified t)) . -710) (710 . 711) (#(")" 0 1 (fontified t)) . -693) (693 . 694) (#(")" 0 1 (fontified t)) . -687)) ((687 . 688) (#(")" 0 1 (fontified nil)) . 693) (693 . 694) (#(")" 0 1 (fontified nil)) . 710) (710 . 711) (#(")" 0 1 (fontified t)) . 737) (undo-tree-id2053 . 1) (undo-tree-id2054 . -1)) (23730 16512 919524 719000) 0 nil]) ((857 . 861) (844 . 848) (859 . 860) (#("}" 0 1 (fontified t)) . -844) 686 (682 . 686) (#("s" 0 1 (fontified t)) . -682) (undo-tree-id2027 . -1) 683 (682 . 683)) ((#("s" 0 1 (fontified nil)) . 682) (682 . 683) (#("Some" 0 4 (fontified t face font-lock-type-face)) . 682) (undo-tree-id2055 . -4) (undo-tree-id2056 . -4) (undo-tree-id2057 . -4) (undo-tree-id2058 . -4) (undo-tree-id2059 . -4) (undo-tree-id2060 . -4) (undo-tree-id2061 . -4) (undo-tree-id2062 . -4) (undo-tree-id2063 . -4) (undo-tree-id2064 . -4) (844 . 845) (#("}" 0 1 (fontified nil)) . 859) (#("    " 0 4 (fontified t)) . 844) (#("    " 0 4 (fontified t)) . 857) (undo-tree-id2065 . -4) (undo-tree-id2066 . -4) (undo-tree-id2067 . -4) (undo-tree-id2068 . -4)) (23730 16512 930461 982000) 0 nil]) ((682 . 684) (#("(" 0 1 (fontified nil)) . -682) (682 . 683)) ((#("(" 0 1 (fontified nil)) . 682) (undo-tree-id2069 . 1) (undo-tree-id2070 . 1) (undo-tree-id2071 . 1) (682 . 683) (#("()" 0 1 (fontified t) 1 2 (fontified t)) . 682) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -2) (undo-tree-id2077 . -1) (undo-tree-id2078 . -2) (undo-tree-id2079 . -1) (undo-tree-id2080 . -2) (undo-tree-id2081 . -1) (undo-tree-id2082 . -2) (undo-tree-id2083 . -1) (undo-tree-id2084 . -2) (undo-tree-id2085 . -1) (undo-tree-id2086 . -2) (undo-tree-id2087 . -1) (undo-tree-id2088 . -2) (undo-tree-id2089 . -1) (undo-tree-id2090 . -2) (undo-tree-id2091 . 2) (undo-tree-id2092 . -1) (undo-tree-id2093 . 1) (undo-tree-id2094 . -1) (undo-tree-id2095 . 1) (undo-tree-id2096 . -2) (undo-tree-id2097 . -2) (undo-tree-id2098 . -2)) (23730 16513 277564 346000) 0 nil]) ((762 . 764) (#(";" 0 1 (fontified t)) . -762) (undo-tree-id2028 . -1) (undo-tree-id2029 . -1) 763 (762 . 763)) ((#(";" 0 1 (fontified nil)) . 762) (762 . 763) (#("//" 0 2 (fontified t face font-lock-comment-delimiter-face)) . 762)) (23730 16553 858395 457000) 0 nil]) (790) (nil undo-tree-canary) (23730 16554 358759 309000) 0 nil]) ((716 . 730) (#("nu" 0 2 (fontified nil)) . 716) (714 . 718) (713 . 715) (#("[" 0 1 (fontified nil)) . 713) (707 . 714) (#("buff" 0 4 (fontified nil)) . 707) (706 . 711) (705 . 707) (#("(" 0 1 (fontified nil)) . 705) (690 . 706) (#("from_ut" 0 7 (fontified nil)) . 690) (682 . 697)) ((#("String::from_ut" 0 6 (fontified nil face font-lock-type-face) 6 8 (fontified nil) 8 15 (fontified nil)) . 682) (undo-tree-id2208 . -8) (undo-tree-id2209 . -8) (undo-tree-id2210 . -2) (undo-tree-id2211 . -3) (undo-tree-id2212 . -3) (undo-tree-id2213 . -3) (undo-tree-id2214 . -1) (undo-tree-id2216 . -6) (690 . 697) (#("from_utf8_lossy" 0 15 (fontified nil)) . 690) (undo-tree-id2218 . -15) (undo-tree-id2219 . -15) (undo-tree-id2221 . -15) (#("(" 0 1 (fontified nil)) . 705) (705 . 706) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 705) (undo-tree-id2222 . -1) (undo-tree-id2223 . -1) (undo-tree-id2225 . -2) (#("&buff" 0 1 (fontified nil) 1 5 (fontified nil)) . 706) (undo-tree-id2226 . -1) (undo-tree-id2227 . -1) (707 . 711) (#("buffer" 0 6 (fontified nil)) . 707) (undo-tree-id2228 . -6) (undo-tree-id2229 . -6) (#("[" 0 1 (fontified nil)) . 713) (713 . 714) (#("[]" 0 1 (fontified nil) 1 2 (fontified nil)) . 713) (undo-tree-id2230 . -1) (undo-tree-id2231 . -1) (#("..nu" 0 2 (fontified nil) 2 4 (fontified nil)) . 714) (undo-tree-id2232 . -2) (undo-tree-id2233 . -2) (716 . 718) (#("num_bytes_read" 0 14 (fontified t)) . 716) (undo-tree-id2234 . -12) (undo-tree-id2235 . -13)) (23730 16712 500744 750000) 0 nil]) ((#("()" 0 2 (fontified t)) . 682)) ((682 . 684)) (23730 16712 266228 616000) 0 nil]) ((#(">" 0 1 (fontified nil)) . 255) (undo-tree-id2351 . 1) (undo-tree-id2352 . -1) (#("<" 0 1 (fontified t)) . 241) (undo-tree-id2353 . -1) (undo-tree-id2354 . -1) (undo-tree-id2355 . -1) (undo-tree-id2356 . -1) (undo-tree-id2357 . -1) (undo-tree-id2358 . -1) (undo-tree-id2359 . -1) (undo-tree-id2360 . -1) (undo-tree-id2361 . -1) (undo-tree-id2362 . -1) (undo-tree-id2363 . -1) (undo-tree-id2364 . 1) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (undo-tree-id2369 . -1)) ((241 . 242) (255 . 256)) (23730 16712 109451 787000) 0 nil]) ((#("Poll" 0 4 (fontified t face font-lock-type-face)) . 241) (undo-tree-id2317 . -4) (undo-tree-id2318 . -4) (undo-tree-id2319 . -4) (undo-tree-id2320 . -4) (undo-tree-id2321 . -4) (undo-tree-id2322 . -4) (undo-tree-id2323 . -4) (undo-tree-id2324 . -4) (undo-tree-id2325 . -4) (undo-tree-id2326 . -4) (undo-tree-id2327 . -4) (undo-tree-id2328 . -4) (undo-tree-id2329 . -4) (undo-tree-id2330 . -4) (undo-tree-id2331 . -4) (undo-tree-id2332 . -4) (undo-tree-id2333 . -4) (undo-tree-id2334 . -4) (undo-tree-id2335 . -4) (undo-tree-id2336 . -4) (undo-tree-id2337 . -4) (undo-tree-id2338 . -4) (undo-tree-id2339 . -4) (undo-tree-id2340 . -4) (undo-tree-id2341 . -4) (undo-tree-id2342 . -4) (undo-tree-id2343 . -4) (undo-tree-id2344 . -4) (undo-tree-id2345 . -4) (undo-tree-id2346 . -4) (undo-tree-id2347 . -4) (undo-tree-id2348 . -4) (undo-tree-id2349 . -4) (undo-tree-id2350 . -4)) ((241 . 245)) (23730 16711 929906 599000) 0 nil]) ((260 . 261) (#(">" 0 1 (fontified nil)) . 252) (252 . 253) (#(">" 0 1 (fontified nil)) . 246) (245 . 247) (#("<" 0 1 (fontified nil face font-lock-type-face)) . 245) (245 . 246)) ((#("<" 0 1 (fontified nil face font-lock-type-face)) . 245) (245 . 246) (#("<>" 0 1 (fontified nil) 1 2 (fontified nil)) . 245) (undo-tree-id2236 . -1) (undo-tree-id2237 . -1) (undo-tree-id2238 . -1) (undo-tree-id2239 . -1) (undo-tree-id2240 . -1) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (246 . 247) (#(">" 0 1 (fontified nil)) . 252) (252 . 253) (#(">" 0 1 (fontified t)) . 260) (undo-tree-id2246 . -1)) (23730 16711 756317 807000) 0 nil]) ((#(":" 0 1 (fontified t)) . 245) (undo-tree-id2316 . -1)) ((245 . 246)) (23730 16711 584276 265000) 0 nil]) ((#(":" 0 1 (fontified t)) . 245)) ((245 . 246)) (23730 16711 398116 515000) 0 nil]) ((261 . 262)) ((#(";" 0 1 (fontified t)) . 261)) (23730 16711 212671 153000) 0 nil]) ((254 . 260) (253 . 255) (#("<" 0 1 (fontified nil face font-lock-type-face)) . 253) (241 . 254) (#("();" 0 3 (fontified t)) . 241) (undo-tree-id2311 . -2) (undo-tree-id2312 . -2) (undo-tree-id2313 . -2) (undo-tree-id2314 . -2) (undo-tree-id2315 . -2) (t 23730 15561 24338 454000)) ((241 . 244) (#("Poll::Option<" 0 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil) 5 6 (fontified nil) 6 12 (fontified nil face font-lock-type-face) 12 13 (fontified nil face font-lock-type-face)) . 241) (undo-tree-id2248 . -12) (undo-tree-id2249 . -12) (undo-tree-id2250 . -4) (undo-tree-id2251 . -4) (undo-tree-id2252 . -4) (undo-tree-id2253 . -4) (undo-tree-id2254 . -4) (undo-tree-id2255 . -4) (undo-tree-id2256 . -4) (undo-tree-id2257 . -4) (undo-tree-id2258 . -4) (undo-tree-id2259 . -4) (undo-tree-id2260 . -4) (undo-tree-id2261 . -4) (undo-tree-id2262 . -4) (undo-tree-id2263 . -4) (undo-tree-id2264 . -12) (undo-tree-id2266 . -12) (undo-tree-id2268 . -4) (undo-tree-id2270 . -4) (undo-tree-id2272 . -4) (undo-tree-id2273 . -12) (undo-tree-id2275 . -5) (undo-tree-id2277 . -12) (undo-tree-id2279 . -12) (undo-tree-id2281 . -12) (undo-tree-id2283 . -12) (undo-tree-id2285 . -12) (253 . 254) (#("<>" 0 1 (fontified nil) 1 2 (fontified nil)) . 253) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2291 . -1) (undo-tree-id2293 . -1) (undo-tree-id2295 . 2) (undo-tree-id2297 . 1) (undo-tree-id2299 . 1) (undo-tree-id2301 . -2) (undo-tree-id2303 . -2) (#("String" 0 6 (fontified t face font-lock-type-face)) . 254) (undo-tree-id2304 . -6) (undo-tree-id2306 . -6) (undo-tree-id2308 . 6) (undo-tree-id2310 . -6)) (23730 16711 44308 300000) 0 nil]) ((1791 . 1792) (#(")" 0 1 (fontified nil)) . 1791) (1790 . 1791) (1789 . 1791) (#("(" 0 1 (fontified nil)) . 1789) (1771 . 1790) (#("create" 0 6 (fontified nil)) . 1771) (1771 . 1777) (#("f" 0 1 (fontified nil)) . 1771) (1766 . 1772)) ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 1766) (#("f" 0 1 (fontified nil)) . 1771) (1771 . 1772) (#("create" 0 6 (fontified nil)) . 1771) (1771 . 1777) (#("create_connections" 0 10 (fontified nil) 10 18 (fontified nil)) . 1771) (#("(" 0 1 (fontified nil)) . 1789) (1789 . 1790) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 1789) (#(")" 0 1 (fontified nil)) . 1790) (1791 . 1792) (#(";" 0 1 (fontified t)) . 1791) (t 23730 15561 24338 454000)) (23730 16566 791022 745000) 0 nil]) ((#("
" 0 1 (fontified t)) . 1203) (undo-tree-id2004 . -1)) nil (23730 16565 238638 162000) 0 nil]) ((nil rear-nonsticky nil 1207 . 1208) (#("
" 0 1 (fontified nil)) . -1752) (1203 . 1753)) nil (23730 15560 966467 46000) 0 nil]) ((#("    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);

    let client = connection
        .and_then(|socket| {
            let (rx, tx) = socket.split();
            let sender = Sender { tx };
            tokio::spawn(sender.map_err(|e| println!(\"{}\", e)));
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)));
            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));
    tokio::run(client);
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 15 (fontified t face font-lock-variable-name-face) 15 18 (fontified t) 18 34 (fontified t face font-lock-string-face) 34 50 (fontified t) 50 75 (fontified t face font-lock-string-face) 75 82 (fontified t) 82 85 (fontified t face font-lock-keyword-face) 85 86 (fontified t) 86 96 (fontified t face font-lock-variable-name-face) 96 99 (fontified t) 99 108 (fontified t face font-lock-type-face) 108 129 (fontified t) 129 130 (fontified t) 130 134 (fontified t) 134 137 (fontified t face font-lock-keyword-face) 137 138 (fontified t) 138 144 (fontified t face font-lock-variable-name-face) 144 158 (fontified t) 158 187 (fontified t) 187 199 (fontified t) 199 202 (fontified t face font-lock-keyword-face) 202 208 (fontified t) 208 230 (fontified t) 230 242 (fontified t) 242 245 (fontified t face font-lock-keyword-face) 245 246 (fontified t) 246 252 (fontified t face font-lock-variable-name-face) 252 255 (fontified t) 255 261 (fontified t face font-lock-type-face) 261 282 (fontified t) 282 287 (fontified t face font-lock-constant-face) 287 314 (fontified t) 314 322 (fontified t face rust-builtin-formatting-macro-face) 322 323 (fontified t) 323 324 (fontified t face font-lock-string-face) 324 326 (fontified t face rust-string-interpolation-face) 326 327 (fontified t face font-lock-string-face) 327 347 (fontified t) 347 350 (fontified t face font-lock-keyword-face) 350 351 (fontified t) 351 359 (fontified t face font-lock-variable-name-face) 359 362 (fontified t) 362 370 (fontified t face font-lock-type-face) 370 391 (fontified t) 391 396 (fontified t face font-lock-constant-face) 396 425 (fontified t) 425 433 (fontified t face rust-builtin-formatting-macro-face) 433 434 (fontified t) 434 435 (fontified t face font-lock-string-face) 435 437 (fontified t face rust-string-interpolation-face) 437 438 (fontified t face font-lock-string-face) 438 458 (fontified t) 458 464 (fontified t face font-lock-keyword-face) 464 465 (fontified t) 465 467 (fontified t face font-lock-type-face) 467 485 (fontified t) 485 487 (fontified t) 487 505 (fontified t) 505 513 (face rust-builtin-formatting-macro-face fontified t) 513 514 (fontified t) 514 515 (face font-lock-string-face fontified t) 515 517 (face rust-string-interpolation-face fontified t) 517 518 (face font-lock-string-face fontified t) 518 525 (fontified t) 525 529 (fontified t) 529 534 (fontified t face font-lock-constant-face) 534 549 (fontified t)) . 1219) (undo-tree-id2005 . -525) (undo-tree-id2006 . -525) (undo-tree-id2007 . -208) (undo-tree-id2008 . -208) (undo-tree-id2009 . -525) (undo-tree-id2010 . -525) 1744) nil (23730 15560 966476 153000) 0 nil]) ((#("    " 0 4 (fontified t)) . -1203) (undo-tree-id2011 . -4) 1207 (1202 . 1207) 1177) nil (23730 15560 966480 487000) 0 nil]) ((1202 . 1203) (1201 . 1203) (#("{" 0 1 (fontified nil)) . -1201) (1201 . 1202) (1200 . 1201) (#(" " 0 1 (fontified nil)) . -1200) (undo-tree-id2012 . -1) (undo-tree-id2013 . -1) (#("{" 0 1 (fontified t)) . -1201) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (#("
" 0 1 (fontified t)) . -1202) (undo-tree-id2016 . -1) (#(" " 0 1 (fontified t)) . -1203) (undo-tree-id2017 . -1) (#(" " 0 1 (fontified t)) . -1204) (undo-tree-id2018 . -1) (#(" " 0 1 (fontified t)) . -1205) (undo-tree-id2019 . -1) (#(" " 0 1 (fontified t)) . -1206) (undo-tree-id2020 . -1) 1207 (1202 . 1207) (1200 . 1202) (1180 . 1200) (1177 . 1180) (#("p" 0 1 (fontified t)) . -1177) (undo-tree-id2021 . -1) (#("u" 0 1 (fontified t)) . -1178) (undo-tree-id2022 . -1) (#("b" 0 1 (fontified t face font-lock-keyword-face)) . -1179) (undo-tree-id2023 . -1) (#(" " 0 1 (fontified t)) . -1180) (undo-tree-id2024 . -1) (#("f" 0 1 (fontified t)) . -1181) (undo-tree-id2025 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -1182) (undo-tree-id2026 . -1) 1183 (1181 . 1183) (1177 . 1181) (1176 . 1177) (1175 . 1176) (t 23730 15312 562204 652000) 1174) nil (23730 15560 966508 524000) 0 nil]) ((#("t " 0 1 (fontified t) 1 2 (fontified t)) . 1397) (undo-tree-id1999 . -2) (undo-tree-id2000 . -2)) nil (23730 15312 485513 15000) 0 nil]) ((#("mu" 0 2 (fontified t face font-lock-keyword-face)) . 1397)) nil (23730 15312 485526 458000) 0 nil]) ((#("    " 0 4 (fontified t)) . -1318) (undo-tree-id2001 . -4) 1322 (1318 . 1322) (1318 . 1319)) nil (23730 15312 485539 509000) 0 nil]) ((#("    //wait for the connection to be established
" 0 4 (fontified t) 4 5 (fontified t face font-lock-comment-delimiter-face) 5 6 (face font-lock-comment-delimiter-face fontified t) 6 20 (face font-lock-comment-face fontified t) 20 48 (face font-lock-comment-face fontified t)) . 1318) (t 23730 15296 585614 198000)) nil (23730 15312 485546 567000) 0 nil]) ((1 . 1791) (#("use futures::{Future, Poll};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf, WriteHalf};
use tokio::net::TcpStream;
use tokio::prelude::*;

struct Receiver {
    rx: ReadHalf<TcpStream>, 
}
impl Future for Receiver {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(()));
            }
            print!(\"{}\", String::from_utf8_lossy(&buffer[..num_bytes_read]));
        }
        return Ok(Async::NotReady);
    }
}


struct Sender {
    tx: WriteHalf<TcpStream>,
}
impl Future for Sender {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = \"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes();
        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
    }
}

fn main() {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    //wait for the connection to be established
    let client = connection
        .and_then(|socket| {
            let (rx, mut tx) = socket.split();
            let sender = Sender { tx };
            tokio::spawn(sender.map_err(|e| println!(\"{}\", e)));
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)));
            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));
    tokio::run(client);
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-type-face) 26 28 (fontified t) 28 29 (fontified t) 29 32 (fontified t face font-lock-keyword-face) 32 33 (fontified t) 33 38 (fontified t face font-lock-constant-face) 38 40 (fontified t) 40 42 (fontified t face font-lock-constant-face) 42 45 (fontified t) 45 54 (fontified t face font-lock-type-face) 54 56 (fontified t) 56 66 (fontified t face font-lock-type-face) 66 68 (fontified t) 68 73 (fontified t face font-lock-type-face) 73 75 (fontified t) 75 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 94 (fontified t face font-lock-type-face) 94 97 (fontified t) 97 100 (fontified t face font-lock-keyword-face) 100 101 (fontified t) 101 106 (fontified t face font-lock-constant-face) 106 108 (fontified t) 108 111 (fontified t face font-lock-constant-face) 111 113 (fontified t) 113 122 (fontified t face font-lock-type-face) 122 124 (fontified t) 124 127 (fontified t face font-lock-keyword-face) 127 128 (fontified t) 128 133 (fontified t face font-lock-constant-face) 133 135 (fontified t) 135 142 (fontified t face font-lock-constant-face) 142 147 (fontified t) 147 148 (fontified t) 148 154 (fontified t face font-lock-keyword-face) 154 155 (fontified t) 155 163 (fontified t face font-lock-type-face) 163 166 (fontified t) 166 170 (fontified t) 170 172 (fontified t face font-lock-variable-name-face) 172 174 (fontified t) 174 182 (fontified t face font-lock-type-face) 182 183 (fontified t) 183 192 (fontified t face font-lock-type-face) 192 195 (fontified t) 195 196 (fontified t) 196 198 (fontified t) 198 202 (fontified t face font-lock-keyword-face) 202 203 (fontified t) 203 209 (fontified t face font-lock-type-face) 209 210 (fontified t) 210 213 (fontified t face font-lock-keyword-face) 213 214 (fontified t) 214 222 (fontified t face font-lock-type-face) 222 229 (fontified t) 229 233 (fontified t face font-lock-keyword-face) 233 234 (fontified t) 234 238 (fontified t face font-lock-type-face) 238 249 (fontified t) 249 253 (fontified t face font-lock-keyword-face) 253 254 (fontified t) 254 259 (fontified t face font-lock-type-face) 259 262 (fontified t) 262 267 (fontified t face font-lock-type-face) 267 274 (fontified t) 274 276 (fontified t face font-lock-keyword-face) 276 277 (fontified t) 277 281 (fontified t face font-lock-function-name-face) 281 283 (fontified t) 283 286 (fontified t face font-lock-keyword-face) 286 287 (fontified t) 287 291 (fontified t face font-lock-keyword-face) 291 294 (fontified t) 294 295 (syntax-table #1# fontified t) 295 296 (fontified t) 296 300 (fontified t face font-lock-type-face) 300 301 (fontified t) 301 305 (fontified t face font-lock-type-face) 305 307 (fontified t) 307 311 (fontified t face font-lock-type-face) 311 313 (fontified t) 313 317 (fontified t face font-lock-type-face) 317 319 (fontified t) 319 321 (fontified t face font-lock-type-face) 321 324 (fontified t face font-lock-type-face) 324 328 (fontified t) 328 336 (fontified t) 336 339 (fontified t face font-lock-keyword-face) 339 340 (fontified t) 340 343 (fontified t face font-lock-keyword-face) 343 344 (fontified t) 344 350 (fontified t face font-lock-variable-name-face) 350 353 (fontified t) 353 357 (fontified t face font-lock-preprocessor-face) 357 370 (fontified t) 370 372 (fontified t face font-lock-comment-delimiter-face) 372 413 (fontified t face font-lock-comment-face) 413 415 (fontified t) 415 455 (fontified t) 455 457 (fontified t face font-lock-comment-delimiter-face) 457 511 (fontified t face font-lock-comment-face) 511 519 (fontified t) 519 524 (fontified t face font-lock-keyword-face) 524 525 (fontified t) 525 528 (fontified t face font-lock-keyword-face) 528 529 (fontified t) 529 534 (face font-lock-type-face fontified t) 534 536 (fontified t) 536 541 (face font-lock-type-face fontified t) 541 560 (fontified t) 560 564 (face font-lock-keyword-face fontified t) 564 579 (fontified t) 579 582 (face font-lock-keyword-face fontified t) 582 590 (fontified t) 590 591 (face rust-question-mark-face fontified t) 591 594 (fontified t) 594 606 (fontified t) 606 608 (fontified t face font-lock-keyword-face) 608 647 (fontified t) 647 648 (fontified t face font-lock-keyword-face) 648 653 (fontified t face font-lock-keyword-face) 653 654 (fontified t) 654 656 (fontified t face font-lock-type-face) 656 657 (fontified t) 657 662 (fontified t face font-lock-type-face) 662 664 (fontified t) 664 669 (fontified t face font-lock-type-face) 669 676 (fontified t) 676 689 (fontified t) 689 690 (fontified t) 690 696 (fontified t) 696 702 (fontified t) 702 708 (fontified t face rust-builtin-formatting-macro-face) 708 709 (fontified t) 709 710 (fontified t face font-lock-string-face) 710 712 (fontified t face rust-string-interpolation-face) 712 713 (fontified t face font-lock-string-face) 713 715 (fontified t) 715 721 (fontified t face font-lock-type-face) 721 768 (fontified t) 768 786 (fontified t) 786 792 (fontified t face font-lock-keyword-face) 792 793 (fontified t) 793 795 (fontified t face font-lock-type-face) 795 796 (fontified t) 796 801 (fontified t face font-lock-type-face) 801 803 (fontified t) 803 811 (fontified t face font-lock-type-face) 811 820 (fontified t) 820 821 (fontified t) 821 822 (fontified t) 822 823 (rear-nonsticky t fontified t) 823 824 (fontified t) 824 830 (fontified t face font-lock-keyword-face) 830 831 (fontified t) 831 837 (fontified t face font-lock-type-face) 837 840 (fontified t) 840 844 (fontified t) 844 846 (fontified t face font-lock-variable-name-face) 846 848 (fontified t) 848 856 (fontified t face font-lock-type-face) 856 857 (rear-nonsticky t fontified t face font-lock-type-face) 857 858 (fontified t) 858 867 (fontified t face font-lock-type-face) 867 868 (fontified t) 868 869 (fontified t) 869 870 (fontified t) 870 872 (fontified t) 872 876 (fontified t face font-lock-keyword-face) 876 877 (fontified t) 877 883 (fontified t face font-lock-type-face) 883 884 (fontified t) 884 887 (fontified t face font-lock-keyword-face) 887 888 (fontified t) 888 894 (fontified t face font-lock-type-face) 894 897 (fontified t) 897 901 (fontified t) 901 905 (fontified t face font-lock-keyword-face) 905 906 (fontified t) 906 910 (fontified t face font-lock-type-face) 910 921 (fontified t) 921 925 (fontified t face font-lock-keyword-face) 925 926 (fontified t) 926 931 (fontified t face font-lock-type-face) 931 934 (fontified t) 934 939 (fontified t face font-lock-type-face) 939 946 (fontified t) 946 948 (fontified t face font-lock-keyword-face) 948 949 (fontified t) 949 953 (fontified t face font-lock-function-name-face) 953 955 (fontified t) 955 958 (fontified t face font-lock-keyword-face) 958 959 (fontified t) 959 963 (fontified t face font-lock-keyword-face) 963 966 (fontified t) 966 967 (syntax-table #1# fontified t) 967 968 (fontified t) 968 972 (fontified t face font-lock-type-face) 972 973 (fontified t) 973 977 (fontified t face font-lock-type-face) 977 979 (fontified t) 979 983 (fontified t face font-lock-type-face) 983 985 (fontified t) 985 989 (fontified t face font-lock-type-face) 989 991 (fontified t) 991 993 (fontified t face font-lock-type-face) 993 996 (fontified t face font-lock-type-face) 996 1000 (fontified t) 1000 1008 (fontified t) 1008 1011 (fontified t face font-lock-keyword-face) 1011 1012 (fontified t) 1012 1015 (fontified t face font-lock-keyword-face) 1015 1016 (fontified t) 1016 1022 (fontified t face font-lock-variable-name-face) 1022 1025 (fontified t) 1025 1078 (fontified t face font-lock-string-face) 1078 1086 (fontified t) 1086 1087 (rear-nonsticky t fontified t) 1087 1090 (fontified t) 1090 1091 (fontified t) 1091 1095 (fontified t) 1095 1099 (fontified t) 1099 1103 (fontified t face font-lock-keyword-face) 1103 1119 (fontified t) 1119 1122 (fontified t face font-lock-keyword-face) 1122 1130 (fontified t) 1130 1131 (fontified t face rust-question-mark-face) 1131 1132 (fontified t) 1132 1133 (fontified t) 1133 1141 (fontified t) 1141 1147 (fontified t face font-lock-keyword-face) 1147 1148 (fontified t) 1148 1150 (fontified t face font-lock-type-face) 1150 1151 (fontified t) 1151 1156 (fontified t face font-lock-type-face) 1156 1158 (fontified t) 1158 1162 (fontified t face font-lock-type-face) 1162 1166 (fontified t face font-lock-type-face) 1166 1169 (fontified t) 1169 1175 (fontified t) 1175 1176 (fontified t) 1176 1177 (fontified t) 1177 1178 (fontified t) 1178 1180 (fontified t face font-lock-keyword-face) 1180 1181 (fontified t) 1181 1185 (fontified t face font-lock-function-name-face) 1185 1190 (fontified t) 1190 1191 (fontified t) 1191 1194 (fontified t) 1194 1197 (fontified t face font-lock-keyword-face) 1197 1198 (fontified t) 1198 1205 (fontified t face font-lock-variable-name-face) 1205 1208 (fontified t) 1208 1219 (fontified t face font-lock-string-face) 1219 1222 (fontified t face font-lock-string-face) 1222 1223 (fontified t face font-lock-string-face) 1223 1224 (fontified t face font-lock-string-face) 1224 1240 (fontified t) 1240 1252 (fontified t face font-lock-string-face) 1252 1265 (fontified t face font-lock-string-face) 1265 1268 (fontified t) 1268 1269 (fontified t) 1269 1272 (fontified t) 1272 1275 (fontified t face font-lock-keyword-face) 1275 1276 (fontified t) 1276 1286 (fontified t face font-lock-variable-name-face) 1286 1289 (fontified t) 1289 1292 (fontified t face font-lock-type-face) 1292 1298 (fontified t face font-lock-type-face) 1298 1319 (fontified t) 1319 1323 (fontified t) 1323 1325 (face font-lock-comment-delimiter-face fontified t) 1325 1349 (face font-lock-comment-face fontified t) 1349 1367 (face font-lock-comment-face fontified t) 1371 1374 (face font-lock-keyword-face) 1375 1381 (face font-lock-variable-name-face) 1436 1439 (face font-lock-keyword-face) 1445 1448 (face font-lock-keyword-face) 1483 1486 (face font-lock-keyword-face) 1487 1493 (face font-lock-variable-name-face) 1496 1502 (face font-lock-type-face) 1523 1528 (face font-lock-constant-face) 1555 1563 (face rust-builtin-formatting-macro-face) 1564 1565 (face font-lock-string-face) 1565 1567 (face rust-string-interpolation-face) 1567 1568 (face font-lock-string-face) 1588 1591 (face font-lock-keyword-face) 1592 1600 (face font-lock-variable-name-face) 1603 1611 (face font-lock-type-face) 1632 1633 (face font-lock-constant-face) 1633 1637 (face font-lock-constant-face) 1666 1674 (face rust-builtin-formatting-macro-face) 1675 1676 (face font-lock-string-face) 1676 1677 (face rust-string-interpolation-face) 1677 1678 (face rust-string-interpolation-face) 1678 1679 (face font-lock-string-face) 1699 1701 (face font-lock-keyword-face) 1701 1705 (face font-lock-keyword-face) 1706 1708 (face font-lock-type-face) 1746 1754 (face rust-builtin-formatting-macro-face) 1755 1756 (face font-lock-string-face) 1756 1758 (face rust-string-interpolation-face) 1758 1759 (face font-lock-string-face) 1770 1775 (face font-lock-constant-face)) . 1) (undo-tree-id1793 . 970) (undo-tree-id1794 . -1471) (undo-tree-id1795 . -1091) (undo-tree-id1796 . -1091) (undo-tree-id1797 . -1471) (undo-tree-id1798 . 321) (undo-tree-id1799 . -1471) (undo-tree-id1800 . -1471) (undo-tree-id1801 . -509) (undo-tree-id1802 . -509) (undo-tree-id1803 . -1219) (undo-tree-id1804 . -1218) (undo-tree-id1805 . -1219) (undo-tree-id1806 . -1219) (undo-tree-id1807 . -1219) (undo-tree-id1808 . -676) (undo-tree-id1809 . -1471) (undo-tree-id1810 . -1471) (undo-tree-id1811 . -1471) (undo-tree-id1812 . -676) (undo-tree-id1813 . -1219) (undo-tree-id1814 . -1471) (undo-tree-id1815 . -1471) (undo-tree-id1816 . -1471) (undo-tree-id1817 . -1471) (undo-tree-id1818 . -1471) (undo-tree-id1819 . -1471) (undo-tree-id1820 . -1471) (undo-tree-id1821 . -676) (undo-tree-id1822 . -1471) (undo-tree-id1823 . -1471) (undo-tree-id1824 . -676) (undo-tree-id1825 . -1471) (undo-tree-id1826 . -1471) (undo-tree-id1827 . -676) (undo-tree-id1828 . -1471) (undo-tree-id1829 . -1471) (undo-tree-id1830 . -676) (undo-tree-id1831 . -1471) (undo-tree-id1832 . -1471) (undo-tree-id1833 . -1471) (undo-tree-id1834 . -676) (undo-tree-id1835 . -164) (undo-tree-id1836 . -164) (undo-tree-id1837 . -1471) (undo-tree-id1838 . -1471) (undo-tree-id1839 . -676) (undo-tree-id1840 . -164) (undo-tree-id1841 . -164) (undo-tree-id1842 . -821) (undo-tree-id1843 . -1471) (undo-tree-id1844 . -1176) (undo-tree-id1845 . -857) (undo-tree-id1846 . -856) (undo-tree-id1847 . -847) (undo-tree-id1848 . -856) (undo-tree-id1849 . -856) (undo-tree-id1850 . -848) (undo-tree-id1851 . -1025) (undo-tree-id1852 . -1025) (undo-tree-id1853 . -1173) (undo-tree-id1854 . -1173) (undo-tree-id1855 . -676) (undo-tree-id1856 . -1173) (undo-tree-id1857 . -1173) (undo-tree-id1858 . -676) (undo-tree-id1859 . -1471) (undo-tree-id1860 . -1471) (undo-tree-id1861 . -676) (undo-tree-id1862 . -26) (undo-tree-id1863 . -26) (undo-tree-id1864 . -26) (undo-tree-id1865 . -26) (undo-tree-id1866 . -26) (undo-tree-id1867 . -26) (undo-tree-id1868 . -822) (undo-tree-id1869 . -354) (undo-tree-id1870 . -296) (undo-tree-id1871 . -439) (undo-tree-id1872 . -354) (undo-tree-id1873 . -537) (undo-tree-id1874 . -439) (undo-tree-id1875 . -620) (undo-tree-id1876 . -537) (undo-tree-id1877 . -657) (undo-tree-id1878 . -620) (undo-tree-id1879 . -688) (undo-tree-id1880 . -657) (undo-tree-id1881 . -716) (undo-tree-id1882 . -688) (undo-tree-id1883 . -776) (undo-tree-id1884 . -716) (undo-tree-id1885 . -804) (undo-tree-id1886 . -776) (undo-tree-id1887 . -818) (undo-tree-id1888 . -804) (undo-tree-id1889 . -1025) (undo-tree-id1890 . -1026) (undo-tree-id1891 . -776) (undo-tree-id1892 . -777) (undo-tree-id1893 . -711) (undo-tree-id1894 . -712) (undo-tree-id1895 . -710) (undo-tree-id1896 . -711) (undo-tree-id1897 . -688) (undo-tree-id1898 . -689) (undo-tree-id1899 . -629) (undo-tree-id1900 . -630) (undo-tree-id1901 . -592) (undo-tree-id1902 . -593) (undo-tree-id1903 . -326) (undo-tree-id1904 . -327) (undo-tree-id1905 . -820) (undo-tree-id1906 . -818) (undo-tree-id1907 . -1025) (undo-tree-id1908 . -1026) (undo-tree-id1909 . -818) (undo-tree-id1910 . -819) (undo-tree-id1911 . -776) (undo-tree-id1912 . -777) (undo-tree-id1913 . -711) (undo-tree-id1914 . -712) (undo-tree-id1915 . -710) (undo-tree-id1916 . -711) (undo-tree-id1917 . -688) (undo-tree-id1918 . -689) (undo-tree-id1919 . -629) (undo-tree-id1920 . -630) (undo-tree-id1921 . -592) (undo-tree-id1922 . -593) (undo-tree-id1923 . -326) (undo-tree-id1924 . -327) (undo-tree-id1925 . -223) (undo-tree-id1926 . -224) (undo-tree-id1927 . -822) (undo-tree-id1928 . -820) (undo-tree-id1929 . -1445) (undo-tree-id1930 . -1448) (undo-tree-id1931 . -1445) (undo-tree-id1932 . -1451) (undo-tree-id1933 . -822) (undo-tree-id1934 . -822) 823) nil (23730 15296 521435 488000) 0 nil]) ((822 . 823) 821) nil (23730 15296 521477 60000) 0 nil]) ((#(", Stream" 0 2 (fontified t) 2 8 (fontified t face font-lock-type-face)) . 27)) nil (23730 15296 521482 972000) 0 nil]) ((#("use tokio::timer::Interval;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 11 (fontified t) 11 16 (fontified t face font-lock-constant-face) 16 18 (fontified t) 18 26 (fontified t face font-lock-type-face) 26 28 (fontified t)) . 156)) nil (23730 15296 521487 904000) 0 nil]) ((#("//Receiver struct that implements the future trait
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 51 (fontified t face font-lock-comment-face)) . 185)) nil (23730 15296 521492 357000) 0 nil]) ((#("//this exclusively handles incomming data and prints it to stdout
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 66 (fontified t face font-lock-comment-face)) . 236) (undo-tree-id1935 . -28) 264) nil (23730 15296 521502 594000) 0 nil]) ((#("//receiving half of the socket stream" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 37 (fontified t face font-lock-comment-face)) . 349)) nil (23730 15296 521506 976000) 0 nil]) ((#(" //socket closed" 0 1 (fontified t) 1 3 (fontified t face font-lock-comment-delimiter-face) 3 7 (fontified t face font-lock-comment-face) 7 16 (fontified t face font-lock-comment-face)) . 880)) nil (23730 15296 521511 351000) 0 nil]) ((#(" //receiving half of the socket stream" 0 1 (fontified t) 1 3 (fontified t face font-lock-comment-delimiter-face) 3 38 (fontified t face font-lock-comment-face)) . 1075)) nil (23730 15296 521515 206000) 0 nil]) ((#("
" 0 1 (fontified t)) . 2010)) nil (23730 15296 521519 148000) 0 nil]) ((#("
" 0 1 (fontified t)) . 1931)) nil (23730 15296 521522 862000) 0 nil]) ((#("            //start the receiver
" 0 12 (fontified t) 12 14 (fontified t face font-lock-comment-delimiter-face) 14 33 (fontified t face font-lock-comment-face)) . 1820)) nil (23730 15296 521526 529000) 0 nil]) ((#("
" 0 1 (fontified t)) . 1820)) nil (23730 15296 521530 487000) 0 nil]) ((#("            //start the sender
" 0 12 (fontified t) 12 14 (fontified t face font-lock-comment-delimiter-face) 14 30 (fontified t face font-lock-comment-face) 30 31 (fontified t face font-lock-comment-face)) . 1715) (undo-tree-id1936 . 31)) nil (23730 15296 521537 248000) 0 nil]) ((#("            //split the successfully connected socket in half (receive / send)
" 0 4 (fontified t) 4 9 (fontified t) 9 12 (fontified t) 12 14 (fontified t face font-lock-comment-delimiter-face) 14 46 (fontified t face font-lock-comment-face) 46 58 (fontified t face font-lock-comment-face) 58 79 (fontified t face font-lock-comment-face)) . 1668)) nil (23730 15296 521541 375000) 0 nil]) ((#("
" 0 1 (fontified t)) . 1794) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1)) nil (23730 15296 521617 171000) 0 nil]) ((#("            //set up a simple sender, that periodically (1/10sec) sends the same message
            // let sender = Interval::new_interval(std::time::Duration::from_millis(10000))
            //     .for_each(move |_| {
            //         //this lambda is invoked once per passed second
            //         tx.poll_write(\"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes()).map_err(|_| {
            //             //shut down the timer if an error occured (e.g. socket was closed)
            //             tokio::timer::Error::shutdown()
            //         })?;
            //         return Ok(());
            //     })
            //     .map_err(|e| println!(\"{}\", e));
" 0 8 (fontified t) 8 12 (fontified t) 12 14 (fontified t face font-lock-comment-delimiter-face) 14 30 (fontified t face font-lock-comment-face) 30 40 (fontified t face font-lock-comment-face) 40 58 (face font-lock-comment-face fontified t) 58 61 (face font-lock-comment-face fontified t) 61 72 (face font-lock-comment-face fontified t) 72 82 (face font-lock-comment-face fontified t) 82 89 (face font-lock-comment-face fontified t) 89 101 (fontified t) 101 104 (fontified t face font-lock-comment-delimiter-face) 104 107 (fontified t face font-lock-comment-face) 107 108 (fontified t face font-lock-comment-face) 108 114 (fontified t face font-lock-comment-face) 114 117 (fontified t face font-lock-comment-face) 117 118 (fontified t face font-lock-comment-face) 118 124 (fontified t face font-lock-comment-face) 124 125 (fontified t face font-lock-comment-face) 125 140 (fontified t face font-lock-comment-face) 140 143 (fontified t face font-lock-comment-face) 143 145 (fontified t face font-lock-comment-face) 145 149 (fontified t face font-lock-comment-face) 149 151 (fontified t face font-lock-comment-face) 151 159 (fontified t face font-lock-comment-face) 159 174 (fontified t face font-lock-comment-face) 174 175 (fontified t face font-lock-comment-face) 175 181 (fontified t face font-lock-comment-face) 181 193 (fontified t) 193 196 (fontified t face font-lock-comment-delimiter-face) 196 200 (fontified t face font-lock-comment-delimiter-face) 200 210 (fontified t face font-lock-comment-face) 210 214 (fontified t face font-lock-comment-face) 214 221 (fontified t face font-lock-comment-face) 221 227 (fontified t) 227 233 (fontified t) 233 236 (fontified t face font-lock-comment-delimiter-face) 236 244 (fontified t face font-lock-comment-delimiter-face) 244 246 (fontified t face font-lock-comment-face) 246 292 (fontified t face font-lock-comment-face) 292 304 (fontified t) 304 307 (fontified t face font-lock-comment-delimiter-face) 307 315 (fontified t face font-lock-comment-delimiter-face) 315 316 (fontified t face font-lock-comment-face) 316 329 (fontified t face font-lock-comment-face) 329 330 (fontified t face font-lock-comment-face) 330 344 (fontified t face font-lock-comment-face) 344 380 (fontified t face font-lock-comment-face) 380 381 (rear-nonsticky t fontified t face font-lock-comment-face) 381 382 (fontified t face font-lock-comment-face) 382 383 (fontified t face font-lock-comment-face) 383 391 (fontified t face font-lock-comment-face) 391 392 (fontified t face font-lock-comment-face) 392 393 (fontified t face font-lock-comment-face) 393 409 (fontified t face font-lock-comment-face) 409 421 (fontified t) 421 424 (fontified t face font-lock-comment-delimiter-face) 424 436 (fontified t face font-lock-comment-delimiter-face) 436 438 (fontified t face font-lock-comment-face) 438 452 (fontified t face font-lock-comment-face) 452 503 (fontified t face font-lock-comment-face) 503 514 (fontified t) 514 515 (fontified t) 515 518 (fontified t face font-lock-comment-delimiter-face) 518 530 (fontified t face font-lock-comment-delimiter-face) 530 535 (fontified t face font-lock-comment-face) 535 537 (fontified t face font-lock-comment-face) 537 542 (fontified t face font-lock-comment-face) 542 544 (fontified t face font-lock-comment-face) 544 549 (fontified t face font-lock-comment-face) 549 557 (fontified t face font-lock-comment-face) 557 562 (fontified t face font-lock-comment-face) 562 574 (fontified t) 574 577 (fontified t face font-lock-comment-delimiter-face) 577 582 (fontified t face font-lock-comment-delimiter-face) 582 585 (fontified t face font-lock-comment-delimiter-face) 585 587 (fontified t face font-lock-comment-face) 587 588 (fontified t face font-lock-comment-face) 588 589 (fontified t face font-lock-comment-face) 589 590 (face font-lock-comment-face fontified t) 590 602 (fontified t) 602 605 (fontified t face font-lock-comment-delimiter-face) 605 613 (fontified t face font-lock-comment-delimiter-face) 613 619 (fontified t face font-lock-comment-face) 619 620 (fontified t face font-lock-comment-face) 620 622 (fontified t face font-lock-comment-face) 622 628 (fontified t face font-lock-comment-face) 628 640 (fontified t) 640 643 (fontified t face font-lock-comment-delimiter-face) 643 647 (fontified t face font-lock-comment-delimiter-face) 647 650 (fontified t face font-lock-comment-face) 650 653 (fontified t) 653 662 (fontified t) 662 665 (fontified t face font-lock-comment-delimiter-face) 665 669 (fontified t face font-lock-comment-delimiter-face) 669 681 (fontified t face font-lock-comment-face) 681 682 (fontified t face font-lock-comment-face) 682 690 (fontified t face font-lock-comment-face) 690 691 (fontified t face font-lock-comment-face) 691 692 (fontified t face font-lock-comment-face) 692 694 (fontified t face font-lock-comment-face) 694 695 (fontified t face font-lock-comment-face) 695 701 (fontified t face font-lock-comment-face) 701 702 (fontified t face font-lock-comment-face)) . 1795) (undo-tree-id1966 . -654) (undo-tree-id1967 . -4) (undo-tree-id1968 . -654) (undo-tree-id1969 . -390) (undo-tree-id1970 . -329) (undo-tree-id1971 . -329) (undo-tree-id1972 . -329) (undo-tree-id1973 . -329) (undo-tree-id1974 . -329) (undo-tree-id1975 . -330) (undo-tree-id1976 . -701) (undo-tree-id1977 . -390) (undo-tree-id1978 . -390) (undo-tree-id1979 . -701) (undo-tree-id1980 . -701) (undo-tree-id1981 . -390) (undo-tree-id1982 . -390) (undo-tree-id1983 . -702) (undo-tree-id1984 . -701) (undo-tree-id1985 . -702) (undo-tree-id1986 . -390) (undo-tree-id1987 . -390) (undo-tree-id1988 . -390) (undo-tree-id1989 . -390) (undo-tree-id1990 . -390) (undo-tree-id1991 . -4) (undo-tree-id1992 . -4) (undo-tree-id1993 . -4) (undo-tree-id1994 . -654) (undo-tree-id1995 . -4) (undo-tree-id1996 . -654) (undo-tree-id1997 . 82) (undo-tree-id1998 . -622) 2449 (t 23730 15157 586271 301000)) nil (23730 15296 521718 766000) 0 nil]) ((1256 . 1260) (t 23730 15117 629791 266000)) nil (23730 15157 511340 169000) 0 nil]) ((2619 . 2626) (2617 . 2619) (#("{}" 0 2 (fontified t)) . 2617) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) 2618 (2608 . 2619) (2603 . 2608) (2596 . 2603) (#("map_" 0 4 (fontified t)) . -2596) (undo-tree-id1791 . -4) 2600 (2596 . 2600) (#("p" 0 1 (fontified t)) . -2596) (undo-tree-id1792 . -1) 2597 (2595 . 2597) (t 23730 14792 964588 446000)) nil (23730 15117 568424 524000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((#("," 0 1 (fontified t)) . 2652)) ((2652 . 2653)) (23730 15025 771871 947000) 0 nil]) ((#("                        " 0 24 (fontified nil)) . 2653) (#("
" 0 1 (fontified t)) . -2653) 2633) ((2653 . 2654) (2653 . 2677)) (23730 15025 776881 453000) 0 nil]) ((#("                            " 0 28 (fontified nil)) . 2633) (#("
" 0 1 (fontified t)) . -2633) 2632) ((2633 . 2634) (2633 . 2661)) (23730 15026 107735 341000) 0 nil]) ((#("                            " 0 28 (fontified nil)) . 2633) (#("
" 0 1 (fontified t)) . -2633) 2614) ((2633 . 2634) (2633 . 2661)) (23730 15026 312944 248000) 0 nil]) ((#("ErrorKind::WriteZero," 0 9 (fontified t face font-lock-type-face) 9 11 (fontified t) 11 20 (fontified t face font-lock-type-face) 20 21 (fontified t)) . 2662)) ((2662 . 2683)) (23730 15026 583679 750000) 0 nil]) ((#("io::" 0 2 (fontified t face font-lock-constant-face) 2 4 (fontified t)) . 2662)) ((2662 . 2666)) (23730 15026 872880 633000) 0 nil]) ((#("io::" 0 2 (fontified t face font-lock-constant-face) 2 4 (fontified t)) . 2622)) ((2622 . 2626)) (23730 15027 163260 278000) 0 nil] [nil nil ((#("        self.tx.poll_write(&mut buffer)?;
        return Ok(Async::NotReady);
" 0 8 (fontified t) 8 12 (fontified t face font-lock-keyword-face) 12 28 (fontified t) 28 31 (fontified t face font-lock-keyword-face) 31 39 (fontified t) 39 40 (fontified t face rust-question-mark-face) 40 41 (fontified t) 41 42 (fontified t) 42 50 (fontified t) 50 56 (fontified t face font-lock-keyword-face) 56 57 (fontified t) 57 59 (fontified t face font-lock-type-face) 59 60 (fontified t) 60 65 (fontified t face font-lock-type-face) 65 67 (fontified t) 67 71 (fontified t face font-lock-type-face) 71 75 (fontified t face font-lock-type-face) 75 78 (fontified t)) . 2801) (undo-tree-id1679 . -62) (undo-tree-id1680 . -20) (undo-tree-id1681 . -62) (undo-tree-id1682 . -20) (undo-tree-id1683 . -62) (undo-tree-id1684 . -20) (undo-tree-id1685 . -62) 2863) ((2801 . 2879)) (23730 14978 466333 634000) 0 nil]) ((nil rear-nonsticky nil 2789 . 2790) (nil fontified nil 1332 . 2790) (1332 . 2790)) ((#("while *pos < buffer.len() {
                    // Try to write the remainder of the buffer into the writer.
                    // Just like write in std::io::Write, poll_write *can* write
                    // fewer bytes than the length of the buffer it is given,
                    // and we need to handle that by looking at its return
                    // value, which is the number of bytes actually written.
                    //
                    // We are using try_ready! here, just like in poll_read in
                    // ReadExact, so that if poll_write returns NotReady (or an
                    // error), we will do the same! We uphold the contract that
                    // we have arranged to be notified later because poll_write
                    // follows that same contract, and _it_ returned NotReady.
                    let n = try_ready!(writer.poll_write(&buffer[*pos..]));
                    *pos += n;

                    // If no bytes were written, but there was no error, this
                    // generally implies that something weird happened under us.
                    // We make sure to turn this into an error for the caller to
                    // deal with.
                    if n == 0 {
                        return Err(io::Error::new(
                            io::ErrorKind::WriteZero,
                            \"zero-length write\",
                        ));
                    }" 0 5 (fontified nil face font-lock-keyword-face) 5 11 (fontified nil) 11 12 (fontified nil syntax-table #1#) 12 48 (fontified nil) 48 51 (fontified nil face font-lock-comment-delimiter-face) 51 109 (fontified nil face font-lock-comment-face) 109 129 (fontified nil) 129 132 (fontified nil face font-lock-comment-delimiter-face) 132 190 (fontified nil face font-lock-comment-face) 190 210 (fontified nil) 210 213 (fontified nil face font-lock-comment-delimiter-face) 213 268 (fontified nil face font-lock-comment-face) 268 288 (fontified nil) 288 291 (fontified nil face font-lock-comment-delimiter-face) 291 343 (fontified nil face font-lock-comment-face) 343 363 (fontified nil) 363 366 (fontified nil face font-lock-comment-delimiter-face) 366 420 (fontified nil face font-lock-comment-face) 420 440 (fontified nil) 440 442 (fontified nil face font-lock-comment-delimiter-face) 442 443 (fontified nil face font-lock-comment-face) 443 463 (fontified nil) 463 466 (fontified nil face font-lock-comment-delimiter-face) 466 500 (fontified nil face font-lock-comment-face) 500 522 (fontified nil face font-lock-comment-face) 522 542 (fontified nil) 542 545 (fontified nil face font-lock-comment-delimiter-face) 545 602 (fontified nil face font-lock-comment-face) 602 622 (fontified nil) 622 625 (fontified nil face font-lock-comment-delimiter-face) 625 682 (fontified nil face font-lock-comment-face) 682 702 (fontified nil) 702 705 (fontified nil face font-lock-comment-delimiter-face) 705 762 (fontified nil face font-lock-comment-face) 762 782 (fontified nil) 782 785 (fontified nil face font-lock-comment-delimiter-face) 785 841 (fontified nil face font-lock-comment-face) 841 861 (fontified nil) 861 864 (fontified nil face font-lock-keyword-face) 864 865 (fontified nil) 865 866 (fontified nil face font-lock-variable-name-face) 866 869 (fontified nil) 869 879 (fontified nil face font-lock-preprocessor-face) 879 969 (fontified nil) 969 972 (fontified nil face font-lock-comment-delimiter-face) 972 1022 (fontified nil face font-lock-comment-face) 1022 1027 (fontified nil face font-lock-comment-face) 1027 1047 (fontified nil) 1047 1050 (fontified nil face font-lock-comment-delimiter-face) 1050 1108 (fontified nil face font-lock-comment-face) 1108 1128 (fontified nil) 1128 1131 (fontified nil face font-lock-comment-delimiter-face) 1131 1189 (fontified nil face font-lock-comment-face) 1189 1209 (fontified nil) 1209 1212 (fontified nil face font-lock-comment-delimiter-face) 1212 1223 (fontified nil face font-lock-comment-face) 1223 1243 (fontified nil) 1243 1245 (fontified nil face font-lock-keyword-face) 1245 1255 (fontified nil) 1255 1279 (fontified nil) 1279 1285 (fontified nil face font-lock-keyword-face) 1285 1286 (fontified nil) 1286 1289 (fontified nil face font-lock-type-face) 1289 1290 (fontified nil) 1290 1292 (fontified nil face font-lock-constant-face) 1292 1294 (fontified nil) 1294 1299 (fontified nil face font-lock-type-face) 1299 1305 (fontified nil) 1305 1306 (fontified nil) 1306 1334 (fontified nil) 1334 1336 (fontified nil face font-lock-constant-face) 1336 1338 (fontified nil) 1338 1347 (fontified nil face font-lock-type-face) 1347 1349 (fontified nil) 1349 1358 (fontified nil face font-lock-type-face) 1358 1359 (fontified nil) 1359 1360 (fontified nil) 1360 1388 (fontified nil) 1388 1407 (fontified nil face font-lock-string-face) 1407 1408 (fontified nil) 1408 1409 (fontified nil) 1409 1433 (fontified nil) 1433 1437 (fontified nil) 1437 1457 (fontified nil) 1457 1458 (rear-nonsticky nil fontified nil)) . 1332) (undo-tree-id1693 . -1457) (undo-tree-id1694 . -865) (undo-tree-id1695 . -866) (undo-tree-id1696 . -945) (undo-tree-id1697 . -946) (undo-tree-id1698 . -1246) (undo-tree-id1699 . -1247) (undo-tree-id1700 . -1407) (undo-tree-id1701 . -946) (undo-tree-id1702 . -1407) (undo-tree-id1703 . -1407) (undo-tree-id1704 . -946) (undo-tree-id1705 . -1407) (undo-tree-id1706 . -1407) (undo-tree-id1707 . -1305) (undo-tree-id1708 . -1407) (undo-tree-id1709 . -1305) (undo-tree-id1710 . -1305) (undo-tree-id1711 . -1407) (undo-tree-id1712 . -1305) (undo-tree-id1713 . -1305) (undo-tree-id1714 . -1407) (undo-tree-id1715 . -1305) (undo-tree-id1716 . -1290) (undo-tree-id1717 . -1305) (undo-tree-id1718 . -1407) (undo-tree-id1719 . -1304) (undo-tree-id1720 . -1305) (undo-tree-id1721 . -1388) (undo-tree-id1722 . -1389) (undo-tree-id1723 . -1282) (undo-tree-id1724 . -1304) (undo-tree-id1725 . -5) (undo-tree-id1726 . -1290) (undo-tree-id1727 . -1299) (undo-tree-id1728 . -26) (undo-tree-id1729 . -27) (undo-tree-id1730 . -5) (undo-tree-id1731 . -1290) (undo-tree-id1732 . -1299) (undo-tree-id1733 . -938) (undo-tree-id1734 . -941) (undo-tree-id1735 . -7) (undo-tree-id1736 . -10) (undo-tree-id1737 . -869) (undo-tree-id1738 . -878) (undo-tree-id1739 . -26) (undo-tree-id1740 . -27) (undo-tree-id1741 . -26) (undo-tree-id1742 . -27) (undo-tree-id1743 . -869) (undo-tree-id1744 . -878) (undo-tree-id1745 . -7) (undo-tree-id1746 . -10) (undo-tree-id1747 . -938) (undo-tree-id1748 . -941) (undo-tree-id1749 . -1290) (undo-tree-id1750 . -1326) (undo-tree-id1751 . -26) (undo-tree-id1752 . -27) (undo-tree-id1753 . -1290) (undo-tree-id1754 . -1331) (undo-tree-id1755 . -1334) (undo-tree-id1756 . -1282) (undo-tree-id1757 . -1334) (undo-tree-id1758 . -1334) (undo-tree-id1759 . -1290) (undo-tree-id1760 . -1334) (nil fontified t 2765 . 2769) (nil fontified t 2741 . 2765) (nil fontified t 2740 . 2741) (nil fontified t 2739 . 2740) (nil fontified t 2720 . 2739) (nil fontified t 2692 . 2720) (nil fontified t 2691 . 2692) (nil fontified t 2690 . 2691) (nil fontified t 2681 . 2690) (nil fontified t 2679 . 2681) (nil fontified t 2670 . 2679) (nil fontified t 2668 . 2670) (nil fontified t 2666 . 2668) (nil fontified t 2638 . 2666) (nil fontified t 2637 . 2638) (nil fontified t 2631 . 2637) (nil fontified t 2626 . 2631) (nil fontified t 2624 . 2626) (nil fontified t 2622 . 2624) (nil fontified t 2621 . 2622) (nil fontified t 2618 . 2621) (nil fontified t 2617 . 2618) (nil fontified t 2611 . 2617) (nil fontified t 2587 . 2611) (nil fontified t 2577 . 2587) (nil fontified t 2575 . 2577) (nil fontified t 2555 . 2575) (nil fontified t 2544 . 2555) (nil fontified t 2541 . 2544) (nil fontified t 2521 . 2541) (nil fontified t 2463 . 2521) (nil fontified t 2460 . 2463) (nil fontified t 2440 . 2460) (nil fontified t 2382 . 2440) (nil fontified t 2379 . 2382) (nil fontified t 2359 . 2379) (nil fontified t 2354 . 2359) (nil fontified t 2304 . 2354) (nil fontified t 2301 . 2304) (nil fontified t 2211 . 2301) (nil fontified t 2201 . 2211) (nil fontified t 2198 . 2201) (nil fontified t 2197 . 2198) (nil fontified t 2196 . 2197) (nil fontified t 2193 . 2196) (nil fontified t 2173 . 2193) (nil fontified t 2117 . 2173) (nil fontified t 2114 . 2117) (nil fontified t 2094 . 2114) (nil fontified t 2037 . 2094) (nil fontified t 2034 . 2037) (nil fontified t 2014 . 2034) (nil fontified t 1957 . 2014) (nil fontified t 1954 . 1957) (nil fontified t 1934 . 1954) (nil fontified t 1877 . 1934) (nil fontified t 1874 . 1877) (nil fontified t 1854 . 1874) (nil fontified t 1832 . 1854) (nil fontified t 1798 . 1832) (nil fontified t 1795 . 1798) (nil fontified t 1775 . 1795) (nil fontified t 1774 . 1775) (nil fontified t 1772 . 1774) (nil fontified t 1752 . 1772) (nil fontified t 1698 . 1752) (nil fontified t 1695 . 1698) (nil fontified t 1675 . 1695) (nil fontified t 1623 . 1675) (nil fontified t 1620 . 1623) (nil fontified t 1600 . 1620) (nil fontified t 1545 . 1600) (nil fontified t 1542 . 1545) (nil fontified t 1522 . 1542) (nil fontified t 1464 . 1522) (nil fontified t 1461 . 1464) (nil fontified t 1441 . 1461) (nil fontified t 1383 . 1441) (nil fontified t 1380 . 1383) (nil fontified t 1344 . 1380) (nil fontified t 1343 . 1344) (nil fontified t 1337 . 1343) (nil fontified t 1332 . 1337) (nil rear-nonsticky t 2789 . 2790)) (23730 15027 419507 780000) 0 nil]) ((1334 . 1342) (#("        " 0 8 (fontified nil)) . 1333) (undo-tree-id1686 . -8) (1333 . 1342) (#("        " 0 8 (fontified nil)) . 1332) (undo-tree-id1687 . -8) (1340 . 1341) (#("o" 0 1 (fontified t)) . -1340) (undo-tree-id1688 . -1) (#("o" 0 1 (fontified t)) . -1341) (undo-tree-id1689 . -1) 1342 (1340 . 1342) (1331 . 1340) 1331) ((#("
        " 0 1 (fontified t) 1 9 (fontified nil)) . 1331) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -9) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (#("oo" 0 1 (fontified nil) 1 2 (fontified nil)) . 1340) (undo-tree-id1778 . -2) (1340 . 1342) (#("
" 0 1 (fontified nil)) . 1340) (1332 . 1340) (#("        
" 0 8 (fontified nil) 8 9 (fontified nil)) . 1333) (1333 . 1341) (#("        " 0 8 (fontified t)) . 1334)) (23730 15027 697609 700000) 0 nil]) ((#("        " 0 8 (fontified nil)) . 1331) (undo-tree-id1783 . -8) (1331 . 1339) (1331 . 1332) (t 23730 14792 964588 446000)) ((#("
" 0 1 (fontified nil)) . 1331) (undo-tree-id1784 . 1) (undo-tree-id1785 . -1) (#("        " 0 8 (fontified nil)) . 1331) (undo-tree-id1786 . -8) (1331 . 1339)) (23730 15031 837339 397000) 0 nil]) ((2552 . 2563) (2548 . 2552)) nil (23730 15032 385677 288000) 0 nil]) ((1371 . 1372) (#(" " 0 1 (fontified t)) . -1371) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (#(";" 0 1 (fontified t)) . -1372) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) 1373 (1372 . 1373)) nil (23730 14792 892267 256000) 0 nil]) ((#("{
            if num_bytes_read == 0 {
                return Ok(Async::Ready(()));
            } //socket closed
            print!(\"{}\", String::from_utf8_lossy(&buffer[..num_bytes_read]));
        }" 0 2 (fontified t) 2 14 (fontified t) 14 16 (fontified t face font-lock-keyword-face) 16 17 (fontified t) 17 37 (fontified t) 37 39 (fontified t) 39 55 (fontified t) 55 61 (fontified t face font-lock-keyword-face) 61 62 (fontified t) 62 64 (fontified t face font-lock-type-face) 64 65 (fontified t) 65 70 (fontified t face font-lock-type-face) 70 72 (fontified t) 72 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 98 (fontified t) 98 100 (fontified t face font-lock-comment-delimiter-face) 100 104 (fontified t face font-lock-comment-face) 104 114 (fontified t face font-lock-comment-face) 114 126 (fontified t) 126 132 (fontified t face rust-builtin-formatting-macro-face) 132 133 (fontified t) 133 134 (fontified t face font-lock-string-face) 134 136 (fontified t face rust-string-interpolation-face) 136 137 (fontified t face font-lock-string-face) 137 139 (fontified t) 139 145 (fontified t face font-lock-type-face) 145 192 (fontified t) 192 201 (fontified t)) . 1372)) nil (23730 14792 892277 935000) 0 nil]) ((1329 . 1330)) nil (23730 14792 892282 526000) 0 nil]) ((1327 . 1329)) nil (23730 14792 892286 521000) 0 nil]) ((nil rear-nonsticky nil 1326 . 1327) (nil fontified nil 1265 . 1327) (1265 . 1327) 1264) nil (23730 14792 892293 518000) 0 nil] [nil nil ((nil rear-nonsticky nil 2376 . 2377) (nil fontified nil 1265 . 2377) (1265 . 2377) 1264) ((#("|socket| {
            //split the successfully connected socket in half (receive / send)
            let (rx, mut tx) = socket.split();

            //set up a simple sender, that periodically (1/10sec) sends the same message
            // let sender = Interval::new_interval(std::time::Duration::from_millis(10000))
            //     .for_each(move |_| {
            //         //this lambda is invoked once per passed second
            //         tx.poll_write(\"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes()).map_err(|_| {
            //             //shut down the timer if an error occured (e.g. socket was closed)
            //             tokio::timer::Error::shutdown()
            //         })?;
            //         return Ok(());
            //     })
            //     .map_err(|e| println!(\"{}\", e));
            //start the sender
            let sender =
            tokio::spawn(sender);

            //start the receiver
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)));

            return Ok(());
        }" 0 23 (fontified nil) 23 25 (fontified nil face font-lock-comment-delimiter-face) 25 90 (fontified nil face font-lock-comment-face) 90 102 (fontified nil) 102 105 (fontified nil face font-lock-keyword-face) 105 111 (fontified nil) 111 114 (fontified nil face font-lock-keyword-face) 114 150 (fontified nil) 150 152 (fontified nil face font-lock-comment-delimiter-face) 152 227 (fontified nil face font-lock-comment-face) 227 239 (fontified nil) 239 242 (fontified nil face font-lock-comment-delimiter-face) 242 319 (fontified nil face font-lock-comment-face) 319 331 (fontified nil) 331 338 (fontified nil face font-lock-comment-delimiter-face) 338 359 (fontified nil face font-lock-comment-face) 359 371 (fontified nil) 371 382 (fontified nil face font-lock-comment-delimiter-face) 382 430 (fontified nil face font-lock-comment-face) 430 442 (fontified nil) 442 453 (fontified nil face font-lock-comment-delimiter-face) 453 479 (fontified nil face font-lock-comment-face) 479 547 (fontified nil face font-lock-comment-face) 547 559 (fontified nil) 559 574 (fontified nil face font-lock-comment-delimiter-face) 574 641 (fontified nil face font-lock-comment-face) 641 653 (fontified nil) 653 668 (fontified nil face font-lock-comment-delimiter-face) 668 700 (fontified nil face font-lock-comment-face) 700 712 (fontified nil) 712 723 (fontified nil face font-lock-comment-delimiter-face) 723 728 (fontified nil face font-lock-comment-face) 728 740 (fontified nil) 740 751 (fontified nil face font-lock-comment-delimiter-face) 751 766 (fontified nil face font-lock-comment-face) 766 778 (fontified nil) 778 785 (fontified nil face font-lock-comment-delimiter-face) 785 788 (fontified nil face font-lock-comment-face) 788 800 (fontified nil) 800 807 (fontified nil face font-lock-comment-delimiter-face) 807 840 (fontified nil face font-lock-comment-face) 840 852 (fontified nil) 852 854 (fontified nil face font-lock-comment-delimiter-face) 854 871 (fontified nil face font-lock-comment-face) 871 883 (fontified nil) 883 886 (fontified nil face font-lock-keyword-face) 886 887 (fontified nil) 887 893 (fontified nil face font-lock-variable-name-face) 893 908 (fontified nil) 908 913 (fontified nil face font-lock-constant-face) 913 943 (fontified nil) 943 945 (fontified nil face font-lock-comment-delimiter-face) 945 964 (fontified nil face font-lock-comment-face) 964 976 (fontified nil) 976 979 (fontified nil face font-lock-keyword-face) 979 980 (fontified nil) 980 988 (fontified nil face font-lock-variable-name-face) 988 991 (fontified nil) 991 999 (fontified nil face font-lock-type-face) 999 1020 (fontified nil) 1020 1025 (fontified nil face font-lock-constant-face) 1025 1047 (fontified nil) 1047 1054 (fontified nil) 1054 1062 (fontified nil face rust-builtin-formatting-macro-face) 1062 1063 (fontified nil) 1063 1064 (fontified nil face font-lock-string-face) 1064 1066 (fontified nil face rust-string-interpolation-face) 1066 1067 (fontified nil face font-lock-string-face) 1067 1075 (fontified nil) 1075 1088 (fontified nil) 1088 1094 (fontified nil face font-lock-keyword-face) 1094 1095 (fontified nil) 1095 1097 (fontified nil face font-lock-type-face) 1097 1103 (fontified nil) 1103 1111 (fontified nil) 1111 1112 (fontified nil rear-nonsticky nil)) . 1265) (undo-tree-id1641 . -1111) (undo-tree-id1642 . -1111) (undo-tree-id1643 . -1111) (undo-tree-id1644 . -1065) (undo-tree-id1645 . -1066) (undo-tree-id1646 . -1064) (undo-tree-id1647 . -1065) (undo-tree-id1648 . -1005) (undo-tree-id1649 . -1006) (undo-tree-id1650 . -1000) (undo-tree-id1651 . -1001) (undo-tree-id1652 . -831) (undo-tree-id1653 . -832) (undo-tree-id1654 . -830) (undo-tree-id1655 . -831) (undo-tree-id1656 . -785) (undo-tree-id1657 . -786) (undo-tree-id1658 . -723) (undo-tree-id1659 . -724) (undo-tree-id1660 . -545) (undo-tree-id1661 . -546) (undo-tree-id1662 . -357) (undo-tree-id1663 . -358) (undo-tree-id1664 . -9) (undo-tree-id1665 . -10) (undo-tree-id1666 . 1103) (undo-tree-id1667 . -10) (undo-tree-id1668 . 1102) (undo-tree-id1669 . -1111) (undo-tree-id1670 . 1) (undo-tree-id1671 . -1112) (undo-tree-id1672 . -1112) (undo-tree-id1673 . -1111) (undo-tree-id1674 . -1112) (nil fontified t 2362 . 2368) (nil fontified t 2360 . 2362) (nil fontified t 2359 . 2360) (nil fontified t 2353 . 2359) (nil fontified t 2340 . 2353) (nil fontified t 2332 . 2340) (nil fontified t 2331 . 2332) (nil fontified t 2329 . 2331) (nil fontified t 2328 . 2329) (nil fontified t 2327 . 2328) (nil fontified t 2319 . 2327) (nil fontified t 2312 . 2319) (nil fontified t 2290 . 2312) (nil fontified t 2285 . 2290) (nil fontified t 2264 . 2285) (nil fontified t 2256 . 2264) (nil fontified t 2253 . 2256) (nil fontified t 2245 . 2253) (nil fontified t 2244 . 2245) (nil fontified t 2241 . 2244) (nil fontified t 2229 . 2241) (nil fontified t 2210 . 2229) (nil fontified t 2208 . 2210) (nil fontified t 2178 . 2208) (nil fontified t 2173 . 2178) (nil fontified t 2158 . 2173) (nil fontified t 2152 . 2158) (nil fontified t 2151 . 2152) (nil fontified t 2148 . 2151) (nil fontified t 2136 . 2148) (nil fontified t 2119 . 2136) (nil fontified t 2117 . 2119) (nil fontified t 2105 . 2117) (nil fontified t 2072 . 2105) (nil fontified t 2065 . 2072) (nil fontified t 2053 . 2065) (nil fontified t 2050 . 2053) (nil fontified t 2043 . 2050) (nil fontified t 2031 . 2043) (nil fontified t 2016 . 2031) (nil fontified t 2005 . 2016) (nil fontified t 1993 . 2005) (nil fontified t 1988 . 1993) (nil fontified t 1977 . 1988) (nil fontified t 1965 . 1977) (nil fontified t 1933 . 1965) (nil fontified t 1918 . 1933) (nil fontified t 1906 . 1918) (nil fontified t 1839 . 1906) (nil fontified t 1824 . 1839) (nil fontified t 1812 . 1824) (nil fontified t 1744 . 1812) (nil fontified t 1718 . 1744) (nil fontified t 1707 . 1718) (nil fontified t 1695 . 1707) (nil fontified t 1647 . 1695) (nil fontified t 1636 . 1647) (nil fontified t 1624 . 1636) (nil fontified t 1603 . 1624) (nil fontified t 1596 . 1603) (nil fontified t 1584 . 1596) (nil fontified t 1507 . 1584) (nil fontified t 1504 . 1507) (nil fontified t 1492 . 1504) (nil fontified t 1417 . 1492) (nil fontified t 1415 . 1417) (nil fontified t 1379 . 1415) (nil fontified t 1376 . 1379) (nil fontified t 1370 . 1376) (nil fontified t 1367 . 1370) (nil fontified t 1355 . 1367) (nil fontified t 1290 . 1355) (nil fontified t 1288 . 1290) (nil fontified t 1265 . 1288) (nil rear-nonsticky t 2376 . 2377)) (23730 14725 897263 990000) 0 nil]) ((1258 . 1265) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -1258) (undo-tree-id1636 . -1) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -1259) (undo-tree-id1637 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -1260) (undo-tree-id1638 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -1261) (undo-tree-id1639 . -1) 1262 (1256 . 1262) (1252 . 1256) (1244 . 1252) (1244 . 1245)) nil (23730 14725 911291 599000) 0 nil]) ((#("                                          //get all data that is available to us at the moment...
" 0 42 (fontified t) 42 44 (fontified t face font-lock-comment-delimiter-face) 44 98 (fontified t face font-lock-comment-face)) . 1244) (undo-tree-id1640 . -16) 1260 (t 23730 14627 118618 98000)) nil (23730 14725 897323 575000) 0 nil]) ((94 . 103) (#("Wri" 0 3 (fontified t face font-lock-type-face)) . -94) (undo-tree-id1632 . -3) 97 (92 . 97)) nil (23730 14627 51819 904000) 0 nil]) ((321 . 322)) nil (23730 14627 51833 426000) 0 nil]) ((#("H" 0 1 (fontified t face font-lock-type-face)) . 321)) nil (23730 14627 51839 162000) 0 nil]) ((#(" WriteHalf" 0 1 (fontified t) 1 2 (fontified t face font-lock-type-face) 2 10 (fontified t face font-lock-type-face)) . 1052) (undo-tree-id1633 . 10) (undo-tree-id1634 . -2)) nil (23730 14627 51856 164000) 0 nil]) ((nil rear-nonsticky nil 1051 . 1052) (nil fontified nil 1043 . 1052) (1043 . 1052) 1042) nil (23730 14627 51864 4000) 0 nil]) ((#("p" 0 1 (fontified t)) . -1043) (undo-tree-id1635 . -1) 1044 (1042 . 1044)) nil (23730 14627 51874 497000) 0 nil] [nil nil ((nil rear-nonsticky nil 1052 . 1053) (nil fontified nil 1044 . 1053) (1044 . 1053) 1043) ((#("WriteHalf" 0 8 (fontified nil face font-lock-type-face) 8 9 (fontified nil rear-nonsticky nil face font-lock-type-face)) . 1044) (undo-tree-id1609 . -8) (undo-tree-id1610 . -8) (undo-tree-id1611 . -8) (undo-tree-id1612 . -8) (undo-tree-id1613 . -8) (undo-tree-id1614 . -8) (undo-tree-id1615 . -8) (undo-tree-id1616 . -8) (undo-tree-id1617 . -8) (undo-tree-id1618 . -8) (undo-tree-id1619 . -8) (undo-tree-id1620 . -8) (undo-tree-id1621 . -8) (undo-tree-id1622 . -8) (undo-tree-id1623 . -8) (undo-tree-id1624 . -8) (undo-tree-id1625 . -8) (undo-tree-id1626 . -8) (undo-tree-id1627 . -8) (undo-tree-id1628 . -8) (undo-tree-id1629 . -8) (undo-tree-id1630 . -8) (undo-tree-id1631 . -8) (nil rear-nonsticky t 1052 . 1053)) (23730 14576 483371 591000) 0 nil]) ((1043 . 1052) (#("ReadHalf" 0 8 (fontified t face font-lock-type-face)) . 1043) (undo-tree-id1607 . -3) 1046) nil (23730 14576 492217 794000) 0 nil]) ((#(" " 0 1 (fontified t)) . 1338)) nil (23730 14576 483409 406000) 0 nil]) ((#("=" 0 1 (fontified t)) . 1338)) nil (23730 14576 483414 160000) 0 nil]) ((#(" " 0 1 (fontified t)) . 1338)) nil (23730 14576 483418 747000) 0 nil]) ((#("(num_bytes_read)" 0 16 (fontified t)) . 1338)) nil (23730 14576 483422 733000) 0 nil]) ((#("sync::Ready" 0 4 (fontified t face font-lock-constant-face) 4 6 (fontified t) 6 11 (fontified t face font-lock-type-face)) . 1338)) nil (23730 14576 483426 464000) 0 nil]) ((#("while let A" 0 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t) 6 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 11 (fontified t face font-lock-type-face)) . 1338)) nil (23730 14576 483430 249000) 0 nil]) ((#("        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
" 0 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 22 (fontified t face font-lock-variable-name-face) 22 25 (fontified t) 25 29 (fontified t face font-lock-preprocessor-face) 29 42 (fontified t) 42 44 (fontified t face font-lock-comment-delimiter-face) 44 85 (fontified t face font-lock-comment-face)) . 1232) (undo-tree-id1608 . -30) 1262) nil (23730 14576 483438 315000) 0 nil]) ((1477 . 1482) (#("read" 0 4 (fontified t)) . 1477)) nil (23730 14576 483443 968000) 0 nil]) ((1469 . 1471) (#("rx" 0 2 (fontified t)) . 1469)) nil (23730 14576 483449 13000) 0 nil]) ((1120 . 1126) (#("Receiver" 0 8 (fontified t face font-lock-type-face)) . 1120)) nil (23730 14576 483454 71000) 0 nil]) ((1039 . 1041) (#("rx" 0 2 (fontified t face font-lock-variable-name-face)) . 1039)) nil (23730 14576 483459 391000) 0 nil]) ((1026 . 1032) (#("Receiver" 0 8 (fontified t face font-lock-type-face)) . 1026)) nil (23730 14576 483464 532000) 0 nil]) ((1018 . 1019)) nil (23730 14576 483468 459000) 0 nil]) ((nil rear-nonsticky nil 1017 . 1018) (#("
" 0 1 (fontified nil)) . -1744) (1017 . 1745) 1016) nil (23730 14576 483474 703000) 0 nil]) ((2139 . 2149) (2137 . 2139) (2124 . 2137) 2123) nil (23730 14576 483481 750000) 0 nil]) ((2054 . 2057) (2032 . 2035) (1994 . 1997) (1966 . 1969) (1907 . 1910) (1813 . 1816) (1696 . 1699) (1625 . 1628) (1585 . 1588) (1493 . 1496)) nil (23730 14576 483493 697000) 0 nil] [nil nil ((1 . 2418) (#("use futures::{Future, Poll, Stream};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf};
use tokio::net::TcpStream;
use tokio::prelude::*;
use tokio::timer::Interval;

//Receiver struct that implements the future trait
//this exclusively handles incomming data and prints it to stdout
struct Receiver {
    rx: ReadHalf<TcpStream>, //receiving half of the socket stream
}
impl Future for Receiver {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(()));
            } //socket closed
            print!(\"{}\", String::from_utf8_lossy(&buffer[..num_bytes_read]));
        }
        return Ok(Async::NotReady);
    }
}

fn main() {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    //wait for the connection to be established
    let client = connection
        .and_then(|socket| {
            //split the successfully connected socket in half (receive / send)
            let (rx, mut tx) = socket.split();

            //set up a simple sender, that periodically (1/10sec) sends the same message
            let sender = Interval::new_interval(std::time::Duration::from_millis(10000))
                .for_each(move |_| {
                    //this lambda is invoked once per passed second
                    tx.poll_write(\"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes()).map_err(|_| {
                        //shut down the timer if an error occured (e.g. socket was closed)
                        tokio::timer::Error::shutdown()
                    })?;
                    return Ok(());
                })
                .map_err(|e| println!(\"{}\", e));
            //start the sender
            tokio::spawn(sender);

            //start the receiver
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)));

            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));

    tokio::run(client);
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-type-face) 26 28 (fontified t) 28 34 (fontified t face font-lock-type-face) 34 36 (fontified t) 36 37 (fontified t) 37 40 (fontified t face font-lock-keyword-face) 40 41 (fontified t) 41 46 (fontified t face font-lock-constant-face) 46 48 (fontified t) 48 50 (fontified t face font-lock-constant-face) 50 53 (fontified t) 53 62 (fontified t face font-lock-type-face) 62 64 (fontified t) 64 74 (fontified t face font-lock-type-face) 74 76 (fontified t) 76 81 (fontified t face font-lock-type-face) 81 83 (fontified t) 83 91 (fontified t face font-lock-type-face) 91 94 (fontified t) 94 97 (fontified t face font-lock-keyword-face) 97 98 (fontified t) 98 103 (fontified t face font-lock-constant-face) 103 105 (fontified t) 105 108 (fontified t face font-lock-constant-face) 108 110 (fontified t) 110 119 (fontified t face font-lock-type-face) 119 121 (fontified t) 121 124 (fontified t face font-lock-keyword-face) 124 125 (fontified t) 125 130 (fontified t face font-lock-constant-face) 130 132 (fontified t) 132 139 (fontified t face font-lock-constant-face) 139 144 (fontified t) 144 147 (fontified t face font-lock-keyword-face) 147 148 (fontified t) 148 153 (fontified t face font-lock-constant-face) 153 155 (fontified t) 155 160 (fontified t face font-lock-constant-face) 160 162 (fontified t) 162 170 (fontified t face font-lock-type-face) 170 173 (fontified t) 173 175 (fontified t face font-lock-comment-delimiter-face) 175 224 (fontified t face font-lock-comment-face) 224 226 (fontified t face font-lock-comment-delimiter-face) 226 290 (fontified t face font-lock-comment-face) 290 296 (fontified t face font-lock-keyword-face) 296 297 (fontified t) 297 305 (fontified t face font-lock-type-face) 305 312 (fontified t) 312 314 (fontified t face font-lock-variable-name-face) 314 316 (fontified t) 316 324 (fontified t face font-lock-type-face) 324 325 (fontified t) 325 334 (fontified t face font-lock-type-face) 334 337 (fontified t) 337 339 (fontified t face font-lock-comment-delimiter-face) 339 375 (fontified t face font-lock-comment-face) 375 377 (fontified t) 377 381 (fontified t face font-lock-keyword-face) 381 382 (fontified t) 382 388 (fontified t face font-lock-type-face) 388 389 (fontified t) 389 392 (fontified t face font-lock-keyword-face) 392 393 (fontified t) 393 401 (fontified t face font-lock-type-face) 401 408 (fontified t) 408 412 (fontified t face font-lock-keyword-face) 412 413 (fontified t) 413 417 (fontified t face font-lock-type-face) 417 428 (fontified t) 428 432 (fontified t face font-lock-keyword-face) 432 433 (fontified t) 433 438 (fontified t face font-lock-type-face) 438 441 (fontified t) 441 446 (fontified t face font-lock-type-face) 446 453 (fontified t) 453 455 (fontified t face font-lock-keyword-face) 455 456 (fontified t) 456 460 (fontified t face font-lock-function-name-face) 460 462 (fontified t) 462 465 (fontified t face font-lock-keyword-face) 465 466 (fontified t) 466 470 (fontified t face font-lock-keyword-face) 470 473 (fontified t) 473 474 (fontified t syntax-table #1#) 474 475 (fontified t) 475 479 (fontified t face font-lock-type-face) 479 480 (fontified t) 480 484 (fontified t face font-lock-type-face) 484 486 (fontified t) 486 490 (fontified t face font-lock-type-face) 490 492 (fontified t) 492 496 (fontified t face font-lock-type-face) 496 498 (fontified t) 498 500 (fontified t face font-lock-type-face) 500 503 (fontified t face font-lock-type-face) 503 507 (fontified t) 507 515 (fontified t) 515 518 (fontified t face font-lock-keyword-face) 518 519 (fontified t) 519 522 (fontified t face font-lock-keyword-face) 522 523 (fontified t) 523 529 (fontified t face font-lock-variable-name-face) 529 532 (fontified t) 532 536 (fontified t face font-lock-preprocessor-face) 536 549 (fontified t) 549 551 (fontified t face font-lock-comment-delimiter-face) 551 592 (fontified t face font-lock-comment-face) 592 634 (fontified t) 634 636 (fontified t face font-lock-comment-delimiter-face) 636 690 (fontified t face font-lock-comment-face) 690 698 (fontified t) 698 703 (fontified t face font-lock-keyword-face) 703 704 (fontified t) 704 707 (fontified t face font-lock-keyword-face) 707 708 (fontified t) 708 713 (fontified t face font-lock-type-face) 713 715 (fontified t) 715 720 (fontified t face font-lock-type-face) 720 739 (fontified t) 739 743 (fontified t face font-lock-keyword-face) 743 758 (fontified t) 758 761 (fontified t face font-lock-keyword-face) 761 769 (fontified t) 769 770 (fontified t face rust-question-mark-face) 770 785 (fontified t) 785 787 (fontified t face font-lock-keyword-face) 787 826 (fontified t) 826 832 (fontified t face font-lock-keyword-face) 832 833 (fontified t) 833 835 (fontified t face font-lock-type-face) 835 836 (fontified t) 836 841 (fontified t face font-lock-type-face) 841 843 (fontified t) 843 848 (fontified t face font-lock-type-face) 848 855 (fontified t) 855 869 (fontified t) 869 871 (fontified t face font-lock-comment-delimiter-face) 871 885 (fontified t face font-lock-comment-face) 885 897 (fontified t) 897 903 (fontified t face rust-builtin-formatting-macro-face) 903 904 (fontified t) 904 905 (fontified t face font-lock-string-face) 905 907 (fontified t face rust-string-interpolation-face) 907 908 (fontified t face font-lock-string-face) 908 910 (fontified t) 910 916 (fontified t face font-lock-type-face) 916 981 (fontified t) 981 987 (fontified t face font-lock-keyword-face) 987 988 (fontified t) 988 990 (fontified t face font-lock-type-face) 990 991 (fontified t) 991 996 (fontified t face font-lock-type-face) 996 998 (fontified t) 998 1006 (fontified t face font-lock-type-face) 1006 1018 (fontified t) 1018 1020 (fontified t face font-lock-keyword-face) 1020 1021 (fontified t) 1021 1025 (fontified t face font-lock-function-name-face) 1025 1030 (fontified t) 1030 1034 (fontified t) 1034 1037 (fontified t face font-lock-keyword-face) 1037 1038 (fontified t) 1038 1045 (fontified t face font-lock-variable-name-face) 1045 1048 (fontified t) 1048 1064 (fontified t face font-lock-string-face) 1064 1080 (fontified t) 1080 1092 (fontified t face font-lock-string-face) 1092 1105 (fontified t face font-lock-string-face) 1105 1108 (fontified t) 1108 1112 (fontified t) 1112 1115 (fontified t face font-lock-keyword-face) 1115 1116 (fontified t) 1116 1126 (fontified t face font-lock-variable-name-face) 1126 1129 (fontified t) 1129 1138 (fontified t face font-lock-type-face) 1138 1163 (fontified t) 1163 1165 (fontified t face font-lock-comment-delimiter-face) 1165 1207 (fontified t face font-lock-comment-face) 1207 1211 (fontified t) 1211 1214 (fontified t face font-lock-keyword-face) 1214 1215 (fontified t) 1215 1221 (fontified t face font-lock-variable-name-face) 1221 1276 (fontified t) 1276 1278 (fontified t face font-lock-comment-delimiter-face) 1278 1343 (fontified t face font-lock-comment-face) 1343 1355 (fontified t) 1355 1358 (face font-lock-keyword-face fontified t) 1358 1364 (fontified t) 1364 1367 (face font-lock-keyword-face fontified t) 1367 1390 (fontified t) 1390 1391 (fontified t) 1391 1403 (fontified t) 1403 1405 (fontified t face font-lock-comment-delimiter-face) 1405 1480 (fontified t face font-lock-comment-face) 1480 1492 (fontified t) 1492 1495 (fontified t face font-lock-keyword-face) 1495 1496 (fontified t) 1496 1502 (fontified t face font-lock-variable-name-face) 1502 1505 (fontified t) 1505 1513 (fontified t face font-lock-type-face) 1513 1528 (fontified t) 1528 1531 (fontified t face font-lock-constant-face) 1531 1533 (fontified t) 1533 1537 (fontified t face font-lock-constant-face) 1537 1539 (fontified t) 1539 1547 (fontified t face font-lock-type-face) 1547 1569 (fontified t) 1569 1595 (fontified t) 1595 1599 (fontified t face font-lock-keyword-face) 1599 1612 (fontified t) 1612 1626 (fontified t) 1626 1628 (fontified t face font-lock-comment-delimiter-face) 1628 1674 (fontified t face font-lock-comment-face) 1674 1708 (fontified t) 1708 1709 (fontified t face font-lock-string-face) 1709 1759 (fontified t face font-lock-string-face) 1759 1760 (rear-nonsticky t fontified t face font-lock-string-face) 1760 1761 (fontified t face font-lock-string-face) 1761 1762 (fontified t) 1762 1770 (fontified t) 1770 1771 (fontified t) 1771 1772 (fontified t) 1772 1788 (fontified t) 1788 1812 (fontified t) 1812 1814 (fontified t face font-lock-comment-delimiter-face) 1814 1879 (fontified t face font-lock-comment-face) 1879 1890 (fontified t) 1890 1903 (fontified t) 1903 1908 (fontified t face font-lock-constant-face) 1908 1910 (fontified t) 1910 1915 (fontified t face font-lock-constant-face) 1915 1917 (fontified t) 1917 1922 (fontified t face font-lock-type-face) 1922 1935 (fontified t) 1935 1957 (fontified t) 1957 1958 (fontified t face rust-question-mark-face) 1958 1980 (fontified t) 1980 1986 (fontified t face font-lock-keyword-face) 1986 1987 (fontified t) 1987 1989 (fontified t face font-lock-type-face) 1989 2017 (fontified t) 2017 2043 (fontified t) 2043 2051 (fontified t face rust-builtin-formatting-macro-face) 2051 2052 (fontified t) 2052 2053 (fontified t face font-lock-string-face) 2053 2055 (fontified t face rust-string-interpolation-face) 2055 2056 (fontified t face font-lock-string-face) 2056 2063 (fontified t) 2063 2075 (fontified t) 2075 2077 (fontified t face font-lock-comment-delimiter-face) 2077 2094 (fontified t face font-lock-comment-face) 2094 2105 (fontified t) 2105 2106 (fontified t) 2106 2111 (fontified t face font-lock-constant-face) 2111 2128 (fontified t) 2128 2129 (fontified t) 2129 2141 (fontified t) 2141 2143 (fontified t face font-lock-comment-delimiter-face) 2143 2162 (fontified t face font-lock-comment-face) 2162 2174 (fontified t) 2174 2177 (fontified t face font-lock-keyword-face) 2177 2178 (fontified t) 2178 2186 (fontified t face font-lock-variable-name-face) 2186 2189 (fontified t) 2189 2197 (fontified t face font-lock-type-face) 2197 2210 (fontified t) 2210 2218 (fontified t) 2218 2223 (fontified t face font-lock-constant-face) 2223 2252 (fontified t) 2252 2260 (fontified t face rust-builtin-formatting-macro-face) 2260 2261 (fontified t) 2261 2262 (fontified t face font-lock-string-face) 2262 2264 (fontified t face rust-string-interpolation-face) 2264 2265 (fontified t face font-lock-string-face) 2265 2273 (fontified t) 2273 2286 (fontified t) 2286 2288 (fontified t face font-lock-keyword-face) 2288 2292 (face font-lock-keyword-face fontified t) 2292 2293 (fontified t) 2293 2295 (face font-lock-type-face fontified t) 2295 2301 (fontified t) 2301 2333 (fontified t) 2333 2341 (fontified t face rust-builtin-formatting-macro-face) 2341 2342 (fontified t) 2342 2343 (fontified t face font-lock-string-face) 2343 2345 (fontified t face rust-string-interpolation-face) 2345 2346 (fontified t face font-lock-string-face) 2346 2358 (fontified t) 2358 2363 (fontified t face font-lock-constant-face) 2363 2380 (fontified t)) . 1) (undo-tree-id1232 . 608) (undo-tree-id1233 . -1709) (undo-tree-id1234 . -1709) (undo-tree-id1235 . -1759) (undo-tree-id1236 . -688) (undo-tree-id1237 . -688) (undo-tree-id1238 . -1059) (undo-tree-id1239 . -1058) (undo-tree-id1240 . -1059) (undo-tree-id1241 . -1059) (undo-tree-id1242 . -1059) (undo-tree-id1243 . -855) (undo-tree-id1244 . -1761) (undo-tree-id1245 . -1708) (undo-tree-id1246 . -1708) (undo-tree-id1247 . -855) (undo-tree-id1248 . -1059) (undo-tree-id1249 . -1708) (undo-tree-id1250 . -1708) (undo-tree-id1251 . -1708) (undo-tree-id1252 . -1709) (undo-tree-id1253 . -1761) (undo-tree-id1254 . -1761) (undo-tree-id1255 . -855) (undo-tree-id1256 . -1708) (undo-tree-id1257 . -1761) (undo-tree-id1258 . -855) (undo-tree-id1259 . -1709) (undo-tree-id1260 . -1709) (undo-tree-id1261 . -855) (undo-tree-id1262 . -1709) (undo-tree-id1263 . -1708) (undo-tree-id1264 . -855) (undo-tree-id1265 . -1761) (undo-tree-id1266 . -1709) (undo-tree-id1267 . -855) (undo-tree-id1268 . -1709) (undo-tree-id1269 . -1708) (undo-tree-id1270 . -855) (undo-tree-id1271 . -1709) (undo-tree-id1272 . -855) (undo-tree-id1273 . -1769) (undo-tree-id1274 . -1769) (undo-tree-id1275 . -855) (undo-tree-id1276 . -1709) (undo-tree-id1277 . -1772) (undo-tree-id1279 . -1769) (undo-tree-id1281 . -1772) (undo-tree-id1283 . -855) (undo-tree-id1285 . -1708) (undo-tree-id1287 . -1772) (undo-tree-id1289 . -1773) 1773) ((1 . 2381) (#("use futures::{Future, Poll, Stream};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf};
use tokio::net::TcpStream;
use tokio::prelude::*;
use tokio::timer::Interval;

//Receiver struct that implements the future trait
//this exclusively handles incomming data and prints it to stdout
struct Receiver {
    rx: ReadHalf<TcpStream>, //receiving half of the socket stream
}
impl Future for Receiver {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(()));
            } //socket closed
            print!(\"{}\", String::from_utf8_lossy(&buffer[..num_bytes_read]));
        }
        return Ok(Async::NotReady);
    }
}

fn main() {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    //wait for the connection to be established
    let client = connection
        .and_then(|socket| {
            //split the successfully connected socket in half (receive / send)
            let (rx, mut tx) = socket.split();

            //set up a simple sender, that periodically (1/10sec) sends the same message
            let sender = Interval::new_interval(std::time::Duration::from_millis(10000))
                .for_each(move |_| {
                    //this lambda is invoked once per passed second
                    tx.poll_write(\"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes())
                        .map_err(|_| {
                            //shut down the timer if an error occured (e.g. socket was closed)
                            tokio::timer::Error::shutdown()
                        })?;
                    return Ok(());
                })
                .map_err(|e| println!(\"{}\", e));
            //start the sender
            tokio::spawn(sender);

            //start the receiver
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)));

            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));

    tokio::run(client);
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-type-face) 26 28 (fontified t) 28 34 (fontified t face font-lock-type-face) 34 37 (fontified t) 37 40 (fontified t face font-lock-keyword-face) 40 41 (fontified t) 41 46 (fontified t face font-lock-constant-face) 46 48 (fontified t) 48 50 (fontified t face font-lock-constant-face) 50 53 (fontified t) 53 62 (fontified t face font-lock-type-face) 62 64 (fontified t) 64 74 (fontified t face font-lock-type-face) 74 76 (fontified t) 76 81 (fontified t face font-lock-type-face) 81 83 (fontified t) 83 91 (fontified t face font-lock-type-face) 91 94 (fontified t) 94 97 (fontified t face font-lock-keyword-face) 97 98 (fontified t) 98 103 (fontified t face font-lock-constant-face) 103 105 (fontified t) 105 108 (fontified t face font-lock-constant-face) 108 110 (fontified t) 110 119 (fontified t face font-lock-type-face) 119 121 (fontified t) 121 124 (fontified t face font-lock-keyword-face) 124 125 (fontified t) 125 130 (fontified t face font-lock-constant-face) 130 132 (fontified t) 132 139 (fontified t face font-lock-constant-face) 139 144 (fontified t) 144 147 (fontified t face font-lock-keyword-face) 147 148 (fontified t) 148 153 (fontified t face font-lock-constant-face) 153 155 (fontified t) 155 160 (fontified t face font-lock-constant-face) 160 162 (fontified t) 162 170 (fontified t face font-lock-type-face) 170 173 (fontified t) 173 175 (fontified t face font-lock-comment-delimiter-face) 175 224 (fontified t face font-lock-comment-face) 224 226 (fontified t face font-lock-comment-delimiter-face) 226 290 (fontified t face font-lock-comment-face) 290 296 (fontified t face font-lock-keyword-face) 296 297 (fontified t) 297 305 (fontified t face font-lock-type-face) 305 312 (fontified t) 312 314 (fontified t face font-lock-variable-name-face) 314 316 (fontified t) 316 324 (fontified t face font-lock-type-face) 324 325 (fontified t) 325 334 (fontified t face font-lock-type-face) 334 337 (fontified t) 337 339 (fontified t face font-lock-comment-delimiter-face) 339 375 (fontified t face font-lock-comment-face) 375 377 (fontified t) 377 381 (fontified t face font-lock-keyword-face) 381 382 (fontified t) 382 388 (fontified t face font-lock-type-face) 388 389 (fontified t) 389 392 (fontified t face font-lock-keyword-face) 392 393 (fontified t) 393 401 (fontified t face font-lock-type-face) 401 408 (fontified t) 408 412 (fontified t face font-lock-keyword-face) 412 413 (fontified t) 413 417 (fontified t face font-lock-type-face) 417 428 (fontified t) 428 432 (fontified t face font-lock-keyword-face) 432 433 (fontified t) 433 438 (fontified t face font-lock-type-face) 438 441 (fontified t) 441 446 (fontified t face font-lock-type-face) 446 453 (fontified t) 453 455 (fontified t face font-lock-keyword-face) 455 456 (fontified t) 456 460 (fontified t face font-lock-function-name-face) 460 462 (fontified t) 462 465 (fontified t face font-lock-keyword-face) 465 466 (fontified t) 466 470 (fontified t face font-lock-keyword-face) 470 473 (fontified t) 473 474 (fontified t syntax-table #1#) 474 475 (fontified t) 475 479 (fontified t face font-lock-type-face) 479 480 (fontified t) 480 484 (fontified t face font-lock-type-face) 484 486 (fontified t) 486 490 (fontified t face font-lock-type-face) 490 492 (fontified t) 492 496 (fontified t face font-lock-type-face) 496 498 (fontified t) 498 500 (fontified t face font-lock-type-face) 500 503 (fontified t face font-lock-type-face) 503 507 (fontified t) 507 515 (fontified t) 515 518 (fontified t face font-lock-keyword-face) 518 519 (fontified t) 519 522 (fontified t face font-lock-keyword-face) 522 523 (fontified t) 523 529 (fontified t face font-lock-variable-name-face) 529 532 (fontified t) 532 536 (fontified t face font-lock-preprocessor-face) 536 549 (fontified t) 549 551 (fontified t face font-lock-comment-delimiter-face) 551 592 (fontified t face font-lock-comment-face) 592 634 (fontified t) 634 636 (fontified t face font-lock-comment-delimiter-face) 636 690 (fontified t face font-lock-comment-face) 690 698 (fontified t) 698 703 (fontified t face font-lock-keyword-face) 703 704 (fontified t) 704 707 (fontified t face font-lock-keyword-face) 707 708 (fontified t) 708 713 (fontified t face font-lock-type-face) 713 715 (fontified t) 715 720 (fontified t face font-lock-type-face) 720 739 (fontified t) 739 743 (fontified t face font-lock-keyword-face) 743 758 (fontified t) 758 761 (fontified t face font-lock-keyword-face) 761 769 (fontified t) 769 770 (fontified t face rust-question-mark-face) 770 785 (fontified t) 785 787 (fontified t face font-lock-keyword-face) 787 826 (fontified t) 826 832 (fontified t face font-lock-keyword-face) 832 833 (fontified t) 833 835 (fontified t face font-lock-type-face) 835 836 (fontified t) 836 841 (fontified t face font-lock-type-face) 841 843 (fontified t) 843 848 (fontified t face font-lock-type-face) 848 855 (fontified t) 855 869 (fontified t) 869 871 (fontified t face font-lock-comment-delimiter-face) 871 884 (fontified t face font-lock-comment-face) 884 885 (fontified t face font-lock-comment-face) 885 897 (fontified t) 897 903 (fontified t face rust-builtin-formatting-macro-face) 903 904 (fontified t) 904 905 (fontified t face font-lock-string-face) 905 907 (fontified t face rust-string-interpolation-face) 907 908 (fontified t face font-lock-string-face) 908 910 (fontified t) 910 916 (fontified t face font-lock-type-face) 916 981 (fontified t) 981 987 (fontified t face font-lock-keyword-face) 987 988 (fontified t) 988 990 (fontified t face font-lock-type-face) 990 991 (fontified t) 991 996 (fontified t face font-lock-type-face) 996 998 (fontified t) 998 1006 (fontified t face font-lock-type-face) 1006 1017 (fontified t) 1017 1018 (fontified t) 1018 1020 (fontified t face font-lock-keyword-face) 1020 1021 (fontified t) 1021 1025 (fontified t face font-lock-function-name-face) 1025 1034 (fontified t) 1034 1037 (fontified t face font-lock-keyword-face) 1037 1038 (fontified t) 1038 1045 (fontified t face font-lock-variable-name-face) 1045 1048 (fontified t) 1048 1064 (fontified t face font-lock-string-face) 1064 1080 (fontified t) 1080 1105 (fontified t face font-lock-string-face) 1105 1112 (fontified t) 1112 1115 (fontified t face font-lock-keyword-face) 1115 1116 (fontified t) 1116 1126 (fontified t face font-lock-variable-name-face) 1126 1129 (fontified t) 1129 1138 (fontified t face font-lock-type-face) 1138 1163 (fontified t) 1163 1165 (fontified t face font-lock-comment-delimiter-face) 1165 1207 (fontified t face font-lock-comment-face) 1207 1211 (fontified t) 1211 1214 (fontified t face font-lock-keyword-face) 1214 1215 (fontified t) 1215 1221 (fontified t face font-lock-variable-name-face) 1221 1276 (fontified t) 1276 1278 (fontified t face font-lock-comment-delimiter-face) 1278 1343 (fontified t face font-lock-comment-face) 1343 1355 (fontified t) 1355 1358 (fontified t face font-lock-keyword-face) 1358 1364 (fontified t) 1364 1367 (fontified t face font-lock-keyword-face) 1367 1384 (fontified t) 1384 1390 (fontified t) 1390 1403 (fontified t) 1403 1405 (fontified t face font-lock-comment-delimiter-face) 1405 1480 (fontified t face font-lock-comment-face) 1480 1492 (fontified t) 1492 1495 (fontified t face font-lock-keyword-face) 1495 1496 (fontified t) 1496 1502 (fontified t face font-lock-variable-name-face) 1502 1505 (fontified t) 1505 1513 (fontified t face font-lock-type-face) 1513 1517 (fontified t) 1517 1528 (fontified t) 1528 1531 (face font-lock-constant-face fontified t) 1531 1533 (fontified t) 1533 1537 (face font-lock-constant-face fontified t) 1537 1539 (fontified t) 1539 1547 (face font-lock-type-face fontified t) 1547 1569 (fontified t) 1569 1595 (fontified t) 1595 1599 (fontified t face font-lock-keyword-face) 1599 1626 (fontified t) 1626 1628 (fontified t face font-lock-comment-delimiter-face) 1628 1674 (fontified t face font-lock-comment-face) 1674 1708 (fontified t) 1708 1761 (fontified t face font-lock-string-face) 1761 1773 (fontified t) 1773 1841 (fontified t) 1841 1843 (fontified t face font-lock-comment-delimiter-face) 1843 1908 (fontified t face font-lock-comment-face) 1908 1936 (fontified t) 1936 1941 (fontified t face font-lock-constant-face) 1941 1943 (fontified t) 1943 1948 (fontified t face font-lock-constant-face) 1948 1950 (fontified t) 1950 1955 (fontified t face font-lock-type-face) 1955 1994 (fontified t) 1994 1995 (fontified t face rust-question-mark-face) 1995 2017 (fontified t) 2017 2023 (fontified t face font-lock-keyword-face) 2023 2024 (fontified t) 2024 2026 (fontified t face font-lock-type-face) 2026 2069 (fontified t) 2069 2080 (fontified t) 2080 2088 (face rust-builtin-formatting-macro-face fontified t) 2088 2089 (fontified t) 2089 2090 (face font-lock-string-face fontified t) 2090 2092 (face rust-string-interpolation-face fontified t) 2092 2093 (face font-lock-string-face fontified t) 2093 2100 (fontified t) 2100 2112 (fontified t) 2112 2114 (fontified t face font-lock-comment-delimiter-face) 2114 2131 (fontified t face font-lock-comment-face) 2131 2143 (fontified t) 2143 2148 (fontified t face font-lock-constant-face) 2148 2178 (fontified t) 2178 2180 (fontified t face font-lock-comment-delimiter-face) 2180 2199 (fontified t face font-lock-comment-face) 2199 2211 (fontified t) 2211 2214 (fontified t face font-lock-keyword-face) 2214 2215 (fontified t) 2215 2223 (fontified t face font-lock-variable-name-face) 2223 2226 (fontified t) 2226 2234 (fontified t face font-lock-type-face) 2234 2255 (fontified t) 2255 2260 (fontified t face font-lock-constant-face) 2260 2273 (fontified t) 2273 2289 (fontified t) 2289 2297 (fontified t face rust-builtin-formatting-macro-face) 2297 2298 (fontified t) 2298 2299 (fontified t face font-lock-string-face) 2299 2301 (fontified t face rust-string-interpolation-face) 2301 2302 (fontified t face font-lock-string-face) 2302 2310 (fontified t) 2310 2323 (fontified t) 2323 2329 (fontified t face font-lock-keyword-face) 2329 2330 (fontified t) 2330 2332 (fontified t face font-lock-type-face) 2332 2370 (fontified t) 2370 2378 (fontified t face rust-builtin-formatting-macro-face) 2378 2379 (fontified t) 2379 2380 (fontified t face font-lock-string-face) 2380 2382 (fontified t face rust-string-interpolation-face) 2382 2383 (fontified t face font-lock-string-face) 2383 2395 (fontified t) 2395 2400 (fontified t face font-lock-constant-face) 2400 2417 (fontified t)) . 1) (undo-tree-id1290 . -1017) (undo-tree-id1291 . -1769) (undo-tree-id1292 . -1769) (undo-tree-id1293 . -855) (undo-tree-id1294 . -1007) (undo-tree-id1295 . -1769) (undo-tree-id1296 . -1769) (undo-tree-id1297 . -1017) (undo-tree-id1298 . -1007) (undo-tree-id1299 . -1013) (undo-tree-id1300 . -855) (undo-tree-id1301 . 1427) (undo-tree-id1302 . -991) (undo-tree-id1303 . 1426) (undo-tree-id1304 . -1006) (undo-tree-id1305 . 1411) (undo-tree-id1306 . -1007) (t 23730 14186 646820 998000)) (23730 14186 626626 249000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((1785 . 1790) (#("a" 0 1 (fontified t)) . -1785) (undo-tree-id799 . -1) (undo-tree-id800 . -1) 1786 (1785 . 1786) (#("q" 0 1 (fontified t)) . -1785) (undo-tree-id801 . -1) 1786 (1781 . 1786)) ((#(".unwq" 0 4 (fontified nil) 4 5 (fontified nil)) . 1781) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -2) (undo-tree-id901 . -1) (undo-tree-id902 . -3) (undo-tree-id903 . -1) (undo-tree-id904 . -4) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -4) (undo-tree-id908 . -1) (undo-tree-id909 . -4) (undo-tree-id910 . -1) (undo-tree-id911 . -4) (undo-tree-id912 . -1) (undo-tree-id913 . -4) (undo-tree-id914 . -1) (undo-tree-id915 . -4) (undo-tree-id916 . -1) (undo-tree-id917 . -4) (1785 . 1786) (#("a" 0 1 (fontified nil)) . 1785) (undo-tree-id918 . -1) (1785 . 1786) (#("rap()" 0 5 (fontified t)) . 1785) (undo-tree-id919 . -1) (undo-tree-id920 . -2) (undo-tree-id921 . -3)) (23730 13817 113880 353000) 0 nil]) ((#(".map_err(|e| println!(\"{}\", e));" 0 2 (fontified t) 2 8 (fontified t) 8 13 (fontified t) 13 21 (fontified t face rust-builtin-formatting-macro-face) 21 22 (fontified t) 22 23 (fontified t face font-lock-string-face) 23 25 (fontified t face rust-string-interpolation-face) 25 26 (fontified t face font-lock-string-face) 26 31 (fontified t) 31 32 (fontified t)) . 1799)) ((1799 . 1831)) (23730 13817 171791 639000) 0 nil]) ((#("                rr
" 0 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t)) . 1783) (undo-tree-id802 . -16) (undo-tree-id803 . -16) (undo-tree-id804 . -16) (undo-tree-id805 . -16) (undo-tree-id806 . -16) (undo-tree-id807 . -16) 1799) ((1783 . 1802)) (23730 13817 444757 254000) 0 nil]) ((1800 . 1801) (#(")" 0 1 (fontified t)) . 1800)) ((1800 . 1801) (#("r" 0 1 (fontified t)) . 1800)) (23730 13817 709973 671000) 0 nil]) ((1799 . 1800) (#("}" 0 1 (fontified t)) . 1799) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1)) ((1799 . 1800) (#("r" 0 1 (fontified t)) . 1799) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1)) (23730 13817 961427 415000) 0 nil]) ((#("?" 0 1 (fontified t face rust-question-mark-face)) . 1781)) ((1781 . 1782)) (23730 13818 217504 317000) 0 nil]) ((#("                    return Ok(());
" 0 19 (fontified t) 19 20 (fontified t) 20 26 (fontified t face font-lock-keyword-face) 26 27 (fontified t) 27 29 (fontified t face font-lock-type-face) 29 34 (fontified t) 34 35 (fontified t)) . 1784) (undo-tree-id811 . -33) 1817) ((1784 . 1819)) (23730 13818 465390 129000) 0 nil]) ((#(" " 0 1 (fontified t)) . 1585)) ((1585 . 1586)) (23730 13818 723952 118000) 0 nil]) ((1585 . 1586) (#("                        " 0 24 (fontified nil)) . 1585) (undo-tree-id812 . 24) (#("
" 0 1 (fontified t)) . -1585) (undo-tree-id813 . 1) 1505) ((1585 . 1586) (1585 . 1609) (#(" " 0 1 (fontified t)) . 1585)) (23730 13818 995961 143000) 0 nil]) ((1505 . 1506) (#("                    " 0 20 (fontified nil)) . 1505) (undo-tree-id814 . 20) (#("
" 0 1 (fontified t)) . -1505) (undo-tree-id815 . 1) 1504) ((1505 . 1506) (1505 . 1525) (#(" " 0 1 (fontified t)) . 1505)) (23730 13819 274756 438000) 0 nil]) ((#(" //this lambda is invoked once per passed second" 0 1 (fontified t) 1 3 (fontified t face font-lock-comment-delimiter-face) 3 48 (fontified t face font-lock-comment-face)) . 1505) (undo-tree-id816 . 47)) ((1505 . 1553)) (23730 13819 587116 807000) 0 nil]) ((1505 . 1506) (#("                     " 0 1 (fontified nil) 1 21 (fontified nil)) . 1505) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . 20) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (#("
" 0 1 (fontified t)) . -1506) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) 1481) ((1506 . 1507) (1505 . 1526) (#(" " 0 1 (fontified t)) . 1505)) (23730 13819 892261 264000) 0 nil]) ((#("                99999999999
" 0 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t) 18 19 (fontified t) 19 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t)) . 1507) (undo-tree-id883 . -25) (undo-tree-id884 . -16) (undo-tree-id885 . 1) (undo-tree-id886 . -25) (undo-tree-id887 . -16) (undo-tree-id888 . -16) (undo-tree-id889 . -25) (undo-tree-id890 . -16) (undo-tree-id891 . -16) (undo-tree-id892 . -15) (undo-tree-id893 . -26) 1533) ((1507 . 1535)) (23730 13820 391012 878000) 0 nil]) ((1533 . 1534) (#("{" 0 1 (fontified nil)) . 1533) (1532 . 1533) (#(" " 0 1 (fontified nil)) . 1532) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (1531 . 1532) (#("|" 0 1 (fontified nil)) . 1531) (1530 . 1531) (#("_" 0 1 (fontified nil)) . 1530) (1529 . 1530) (#("|" 0 1 (fontified nil)) . 1529) (1528 . 1529) (#(" " 0 1 (fontified nil)) . 1528) (1527 . 1528) (#("e" 0 1 (fontified nil face font-lock-keyword-face)) . 1527) (1526 . 1527) (#("v" 0 1 (fontified nil face font-lock-keyword-face)) . 1526) (1525 . 1526) (#("o" 0 1 (fontified nil face font-lock-keyword-face)) . 1525) (1524 . 1525) (#("m" 0 1 (fontified nil face font-lock-keyword-face)) . 1524) (1523 . 1524) (#("(" 0 1 (fontified t)) . 1523)) ((1523 . 1524) (#("9" 0 1 (fontified nil)) . 1523) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (1524 . 1525) (#("9" 0 1 (fontified nil)) . 1524) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (1525 . 1526) (#("9" 0 1 (fontified nil)) . 1525) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (1526 . 1527) (#("9" 0 1 (fontified nil)) . 1526) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (1527 . 1528) (#("9" 0 1 (fontified nil)) . 1527) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (1528 . 1529) (#("9" 0 1 (fontified nil)) . 1528) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (1529 . 1530) (#("9" 0 1 (fontified nil)) . 1529) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (1530 . 1531) (#("9" 0 1 (fontified nil)) . 1530) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (1531 . 1532) (#("9" 0 1 (fontified nil)) . 1531) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (1532 . 1533) (#("9" 0 1 (fontified nil)) . 1532) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (1533 . 1534) (#("9" 0 1 (fontified t)) . 1533)) (23730 13820 723660 197000) 0 nil] [nil nil ((#("move |_| {
                    //this lambda is invoked once per passed second
                    tx.poll_write(\"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes())
                        .map_err(|_| {
                            //shut down the timer if an error occured (e.g. socket was closed)
                            tokio::timer::Error::shutdown()
                        })?;
                    return Ok(());
                }" 0 4 (fontified t face font-lock-keyword-face) 4 9 (fontified t) 9 11 (fontified t) 11 31 (fontified t) 31 33 (fontified t face font-lock-comment-delimiter-face) 33 78 (fontified t face font-lock-comment-face) 78 79 (fontified t face font-lock-comment-face) 79 99 (fontified t) 99 113 (fontified t) 113 166 (fontified t face font-lock-string-face) 166 178 (fontified t) 178 179 (fontified t) 179 203 (fontified t) 203 208 (fontified t) 208 211 (fontified t) 211 218 (fontified t) 218 246 (fontified t) 246 248 (fontified t face font-lock-comment-delimiter-face) 248 295 (fontified t face font-lock-comment-face) 295 313 (fontified t face font-lock-comment-face) 313 341 (fontified t) 341 346 (fontified t face font-lock-constant-face) 346 348 (fontified t) 348 353 (fontified t face font-lock-constant-face) 353 355 (fontified t) 355 360 (fontified t face font-lock-type-face) 360 399 (fontified t) 399 400 (fontified t face rust-question-mark-face) 400 401 (fontified t) 401 402 (fontified t) 402 421 (fontified t) 421 422 (fontified t) 422 428 (fontified t face font-lock-keyword-face) 428 429 (fontified t) 429 431 (fontified t face font-lock-type-face) 431 436 (fontified t) 436 437 (fontified t) 437 454 (fontified t)) . 1524) (undo-tree-id787 . 276) (undo-tree-id788 . -129) (undo-tree-id789 . -129) (undo-tree-id790 . -113) (undo-tree-id791 . -114)) ((1524 . 1978)) (23730 13691 279145 632000) 0 nil]) ((#(".for_each" 0 1 (fontified t) 1 8 (fontified t) 8 9 (fontified t)) . 1523) (undo-tree-id793 . -8) (undo-tree-id795 . -8) (undo-tree-id797 . -8) (undo-tree-id798 . -8) 1531) ((1523 . 1532)) (23730 13821 105977 975000) 0 nil] [nil nil ((#("h(move |_| {
                    //this lambda is invoked once per passed second
                    tx.poll_write(\"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes())
                        .map_err(|_| {
                            //shut down the timer if an error occured (e.g. socket was closed)
                            tokio::timer::Error::shutdown()
                        })?;
                    return Ok(());
                })
                .map_err(|e| println!(\"{}\", e));
            //start the sender
            tokio::spawn(sender);

            //start the receiver
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)));

            return Ok(());
        " 0 1 (fontified t) 1 2 (fontified t) 2 6 (fontified t face font-lock-keyword-face) 6 11 (fontified t) 11 13 (fontified t) 13 33 (fontified t) 33 35 (fontified t face font-lock-comment-delimiter-face) 35 80 (fontified t face font-lock-comment-face) 80 81 (fontified t face font-lock-comment-face) 81 101 (fontified t) 101 115 (fontified t) 115 168 (fontified t face font-lock-string-face) 168 180 (fontified t) 180 181 (fontified t) 181 205 (fontified t) 205 210 (fontified t) 210 213 (fontified t) 213 220 (fontified t) 220 248 (fontified t) 248 250 (fontified t face font-lock-comment-delimiter-face) 250 297 (fontified t face font-lock-comment-face) 297 315 (fontified t face font-lock-comment-face) 315 343 (fontified t) 343 348 (fontified t face font-lock-constant-face) 348 350 (fontified t) 350 355 (fontified t face font-lock-constant-face) 355 357 (fontified t) 357 362 (fontified t face font-lock-type-face) 362 401 (fontified t) 401 402 (fontified t face rust-question-mark-face) 402 403 (fontified t) 403 404 (fontified t) 404 423 (fontified t) 423 424 (fontified t) 424 430 (fontified t face font-lock-keyword-face) 430 431 (fontified t) 431 433 (fontified t face font-lock-type-face) 433 438 (fontified t) 438 439 (fontified t) 439 456 (fontified t) 456 457 (fontified t) 457 458 (fontified t) 458 467 (fontified t) 467 474 (fontified t) 474 476 (fontified t) 476 482 (fontified t) 482 487 (fontified t) 487 495 (face rust-builtin-formatting-macro-face fontified t) 495 496 (fontified t) 496 497 (face font-lock-string-face fontified t) 497 499 (face rust-string-interpolation-face fontified t) 499 500 (face font-lock-string-face fontified t) 500 505 (fontified t) 505 506 (fontified t) 506 507 (fontified t) 507 513 (fontified t) 513 519 (fontified t) 519 521 (fontified t face font-lock-comment-delimiter-face) 521 538 (fontified t face font-lock-comment-face) 538 550 (fontified t) 550 555 (fontified t face font-lock-constant-face) 555 585 (fontified t) 585 587 (fontified t face font-lock-comment-delimiter-face) 587 598 (fontified t face font-lock-comment-face) 598 606 (fontified t face font-lock-comment-face) 606 618 (fontified t) 618 621 (fontified t face font-lock-keyword-face) 621 622 (fontified t) 622 630 (fontified t face font-lock-variable-name-face) 630 633 (fontified t) 633 641 (fontified t face font-lock-type-face) 641 662 (fontified t) 662 667 (fontified t face font-lock-constant-face) 667 680 (fontified t) 680 696 (fontified t) 696 698 (fontified t face rust-builtin-formatting-macro-face) 698 700 (fontified t face rust-builtin-formatting-macro-face) 700 704 (fontified t face rust-builtin-formatting-macro-face) 704 705 (fontified t) 705 706 (fontified t face font-lock-string-face) 706 708 (fontified t face rust-string-interpolation-face) 708 709 (fontified t face font-lock-string-face) 709 717 (fontified t) 717 730 (fontified t) 730 736 (fontified t face font-lock-keyword-face) 736 737 (fontified t) 737 739 (fontified t face font-lock-type-face) 739 745 (fontified t) 745 753 (fontified t)) . 1531) (undo-tree-id765 . 573) (undo-tree-id766 . -131) (undo-tree-id767 . -131) (undo-tree-id768 . -1) (undo-tree-id769 . -1)) ((1531 . 2284)) (23730 13686 195224 294000) 0 nil]) ((#("Interval::new_interval(std::time::Duration::from_millis(10000))" 0 8 (fontified t face font-lock-type-face) 8 23 (fontified t) 23 26 (fontified t face font-lock-constant-face) 26 28 (fontified t) 28 32 (fontified t face font-lock-constant-face) 32 34 (fontified t) 34 42 (fontified t face font-lock-type-face) 42 63 (fontified t)) . 1506) (undo-tree-id770 . -2) (undo-tree-id771 . -2) (undo-tree-id772 . -2) (undo-tree-id773 . -2) (undo-tree-id774 . -2) (undo-tree-id775 . -2) (undo-tree-id776 . -2) (undo-tree-id777 . -2) (undo-tree-id778 . -2) (undo-tree-id779 . -2) (undo-tree-id780 . -2) (undo-tree-id781 . -2) (undo-tree-id782 . -2) (undo-tree-id784 . -2) (undo-tree-id785 . -2) (undo-tree-id786 . -2) (t 23730 12904 739058 593000)) ((1506 . 1569)) (23730 13821 379410 846000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((#(" " 0 1 (fontified t)) . 1585)) ((1585 . 1586)) (23730 13611 866618 630000) 0 nil]) ((1585 . 1586) (#("                        " 0 24 (fontified nil)) . 1585) (undo-tree-id589 . 24) (#("
" 0 1 (fontified t)) . -1585) (undo-tree-id590 . 1) 1506) ((1585 . 1586) (1585 . 1609) (#(" " 0 1 (fontified t)) . 1585)) (23730 13611 871092 318000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((#(" " 0 1 (fontified t)) . 1585)) ((1585 . 1586)) (23730 13581 401915 76000) 0 nil]) ((1585 . 1586) (#("                " 0 9 (fontified nil) 9 16 (fontified nil)) . 1585) (undo-tree-id581 . 16) (#("
" 0 1 (fontified t)) . -1585) (undo-tree-id582 . 1) 1584) ((1585 . 1586) (1585 . 1601) (#(" " 0 1 (fontified t)) . 1585)) (23730 13581 407031 900000) 0 nil]) ((#("                   " 0 19 (fontified nil)) . 1585) (undo-tree-id583 . 19) (#("
" 0 1 (fontified t)) . -1585) (undo-tree-id584 . 1) 1584) ((1585 . 1586) (1585 . 1604)) (23730 13581 753960 546000) 0 nil]) ((#("J" 0 1 (fontified t face font-lock-type-face)) . -1585) (undo-tree-id585 . -1) 1586 (1585 . 1586) (#(";" 0 1 (fontified t)) . -1585) (undo-tree-id586 . 1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) 1586) ((1585 . 1586) (#("J" 0 1 (fontified nil face font-lock-type-face)) . 1585) (1585 . 1586)) (23730 13582 105756 328000) 0 nil] [nil ([nil nil ((#("                .map_err;
" 0 9 (fontified t) 9 18 (fontified t) 18 24 (fontified t) 24 25 (fontified t) 25 26 (fontified t)) . 1607) (undo-tree-id501 . -24) 1631) ((1607 . 1633)) (23730 13549 3623 631000) 0 nil]) ((#("(|e| println!(\"{}\", e))" 0 5 (fontified t) 5 13 (fontified t face rust-builtin-formatting-macro-face) 13 14 (fontified t) 14 15 (fontified t face font-lock-string-face) 15 17 (fontified t face rust-string-interpolation-face) 17 18 (fontified t face font-lock-string-face) 18 23 (fontified t)) . 1631)) ((1631 . 1654)) (23730 13549 5331 249000) 0 nil]) ((#(" return Ok(());" 0 1 (fontified t) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 10 (fontified t face font-lock-type-face) 10 15 (fontified t)) . 1606)) ((1606 . 1621)) (23730 13582 432280 73000) 0 nil]) ((#(" " 0 1 (fontified t)) . 1585)) ((1585 . 1586)) (23730 13582 739797 634000) 0 nil]) ((1585 . 1586) (#("                        " 0 24 (fontified nil)) . 1585) (undo-tree-id562 . 24) (undo-tree-id564 . -24) (undo-tree-id566 . -24) (undo-tree-id568 . -24) (undo-tree-id570 . -24) (undo-tree-id572 . -24) (undo-tree-id573 . -24) (undo-tree-id575 . -24) (undo-tree-id577 . -24) (undo-tree-id579 . -24) (#("
" 0 1 (fontified t)) . 1585) (undo-tree-id580 . 1)) ((1585 . 1586) (1585 . 1609) (#(" " 0 1 (fontified t)) . 1585)) (23730 13583 145340 594000) 0 nil]) ((#(".map_?" 0 5 (fontified t) 5 6 (fontified t face rust-question-mark-face)) . 1610) (undo-tree-id546 . -5) (undo-tree-id548 . -5) (undo-tree-id550 . -5) (undo-tree-id552 . -5) (undo-tree-id554 . -5) (undo-tree-id555 . -5) (undo-tree-id557 . -5) (undo-tree-id559 . -5) (undo-tree-id561 . -5)) ((1610 . 1616)) (23730 13583 878038 798000) 0 nil]) ((#("err" 0 3 (fontified t)) . 1615) (undo-tree-id525 . -3) (undo-tree-id527 . -3) (undo-tree-id529 . -3) (undo-tree-id531 . -3) (undo-tree-id533 . -3) (undo-tree-id535 . -3) (undo-tree-id537 . -3) (undo-tree-id539 . -3) (undo-tree-id540 . -3) (undo-tree-id542 . -3) (undo-tree-id544 . -3)) ((1615 . 1618)) (23730 13584 281838 335000) 0 nil]) ((#("(|_| {
                            //shut down the timer if an error occured (e.g. socket was closed)
                            tokio::timer::Error::shutdown()
                        })" 0 35 (fontified t) 35 37 (fontified t face font-lock-comment-delimiter-face) 37 84 (fontified t face font-lock-comment-face) 84 102 (fontified t face font-lock-comment-face) 102 130 (fontified t) 130 135 (fontified t face font-lock-constant-face) 135 137 (fontified t) 137 142 (fontified t face font-lock-constant-face) 142 144 (fontified t) 144 149 (fontified t face font-lock-type-face) 149 188 (fontified t)) . 1618) (undo-tree-id517 . -119) (undo-tree-id519 . -1) (undo-tree-id521 . -187) (undo-tree-id523 . -188)) ((1618 . 1806)) (23730 13585 56724 675000) 0 nil] [nil ([nil nil ((1585 . 1586)) ((#(";" 0 1 (fontified t)) . 1585)) (23730 13490 896524 575000) 0 nil]) ((#(".map_err(|_| {
                            //shut down the timer if an error occured (e.g. socket was closed)
                            tokio::timer::Error::shutdown()
                        })?;
                    return Ok(());
                .map_err(|e| println!(\"{}\", e));
            //start the sender
            tokio::spawn(sender);

            //start the receiver
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)));

            return Ok(());
        " 0 43 (fontified t) 43 45 (fontified t face font-lock-comment-delimiter-face) 45 92 (fontified t face font-lock-comment-face) 92 110 (fontified t face font-lock-comment-face) 110 138 (fontified t) 138 143 (fontified t face font-lock-constant-face) 143 145 (fontified t) 145 150 (fontified t face font-lock-constant-face) 150 152 (fontified t) 152 157 (fontified t face font-lock-type-face) 157 196 (fontified t) 196 197 (fontified t face rust-question-mark-face) 197 199 (fontified t) 199 219 (fontified t) 219 225 (fontified t face font-lock-keyword-face) 225 226 (fontified t) 226 228 (fontified t face font-lock-type-face) 228 233 (fontified t) 233 234 (fontified t) 234 243 (fontified t) 243 252 (fontified t) 252 263 (fontified t) 263 271 (fontified t face rust-builtin-formatting-macro-face) 271 272 (fontified t) 272 273 (fontified t face font-lock-string-face) 273 275 (fontified t face rust-string-interpolation-face) 275 276 (fontified t face font-lock-string-face) 276 282 (fontified t) 282 283 (fontified t) 283 289 (fontified t) 289 295 (fontified t) 295 297 (fontified t face font-lock-comment-delimiter-face) 297 314 (fontified t face font-lock-comment-face) 314 326 (fontified t) 326 331 (fontified t face font-lock-constant-face) 331 361 (fontified t) 361 363 (fontified t face font-lock-comment-delimiter-face) 363 374 (fontified t face font-lock-comment-face) 374 382 (fontified t face font-lock-comment-face) 382 394 (fontified t) 394 397 (fontified t face font-lock-keyword-face) 397 398 (fontified t) 398 406 (fontified t face font-lock-variable-name-face) 406 409 (fontified t) 409 417 (fontified t face font-lock-type-face) 417 438 (fontified t) 438 443 (fontified t face font-lock-constant-face) 443 456 (fontified t) 456 472 (fontified t) 472 474 (fontified t face rust-builtin-formatting-macro-face) 474 476 (fontified t face rust-builtin-formatting-macro-face) 476 480 (face rust-builtin-formatting-macro-face fontified t) 480 481 (fontified t) 481 482 (face font-lock-string-face fontified t) 482 484 (face rust-string-interpolation-face fontified t) 484 485 (face font-lock-string-face fontified t) 485 493 (fontified t) 493 506 (fontified t) 506 512 (fontified t face font-lock-keyword-face) 512 513 (fontified t) 513 515 (fontified t face font-lock-type-face) 515 529 (fontified t)) . 1610)) ((1610 . 2139)) (23730 13490 930964 347000) 0 nil]) ((1505 . 1506)) ((#(" " 0 1 (fontified t)) . 1505) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1)) (23730 13612 217295 140000) 0 nil]) ((#("
)" 0 1 (fontified t) 1 2 (fontified t)) . 1842) (#("(" 0 1 (fontified t)) . -1505) (undo-tree-id493 . -1) (undo-tree-id494 . -1) 1506) ((1505 . 1506) (1842 . 1844)) (23730 13612 388226 607000) 0 nil]) ((#("this lambda is invoked once per passed second " 0 45 (fontified t) 45 46 (fontified t)) . 1506) (undo-tree-id496 . -45)) ((1506 . 1552)) (23730 13612 867271 224000) 0 nil]) ((#("move |_| //" 0 4 (fontified t face font-lock-keyword-face) 4 9 (fontified t) 9 11 (fontified t face font-lock-comment-delimiter-face)) . 1506)) ((1506 . 1517)) (23730 13613 184779 922000) 0 nil]) ((#(" .for_each" 0 1 (fontified t) 1 2 (fontified t) 2 10 (fontified t)) . 1505) (undo-tree-id499 . -1)) ((1505 . 1515)) (23730 13613 500376 552000) 0 nil]) ((1572 . 1573) (#("                    " 0 20 (fontified nil)) . 1572) (#("
" 0 1 (fontified t face font-lock-comment-face)) . -1572) 1506) ((1572 . 1573) (1572 . 1592) (#(" " 0 1 (fontified t face font-lock-comment-face)) . 1572)) (23730 13613 810625 56000) 0 nil] [nil nil ((#(".for_each(move |_| //this lambda is invoked once per passed second
                    tx.poll_write(\"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes())
                        .map_err(|_| {
                            //shut down the timer if an error occured (e.g. socket was closed)
                            tokio::timer::Error::shutdown()
                        })?;
                    return Ok(());
)
                .map_err(|e| println!(\"{}\", e));
            //start the sender
            tokio::spawn(sender);

            //start the receiver
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)));

            return Ok(());
        " 0 1 (fontified t) 1 10 (fontified t) 10 14 (fontified t face font-lock-keyword-face) 14 19 (fontified t) 19 21 (fontified t face font-lock-comment-delimiter-face) 21 67 (fontified t face font-lock-comment-face) 67 101 (fontified t) 101 154 (fontified t face font-lock-string-face) 154 166 (fontified t) 166 234 (fontified t) 234 236 (fontified t face font-lock-comment-delimiter-face) 236 283 (fontified t face font-lock-comment-face) 283 301 (fontified t face font-lock-comment-face) 301 329 (fontified t) 329 334 (fontified t face font-lock-constant-face) 334 336 (fontified t) 336 341 (fontified t face font-lock-constant-face) 341 343 (fontified t) 343 348 (fontified t face font-lock-type-face) 348 387 (fontified t) 387 388 (fontified t face rust-question-mark-face) 388 410 (fontified t) 410 416 (fontified t face font-lock-keyword-face) 416 417 (fontified t) 417 419 (fontified t face font-lock-type-face) 419 425 (fontified t) 425 427 (fontified t) 427 436 (fontified t) 436 445 (fontified t) 445 456 (fontified t) 456 464 (fontified t face rust-builtin-formatting-macro-face) 464 465 (fontified t) 465 466 (fontified t face font-lock-string-face) 466 468 (fontified t face rust-string-interpolation-face) 468 469 (fontified t face font-lock-string-face) 469 476 (fontified t) 476 482 (fontified t) 482 488 (fontified t) 488 490 (fontified t face font-lock-comment-delimiter-face) 490 507 (fontified t face font-lock-comment-face) 507 519 (fontified t) 519 524 (fontified t face font-lock-constant-face) 524 554 (fontified t) 554 556 (fontified t face font-lock-comment-delimiter-face) 556 567 (fontified t face font-lock-comment-face) 567 575 (face font-lock-comment-face fontified t) 575 587 (fontified t) 587 590 (fontified t face font-lock-keyword-face) 590 591 (fontified t) 591 599 (fontified t face font-lock-variable-name-face) 599 602 (fontified t) 602 610 (fontified t face font-lock-type-face) 610 631 (fontified t) 631 636 (fontified t face font-lock-constant-face) 636 649 (fontified t) 649 665 (fontified t) 665 673 (fontified t face rust-builtin-formatting-macro-face) 673 674 (fontified t) 674 675 (fontified t face font-lock-string-face) 675 677 (fontified t face rust-string-interpolation-face) 677 678 (fontified t face font-lock-string-face) 678 686 (fontified t) 686 699 (fontified t) 699 705 (fontified t face font-lock-keyword-face) 705 706 (fontified t) 706 708 (fontified t face font-lock-type-face) 708 722 (fontified t)) . 1506) (undo-tree-id483 . -117) (undo-tree-id484 . -117) (undo-tree-id485 . -1) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . 609) (undo-tree-id489 . -123) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1)) ((1506 . 2228)) (23730 13431 367569 505000) 0 nil]) ((#("                }" 0 17 (fontified t)) . 1931) (#("{
                    " 0 2 (fontified t) 2 22 (fontified t)) . 1525) 1621) ((1525 . 1547) (1931 . 1948)) (23730 13614 359828 477000) 0 nil] [nil nil ((#("for_each(move |_| {
                    //this lambda is invoked once per passed second
                    tx.poll_write(\"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes())
                        .map_err(|_| {
                            //shut down the timer if an error occured (e.g. socket was closed)
                            tokio::timer::Error::shutdown()
                        })?;
                    return Ok(());
                })
                .map_err(|e| println!(\"{}\", e));
            //start the sender
            tokio::spawn(sender);

            //start the receiver
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)));

            return Ok(());
        " 0 9 (fontified t) 9 13 (fontified t face font-lock-keyword-face) 13 20 (fontified t) 20 40 (fontified t) 40 42 (fontified t face font-lock-comment-delimiter-face) 42 88 (fontified t face font-lock-comment-face) 88 122 (fontified t) 122 175 (fontified t face font-lock-string-face) 175 187 (fontified t) 187 255 (fontified t) 255 257 (fontified t face font-lock-comment-delimiter-face) 257 304 (fontified t face font-lock-comment-face) 304 322 (fontified t face font-lock-comment-face) 322 350 (fontified t) 350 355 (fontified t face font-lock-constant-face) 355 357 (fontified t) 357 362 (fontified t face font-lock-constant-face) 362 364 (fontified t) 364 369 (fontified t face font-lock-type-face) 369 408 (fontified t) 408 409 (fontified t face rust-question-mark-face) 409 431 (fontified t) 431 437 (fontified t face font-lock-keyword-face) 437 438 (fontified t) 438 440 (fontified t face font-lock-type-face) 440 483 (fontified t) 483 494 (fontified t) 494 502 (fontified t face rust-builtin-formatting-macro-face) 502 503 (fontified t) 503 504 (fontified t face font-lock-string-face) 504 506 (fontified t face rust-string-interpolation-face) 506 507 (fontified t face font-lock-string-face) 507 514 (fontified t) 514 520 (fontified t) 520 526 (fontified t) 526 528 (face font-lock-comment-delimiter-face fontified t) 528 545 (face font-lock-comment-face fontified t) 545 557 (fontified t) 557 562 (fontified t face font-lock-constant-face) 562 592 (fontified t) 592 594 (fontified t face font-lock-comment-delimiter-face) 594 613 (fontified t face font-lock-comment-face) 613 625 (fontified t) 625 628 (fontified t face font-lock-keyword-face) 628 629 (fontified t) 629 637 (fontified t face font-lock-variable-name-face) 637 640 (fontified t) 640 648 (fontified t face font-lock-type-face) 648 669 (fontified t) 669 674 (fontified t face font-lock-constant-face) 674 687 (fontified t) 687 703 (fontified t) 703 711 (fontified t face rust-builtin-formatting-macro-face) 711 712 (fontified t) 712 713 (fontified t face font-lock-string-face) 713 715 (fontified t face rust-string-interpolation-face) 715 716 (fontified t face font-lock-string-face) 716 724 (fontified t) 724 737 (fontified t) 737 743 (fontified t face font-lock-keyword-face) 743 744 (fontified t) 744 746 (fontified t face font-lock-type-face) 746 760 (fontified t)) . 1507) (undo-tree-id433 . -138) (undo-tree-id434 . -138)) ((1507 . 2267)) (23730 13411 147933 496000) 0 nil]) ((1505 . 1506) (#("                 " 0 1 (fontified nil) 1 17 (fontified nil)) . 1505) (undo-tree-id435 . -1) (undo-tree-id436 . -1) (undo-tree-id437 . -1) (undo-tree-id438 . -1) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) (#("
" 0 1 (fontified t)) . -1506) 1505) ((1506 . 1507) (1505 . 1522) (#(" " 0 1 (fontified t)) . 1505) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1)) (23730 13614 712565 919000) 0 nil]) ((#("Interval::new_interval(std::time::Duration::from_millis(10000))" 0 8 (fontified t face font-lock-type-face) 8 23 (fontified t) 23 26 (fontified t face font-lock-constant-face) 26 28 (fontified t) 28 32 (fontified t face font-lock-constant-face) 32 34 (fontified t) 34 42 (fontified t face font-lock-type-face) 42 63 (fontified t)) . 1506) (undo-tree-id752 . -2) (undo-tree-id753 . -2) (undo-tree-id754 . -2) (undo-tree-id755 . -2) (undo-tree-id756 . -2) (undo-tree-id757 . -2) (undo-tree-id758 . -2) (undo-tree-id759 . -2) (undo-tree-id760 . -2) (undo-tree-id761 . -2) (undo-tree-id762 . -2) (undo-tree-id763 . -2) (undo-tree-id764 . -2) (t 23730 12904 739058 593000)) ((1506 . 1569)) (23730 13621 497297 810000) 0 nil]) ((1 . 2418) (#("use futures::{Future, Poll, Stream};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf};
use tokio::net::TcpStream;
use tokio::prelude::*;
use tokio::timer::Interval;

//Receiver struct that implements the future trait
//this exclusively handles incomming data and prints it to stdout
struct Receiver {
    rx: ReadHalf<TcpStream>, //receiving half of the socket stream
}
impl Future for Receiver {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(()));
            } //socket closed
            print!(\"{}\", String::from_utf8_lossy(&buffer[..num_bytes_read]));
        }
        return Ok(Async::NotReady);
    }
}

fn main() {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    //wait for the connection to be established
    let client = connection
        .and_then(|socket| {
            //split the successfully connected socket in half (receive / send)
            let (rx, mut tx) = socket.split();

            //set up a simple sender, that periodically (1/10sec) sends the same message
            let sender = Interval::new_interval(std::time::Duration::from_millis(10000))
                .for_each(move |_| {
                    //this lambda is invoked once per passed second
                    tx.poll_write(\"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes()).map_err(|_| {
                        //shut down the timer if an error occured (e.g. socket was closed)
                        tokio::timer::Error::shutdown()
                    })?;
                    return Ok(());
                })
                .map_err(|e| println!(\"{}\", e));
            //start the sender
            tokio::spawn(sender);

            //start the receiver
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)));

            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));

    tokio::run(client);
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-type-face) 26 28 (fontified t) 28 34 (fontified t face font-lock-type-face) 34 36 (fontified t) 36 37 (fontified t) 37 40 (fontified t face font-lock-keyword-face) 40 41 (fontified t) 41 46 (fontified t face font-lock-constant-face) 46 48 (fontified t) 48 50 (fontified t face font-lock-constant-face) 50 53 (fontified t) 53 62 (fontified t face font-lock-type-face) 62 64 (fontified t) 64 74 (fontified t face font-lock-type-face) 74 76 (fontified t) 76 81 (fontified t face font-lock-type-face) 81 83 (fontified t) 83 91 (fontified t face font-lock-type-face) 91 94 (fontified t) 94 97 (fontified t face font-lock-keyword-face) 97 98 (fontified t) 98 103 (fontified t face font-lock-constant-face) 103 105 (fontified t) 105 108 (fontified t face font-lock-constant-face) 108 110 (fontified t) 110 119 (fontified t face font-lock-type-face) 119 121 (fontified t) 121 124 (fontified t face font-lock-keyword-face) 124 125 (fontified t) 125 130 (fontified t face font-lock-constant-face) 130 132 (fontified t) 132 139 (fontified t face font-lock-constant-face) 139 144 (fontified t) 144 147 (fontified t face font-lock-keyword-face) 147 148 (fontified t) 148 153 (fontified t face font-lock-constant-face) 153 155 (fontified t) 155 160 (fontified t face font-lock-constant-face) 160 162 (fontified t) 162 170 (fontified t face font-lock-type-face) 170 173 (fontified t) 173 175 (fontified t face font-lock-comment-delimiter-face) 175 224 (fontified t face font-lock-comment-face) 224 226 (fontified t face font-lock-comment-delimiter-face) 226 290 (fontified t face font-lock-comment-face) 290 296 (fontified t face font-lock-keyword-face) 296 297 (fontified t) 297 305 (fontified t face font-lock-type-face) 305 312 (fontified t) 312 314 (fontified t face font-lock-variable-name-face) 314 316 (fontified t) 316 324 (fontified t face font-lock-type-face) 324 325 (fontified t) 325 334 (fontified t face font-lock-type-face) 334 337 (fontified t) 337 339 (fontified t face font-lock-comment-delimiter-face) 339 375 (fontified t face font-lock-comment-face) 375 377 (fontified t) 377 381 (fontified t face font-lock-keyword-face) 381 382 (fontified t) 382 388 (fontified t face font-lock-type-face) 388 389 (fontified t) 389 392 (fontified t face font-lock-keyword-face) 392 393 (fontified t) 393 401 (fontified t face font-lock-type-face) 401 408 (fontified t) 408 412 (fontified t face font-lock-keyword-face) 412 413 (fontified t) 413 417 (fontified t face font-lock-type-face) 417 428 (fontified t) 428 432 (fontified t face font-lock-keyword-face) 432 433 (fontified t) 433 438 (fontified t face font-lock-type-face) 438 441 (fontified t) 441 446 (fontified t face font-lock-type-face) 446 453 (fontified t) 453 455 (fontified t face font-lock-keyword-face) 455 456 (fontified t) 456 460 (fontified t face font-lock-function-name-face) 460 462 (fontified t) 462 465 (fontified t face font-lock-keyword-face) 465 466 (fontified t) 466 470 (fontified t face font-lock-keyword-face) 470 473 (fontified t) 473 474 (fontified t syntax-table #1#) 474 475 (fontified t) 475 479 (fontified t face font-lock-type-face) 479 480 (fontified t) 480 484 (fontified t face font-lock-type-face) 484 486 (fontified t) 486 490 (fontified t face font-lock-type-face) 490 492 (fontified t) 492 496 (fontified t face font-lock-type-face) 496 498 (fontified t) 498 500 (fontified t face font-lock-type-face) 500 503 (fontified t face font-lock-type-face) 503 507 (fontified t) 507 515 (fontified t) 515 518 (fontified t face font-lock-keyword-face) 518 519 (fontified t) 519 522 (fontified t face font-lock-keyword-face) 522 523 (fontified t) 523 529 (fontified t face font-lock-variable-name-face) 529 532 (fontified t) 532 536 (fontified t face font-lock-preprocessor-face) 536 549 (fontified t) 549 551 (fontified t face font-lock-comment-delimiter-face) 551 592 (fontified t face font-lock-comment-face) 592 634 (fontified t) 634 636 (fontified t face font-lock-comment-delimiter-face) 636 690 (fontified t face font-lock-comment-face) 690 698 (fontified t) 698 703 (fontified t face font-lock-keyword-face) 703 704 (fontified t) 704 707 (fontified t face font-lock-keyword-face) 707 708 (fontified t) 708 713 (fontified t face font-lock-type-face) 713 715 (fontified t) 715 720 (fontified t face font-lock-type-face) 720 739 (fontified t) 739 743 (fontified t face font-lock-keyword-face) 743 758 (fontified t) 758 761 (fontified t face font-lock-keyword-face) 761 769 (fontified t) 769 770 (fontified t face rust-question-mark-face) 770 785 (fontified t) 785 787 (fontified t face font-lock-keyword-face) 787 826 (fontified t) 826 832 (fontified t face font-lock-keyword-face) 832 833 (fontified t) 833 835 (fontified t face font-lock-type-face) 835 836 (fontified t) 836 841 (fontified t face font-lock-type-face) 841 843 (fontified t) 843 848 (fontified t face font-lock-type-face) 848 855 (fontified t) 855 869 (fontified t) 869 871 (fontified t face font-lock-comment-delimiter-face) 871 885 (fontified t face font-lock-comment-face) 885 897 (fontified t) 897 903 (fontified t face rust-builtin-formatting-macro-face) 903 904 (fontified t) 904 905 (fontified t face font-lock-string-face) 905 907 (fontified t face rust-string-interpolation-face) 907 908 (fontified t face font-lock-string-face) 908 910 (fontified t) 910 916 (fontified t face font-lock-type-face) 916 981 (fontified t) 981 987 (fontified t face font-lock-keyword-face) 987 988 (fontified t) 988 990 (fontified t face font-lock-type-face) 990 991 (fontified t) 991 996 (fontified t face font-lock-type-face) 996 998 (fontified t) 998 1006 (fontified t face font-lock-type-face) 1006 1018 (fontified t) 1018 1020 (fontified t face font-lock-keyword-face) 1020 1021 (fontified t) 1021 1025 (fontified t face font-lock-function-name-face) 1025 1030 (fontified t) 1030 1034 (fontified t) 1034 1037 (fontified t face font-lock-keyword-face) 1037 1038 (fontified t) 1038 1045 (fontified t face font-lock-variable-name-face) 1045 1048 (fontified t) 1048 1064 (fontified t face font-lock-string-face) 1064 1080 (fontified t) 1080 1092 (fontified t face font-lock-string-face) 1092 1105 (fontified t face font-lock-string-face) 1105 1108 (fontified t) 1108 1112 (fontified t) 1112 1115 (fontified t face font-lock-keyword-face) 1115 1116 (fontified t) 1116 1126 (fontified t face font-lock-variable-name-face) 1126 1129 (fontified t) 1129 1138 (fontified t face font-lock-type-face) 1138 1163 (fontified t) 1163 1165 (fontified t face font-lock-comment-delimiter-face) 1165 1207 (fontified t face font-lock-comment-face) 1207 1211 (fontified t) 1211 1214 (fontified t face font-lock-keyword-face) 1214 1215 (fontified t) 1215 1221 (fontified t face font-lock-variable-name-face) 1221 1276 (fontified t) 1276 1278 (fontified t face font-lock-comment-delimiter-face) 1278 1343 (fontified t face font-lock-comment-face) 1343 1355 (fontified t) 1355 1358 (face font-lock-keyword-face fontified t) 1358 1364 (fontified t) 1364 1367 (face font-lock-keyword-face fontified t) 1367 1390 (fontified t) 1390 1391 (fontified t) 1391 1403 (fontified t) 1403 1405 (fontified t face font-lock-comment-delimiter-face) 1405 1480 (fontified t face font-lock-comment-face) 1480 1492 (fontified t) 1492 1495 (fontified t face font-lock-keyword-face) 1495 1496 (fontified t) 1496 1502 (fontified t face font-lock-variable-name-face) 1502 1505 (fontified t) 1505 1513 (fontified t face font-lock-type-face) 1513 1528 (fontified t) 1528 1531 (fontified t face font-lock-constant-face) 1531 1533 (fontified t) 1533 1537 (fontified t face font-lock-constant-face) 1537 1539 (fontified t) 1539 1547 (fontified t face font-lock-type-face) 1547 1569 (fontified t) 1569 1595 (fontified t) 1595 1599 (fontified t face font-lock-keyword-face) 1599 1612 (fontified t) 1612 1626 (fontified t) 1626 1628 (fontified t face font-lock-comment-delimiter-face) 1628 1674 (fontified t face font-lock-comment-face) 1674 1708 (fontified t) 1708 1709 (fontified t face font-lock-string-face) 1709 1759 (fontified t face font-lock-string-face) 1759 1760 (rear-nonsticky t fontified t face font-lock-string-face) 1760 1761 (fontified t face font-lock-string-face) 1761 1762 (fontified t) 1762 1770 (fontified t) 1770 1772 (fontified t) 1772 1788 (fontified t) 1788 1812 (fontified t) 1812 1814 (fontified t face font-lock-comment-delimiter-face) 1814 1879 (fontified t face font-lock-comment-face) 1879 1890 (fontified t) 1890 1903 (fontified t) 1903 1908 (face font-lock-constant-face fontified t) 1908 1910 (fontified t) 1910 1915 (face font-lock-constant-face fontified t) 1915 1917 (fontified t) 1917 1922 (face font-lock-type-face fontified t) 1922 1935 (fontified t) 1935 1957 (fontified t) 1957 1958 (fontified t face rust-question-mark-face) 1958 1980 (fontified t) 1980 1986 (fontified t face font-lock-keyword-face) 1986 1987 (fontified t) 1987 1989 (fontified t face font-lock-type-face) 1989 2017 (fontified t) 2017 2043 (fontified t) 2043 2051 (fontified t face rust-builtin-formatting-macro-face) 2051 2052 (fontified t) 2052 2053 (fontified t face font-lock-string-face) 2053 2055 (fontified t face rust-string-interpolation-face) 2055 2056 (fontified t face font-lock-string-face) 2056 2063 (fontified t) 2063 2075 (fontified t) 2075 2077 (fontified t face font-lock-comment-delimiter-face) 2077 2094 (fontified t face font-lock-comment-face) 2094 2105 (fontified t) 2105 2106 (fontified t) 2106 2111 (fontified t face font-lock-constant-face) 2111 2128 (fontified t) 2128 2129 (fontified t) 2129 2141 (fontified t) 2141 2143 (fontified t face font-lock-comment-delimiter-face) 2143 2162 (fontified t face font-lock-comment-face) 2162 2174 (fontified t) 2174 2177 (fontified t face font-lock-keyword-face) 2177 2178 (fontified t) 2178 2186 (fontified t face font-lock-variable-name-face) 2186 2189 (fontified t) 2189 2197 (fontified t face font-lock-type-face) 2197 2210 (fontified t) 2210 2218 (fontified t) 2218 2223 (fontified t face font-lock-constant-face) 2223 2252 (fontified t) 2252 2260 (fontified t face rust-builtin-formatting-macro-face) 2260 2261 (fontified t) 2261 2262 (fontified t face font-lock-string-face) 2262 2264 (fontified t face rust-string-interpolation-face) 2264 2265 (fontified t face font-lock-string-face) 2265 2273 (fontified t) 2273 2286 (fontified t) 2286 2288 (fontified t face font-lock-keyword-face) 2288 2292 (fontified t face font-lock-keyword-face) 2292 2293 (fontified t) 2293 2295 (fontified t face font-lock-type-face) 2295 2301 (fontified t) 2301 2333 (fontified t) 2333 2341 (fontified t face rust-builtin-formatting-macro-face) 2341 2342 (fontified t) 2342 2343 (fontified t face font-lock-string-face) 2343 2345 (fontified t face rust-string-interpolation-face) 2345 2346 (fontified t face font-lock-string-face) 2346 2358 (fontified t) 2358 2363 (fontified t face font-lock-constant-face) 2363 2380 (fontified t)) . 1) (undo-tree-id720 . 608) (undo-tree-id721 . -1709) (undo-tree-id722 . -1709) (undo-tree-id723 . -1759) (undo-tree-id724 . -688) (undo-tree-id725 . -688) (undo-tree-id726 . -1059) (undo-tree-id727 . -1058) (undo-tree-id728 . -1059) (undo-tree-id729 . -1059) (undo-tree-id730 . -1059) (undo-tree-id731 . -855) (undo-tree-id732 . -1708) (undo-tree-id733 . -1708) (undo-tree-id734 . -1708) (undo-tree-id735 . -855) (undo-tree-id736 . -1059) (undo-tree-id737 . -1708) (undo-tree-id738 . -1708) (undo-tree-id739 . -1708) (undo-tree-id740 . -1709) (undo-tree-id741 . -855) (undo-tree-id742 . -1769) (undo-tree-id743 . -1769) (undo-tree-id744 . -885) (undo-tree-id745 . -1724) (undo-tree-id747 . -1724) (undo-tree-id749 . -1724) (undo-tree-id750 . 660) (undo-tree-id751 . -1730)) ((1 . 2381) (#("use futures::{Future, Poll, Stream};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf};
use tokio::net::TcpStream;
use tokio::prelude::*;
use tokio::timer::Interval;

//Receiver struct that implements the future trait
//this exclusively handles incomming data and prints it to stdout
struct Receiver {
    rx: ReadHalf<TcpStream>, //receiving half of the socket stream
}
impl Future for Receiver {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(()));
            } //socket closed
            print!(\"{}\", String::from_utf8_lossy(&buffer[..num_bytes_read]));
        }
        return Ok(Async::NotReady);
    }
}

fn main() {
    let address = \"127.0.0.1:6379\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    //wait for the connection to be established
    let client = connection
        .and_then(|socket| {
            //split the successfully connected socket in half (receive / send)
            let (rx, mut tx) = socket.split();

            //set up a simple sender, that periodically (1/10sec) sends the same message
            let sender = Interval::new_interval(std::time::Duration::from_millis(10000))
                .for_each(move |_| {
                    //this lambda is invoked once per passed second
                    tx.poll_write(\"*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n\".as_bytes())
                        .map_err(|_| {
                            //shut down the timer if an error occured (e.g. socket was closed)
                            tokio::timer::Error::shutdown()
                        })?;
                    return Ok(());
                })
                .map_err(|e| println!(\"{}\", e));
            //start the sender
            tokio::spawn(sender);

            //start the receiver
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)));

            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));

    tokio::run(client);
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-type-face) 26 28 (fontified t) 28 34 (fontified t face font-lock-type-face) 34 37 (fontified t) 37 40 (fontified t face font-lock-keyword-face) 40 41 (fontified t) 41 46 (fontified t face font-lock-constant-face) 46 48 (fontified t) 48 50 (fontified t face font-lock-constant-face) 50 53 (fontified t) 53 62 (fontified t face font-lock-type-face) 62 64 (fontified t) 64 74 (fontified t face font-lock-type-face) 74 76 (fontified t) 76 81 (fontified t face font-lock-type-face) 81 83 (fontified t) 83 91 (fontified t face font-lock-type-face) 91 94 (fontified t) 94 97 (fontified t face font-lock-keyword-face) 97 98 (fontified t) 98 103 (fontified t face font-lock-constant-face) 103 105 (fontified t) 105 108 (fontified t face font-lock-constant-face) 108 110 (fontified t) 110 119 (fontified t face font-lock-type-face) 119 121 (fontified t) 121 124 (fontified t face font-lock-keyword-face) 124 125 (fontified t) 125 130 (fontified t face font-lock-constant-face) 130 132 (fontified t) 132 139 (fontified t face font-lock-constant-face) 139 144 (fontified t) 144 147 (fontified t face font-lock-keyword-face) 147 148 (fontified t) 148 153 (fontified t face font-lock-constant-face) 153 155 (fontified t) 155 160 (fontified t face font-lock-constant-face) 160 162 (fontified t) 162 170 (fontified t face font-lock-type-face) 170 173 (fontified t) 173 175 (fontified t face font-lock-comment-delimiter-face) 175 224 (fontified t face font-lock-comment-face) 224 226 (fontified t face font-lock-comment-delimiter-face) 226 290 (fontified t face font-lock-comment-face) 290 296 (fontified t face font-lock-keyword-face) 296 297 (fontified t) 297 305 (fontified t face font-lock-type-face) 305 312 (fontified t) 312 314 (fontified t face font-lock-variable-name-face) 314 316 (fontified t) 316 324 (fontified t face font-lock-type-face) 324 325 (fontified t) 325 334 (fontified t face font-lock-type-face) 334 337 (fontified t) 337 339 (fontified t face font-lock-comment-delimiter-face) 339 375 (fontified t face font-lock-comment-face) 375 377 (fontified t) 377 381 (fontified t face font-lock-keyword-face) 381 382 (fontified t) 382 388 (fontified t face font-lock-type-face) 388 389 (fontified t) 389 392 (fontified t face font-lock-keyword-face) 392 393 (fontified t) 393 401 (fontified t face font-lock-type-face) 401 408 (fontified t) 408 412 (fontified t face font-lock-keyword-face) 412 413 (fontified t) 413 417 (fontified t face font-lock-type-face) 417 428 (fontified t) 428 432 (fontified t face font-lock-keyword-face) 432 433 (fontified t) 433 438 (fontified t face font-lock-type-face) 438 441 (fontified t) 441 446 (fontified t face font-lock-type-face) 446 453 (fontified t) 453 455 (fontified t face font-lock-keyword-face) 455 456 (fontified t) 456 460 (fontified t face font-lock-function-name-face) 460 462 (fontified t) 462 465 (fontified t face font-lock-keyword-face) 465 466 (fontified t) 466 470 (fontified t face font-lock-keyword-face) 470 473 (fontified t) 473 474 (fontified t syntax-table #1#) 474 475 (fontified t) 475 479 (fontified t face font-lock-type-face) 479 480 (fontified t) 480 484 (fontified t face font-lock-type-face) 484 486 (fontified t) 486 490 (fontified t face font-lock-type-face) 490 492 (fontified t) 492 496 (fontified t face font-lock-type-face) 496 498 (fontified t) 498 500 (fontified t face font-lock-type-face) 500 503 (fontified t face font-lock-type-face) 503 507 (fontified t) 507 515 (fontified t) 515 518 (fontified t face font-lock-keyword-face) 518 519 (fontified t) 519 522 (fontified t face font-lock-keyword-face) 522 523 (fontified t) 523 529 (fontified t face font-lock-variable-name-face) 529 532 (fontified t) 532 536 (fontified t face font-lock-preprocessor-face) 536 549 (fontified t) 549 551 (fontified t face font-lock-comment-delimiter-face) 551 592 (fontified t face font-lock-comment-face) 592 634 (fontified t) 634 636 (fontified t face font-lock-comment-delimiter-face) 636 690 (fontified t face font-lock-comment-face) 690 698 (fontified t) 698 703 (fontified t face font-lock-keyword-face) 703 704 (fontified t) 704 707 (fontified t face font-lock-keyword-face) 707 708 (fontified t) 708 713 (fontified t face font-lock-type-face) 713 715 (fontified t) 715 720 (fontified t face font-lock-type-face) 720 739 (fontified t) 739 743 (fontified t face font-lock-keyword-face) 743 758 (fontified t) 758 761 (fontified t face font-lock-keyword-face) 761 769 (fontified t) 769 770 (fontified t face rust-question-mark-face) 770 785 (fontified t) 785 787 (fontified t face font-lock-keyword-face) 787 826 (fontified t) 826 832 (fontified t face font-lock-keyword-face) 832 833 (fontified t) 833 835 (fontified t face font-lock-type-face) 835 836 (fontified t) 836 841 (fontified t face font-lock-type-face) 841 843 (fontified t) 843 848 (fontified t face font-lock-type-face) 848 855 (fontified t) 855 869 (fontified t) 869 871 (fontified t face font-lock-comment-delimiter-face) 871 884 (fontified t face font-lock-comment-face) 884 885 (fontified t face font-lock-comment-face) 885 897 (fontified t) 897 903 (fontified t face rust-builtin-formatting-macro-face) 903 904 (fontified t) 904 905 (fontified t face font-lock-string-face) 905 907 (fontified t face rust-string-interpolation-face) 907 908 (fontified t face font-lock-string-face) 908 910 (fontified t) 910 916 (fontified t face font-lock-type-face) 916 981 (fontified t) 981 987 (fontified t face font-lock-keyword-face) 987 988 (fontified t) 988 990 (fontified t face font-lock-type-face) 990 991 (fontified t) 991 996 (fontified t face font-lock-type-face) 996 998 (fontified t) 998 1006 (fontified t face font-lock-type-face) 1006 1018 (fontified t) 1018 1020 (fontified t face font-lock-keyword-face) 1020 1021 (fontified t) 1021 1025 (fontified t face font-lock-function-name-face) 1025 1034 (fontified t) 1034 1037 (fontified t face font-lock-keyword-face) 1037 1038 (fontified t) 1038 1045 (fontified t face font-lock-variable-name-face) 1045 1048 (fontified t) 1048 1064 (fontified t face font-lock-string-face) 1064 1080 (fontified t) 1080 1105 (fontified t face font-lock-string-face) 1105 1112 (fontified t) 1112 1115 (fontified t face font-lock-keyword-face) 1115 1116 (fontified t) 1116 1126 (fontified t face font-lock-variable-name-face) 1126 1129 (fontified t) 1129 1138 (fontified t face font-lock-type-face) 1138 1163 (fontified t) 1163 1165 (fontified t face font-lock-comment-delimiter-face) 1165 1207 (fontified t face font-lock-comment-face) 1207 1211 (fontified t) 1211 1214 (fontified t face font-lock-keyword-face) 1214 1215 (fontified t) 1215 1221 (fontified t face font-lock-variable-name-face) 1221 1276 (fontified t) 1276 1278 (fontified t face font-lock-comment-delimiter-face) 1278 1343 (fontified t face font-lock-comment-face) 1343 1355 (fontified t) 1355 1358 (face font-lock-keyword-face fontified t) 1358 1364 (fontified t) 1364 1367 (face font-lock-keyword-face fontified t) 1367 1384 (fontified t) 1384 1390 (fontified t) 1390 1403 (fontified t) 1403 1405 (fontified t face font-lock-comment-delimiter-face) 1405 1480 (fontified t face font-lock-comment-face) 1480 1492 (fontified t) 1492 1495 (fontified t face font-lock-keyword-face) 1495 1496 (fontified t) 1496 1502 (fontified t face font-lock-variable-name-face) 1502 1504 (fontified t) 1504 1505 (fontified t) 1505 1513 (fontified t face font-lock-type-face) 1513 1528 (fontified t) 1528 1531 (fontified t face font-lock-constant-face) 1531 1533 (fontified t) 1533 1537 (fontified t face font-lock-constant-face) 1537 1539 (fontified t) 1539 1547 (fontified t face font-lock-type-face) 1547 1568 (fontified t) 1568 1569 (fontified t) 1569 1585 (fontified t) 1585 1586 (fontified t) 1586 1593 (fontified t) 1593 1594 (fontified t) 1594 1595 (fontified t) 1595 1596 (fontified t face font-lock-keyword-face) 1596 1597 (fontified t face font-lock-keyword-face) 1597 1598 (fontified t face font-lock-keyword-face) 1598 1599 (fontified t face font-lock-keyword-face) 1599 1600 (fontified t) 1600 1601 (fontified t) 1601 1602 (fontified t) 1602 1603 (fontified t) 1603 1604 (fontified t) 1604 1605 (fontified t) 1605 1606 (fontified t) 1606 1626 (fontified t) 1626 1628 (fontified t face font-lock-comment-delimiter-face) 1628 1673 (fontified t face font-lock-comment-face) 1673 1674 (fontified t face font-lock-comment-face) 1674 1694 (fontified t) 1694 1708 (fontified t) 1708 1761 (fontified t face font-lock-string-face) 1761 1773 (fontified t) 1773 1774 (fontified t) 1774 1798 (fontified t) 1798 1803 (fontified t) 1803 1806 (fontified t) 1806 1813 (fontified t) 1813 1841 (fontified t) 1841 1843 (fontified t face font-lock-comment-delimiter-face) 1843 1890 (fontified t face font-lock-comment-face) 1890 1908 (fontified t face font-lock-comment-face) 1908 1936 (fontified t) 1936 1941 (fontified t face font-lock-constant-face) 1941 1943 (fontified t) 1943 1948 (fontified t face font-lock-constant-face) 1948 1950 (fontified t) 1950 1955 (fontified t face font-lock-type-face) 1955 1968 (fontified t) 1968 1994 (fontified t) 1994 1995 (fontified t face rust-question-mark-face) 1995 1996 (fontified t) 1996 1997 (fontified t) 1997 2016 (fontified t) 2016 2017 (fontified t) 2017 2023 (fontified t face font-lock-keyword-face) 2023 2024 (fontified t) 2024 2026 (fontified t face font-lock-type-face) 2026 2031 (fontified t) 2031 2032 (fontified t) 2032 2048 (fontified t) 2048 2049 (fontified t) 2049 2050 (fontified t) 2050 2051 (fontified t) 2051 2060 (fontified t) 2060 2067 (fontified t) 2067 2069 (fontified t) 2069 2075 (fontified t) 2075 2080 (fontified t) 2080 2088 (face rust-builtin-formatting-macro-face fontified t) 2088 2089 (fontified t) 2089 2090 (face font-lock-string-face fontified t) 2090 2092 (face rust-string-interpolation-face fontified t) 2092 2093 (face font-lock-string-face fontified t) 2093 2098 (fontified t) 2098 2099 (fontified t) 2099 2100 (fontified t) 2100 2106 (fontified t) 2106 2112 (fontified t) 2112 2114 (fontified t face font-lock-comment-delimiter-face) 2114 2131 (fontified t face font-lock-comment-face) 2131 2143 (fontified t) 2143 2148 (fontified t face font-lock-constant-face) 2148 2174 (fontified t) 2174 2178 (fontified t) 2178 2180 (fontified t face font-lock-comment-delimiter-face) 2180 2191 (fontified t face font-lock-comment-face) 2191 2199 (fontified t face font-lock-comment-face) 2199 2211 (fontified t) 2211 2214 (fontified t face font-lock-keyword-face) 2214 2215 (fontified t) 2215 2223 (fontified t face font-lock-variable-name-face) 2223 2226 (fontified t) 2226 2234 (fontified t face font-lock-type-face) 2234 2255 (fontified t) 2255 2260 (fontified t face font-lock-constant-face) 2260 2273 (fontified t) 2273 2274 (fontified t) 2274 2289 (fontified t) 2289 2291 (fontified t face rust-builtin-formatting-macro-face) 2291 2293 (fontified t face rust-builtin-formatting-macro-face) 2293 2297 (fontified t face rust-builtin-formatting-macro-face) 2297 2298 (fontified t) 2298 2299 (fontified t face font-lock-string-face) 2299 2301 (fontified t face rust-string-interpolation-face) 2301 2302 (fontified t face font-lock-string-face) 2302 2310 (fontified t) 2310 2313 (fontified t) 2313 2323 (fontified t) 2323 2329 (fontified t face font-lock-keyword-face) 2329 2330 (fontified t) 2330 2332 (fontified t face font-lock-type-face) 2332 2338 (fontified t) 2338 2346 (fontified t) 2346 2349 (fontified t) 2349 2370 (fontified t) 2370 2378 (fontified t face rust-builtin-formatting-macro-face) 2378 2379 (fontified t) 2379 2380 (fontified t face font-lock-string-face) 2380 2382 (fontified t face rust-string-interpolation-face) 2382 2383 (fontified t face font-lock-string-face) 2383 2395 (fontified t) 2395 2400 (fontified t face font-lock-constant-face) 2400 2408 (fontified t) 2408 2415 (fontified t) 2415 2417 (fontified t)) . 1) (undo-tree-id951 . 422) (undo-tree-id952 . -1604) (undo-tree-id953 . -1585) (undo-tree-id954 . 812) (undo-tree-id955 . -1604) (undo-tree-id956 . -1585) (undo-tree-id957 . -855) (undo-tree-id958 . -1504) (undo-tree-id959 . -1724) (undo-tree-id960 . -1724) (undo-tree-id961 . -855) (undo-tree-id962 . -1505) (undo-tree-id963 . -1505) (undo-tree-id964 . -855) (undo-tree-id965 . -1505) (undo-tree-id966 . -1505) (undo-tree-id967 . -855) (undo-tree-id968 . -1505) (undo-tree-id969 . -1505) (undo-tree-id970 . -1416) (undo-tree-id971 . -855) (undo-tree-id972 . -1505) (undo-tree-id973 . -1505) (undo-tree-id974 . -855) (undo-tree-id975 . -1505) (undo-tree-id976 . -1505) (undo-tree-id977 . -855) (undo-tree-id978 . -1505) (undo-tree-id979 . -1505) (undo-tree-id980 . -855) (undo-tree-id981 . -1505) (undo-tree-id982 . -1505) (undo-tree-id983 . -855) (undo-tree-id984 . -1505) (undo-tree-id985 . -1505) (undo-tree-id986 . -855) (undo-tree-id987 . -1505) (undo-tree-id988 . -1505) (undo-tree-id989 . -855) (undo-tree-id990 . -1505) (undo-tree-id991 . -1505) (undo-tree-id992 . -1505) (undo-tree-id993 . -855) (undo-tree-id994 . -1505) (undo-tree-id995 . -1505) (undo-tree-id996 . -855) (undo-tree-id997 . -1505) (undo-tree-id998 . -1505) (undo-tree-id999 . -855) (undo-tree-id1000 . -1507) (undo-tree-id1001 . -1507) (undo-tree-id1002 . -855) (undo-tree-id1003 . -1507) (undo-tree-id1004 . -1507) (undo-tree-id1005 . -855) (undo-tree-id1006 . -1505) (undo-tree-id1007 . -1507) (undo-tree-id1008 . -1507) (undo-tree-id1009 . -1507) (undo-tree-id1010 . -1507) (undo-tree-id1011 . -855) (undo-tree-id1012 . -1507) (undo-tree-id1013 . -1507) (undo-tree-id1014 . -855) (undo-tree-id1015 . -1505) (undo-tree-id1016 . -1416) (undo-tree-id1017 . -1507) (undo-tree-id1018 . -1507) (undo-tree-id1019 . -855) (undo-tree-id1020 . -1505) (undo-tree-id1021 . -1505) (undo-tree-id1022 . -773) (undo-tree-id1023 . -1505) (undo-tree-id1024 . -1505) (undo-tree-id1025 . -855) (undo-tree-id1026 . -1585) (undo-tree-id1027 . -1604) (undo-tree-id1028 . -773) (undo-tree-id1029 . -1505) (undo-tree-id1030 . -1505) (undo-tree-id1031 . -855) (undo-tree-id1032 . -1585) (undo-tree-id1033 . -1585) (undo-tree-id1034 . -773) (undo-tree-id1035 . -1504) (undo-tree-id1036 . -1504) (undo-tree-id1037 . -855) (undo-tree-id1038 . -2049) (undo-tree-id1039 . -2048) (undo-tree-id1040 . -773) (undo-tree-id1041 . -1504) (undo-tree-id1042 . -1504) (undo-tree-id1043 . -855) (undo-tree-id1044 . -2049) (undo-tree-id1045 . -2049) (undo-tree-id1046 . -773) (undo-tree-id1047 . -2320) (undo-tree-id1048 . -2321) (undo-tree-id1049 . -2320) (undo-tree-id1050 . -2321) (undo-tree-id1051 . -2347) (undo-tree-id1052 . -2348) (undo-tree-id1053 . -2347) (undo-tree-id1054 . -2348) (undo-tree-id1055 . -2347) (undo-tree-id1056 . -2348) (undo-tree-id1057 . -2049) (undo-tree-id1058 . -2050) (undo-tree-id1059 . -1262) (undo-tree-id1060 . -1263) (undo-tree-id1061 . -2347) (undo-tree-id1062 . -2348) (undo-tree-id1063 . -2049) (undo-tree-id1064 . -2050) (undo-tree-id1065 . -1262) (undo-tree-id1066 . -1263) (undo-tree-id1067 . -2347) (undo-tree-id1068 . -2348) (undo-tree-id1069 . -2049) (undo-tree-id1070 . -2050) (undo-tree-id1071 . -1262) (undo-tree-id1072 . -1263) (undo-tree-id1073 . -2347) (undo-tree-id1074 . -2348) (undo-tree-id1075 . -2049) (undo-tree-id1076 . -2050) (undo-tree-id1077 . -1262) (undo-tree-id1078 . -1263) (undo-tree-id1079 . -2347) (undo-tree-id1080 . -2348) (undo-tree-id1081 . -2049) (undo-tree-id1082 . -2050) (undo-tree-id1083 . -1262) (undo-tree-id1084 . -1263) (undo-tree-id1085 . -2347) (undo-tree-id1086 . -2348) (undo-tree-id1087 . -2049) (undo-tree-id1088 . -2050) (undo-tree-id1089 . -1262) (undo-tree-id1090 . -1263) (undo-tree-id1091 . -2347) (undo-tree-id1092 . -2348) (undo-tree-id1093 . -2049) (undo-tree-id1094 . -2050) (undo-tree-id1095 . -1262) (undo-tree-id1096 . -1263) (undo-tree-id1097 . -2347) (undo-tree-id1098 . -2348) (undo-tree-id1099 . -2049) (undo-tree-id1100 . -2050) (undo-tree-id1101 . -1262) (undo-tree-id1102 . -1263) (undo-tree-id1103 . -2347) (undo-tree-id1104 . -2348) (undo-tree-id1105 . -2049) (undo-tree-id1106 . -2050) (undo-tree-id1107 . -1262) (undo-tree-id1108 . -1263) (undo-tree-id1109 . -2347) (undo-tree-id1110 . -2348) (undo-tree-id1111 . -2049) (undo-tree-id1112 . -2050) (undo-tree-id1113 . -1262) (undo-tree-id1114 . -1263) (undo-tree-id1115 . -2347) (undo-tree-id1116 . -2348) (undo-tree-id1117 . -2049) (undo-tree-id1118 . -2050) (undo-tree-id1119 . -1262) (undo-tree-id1120 . -1263) (undo-tree-id1121 . -2347) (undo-tree-id1122 . -2348) (undo-tree-id1123 . -2049) (undo-tree-id1124 . -2050) (undo-tree-id1125 . -1262) (undo-tree-id1126 . -1263) (undo-tree-id1127 . -2347) (undo-tree-id1128 . -2348) (undo-tree-id1129 . -2049) (undo-tree-id1130 . -2050) (undo-tree-id1131 . -1262) (undo-tree-id1132 . -1263) (undo-tree-id1133 . -2347) (undo-tree-id1134 . -2348) (undo-tree-id1135 . -1599) (undo-tree-id1136 . -1600) (undo-tree-id1137 . -2049) (undo-tree-id1138 . -2050) (undo-tree-id1139 . -1262) (undo-tree-id1140 . -1263) (undo-tree-id1141 . -2347) (undo-tree-id1142 . -2348) (undo-tree-id1143 . -2049) (undo-tree-id1144 . -2050) (undo-tree-id1145 . -1262) (undo-tree-id1146 . -1263) (undo-tree-id1147 . -2347) (undo-tree-id1148 . -2348) (undo-tree-id1149 . -2049) (undo-tree-id1150 . -2050) (undo-tree-id1151 . -1262) (undo-tree-id1152 . -1263) (undo-tree-id1153 . -2347) (undo-tree-id1154 . -2348) (undo-tree-id1155 . -2049) (undo-tree-id1156 . -2050) (undo-tree-id1157 . -1262) (undo-tree-id1158 . -1263) (undo-tree-id1159 . -2347) (undo-tree-id1160 . -2348) (undo-tree-id1161 . -2049) (undo-tree-id1162 . -2050) (undo-tree-id1163 . -1262) (undo-tree-id1164 . -1263) (undo-tree-id1165 . -2347) (undo-tree-id1166 . -2348) (undo-tree-id1167 . -2049) (undo-tree-id1168 . -2050) (undo-tree-id1169 . -1262) (undo-tree-id1170 . -1263) (undo-tree-id1171 . -2347) (undo-tree-id1172 . -2348) (undo-tree-id1173 . -2049) (undo-tree-id1174 . -2050) (undo-tree-id1175 . -1262) (undo-tree-id1176 . -1263) (undo-tree-id1177 . -2347) (undo-tree-id1178 . -2348) (undo-tree-id1179 . -148) (undo-tree-id1180 . -170) (undo-tree-id1181 . -2068) (undo-tree-id1182 . -2075) (undo-tree-id1183 . -1585) (undo-tree-id1184 . -1586) (undo-tree-id1185 . -64) (undo-tree-id1186 . -74) (undo-tree-id1187 . -148) (undo-tree-id1188 . -170) (undo-tree-id1189 . -28) (undo-tree-id1190 . -34) (undo-tree-id1191 . -1507) (undo-tree-id1192 . -1507) (undo-tree-id1193 . -855) (undo-tree-id1194 . -448) (undo-tree-id1195 . -448) (undo-tree-id1196 . -1507) (undo-tree-id1197 . -1507) (undo-tree-id1198 . -855) (undo-tree-id1199 . -448) (undo-tree-id1200 . -448) (undo-tree-id1201 . -1507) (undo-tree-id1202 . -1507) (undo-tree-id1203 . -855) (undo-tree-id1204 . -448) (undo-tree-id1205 . -448) (undo-tree-id1206 . -448) (undo-tree-id1207 . -855) (undo-tree-id1208 . -1507) (undo-tree-id1209 . -1507) (undo-tree-id1210 . -855) (undo-tree-id1211 . -448) (undo-tree-id1212 . -2320) (undo-tree-id1213 . -1507) (undo-tree-id1214 . -1507) (undo-tree-id1215 . -855) (undo-tree-id1216 . -2320) (undo-tree-id1217 . -2320) (undo-tree-id1218 . -855) (t 23730 12904 739058 593000)) (23730 13821 739115 114000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 1773) (1772 . 1773) (1771 . 1773) (#("(" 0 1 (fontified nil)) . 1771) (1763 . 1772) (#("as" 0 2 (fontified nil face font-lock-keyword-face)) . 1763) (undo-tree-id1605 . -2) (1763 . 1765) (#("to_by" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 1763) (undo-tree-id1606 . -5) (1762 . 1768)) ((#(".to_by" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil) 5 6 (fontified nil)) . 1762) (undo-tree-id1307 . -1) (undo-tree-id1308 . -6) (undo-tree-id1309 . -1) (undo-tree-id1311 . -1) (undo-tree-id1313 . -1) (undo-tree-id1315 . -1) (undo-tree-id1317 . -1) (1763 . 1768) (#("as" 0 2 (fontified nil face font-lock-keyword-face)) . 1763) (undo-tree-id1319 . -2) (1763 . 1765) (#("as_bytes(" 0 8 (fontified nil) 8 9 (fontified nil)) . 1763) (undo-tree-id1320 . -7) (undo-tree-id1321 . -7) (undo-tree-id1322 . -8) (undo-tree-id1324 . -7) (undo-tree-id1326 . -8) (undo-tree-id1328 . -8) (undo-tree-id1330 . -8) (1771 . 1772) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 1771) (undo-tree-id1332 . -1) (undo-tree-id1334 . -1) (undo-tree-id1336 . -1) (undo-tree-id1338 . -1) (#(")" 0 1 (fontified nil)) . 1772) (undo-tree-id1339 . -1) (undo-tree-id1341 . -1) (undo-tree-id1343 . -1) (1773 . 1774)) (23730 14218 250385 473000) 0 nil]) ((nil rear-nonsticky nil 1760 . 1761) (1710 . 1761)) ((#("*2\\r\\n$9\\r\\nsubscribe\\r\\n$15\\r\\ntimeline:public\\r\\n" 0 50 (fontified nil face font-lock-string-face) 50 51 (rear-nonsticky nil fontified nil face font-lock-string-face)) . 1710) (undo-tree-id1344 . -50) (nil rear-nonsticky t 1760 . 1761)) (23730 14217 552193 500000) 0 nil]) ((1709 . 1711) (#("\"" 0 1 (fontified nil)) . 1709) (1709 . 1710) (#("&vec![82, 117, 115, 116, 10]" 0 1 (fontified t) 1 5 (fontified t face font-lock-preprocessor-face) 5 28 (fontified t)) . 1709)) ((1709 . 1737) (#("\"" 0 1 (fontified nil)) . 1709) (undo-tree-id1346 . 1) (1709 . 1710) (#("\"\"" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 1709) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (undo-tree-id1351 . -2) (undo-tree-id1352 . -1) (undo-tree-id1353 . -2) (undo-tree-id1354 . -2) (undo-tree-id1355 . -2) (undo-tree-id1357 . -1) (undo-tree-id1359 . -2) (undo-tree-id1361 . -1) (undo-tree-id1363 . -2) (undo-tree-id1364 . -2) (undo-tree-id1365 . -1) (undo-tree-id1366 . -1) (undo-tree-id1368 . -2) (undo-tree-id1370 . -2) (undo-tree-id1372 . -1) (undo-tree-id1374 . -1) (undo-tree-id1376 . -2)) (23730 14216 543959 589000) 0 nil]) ((1563 . 1564)) ((#("0" 0 1 (fontified t)) . 1563)) (23730 14216 158173 19000) 0 nil]) ((1450 . 1453)) ((#("/10" 0 3 (fontified t face font-lock-comment-face)) . 1450)) (23730 14215 972909 24000) 0 nil]) ((1060 . 1064) (#("2323" 0 4 (fontified t face font-lock-string-face)) . 1060)) ((1060 . 1064) (#("637" 0 3 (fontified nil face font-lock-string-face)) . 1060) (#("9" 0 1 (fontified t face font-lock-string-face)) . 1063)) (23730 14215 814027 88000) 0 nil]) ((1 . 2341) (#("use futures::{Future, Poll, Stream};
use tokio::net::TcpStream;
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf};
use tokio::prelude::*;
use tokio::timer::Interval;

//Receiver struct that implements the future trait
//this exclusively handles incomming data and prints it to stdout
struct Receiver {
    rx: ReadHalf<TcpStream>, //receiving half of the socket stream
}
impl Future for Receiver {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(()));
            } //socket closed
            print!(\"{}\", String::from_utf8_lossy(&buffer[..num_bytes_read]));
        }
        return Ok(Async::NotReady);
    }
}

fn main() {
    let address = \"127.0.0.1:2323\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    //wait for the connection to be established
    let client = connection
        .and_then(|socket| {
            //split the successfully connected socket in half (receive / send)
            let (rx, mut tx) = socket.split();

            //set up a simple sender, that periodically (1sec) sends the same message
            let sender = Interval::new_interval(std::time::Duration::from_millis(1000))
                .for_each(move |_| {
                    //this lambda is invoked once per passed second
                    tx.poll_write(&vec![82, 117, 115, 116, 10]).map_err(|_| {
                        //shut down the timer if an error occured (e.g. socket was closed)
                        tokio::timer::Error::shutdown()
                    })?;
                    return Ok(());
                }).map_err(|e| println!(\"{}\", e));
            //start the sender
            tokio::spawn(sender);

            //start the receiver
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)));

            return Ok(());
        }).map_err(|e| println!(\"{}\", e));

    tokio::run(client);
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 11 (fontified t face font-lock-constant-face) 11 14 (fontified t) 14 20 (fontified t face font-lock-type-face) 20 22 (fontified t) 22 26 (fontified t face font-lock-type-face) 26 28 (fontified t) 28 34 (fontified t face font-lock-type-face) 34 37 (fontified t) 37 40 (fontified t face font-lock-keyword-face) 40 41 (fontified t) 41 46 (fontified t face font-lock-constant-face) 46 48 (fontified t) 48 51 (fontified t face font-lock-constant-face) 51 53 (fontified t) 53 62 (fontified t face font-lock-type-face) 62 64 (fontified t) 64 67 (fontified t face font-lock-keyword-face) 67 68 (fontified t) 68 73 (fontified t face font-lock-constant-face) 73 75 (fontified t) 75 77 (fontified t face font-lock-constant-face) 77 80 (fontified t) 80 89 (fontified t face font-lock-type-face) 89 91 (fontified t) 91 101 (fontified t face font-lock-type-face) 101 103 (fontified t) 103 108 (fontified t face font-lock-type-face) 108 110 (fontified t) 110 118 (fontified t face font-lock-type-face) 118 121 (fontified t) 121 124 (fontified t face font-lock-keyword-face) 124 125 (fontified t) 125 130 (fontified t face font-lock-constant-face) 130 132 (fontified t) 132 139 (fontified t face font-lock-constant-face) 139 144 (fontified t) 144 147 (fontified t face font-lock-keyword-face) 147 148 (fontified t) 148 153 (fontified t face font-lock-constant-face) 153 155 (fontified t) 155 160 (fontified t face font-lock-constant-face) 160 162 (fontified t) 162 170 (fontified t face font-lock-type-face) 170 173 (fontified t) 173 175 (fontified t face font-lock-comment-delimiter-face) 175 224 (fontified t face font-lock-comment-face) 224 226 (fontified t face font-lock-comment-delimiter-face) 226 290 (fontified t face font-lock-comment-face) 290 296 (fontified t face font-lock-keyword-face) 296 297 (fontified t) 297 305 (fontified t face font-lock-type-face) 305 312 (fontified t) 312 314 (fontified t face font-lock-variable-name-face) 314 316 (fontified t) 316 324 (fontified t face font-lock-type-face) 324 325 (fontified t) 325 334 (fontified t face font-lock-type-face) 334 337 (fontified t) 337 339 (fontified t face font-lock-comment-delimiter-face) 339 375 (fontified t face font-lock-comment-face) 375 377 (fontified t) 377 381 (fontified t face font-lock-keyword-face) 381 382 (fontified t) 382 388 (fontified t face font-lock-type-face) 388 389 (fontified t) 389 392 (fontified t face font-lock-keyword-face) 392 393 (fontified t) 393 401 (fontified t face font-lock-type-face) 401 408 (fontified t) 408 412 (fontified t face font-lock-keyword-face) 412 413 (fontified t) 413 417 (fontified t face font-lock-type-face) 417 428 (fontified t) 428 432 (fontified t face font-lock-keyword-face) 432 433 (fontified t) 433 438 (fontified t face font-lock-type-face) 438 441 (fontified t) 441 445 (fontified t face font-lock-type-face) 445 446 (fontified t face font-lock-type-face) 446 448 (fontified t) 448 453 (fontified t) 453 455 (fontified t face font-lock-keyword-face) 455 456 (fontified t) 456 460 (fontified t face font-lock-function-name-face) 460 462 (fontified t) 462 465 (fontified t face font-lock-keyword-face) 465 466 (fontified t) 466 470 (fontified t face font-lock-keyword-face) 470 473 (fontified t) 473 474 (fontified t syntax-table #1#) 474 475 (fontified t) 475 479 (fontified t face font-lock-type-face) 479 480 (fontified t) 480 484 (fontified t face font-lock-type-face) 484 486 (fontified t) 486 490 (fontified t face font-lock-type-face) 490 492 (fontified t) 492 496 (fontified t face font-lock-type-face) 496 498 (fontified t) 498 500 (fontified t face font-lock-type-face) 500 503 (fontified t face font-lock-type-face) 503 507 (fontified t) 507 515 (fontified t) 515 518 (fontified t face font-lock-keyword-face) 518 519 (fontified t) 519 522 (fontified t face font-lock-keyword-face) 522 523 (fontified t) 523 529 (fontified t face font-lock-variable-name-face) 529 531 (fontified t) 531 532 (fontified t) 532 536 (fontified t face font-lock-preprocessor-face) 536 537 (fontified t) 537 549 (fontified t) 549 551 (fontified t face font-lock-comment-delimiter-face) 551 564 (fontified t face font-lock-comment-face) 564 592 (fontified t face font-lock-comment-face) 592 634 (fontified t) 634 636 (fontified t face font-lock-comment-delimiter-face) 636 690 (fontified t face font-lock-comment-face) 690 698 (fontified t) 698 703 (fontified t face font-lock-keyword-face) 703 704 (fontified t) 704 707 (fontified t face font-lock-keyword-face) 707 708 (fontified t) 708 713 (fontified t face font-lock-type-face) 713 715 (fontified t) 715 720 (fontified t face font-lock-type-face) 720 739 (fontified t) 739 743 (fontified t face font-lock-keyword-face) 743 758 (fontified t) 758 761 (fontified t face font-lock-keyword-face) 761 769 (fontified t) 769 770 (fontified t face rust-question-mark-face) 770 785 (fontified t) 785 787 (fontified t face font-lock-keyword-face) 787 826 (fontified t) 826 832 (fontified t face font-lock-keyword-face) 832 833 (fontified t) 833 835 (fontified t face font-lock-type-face) 835 836 (fontified t) 836 841 (fontified t face font-lock-type-face) 841 843 (fontified t) 843 848 (fontified t face font-lock-type-face) 848 869 (fontified t) 869 871 (fontified t face font-lock-comment-delimiter-face) 871 885 (fontified t face font-lock-comment-face) 885 897 (fontified t) 897 903 (fontified t face rust-builtin-formatting-macro-face) 903 904 (fontified t) 904 905 (fontified t face font-lock-string-face) 905 907 (fontified t face rust-string-interpolation-face) 907 908 (fontified t face font-lock-string-face) 908 910 (fontified t) 910 916 (fontified t face font-lock-type-face) 916 948 (fontified t) 948 963 (fontified t) 963 981 (fontified t) 981 987 (fontified t face font-lock-keyword-face) 987 988 (fontified t) 988 990 (fontified t face font-lock-type-face) 990 991 (fontified t) 991 996 (fontified t face font-lock-type-face) 996 998 (fontified t) 998 1006 (fontified t face font-lock-type-face) 1006 1007 (fontified t) 1007 1009 (fontified t) 1009 1018 (fontified t) 1018 1020 (fontified t face font-lock-keyword-face) 1020 1021 (fontified t) 1021 1025 (fontified t face font-lock-function-name-face) 1025 1034 (fontified t) 1034 1037 (fontified t face font-lock-keyword-face) 1037 1038 (fontified t) 1038 1045 (fontified t face font-lock-variable-name-face) 1045 1048 (fontified t) 1048 1064 (fontified t face font-lock-string-face) 1064 1080 (fontified t) 1080 1092 (fontified t face font-lock-string-face) 1092 1105 (fontified t face font-lock-string-face) 1105 1108 (fontified t) 1108 1112 (fontified t) 1112 1115 (fontified t face font-lock-keyword-face) 1115 1116 (fontified t) 1116 1126 (fontified t face font-lock-variable-name-face) 1126 1129 (fontified t) 1129 1138 (fontified t face font-lock-type-face) 1138 1163 (fontified t) 1163 1165 (fontified t face font-lock-comment-delimiter-face) 1165 1207 (fontified t face font-lock-comment-face) 1207 1211 (fontified t) 1211 1214 (fontified t face font-lock-keyword-face) 1214 1215 (fontified t) 1215 1221 (fontified t face font-lock-variable-name-face) 1221 1276 (fontified t) 1276 1278 (fontified t face font-lock-comment-delimiter-face) 1278 1343 (fontified t face font-lock-comment-face) 1343 1355 (fontified t) 1355 1358 (fontified t face font-lock-keyword-face) 1358 1364 (fontified t) 1364 1367 (fontified t face font-lock-keyword-face) 1367 1403 (fontified t) 1403 1405 (fontified t face font-lock-comment-delimiter-face) 1405 1463 (fontified t face font-lock-comment-face) 1463 1477 (fontified t face font-lock-comment-face) 1477 1489 (fontified t) 1489 1492 (fontified t face font-lock-keyword-face) 1492 1493 (fontified t) 1493 1499 (fontified t face font-lock-variable-name-face) 1499 1502 (fontified t) 1502 1509 (fontified t face font-lock-type-face) 1509 1510 (fontified t face font-lock-type-face) 1510 1525 (fontified t) 1525 1528 (fontified t face font-lock-constant-face) 1528 1530 (fontified t) 1530 1534 (fontified t face font-lock-constant-face) 1534 1536 (fontified t) 1536 1544 (fontified t face font-lock-type-face) 1544 1565 (fontified t) 1565 1591 (fontified t) 1591 1595 (fontified t face font-lock-keyword-face) 1595 1608 (fontified t) 1608 1622 (fontified t) 1622 1624 (fontified t face font-lock-comment-delimiter-face) 1624 1670 (fontified t face font-lock-comment-face) 1670 1705 (fontified t) 1705 1709 (fontified t face font-lock-preprocessor-face) 1709 1772 (fontified t) 1772 1774 (fontified t face font-lock-comment-delimiter-face) 1774 1839 (fontified t face font-lock-comment-face) 1839 1863 (fontified t) 1863 1868 (fontified t face font-lock-constant-face) 1868 1870 (fontified t) 1870 1875 (fontified t face font-lock-constant-face) 1875 1877 (fontified t) 1877 1882 (fontified t face font-lock-type-face) 1882 1917 (fontified t) 1917 1918 (fontified t face rust-question-mark-face) 1918 1940 (fontified t) 1940 1946 (fontified t face font-lock-keyword-face) 1946 1947 (fontified t) 1947 1949 (fontified t face font-lock-type-face) 1949 1977 (fontified t) 1977 1986 (fontified t) 1986 1994 (fontified t face rust-builtin-formatting-macro-face) 1994 1995 (fontified t) 1995 1996 (fontified t face font-lock-string-face) 1996 1998 (fontified t face rust-string-interpolation-face) 1998 1999 (fontified t face font-lock-string-face) 1999 2006 (fontified t) 2006 2018 (fontified nil) 2018 2020 (fontified nil face font-lock-comment-delimiter-face) 2020 2037 (fontified nil face font-lock-comment-face) 2037 2049 (fontified nil) 2049 2054 (fontified nil face font-lock-constant-face) 2054 2065 (fontified nil) 2065 2071 (fontified nil) 2071 2084 (fontified nil) 2084 2086 (face font-lock-comment-delimiter-face fontified nil) 2086 2105 (face font-lock-comment-face fontified nil) 2105 2117 (fontified nil) 2117 2120 (face font-lock-keyword-face fontified nil) 2120 2121 (fontified nil) 2121 2129 (face font-lock-variable-name-face fontified nil) 2129 2132 (fontified nil) 2132 2140 (face font-lock-type-face fontified nil) 2140 2161 (fontified nil) 2161 2166 (face font-lock-constant-face fontified nil) 2166 2195 (fontified nil) 2195 2203 (face rust-builtin-formatting-macro-face fontified nil) 2203 2204 (fontified nil) 2204 2205 (face font-lock-string-face fontified nil) 2205 2207 (face rust-string-interpolation-face fontified nil) 2207 2208 (face font-lock-string-face fontified nil) 2208 2229 (fontified nil) 2229 2235 (face font-lock-keyword-face fontified nil) 2235 2236 (fontified nil) 2236 2238 (face font-lock-type-face fontified nil) 2238 2267 (fontified nil) 2267 2275 (face rust-builtin-formatting-macro-face fontified nil) 2275 2276 (fontified nil) 2276 2277 (face font-lock-string-face fontified nil) 2277 2279 (face rust-string-interpolation-face fontified nil) 2279 2280 (face font-lock-string-face fontified nil) 2280 2292 (fontified nil) 2292 2297 (face font-lock-constant-face fontified nil) 2297 2312 (fontified nil) 2312 2313 (rear-nonsticky t fontified nil) 2313 2314 (fontified nil)) . 1) (undo-tree-id1586 . 2310) (undo-tree-id1587 . -41) (undo-tree-id1588 . -2312) (undo-tree-id1589 . -4) (undo-tree-id1590 . 2273) (undo-tree-id1591 . -41) (undo-tree-id1592 . -4) (undo-tree-id1593 . -4) (undo-tree-id1594 . -4) (undo-tree-id1595 . -4) (undo-tree-id1596 . -4) (undo-tree-id1597 . -4) (undo-tree-id1598 . -4) (undo-tree-id1599 . -41) (undo-tree-id1600 . 2130) (undo-tree-id1601 . -190) (undo-tree-id1602 . -4) (undo-tree-id1603 . -4) (undo-tree-id1604 . -41) (2314 . 2315)) ((#("
" 0 1 (fontified nil)) . 2314) (1 . 2315) (#("use futures::{Future, Poll, Stream};
use tokio::io::{AsyncRead, AsyncWrite, Error, ReadHalf};
use tokio::net::TcpStream;
use tokio::prelude::*;
use tokio::timer::Interval;

//Receiver struct that implements the future trait
//this exclusively handles incomming data and prints it to stdout
struct Receiver {
    rx: ReadHalf<TcpStream>, //receiving half of the socket stream
}
impl Future for Receiver {
    type Item = ();
    type Error = Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let mut buffer = vec![0u8; 1000]; //reserve 1000 bytes in the receive buffer
                                          //get all data that is available to us at the moment...
        while let Async::Ready(num_bytes_read) = self.rx.poll_read(&mut buffer)? {
            if num_bytes_read == 0 {
                return Ok(Async::Ready(()));
            } //socket closed
            print!(\"{}\", String::from_utf8_lossy(&buffer[..num_bytes_read]));
        }
        return Ok(Async::NotReady);
    }
}

fn main() {
    let address = \"127.0.0.1:2323\".parse().expect(\"Unable to parse address\");
    let connection = TcpStream::connect(&address);
    //wait for the connection to be established
    let client = connection
        .and_then(|socket| {
            //split the successfully connected socket in half (receive / send)
            let (rx, mut tx) = socket.split();

            //set up a simple sender, that periodically (1sec) sends the same message
            let sender = Interval::new_interval(std::time::Duration::from_millis(1000))
                .for_each(move |_| {
                    //this lambda is invoked once per passed second
                    tx.poll_write(&vec![82, 117, 115, 116, 10]).map_err(|_| {
                        //shut down the timer if an error occured (e.g. socket was closed)
                        tokio::timer::Error::shutdown()
                    })?;
                    return Ok(());
                })
                .map_err(|e| println!(\"{}\", e));
            //start the sender
            tokio::spawn(sender);

            //start the receiver
            let receiver = Receiver { rx };
            tokio::spawn(receiver.map_err(|e| println!(\"{}\", e)));

            return Ok(());
        })
        .map_err(|e| println!(\"{}\", e));

    tokio::run(client);
}
" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil) 4 11 (fontified nil face font-lock-constant-face) 11 14 (fontified nil) 14 20 (fontified nil face font-lock-type-face) 20 22 (fontified nil) 22 26 (fontified nil face font-lock-type-face) 26 28 (fontified nil) 28 34 (fontified nil face font-lock-type-face) 34 36 (fontified nil) 36 37 (fontified nil) 37 40 (fontified nil face font-lock-keyword-face) 40 41 (fontified nil) 41 46 (fontified nil face font-lock-constant-face) 46 48 (fontified nil) 48 50 (fontified nil face font-lock-constant-face) 50 53 (fontified nil) 53 62 (fontified nil face font-lock-type-face) 62 64 (fontified nil) 64 74 (fontified nil face font-lock-type-face) 74 76 (fontified nil) 76 81 (fontified nil face font-lock-type-face) 81 83 (fontified nil) 83 91 (fontified nil face font-lock-type-face) 91 94 (fontified nil) 94 97 (fontified nil face font-lock-keyword-face) 97 98 (fontified nil) 98 103 (fontified nil face font-lock-constant-face) 103 105 (fontified nil) 105 108 (fontified nil face font-lock-constant-face) 108 110 (fontified nil) 110 119 (fontified nil face font-lock-type-face) 119 121 (fontified nil) 121 124 (fontified nil face font-lock-keyword-face) 124 125 (fontified nil) 125 130 (fontified nil face font-lock-constant-face) 130 132 (fontified nil) 132 139 (fontified nil face font-lock-constant-face) 139 144 (fontified nil) 144 147 (fontified nil face font-lock-keyword-face) 147 148 (fontified nil) 148 153 (fontified nil face font-lock-constant-face) 153 155 (fontified nil) 155 160 (fontified nil face font-lock-constant-face) 160 162 (fontified nil) 162 170 (fontified nil face font-lock-type-face) 170 173 (fontified nil) 173 175 (fontified nil face font-lock-comment-delimiter-face) 175 224 (fontified nil face font-lock-comment-face) 224 226 (fontified nil face font-lock-comment-delimiter-face) 226 290 (fontified nil face font-lock-comment-face) 290 296 (fontified nil face font-lock-keyword-face) 296 297 (fontified nil) 297 305 (fontified nil face font-lock-type-face) 305 312 (fontified nil) 312 314 (fontified nil face font-lock-variable-name-face) 314 316 (fontified nil) 316 324 (fontified nil face font-lock-type-face) 324 325 (fontified nil) 325 334 (fontified nil face font-lock-type-face) 334 337 (fontified nil) 337 339 (fontified nil face font-lock-comment-delimiter-face) 339 375 (fontified nil face font-lock-comment-face) 375 377 (fontified nil) 377 381 (fontified nil face font-lock-keyword-face) 381 382 (fontified nil) 382 388 (fontified nil face font-lock-type-face) 388 389 (fontified nil) 389 392 (fontified nil face font-lock-keyword-face) 392 393 (fontified nil) 393 401 (fontified nil face font-lock-type-face) 401 408 (fontified nil) 408 412 (fontified nil face font-lock-keyword-face) 412 413 (fontified nil) 413 417 (fontified nil face font-lock-type-face) 417 428 (fontified nil) 428 432 (fontified nil face font-lock-keyword-face) 432 433 (fontified nil) 433 438 (fontified nil face font-lock-type-face) 438 441 (fontified nil) 441 446 (fontified nil face font-lock-type-face) 446 453 (fontified nil) 453 455 (fontified nil face font-lock-keyword-face) 455 456 (fontified nil) 456 460 (fontified nil face font-lock-function-name-face) 460 462 (fontified nil) 462 465 (fontified nil face font-lock-keyword-face) 465 466 (fontified nil) 466 470 (fontified nil face font-lock-keyword-face) 470 473 (fontified nil) 473 474 (fontified nil syntax-table #1#) 474 475 (fontified nil) 475 479 (fontified nil face font-lock-type-face) 479 480 (fontified nil) 480 484 (fontified nil face font-lock-type-face) 484 486 (fontified nil) 486 490 (fontified nil face font-lock-type-face) 490 492 (fontified nil) 492 496 (fontified nil face font-lock-type-face) 496 498 (fontified nil) 498 500 (fontified nil face font-lock-type-face) 500 503 (fontified nil face font-lock-type-face) 503 507 (fontified nil) 507 515 (fontified nil) 515 518 (fontified nil face font-lock-keyword-face) 518 519 (fontified nil) 519 522 (fontified nil face font-lock-keyword-face) 522 523 (fontified nil) 523 529 (fontified nil face font-lock-variable-name-face) 529 532 (fontified nil) 532 536 (fontified nil face font-lock-preprocessor-face) 536 549 (fontified nil) 549 551 (fontified nil face font-lock-comment-delimiter-face) 551 592 (fontified nil face font-lock-comment-face) 592 634 (fontified nil) 634 636 (fontified nil face font-lock-comment-delimiter-face) 636 690 (fontified nil face font-lock-comment-face) 690 698 (fontified nil) 698 703 (fontified nil face font-lock-keyword-face) 703 704 (fontified nil) 704 707 (fontified nil face font-lock-keyword-face) 707 708 (fontified nil) 708 713 (fontified nil face font-lock-type-face) 713 715 (fontified nil) 715 720 (fontified nil face font-lock-type-face) 720 739 (fontified nil) 739 743 (fontified nil face font-lock-keyword-face) 743 758 (fontified nil) 758 761 (fontified nil face font-lock-keyword-face) 761 769 (fontified nil) 769 770 (fontified nil face rust-question-mark-face) 770 785 (fontified nil) 785 787 (fontified nil face font-lock-keyword-face) 787 826 (fontified nil) 826 832 (fontified nil face font-lock-keyword-face) 832 833 (fontified nil) 833 835 (fontified nil face font-lock-type-face) 835 836 (fontified nil) 836 841 (fontified nil face font-lock-type-face) 841 843 (fontified nil) 843 848 (fontified nil face font-lock-type-face) 848 855 (fontified nil) 855 869 (fontified t) 869 871 (fontified t face font-lock-comment-delimiter-face) 871 885 (fontified t face font-lock-comment-face) 885 897 (fontified t) 897 903 (fontified t face rust-builtin-formatting-macro-face) 903 904 (fontified t) 904 905 (fontified t face font-lock-string-face) 905 907 (fontified t face rust-string-interpolation-face) 907 908 (fontified t face font-lock-string-face) 908 910 (fontified t) 910 916 (fontified t face font-lock-type-face) 916 981 (fontified t) 981 987 (fontified t face font-lock-keyword-face) 987 988 (fontified t) 988 990 (fontified t face font-lock-type-face) 990 991 (fontified t) 991 996 (fontified t face font-lock-type-face) 996 998 (fontified t) 998 1006 (fontified t face font-lock-type-face) 1006 1018 (fontified t) 1018 1020 (fontified t face font-lock-keyword-face) 1020 1021 (fontified t) 1021 1025 (fontified t face font-lock-function-name-face) 1025 1030 (fontified t) 1030 1034 (fontified t) 1034 1037 (fontified t face font-lock-keyword-face) 1037 1038 (fontified t) 1038 1045 (fontified t face font-lock-variable-name-face) 1045 1048 (fontified t) 1048 1059 (fontified t face font-lock-string-face) 1059 1063 (fontified t face font-lock-string-face) 1063 1064 (fontified t face font-lock-string-face) 1064 1080 (fontified t) 1080 1092 (fontified t face font-lock-string-face) 1092 1105 (fontified t face font-lock-string-face) 1105 1108 (fontified t) 1108 1112 (fontified t) 1112 1115 (fontified t face font-lock-keyword-face) 1115 1116 (fontified t) 1116 1126 (fontified t face font-lock-variable-name-face) 1126 1129 (fontified t) 1129 1138 (fontified t face font-lock-type-face) 1138 1163 (fontified t) 1163 1165 (fontified t face font-lock-comment-delimiter-face) 1165 1207 (fontified t face font-lock-comment-face) 1207 1211 (fontified t) 1211 1214 (fontified t face font-lock-keyword-face) 1214 1215 (fontified t) 1215 1221 (fontified t face font-lock-variable-name-face) 1221 1276 (fontified t) 1276 1278 (fontified t face font-lock-comment-delimiter-face) 1278 1343 (fontified t face font-lock-comment-face) 1343 1355 (fontified t) 1355 1358 (fontified t face font-lock-keyword-face) 1358 1364 (fontified t) 1364 1367 (fontified t face font-lock-keyword-face) 1367 1390 (fontified t) 1390 1391 (fontified t) 1391 1403 (fontified t) 1403 1405 (fontified t face font-lock-comment-delimiter-face) 1405 1477 (fontified t face font-lock-comment-face) 1477 1489 (fontified t) 1489 1492 (fontified t face font-lock-keyword-face) 1492 1493 (fontified t) 1493 1499 (fontified t face font-lock-variable-name-face) 1499 1502 (fontified t) 1502 1510 (fontified t face font-lock-type-face) 1510 1525 (fontified t) 1525 1528 (fontified t face font-lock-constant-face) 1528 1530 (fontified t) 1530 1534 (fontified t face font-lock-constant-face) 1534 1536 (fontified t) 1536 1544 (fontified t face font-lock-type-face) 1544 1565 (fontified t) 1565 1591 (fontified t) 1591 1595 (fontified t face font-lock-keyword-face) 1595 1608 (fontified t) 1608 1622 (fontified t) 1622 1624 (fontified t face font-lock-comment-delimiter-face) 1624 1670 (fontified t face font-lock-comment-face) 1670 1704 (fontified t) 1704 1705 (fontified t) 1705 1709 (fontified t face font-lock-preprocessor-face) 1709 1732 (fontified t) 1732 1748 (fontified t) 1748 1772 (fontified t) 1772 1774 (fontified t face font-lock-comment-delimiter-face) 1774 1839 (fontified t face font-lock-comment-face) 1839 1850 (fontified t) 1850 1863 (fontified t) 1863 1868 (fontified t face font-lock-constant-face) 1868 1870 (fontified t) 1870 1875 (fontified t face font-lock-constant-face) 1875 1877 (fontified t) 1877 1882 (fontified t face font-lock-type-face) 1882 1895 (fontified t) 1895 1917 (fontified t) 1917 1918 (fontified t face rust-question-mark-face) 1918 1940 (fontified t) 1940 1946 (fontified t face font-lock-keyword-face) 1946 1947 (fontified t) 1947 1949 (fontified t face font-lock-type-face) 1949 1977 (fontified t) 1977 2003 (fontified t) 2003 2011 (fontified t face rust-builtin-formatting-macro-face) 2011 2012 (fontified t) 2012 2013 (fontified t face font-lock-string-face) 2013 2015 (fontified t face rust-string-interpolation-face) 2015 2016 (fontified t face font-lock-string-face) 2016 2023 (fontified t) 2023 2035 (fontified t) 2035 2037 (fontified t face font-lock-comment-delimiter-face) 2037 2054 (fontified t face font-lock-comment-face) 2054 2065 (fontified t) 2065 2066 (fontified t) 2066 2071 (fontified t face font-lock-constant-face) 2071 2088 (fontified t) 2088 2089 (fontified t) 2089 2101 (fontified t) 2101 2103 (fontified t face font-lock-comment-delimiter-face) 2103 2122 (fontified t face font-lock-comment-face) 2122 2134 (fontified t) 2134 2137 (fontified t face font-lock-keyword-face) 2137 2138 (fontified t) 2138 2146 (fontified t face font-lock-variable-name-face) 2146 2149 (fontified t) 2149 2157 (fontified t face font-lock-type-face) 2157 2170 (fontified t) 2170 2178 (fontified t) 2178 2183 (fontified t face font-lock-constant-face) 2183 2212 (fontified t) 2212 2220 (fontified t face rust-builtin-formatting-macro-face) 2220 2221 (fontified t) 2221 2222 (fontified t face font-lock-string-face) 2222 2224 (fontified t face rust-string-interpolation-face) 2224 2225 (fontified t face font-lock-string-face) 2225 2233 (fontified t) 2233 2246 (fontified t) 2246 2248 (fontified t face font-lock-keyword-face) 2248 2252 (fontified t face font-lock-keyword-face) 2252 2253 (fontified t) 2253 2255 (fontified t face font-lock-type-face) 2255 2261 (fontified t) 2261 2293 (fontified t) 2293 2301 (fontified t face rust-builtin-formatting-macro-face) 2301 2302 (fontified t) 2302 2303 (fontified t face font-lock-string-face) 2303 2305 (fontified t face rust-string-interpolation-face) 2305 2306 (fontified t face font-lock-string-face) 2306 2318 (fontified t) 2318 2323 (fontified t face font-lock-constant-face) 2323 2340 (fontified t)) . 1) (undo-tree-id1377 . 608) (undo-tree-id1378 . -1704) (undo-tree-id1379 . -1704) (undo-tree-id1380 . -1704) (undo-tree-id1381 . -688) (undo-tree-id1382 . -688) (undo-tree-id1383 . -1059) (undo-tree-id1384 . -1058) (undo-tree-id1385 . -1059) (undo-tree-id1386 . -1059) (undo-tree-id1387 . -1059) (undo-tree-id1388 . -855) (undo-tree-id1389 . -1704) (undo-tree-id1390 . -1704) (undo-tree-id1391 . -1704) (undo-tree-id1392 . -855) (undo-tree-id1393 . -1059) (undo-tree-id1394 . -1704) (undo-tree-id1395 . -1704) (undo-tree-id1396 . -1704) (undo-tree-id1397 . -1704) (undo-tree-id1398 . -1704) (undo-tree-id1399 . -1704) (undo-tree-id1400 . -855) (undo-tree-id1401 . -1704) (undo-tree-id1402 . -1704) (undo-tree-id1403 . -855) (undo-tree-id1405 . -1704) (undo-tree-id1407 . -1704) (undo-tree-id1409 . -855) (undo-tree-id1411 . -1704) (undo-tree-id1413 . -1704) (undo-tree-id1415 . -855) (undo-tree-id1417 . -1733) (undo-tree-id1419 . -1704) (undo-tree-id1421 . -855) (undo-tree-id1423 . -1704) (undo-tree-id1425 . -1704) (undo-tree-id1427 . -855) (undo-tree-id1429 . -1704) (undo-tree-id1431 . -1704) (undo-tree-id1433 . -1747) (undo-tree-id1435 . -1704) (undo-tree-id1437 . -855) (undo-tree-id1439 . -1704) (undo-tree-id1441 . -1704) (undo-tree-id1443 . -855) (undo-tree-id1445 . -1704) (undo-tree-id1447 . -1758) (undo-tree-id1449 . -1704) (undo-tree-id1451 . -1704) (undo-tree-id1453 . -855) (undo-tree-id1455 . -1704) (undo-tree-id1457 . -1559) (undo-tree-id1459 . -1704) (undo-tree-id1461 . -1559) (undo-tree-id1463 . -855) (undo-tree-id1465 . -1704) (undo-tree-id1467 . -855) (undo-tree-id1469 . -1704) (undo-tree-id1471 . -1704) (undo-tree-id1473 . -855) (undo-tree-id1475 . -1704) (undo-tree-id1477 . -1704) (undo-tree-id1479 . -855) (undo-tree-id1481 . -1704) (undo-tree-id1483 . -1704) (undo-tree-id1484 . -1704) (undo-tree-id1485 . -855) (undo-tree-id1486 . -1559) (undo-tree-id1487 . -1704) (undo-tree-id1488 . -855) (undo-tree-id1489 . -1704) (undo-tree-id1490 . -1704) (undo-tree-id1491 . -855) (undo-tree-id1492 . -1449) (undo-tree-id1493 . -1559) (undo-tree-id1494 . -855) (undo-tree-id1495 . -1449) (undo-tree-id1497 . -1704) (undo-tree-id1499 . -1449) (undo-tree-id1501 . -855) (undo-tree-id1503 . -1704) (undo-tree-id1505 . -855) (undo-tree-id1507 . -1559) (undo-tree-id1509 . -855) (undo-tree-id1510 . -1704) (undo-tree-id1511 . -1704) (undo-tree-id1512 . -855) (undo-tree-id1513 . -1449) (undo-tree-id1514 . -1059) (undo-tree-id1516 . -1704) (undo-tree-id1518 . -1449) (undo-tree-id1520 . -855) (undo-tree-id1522 . -1704) (undo-tree-id1524 . -1059) (undo-tree-id1526 . -855)) (23730 14215 680091 453000) 0 nil]) nil nil (23730 14215 466540 886000) 0 nil] #2# 85426 239 nil)