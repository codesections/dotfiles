"1141d8c39160e7022d0077dbd6dc41d9e0bb6ef3"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#1=[nil nil ((#(";" 0 1 (fontified t)) . 150) (undo-tree-id76 . 1)) nil (23706 30191 314427 865000) 0 nil]) ((116 . 120) (#(" " 0 1 (fontified t)) . -116) (undo-tree-id77 . -1) (undo-tree-id78 . -1) (#(" " 0 1 (fontified t)) . -117) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (#(" " 0 1 (fontified t)) . -118) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (#(" " 0 1 (fontified t)) . -119) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (#(" " 0 1 (fontified t)) . -120) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (#(" " 0 1 (fontified t)) . -121) (undo-tree-id87 . -1) (undo-tree-id88 . -1) 122) nil (23706 30191 314462 608000) 0 nil]) (152) nil (23706 30191 314471 336000) 0 nil]) ((120 . 122) (150 . 151)) nil (23706 30191 314475 58000) 0 nil]) ((#(" " 0 1 (fontified t)) . 153)) nil (23706 30191 314477 711000) 0 nil]) ((#(" " 0 1 (fontified t)) . 153)) nil (23706 30191 314480 405000) 0 nil]) ((116 . 120)) nil (23706 30191 314483 21000) 0 nil]) ((#("	" 0 1 (fontified t)) . 116)) nil (23706 30191 314485 502000) 0 nil]) ((#(" " 0 1 (fontified t)) . 105)) nil (23706 30191 314488 349000) 0 nil]) ((#(" " 0 1 (fontified t)) . 105) (t 23706 29848 273951 131000)) nil (23706 30191 314491 499000) 0 nil]) ((9 . 10)) nil (23706 29848 265625 706000) 0 nil]) ((29 . 30)) nil (23706 29848 265630 876000) 0 nil]) ((189 . 190) (#(")" 0 1 (fontified nil)) . 189) (188 . 189) (#(" " 0 1 (fontified nil)) . -188) (188 . 189) (#(")" 0 1 (fontified nil)) . -188) (172 . 189) (170 . 172) (#("/" 0 1 (fontified t)) . -170) (undo-tree-id26 . -1) (undo-tree-id27 . -1) 171 (164 . 171)) nil (23706 29848 265647 415000) 0 nil]) ((20 . 29) (#("Compo" 0 5 (fontified t)) . -20) (undo-tree-id28 . -5) (undo-tree-id29 . -5) 25 (18 . 25)) nil (23706 29848 265657 170000) 0 nil]) ((152 . 154) (#("(" 0 1 (fontified nil)) . -152) (152 . 153) (#(" " 0 1 (fontified t)) . -152) (undo-tree-id30 . -1) (undo-tree-id31 . -1) 153 (#("c" 0 1 (fontified t)) . -153) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (#("l" 0 1 (fontified t)) . -154) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 155 (146 . 155) (145 . 146) (144 . 145) 143) nil (23706 29848 265674 19000) 0 nil]) ((136 . 141) (134 . 136) (#("b" 0 1 (fontified t)) . -134) (undo-tree-id36 . -1) (undo-tree-id37 . -1) 135 (134 . 135) (124 . 134) (105 . 106) (#("    " 0 4 (fontified nil)) . 105) (116 . 127) (109 . 116) (104 . 109) (103 . 105) (#("{" 0 1 (fontified nil)) . -103) (103 . 104) (#("{" 0 1 (fontified nil)) . -103) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (#("}" 0 1 (fontified t)) . 104) (103 . 105) (#("{" 0 1 (fontified nil)) . -103) (103 . 104)) nil (23706 29848 265695 357000) 0 nil]) ((102 . 103) (#(")" 0 1 (fontified nil)) . 102) (101 . 102) (100 . 102) (#("(" 0 1 (fontified nil)) . -100) (94 . 101) (89 . 94) 89) nil (23706 29848 265704 794000) 0 nil]) ((#("    " 0 4 (fontified nil)) . 89) (89 . 93) (89 . 90) (88 . 89) (87 . 89) (#("{" 0 1 (fontified nil)) . -87) (84 . 88) (63 . 84) (#("c" 0 1 (fontified t)) . -63) (undo-tree-id40 . -1) (undo-tree-id41 . -1) 64 (58 . 64) (#("o" 0 1 (fontified t)) . -58) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (#("n" 0 1 (fontified t)) . -59) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("s" 0 1 (fontified t)) . -60) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (#("t" 0 1 (fontified t face font-lock-keyword-face)) . -61) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (#(" " 0 1 (fontified t)) . -62) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("C" 0 1 (fontified t face font-lock-variable-name-face)) . -63) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -64) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -65) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -66) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (#("k" 0 1 (fontified t face font-lock-variable-name-face)) . -67) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (#(" " 0 1 (fontified t)) . -68) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (#("=" 0 1 (fontified t)) . -69) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#(" " 0 1 (fontified t)) . -70) (undo-tree-id66 . -1) (undo-tree-id67 . -1) 71 (63 . 71) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -63) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -64) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -65) (undo-tree-id72 . -1) (undo-tree-id73 . -1) 66 (63 . 66) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -63) (undo-tree-id74 . -1) (undo-tree-id75 . -1) 64 (57 . 64) (56 . 57) (55 . 56) (t 23706 29689 878287 417000) 50) nil (23706 29848 265778 492000) 0 nil]) ((9 . 18) (8 . 10) (#("{" 0 1 (fontified nil)) . -8) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (8 . 9) (#("preact" 0 6 (fontified t)) . 8) (undo-tree-id2 . -4) (undo-tree-id3 . -4) (undo-tree-id4 . -6) (undo-tree-id5 . 2) (undo-tree-id6 . 2) 12) nil (23706 29689 868119 665000) 0 nil]) ((nil rear-nonsticky nil 49 . 50) (nil fontified nil 30 . 50) (30 . 50) (29 . 30) (#("o" 0 1 (fontified t)) . -29) (undo-tree-id7 . -1) (undo-tree-id8 . -1) 30 (28 . 30) (#("'" 0 1 (fontified nil face font-lock-string-face)) . 28) (21 . 28) (20 . 22) (#("'" 0 1 (fontified nil)) . -20) (19 . 21) (8 . 19) (#("{ Component, h, render } = preact;" 0 32 (fontified t) 32 33 (rear-nonsticky t fontified t) 33 34 (fontified t)) . 8) (undo-tree-id9 . 3) (undo-tree-id10 . 1) (undo-tree-id11 . -34)) nil (23706 29689 868146 181000) 0 nil]) ((1 . 7) (#("const" 0 5 (fontified t face font-lock-keyword-face)) . 1)) nil (23706 29689 868154 181000) 0 nil]) ((#("/* global preact */
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 19 (fontified t face font-lock-comment-face) 19 20 (fontified t)) . 1)) nil (23706 29689 868157 340000) 0 nil]) ((62 . 63) (61 . 62) 39) nil (23706 29689 868161 411000) 0 nil]) ((4 . 20) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -4) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -5) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (#("l" 0 1 (fontified t face font-lock-comment-face)) . -6) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -7) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (#("n" 0 1 (fontified t face font-lock-comment-face)) . -8) (undo-tree-id20 . -1) (undo-tree-id21 . -1) 9 (4 . 9) (#("s" 0 1 (fontified t face font-lock-comment-face)) . -4) (undo-tree-id22 . -1) (undo-tree-id23 . -1) 5 (4 . 5) (#("@jsx h */" 0 8 (fontified t face font-lock-comment-face) 8 9 (fontified t rear-nonsticky t face font-lock-comment-face)) . 4)) nil (23706 29689 868190 4000) 0 nil]) ((nil rear-nonsticky nil 12 . 13) (nil fontified nil 1 . 13) (1 . 13) (#("" 0 1 (fontified t)) . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) 2 (1 . 2) (1 . 2) 39) nil (23706 29689 868204 421000) 0 nil]) ((40 . 41)) nil (23706 29689 868208 197000) 0 nil]) ((nil rear-nonsticky nil 39 . 40) (nil fontified nil 1 . 40) (1 . 40) (t . -1)) nil (23706 29689 868212 378000) 0 nil]) nil nil (23706 29689 868214 610000) 0 nil] #1# 2168 27 nil)