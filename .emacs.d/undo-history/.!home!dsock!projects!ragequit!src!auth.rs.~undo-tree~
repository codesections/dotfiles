"3a09f6bfe1fe33d6bf1bef35019b9be0aa463741"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#3=[nil nil ((73 . 76) (72 . 73) (#("s" 0 1 (fontified t face font-lock-function-name-face)) . -72) (undo-tree-id2833 . -1) (undo-tree-id2834 . -1) 73 (69 . 73) (t 23738 12084 81860 157000)) nil (23738 12949 5574 583000) 0 nil]) ((1 . 2194) (#("use crate::{or, query};
use postgres;
use warp::Filter;


pub fn get_token(scope: Scope) -> warp::filters::BoxedFilter<(String,)> {
    let token_from_header = warp::header::header::<String>(\"authorization\")
        .map(|auth: String| auth.split(' ').nth(1).unwrap_or(\"invalid\").to_string());
    let token_from_query = warp::query().map(|q: query::Auth| q.access_token);
    let public = warp::any().map(|| \"no access token\".to_string());

    match scope {
        // if they're trying to access a private scope without an access token, reject the request
        Scope::Private => or!(token_from_query, token_from_header).boxed(),
        // if they're trying to access a public scope without an access token, proceed
        Scope::Public => or!(token_from_query, token_from_header, public).boxed(),
    }
}

fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
}

pub struct User {
    pub id: String,
    pub langs: Vec<String>,
    pub logged_in: bool,
}

pub enum Scope {
    Public,
    Private,
}
pub fn get_account(token: String, scope: Scope) -> Result<User, warp::reject::Rejection> {
    let conn = conn();
    let result = &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&token],
        )
        .expect(\"Hard-coded query will return Some([0 or more rows])\");
    if !result.is_empty() {
        let only_row = result.get(0);
        let id: i64 = only_row.get(1);
        let langs: Vec<String> = only_row.get(2);
        Ok(User {
            id: id.to_string(),
            langs,
            logged_in: true,
        })
    } else if let Scope::Public = scope {
        Ok(User {
            id: String::new(),
            langs: Vec::new(),
            logged_in: false,
        })
    } else {
        Err(warp::reject::custom(\"Error: Invalid access token\"))
    }
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 24 (fontified t) 24 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t) 28 36 (fontified t face font-lock-constant-face) 36 38 (fontified t) 38 41 (fontified t face font-lock-keyword-face) 41 42 (fontified t) 42 46 (fontified t face font-lock-constant-face) 46 48 (fontified t) 48 54 (fontified t face font-lock-type-face) 54 57 (fontified t) 57 58 (fontified t) 58 61 (fontified t face font-lock-keyword-face) 61 62 (fontified t) 62 64 (fontified t face font-lock-keyword-face) 64 65 (fontified t) 65 74 (fontified t face font-lock-function-name-face) 74 75 (fontified t) 75 80 (fontified t face font-lock-variable-name-face) 80 82 (fontified t) 82 87 (fontified t face font-lock-type-face) 87 90 (fontified t) 90 91 (syntax-table #2=(1) fontified t) 91 92 (fontified t) 92 96 (fontified t face font-lock-constant-face) 96 98 (fontified t) 98 105 (fontified t face font-lock-constant-face) 105 107 (fontified t) 107 118 (fontified t face font-lock-type-face) 118 120 (fontified t) 120 126 (fontified t face font-lock-type-face) 126 136 (fontified t) 136 139 (fontified t face font-lock-keyword-face) 139 140 (fontified t) 140 157 (fontified t face font-lock-variable-name-face) 157 160 (fontified t) 160 164 (fontified t face font-lock-constant-face) 164 166 (fontified t) 166 172 (fontified t face font-lock-constant-face) 172 183 (fontified t) 183 189 (fontified t face font-lock-type-face) 189 191 (fontified t) 191 206 (fontified t face font-lock-string-face) 206 222 (fontified t) 222 226 (fontified t face font-lock-variable-name-face) 226 228 (fontified t) 228 234 (fontified t face font-lock-type-face) 234 247 (fontified t) 247 248 (syntax-table #1=(7) fontified t face font-lock-string-face) 248 249 (fontified t face font-lock-string-face) 249 250 (syntax-table #1# fontified t face font-lock-string-face) 250 269 (fontified t) 269 278 (fontified t face font-lock-string-face) 278 298 (fontified t) 298 301 (fontified t face font-lock-keyword-face) 301 302 (fontified t) 302 318 (fontified t face font-lock-variable-name-face) 318 321 (fontified t) 321 325 (fontified t face font-lock-constant-face) 325 340 (fontified t) 340 341 (fontified t face font-lock-variable-name-face) 341 343 (fontified t) 343 348 (fontified t face font-lock-constant-face) 348 350 (fontified t) 350 354 (fontified t face font-lock-type-face) 354 377 (fontified t) 377 380 (fontified t face font-lock-keyword-face) 380 381 (fontified t) 381 387 (fontified t face font-lock-variable-name-face) 387 390 (fontified t) 390 394 (fontified t face font-lock-constant-face) 394 409 (fontified t) 409 426 (fontified t face font-lock-string-face) 426 446 (fontified t) 446 451 (fontified t face font-lock-keyword-face) 451 456 (fontified t) 456 460 (fontified t) 460 468 (fontified t) 468 471 (fontified t face font-lock-comment-delimiter-face) 471 538 (fontified t face font-lock-comment-face) 538 558 (face font-lock-comment-face fontified t) 558 559 (face font-lock-comment-face fontified t) 559 567 (fontified t) 567 572 (fontified t face font-lock-type-face) 572 574 (fontified t) 574 581 (fontified t face font-lock-type-face) 581 583 (fontified t) 583 584 (fontified t syntax-table #2#) 584 585 (fontified t) 585 588 (fontified t face font-lock-preprocessor-face) 588 643 (fontified t) 643 646 (fontified t face font-lock-comment-delimiter-face) 646 722 (fontified t face font-lock-comment-face) 722 730 (fontified t) 730 735 (fontified t face font-lock-type-face) 735 737 (fontified t) 737 743 (fontified t face font-lock-type-face) 743 745 (fontified t) 745 746 (fontified t syntax-table #2#) 746 747 (fontified t) 747 750 (fontified t face font-lock-preprocessor-face) 750 814 (fontified t) 814 816 (fontified t face font-lock-keyword-face) 816 817 (fontified t) 817 821 (fontified t face font-lock-function-name-face) 821 825 (fontified t) 825 826 (fontified t syntax-table #2#) 826 827 (fontified t) 827 835 (fontified t face font-lock-constant-face) 835 837 (fontified t) 837 847 (fontified t face font-lock-type-face) 847 854 (fontified t) 854 862 (fontified t face font-lock-constant-face) 862 864 (fontified t) 864 874 (fontified t face font-lock-type-face) 874 893 (fontified t) 893 942 (fontified t face font-lock-string-face) 942 952 (fontified t) 952 960 (fontified t face font-lock-constant-face) 960 962 (fontified t) 962 969 (fontified t face font-lock-type-face) 969 971 (fontified t) 971 975 (fontified t face font-lock-type-face) 975 977 (fontified t) 977 1000 (fontified t) 1000 1003 (fontified t face font-lock-keyword-face) 1003 1004 (fontified t) 1004 1010 (fontified t face font-lock-keyword-face) 1010 1011 (fontified t) 1011 1015 (fontified t face font-lock-type-face) 1015 1018 (fontified t) 1018 1022 (fontified t) 1022 1025 (fontified t face font-lock-keyword-face) 1025 1026 (fontified t) 1026 1028 (fontified t face font-lock-variable-name-face) 1028 1030 (fontified t) 1030 1036 (fontified t face font-lock-type-face) 1036 1042 (fontified t) 1042 1045 (fontified t face font-lock-keyword-face) 1045 1046 (fontified t) 1046 1051 (fontified t face font-lock-variable-name-face) 1051 1053 (fontified t) 1053 1056 (fontified t face font-lock-type-face) 1056 1057 (fontified t) 1057 1059 (fontified t face font-lock-type-face) 1059 1063 (face font-lock-type-face fontified t) 1063 1066 (fontified t) 1066 1070 (fontified t) 1070 1073 (fontified t face font-lock-keyword-face) 1073 1074 (fontified t) 1074 1083 (fontified t face font-lock-variable-name-face) 1083 1085 (fontified t) 1085 1089 (fontified t face font-lock-type-face) 1089 1093 (fontified t) 1093 1094 (rear-nonsticky t fontified t) 1094 1097 (fontified t face font-lock-keyword-face) 1097 1098 (fontified t) 1098 1102 (fontified t face font-lock-keyword-face) 1102 1103 (fontified t) 1103 1108 (fontified t face font-lock-type-face) 1108 1115 (fontified t) 1115 1121 (fontified t face font-lock-type-face) 1121 1127 (fontified t) 1127 1134 (fontified t face font-lock-type-face) 1134 1137 (fontified t) 1137 1138 (fontified t) 1138 1141 (fontified t face font-lock-keyword-face) 1141 1142 (fontified t) 1142 1144 (fontified t face font-lock-keyword-face) 1144 1145 (fontified t) 1145 1156 (fontified t face font-lock-function-name-face) 1156 1157 (fontified t) 1157 1162 (fontified t face font-lock-variable-name-face) 1162 1164 (fontified t) 1164 1170 (fontified t face font-lock-type-face) 1170 1172 (fontified t) 1172 1177 (fontified t face font-lock-variable-name-face) 1177 1179 (fontified t) 1179 1184 (fontified t face font-lock-type-face) 1184 1187 (fontified t) 1187 1188 (fontified t syntax-table #2#) 1188 1189 (fontified t) 1189 1195 (fontified t face font-lock-type-face) 1195 1196 (fontified t) 1196 1200 (fontified t face font-lock-type-face) 1200 1202 (fontified t) 1202 1206 (fontified t face font-lock-constant-face) 1206 1208 (fontified t) 1208 1214 (fontified t face font-lock-constant-face) 1214 1216 (fontified t) 1216 1225 (fontified t face font-lock-type-face) 1225 1229 (fontified t) 1229 1233 (fontified t) 1233 1236 (fontified t face font-lock-keyword-face) 1236 1237 (fontified t) 1237 1241 (fontified t face font-lock-variable-name-face) 1241 1256 (fontified t) 1256 1259 (fontified t face font-lock-keyword-face) 1259 1260 (fontified t) 1260 1266 (fontified t face font-lock-variable-name-face) 1266 1303 (fontified t) 1303 1392 (fontified t face font-lock-string-face) 1392 1396 (fontified t face font-lock-string-face) 1396 1562 (fontified t face font-lock-string-face) 1562 1566 (fontified t face font-lock-string-face) 1566 1574 (fontified t face font-lock-string-face) 1574 1610 (fontified t) 1610 1625 (fontified t) 1625 1638 (fontified t face font-lock-string-face) 1638 1678 (fontified t face font-lock-string-face) 1678 1681 (fontified t) 1681 1685 (fontified t) 1685 1687 (fontified t face font-lock-keyword-face) 1687 1717 (fontified t) 1717 1720 (fontified t face font-lock-keyword-face) 1720 1721 (fontified t) 1721 1729 (fontified t face font-lock-variable-name-face) 1729 1755 (fontified t) 1755 1758 (fontified t face font-lock-keyword-face) 1758 1759 (fontified t) 1759 1761 (fontified t face font-lock-variable-name-face) 1761 1763 (fontified t) 1763 1766 (fontified t face font-lock-type-face) 1766 1794 (fontified t) 1794 1797 (fontified t face font-lock-keyword-face) 1797 1798 (fontified t) 1798 1803 (fontified t face font-lock-variable-name-face) 1803 1805 (fontified t) 1805 1808 (fontified t face font-lock-type-face) 1808 1809 (fontified t) 1809 1815 (fontified t face font-lock-type-face) 1815 1836 (fontified t) 1836 1844 (fontified t) 1844 1846 (fontified t face font-lock-type-face) 1846 1847 (fontified t) 1847 1851 (fontified t face font-lock-type-face) 1851 1854 (fontified t) 1854 1866 (fontified t) 1866 1868 (fontified t face font-lock-variable-name-face) 1868 1889 (fontified t) 1889 1893 (fontified t) 1893 1905 (fontified t) 1905 1917 (fontified t) 1917 1926 (fontified t face font-lock-variable-name-face) 1926 1928 (fontified t) 1928 1932 (fontified t face font-lock-keyword-face) 1932 1945 (fontified t) 1945 1951 (fontified t) 1951 1955 (fontified t face font-lock-keyword-face) 1955 1956 (fontified t) 1956 1958 (fontified t face font-lock-keyword-face) 1958 1959 (fontified t) 1959 1962 (fontified t face font-lock-keyword-face) 1962 1963 (fontified t) 1963 1968 (fontified t face font-lock-type-face) 1968 1970 (fontified t) 1970 1976 (fontified t face font-lock-type-face) 1976 1984 (fontified t) 1984 1987 (fontified t) 1987 1995 (fontified t) 1995 1997 (fontified t face font-lock-type-face) 1997 1998 (fontified t) 1998 2002 (fontified t face font-lock-type-face) 2002 2004 (fontified t) 2004 2005 (fontified t) 2005 2017 (fontified t) 2017 2019 (fontified t face font-lock-variable-name-face) 2019 2021 (fontified t) 2021 2027 (fontified t face font-lock-type-face) 2027 2032 (fontified t) 2032 2035 (fontified t) 2035 2036 (fontified t) 2036 2048 (fontified t) 2048 2053 (fontified t face font-lock-variable-name-face) 2053 2055 (fontified t) 2055 2058 (fontified t face font-lock-type-face) 2058 2063 (fontified t) 2063 2066 (fontified t) 2066 2067 (fontified t) 2067 2079 (fontified t) 2079 2088 (fontified t face font-lock-variable-name-face) 2088 2090 (fontified t) 2090 2095 (fontified t face font-lock-keyword-face) 2095 2114 (fontified t) 2114 2118 (fontified t face font-lock-keyword-face) 2118 2129 (fontified t) 2129 2132 (fontified t face font-lock-type-face) 2132 2133 (fontified t) 2133 2137 (fontified t face font-lock-constant-face) 2137 2139 (fontified t) 2139 2145 (fontified t face font-lock-constant-face) 2145 2154 (fontified t) 2154 2181 (fontified t face font-lock-string-face) 2181 2183 (fontified t face font-lock-string-face) 2183 2186 (fontified t) 2186 2194 (fontified t)) . 1) (undo-tree-id2649 . -1137) (undo-tree-id2650 . -1011) (undo-tree-id2651 . -1094) (undo-tree-id2652 . -1137) (undo-tree-id2653 . 2170) (undo-tree-id2654 . -57) (undo-tree-id2655 . 2137) (undo-tree-id2656 . -57) (undo-tree-id2657 . -57) (undo-tree-id2658 . -489) (undo-tree-id2659 . -458) (undo-tree-id2660 . -489) (undo-tree-id2661 . -1011) (undo-tree-id2662 . -1011) (undo-tree-id2663 . -1011) (undo-tree-id2664 . -1011) (undo-tree-id2665 . -1011) (undo-tree-id2666 . -1011) (undo-tree-id2667 . -489) (undo-tree-id2668 . -1011) (undo-tree-id2669 . -1011) (undo-tree-id2670 . -57) (undo-tree-id2671 . -57) (undo-tree-id2672 . -57) (undo-tree-id2673 . -57) (undo-tree-id2674 . -57) (undo-tree-id2675 . -57) (undo-tree-id2676 . -56) (undo-tree-id2677 . -29) (undo-tree-id2678 . -37) (undo-tree-id2679 . -28) (undo-tree-id2680 . -36) (undo-tree-id2681 . -1599) (undo-tree-id2682 . -1609) (undo-tree-id2683 . -1305) (undo-tree-id2684 . -1576) (undo-tree-id2685 . -1599) (undo-tree-id2686 . -1305) (undo-tree-id2687 . -1566) (undo-tree-id2688 . -1576) (undo-tree-id2689 . -1305) (undo-tree-id2690 . -1523) (undo-tree-id2691 . -1566) (undo-tree-id2692 . -1305) (undo-tree-id2693 . -1486) (undo-tree-id2694 . -1523) (undo-tree-id2695 . -1305) (undo-tree-id2696 . -1437) (undo-tree-id2697 . -1486) (undo-tree-id2698 . -1305) (undo-tree-id2699 . -1417) (undo-tree-id2700 . -1437) (undo-tree-id2701 . -1305) (undo-tree-id2702 . -1397) (undo-tree-id2703 . -1417) (undo-tree-id2704 . -1305) (undo-tree-id2705 . -1392) (undo-tree-id2706 . -1397) (undo-tree-id2707 . -1305) (undo-tree-id2708 . -1305) (undo-tree-id2709 . -1392) (undo-tree-id2710 . -1305) (undo-tree-id2711 . -1291) (undo-tree-id2712 . -1305) (undo-tree-id2713 . -1305) (undo-tree-id2714 . -1275) (undo-tree-id2715 . -1291) (undo-tree-id2716 . -885) (undo-tree-id2717 . -1252) (undo-tree-id2718 . -1275) (undo-tree-id2719 . -885) (undo-tree-id2720 . -1229) (undo-tree-id2721 . -1252) (undo-tree-id2722 . -885) (undo-tree-id2723 . -1138) (undo-tree-id2724 . -1229) (undo-tree-id2725 . -885) (undo-tree-id2726 . -1136) (undo-tree-id2727 . -1138) (undo-tree-id2728 . -885) (undo-tree-id2729 . -1123) (undo-tree-id2730 . -1136) (undo-tree-id2731 . -885) (undo-tree-id2732 . -1111) (undo-tree-id2733 . -1123) (undo-tree-id2734 . -885) (undo-tree-id2735 . -1094) (undo-tree-id2736 . -1111) (undo-tree-id2737 . -885) (undo-tree-id2738 . -1093) (undo-tree-id2739 . -1094) (undo-tree-id2740 . -885) (undo-tree-id2741 . -1091) (undo-tree-id2742 . -1093) (undo-tree-id2743 . -885) (undo-tree-id2744 . -1066) (undo-tree-id2745 . -1091) (undo-tree-id2746 . -885) (undo-tree-id2747 . -1038) (undo-tree-id2748 . -1066) (undo-tree-id2749 . -885) (undo-tree-id2750 . -1018) (undo-tree-id2751 . -1038) (undo-tree-id2752 . -885) (undo-tree-id2753 . -1000) (undo-tree-id2754 . -1018) (undo-tree-id2755 . -885) (undo-tree-id2756 . -999) (undo-tree-id2757 . -1000) (undo-tree-id2758 . -885) (undo-tree-id2759 . -997) (undo-tree-id2760 . -999) (undo-tree-id2761 . -885) (undo-tree-id2762 . -983) (undo-tree-id2763 . -997) (undo-tree-id2764 . -885) (undo-tree-id2765 . -977) (undo-tree-id2766 . -983) (undo-tree-id2767 . -885) (undo-tree-id2768 . -944) (undo-tree-id2769 . -977) (undo-tree-id2770 . -885) (undo-tree-id2771 . -885) (undo-tree-id2772 . -944) (undo-tree-id2773 . -885) (undo-tree-id2774 . -850) (undo-tree-id2775 . -885) (undo-tree-id2776 . -885) (undo-tree-id2777 . -814) (undo-tree-id2778 . -850) (undo-tree-id2779 . -813) (undo-tree-id2780 . -814) (undo-tree-id2781 . -811) (undo-tree-id2782 . -813) (undo-tree-id2783 . -805) (undo-tree-id2784 . -811) (undo-tree-id2785 . -722) (undo-tree-id2786 . -805) (undo-tree-id2787 . -635) (undo-tree-id2788 . -722) (undo-tree-id2789 . -559) (undo-tree-id2790 . -635) (undo-tree-id2791 . -460) (undo-tree-id2792 . -559) (undo-tree-id2793 . -442) (undo-tree-id2794 . -460) (undo-tree-id2795 . -441) (undo-tree-id2796 . -442) (undo-tree-id2797 . -373) (undo-tree-id2798 . -441) (undo-tree-id2799 . -294) (undo-tree-id2800 . -373) (undo-tree-id2801 . -208) (undo-tree-id2802 . -294) (undo-tree-id2803 . -132) (undo-tree-id2804 . -208) (undo-tree-id2805 . -58) (undo-tree-id2806 . -132) (undo-tree-id2807 . -57) (undo-tree-id2808 . -58) (undo-tree-id2809 . -56) (undo-tree-id2810 . -57) 57) nil (23738 12083 986079 932000) 0 nil]) ((#("i" 0 1 (fontified t)) . -25) (undo-tree-id2811 . -1) (#("i" 0 1 (fontified t)) . -26) (undo-tree-id2812 . -1) (#("i" 0 1 (fontified t)) . -27) (undo-tree-id2813 . -1) (#("i" 0 1 (fontified t)) . -28) (undo-tree-id2814 . -1) 29 (25 . 29)) nil (23738 12083 986145 458000) 0 nil]) ((nil rear-nonsticky nil 1094 . 1095) (#("
" 0 1 (fontified nil)) . -1138) (1094 . 1139)) nil (23738 12083 986157 440000) 0 nil]) ((#("pub enum Scope {
    Public,
    Private,
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 14 (fontified t face font-lock-type-face) 14 21 (fontified t) 21 27 (fontified t face font-lock-type-face) 27 33 (fontified t) 33 40 (fontified t face font-lock-type-face) 40 44 (fontified t)) . 58) (undo-tree-id2815 . -43) (undo-tree-id2816 . -11) (undo-tree-id2817 . -43) (undo-tree-id2818 . -11) (undo-tree-id2819 . -11) (undo-tree-id2820 . -11) (undo-tree-id2821 . -11) (undo-tree-id2822 . -11) (undo-tree-id2823 . -11) (undo-tree-id2824 . -43) (undo-tree-id2825 . -11) (undo-tree-id2826 . -43) 101) nil (23738 12083 986207 244000) 0 nil]) ((1056 . 1060) (#("Account" 0 7 (fontified t face font-lock-type-face)) . 1056) (undo-tree-id2827 . -5) (undo-tree-id2828 . -5) (undo-tree-id2829 . -5) (undo-tree-id2830 . -5) (undo-tree-id2831 . -5) (undo-tree-id2832 . -5) (1200 . 1204) (#("Account" 0 7 (fontified t face font-lock-type-face)) . 1200) (1854 . 1858) (#("Account" 0 7 (fontified t face font-lock-type-face)) . 1854) (2008 . 2012) (#("Account" 0 7 (fontified t face font-lock-type-face)) . 2008) (t 23738 10980 912399 63000)) nil (23738 12083 986239 127000) 0 nil]) ((2047 . 2048) (#(")" 0 1 (fontified nil)) . 2047) (undo-tree-id2577 . -1) (2046 . 2047) (2045 . 2047) (#("(" 0 1 (fontified nil)) . -2045) (undo-tree-id2578 . -1) (undo-tree-id2579 . -1) (2042 . 2046) (2034 . 2042) (#("\"\".to_string()," 0 2 (fontified t face font-lock-string-face) 2 15 (fontified t)) . 2034) (undo-tree-id2580 . -3) (undo-tree-id2581 . -3) (undo-tree-id2582 . -3) (undo-tree-id2583 . -1) (undo-tree-id2584 . -2) (undo-tree-id2585 . -1) (undo-tree-id2586 . -2) (undo-tree-id2587 . -13) (undo-tree-id2588 . -12) (undo-tree-id2589 . -13) (undo-tree-id2590 . -12) (undo-tree-id2591 . -13) (undo-tree-id2592 . -3) (undo-tree-id2593 . -12) (undo-tree-id2594 . -12) (undo-tree-id2595 . -12) (undo-tree-id2596 . -11) (undo-tree-id2597 . -12) (undo-tree-id2598 . -11) (undo-tree-id2599 . -11) (undo-tree-id2600 . -12) (undo-tree-id2601 . -11) (undo-tree-id2602 . -11) (undo-tree-id2603 . -12) (undo-tree-id2604 . -11) (undo-tree-id2605 . -11) (undo-tree-id2606 . -12) (undo-tree-id2607 . -10) (undo-tree-id2608 . -11) (undo-tree-id2609 . -9) (undo-tree-id2610 . -10) (undo-tree-id2611 . -8) (undo-tree-id2612 . -9) (undo-tree-id2613 . -7) (undo-tree-id2614 . -8) (undo-tree-id2615 . -6) (undo-tree-id2616 . -7) (undo-tree-id2617 . -5) (undo-tree-id2618 . -6) (undo-tree-id2619 . -4) (undo-tree-id2620 . -5) (undo-tree-id2621 . -3) (undo-tree-id2622 . -4) (undo-tree-id2623 . -2) (undo-tree-id2624 . -3) (undo-tree-id2625 . -1) (undo-tree-id2626 . -2) (undo-tree-id2627 . -1) (undo-tree-id2628 . 15) (undo-tree-id2629 . -1) (undo-tree-id2630 . 14) (undo-tree-id2631 . -1) (undo-tree-id2632 . 14) (undo-tree-id2633 . -2) (undo-tree-id2634 . -1) (undo-tree-id2635 . -1) (undo-tree-id2636 . -13) (undo-tree-id2637 . -14) (undo-tree-id2638 . -12) (undo-tree-id2639 . -13) (undo-tree-id2640 . -1) (undo-tree-id2641 . -1) (undo-tree-id2642 . -1) (undo-tree-id2643 . -13) (undo-tree-id2644 . -14) (undo-tree-id2645 . -12) (undo-tree-id2646 . -13) (undo-tree-id2647 . -1) (undo-tree-id2648 . -1) (t 23738 10972 789115 830000)) nil (23738 10980 837804 624000) 0 nil]) ((2079 . 2080) (#(")" 0 1 (fontified nil)) . 2079) (undo-tree-id2574 . -1) (2078 . 2079) (2077 . 2079) (#("(" 0 1 (fontified nil)) . -2077) (undo-tree-id2575 . -1) (undo-tree-id2576 . -1) (2069 . 2078) (#("vec![]," 0 1 (fontified t face font-lock-preprocessor-face) 1 4 (fontified t face font-lock-preprocessor-face) 4 7 (fontified t)) . 2069) (t 23738 10960 769189 966000)) nil (23738 10972 710795 715000) 0 nil]) ((1986 . 1994)) nil (23738 10960 673644 787000) 0 nil]) ((#("scope = " 0 5 (fontified t face font-lock-variable-name-face) 5 8 (fontified t)) . 1973) (undo-tree-id2559 . -5) (undo-tree-id2560 . -5) (undo-tree-id2561 . -6) (undo-tree-id2562 . -5) (undo-tree-id2563 . -5) (undo-tree-id2564 . -6) (undo-tree-id2565 . -4) (undo-tree-id2566 . -5) (undo-tree-id2567 . -3) (undo-tree-id2568 . -4) (undo-tree-id2569 . -2) (undo-tree-id2570 . -3) (undo-tree-id2571 . -1) (undo-tree-id2572 . -2) (undo-tree-id2573 . -1) (t 23738 10918 216119 168000)) nil (23738 10960 673725 862000) 0 nil]) ((2069 . 2070) (#("V" 0 1 (fontified t face font-lock-preprocessor-face)) . 2069) (undo-tree-id2552 . -1) (undo-tree-id2553 . -1) (undo-tree-id2554 . -1) (undo-tree-id2555 . -1) (undo-tree-id2556 . -1) (undo-tree-id2557 . -1) (undo-tree-id2558 . -1) (t 23738 10909 266174 386000)) nil (23738 10918 132501 436000) 0 nil]) ((1 . 2204) (#("use crate::{or, query};
use postgres;
use warp::Filter;

pub enum Scope {
    Public,
    Private,
}

pub fn get_token(scope: Scope) -> warp::filters::BoxedFilter<(String,)> {
    let token_from_header = warp::header::header::<String>(\"authorization\")
        .map(|auth: String| auth.split(' ').nth(1).unwrap_or(\"invalid\").to_string());
    let token_from_query = warp::query().map(|q: query::Auth| q.access_token);
    let public = warp::any().map(|| \"no access token\".to_string());

    match scope {
        // if they're trying to access a private scope without an access token, reject the request
        Scope::Private => or!(token_from_query, token_from_header).boxed(),
        // if they're trying to access a public scope without an access token, proceed
        Scope::Public => or!(token_from_query, token_from_header, public).boxed(),
    }
}

fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
}

pub struct Account {
    pub id: String,
    pub langs: Vec<String>,
    pub logged_in: bool,
}

pub fn get_account(token: String, scope: Scope) -> Result<Account, warp::reject::Rejection> {
    let conn = conn();
    let result = &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&token],
        )
        .expect(\"Hard-coded query will return Some([0 or more rows])\");
    if !result.is_empty() {
        let only_row = result.get(0);
        let id: i64 = only_row.get(1);
        let langs: Vec<String> = only_row.get(2);
        Ok(Account {
            id: id.to_string(),
            langs,
            logged_in: true,
        })
    } else if let scope = Scope::Public {
        Ok(Account {id: \"\".to_string(), langs: Vec![], logged_in: false})
    }else {
        Err(warp::reject::custom(\"Error: Invalid access token\"))
    }
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 23 (fontified t) 23 24 (fontified t) 24 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t) 28 36 (fontified t face font-lock-constant-face) 36 38 (fontified t) 38 41 (fontified t face font-lock-keyword-face) 41 42 (fontified t) 42 46 (fontified t face font-lock-constant-face) 46 48 (fontified t) 48 54 (fontified t face font-lock-type-face) 54 57 (fontified t) 57 60 (fontified t face font-lock-keyword-face) 60 61 (fontified t) 61 65 (fontified t face font-lock-keyword-face) 65 66 (fontified t) 66 71 (fontified t face font-lock-type-face) 71 78 (fontified t) 78 84 (fontified t face font-lock-type-face) 84 90 (fontified t) 90 97 (fontified t face font-lock-type-face) 97 102 (fontified t) 102 105 (fontified t face font-lock-keyword-face) 105 106 (fontified t) 106 108 (fontified t face font-lock-keyword-face) 108 109 (fontified t) 109 118 (fontified t face font-lock-function-name-face) 118 119 (fontified t) 119 124 (fontified t face font-lock-variable-name-face) 124 126 (fontified t) 126 131 (fontified t face font-lock-type-face) 131 134 (fontified t) 134 135 (fontified t syntax-table #2#) 135 136 (fontified t) 136 140 (fontified t face font-lock-constant-face) 140 142 (fontified t) 142 149 (fontified t face font-lock-constant-face) 149 151 (fontified t) 151 162 (fontified t face font-lock-type-face) 162 164 (fontified t) 164 170 (fontified t face font-lock-type-face) 170 180 (fontified t) 180 183 (fontified t face font-lock-keyword-face) 183 184 (fontified t) 184 201 (fontified t face font-lock-variable-name-face) 201 204 (fontified t) 204 208 (fontified t face font-lock-constant-face) 208 210 (fontified t) 210 216 (fontified t face font-lock-constant-face) 216 227 (fontified t) 227 233 (fontified t face font-lock-type-face) 233 235 (fontified t) 235 250 (fontified t face font-lock-string-face) 250 266 (fontified t) 266 270 (fontified t face font-lock-variable-name-face) 270 272 (fontified t) 272 278 (fontified t face font-lock-type-face) 278 291 (fontified t) 291 292 (fontified t syntax-table #1# face font-lock-string-face) 292 293 (fontified t face font-lock-string-face) 293 294 (fontified t syntax-table #1# face font-lock-string-face) 294 313 (fontified t) 313 322 (fontified t face font-lock-string-face) 322 338 (fontified t) 338 342 (fontified t) 342 345 (fontified t face font-lock-keyword-face) 345 346 (fontified t) 346 362 (fontified t face font-lock-variable-name-face) 362 365 (fontified t) 365 369 (fontified t face font-lock-constant-face) 369 384 (fontified t) 384 385 (fontified t face font-lock-variable-name-face) 385 387 (fontified t) 387 392 (fontified t face font-lock-constant-face) 392 394 (fontified t) 394 398 (fontified t face font-lock-type-face) 398 417 (fontified t) 417 421 (fontified t) 421 424 (fontified t face font-lock-keyword-face) 424 425 (fontified t) 425 431 (fontified t face font-lock-variable-name-face) 431 434 (fontified t) 434 438 (fontified t face font-lock-constant-face) 438 453 (fontified t) 453 470 (fontified t face font-lock-string-face) 470 485 (fontified t) 485 486 (fontified t) 486 490 (fontified t) 490 495 (fontified t face font-lock-keyword-face) 495 503 (fontified t) 503 504 (fontified t) 504 512 (fontified t) 512 515 (fontified t face font-lock-comment-delimiter-face) 515 545 (fontified t face font-lock-comment-face) 545 546 (fontified t face font-lock-comment-face) 546 552 (fontified t face font-lock-comment-face) 552 602 (fontified t face font-lock-comment-face) 602 603 (fontified t face font-lock-comment-face) 603 611 (fontified t) 611 616 (fontified t face font-lock-type-face) 616 618 (fontified t) 618 625 (fontified t face font-lock-type-face) 625 627 (fontified t) 627 628 (fontified t syntax-table #2#) 628 629 (fontified t) 629 632 (fontified t face font-lock-preprocessor-face) 632 678 (fontified t) 678 679 (fontified t) 679 686 (fontified t) 686 687 (rear-nonsticky t fontified t) 687 690 (fontified t face font-lock-comment-delimiter-face) 690 726 (fontified t face font-lock-comment-face) 726 765 (fontified t face font-lock-comment-face) 765 766 (fontified t face font-lock-comment-face) 766 774 (fontified t) 774 779 (fontified t face font-lock-type-face) 779 781 (fontified t) 781 787 (fontified t face font-lock-type-face) 787 789 (fontified t) 789 790 (syntax-table #2# fontified t) 790 791 (fontified t) 791 794 (fontified t face font-lock-preprocessor-face) 794 858 (fontified t) 858 860 (fontified t face font-lock-keyword-face) 860 861 (fontified t) 861 865 (fontified t face font-lock-function-name-face) 865 869 (fontified t) 869 870 (fontified t syntax-table #2#) 870 871 (fontified t) 871 879 (fontified t face font-lock-constant-face) 879 881 (fontified t) 881 891 (fontified t face font-lock-type-face) 891 894 (fontified t) 894 898 (fontified t) 898 906 (fontified t face font-lock-constant-face) 906 908 (fontified t) 908 916 (fontified t face font-lock-type-face) 916 918 (fontified t face font-lock-type-face) 918 929 (fontified t) 929 934 (fontified t) 934 937 (fontified t) 937 986 (fontified t face font-lock-string-face) 986 988 (fontified t) 988 996 (fontified t) 996 1004 (fontified t face font-lock-constant-face) 1004 1006 (fontified t) 1006 1009 (fontified t face font-lock-type-face) 1009 1010 (fontified t face font-lock-type-face) 1010 1013 (fontified t face font-lock-type-face) 1013 1015 (fontified t) 1015 1019 (fontified t face font-lock-type-face) 1019 1021 (fontified t) 1021 1044 (fontified t) 1044 1047 (fontified t face font-lock-keyword-face) 1047 1048 (fontified t) 1048 1054 (fontified t face font-lock-keyword-face) 1054 1055 (fontified t) 1055 1062 (fontified t face font-lock-type-face) 1062 1069 (fontified t) 1069 1072 (fontified t face font-lock-keyword-face) 1072 1073 (fontified t) 1073 1075 (fontified t face font-lock-variable-name-face) 1075 1077 (fontified t) 1077 1083 (fontified t face font-lock-type-face) 1083 1085 (fontified t) 1085 1089 (fontified t) 1089 1092 (fontified t face font-lock-keyword-face) 1092 1093 (fontified t) 1093 1098 (fontified t face font-lock-variable-name-face) 1098 1100 (fontified t) 1100 1103 (fontified t face font-lock-type-face) 1103 1104 (fontified t) 1104 1110 (fontified t face font-lock-type-face) 1110 1112 (fontified t) 1112 1113 (fontified t) 1113 1117 (fontified t) 1117 1120 (fontified t face font-lock-keyword-face) 1120 1121 (fontified t) 1121 1130 (fontified t face font-lock-variable-name-face) 1130 1132 (fontified t) 1132 1136 (fontified t face font-lock-type-face) 1136 1137 (fontified t) 1137 1138 (fontified t) 1138 1141 (fontified t) 1141 1144 (fontified t face font-lock-keyword-face) 1144 1145 (fontified t) 1145 1147 (fontified t face font-lock-keyword-face) 1147 1148 (fontified t) 1148 1159 (fontified t face font-lock-function-name-face) 1159 1160 (fontified t) 1160 1165 (fontified t face font-lock-variable-name-face) 1165 1167 (fontified t) 1167 1173 (fontified t face font-lock-type-face) 1173 1175 (fontified t) 1175 1180 (fontified t face font-lock-variable-name-face) 1180 1182 (fontified t) 1182 1187 (fontified t face font-lock-type-face) 1187 1190 (fontified t) 1190 1191 (syntax-table #2# fontified t) 1191 1192 (fontified t) 1192 1198 (fontified t face font-lock-type-face) 1198 1199 (fontified t) 1199 1206 (fontified t face font-lock-type-face) 1206 1208 (fontified t) 1208 1212 (fontified t face font-lock-constant-face) 1212 1214 (fontified t) 1214 1220 (fontified t face font-lock-constant-face) 1220 1222 (fontified t) 1222 1230 (fontified t face font-lock-type-face) 1230 1231 (rear-nonsticky t fontified t face font-lock-type-face) 1231 1232 (fontified t) 1232 1235 (fontified t) 1235 1239 (fontified t) 1239 1242 (fontified t face font-lock-keyword-face) 1242 1243 (fontified t) 1243 1247 (fontified t face font-lock-variable-name-face) 1247 1253 (fontified t) 1253 1258 (fontified t) 1258 1262 (fontified t) 1262 1265 (fontified t face font-lock-keyword-face) 1265 1266 (fontified t) 1266 1272 (fontified t face font-lock-variable-name-face) 1272 1281 (fontified t) 1281 1305 (fontified t) 1305 1309 (fontified t) 1309 1311 (fontified t face font-lock-string-face) 1311 1328 (fontified t face font-lock-string-face) 1328 1355 (fontified t face font-lock-string-face) 1355 1375 (fontified t face font-lock-string-face) 1375 1394 (fontified t face font-lock-string-face) 1394 1396 (fontified t face font-lock-string-face) 1396 1397 (fontified t face font-lock-string-face) 1397 1398 (fontified t face font-lock-string-face) 1398 1406 (fontified t face font-lock-string-face) 1406 1423 (fontified t face font-lock-string-face) 1423 1433 (fontified t face font-lock-string-face) 1433 1443 (fontified t face font-lock-string-face) 1443 1486 (fontified t face font-lock-string-face) 1486 1492 (fontified t face font-lock-string-face) 1492 1545 (fontified t face font-lock-string-face) 1545 1572 (fontified t face font-lock-string-face) 1572 1578 (fontified t face font-lock-string-face) 1578 1580 (fontified t face font-lock-string-face) 1580 1582 (fontified t) 1582 1631 (fontified t) 1631 1638 (fontified t face font-lock-string-face) 1638 1684 (face font-lock-string-face fontified t) 1684 1687 (fontified t) 1687 1691 (fontified t) 1691 1693 (fontified t face font-lock-keyword-face) 1693 1723 (fontified t) 1723 1726 (fontified t face font-lock-keyword-face) 1726 1727 (fontified t) 1727 1735 (fontified t face font-lock-variable-name-face) 1735 1753 (fontified t) 1753 1761 (fontified t) 1761 1764 (fontified t face font-lock-keyword-face) 1764 1765 (fontified t) 1765 1767 (fontified t face font-lock-variable-name-face) 1767 1769 (fontified t) 1769 1772 (fontified t face font-lock-type-face) 1772 1781 (fontified t) 1781 1792 (fontified t) 1792 1800 (fontified t) 1800 1803 (fontified t face font-lock-keyword-face) 1803 1804 (fontified t) 1804 1809 (fontified t face font-lock-variable-name-face) 1809 1811 (fontified t) 1811 1814 (fontified t face font-lock-type-face) 1814 1815 (fontified t) 1815 1821 (fontified t face font-lock-type-face) 1821 1842 (fontified t) 1842 1850 (fontified t) 1850 1852 (fontified t face font-lock-type-face) 1852 1853 (fontified t) 1853 1860 (fontified t face font-lock-type-face) 1860 1875 (fontified t) 1875 1877 (fontified t face font-lock-variable-name-face) 1877 1895 (fontified t) 1895 1898 (fontified t) 1898 1913 (fontified t) 1913 1914 (fontified t) 1914 1926 (fontified t) 1926 1935 (fontified t face font-lock-variable-name-face) 1935 1937 (fontified t) 1937 1941 (fontified t face font-lock-keyword-face) 1941 1942 (fontified t) 1942 1943 (fontified t) 1943 1954 (fontified t) 1954 1960 (fontified t) 1960 1964 (fontified t face font-lock-keyword-face) 1964 1965 (fontified t) 1965 1967 (fontified t face font-lock-keyword-face) 1967 1968 (fontified t) 1968 1971 (fontified t face font-lock-keyword-face) 1971 1972 (fontified t) 1972 1977 (fontified t face font-lock-variable-name-face) 1977 1980 (fontified t) 1980 1985 (fontified t face font-lock-type-face) 1985 1987 (fontified t) 1987 1993 (fontified t face font-lock-type-face) 1993 1994 (fontified t) 1994 1995 (fontified t) 1995 1996 (fontified t) 1996 2004 (fontified t) 2004 2006 (fontified t face font-lock-type-face) 2006 2007 (fontified t) 2007 2014 (fontified t face font-lock-type-face) 2014 2015 (fontified t) 2015 2016 (fontified t) 2016 2018 (fontified t face font-lock-variable-name-face) 2018 2020 (fontified t) 2020 2022 (fontified t face font-lock-string-face) 2022 2032 (fontified t) 2032 2036 (fontified t) 2036 2041 (fontified t face font-lock-variable-name-face) 2041 2043 (fontified t) 2043 2046 (fontified t face font-lock-preprocessor-face) 2046 2047 (fontified t face font-lock-preprocessor-face) 2047 2051 (fontified t) 2051 2060 (fontified t face font-lock-variable-name-face) 2060 2062 (fontified t) 2062 2067 (fontified t face font-lock-keyword-face) 2067 2068 (fontified t) 2068 2069 (fontified t) 2069 2070 (fontified t) 2070 2074 (fontified t) 2074 2075 (fontified t) 2075 2079 (fontified t face font-lock-keyword-face) 2079 2082 (fontified t) 2082 2087 (fontified t) 2087 2089 (fontified t) 2089 2090 (rear-nonsticky t fontified t) 2090 2093 (fontified t face font-lock-type-face) 2093 2094 (fontified t) 2094 2098 (fontified t face font-lock-constant-face) 2098 2100 (fontified t) 2100 2106 (fontified t face font-lock-constant-face) 2106 2115 (fontified t) 2115 2144 (fontified t face font-lock-string-face) 2144 2146 (fontified t) 2146 2147 (fontified t) 2147 2153 (fontified t) 2153 2155 (fontified t)) . 1) (undo-tree-id2354 . -858) (undo-tree-id2355 . -858) (undo-tree-id2356 . -858) (undo-tree-id2357 . -2082) (undo-tree-id2358 . -2146) (undo-tree-id2359 . 88) (undo-tree-id2360 . -481) (undo-tree-id2361 . -502) (undo-tree-id2362 . -481) (undo-tree-id2363 . -402) (undo-tree-id2364 . -402) (undo-tree-id2365 . -603) (undo-tree-id2366 . -603) (undo-tree-id2367 . -764) (undo-tree-id2368 . -764) (undo-tree-id2369 . -758) (undo-tree-id2370 . -764) (undo-tree-id2371 . -858) (undo-tree-id2372 . -858) (undo-tree-id2373 . -764) (undo-tree-id2374 . -858) (undo-tree-id2375 . -858) (undo-tree-id2376 . -858) (undo-tree-id2377 . -858) (undo-tree-id2378 . -858) (undo-tree-id2379 . -858) (undo-tree-id2380 . -858) (undo-tree-id2381 . -858) (undo-tree-id2382 . -858) (undo-tree-id2383 . -858) (undo-tree-id2384 . -858) (undo-tree-id2385 . -858) (undo-tree-id2386 . -858) (undo-tree-id2387 . -858) (undo-tree-id2388 . -858) (undo-tree-id2389 . -858) (undo-tree-id2390 . -858) (undo-tree-id2391 . -858) (undo-tree-id2392 . -858) (undo-tree-id2393 . -858) (undo-tree-id2394 . -858) (undo-tree-id2395 . -1055) (undo-tree-id2396 . -1055) (undo-tree-id2397 . -1159) (undo-tree-id2398 . -1159) (undo-tree-id2399 . -1159) (undo-tree-id2400 . -858) (undo-tree-id2401 . -858) (undo-tree-id2402 . 712) (undo-tree-id2403 . -1448) (undo-tree-id2404 . -858) (undo-tree-id2405 . -1208) (undo-tree-id2406 . -1208) (undo-tree-id2407 . -858) (undo-tree-id2408 . -858) (undo-tree-id2409 . -858) (undo-tree-id2410 . 1297) (undo-tree-id2411 . -858) (undo-tree-id2412 . -858) (undo-tree-id2413 . -1141) (undo-tree-id2414 . -1140) (undo-tree-id2415 . -338) (undo-tree-id2416 . -2015) (undo-tree-id2417 . -2015) (undo-tree-id2418 . -2051) (undo-tree-id2419 . -2051) (undo-tree-id2420 . -1398) (undo-tree-id2421 . -2052) (undo-tree-id2422 . -2051) (undo-tree-id2423 . -1398) (undo-tree-id2424 . -2052) (undo-tree-id2425 . -1398) (undo-tree-id2426 . -2052) (undo-tree-id2427 . -2066) (undo-tree-id2428 . -2007) (undo-tree-id2429 . -2014) (undo-tree-id2430 . -2043) (undo-tree-id2431 . -2046) (undo-tree-id2432 . -2043) (undo-tree-id2433 . -2046) (undo-tree-id2434 . -2007) (undo-tree-id2435 . -2014) (undo-tree-id2436 . -2054) (undo-tree-id2437 . -2053) (undo-tree-id2438 . -1398) (undo-tree-id2439 . -2055) (undo-tree-id2440 . -2054) (undo-tree-id2441 . -1398) (undo-tree-id2442 . -2056) (undo-tree-id2443 . -2055) (undo-tree-id2444 . -1398) (undo-tree-id2445 . -2057) (undo-tree-id2446 . -2056) (undo-tree-id2447 . -1398) (undo-tree-id2448 . -2058) (undo-tree-id2449 . -2057) (undo-tree-id2450 . -1398) (undo-tree-id2451 . -2059) (undo-tree-id2452 . -2058) (undo-tree-id2453 . -1398) (undo-tree-id2454 . -2060) (undo-tree-id2455 . -2059) (undo-tree-id2456 . -1398) (undo-tree-id2457 . -2061) (undo-tree-id2458 . -2060) (undo-tree-id2459 . -1398) (undo-tree-id2460 . -2062) (undo-tree-id2461 . -2061) (undo-tree-id2462 . -1398) (undo-tree-id2463 . -2063) (undo-tree-id2464 . -2062) (undo-tree-id2465 . -1398) (undo-tree-id2466 . -2064) (undo-tree-id2467 . -2063) (undo-tree-id2468 . -1398) (undo-tree-id2469 . -2065) (undo-tree-id2470 . -2064) (undo-tree-id2471 . -1398) (undo-tree-id2472 . -2066) (undo-tree-id2473 . -2065) (undo-tree-id2474 . -1398) (undo-tree-id2475 . -2067) (undo-tree-id2476 . -2066) (undo-tree-id2477 . -1398) (undo-tree-id2478 . -2066) (undo-tree-id2479 . -2066) (undo-tree-id2480 . -1398) 2067) nil (23738 10909 181452 433000) 0 nil]) ((2065 . 2068) (2050 . 2065) (#("]" 0 1 (fontified nil)) . 2050) (2049 . 2050) (2048 . 2050) (#("[" 0 1 (fontified nil)) . -2048) (2044 . 2049) (2035 . 2044) (#(")" 0 1 (fontified nil)) . 2035) (2034 . 2035) (2033 . 2035) (#("(" 0 1 (fontified nil)) . -2033) (2032 . 2034) (#("h" 0 1 (fontified t)) . -2032) (undo-tree-id2481 . -1) 2033 (2026 . 2033) (2023 . 2026) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 2023) (2022 . 2023) (2021 . 2023) (#("\"" 0 1 (fontified nil)) . -2021) (2019 . 2022) (#(" " 0 1 (fontified t)) . -2019) (undo-tree-id2482 . -1) (#(":" 0 1 (fontified t)) . -2020) (undo-tree-id2483 . -1) 2021 (2017 . 2021) (#("
" 0 1 (fontified t)) . -2017) (undo-tree-id2484 . -1) (#(" " 0 1 (fontified t)) . -2018) (undo-tree-id2485 . -1) (#(" " 0 1 (fontified t)) . -2019) (undo-tree-id2486 . -1) (#(" " 0 1 (fontified t)) . -2020) (undo-tree-id2487 . -1) (#(" " 0 1 (fontified t)) . -2021) (undo-tree-id2488 . -1) (#(" " 0 1 (fontified t)) . -2022) (undo-tree-id2489 . -1) (#(" " 0 1 (fontified t)) . -2023) (undo-tree-id2490 . -1) 2024 (#(" " 0 1 (fontified t)) . -2024) (undo-tree-id2491 . -1) (#(" " 0 1 (fontified t)) . -2025) (undo-tree-id2492 . -1) 2026 (2017 . 2026)) nil (23738 10909 181484 441000) 0 nil]) ((1928 . 1943) (#("g" 0 1 (fontified t)) . -1928) (undo-tree-id2493 . -1) 1929 (1927 . 1929) (1914 . 1927) 1913) nil (23738 10909 181494 470000) 0 nil]) ((1128 . 1138) (1122 . 1128) (1120 . 1122) (1118 . 1120) (1113 . 1118) 1105) nil (23738 10909 181497 735000) 0 nil]) ((1962 . 1964) (#("{" 0 1 (fontified nil)) . -1962) (undo-tree-id2494 . -1) (undo-tree-id2495 . -1) (1954 . 1963) (1953 . 1955) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -1953) (1951 . 1954) (1942 . 1951) 1941) nil (23738 10909 181503 102000) 0 nil]) ((#("=" 0 1 (fontified t)) . 1925)) nil (23738 10909 181504 967000) 0 nil]) ((1915 . 1919)) nil (23738 10909 181506 145000) 0 nil]) ((1939 . 1944) (1938 . 1940) (#("{" 0 1 (fontified nil)) . -1938) (1919 . 1939) (1917 . 1919) (#("p" 0 1 (fontified t)) . -1917) (undo-tree-id2496 . -1) (undo-tree-id2497 . -1) 1918 (1907 . 1918)) nil (23738 10909 181510 765000) 0 nil]) ((1160 . 1163) (#("o" 0 1 (fontified t face font-lock-type-face)) . -1160) (undo-tree-id2498 . -1) 1161 (#("p" 0 1 (fontified t face font-lock-type-face)) . -1161) (undo-tree-id2499 . -1) 1162 (1156 . 1162) (#(":" 0 1 (fontified t)) . -1156) (undo-tree-id2500 . -1) (#(":" 0 1 (fontified t)) . -1157) (undo-tree-id2501 . -1) 1158 (1149 . 1158)) nil (23738 10909 181518 185000) 0 nil]) ((#("
" 0 1 (fontified t)) . 859) (undo-tree-id2502 . 1) (undo-tree-id2503 . 1)) nil (23738 10909 181522 166000) 0 nil]) ((#("r        Ok(account)
" 0 1 (fontified t) 1 9 (fontified t) 9 11 (fontified t face font-lock-type-face) 11 21 (fontified t)) . 859) (undo-tree-id2504 . -21) (undo-tree-id2505 . 20) (undo-tree-id2506 . -12) (undo-tree-id2507 . -12) (undo-tree-id2508 . -21) (undo-tree-id2509 . -21) (undo-tree-id2510 . -21)) nil (23738 10909 181528 615000) 0 nil]) ((859 . 860) (#("{" 0 1 (fontified t)) . 859) (undo-tree-id2511 . 1)) nil (23738 10909 181533 198000) 0 nil]) ((#("r    if let Ok(account) = get_account(token) " 0 1 (fontified t) 1 5 (fontified t) 5 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 14 (fontified t face font-lock-type-face) 14 45 (fontified t)) . 859) (undo-tree-id2512 . -15) (undo-tree-id2513 . 44) (undo-tree-id2514 . -36) (undo-tree-id2515 . -36) (undo-tree-id2516 . -36) (undo-tree-id2517 . -36) (undo-tree-id2518 . -36) (undo-tree-id2519 . -36) (undo-tree-id2520 . -15) (undo-tree-id2521 . -15) (undo-tree-id2522 . -15)) nil (23738 10909 181542 195000) 0 nil]) ((859 . 860) (#("<" 0 1 (fontified t syntax-table #2#)) . 859) (undo-tree-id2523 . -1) (undo-tree-id2524 . 1)) nil (23738 10909 181545 943000) 0 nil]) ((#("    r else r
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t) 6 10 (fontified t face font-lock-keyword-face) 10 11 (fontified t) 11 12 (fontified t) 12 13 (fontified t)) . 925) (undo-tree-id2525 . -13) (undo-tree-id2526 . -13) (undo-tree-id2527 . -13) (undo-tree-id2528 . -13) (undo-tree-id2529 . -13) (undo-tree-id2530 . -11) 936) nil (23738 10909 181551 640000) 0 nil]) ((936 . 937) (#("{" 0 1 (fontified t)) . 936)) nil (23738 10909 181553 605000) 0 nil]) ((929 . 930) (#("}" 0 1 (fontified t)) . 929)) nil (23738 10909 181555 113000) 0 nil]) ((#("    d
" 0 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 938) (undo-tree-id2531 . -6) (undo-tree-id2532 . -6) (undo-tree-id2533 . -6) (undo-tree-id2534 . -2) 940) nil (23738 10909 181560 507000) 0 nil]) ((942 . 943) (#("}" 0 1 (fontified t)) . 942)) nil (23738 10909 181562 473000) 0 nil]) ((#("d
" 0 1 (fontified t) 1 2 (fontified t)) . 944)) nil (23738 10909 181563 770000) 0 nil]) ((944 . 945) (#("}" 0 1 (fontified t)) . 944)) nil (23738 10909 181565 484000) 0 nil]) ((#("
" 0 1 (fontified t)) . 905) 859) nil (23738 10909 181567 53000) 0 nil]) ((#("Account, > {
" 0 7 (fontified t face font-lock-type-face) 7 9 (fontified t) 9 10 (fontified t syntax-table #2#) 10 13 (fontified t)) . 860) (undo-tree-id2535 . -13) 859) nil (23738 10909 181569 242000) 0 nil]) ((#("pub fn get_account(token: String, _scope: Scope) -> Result" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 18 (fontified t face font-lock-function-name-face) 18 19 (fontified t) 19 24 (fontified t face font-lock-variable-name-face) 24 26 (fontified t) 26 32 (fontified t face font-lock-type-face) 32 34 (fontified t) 34 40 (fontified t face font-lock-variable-name-face) 40 42 (fontified t) 42 47 (fontified t face font-lock-type-face) 47 50 (fontified t) 50 51 (fontified t syntax-table #2#) 51 52 (fontified t) 52 58 (fontified t face font-lock-type-face)) . 859) (undo-tree-id2536 . 11) (undo-tree-id2537 . -18) (undo-tree-id2538 . -18) (undo-tree-id2539 . -18) (undo-tree-id2540 . -18) (undo-tree-id2541 . -18) (undo-tree-id2542 . -18) (undo-tree-id2543 . -18) (undo-tree-id2544 . -18) (undo-tree-id2545 . -18) (undo-tree-id2546 . -46) (undo-tree-id2547 . -46) (undo-tree-id2548 . -18) (undo-tree-id2549 . -46) (undo-tree-id2550 . -46) (undo-tree-id2551 . -46)) nil (23738 10909 181581 537000) 0 nil] [nil ([nil nil ((#("Account, > {
" 0 7 (fontified t face font-lock-type-face) 7 9 (fontified t) 9 10 (fontified t syntax-table #2#) 10 13 (fontified t)) . 860) (undo-tree-id2313 . -13) (undo-tree-id2314 . -13) (undo-tree-id2315 . -10) (undo-tree-id2316 . -10) (undo-tree-id2317 . -10) (undo-tree-id2318 . -13) (undo-tree-id2319 . -13) (undo-tree-id2320 . -13) (undo-tree-id2321 . -8) (undo-tree-id2322 . -10) (undo-tree-id2323 . -8) (undo-tree-id2324 . -10) (undo-tree-id2325 . -8) (undo-tree-id2326 . -10) 859) ((860 . 873)) (23738 10632 303505 437000) 0 nil]) ((#("pub fn get_account(token: String, _scope: Scope) -> Result" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 18 (fontified t face font-lock-function-name-face) 18 19 (fontified t) 19 24 (fontified t face font-lock-variable-name-face) 24 26 (fontified t) 26 32 (fontified t face font-lock-type-face) 32 34 (fontified t) 34 40 (fontified t face font-lock-variable-name-face) 40 42 (fontified t) 42 47 (fontified t face font-lock-type-face) 47 50 (fontified t) 50 51 (fontified t syntax-table #2#) 51 52 (fontified t) 52 58 (fontified t face font-lock-type-face)) . 859) (undo-tree-id2327 . 11) (undo-tree-id2328 . -18) (undo-tree-id2329 . -18) (undo-tree-id2330 . -18) (undo-tree-id2331 . -18) (undo-tree-id2332 . -18) (undo-tree-id2333 . -18) (undo-tree-id2334 . -18) (undo-tree-id2335 . -18) (undo-tree-id2336 . -18) (undo-tree-id2337 . -46) (undo-tree-id2338 . -46) (undo-tree-id2339 . -18) (undo-tree-id2340 . -46) (undo-tree-id2341 . -46) (undo-tree-id2342 . -46) (undo-tree-id2343 . -3) (undo-tree-id2344 . -52) (undo-tree-id2345 . -58) (undo-tree-id2346 . -3) (undo-tree-id2347 . -52) 1016) ((859 . 917)) (23738 10632 307919 453000) 0 nil]) ((#("        Err(())
" 0 8 (fontified t) 8 11 (fontified t face font-lock-type-face) 11 15 (fontified t) 15 16 (fontified t)) . 2060) (undo-tree-id2348 . -16) (undo-tree-id2349 . -8) 2068) nil (23738 10633 48722 2000) 0 nil]) ((nil rear-nonsticky nil 2083 . 2084) (#("
" 0 1 (fontified nil)) . -2140) (2075 . 2141) 2060) nil (23738 10632 303599 152000) 0 nil]) ((#("        Err(warp::reject::custom(\"Error: Invalid access token\"))
" 0 8 (fontified t) 8 11 (fontified t face font-lock-type-face) 11 12 (fontified t) 12 16 (fontified t face font-lock-constant-face) 16 18 (fontified t) 18 24 (fontified t face font-lock-constant-face) 24 33 (fontified t) 33 62 (fontified t face font-lock-string-face) 62 64 (fontified t) 64 65 (fontified t)) . 1010) (undo-tree-id2350 . -52) 1062) nil (23738 10632 303607 604000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 1418) (#("(" 0 1 (fontified t)) . 1395) (undo-tree-id2351 . -1) (undo-tree-id2352 . -1) (undo-tree-id2353 . -1) 1418) nil (23738 10632 303622 596000) 0 nil]) ((nil rear-nonsticky nil 1418 . 1419) (nil fontified nil 1396 . 1419) (1396 . 1419) 1395) nil (23738 10632 303630 544000) 0 nil]) ((#("warp::reject::Rejection" 0 4 (fontified t face font-lock-constant-face) 4 6 (fontified t) 6 12 (fontified t face font-lock-constant-face) 12 14 (fontified t) 14 23 (fontified t face font-lock-type-face)) . 927) (t 23738 10522 425231 43000)) nil (23738 10632 303635 846000) 0 nil]) ((#("id" 0 2 (fontified t)) . 990) (undo-tree-id2304 . -2) (undo-tree-id2305 . -2)) nil (23738 10522 328293 806000) 0 nil]) ((#("_" 0 1 (fontified t)) . 990)) nil (23738 10522 328306 527000) 0 nil]) ((#("_id" 0 3 (fontified t face font-lock-function-name-face)) . 1386)) nil (23738 10522 328312 128000) 0 nil]) ((#("_id" 0 3 (fontified t)) . 1021)) nil (23738 10522 328316 943000) 0 nil]) ((#("_id" 0 3 (fontified t)) . 975) (undo-tree-id2306 . -3) (undo-tree-id2307 . -2) (undo-tree-id2308 . -3) (undo-tree-id2309 . -1) (undo-tree-id2310 . -2) (undo-tree-id2311 . -1) (undo-tree-id2312 . -3) (t 23738 10286 730024 949000)) nil (23738 10522 328351 66000) 0 nil]) ((895 . 906) (893 . 895) (#("-" 0 1 (fontified t)) . -893) (undo-tree-id2296 . -1) 894 (893 . 894) (#("s" 0 1 (fontified t)) . -893) (undo-tree-id2297 . -1) (#("c" 0 1 (fontified t)) . -894) (undo-tree-id2298 . -1) (#("o" 0 1 (fontified t)) . -895) (undo-tree-id2299 . -1) (#("p" 0 1 (fontified t)) . -896) (undo-tree-id2300 . -1) (#("e" 0 1 (fontified t)) . -897) (undo-tree-id2301 . -1) (#(":" 0 1 (fontified t)) . -898) (undo-tree-id2302 . -1) (#(" " 0 1 (fontified t)) . -899) (undo-tree-id2303 . -1) 900 (891 . 900) (t 23738 10234 933679 959000)) nil (23738 10286 716542 288000) 0 nil]) ((#("_from_token" 0 11 (fontified t face font-lock-function-name-face)) . 877) (t 23738 10216 147130 43000)) nil (23738 10234 856780 799000) 0 nil]) ((#("_id" 0 1 (fontified t face font-lock-function-name-face) 1 3 (fontified t face font-lock-function-name-face)) . 877)) nil (23738 10216 45526 88000) 0 nil] [nil nil ((#("_" 0 1 (fontified t face font-lock-function-name-face)) . 877) (undo-tree-id2286 . -1) (undo-tree-id2287 . -1) (undo-tree-id2288 . -1) (undo-tree-id2289 . -1) (undo-tree-id2290 . -1) (undo-tree-id2291 . -1) (undo-tree-id2292 . -1)) ((877 . 878)) (23738 10205 585094 981000) 0 nil]) ((759 . 766) (#("reject the request" 0 18 (fontified t face font-lock-comment-face)) . 759) (undo-tree-id2293 . -18) (undo-tree-id2294 . -18)) nil (23738 10205 587106 652000) 0 nil]) ((724 . 727) (#("i" 0 1 (fontified t face font-lock-comment-face)) . -724) (undo-tree-id2295 . -1) 725 (721 . 725) (#("private" 0 1 (fontified t face font-lock-comment-face) 1 7 (fontified t face font-lock-comment-face)) . 721)) nil (23738 10205 585113 796000) 0 nil]) ((#("
" 0 1 (face font-lock-comment-face fontified nil)) . -778) (679 . 779) 604) nil (23738 10205 585117 426000) 0 nil] [nil nil ((604 . 703)) ((#("        // if they're trying to access a private scope without an access token, reject the request
" 0 7 (fontified t) 7 8 (rear-nonsticky t fontified t) 8 11 (fontified t face font-lock-comment-delimiter-face) 11 41 (fontified t face font-lock-comment-face) 41 42 (fontified t face font-lock-comment-face) 42 48 (fontified t face font-lock-comment-face) 48 98 (fontified t face font-lock-comment-face) 98 99 (fontified t face font-lock-comment-face)) . 604) (undo-tree-id2282 . -99) (undo-tree-id2283 . -98) (undo-tree-id2284 . -8) (undo-tree-id2285 . -8)) (23738 10158 865340 677000) 0 nil]) ((#("        // if they're trying to access a private scope without an access token, reject the request
" 0 7 (fontified t) 7 8 (fontified t rear-nonsticky t) 8 11 (fontified t face font-lock-comment-delimiter-face) 11 41 (fontified t face font-lock-comment-face) 41 42 (fontified t face font-lock-comment-face) 42 48 (fontified t face font-lock-comment-face) 48 98 (fontified t face font-lock-comment-face) 98 99 (fontified t face font-lock-comment-face)) . 604) (undo-tree-id2268 . -98) (undo-tree-id2269 . -98) (undo-tree-id2270 . 1) (undo-tree-id2271 . -8) (undo-tree-id2272 . -8) 612) nil (23738 10158 867077 470000) 0 nil]) ((nil rear-nonsticky nil 611 . 612) (#("
" 0 1 (face font-lock-comment-face fontified nil)) . -702) (603 . 703) 602) nil (23738 10158 865359 25000) 0 nil]) ((592 . 603)) nil (23738 10158 865360 772000) 0 nil]) ((#("is " 0 3 (fontified t face font-lock-comment-face)) . 527)) nil (23738 10158 865362 57000) 0 nil]) ((#("user " 0 5 (fontified t face font-lock-comment-face)) . 527)) nil (23738 10158 865363 837000) 0 nil]) ((522 . 526)) nil (23738 10158 865365 288000) 0 nil]) ((#("t" 0 1 (fontified t face font-lock-comment-face)) . -596) (undo-tree-id2273 . -1) (#("h" 0 1 (fontified t face font-lock-comment-face)) . -597) (undo-tree-id2274 . -1) (undo-tree-id2275 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -598) (undo-tree-id2276 . -1) (#(" " 0 1 (fontified t face font-lock-comment-face)) . -599) (undo-tree-id2277 . -1) (#("r" 0 1 (fontified t face font-lock-comment-face)) . -600) (undo-tree-id2278 . -1) (#("e" 0 1 (fontified t face font-lock-comment-face)) . -601) (undo-tree-id2279 . -1) 602 (590 . 602) (587 . 590)) nil (23738 10158 865376 492000) 0 nil]) ((550 . 551) (#("P" 0 1 (fontified t face font-lock-comment-face)) . 550)) nil (23738 10158 865380 123000) 0 nil]) ((550 . 557) (#("priviate" 0 8 (fontified t face font-lock-comment-face)) . -550) (undo-tree-id2280 . -5) 555) nil (23738 10158 865384 34000) 0 nil]) ((587 . 588) (566 . 587) (545 . 566) (534 . 545) (513 . 534) (504 . 513) 487) nil (23738 10158 865388 36000) 0 nil]) ((#("    " 0 4 (fontified t)) . -486) (undo-tree-id2281 . -4) 490 (486 . 490) (486 . 487)) nil (23738 10158 865391 882000) 0 nil]) ((#("
" 0 1 (fontified t)) . 339) (t 23738 10023 648329 42000)) nil (23738 10158 865393 938000) 0 nil]) ((1 . 1976) (#("use crate::{or, query};
use postgres;
use warp::Filter;

pub enum Scope {
    Public,
    Private,
}

pub fn get_token(scope: Scope) -> warp::filters::BoxedFilter<(String,)> {
    let token_from_header = warp::header::header::<String>(\"authorization\")
        .map(|auth: String| auth.split(' ').nth(1).unwrap_or(\"invalid\").to_string());

    let token_from_query = warp::query().map(|q: query::Auth| q.access_token);
    let public = warp::any().map(|| \"no access token\".to_string());
    match scope {
        Scope::Private => or!(token_from_query, token_from_header ).boxed(),
        Scope::Public => or!(token_from_query, token_from_header, public).boxed(),
    }
}

pub fn get_account_id_from_token(token: String) -> Result<Account, warp::reject::Rejection> {
    if let Ok(account_id) = get_account_id(token) {
        Ok(account_id)
    } else {
        Err(warp::reject::custom(\"Error: Invalid access token\"))
    }
}

fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
}

pub struct Account {
    pub id: String,
    pub langs: Vec<String>,
}

pub fn get_account_id(token: String) -> Result<Account, ()> {
    let conn = conn();
    let result = &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&token],
        )
        .expect(\"Hard-coded query will return Some([0 or more rows])\");
    if !result.is_empty() {
        let only_row = result.get(0);
        let id: i64 = only_row.get(1);
        let langs: Vec<String> = only_row.get(2);
        Ok(Account {
            id: id.to_string(),
            langs,
        })
    } else {
        Err(())
    }
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 23 (fontified t) 23 24 (fontified t) 24 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t) 28 36 (fontified t face font-lock-constant-face) 36 37 (fontified t) 37 38 (fontified t) 38 41 (fontified t face font-lock-keyword-face) 41 42 (fontified t) 42 46 (fontified t face font-lock-constant-face) 46 48 (fontified t) 48 54 (fontified t face font-lock-type-face) 54 57 (fontified t) 57 60 (fontified t face font-lock-keyword-face) 60 61 (fontified t) 61 65 (fontified t face font-lock-keyword-face) 65 66 (fontified t) 66 71 (fontified t face font-lock-type-face) 71 78 (fontified t) 78 84 (fontified t face font-lock-type-face) 84 90 (fontified t) 90 97 (fontified t face font-lock-type-face) 97 102 (fontified t) 102 105 (fontified t face font-lock-keyword-face) 105 106 (fontified t) 106 108 (fontified t face font-lock-keyword-face) 108 109 (fontified t) 109 118 (fontified t face font-lock-function-name-face) 118 119 (fontified t) 119 124 (fontified t face font-lock-variable-name-face) 124 126 (fontified t) 126 131 (fontified t face font-lock-type-face) 131 134 (fontified t) 134 135 (syntax-table #2# fontified t) 135 136 (fontified t) 136 140 (fontified t face font-lock-constant-face) 140 142 (fontified t) 142 149 (fontified t face font-lock-constant-face) 149 151 (fontified t) 151 162 (fontified t face font-lock-type-face) 162 164 (fontified t) 164 170 (fontified t face font-lock-type-face) 170 180 (fontified t) 180 183 (fontified t face font-lock-keyword-face) 183 184 (fontified t) 184 201 (fontified t face font-lock-variable-name-face) 201 204 (fontified t) 204 208 (fontified t face font-lock-constant-face) 208 210 (fontified t) 210 216 (fontified t face font-lock-constant-face) 216 227 (fontified t) 227 233 (fontified t face font-lock-type-face) 233 235 (fontified t) 235 250 (fontified t face font-lock-string-face) 250 266 (fontified t) 266 270 (fontified t face font-lock-variable-name-face) 270 272 (fontified t) 272 278 (fontified t face font-lock-type-face) 278 291 (fontified t) 291 292 (syntax-table #1# fontified t face font-lock-string-face) 292 293 (fontified t face font-lock-string-face) 293 294 (syntax-table #1# fontified t face font-lock-string-face) 294 313 (fontified t) 313 322 (fontified t face font-lock-string-face) 322 343 (fontified t) 343 346 (fontified t face font-lock-keyword-face) 346 347 (fontified t) 347 363 (fontified t face font-lock-variable-name-face) 363 366 (fontified t) 366 370 (fontified t face font-lock-constant-face) 370 385 (fontified t) 385 386 (fontified t face font-lock-variable-name-face) 386 388 (fontified t) 388 393 (fontified t face font-lock-constant-face) 393 395 (fontified t) 395 399 (fontified t face font-lock-type-face) 399 422 (fontified t) 422 425 (fontified t face font-lock-keyword-face) 425 426 (fontified t) 426 432 (fontified t face font-lock-variable-name-face) 432 435 (fontified t) 435 439 (fontified t face font-lock-constant-face) 439 454 (fontified t) 454 471 (fontified t face font-lock-string-face) 471 490 (fontified t) 490 495 (fontified t face font-lock-keyword-face) 495 504 (fontified t) 504 512 (fontified t) 512 517 (fontified t face font-lock-type-face) 517 519 (fontified t) 519 524 (fontified t face font-lock-type-face) 524 526 (fontified t face font-lock-type-face) 526 528 (fontified t) 528 529 (fontified t syntax-table #2#) 529 530 (fontified t) 530 533 (fontified t face font-lock-preprocessor-face) 533 534 (fontified t) 534 541 (fontified t) 541 552 (fontified t) 552 570 (fontified t) 570 571 (fontified t) 571 581 (fontified t) 581 589 (fontified t) 589 594 (fontified t face font-lock-type-face) 594 596 (fontified t) 596 602 (fontified t face font-lock-type-face) 602 604 (fontified t) 604 605 (syntax-table #2# fontified t) 605 606 (fontified t) 606 609 (fontified t face font-lock-preprocessor-face) 609 673 (fontified t) 673 676 (fontified t face font-lock-keyword-face) 676 677 (fontified t) 677 679 (fontified t face font-lock-keyword-face) 679 680 (fontified t) 680 705 (fontified t face font-lock-function-name-face) 705 706 (fontified t) 706 711 (fontified t face font-lock-variable-name-face) 711 713 (fontified t) 713 719 (fontified t face font-lock-type-face) 719 722 (fontified t) 722 723 (syntax-table #2# fontified t) 723 724 (fontified t) 724 730 (fontified t face font-lock-type-face) 730 731 (fontified t) 731 738 (fontified t face font-lock-type-face) 738 740 (fontified t) 740 744 (fontified t face font-lock-constant-face) 744 746 (fontified t) 746 752 (fontified t face font-lock-constant-face) 752 754 (fontified t) 754 763 (fontified t face font-lock-type-face) 763 771 (fontified t) 771 773 (fontified t face font-lock-keyword-face) 773 774 (fontified t) 774 777 (fontified t face font-lock-keyword-face) 777 778 (fontified t) 778 780 (fontified t face font-lock-type-face) 780 827 (fontified t) 827 829 (fontified t face font-lock-type-face) 829 848 (fontified t) 848 852 (fontified t face font-lock-keyword-face) 852 863 (fontified t) 863 866 (fontified t face font-lock-type-face) 866 867 (fontified t) 867 871 (fontified t face font-lock-constant-face) 871 873 (fontified t) 873 879 (fontified t face font-lock-constant-face) 879 888 (fontified t) 888 917 (fontified t face font-lock-string-face) 917 929 (fontified t) 929 931 (fontified t face font-lock-keyword-face) 931 932 (fontified t) 932 936 (fontified t face font-lock-function-name-face) 936 940 (fontified t) 940 941 (syntax-table #2# fontified t) 941 942 (fontified t) 942 950 (fontified t face font-lock-constant-face) 950 952 (fontified t) 952 962 (fontified t face font-lock-type-face) 962 969 (fontified t) 969 977 (fontified t face font-lock-constant-face) 977 979 (fontified t) 979 989 (fontified t face font-lock-type-face) 989 1008 (fontified t) 1008 1057 (fontified t face font-lock-string-face) 1057 1067 (fontified t) 1067 1075 (fontified t face font-lock-constant-face) 1075 1077 (fontified t) 1077 1081 (fontified t face font-lock-type-face) 1081 1084 (face font-lock-type-face fontified t) 1084 1086 (fontified t) 1086 1090 (face font-lock-type-face fontified t) 1090 1092 (fontified t) 1092 1115 (fontified t) 1115 1118 (fontified t face font-lock-keyword-face) 1118 1119 (fontified t) 1119 1125 (fontified t face font-lock-keyword-face) 1125 1126 (fontified t) 1126 1133 (fontified t face font-lock-type-face) 1133 1140 (fontified t) 1140 1143 (fontified t face font-lock-keyword-face) 1143 1144 (fontified t) 1144 1146 (fontified t face font-lock-variable-name-face) 1146 1148 (fontified t) 1148 1154 (fontified t face font-lock-type-face) 1154 1160 (fontified t) 1160 1163 (fontified t face font-lock-keyword-face) 1163 1164 (fontified t) 1164 1169 (fontified t face font-lock-variable-name-face) 1169 1171 (fontified t) 1171 1174 (fontified t face font-lock-type-face) 1174 1175 (fontified t) 1175 1181 (fontified t face font-lock-type-face) 1181 1187 (fontified t) 1187 1190 (fontified t face font-lock-keyword-face) 1190 1191 (fontified t) 1191 1193 (fontified t face font-lock-keyword-face) 1193 1194 (fontified t) 1194 1208 (fontified t face font-lock-function-name-face) 1208 1209 (fontified t) 1209 1214 (fontified t face font-lock-variable-name-face) 1214 1216 (fontified t) 1216 1222 (fontified t face font-lock-type-face) 1222 1225 (fontified t) 1225 1226 (fontified t syntax-table #2#) 1226 1227 (fontified t) 1227 1233 (fontified t face font-lock-type-face) 1233 1234 (fontified t) 1234 1241 (fontified t face font-lock-type-face) 1241 1253 (fontified t) 1253 1256 (fontified t face font-lock-keyword-face) 1256 1257 (fontified t) 1257 1261 (fontified t face font-lock-variable-name-face) 1261 1276 (fontified t) 1276 1279 (fontified t face font-lock-keyword-face) 1279 1280 (fontified t) 1280 1286 (fontified t face font-lock-variable-name-face) 1286 1323 (fontified t) 1323 1592 (fontified t face font-lock-string-face) 1592 1594 (face font-lock-string-face fontified t) 1594 1596 (fontified t)) . 1) (undo-tree-id2159 . 1406) (undo-tree-id2160 . -569) (undo-tree-id2161 . -569) (undo-tree-id2162 . -569) (undo-tree-id2163 . -569) (undo-tree-id2164 . -569) (undo-tree-id2165 . -569) (undo-tree-id2166 . -569) (undo-tree-id2167 . -888) (undo-tree-id2168 . -889) (undo-tree-id2169 . -569) (undo-tree-id2170 . -569) (undo-tree-id2171 . -888) (undo-tree-id2172 . -889) (undo-tree-id2173 . -569) (undo-tree-id2174 . -569) (undo-tree-id2175 . -888) (undo-tree-id2176 . -889) (undo-tree-id2177 . -570) (undo-tree-id2178 . -569) (undo-tree-id2179 . -888) (undo-tree-id2180 . -889) (undo-tree-id2181 . -569) (undo-tree-id2182 . -569) (undo-tree-id2183 . -570) (undo-tree-id2184 . -569) (undo-tree-id2185 . -888) (undo-tree-id2186 . -889) (undo-tree-id2187 . -570) (undo-tree-id2188 . -570) (undo-tree-id2189 . -570) (undo-tree-id2190 . -570) (undo-tree-id2191 . -570) (undo-tree-id2192 . -570) (undo-tree-id2193 . -888) (undo-tree-id2194 . -889) (undo-tree-id2195 . -533) (undo-tree-id2196 . -534) (undo-tree-id2197 . -569) (undo-tree-id2198 . -570) (undo-tree-id2199 . -569) (undo-tree-id2200 . -569) (undo-tree-id2201 . -569) (undo-tree-id2202 . -569) (undo-tree-id2203 . -569) (undo-tree-id2204 . -569) (undo-tree-id2205 . -569) (undo-tree-id2206 . -569) (undo-tree-id2207 . -568) (undo-tree-id2208 . -569) (undo-tree-id2209 . -568) (undo-tree-id2210 . -568) (undo-tree-id2211 . -569) (undo-tree-id2212 . -568) (undo-tree-id2213 . -568) (undo-tree-id2214 . -569) (undo-tree-id2215 . -568) (undo-tree-id2216 . -568) (undo-tree-id2217 . -568) (undo-tree-id2218 . -569) (undo-tree-id2219 . -568) (undo-tree-id2220 . -569) (undo-tree-id2221 . -568) (undo-tree-id2222 . -569) (undo-tree-id2223 . -184) (undo-tree-id2224 . -201) (undo-tree-id2225 . -552) (undo-tree-id2226 . -569) (undo-tree-id2227 . -628) (undo-tree-id2228 . -645) (undo-tree-id2229 . -568) (undo-tree-id2230 . -568) (undo-tree-id2231 . -568) (undo-tree-id2232 . -568) (undo-tree-id2233 . -568) (undo-tree-id2234 . -568) (undo-tree-id2235 . -568) (undo-tree-id2236 . -568) (undo-tree-id2237 . -568) (undo-tree-id2238 . -568) (undo-tree-id2239 . -568) (undo-tree-id2240 . -568) 569) nil (23738 10023 628245 996000) 0 nil]) ((#("," 0 1 (fontified t)) . 570) (undo-tree-id2241 . -1) (undo-tree-id2242 . -1) (undo-tree-id2243 . -1) (undo-tree-id2244 . -1) (undo-tree-id2245 . -1) (undo-tree-id2246 . -1) (undo-tree-id2247 . -1) (undo-tree-id2248 . -1) (undo-tree-id2249 . -1)) nil (23738 10023 628266 114000) 0 nil]) ((#("()" 0 2 (fontified t)) . 572) (undo-tree-id2250 . 2) (undo-tree-id2251 . -1) (undo-tree-id2252 . 2) (undo-tree-id2253 . -1) (undo-tree-id2254 . 1) (undo-tree-id2255 . -1) (undo-tree-id2256 . 1) (undo-tree-id2257 . -2) (undo-tree-id2258 . -1) (undo-tree-id2259 . -1)) nil (23738 10023 628279 760000) 0 nil]) ((570 . 572)) nil (23738 10023 628282 315000) 0 nil]) ((#(".unify" 0 6 (fontified t)) . 570) (undo-tree-id2260 . -1) (undo-tree-id2261 . -6)) nil (23738 10023 628285 917000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 570) (#("(" 0 1 (fontified t)) . -553) (undo-tree-id2262 . 1) (undo-tree-id2263 . -1) 554) nil (23738 10023 628290 424000) 0 nil]) ((551 . 553) (#(".or" 0 3 (fontified t)) . 551)) nil (23738 10023 628292 766000) 0 nil]) ((581 . 582) (#(")" 0 1 (fontified t)) . -579) (579 . 580) (#(")" 0 1 (fontified t)) . -573) (573 . 574) (#(")" 0 1 (fontified t)) . -554) (554 . 555) (#(")" 0 1 (fontified t)) . -551) (551 . 552) (#(")" 0 1 (fontified t)) . -535) (534 . 536) (#("(" 0 1 (fontified nil)) . -534) (534 . 535) (#(" " 0 1 (fontified t)) . -534) (undo-tree-id2264 . -1) (undo-tree-id2265 . -1) 535 (534 . 535) (532 . 534) (#("f" 0 1 (fontified t)) . -532) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) 533 (531 . 533) (t 23738 9984 818571 598000)) nil (23738 10023 628305 408000) 0 nil]) ((1 . 1982) (#("use crate::{query, or};
use postgres;
use warp::Filter;

pub enum Scope {
    Public,
    Private,
}

pub fn get_token(scope: Scope) -> warp::filters::BoxedFilter<(String,)> {
    let token_from_header = warp::header::header::<String>(\"authorization\")
        .map(|auth: String| auth.split(' ').nth(1).unwrap_or(\"invalid\").to_string());

    let token_from_query = warp::query().map(|q: query::Auth| q.access_token);
    let public = warp::any().map(|| \"no access token\".to_string());
    match scope {
        Scope::Private => token_from_query.or(token_from_header).unify().boxed(),
        Scope::Public => or!(token_from_query, token_from_header, public).boxed(),
    }
}

pub fn get_account_id_from_token(token: String) -> Result<Account, warp::reject::Rejection> {
    if let Ok(account_id) = get_account_id(token) {
        Ok(account_id)
    } else {
        Err(warp::reject::custom(\"Error: Invalid access token\"))
    }
}

fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
}

pub struct Account {
    pub id: String,
    pub langs: Vec<String>,
}

pub fn get_account_id(token: String) -> Result<Account, ()> {
    let conn = conn();
    let result = &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&token],
        )
        .expect(\"Hard-coded query will return Some([0 or more rows])\");
    if !result.is_empty() {
        let only_row = result.get(0);
        let id: i64 = only_row.get(1);
        let langs: Vec<String> = only_row.get(2);
        Ok(Account {
            id: id.to_string(),
            langs,
        })
    } else {
        Err(())
    }
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 11 (fontified t) 11 19 (fontified t) 19 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t) 23 24 (fontified t) 24 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t) 28 36 (fontified t face font-lock-constant-face) 36 38 (fontified t) 38 41 (fontified t face font-lock-keyword-face) 41 42 (fontified t) 42 46 (fontified t face font-lock-constant-face) 46 48 (fontified t) 48 54 (fontified t face font-lock-type-face) 54 57 (fontified t) 57 60 (fontified t face font-lock-keyword-face) 60 61 (fontified t) 61 65 (fontified t face font-lock-keyword-face) 65 66 (fontified t) 66 71 (fontified t face font-lock-type-face) 71 78 (fontified t) 78 84 (fontified t face font-lock-type-face) 84 90 (fontified t) 90 97 (fontified t face font-lock-type-face) 97 102 (fontified t) 102 105 (fontified t face font-lock-keyword-face) 105 106 (fontified t) 106 108 (fontified t face font-lock-keyword-face) 108 109 (fontified t) 109 118 (fontified t face font-lock-function-name-face) 118 119 (fontified t) 119 124 (fontified t face font-lock-variable-name-face) 124 126 (fontified t) 126 131 (fontified t face font-lock-type-face) 131 134 (fontified t) 134 135 (syntax-table #2# fontified t) 135 136 (fontified t) 136 140 (fontified t face font-lock-constant-face) 140 142 (fontified t) 142 149 (fontified t face font-lock-constant-face) 149 151 (fontified t) 151 162 (fontified t face font-lock-type-face) 162 164 (fontified t) 164 170 (fontified t face font-lock-type-face) 170 180 (fontified t) 180 183 (fontified t face font-lock-keyword-face) 183 184 (fontified t) 184 201 (fontified t face font-lock-variable-name-face) 201 204 (fontified t) 204 208 (fontified t face font-lock-constant-face) 208 210 (fontified t) 210 216 (fontified t face font-lock-constant-face) 216 227 (fontified t) 227 233 (fontified t face font-lock-type-face) 233 235 (fontified t) 235 250 (fontified t face font-lock-string-face) 250 266 (fontified t) 266 270 (fontified t face font-lock-variable-name-face) 270 272 (fontified t) 272 278 (fontified t face font-lock-type-face) 278 291 (fontified t) 291 292 (syntax-table #1# fontified t face font-lock-string-face) 292 293 (fontified t face font-lock-string-face) 293 294 (syntax-table #1# fontified t face font-lock-string-face) 294 313 (fontified t) 313 322 (fontified t face font-lock-string-face) 322 343 (fontified t) 343 346 (fontified t face font-lock-keyword-face) 346 347 (fontified t) 347 363 (fontified t face font-lock-variable-name-face) 363 366 (fontified t) 366 370 (fontified t face font-lock-constant-face) 370 385 (fontified t) 385 386 (fontified t face font-lock-variable-name-face) 386 388 (fontified t) 388 393 (fontified t face font-lock-constant-face) 393 395 (fontified t) 395 399 (fontified t face font-lock-type-face) 399 422 (fontified t) 422 425 (fontified t face font-lock-keyword-face) 425 426 (fontified t) 426 432 (fontified t face font-lock-variable-name-face) 432 435 (fontified t) 435 439 (fontified t face font-lock-constant-face) 439 454 (fontified t) 454 471 (fontified t face font-lock-string-face) 471 490 (fontified t) 490 495 (fontified t face font-lock-keyword-face) 495 505 (fontified t) 505 506 (fontified t) 506 512 (fontified t) 512 517 (fontified t face font-lock-type-face) 517 519 (fontified t) 519 526 (fontified t face font-lock-type-face) 526 528 (fontified t) 528 529 (syntax-table #2# fontified t) 529 538 (fontified t) 538 586 (fontified t) 586 594 (fontified t) 594 599 (fontified t face font-lock-type-face) 599 601 (fontified t) 601 607 (fontified t face font-lock-type-face) 607 609 (fontified t) 609 610 (fontified t syntax-table #2#) 610 611 (fontified t) 611 614 (fontified t face font-lock-preprocessor-face) 614 678 (fontified t) 678 681 (fontified t face font-lock-keyword-face) 681 682 (fontified t) 682 684 (fontified t face font-lock-keyword-face) 684 685 (fontified t) 685 710 (fontified t face font-lock-function-name-face) 710 711 (fontified t) 711 716 (fontified t face font-lock-variable-name-face) 716 718 (fontified t) 718 724 (fontified t face font-lock-type-face) 724 727 (fontified t) 727 728 (fontified t syntax-table #2#) 728 729 (fontified t) 729 735 (fontified t face font-lock-type-face) 735 736 (fontified t) 736 743 (fontified t face font-lock-type-face) 743 745 (fontified t) 745 749 (fontified t face font-lock-constant-face) 749 751 (fontified t) 751 757 (fontified t face font-lock-constant-face) 757 759 (fontified t) 759 768 (fontified t face font-lock-type-face) 768 776 (fontified t) 776 778 (fontified t face font-lock-keyword-face) 778 779 (fontified t) 779 782 (fontified t face font-lock-keyword-face) 782 783 (fontified t) 783 785 (fontified t face font-lock-type-face) 785 832 (fontified t) 832 834 (fontified t face font-lock-type-face) 834 853 (fontified t) 853 857 (fontified t face font-lock-keyword-face) 857 868 (fontified t) 868 871 (fontified t face font-lock-type-face) 871 872 (fontified t) 872 876 (fontified t face font-lock-constant-face) 876 878 (fontified t) 878 884 (fontified t face font-lock-constant-face) 884 893 (fontified t) 893 922 (fontified t face font-lock-string-face) 922 934 (fontified t) 934 936 (fontified t face font-lock-keyword-face) 936 937 (fontified t) 937 941 (fontified t face font-lock-function-name-face) 941 945 (fontified t) 945 946 (fontified t syntax-table #2#) 946 947 (fontified t) 947 955 (fontified t face font-lock-constant-face) 955 957 (fontified t) 957 967 (fontified t face font-lock-type-face) 967 974 (fontified t) 974 982 (fontified t face font-lock-constant-face) 982 984 (fontified t) 984 994 (fontified t face font-lock-type-face) 994 1013 (fontified t) 1013 1062 (fontified t face font-lock-string-face) 1062 1072 (fontified t) 1072 1080 (fontified t face font-lock-constant-face) 1080 1082 (fontified t) 1082 1086 (fontified t face font-lock-type-face) 1086 1089 (face font-lock-type-face fontified t) 1089 1091 (fontified t) 1091 1095 (face font-lock-type-face fontified t) 1095 1097 (fontified t) 1097 1120 (fontified t) 1120 1123 (fontified t face font-lock-keyword-face) 1123 1124 (fontified t) 1124 1130 (fontified t face font-lock-keyword-face) 1130 1131 (fontified t) 1131 1138 (fontified t face font-lock-type-face) 1138 1145 (fontified t) 1145 1148 (fontified t face font-lock-keyword-face) 1148 1149 (fontified t) 1149 1151 (fontified t face font-lock-variable-name-face) 1151 1153 (fontified t) 1153 1159 (fontified t face font-lock-type-face) 1159 1165 (fontified t) 1165 1168 (fontified t face font-lock-keyword-face) 1168 1169 (fontified t) 1169 1174 (fontified t face font-lock-variable-name-face) 1174 1176 (fontified t) 1176 1179 (fontified t face font-lock-type-face) 1179 1180 (fontified t) 1180 1186 (fontified t face font-lock-type-face) 1186 1192 (fontified t) 1192 1195 (fontified t face font-lock-keyword-face) 1195 1196 (fontified t) 1196 1198 (fontified t face font-lock-keyword-face) 1198 1199 (fontified t) 1199 1213 (fontified t face font-lock-function-name-face) 1213 1214 (fontified t) 1214 1219 (fontified t face font-lock-variable-name-face) 1219 1221 (fontified t) 1221 1227 (fontified t face font-lock-type-face) 1227 1230 (fontified t) 1230 1231 (fontified t syntax-table #2#) 1231 1232 (fontified t) 1232 1238 (fontified t face font-lock-type-face) 1238 1239 (fontified t) 1239 1246 (fontified t face font-lock-type-face) 1246 1258 (fontified t) 1258 1261 (fontified t face font-lock-keyword-face) 1261 1262 (fontified t) 1262 1266 (fontified t face font-lock-variable-name-face) 1266 1281 (fontified t) 1281 1284 (fontified t face font-lock-keyword-face) 1284 1285 (fontified t) 1285 1291 (fontified t face font-lock-variable-name-face) 1291 1328 (fontified t) 1328 1597 (fontified t face font-lock-string-face) 1597 1599 (face font-lock-string-face fontified t) 1599 1601 (fontified t)) . 1) (undo-tree-id2092 . 1962) (undo-tree-id2093 . -14) (undo-tree-id2094 . -13) (undo-tree-id2095 . -18) (undo-tree-id2096 . -18) (undo-tree-id2097 . -24) (undo-tree-id2098 . -24) (undo-tree-id2099 . -24) (undo-tree-id2100 . -24) (undo-tree-id2101 . -24) (undo-tree-id2102 . -24) (undo-tree-id2103 . -24) (undo-tree-id2104 . -12) (undo-tree-id2105 . -17) (undo-tree-id2106 . -24) (undo-tree-id2107 . -24) (undo-tree-id2108 . -12) (undo-tree-id2109 . -17) (undo-tree-id2110 . -12) (undo-tree-id2111 . -17) (undo-tree-id2112 . -24) (undo-tree-id2113 . -24) (undo-tree-id2114 . -24) (undo-tree-id2115 . -24) (undo-tree-id2116 . -388) (undo-tree-id2117 . -393) (undo-tree-id2118 . -24) (undo-tree-id2119 . -24) (undo-tree-id2120 . -24) (undo-tree-id2121 . -24) (undo-tree-id2122 . -24) (undo-tree-id2123 . -24) (undo-tree-id2124 . -24) (undo-tree-id2125 . -24) (undo-tree-id2126 . -24) (undo-tree-id2127 . -24) (undo-tree-id2128 . -24) (undo-tree-id2129 . -24) (undo-tree-id2130 . -24) (undo-tree-id2131 . -24) (undo-tree-id2132 . -24) (undo-tree-id2133 . -24) 25) nil (23738 9984 806894 806000) 0 nil]) ((#("use crate::query;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 18 (fontified t)) . 25) (undo-tree-id2134 . -16) (undo-tree-id2135 . -16) (undo-tree-id2136 . -16) (undo-tree-id2137 . -16) (undo-tree-id2138 . -16) (undo-tree-id2139 . -16) (undo-tree-id2140 . -16) (undo-tree-id2141 . -4) (undo-tree-id2142 . -9) (undo-tree-id2143 . -4) (undo-tree-id2144 . -9) (undo-tree-id2145 . -4) (undo-tree-id2146 . -16) (undo-tree-id2147 . -4) (undo-tree-id2148 . -16) (undo-tree-id2149 . -11) (undo-tree-id2150 . -16) (undo-tree-id2151 . -4) (undo-tree-id2152 . -9) (undo-tree-id2153 . -16) (undo-tree-id2154 . -16) 41) nil (23738 9984 806919 262000) 0 nil]) ((15 . 20) (#("i" 0 1 (fontified t)) . -15) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (#("e" 0 1 (fontified t)) . -16) (undo-tree-id2157 . -1) (#("r" 0 1 (fontified t)) . -17) (undo-tree-id2158 . -1) 18 (16 . 18) (13 . 16) (15 . 16) (#("}" 0 1 (fontified t)) . -13) (12 . 14) (#("{" 0 1 (fontified nil)) . -12) (12 . 13) (t 23738 9970 141996 690000)) nil (23738 9984 806932 331000) 0 nil]) ((1 . 1991) (#("use crate::query;
use crate::or;
use postgres;
use warp::Filter;

pub enum Scope {
    Public,
    Private,
}

pub fn get_token(scope: Scope) -> warp::filters::BoxedFilter<(String,)> {
    let token_from_header = warp::header::header::<String>(\"authorization\")
        .map(|auth: String| auth.split(' ').nth(1).unwrap_or(\"invalid\").to_string());

    let token_from_query = warp::query().map(|q: query::Auth| q.access_token);
    let public = warp::any().map(|| \"no access token\".to_string());
    match scope {
        Scope::Private => token_from_query.or(token_from_header).unify().boxed(),
        Scope::Public => or!(token_from_query, token_from_header, public).boxed(),
    }
}

pub fn get_account_id_from_token(token: String) -> Result<Account, warp::reject::Rejection> {
    if let Ok(account_id) = get_account_id(token) {
        Ok(account_id)
    } else {
        Err(warp::reject::custom(\"Error: Invalid access token\"))
    }
}

fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
}

pub struct Account {
    pub id: String,
    pub langs: Vec<String>,
}

pub fn get_account_id(token: String) -> Result<Account, ()> {
    let conn = conn();
    let result = &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&token],
        )
        .expect(\"Hard-coded query will return Some([0 or more rows])\");
    if !result.is_empty() {
        let only_row = result.get(0);
        let id: i64 = only_row.get(1);
        let langs: Vec<String> = only_row.get(2);
        Ok(Account {
            id: id.to_string(),
            langs,
        })
    } else {
        Err(())
    }
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 17 (fontified t) 17 18 (fontified t) 18 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 27 (fontified t face font-lock-keyword-face) 27 29 (fontified t) 29 31 (fontified t) 31 32 (fontified t) 32 33 (fontified t) 33 36 (fontified t face font-lock-keyword-face) 36 37 (fontified t) 37 45 (fontified t face font-lock-constant-face) 45 47 (fontified t) 47 50 (fontified t face font-lock-keyword-face) 50 51 (fontified t) 51 55 (fontified t face font-lock-constant-face) 55 57 (fontified t) 57 63 (fontified t face font-lock-type-face) 63 66 (fontified t) 66 69 (fontified t face font-lock-keyword-face) 69 70 (fontified t) 70 74 (fontified t face font-lock-keyword-face) 74 75 (fontified t) 75 80 (fontified t face font-lock-type-face) 80 87 (fontified t) 87 93 (fontified t face font-lock-type-face) 93 99 (fontified t) 99 106 (fontified t face font-lock-type-face) 106 111 (fontified t) 111 114 (fontified t face font-lock-keyword-face) 114 115 (fontified t) 115 117 (fontified t face font-lock-keyword-face) 117 118 (fontified t) 118 127 (fontified t face font-lock-function-name-face) 127 128 (fontified t) 128 133 (fontified t face font-lock-variable-name-face) 133 135 (fontified t) 135 140 (fontified t face font-lock-type-face) 140 143 (fontified t) 143 144 (syntax-table #2# fontified t) 144 145 (fontified t) 145 149 (fontified t face font-lock-constant-face) 149 151 (fontified t) 151 158 (fontified t face font-lock-constant-face) 158 160 (fontified t) 160 171 (fontified t face font-lock-type-face) 171 173 (fontified t) 173 179 (fontified t face font-lock-type-face) 179 189 (fontified t) 189 192 (fontified t face font-lock-keyword-face) 192 193 (fontified t) 193 210 (fontified t face font-lock-variable-name-face) 210 213 (fontified t) 213 217 (fontified t face font-lock-constant-face) 217 219 (fontified t) 219 225 (fontified t face font-lock-constant-face) 225 236 (fontified t) 236 242 (fontified t face font-lock-type-face) 242 244 (fontified t) 244 259 (fontified t face font-lock-string-face) 259 275 (fontified t) 275 279 (fontified t face font-lock-variable-name-face) 279 281 (fontified t) 281 287 (fontified t face font-lock-type-face) 287 300 (fontified t) 300 301 (syntax-table #1# fontified t face font-lock-string-face) 301 302 (fontified t face font-lock-string-face) 302 303 (syntax-table #1# fontified t face font-lock-string-face) 303 322 (fontified t) 322 331 (fontified t face font-lock-string-face) 331 352 (fontified t) 352 355 (fontified t face font-lock-keyword-face) 355 356 (fontified t) 356 372 (fontified t face font-lock-variable-name-face) 372 375 (fontified t) 375 379 (fontified t face font-lock-constant-face) 379 394 (fontified t) 394 395 (fontified t face font-lock-variable-name-face) 395 397 (fontified t) 397 402 (fontified t face font-lock-constant-face) 402 404 (fontified t) 404 408 (fontified t face font-lock-type-face) 408 431 (fontified t) 431 434 (fontified t face font-lock-keyword-face) 434 435 (fontified t) 435 441 (fontified t face font-lock-variable-name-face) 441 444 (fontified t) 444 448 (fontified t face font-lock-constant-face) 448 463 (fontified t) 463 480 (fontified t face font-lock-string-face) 480 499 (fontified t) 499 504 (fontified t face font-lock-keyword-face) 504 514 (fontified t) 514 515 (fontified t) 515 518 (fontified t) 518 521 (fontified t) 521 526 (face font-lock-type-face fontified t) 526 528 (fontified t) 528 533 (face font-lock-type-face fontified t) 533 535 (face font-lock-type-face fontified t) 535 537 (fontified t) 537 538 (syntax-table #2# fontified t) 538 547 (fontified t) 547 595 (fontified t) 595 603 (fontified t) 603 608 (fontified t face font-lock-type-face) 608 610 (fontified t) 610 611 (fontified t face font-lock-type-face) 611 616 (fontified t face font-lock-type-face) 616 618 (fontified t) 618 619 (syntax-table #2# fontified t) 619 620 (fontified t) 620 623 (fontified t face font-lock-preprocessor-face) 623 677 (fontified t) 677 678 (fontified t) 678 685 (fontified t) 685 686 (fontified t) 686 687 (fontified t) 687 690 (fontified t face font-lock-keyword-face) 690 691 (fontified t) 691 693 (fontified t face font-lock-keyword-face) 693 694 (fontified t) 694 719 (fontified t face font-lock-function-name-face) 719 720 (fontified t) 720 725 (fontified t face font-lock-variable-name-face) 725 727 (fontified t) 727 733 (fontified t face font-lock-type-face) 733 736 (fontified t) 736 737 (syntax-table #2# fontified t) 737 738 (fontified t) 738 744 (fontified t face font-lock-type-face) 744 745 (fontified t) 745 752 (fontified t face font-lock-type-face) 752 754 (fontified t) 754 758 (fontified t face font-lock-constant-face) 758 760 (fontified t) 760 766 (fontified t face font-lock-constant-face) 766 768 (fontified t) 768 777 (fontified t face font-lock-type-face) 777 785 (fontified t) 785 787 (fontified t face font-lock-keyword-face) 787 788 (fontified t) 788 791 (fontified t face font-lock-keyword-face) 791 792 (fontified t) 792 794 (fontified t face font-lock-type-face) 794 841 (fontified t) 841 843 (fontified t face font-lock-type-face) 843 862 (fontified t) 862 866 (fontified t face font-lock-keyword-face) 866 877 (fontified t) 877 880 (fontified t face font-lock-type-face) 880 881 (fontified t) 881 885 (fontified t face font-lock-constant-face) 885 887 (fontified t) 887 893 (fontified t face font-lock-constant-face) 893 902 (fontified t) 902 931 (fontified t face font-lock-string-face) 931 943 (fontified t) 943 945 (fontified t face font-lock-keyword-face) 945 946 (fontified t) 946 950 (fontified t face font-lock-function-name-face) 950 954 (fontified t) 954 955 (syntax-table #2# fontified t) 955 956 (fontified t) 956 964 (fontified t face font-lock-constant-face) 964 966 (fontified t) 966 976 (fontified t face font-lock-type-face) 976 983 (fontified t) 983 991 (fontified t face font-lock-constant-face) 991 993 (fontified t) 993 1003 (fontified t face font-lock-type-face) 1003 1022 (fontified t) 1022 1071 (fontified t face font-lock-string-face) 1071 1081 (fontified t) 1081 1088 (fontified t face font-lock-constant-face) 1088 1089 (fontified t face font-lock-constant-face) 1089 1091 (fontified t) 1091 1095 (fontified t face font-lock-type-face) 1095 1098 (face font-lock-type-face fontified t) 1098 1100 (fontified t) 1100 1104 (face font-lock-type-face fontified t) 1104 1106 (fontified t) 1106 1129 (fontified t) 1129 1132 (fontified t face font-lock-keyword-face) 1132 1133 (fontified t) 1133 1139 (fontified t face font-lock-keyword-face) 1139 1140 (fontified t) 1140 1147 (fontified t face font-lock-type-face) 1147 1154 (fontified t) 1154 1157 (fontified t face font-lock-keyword-face) 1157 1158 (fontified t) 1158 1160 (fontified t face font-lock-variable-name-face) 1160 1162 (fontified t) 1162 1168 (fontified t face font-lock-type-face) 1168 1174 (fontified t) 1174 1177 (fontified t face font-lock-keyword-face) 1177 1178 (fontified t) 1178 1183 (fontified t face font-lock-variable-name-face) 1183 1185 (fontified t) 1185 1186 (fontified t face font-lock-type-face) 1186 1188 (fontified t face font-lock-type-face) 1188 1189 (fontified t) 1189 1195 (fontified t face font-lock-type-face) 1195 1198 (fontified t) 1198 1201 (fontified t) 1201 1204 (fontified t face font-lock-keyword-face) 1204 1205 (fontified t) 1205 1207 (fontified t face font-lock-keyword-face) 1207 1208 (fontified t) 1208 1222 (fontified t face font-lock-function-name-face) 1222 1223 (fontified t) 1223 1228 (fontified t face font-lock-variable-name-face) 1228 1230 (fontified t) 1230 1236 (fontified t face font-lock-type-face) 1236 1239 (fontified t) 1239 1240 (syntax-table #2# fontified t) 1240 1241 (fontified t) 1241 1247 (fontified t face font-lock-type-face) 1247 1248 (fontified t) 1248 1255 (fontified t face font-lock-type-face) 1255 1267 (fontified t) 1267 1270 (fontified t face font-lock-keyword-face) 1270 1271 (fontified t) 1271 1275 (fontified t face font-lock-variable-name-face) 1275 1290 (fontified t) 1290 1293 (fontified t face font-lock-keyword-face) 1293 1294 (fontified t) 1294 1300 (fontified t face font-lock-variable-name-face) 1300 1337 (fontified t) 1337 1606 (fontified t face font-lock-string-face) 1606 1608 (face font-lock-string-face fontified t) 1608 1610 (fontified t) 1659 1698 (face font-lock-string-face) 1698 1712 (face font-lock-string-face)) . 1) (undo-tree-id1988 . -443) (undo-tree-id1989 . -29) (undo-tree-id1990 . -18) (undo-tree-id1991 . -18) (undo-tree-id1992 . 1981) (undo-tree-id1993 . -18) (undo-tree-id1994 . -45) (undo-tree-id1995 . -18) (undo-tree-id1996 . -620) (undo-tree-id1997 . -620) (undo-tree-id1998 . -677) (undo-tree-id1999 . -620) (undo-tree-id2000 . -18) (undo-tree-id2001 . -18) (undo-tree-id2002 . -18) (undo-tree-id2003 . -18) (undo-tree-id2004 . -620) (undo-tree-id2005 . -18) (undo-tree-id2006 . -18) (undo-tree-id2007 . -18) (undo-tree-id2008 . -18) (undo-tree-id2009 . -18) (undo-tree-id2010 . -18) (undo-tree-id2011 . -18) (undo-tree-id2012 . -18) (undo-tree-id2013 . -18) (undo-tree-id2014 . -18) (undo-tree-id2015 . -18) (undo-tree-id2016 . -18) (undo-tree-id2017 . -18) (undo-tree-id2018 . -18) (undo-tree-id2019 . -29) (undo-tree-id2020 . -18) (undo-tree-id2021 . -18) (undo-tree-id2022 . -18) (undo-tree-id2023 . -18) (undo-tree-id2024 . -18) (undo-tree-id2025 . -111) (undo-tree-id2026 . -111) (undo-tree-id2027 . -111) (undo-tree-id2028 . -111) (undo-tree-id2029 . -111) (undo-tree-id2030 . -111) (undo-tree-id2031 . -111) (undo-tree-id2032 . -111) (undo-tree-id2033 . -111) (undo-tree-id2034 . -111) (undo-tree-id2035 . -620) (undo-tree-id2036 . -620) (undo-tree-id2037 . -620) (undo-tree-id2038 . -620) (undo-tree-id2039 . -620) (undo-tree-id2040 . -620) (undo-tree-id2041 . -620) (undo-tree-id2042 . -620) (undo-tree-id2043 . -620) (undo-tree-id2044 . -443) (undo-tree-id2045 . -511) (undo-tree-id2046 . -620) (undo-tree-id2047 . -443) (undo-tree-id2048 . -443) (undo-tree-id2049 . -443) (undo-tree-id2050 . -443) (undo-tree-id2051 . -443) (undo-tree-id2052 . -443) (undo-tree-id2053 . -443) (undo-tree-id2054 . -29) (undo-tree-id2055 . -45) (undo-tree-id2056 . -29) (undo-tree-id2057 . -29) (undo-tree-id2058 . -29) (undo-tree-id2059 . -29) (undo-tree-id2060 . -29) (undo-tree-id2061 . -11) (undo-tree-id2062 . -16) (undo-tree-id2063 . -4) (undo-tree-id2064 . -4) (undo-tree-id2065 . -397) (undo-tree-id2066 . -402) (undo-tree-id2067 . -4) (undo-tree-id2068 . -4) (undo-tree-id2069 . -4) (undo-tree-id2070 . -4) (undo-tree-id2071 . -4) (undo-tree-id2072 . -4) (undo-tree-id2073 . -8) (undo-tree-id2074 . -8) (undo-tree-id2075 . -8) 9) nil (23738 9970 121309 895000) 0 nil]) ((5 . 10) (#("super" 0 5 (fontified t face font-lock-keyword-face)) . 5) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -5) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) 6) nil (23738 9970 121343 708000) 0 nil]) ((#("#[macro_use]
" 0 1 (fontified t face font-lock-preprocessor-face) 1 11 (fontified t face font-lock-preprocessor-face) 11 12 (fontified t face font-lock-preprocessor-face) 12 13 (fontified t)) . 19) (undo-tree-id2081 . -12) (undo-tree-id2082 . -13) (undo-tree-id2083 . -12)) nil (23738 9970 121349 732000) 0 nil]) ((#("utils::" 0 5 (fontified t face font-lock-constant-face) 5 7 (fontified t)) . 43) (undo-tree-id2084 . -5) (undo-tree-id2085 . -5) (undo-tree-id2086 . -5) (undo-tree-id2087 . -5) (undo-tree-id2088 . -5) (undo-tree-id2089 . -5) (undo-tree-id2090 . -5) (undo-tree-id2091 . -5) (t 23738 9780 556519 582000)) nil (23738 9970 121359 462000) 0 nil]) ((#("utils::" 0 5 (fontified t face font-lock-constant-face) 5 7 (fontified t)) . 641) (undo-tree-id1975 . -7) (undo-tree-id1976 . -7) (undo-tree-id1977 . -7) (undo-tree-id1978 . -7) (undo-tree-id1979 . -7) (undo-tree-id1980 . -7) (undo-tree-id1981 . -7) (undo-tree-id1982 . -7) (undo-tree-id1983 . -7) (undo-tree-id1984 . -7) (undo-tree-id1985 . -7) (undo-tree-id1986 . -5) (undo-tree-id1987 . -5)) nil (23738 9780 475626 856000) 0 nil]) ((48 . 52) (t 23738 9633 67451 829000)) nil (23738 9780 475632 935000) 0 nil]) ((641 . 644) (637 . 641) (t 23738 9489 838364 865000)) nil (23738 9632 969572 194000) 0 nil] [nil nil ((48 . 52) (t 23738 9489 838364 865000)) ((#("::or" 0 4 (fontified t)) . 48) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) (undo-tree-id1926 . -2) (undo-tree-id1927 . -1) (undo-tree-id1928 . -2) (undo-tree-id1929 . -2) (undo-tree-id1930 . -1) (undo-tree-id1931 . -2) (undo-tree-id1932 . -2) (undo-tree-id1933 . -1) (undo-tree-id1934 . -2) (undo-tree-id1935 . -1) (undo-tree-id1936 . -2) (undo-tree-id1937 . -1) (undo-tree-id1938 . -2) (undo-tree-id1939 . -2) (undo-tree-id1940 . -2) (undo-tree-id1941 . -2) (undo-tree-id1942 . -3) (undo-tree-id1943 . -2) (undo-tree-id1944 . -3) (undo-tree-id1945 . -3) (undo-tree-id1946 . -2) (undo-tree-id1947 . -3) (undo-tree-id1948 . -3) (undo-tree-id1949 . -2) (undo-tree-id1950 . -3) (undo-tree-id1951 . -2) (undo-tree-id1952 . -3) (undo-tree-id1953 . -3) (undo-tree-id1954 . -3) (undo-tree-id1955 . -3) (undo-tree-id1956 . -4) (undo-tree-id1957 . -3) (undo-tree-id1958 . -4) (undo-tree-id1959 . -4) (undo-tree-id1960 . -3) (undo-tree-id1961 . -4) (undo-tree-id1962 . -4) (undo-tree-id1963 . -3) (undo-tree-id1964 . -4) (undo-tree-id1965 . -4) (undo-tree-id1966 . -3) (undo-tree-id1967 . -3) (undo-tree-id1968 . -3) (undo-tree-id1969 . -4) (undo-tree-id1970 . -2) (undo-tree-id1971 . -3) (undo-tree-id1972 . -1) (undo-tree-id1973 . -2) (undo-tree-id1974 . -1)) (23738 9621 133798 857000) 0 nil] [nil nil ((#("pub fn get_token(scope: Scope) -> warp::filters::BoxedFilter<(String,)> {
    let token_from_header = warp::header::header::<String>(\"authorization\")
        .map(|auth: String| auth.split(' ').nth(1).unwrap_or(\"invalid\").to_string());

    let token_from_query = warp::query().map(|q: query::Auth| q.access_token);
    let public = warp::any().map(|| \"no access token\".to_string());
    match scope {
        Scope::Private => token_from_query.or(token_from_header).unify().boxed(),
        Scope::Public => or!(token_from_query, token_from_header, public).boxed(),
    }
}" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 16 (fontified t face font-lock-function-name-face) 16 17 (fontified t) 17 22 (fontified t face font-lock-variable-name-face) 22 24 (fontified t) 24 29 (fontified t face font-lock-type-face) 29 32 (fontified t) 32 33 (syntax-table #2# fontified t) 33 34 (fontified t) 34 38 (fontified t face font-lock-constant-face) 38 40 (fontified t) 40 47 (fontified t face font-lock-constant-face) 47 49 (fontified t) 49 60 (fontified t face font-lock-type-face) 60 62 (fontified t) 62 68 (fontified t face font-lock-type-face) 68 78 (fontified t) 78 81 (fontified t face font-lock-keyword-face) 81 82 (fontified t) 82 99 (fontified t face font-lock-variable-name-face) 99 102 (fontified t) 102 106 (fontified t face font-lock-constant-face) 106 108 (fontified t) 108 114 (fontified t face font-lock-constant-face) 114 125 (fontified t) 125 131 (fontified t face font-lock-type-face) 131 133 (fontified t) 133 148 (fontified t face font-lock-string-face) 148 164 (fontified t) 164 168 (fontified t face font-lock-variable-name-face) 168 170 (fontified t) 170 176 (fontified t face font-lock-type-face) 176 189 (fontified t) 189 190 (syntax-table #1# fontified t face font-lock-string-face) 190 191 (fontified t face font-lock-string-face) 191 192 (syntax-table #1# fontified t face font-lock-string-face) 192 211 (fontified t) 211 220 (fontified t face font-lock-string-face) 220 241 (fontified t) 241 244 (fontified t face font-lock-keyword-face) 244 245 (fontified t) 245 261 (fontified t face font-lock-variable-name-face) 261 264 (fontified t) 264 268 (fontified t face font-lock-constant-face) 268 283 (fontified t) 283 284 (fontified t face font-lock-variable-name-face) 284 286 (fontified t) 286 291 (fontified t face font-lock-constant-face) 291 293 (fontified t) 293 297 (fontified t face font-lock-type-face) 297 320 (fontified t) 320 323 (fontified t face font-lock-keyword-face) 323 324 (fontified t) 324 330 (fontified t face font-lock-variable-name-face) 330 333 (fontified t) 333 337 (fontified t face font-lock-constant-face) 337 352 (fontified t) 352 369 (fontified t face font-lock-string-face) 369 388 (fontified t) 388 393 (fontified t face font-lock-keyword-face) 393 403 (fontified t) 403 404 (fontified t) 404 410 (fontified t) 410 415 (face font-lock-type-face fontified t) 415 417 (fontified t) 417 422 (face font-lock-type-face fontified t) 422 424 (face font-lock-type-face fontified t) 424 426 (fontified t) 426 427 (syntax-table #2# fontified t) 427 436 (fontified t) 436 484 (fontified t) 484 492 (fontified t) 492 497 (fontified t face font-lock-type-face) 497 499 (fontified t) 499 505 (fontified t face font-lock-type-face) 505 507 (fontified t) 507 508 (syntax-table #2# fontified t) 508 509 (fontified t) 509 512 (fontified t face font-lock-preprocessor-face) 512 566 (fontified t) 566 567 (fontified t) 567 574 (fontified t)) . 128) (undo-tree-id1897 . -509) (undo-tree-id1898 . -509) (undo-tree-id1899 . -566) (undo-tree-id1900 . -509) (undo-tree-id1901 . -509) (undo-tree-id1902 . -509) (undo-tree-id1903 . -509) (undo-tree-id1904 . -511) (undo-tree-id1905 . -509) (undo-tree-id1906 . -511) (undo-tree-id1907 . -509) (undo-tree-id1908 . -511) (undo-tree-id1909 . -509) (undo-tree-id1910 . -511) (undo-tree-id1911 . -133) (undo-tree-id1912 . -134) (undo-tree-id1913 . -31) (undo-tree-id1914 . -33) (undo-tree-id1915 . -133) (undo-tree-id1916 . -134) (undo-tree-id1917 . -133) (undo-tree-id1918 . -134) (t 23738 9489 838364 865000)) ((128 . 702)) (23738 9541 157180 926000) 0 nil]) ((#("
" 0 1 (fontified t rear-nonsticky t)) . 19) (undo-tree-id1896 . -1)) nil (23738 9621 139159 524000) 0 nil]) ((nil rear-nonsticky nil 19 . 20) (#("
" 0 1 (fontified nil)) . -32) (19 . 33)) nil (23738 9489 818206 405000) 0 nil]) ((19 . 20) 35 (t 23738 9476 168452 494000)) nil (23738 9489 818210 27000) 0 nil]) ((#("
" 0 1 (fontified t)) . 19) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . 1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (t 23738 9456 608578 59000)) nil (23738 9476 150031 962000) 0 nil]) ((#("#[macro_use]
" 0 1 (fontified t face font-lock-preprocessor-face) 1 11 (fontified t face font-lock-preprocessor-face) 11 12 (fontified t face font-lock-preprocessor-face) 12 13 (fontified t)) . 20) (undo-tree-id1839 . -13) (undo-tree-id1840 . -13) (undo-tree-id1841 . -13) (undo-tree-id1842 . -13) (undo-tree-id1843 . -13) (undo-tree-id1844 . -13) (undo-tree-id1845 . -13) (undo-tree-id1846 . -13) (undo-tree-id1847 . -13) (undo-tree-id1848 . -13) (undo-tree-id1849 . -13) (undo-tree-id1850 . -13) (undo-tree-id1851 . -13) (undo-tree-id1852 . -13) (undo-tree-id1853 . -1) (undo-tree-id1854 . -2)) nil (23738 9456 526213 72000) 0 nil]) ((19 . 20) 30) nil (23738 9456 526219 787000) 0 nil]) ((36 . 49) (#("s" 0 1 (fontified t face font-lock-constant-face)) . -36) (undo-tree-id1855 . -1) 37 (32 . 37) (32 . 33)) nil (23738 9456 526225 9000) 0 nil]) ((#("mod utils;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t)) . 32) (undo-tree-id1856 . 1) (undo-tree-id1857 . -6) (undo-tree-id1858 . -6) 38) nil (23738 9456 526231 39000) 0 nil]) ((36 . 42) (32 . 36) (#("use super::utils::or;" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 5 (fontified t face font-lock-keyword-face) 5 9 (fontified t face font-lock-keyword-face) 9 11 (fontified t) 11 16 (fontified t face font-lock-constant-face) 16 21 (fontified t)) . 32) (undo-tree-id1859 . -11) (undo-tree-id1860 . -11) (undo-tree-id1861 . 1) (undo-tree-id1862 . -16) (undo-tree-id1863 . -16) (undo-tree-id1864 . -11) (undo-tree-id1865 . -11) (undo-tree-id1866 . -11) (undo-tree-id1867 . -11) (undo-tree-id1868 . -11) (undo-tree-id1869 . -11) (undo-tree-id1870 . -11) (undo-tree-id1871 . -2)) nil (23738 9456 526248 99000) 0 nil] [nil nil ((#("s" 0 1 (fontified t face font-lock-keyword-face)) . 36)) ((36 . 37)) (23738 9357 407638 331000) 0 nil] [nil nil ((#("#[macro_use]
" 0 1 (fontified t face font-lock-preprocessor-face) 1 11 (fontified t face font-lock-preprocessor-face) 11 12 (fontified t face font-lock-preprocessor-face) 12 13 (fontified t)) . 19) (undo-tree-id1837 . -11) (undo-tree-id1838 . -11) 30) ((19 . 32)) (23738 9315 726664 606000) 0 nil]) ((48 . 52) (t 23738 9241 973304 134000)) nil (23738 9357 412557 835000) 0 nil] [nil ([nil nil ((nil rear-nonsticky nil 707 . 708) (#("
" 0 1 (fontified nil)) . -720) (707 . 721) 695) ((#("
#[macro use]
" 0 1 (fontified nil rear-nonsticky nil) 1 2 (fontified nil face font-lock-preprocessor-face) 2 9 (fontified nil face font-lock-preprocessor-face) 9 12 (fontified nil face font-lock-keyword-face) 12 13 (fontified nil face font-lock-preprocessor-face) 13 14 (fontified nil)) . 707) (undo-tree-id1789 . -13) (undo-tree-id1790 . -1) (undo-tree-id1791 . -13) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (720 . 721) (nil rear-nonsticky t 707 . 708)) (23738 9261 958860 944000) 0 nil]) ((nil rear-nonsticky nil 694 . 695) (#("
" 0 1 (fontified nil)) . -707) (694 . 708) 637 (t 23738 9241 973304 134000)) ((#("
#[macro use]
" 0 1 (fontified nil rear-nonsticky nil) 1 2 (fontified nil face font-lock-preprocessor-face) 2 9 (fontified nil face font-lock-preprocessor-face) 9 12 (fontified nil face font-lock-keyword-face) 12 13 (fontified nil face font-lock-preprocessor-face) 13 14 (fontified nil)) . 694) (undo-tree-id1802 . -13) (undo-tree-id1803 . -13) (undo-tree-id1804 . -13) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -13) (undo-tree-id1814 . -1) (undo-tree-id1815 . -13) (undo-tree-id1816 . -13) (undo-tree-id1817 . -1) (undo-tree-id1818 . -13) (undo-tree-id1819 . -13) (undo-tree-id1820 . -1) (undo-tree-id1821 . -13) (undo-tree-id1822 . -1) (undo-tree-id1823 . -13) (undo-tree-id1824 . -1) (undo-tree-id1825 . -9) (undo-tree-id1826 . -12) (undo-tree-id1827 . -3) (undo-tree-id1828 . -8) (undo-tree-id1829 . -3) (undo-tree-id1830 . -8) (undo-tree-id1831 . -9) (undo-tree-id1832 . -12) (undo-tree-id1833 . -13) (undo-tree-id1834 . -13) (undo-tree-id1835 . -1) (undo-tree-id1836 . -13) (707 . 708) (nil rear-nonsticky t 694 . 695)) (23738 9261 963186 952000) 0 nil]) ((24 . 30) (#("r" 0 1 (fontified t face font-lock-preprocessor-face)) . -24) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (#("o" 0 1 (fontified t face font-lock-preprocessor-face)) . -25) (undo-tree-id1785 . -1) (#("_" 0 1 (fontified t face font-lock-preprocessor-face)) . -26) (undo-tree-id1786 . -1) 27 (23 . 27) (#("t" 0 1 (fontified t face font-lock-preprocessor-face)) . -23) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) 24 (21 . 24) (20 . 22) (#("[" 0 1 (fontified nil)) . -20) (19 . 21) (18 . 19) (t 23738 9218 336792 840000) 17) nil (23738 9262 243013 663000) 0 nil]) ((#("#[macro use]
" 0 1 (fontified t face font-lock-preprocessor-face) 1 8 (fontified t face font-lock-preprocessor-face) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t face font-lock-preprocessor-face) 12 13 (fontified t)) . 19) (undo-tree-id1775 . 2) (undo-tree-id1776 . -9) (undo-tree-id1777 . -9) (undo-tree-id1778 . -8) (undo-tree-id1779 . -9) (undo-tree-id1780 . -8) (undo-tree-id1781 . -8) (undo-tree-id1782 . -5) 24) nil (23738 9218 319273 727000) 0 nil]) ((21 . 30) (20 . 22) (#("[" 0 1 (fontified nil)) . -20) (19 . 21) (18 . 19) (t 23738 9187 503662 878000) 17) nil (23738 9218 319281 443000) 0 nil]) ((1 . 1994) (#("use super::query;
use postgres;
use warp::Filter;
use super::utils;

pub enum Scope {
    Public,
    Private,
}

pub fn get_token(scope: Scope) -> warp::filters::BoxedFilter<(String,)> {
    let token_from_header = warp::header::header::<String>(\"authorization\")
        .map(|auth: String| auth.split(' ').nth(1).unwrap_or(\"invalid\").to_string());

    let token_from_query = warp::query().map(|q: query::Auth| q.access_token);
    let public = warp::any().map(|| \"no access token\".to_string());
    match scope {
        Scope::Private => token_from_query.or(token_from_header).unify().boxed(),
        Scope::Public => or!(token_from_query, token_from_header, public).boxed(),
    }
}

pub fn get_account_id_from_token(token: String) -> Result<Account, warp::reject::Rejection> {
    if let Ok(account_id) = get_account_id(token) {
        Ok(account_id)
    } else {
        Err(warp::reject::custom(\"Error: Invalid access token\"))
    }
}

fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
}

pub struct Account {
    pub id: String,
    pub langs: Vec<String>,
}

pub fn get_account_id(token: String) -> Result<Account, ()> {
    let conn = conn();
    let result = &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&token],
        )
        .expect(\"Hard-coded query will return Some([0 or more rows])\");
    if !result.is_empty() {
        let only_row = result.get(0);
        let id: i64 = only_row.get(1);
        let langs: Vec<String> = only_row.get(2);
        Ok(Account {
            id: id.to_string(),
            langs,
        })
    } else {
        Err(())
    }
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 17 (fontified t) 17 18 (fontified t) 18 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 30 (fontified t face font-lock-constant-face) 30 32 (fontified t) 32 35 (fontified t face font-lock-keyword-face) 35 36 (fontified t) 36 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 48 (fontified t face font-lock-type-face) 48 49 (fontified t) 49 50 (fontified t) 50 53 (fontified t face font-lock-keyword-face) 53 54 (fontified t) 54 59 (fontified t face font-lock-keyword-face) 59 61 (fontified t) 61 66 (fontified t) 66 67 (fontified t) 67 68 (fontified t) 68 69 (fontified t) 69 72 (fontified t face font-lock-keyword-face) 72 73 (fontified t) 73 77 (fontified t face font-lock-keyword-face) 77 78 (fontified t) 78 83 (fontified t face font-lock-type-face) 83 85 (fontified t) 85 86 (fontified t) 86 90 (fontified t) 90 96 (fontified t face font-lock-type-face) 96 102 (fontified t) 102 109 (fontified t face font-lock-type-face) 109 114 (fontified t) 114 117 (fontified t face font-lock-keyword-face) 117 118 (fontified t) 118 120 (fontified t face font-lock-keyword-face) 120 121 (fontified t) 121 130 (fontified t face font-lock-function-name-face) 130 131 (fontified t) 131 136 (fontified t face font-lock-variable-name-face) 136 138 (fontified t) 138 143 (fontified t face font-lock-type-face) 143 146 (fontified t) 146 147 (syntax-table #2# fontified t) 147 148 (fontified t) 148 152 (fontified t face font-lock-constant-face) 152 154 (fontified t) 154 161 (fontified t face font-lock-constant-face) 161 163 (fontified t) 163 174 (fontified t face font-lock-type-face) 174 176 (fontified t) 176 182 (fontified t face font-lock-type-face) 182 192 (fontified t) 192 195 (fontified t face font-lock-keyword-face) 195 196 (fontified t) 196 213 (fontified t face font-lock-variable-name-face) 213 216 (fontified t) 216 220 (fontified t face font-lock-constant-face) 220 222 (fontified t) 222 228 (fontified t face font-lock-constant-face) 228 239 (fontified t) 239 245 (fontified t face font-lock-type-face) 245 247 (fontified t) 247 262 (fontified t face font-lock-string-face) 262 278 (fontified t) 278 282 (fontified t face font-lock-variable-name-face) 282 284 (fontified t) 284 290 (fontified t face font-lock-type-face) 290 303 (fontified t) 303 304 (syntax-table #1# fontified t face font-lock-string-face) 304 305 (fontified t face font-lock-string-face) 305 306 (syntax-table #1# fontified t face font-lock-string-face) 306 325 (fontified t) 325 334 (fontified t face font-lock-string-face) 334 351 (fontified t) 351 355 (fontified t) 355 358 (fontified t face font-lock-keyword-face) 358 359 (fontified t) 359 375 (fontified t face font-lock-variable-name-face) 375 378 (fontified t) 378 382 (fontified t face font-lock-constant-face) 382 397 (fontified t) 397 398 (fontified t face font-lock-variable-name-face) 398 400 (fontified t) 400 405 (fontified t face font-lock-constant-face) 405 407 (fontified t) 407 411 (fontified t face font-lock-type-face) 411 429 (fontified t) 429 430 (fontified t) 430 434 (fontified t) 434 437 (fontified t face font-lock-keyword-face) 437 438 (fontified t) 438 444 (fontified t face font-lock-variable-name-face) 444 445 (fontified t) 445 447 (fontified t) 447 451 (fontified t face font-lock-constant-face) 451 456 (fontified t) 456 462 (fontified t) 462 466 (fontified t) 466 483 (fontified t face font-lock-string-face) 483 493 (fontified t) 493 495 (fontified t) 495 497 (fontified t) 497 498 (fontified t) 498 502 (fontified t) 502 507 (fontified t face font-lock-keyword-face) 507 511 (fontified t) 511 514 (fontified t) 514 515 (fontified t) 515 516 (fontified t) 516 518 (fontified t) 518 524 (fontified t) 524 529 (fontified t face font-lock-type-face) 529 531 (fontified t) 531 538 (fontified t face font-lock-type-face) 538 540 (fontified t) 540 541 (fontified t syntax-table #2#) 541 542 (fontified t) 542 568 (fontified t) 568 597 (fontified t) 597 598 (fontified t) 598 606 (fontified t) 606 611 (fontified t face font-lock-type-face) 611 613 (fontified t) 613 619 (fontified t face font-lock-type-face) 619 621 (fontified t) 621 622 (fontified t syntax-table #2#) 622 623 (fontified t) 623 626 (fontified t face font-lock-preprocessor-face) 626 627 (fontified t) 627 645 (fontified t) 645 664 (fontified t) 664 670 (fontified t) 670 671 (fontified t) 671 672 (fontified t) 672 679 (fontified t) 679 680 (rear-nonsticky t fontified t) 680 681 (fontified t) 681 685 (fontified t) 685 686 (fontified t) 686 687 (fontified t) 687 689 (fontified t) 689 690 (fontified t) 690 693 (fontified t face font-lock-keyword-face) 693 694 (fontified t) 694 696 (fontified t face font-lock-keyword-face) 696 697 (fontified t) 697 722 (fontified t face font-lock-function-name-face) 722 723 (fontified t) 723 728 (fontified t face font-lock-variable-name-face) 728 730 (fontified t) 730 736 (fontified t face font-lock-type-face) 736 739 (fontified t) 739 740 (syntax-table #2# fontified t) 740 741 (fontified t) 741 747 (fontified t face font-lock-type-face) 747 748 (fontified t) 748 755 (fontified t face font-lock-type-face) 755 757 (fontified t) 757 761 (fontified t face font-lock-constant-face) 761 763 (fontified t) 763 769 (fontified t face font-lock-constant-face) 769 771 (fontified t) 771 780 (fontified t face font-lock-type-face) 780 781 (fontified t) 781 783 (fontified t) 783 784 (fontified t) 784 788 (fontified t) 788 790 (fontified t face font-lock-keyword-face) 790 791 (fontified t) 791 794 (fontified t face font-lock-keyword-face) 794 795 (fontified t) 795 797 (fontified t face font-lock-type-face) 797 844 (fontified t) 844 846 (fontified t face font-lock-type-face) 846 865 (fontified t) 865 869 (fontified t face font-lock-keyword-face) 869 880 (fontified t) 880 883 (fontified t face font-lock-type-face) 883 884 (fontified t) 884 888 (fontified t face font-lock-constant-face) 888 890 (fontified t) 890 896 (fontified t face font-lock-constant-face) 896 905 (fontified t) 905 934 (fontified t face font-lock-string-face) 934 946 (fontified t) 946 948 (fontified t face font-lock-keyword-face) 948 949 (fontified t) 949 953 (fontified t face font-lock-function-name-face) 953 957 (fontified t) 957 958 (syntax-table #2# fontified t) 958 959 (fontified t) 959 967 (fontified t face font-lock-constant-face) 967 969 (fontified t) 969 974 (fontified t face font-lock-type-face) 974 979 (fontified t face font-lock-type-face) 979 982 (fontified t) 982 983 (fontified t) 983 986 (fontified t) 986 992 (fontified t face font-lock-constant-face) 992 994 (fontified t face font-lock-constant-face) 994 996 (fontified t) 996 1006 (fontified t face font-lock-type-face) 1006 1017 (fontified t) 1017 1025 (fontified t) 1025 1074 (fontified t face font-lock-string-face) 1074 1081 (fontified t) 1081 1084 (fontified t) 1084 1092 (fontified t face font-lock-constant-face) 1092 1094 (fontified t) 1094 1101 (fontified t face font-lock-type-face) 1101 1103 (fontified t) 1103 1107 (fontified t face font-lock-type-face) 1107 1109 (fontified t) 1109 1122 (fontified t) 1122 1128 (fontified t) 1128 1129 (fontified t) 1129 1132 (fontified t) 1132 1135 (fontified t face font-lock-keyword-face) 1135 1136 (fontified t) 1136 1142 (fontified t face font-lock-keyword-face) 1142 1143 (fontified t) 1143 1150 (fontified t face font-lock-type-face) 1150 1157 (fontified t) 1157 1160 (fontified t face font-lock-keyword-face) 1160 1161 (fontified t) 1161 1163 (fontified t face font-lock-variable-name-face) 1163 1165 (fontified t) 1165 1171 (fontified t face font-lock-type-face) 1171 1177 (fontified t) 1177 1180 (fontified t face font-lock-keyword-face) 1180 1181 (fontified t) 1181 1186 (face font-lock-variable-name-face fontified t) 1186 1187 (fontified t) 1187 1188 (fontified t) 1188 1189 (face font-lock-type-face fontified t) 1189 1191 (face font-lock-type-face fontified t) 1191 1192 (fontified t) 1192 1198 (face font-lock-type-face fontified t) 1198 1201 (fontified t) 1204 1207 (face font-lock-keyword-face) 1208 1210 (face font-lock-keyword-face) 1211 1225 (face font-lock-function-name-face) 1226 1231 (face font-lock-variable-name-face) 1233 1239 (face font-lock-type-face) 1242 1243 (syntax-table #2#) 1244 1250 (face font-lock-type-face) 1251 1258 (face font-lock-type-face) 1270 1273 (face font-lock-keyword-face) 1274 1278 (face font-lock-variable-name-face) 1293 1296 (face font-lock-keyword-face) 1297 1303 (face font-lock-variable-name-face) 1340 1482 (face font-lock-string-face) 1482 1517 (face font-lock-string-face) 1517 1523 (face font-lock-string-face) 1523 1609 (face font-lock-string-face) 1609 1611 (face font-lock-string-face) 1662 1701 (face font-lock-string-face) 1701 1715 (face font-lock-string-face) 1722 1724 (face font-lock-keyword-face) 1754 1757 (face font-lock-keyword-face) 1758 1766 (face font-lock-variable-name-face) 1792 1795 (face font-lock-keyword-face) 1796 1798 (face font-lock-variable-name-face) 1800 1803 (face font-lock-type-face)) . 1) (undo-tree-id1660 . -355) (undo-tree-id1661 . -65) (undo-tree-id1662 . -623) (undo-tree-id1663 . -679) (undo-tree-id1664 . 1323) (undo-tree-id1665 . -68) (undo-tree-id1666 . -68) (undo-tree-id1667 . -68) (undo-tree-id1668 . -68) (undo-tree-id1669 . -72) (undo-tree-id1670 . -72) (undo-tree-id1671 . -68) (undo-tree-id1672 . -72) (undo-tree-id1673 . -72) (undo-tree-id1674 . -117) (undo-tree-id1675 . -117) (undo-tree-id1676 . -72) (undo-tree-id1677 . -117) (undo-tree-id1678 . -117) (undo-tree-id1679 . -596) (undo-tree-id1680 . -623) (undo-tree-id1681 . -664) (undo-tree-id1682 . -672) (undo-tree-id1683 . -623) (undo-tree-id1684 . -664) (undo-tree-id1685 . -664) (undo-tree-id1686 . -664) (undo-tree-id1687 . -664) (undo-tree-id1688 . -664) (undo-tree-id1689 . -664) (undo-tree-id1690 . -664) (undo-tree-id1691 . -65) (undo-tree-id1692 . -66) (undo-tree-id1693 . -664) (undo-tree-id1694 . -65) (undo-tree-id1695 . -664) (undo-tree-id1696 . -664) (undo-tree-id1697 . -355) (undo-tree-id1698 . -355) (undo-tree-id1699 . -355) (undo-tree-id1700 . -662) (undo-tree-id1701 . -669) (undo-tree-id1702 . -65) (undo-tree-id1703 . -355) (undo-tree-id1704 . -355) (undo-tree-id1705 . -670) (undo-tree-id1706 . -670) (undo-tree-id1707 . -670) (undo-tree-id1708 . -670) (undo-tree-id1709 . -905) (undo-tree-id1710 . -906) (undo-tree-id1711 . -670) (undo-tree-id1712 . -670) (undo-tree-id1713 . -670) (undo-tree-id1714 . -670) (undo-tree-id1715 . -670) (undo-tree-id1716 . -670) (undo-tree-id1717 . -905) (undo-tree-id1718 . -906) (undo-tree-id1719 . -626) (undo-tree-id1720 . -627) (undo-tree-id1721 . -670) (undo-tree-id1722 . -670) (undo-tree-id1723 . -670) (undo-tree-id1724 . -670) (undo-tree-id1725 . -905) (undo-tree-id1726 . -906) (undo-tree-id1727 . -626) (undo-tree-id1728 . -627) (undo-tree-id1729 . -669) (undo-tree-id1730 . -670) (undo-tree-id1731 . -54) (undo-tree-id1732 . -59) (undo-tree-id1733 . -623) (undo-tree-id1734 . -625) (undo-tree-id1735 . -623) (undo-tree-id1736 . -625) (undo-tree-id1737 . -54) (undo-tree-id1738 . -66) (undo-tree-id1739 . -669) (undo-tree-id1740 . -669) 670) nil (23738 9187 417537 41000) 0 nil]) ((#("," 0 1 (fontified t)) . 671) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1)) nil (23738 9187 417557 156000) 0 nil]) ((#("()" 0 2 (fontified t)) . 672) (undo-tree-id1751 . 2) (undo-tree-id1752 . 2) (undo-tree-id1753 . -1) (undo-tree-id1754 . 1) (undo-tree-id1755 . -1) (undo-tree-id1756 . 1) (undo-tree-id1757 . -2) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1)) nil (23738 9187 417570 302000) 0 nil]) ((#("unify" 0 5 (fontified t)) . 672) (undo-tree-id1760 . 5)) nil (23738 9187 417573 681000) 0 nil]) ((671 . 672) (#("." 0 1 (fontified t)) . -671) (undo-tree-id1761 . -1) 672) nil (23738 9187 417577 182000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 671) (#("(" 0 1 (fontified t)) . -665) (undo-tree-id1762 . 1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) 666) nil (23738 9187 417591 224000) 0 nil] [nil nil ((#("let token_from_query = warp::query().map(|q: query::Auth| q.access_token);
    let public = warp::any().map(|| \"no access token\".to_string());
    match scope {
        Scope::Private => token_from_query.or(token_from_header).unify().boxed(),
        Scope::Public => or!(token_from_query, token_from_header, (public).unify()).boxed(),
    }
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 20 (fontified t face font-lock-variable-name-face) 20 23 (fontified t) 23 27 (fontified t face font-lock-constant-face) 27 42 (fontified t) 42 43 (fontified t face font-lock-variable-name-face) 43 45 (fontified t) 45 50 (fontified t face font-lock-constant-face) 50 52 (fontified t) 52 56 (fontified t face font-lock-type-face) 56 74 (fontified t) 74 75 (fontified t) 75 79 (fontified t) 79 82 (fontified t face font-lock-keyword-face) 82 83 (fontified t) 83 89 (fontified t face font-lock-variable-name-face) 89 90 (fontified t) 90 92 (fontified t) 92 96 (fontified t face font-lock-constant-face) 96 101 (fontified t) 101 107 (fontified t) 107 111 (fontified t) 111 128 (fontified t face font-lock-string-face) 128 138 (fontified t) 138 140 (fontified t) 140 142 (fontified t) 142 143 (fontified t) 143 147 (fontified t) 147 152 (fontified t face font-lock-keyword-face) 152 156 (fontified t) 156 159 (fontified t) 159 160 (fontified t) 160 161 (fontified t) 161 163 (fontified t) 163 169 (fontified t) 169 174 (fontified t face font-lock-type-face) 174 176 (fontified t) 176 183 (fontified t face font-lock-type-face) 183 185 (fontified t) 185 186 (syntax-table #2# fontified t) 186 187 (fontified t) 187 213 (fontified t) 213 242 (fontified t) 242 243 (fontified t) 243 251 (fontified t) 251 256 (fontified t face font-lock-type-face) 256 258 (fontified t) 258 264 (fontified t face font-lock-type-face) 264 266 (fontified t) 266 267 (fontified t syntax-table #2#) 267 268 (fontified t) 268 271 (fontified t face font-lock-preprocessor-face) 271 272 (fontified t) 272 290 (fontified t) 290 309 (fontified t) 309 310 (fontified t) 310 316 (fontified t) 316 317 (fontified t) 317 323 (fontified t) 323 325 (fontified t) 325 326 (fontified t) 326 327 (fontified t) 327 334 (fontified t) 334 335 (rear-nonsticky t fontified t) 335 336 (fontified t) 336 340 (fontified t) 340 341 (fontified t) 341 342 (fontified t)) . 356) (undo-tree-id1625 . -268) (undo-tree-id1626 . -334) (undo-tree-id1627 . 33) (undo-tree-id1628 . -241) (undo-tree-id1629 . -268) (undo-tree-id1630 . -310) (undo-tree-id1631 . -327) (undo-tree-id1632 . -268) (undo-tree-id1633 . -310) (undo-tree-id1634 . -310) (undo-tree-id1635 . -310) (undo-tree-id1636 . -310) (undo-tree-id1637 . -310) (undo-tree-id1638 . -310) (undo-tree-id1639 . -310) (undo-tree-id1640 . -310) (undo-tree-id1641 . -307) (undo-tree-id1642 . -307) (undo-tree-id1643 . -307) (undo-tree-id1644 . -307) (undo-tree-id1645 . -310) (undo-tree-id1646 . -310) (undo-tree-id1647 . -309) (undo-tree-id1648 . -310) (undo-tree-id1649 . -310) (undo-tree-id1650 . -268) (undo-tree-id1651 . -270) (undo-tree-id1652 . -268) (undo-tree-id1653 . -270) 666) ((356 . 698)) (23738 9174 791440 283000) 0 nil]) ((664 . 665)) nil (23738 9174 793278 843000) 0 nil]) ((#(".or" 0 3 (fontified t)) . 664) (undo-tree-id1654 . 3)) nil (23738 9174 791448 755000) 0 nil]) ((#("l" 0 1 (fontified t)) . -664) (undo-tree-id1655 . -1) 665 (664 . 665)) nil (23738 9174 791452 44000) 0 nil]) ((#("()" 0 2 (fontified t)) . 664) (undo-tree-id1656 . 2)) nil (23738 9174 791454 885000) 0 nil]) ((663 . 664)) nil (23738 9174 791456 409000) 0 nil]) ((#(".unify" 0 6 (fontified t)) . 663)) nil (23738 9174 791457 650000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 663) (#("(" 0 1 (fontified t)) . -646) (undo-tree-id1657 . 1) (undo-tree-id1658 . -1) (undo-tree-id1659 . -1) 647) nil (23738 9174 791461 953000) 0 nil]) ((644 . 646)) nil (23738 9174 791463 782000) 0 nil]) ((#("or" 0 2 (fontified t)) . 644)) nil (23738 9174 791464 977000) 0 nil]) ((#("." 0 1 (fontified t)) . 644)) nil (23738 9174 791466 558000) 0 nil]) ((693 . 694) (#(")" 0 1 (fontified t)) . -691) (691 . 692) (#(")" 0 1 (fontified t)) . -685) (685 . 686) (#(")" 0 1 (fontified t)) . -677) (677 . 678) (#(")" 0 1 (fontified t)) . -674) (674 . 675) (#(")" 0 1 (fontified t)) . -672) (672 . 673) (#(")" 0 1 (fontified t)) . -666) (666 . 667) (#(")" 0 1 (fontified t)) . -647) (647 . 648) (#(")" 0 1 (fontified t)) . -644) (644 . 645) (#(")" 0 1 (fontified t)) . -628) (627 . 629) (#("(" 0 1 (fontified nil)) . -627) (624 . 628)) nil (23738 9174 791475 18000) 0 nil]) ((55 . 62)) nil (23738 9174 791479 570000) 0 nil]) ((59 . 61) (51 . 59) (50 . 51) 49) nil (23738 9174 791481 914000) 0 nil] [nil nil ((1 . 2058) (#("use super::query;
use postgres;
use warp::Filter;

pub enum Scope {
    Public,
    Private,
}

pub fn get_token(scope: Scope) -> warp::filters::BoxedFilter<(String,)> {
    let token_from_header = warp::header::header::<String>(\"authorization\")
        .map(|auth: String| auth.split(' ').nth(1).unwrap_or(\"invalid\").to_string());

    let token_from_query = warp::query().map(|q: query::Auth| q.access_token);
    let public = warp::any().map(|| \"no access token\".to_string());
    match scope {
        Scope::Private => token_from_query.or(token_from_header).unify().boxed(),
        Scope::Public => token_from_query.or(token_from_header).unify().or(public).unify().boxed(),
    }
}

pub fn get_account_id_from_token(token: String) -> Result<Account, warp::reject::Rejection> {
    if let Ok(account_id) = get_account_id(token) {
        Ok(account_id)
    } else {
        Err(warp::reject::custom(\"Error: Invalid access token\"))
    }
}

fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
}

pub struct Account {
    pub id: String,
    pub langs: Vec<String>,
}

pub fn get_account_id(token: String) -> Result<Account, ()> {
    let conn = conn();
    let result = &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&token],
        )
        .expect(\"Hard-coded query will return Some([0 or more rows])\");
    if !result.is_empty() {
        let only_row = result.get(0);
        let id: i64 = only_row.get(1);
        let langs: Vec<String> = only_row.get(2);
        Ok(Account {
            id: id.to_string(),
            langs,
        })
    } else {
        Err(())
    }
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 17 (fontified t) 17 18 (fontified t) 18 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 30 (fontified t face font-lock-constant-face) 30 32 (fontified t) 32 35 (fontified t face font-lock-keyword-face) 35 36 (fontified t) 36 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 48 (fontified t face font-lock-type-face) 48 50 (fontified t) 50 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 59 (fontified t face font-lock-keyword-face) 59 60 (fontified t) 60 65 (fontified t face font-lock-type-face) 65 67 (fontified t) 67 68 (fontified t) 68 72 (fontified t) 72 78 (fontified t face font-lock-type-face) 78 84 (fontified t) 84 91 (fontified t face font-lock-type-face) 91 96 (fontified t) 96 99 (fontified t face font-lock-keyword-face) 99 100 (fontified t) 100 102 (fontified t face font-lock-keyword-face) 102 103 (fontified t) 103 112 (fontified t face font-lock-function-name-face) 112 113 (fontified t) 113 118 (fontified t face font-lock-variable-name-face) 118 120 (fontified t) 120 125 (fontified t face font-lock-type-face) 125 128 (fontified t) 128 129 (fontified t syntax-table #2#) 129 130 (fontified t) 130 134 (fontified t face font-lock-constant-face) 134 136 (fontified t) 136 143 (fontified t face font-lock-constant-face) 143 145 (fontified t) 145 156 (fontified t face font-lock-type-face) 156 158 (fontified t) 158 164 (fontified t face font-lock-type-face) 164 174 (fontified t) 174 177 (fontified t face font-lock-keyword-face) 177 178 (fontified t) 178 195 (fontified t face font-lock-variable-name-face) 195 198 (fontified t) 198 202 (fontified t face font-lock-constant-face) 202 204 (fontified t) 204 210 (fontified t face font-lock-constant-face) 210 221 (fontified t) 221 227 (fontified t face font-lock-type-face) 227 229 (fontified t) 229 244 (fontified t face font-lock-string-face) 244 260 (fontified t) 260 264 (fontified t face font-lock-variable-name-face) 264 266 (fontified t) 266 272 (fontified t face font-lock-type-face) 272 285 (fontified t) 285 286 (fontified t syntax-table #1# face font-lock-string-face) 286 287 (fontified t face font-lock-string-face) 287 288 (fontified t syntax-table #1# face font-lock-string-face) 288 307 (fontified t) 307 316 (fontified t face font-lock-string-face) 316 333 (fontified t) 333 337 (fontified t) 337 340 (fontified t face font-lock-keyword-face) 340 341 (fontified t) 341 357 (fontified t face font-lock-variable-name-face) 357 360 (fontified t) 360 364 (fontified t face font-lock-constant-face) 364 379 (fontified t) 379 380 (fontified t face font-lock-variable-name-face) 380 382 (fontified t) 382 387 (fontified t face font-lock-constant-face) 387 389 (fontified t) 389 393 (fontified t face font-lock-type-face) 393 411 (fontified t) 411 412 (fontified t) 412 416 (fontified t) 416 419 (fontified t face font-lock-keyword-face) 419 420 (fontified t) 420 426 (fontified t face font-lock-variable-name-face) 426 427 (fontified t) 427 429 (fontified t) 429 433 (fontified t face font-lock-constant-face) 433 438 (fontified t) 438 444 (fontified t) 444 448 (fontified t) 448 465 (fontified t face font-lock-string-face) 465 475 (fontified t) 475 477 (fontified t) 477 479 (fontified t) 479 480 (fontified t) 480 484 (fontified t) 484 489 (fontified t face font-lock-keyword-face) 489 493 (fontified t) 493 496 (fontified t) 496 497 (fontified t) 497 498 (fontified t) 498 506 (fontified t) 506 511 (fontified t face font-lock-type-face) 511 513 (fontified t) 513 520 (fontified t face font-lock-type-face) 520 522 (fontified t) 522 523 (syntax-table #2# fontified t) 523 524 (fontified t) 524 579 (fontified t) 579 580 (fontified t) 580 588 (fontified t) 588 593 (fontified t face font-lock-type-face) 593 595 (fontified t) 595 601 (fontified t face font-lock-type-face) 601 603 (fontified t) 603 604 (fontified t syntax-table #2#) 604 605 (fontified t) 605 654 (fontified t) 654 655 (fontified t) 655 661 (fontified t) 661 668 (fontified t) 668 670 (fontified t) 670 671 (fontified t) 671 678 (fontified t) 678 679 (rear-nonsticky t fontified t) 679 680 (fontified t) 680 684 (fontified t) 684 685 (fontified t) 685 686 (fontified t) 686 688 (fontified t) 688 689 (fontified t) 689 692 (fontified t face font-lock-keyword-face) 692 693 (fontified t) 693 695 (fontified t face font-lock-keyword-face) 695 696 (fontified t) 696 721 (fontified t face font-lock-function-name-face) 721 722 (fontified t) 722 727 (fontified t face font-lock-variable-name-face) 727 729 (fontified t) 729 735 (fontified t face font-lock-type-face) 735 738 (fontified t) 738 739 (syntax-table #2# fontified t) 739 740 (fontified t) 740 746 (fontified t face font-lock-type-face) 746 747 (fontified t) 747 754 (fontified t face font-lock-type-face) 754 756 (fontified t) 756 760 (fontified t face font-lock-constant-face) 760 762 (fontified t) 762 768 (fontified t face font-lock-constant-face) 768 770 (fontified t) 770 779 (fontified t face font-lock-type-face) 779 780 (fontified t) 780 782 (fontified t) 782 783 (fontified t) 783 787 (fontified t) 787 789 (fontified t face font-lock-keyword-face) 789 790 (fontified t) 790 793 (fontified t face font-lock-keyword-face) 793 794 (fontified t) 794 796 (fontified t face font-lock-type-face) 796 843 (fontified t) 843 845 (fontified t face font-lock-type-face) 845 864 (fontified t) 864 868 (fontified t face font-lock-keyword-face) 868 879 (fontified t) 879 882 (fontified t face font-lock-type-face) 882 883 (fontified t) 883 887 (fontified t face font-lock-constant-face) 887 889 (fontified t) 889 895 (fontified t face font-lock-constant-face) 895 904 (fontified t) 904 933 (fontified t face font-lock-string-face) 933 945 (fontified t) 945 947 (fontified t face font-lock-keyword-face) 947 948 (fontified t) 948 952 (fontified t face font-lock-function-name-face) 952 956 (fontified t) 956 957 (syntax-table #2# fontified t) 957 958 (fontified t) 958 966 (fontified t face font-lock-constant-face) 966 968 (fontified t) 968 973 (fontified t face font-lock-type-face) 973 978 (fontified t face font-lock-type-face) 978 981 (fontified t) 981 982 (fontified t) 982 985 (fontified t) 985 991 (fontified t face font-lock-constant-face) 991 993 (fontified t face font-lock-constant-face) 993 995 (fontified t) 995 1005 (fontified t face font-lock-type-face) 1005 1016 (fontified t) 1016 1024 (fontified t) 1024 1073 (fontified t face font-lock-string-face) 1073 1083 (fontified t) 1083 1091 (fontified t face font-lock-constant-face) 1091 1093 (fontified t) 1093 1100 (fontified t face font-lock-type-face) 1100 1102 (fontified t) 1102 1106 (fontified t face font-lock-type-face) 1106 1121 (fontified t) 1121 1127 (fontified t) 1127 1128 (fontified t) 1128 1131 (fontified t) 1131 1134 (fontified t face font-lock-keyword-face) 1134 1135 (fontified t) 1135 1141 (fontified t face font-lock-keyword-face) 1141 1142 (fontified t) 1142 1149 (fontified t face font-lock-type-face) 1149 1156 (fontified t) 1156 1159 (fontified t face font-lock-keyword-face) 1159 1160 (fontified t) 1160 1162 (fontified t face font-lock-variable-name-face) 1162 1164 (fontified t) 1164 1170 (fontified t face font-lock-type-face) 1170 1176 (fontified t) 1176 1179 (fontified t face font-lock-keyword-face) 1179 1180 (fontified t) 1180 1185 (face font-lock-variable-name-face fontified t) 1185 1186 (fontified t) 1186 1187 (fontified t) 1187 1190 (face font-lock-type-face fontified t) 1190 1191 (fontified t) 1191 1197 (face font-lock-type-face fontified t) 1197 1200 (fontified t) 1203 1206 (face font-lock-keyword-face) 1207 1209 (face font-lock-keyword-face) 1210 1224 (face font-lock-function-name-face) 1225 1230 (face font-lock-variable-name-face) 1232 1238 (face font-lock-type-face) 1241 1242 (syntax-table #2#) 1243 1249 (face font-lock-type-face) 1250 1257 (face font-lock-type-face) 1269 1272 (face font-lock-keyword-face) 1273 1277 (face font-lock-variable-name-face) 1292 1295 (face font-lock-keyword-face) 1296 1302 (face font-lock-variable-name-face) 1339 1481 (face font-lock-string-face) 1481 1516 (face font-lock-string-face) 1516 1522 (face font-lock-string-face) 1522 1610 (face font-lock-string-face) 1661 1700 (face font-lock-string-face) 1700 1714 (face font-lock-string-face) 1721 1723 (face font-lock-keyword-face) 1753 1756 (face font-lock-keyword-face) 1757 1765 (face font-lock-variable-name-face) 1791 1794 (face font-lock-keyword-face) 1795 1797 (face font-lock-variable-name-face) 1799 1802 (face font-lock-type-face)) . 1) (undo-tree-id1494 . -655) (undo-tree-id1495 . -655) (undo-tree-id1496 . -605) (undo-tree-id1497 . -678) (undo-tree-id1498 . 1331) (undo-tree-id1499 . -50) (undo-tree-id1500 . -50) (undo-tree-id1501 . -50) (undo-tree-id1502 . -50) (undo-tree-id1503 . -54) (undo-tree-id1504 . -54) (undo-tree-id1505 . -50) (undo-tree-id1506 . -54) (undo-tree-id1507 . -54) (undo-tree-id1508 . -99) (undo-tree-id1509 . -99) (undo-tree-id1510 . -54) (undo-tree-id1511 . -99) (undo-tree-id1512 . -99) (undo-tree-id1513 . -578) (undo-tree-id1514 . -605) (undo-tree-id1515 . -655) (undo-tree-id1516 . -671) (undo-tree-id1517 . -605) (undo-tree-id1518 . -655) (undo-tree-id1519 . -655) (undo-tree-id1520 . -655) (undo-tree-id1521 . -655) (undo-tree-id1522 . -655) (undo-tree-id1523 . -655) (undo-tree-id1524 . -655) (undo-tree-id1526 . -420) (undo-tree-id1528 . -420) (undo-tree-id1530 . -594) (undo-tree-id1532 . -595) (undo-tree-id1534 . -595) (undo-tree-id1536 . -655) (undo-tree-id1537 . -655) (undo-tree-id1539 . -595) (undo-tree-id1541 . -595) (undo-tree-id1543 . -595) (undo-tree-id1545 . -595) (undo-tree-id1547 . -595) (undo-tree-id1549 . -595) (undo-tree-id1551 . -595) (undo-tree-id1553 . -595) (undo-tree-id1555 . -595) (undo-tree-id1557 . -595) (undo-tree-id1559 . -595) (undo-tree-id1561 . -595) (undo-tree-id1563 . -905) (undo-tree-id1565 . -497) (undo-tree-id1567 . -684) (undo-tree-id1569 . -655) (undo-tree-id1571 . -655) (undo-tree-id1573 . -655) (undo-tree-id1574 . -655) (undo-tree-id1575 . -655) (undo-tree-id1577 . -655) (undo-tree-id1579 . -655) (undo-tree-id1580 . -655) (undo-tree-id1581 . -655) (undo-tree-id1582 . -655) (undo-tree-id1584 . -655) (undo-tree-id1586 . -655) (undo-tree-id1588 . -655) (undo-tree-id1589 . -660) (undo-tree-id1591 . -655) (undo-tree-id1593 . -655) (undo-tree-id1595 . -656) (undo-tree-id1597 . -657) (undo-tree-id1599 . -658) (undo-tree-id1601 . -659) (undo-tree-id1603 . -660) (undo-tree-id1604 . -660) (undo-tree-id1605 . -660) 661) ((1 . 1993) (#("use super::query;
use postgres;
use warp::Filter;

pub enum Scope {
    Public,
    Private,
}

pub fn get_token(scope: Scope) -> warp::filters::BoxedFilter<(String,)> {
    let token_from_header = warp::header::header::<String>(\"authorization\")
        .map(|auth: String| auth.split(' ').nth(1).unwrap_or(\"invalid\").to_string());

    let token_from_query = warp::query().map(|q: query::Auth| q.access_token);
    let public = warp::any().map(|| \"no access token\".to_string());
    match scope {
        Scope::Private => token_from_query.or(token_from_header).unify().boxed(),
        Scope::Public => token_from_query
            .or(token_from_header)
            .unify()
            .or(public)
            .unify()
            .boxed(),
    }
}

pub fn get_account_id_from_token(token: String) -> Result<Account, warp::reject::Rejection> {
    if let Ok(account_id) = get_account_id(token) {
        Ok(account_id)
    } else {
        Err(warp::reject::custom(\"Error: Invalid access token\"))
    }
}

fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
}

pub struct Account {
    pub id: String,
    pub langs: Vec<String>,
}

pub fn get_account_id(token: String) -> Result<Account, ()> {
    let conn = conn();
    let result = &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&token],
        )
        .expect(\"Hard-coded query will return Some([0 or more rows])\");
    if !result.is_empty() {
        let only_row = result.get(0);
        let id: i64 = only_row.get(1);
        let langs: Vec<String> = only_row.get(2);
        Ok(Account {
            id: id.to_string(),
            langs,
        })
    } else {
        Err(())
    }
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 17 (fontified t) 17 18 (fontified t) 18 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 30 (fontified t face font-lock-constant-face) 30 32 (fontified t) 32 35 (fontified t face font-lock-keyword-face) 35 36 (fontified t) 36 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 48 (fontified t face font-lock-type-face) 48 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 59 (fontified t face font-lock-keyword-face) 59 60 (fontified t) 60 65 (fontified t face font-lock-type-face) 65 72 (fontified t) 72 78 (fontified t face font-lock-type-face) 78 84 (fontified t) 84 91 (fontified t face font-lock-type-face) 91 96 (fontified t) 96 99 (fontified t face font-lock-keyword-face) 99 100 (fontified t) 100 102 (fontified t face font-lock-keyword-face) 102 103 (fontified t) 103 112 (fontified t face font-lock-function-name-face) 112 113 (fontified t) 113 118 (fontified t face font-lock-variable-name-face) 118 120 (fontified t) 120 125 (fontified t face font-lock-type-face) 125 128 (fontified t) 128 129 (fontified t syntax-table #2#) 129 130 (fontified t) 130 134 (fontified t face font-lock-constant-face) 134 136 (fontified t) 136 143 (fontified t face font-lock-constant-face) 143 145 (fontified t) 145 156 (fontified t face font-lock-type-face) 156 158 (fontified t) 158 164 (fontified t face font-lock-type-face) 164 174 (fontified t) 174 177 (fontified t face font-lock-keyword-face) 177 178 (fontified t) 178 195 (fontified t face font-lock-variable-name-face) 195 198 (fontified t) 198 202 (fontified t face font-lock-constant-face) 202 204 (fontified t) 204 210 (fontified t face font-lock-constant-face) 210 221 (fontified t) 221 227 (fontified t face font-lock-type-face) 227 229 (fontified t) 229 244 (fontified t face font-lock-string-face) 244 260 (fontified t) 260 264 (fontified t face font-lock-variable-name-face) 264 266 (fontified t) 266 272 (fontified t face font-lock-type-face) 272 285 (fontified t) 285 286 (fontified t syntax-table #1# face font-lock-string-face) 286 287 (fontified t face font-lock-string-face) 287 288 (fontified t syntax-table #1# face font-lock-string-face) 288 307 (fontified t) 307 316 (fontified t face font-lock-string-face) 316 337 (fontified t) 337 340 (fontified t face font-lock-keyword-face) 340 341 (fontified t) 341 357 (fontified t face font-lock-variable-name-face) 357 360 (fontified t) 360 364 (fontified t face font-lock-constant-face) 364 379 (fontified t) 379 380 (fontified t face font-lock-variable-name-face) 380 382 (fontified t) 382 387 (fontified t face font-lock-constant-face) 387 389 (fontified t) 389 393 (fontified t face font-lock-type-face) 393 416 (fontified t) 416 419 (fontified t face font-lock-keyword-face) 419 420 (fontified t) 420 426 (fontified t face font-lock-variable-name-face) 426 429 (fontified t) 429 433 (fontified t face font-lock-constant-face) 433 448 (fontified t) 448 465 (fontified t face font-lock-string-face) 465 484 (fontified t) 484 489 (fontified t face font-lock-keyword-face) 489 506 (fontified t) 506 511 (fontified t face font-lock-type-face) 511 513 (fontified t) 513 517 (fontified t face font-lock-type-face) 517 520 (fontified t face font-lock-type-face) 520 522 (fontified t) 522 523 (fontified t syntax-table #2#) 523 580 (fontified t) 580 588 (fontified t) 588 593 (fontified t face font-lock-type-face) 593 595 (fontified t) 595 601 (fontified t face font-lock-type-face) 601 603 (fontified t) 603 604 (syntax-table #2# fontified t) 604 621 (fontified t) 621 754 (fontified t) 754 757 (fontified t face font-lock-keyword-face) 757 758 (fontified t) 758 760 (fontified t face font-lock-keyword-face) 760 761 (fontified t) 761 786 (fontified t face font-lock-function-name-face) 786 787 (fontified t) 787 792 (fontified t face font-lock-variable-name-face) 792 794 (fontified t) 794 800 (fontified t face font-lock-type-face) 800 803 (fontified t) 803 804 (syntax-table #2# fontified t) 804 805 (fontified t) 805 811 (fontified t face font-lock-type-face) 811 812 (fontified t) 812 819 (fontified t face font-lock-type-face) 819 821 (fontified t) 821 825 (fontified t face font-lock-constant-face) 825 827 (fontified t) 827 833 (fontified t face font-lock-constant-face) 833 835 (fontified t) 835 844 (fontified t face font-lock-type-face) 844 852 (fontified t) 852 854 (fontified t face font-lock-keyword-face) 854 855 (fontified t) 855 858 (fontified t face font-lock-keyword-face) 858 859 (fontified t) 859 861 (fontified t face font-lock-type-face) 861 908 (fontified t) 908 910 (fontified t face font-lock-type-face) 910 929 (fontified t) 929 933 (fontified t face font-lock-keyword-face) 933 944 (fontified t) 944 947 (fontified t face font-lock-type-face) 947 948 (fontified t) 948 952 (fontified t face font-lock-constant-face) 952 954 (fontified t) 954 960 (fontified t face font-lock-constant-face) 960 969 (fontified t) 969 998 (fontified t face font-lock-string-face) 998 1010 (fontified t) 1010 1012 (fontified t face font-lock-keyword-face) 1012 1013 (fontified t) 1013 1017 (fontified t face font-lock-function-name-face) 1017 1021 (fontified t) 1021 1022 (syntax-table #2# fontified t) 1022 1023 (fontified t) 1023 1031 (fontified t face font-lock-constant-face) 1031 1033 (fontified t) 1033 1043 (fontified t face font-lock-type-face) 1043 1050 (fontified t) 1050 1058 (fontified t face font-lock-constant-face) 1058 1060 (fontified t) 1060 1070 (fontified t face font-lock-type-face) 1070 1080 (fontified t) 1080 1081 (fontified t) 1081 1089 (fontified t) 1089 1121 (fontified t face font-lock-string-face) 1121 1138 (fontified t face font-lock-string-face) 1138 1140 (fontified t) 1140 1148 (fontified t) 1148 1156 (fontified t face font-lock-constant-face) 1156 1158 (fontified t) 1158 1165 (fontified t face font-lock-type-face) 1165 1167 (fontified t) 1167 1171 (fontified t face font-lock-type-face) 1171 1196 (fontified t) 1196 1199 (fontified t face font-lock-keyword-face) 1199 1200 (fontified t) 1200 1206 (fontified t face font-lock-keyword-face) 1206 1207 (fontified t) 1207 1214 (fontified t face font-lock-type-face) 1214 1221 (fontified t) 1221 1224 (fontified t face font-lock-keyword-face) 1224 1225 (fontified t) 1225 1227 (fontified t face font-lock-variable-name-face) 1227 1229 (fontified t) 1229 1235 (fontified t face font-lock-type-face) 1235 1241 (fontified t) 1241 1244 (fontified t face font-lock-keyword-face) 1244 1245 (fontified t) 1245 1250 (fontified t face font-lock-variable-name-face) 1250 1252 (fontified t) 1252 1255 (fontified t face font-lock-type-face) 1255 1256 (fontified t) 1256 1262 (fontified t face font-lock-type-face) 1262 1268 (fontified t) 1268 1271 (fontified t face font-lock-keyword-face) 1271 1272 (fontified t) 1272 1274 (fontified t face font-lock-keyword-face) 1274 1275 (fontified t) 1275 1289 (fontified t face font-lock-function-name-face) 1289 1290 (fontified t) 1290 1295 (fontified t face font-lock-variable-name-face) 1295 1297 (fontified t) 1297 1303 (fontified t face font-lock-type-face) 1303 1306 (fontified t) 1306 1307 (syntax-table #2# fontified t) 1307 1308 (fontified t) 1308 1314 (fontified t face font-lock-type-face) 1314 1315 (fontified t) 1315 1322 (fontified t face font-lock-type-face) 1322 1334 (fontified t) 1334 1337 (fontified t face font-lock-keyword-face) 1337 1338 (fontified t) 1338 1342 (fontified t face font-lock-variable-name-face) 1342 1357 (fontified t) 1357 1360 (fontified t face font-lock-keyword-face) 1360 1361 (fontified t) 1361 1367 (fontified t face font-lock-variable-name-face) 1367 1404 (fontified t) 1404 1581 (fontified t face font-lock-string-face) 1581 1587 (face font-lock-string-face fontified t) 1587 1640 (face font-lock-string-face) 1640 1667 (face font-lock-string-face)) . 1) (undo-tree-id1620 . -620) (undo-tree-id1621 . -580) (undo-tree-id1622 . -621) (undo-tree-id1623 . -17) (undo-tree-id1624 . -620) (t 23738 9082 877692 976000)) (23738 9082 806384 701000) 0 nil]) ((659 . 662) (656 . 659) (#("not_logged_in" 0 13 (fontified t)) . 656) (undo-tree-id1606 . -13) (undo-tree-id1607 . -13) (undo-tree-id1608 . -11) (undo-tree-id1609 . -11) (undo-tree-id1610 . -11) (undo-tree-id1611 . -11) (undo-tree-id1612 . -11) (undo-tree-id1613 . -11) (undo-tree-id1614 . -11) (undo-tree-id1615 . -11) (undo-tree-id1616 . -11) (undo-tree-id1617 . -11) (undo-tree-id1618 . -11) 667) nil (23738 9093 824284 92000) 0 nil]) ((427 . 428)) nil (23738 9082 806409 589000) 0 nil]) ((#("_logged_in " 0 10 (fontified t face font-lock-variable-name-face) 10 11 (fontified t)) . 427) (undo-tree-id1619 . 11)) nil (23738 9082 806411 763000) 0 nil]) ((421 . 427) (#("not" 0 3 (fontified t face font-lock-variable-name-face)) . 421)) nil (23738 9082 806413 633000) 0 nil] [nil nil ((1 . 2072) (#("use super::query;
use postgres;
use warp::Filter;

pub enum Scope {
    Public,
    Private,
}

pub fn get_token(scope: Scope) -> warp::filters::BoxedFilter<(String,)> {
    let token_from_header = warp::header::header::<String>(\"authorization\")
        .map(|auth: String| auth.split(' ').nth(1).unwrap_or(\"invalid\").to_string());

    let token_from_query = warp::query().map(|q: query::Auth| q.access_token);
    let not_logged_in = warp::any().map(|| \"no access token\".to_string());
    match scope {
        Scope::Private => token_from_query.or(token_from_header).unify().boxed(),
        Scope::Public => token_from_query.or(token_from_header).unify().or(not_logged_in).unify().boxed(),
    }
}

pub fn get_account_id_from_token(token: String) -> Result<Account, warp::reject::Rejection> {
    if let Ok(account_id) = get_account_id(token) {
        Ok(account_id)
    } else {
        Err(warp::reject::custom(\"Error: Invalid access token\"))
    }
}

fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
}

pub struct Account {
    pub id: String,
    pub langs: Vec<String>,
}

pub fn get_account_id(token: String) -> Result<Account, ()> {
    let conn = conn();
    let result = &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&token],
        )
        .expect(\"Hard-coded query will return Some([0 or more rows])\");
    if !result.is_empty() {
        let only_row = result.get(0);
        let id: i64 = only_row.get(1);
        let langs: Vec<String> = only_row.get(2);
        Ok(Account {
            id: id.to_string(),
            langs,
        })
    } else {
        Err(())
    }
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 17 (fontified t) 17 18 (fontified t) 18 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 30 (fontified t face font-lock-constant-face) 30 32 (fontified t) 32 35 (fontified t face font-lock-keyword-face) 35 36 (fontified t) 36 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 48 (fontified t face font-lock-type-face) 48 50 (fontified t) 50 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 59 (fontified t face font-lock-keyword-face) 59 60 (fontified t) 60 65 (fontified t face font-lock-type-face) 65 67 (fontified t) 67 68 (fontified t) 68 72 (fontified t) 72 78 (fontified t face font-lock-type-face) 78 84 (fontified t) 84 91 (fontified t face font-lock-type-face) 91 96 (fontified t) 96 99 (fontified t face font-lock-keyword-face) 99 100 (fontified t) 100 102 (fontified t face font-lock-keyword-face) 102 103 (fontified t) 103 112 (fontified t face font-lock-function-name-face) 112 113 (fontified t) 113 118 (fontified t face font-lock-variable-name-face) 118 120 (fontified t) 120 125 (fontified t face font-lock-type-face) 125 128 (fontified t) 128 129 (syntax-table #2# fontified t) 129 130 (fontified t) 130 134 (fontified t face font-lock-constant-face) 134 136 (fontified t) 136 143 (fontified t face font-lock-constant-face) 143 145 (fontified t) 145 156 (fontified t face font-lock-type-face) 156 158 (fontified t) 158 164 (fontified t face font-lock-type-face) 164 174 (fontified t) 174 177 (fontified t face font-lock-keyword-face) 177 178 (fontified t) 178 195 (fontified t face font-lock-variable-name-face) 195 198 (fontified t) 198 202 (fontified t face font-lock-constant-face) 202 204 (fontified t) 204 210 (fontified t face font-lock-constant-face) 210 221 (fontified t) 221 227 (fontified t face font-lock-type-face) 227 229 (fontified t) 229 244 (fontified t face font-lock-string-face) 244 260 (fontified t) 260 264 (fontified t face font-lock-variable-name-face) 264 266 (fontified t) 266 272 (fontified t face font-lock-type-face) 272 285 (fontified t) 285 286 (syntax-table #1# fontified t face font-lock-string-face) 286 287 (fontified t face font-lock-string-face) 287 288 (syntax-table #1# fontified t face font-lock-string-face) 288 307 (fontified t) 307 316 (fontified t face font-lock-string-face) 316 333 (fontified t) 333 337 (fontified t) 337 340 (fontified t face font-lock-keyword-face) 340 341 (fontified t) 341 357 (fontified t face font-lock-variable-name-face) 357 360 (fontified t) 360 364 (fontified t face font-lock-constant-face) 364 379 (fontified t) 379 380 (fontified t face font-lock-variable-name-face) 380 382 (fontified t) 382 387 (fontified t face font-lock-constant-face) 387 389 (fontified t) 389 393 (fontified t face font-lock-type-face) 393 411 (fontified t) 411 412 (fontified t) 412 416 (fontified t) 416 419 (fontified t face font-lock-keyword-face) 419 420 (fontified t) 420 433 (fontified t face font-lock-variable-name-face) 433 436 (fontified t) 436 440 (fontified t face font-lock-constant-face) 440 445 (fontified t) 445 451 (fontified t) 451 455 (fontified t) 455 472 (fontified t face font-lock-string-face) 472 482 (fontified t) 482 484 (fontified t) 484 486 (fontified t) 486 487 (fontified t) 487 491 (fontified t) 491 496 (fontified t face font-lock-keyword-face) 496 503 (fontified t) 503 504 (fontified t) 504 505 (fontified t) 505 513 (fontified t) 513 518 (fontified t face font-lock-type-face) 518 520 (fontified t) 520 527 (fontified t face font-lock-type-face) 527 529 (fontified t) 529 530 (syntax-table #2# fontified t) 530 531 (fontified t) 531 586 (fontified t) 586 587 (fontified t) 587 595 (fontified t) 595 600 (fontified t face font-lock-type-face) 600 602 (fontified t) 602 608 (fontified t face font-lock-type-face) 608 610 (fontified t) 610 611 (syntax-table #2# fontified t) 611 612 (fontified t) 612 661 (fontified t) 661 675 (fontified t) 675 682 (fontified t) 682 684 (fontified t) 684 685 (fontified t) 685 692 (fontified t) 692 693 (rear-nonsticky t fontified t) 693 694 (fontified t) 694 698 (fontified t) 698 699 (fontified t) 699 700 (fontified t) 700 702 (fontified t) 702 703 (fontified t) 703 706 (fontified t face font-lock-keyword-face) 706 707 (fontified t) 707 709 (fontified t face font-lock-keyword-face) 709 710 (fontified t) 710 735 (fontified t face font-lock-function-name-face) 735 736 (fontified t) 736 741 (fontified t face font-lock-variable-name-face) 741 743 (fontified t) 743 749 (fontified t face font-lock-type-face) 749 752 (fontified t) 752 753 (syntax-table #2# fontified t) 753 754 (fontified t) 754 760 (fontified t face font-lock-type-face) 760 761 (fontified t) 761 768 (fontified t face font-lock-type-face) 768 770 (fontified t) 770 774 (fontified t face font-lock-constant-face) 774 776 (fontified t) 776 782 (fontified t face font-lock-constant-face) 782 784 (fontified t) 784 793 (fontified t face font-lock-type-face) 793 794 (fontified t) 794 796 (fontified t) 796 797 (fontified t) 797 801 (fontified t) 801 803 (fontified t face font-lock-keyword-face) 803 804 (fontified t) 804 807 (fontified t face font-lock-keyword-face) 807 808 (fontified t) 808 810 (fontified t face font-lock-type-face) 810 857 (fontified t) 857 859 (fontified t face font-lock-type-face) 859 878 (fontified t) 878 882 (fontified t face font-lock-keyword-face) 882 893 (fontified t) 893 896 (fontified t face font-lock-type-face) 896 897 (fontified t) 897 901 (fontified t face font-lock-constant-face) 901 903 (fontified t) 903 909 (fontified t face font-lock-constant-face) 909 918 (fontified t) 918 947 (fontified t face font-lock-string-face) 947 959 (fontified t) 959 961 (fontified t face font-lock-keyword-face) 961 962 (fontified t) 962 966 (fontified t face font-lock-function-name-face) 966 970 (fontified t) 970 971 (syntax-table #2# fontified t) 971 972 (fontified t) 972 980 (fontified t face font-lock-constant-face) 980 982 (fontified t) 982 987 (fontified t face font-lock-type-face) 987 992 (face font-lock-type-face fontified t) 992 995 (fontified t) 995 996 (fontified t) 996 999 (fontified t) 999 1007 (fontified t face font-lock-constant-face) 1007 1009 (fontified t) 1009 1019 (fontified t face font-lock-type-face) 1019 1030 (fontified t) 1030 1038 (fontified t) 1038 1087 (fontified t face font-lock-string-face) 1087 1097 (fontified t) 1097 1105 (fontified t face font-lock-constant-face) 1105 1107 (fontified t) 1107 1114 (fontified t face font-lock-type-face) 1114 1116 (fontified t) 1116 1120 (fontified t face font-lock-type-face) 1120 1135 (fontified t) 1135 1141 (fontified t) 1141 1142 (fontified t) 1142 1145 (fontified t) 1145 1148 (fontified t face font-lock-keyword-face) 1148 1149 (fontified t) 1149 1155 (fontified t face font-lock-keyword-face) 1155 1156 (fontified t) 1156 1163 (fontified t face font-lock-type-face) 1163 1170 (fontified t) 1170 1173 (fontified t face font-lock-keyword-face) 1173 1174 (fontified t) 1174 1176 (fontified t face font-lock-variable-name-face) 1176 1178 (fontified t) 1178 1184 (fontified t face font-lock-type-face) 1184 1190 (fontified t) 1190 1193 (fontified t face font-lock-keyword-face) 1193 1194 (fontified t) 1194 1199 (fontified t face font-lock-variable-name-face) 1199 1200 (fontified t) 1200 1201 (fontified t) 1201 1204 (fontified t face font-lock-type-face) 1204 1205 (fontified t) 1205 1211 (fontified t face font-lock-type-face) 1211 1214 (fontified t) 1214 1217 (fontified t) 1217 1220 (fontified t face font-lock-keyword-face) 1220 1221 (fontified t) 1221 1223 (fontified t face font-lock-keyword-face) 1223 1224 (fontified t) 1224 1238 (fontified t face font-lock-function-name-face) 1238 1239 (fontified t) 1239 1244 (fontified t face font-lock-variable-name-face) 1244 1246 (fontified t) 1246 1252 (fontified t face font-lock-type-face) 1252 1255 (fontified t) 1255 1256 (fontified t syntax-table #2#) 1256 1257 (fontified t) 1257 1263 (fontified t face font-lock-type-face) 1263 1264 (fontified t) 1264 1271 (fontified t face font-lock-type-face) 1271 1283 (fontified t) 1283 1286 (fontified t face font-lock-keyword-face) 1286 1287 (fontified t) 1287 1291 (fontified t face font-lock-variable-name-face) 1291 1297 (fontified t) 1297 1302 (fontified t) 1302 1306 (fontified t) 1306 1309 (fontified t face font-lock-keyword-face) 1309 1310 (fontified t) 1310 1316 (fontified t face font-lock-variable-name-face) 1316 1353 (fontified t) 1353 1495 (fontified t face font-lock-string-face) 1495 1530 (face font-lock-string-face fontified t) 1530 1536 (face font-lock-string-face fontified t) 1536 1624 (face font-lock-string-face) 1675 1714 (face font-lock-string-face) 1714 1728 (face font-lock-string-face) 1735 1737 (face font-lock-keyword-face) 1767 1770 (face font-lock-keyword-face) 1771 1779 (face font-lock-variable-name-face) 1805 1808 (face font-lock-keyword-face) 1809 1811 (face font-lock-variable-name-face) 1813 1816 (face font-lock-type-face)) . 1) (undo-tree-id1186 . -662) (undo-tree-id1187 . -662) (undo-tree-id1188 . -612) (undo-tree-id1189 . -692) (undo-tree-id1190 . 1520) (undo-tree-id1191 . -50) (undo-tree-id1192 . -50) (undo-tree-id1193 . -50) (undo-tree-id1194 . -50) (undo-tree-id1195 . -54) (undo-tree-id1196 . -54) (undo-tree-id1197 . -50) (undo-tree-id1198 . -54) (undo-tree-id1199 . -54) (undo-tree-id1200 . -99) (undo-tree-id1201 . -99) (undo-tree-id1202 . -54) (undo-tree-id1203 . -99) (undo-tree-id1204 . -99) (undo-tree-id1205 . -585) (undo-tree-id1206 . -612) (undo-tree-id1207 . -662) (undo-tree-id1208 . -685) (undo-tree-id1209 . -612) (undo-tree-id1210 . -662) (undo-tree-id1211 . -662) (undo-tree-id1212 . -662) (undo-tree-id1213 . -662) (undo-tree-id1215 . -483) (undo-tree-id1216 . -576) (undo-tree-id1217 . -503) (undo-tree-id1218 . -576) (undo-tree-id1219 . -485) (undo-tree-id1220 . -485) (undo-tree-id1222 . -683) (undo-tree-id1223 . -491) (undo-tree-id1224 . -496) (undo-tree-id1225 . -485) (undo-tree-id1226 . -487) (undo-tree-id1228 . -485) (undo-tree-id1230 . -496) (undo-tree-id1232 . -585) (undo-tree-id1234 . -585) (undo-tree-id1236 . -585) (undo-tree-id1238 . -472) (undo-tree-id1240 . -472) (undo-tree-id1242 . -585) (undo-tree-id1244 . -585) (undo-tree-id1246 . -584) (undo-tree-id1248 . -585) (undo-tree-id1250 . -585) (undo-tree-id1252 . -585) (undo-tree-id1254 . -585) (undo-tree-id1256 . -585) (undo-tree-id1258 . -472) (undo-tree-id1260 . -472) (undo-tree-id1262 . -585) (undo-tree-id1264 . -585) (undo-tree-id1266 . -584) (undo-tree-id1268 . -585) (undo-tree-id1270 . -919) (undo-tree-id1272 . -503) (undo-tree-id1274 . -919) (undo-tree-id1276 . -484) (undo-tree-id1278 . -483) (undo-tree-id1280 . -452) (undo-tree-id1282 . -484) (undo-tree-id1284 . -485) (undo-tree-id1286 . -485) (undo-tree-id1288 . -485) (undo-tree-id1290 . -485) (undo-tree-id1292 . -472) (undo-tree-id1294 . -472) (undo-tree-id1296 . -485) (undo-tree-id1298 . -485) (undo-tree-id1300 . -484) (undo-tree-id1302 . -483) (undo-tree-id1304 . -452) (undo-tree-id1306 . -485) (undo-tree-id1307 . -485) (undo-tree-id1308 . -485) (undo-tree-id1310 . -485) (undo-tree-id1312 . -485) (undo-tree-id1314 . -485) (undo-tree-id1316 . -485) (undo-tree-id1318 . -472) (undo-tree-id1320 . -472) (undo-tree-id1322 . -485) (undo-tree-id1324 . -485) (undo-tree-id1326 . -484) (undo-tree-id1328 . -483) (undo-tree-id1330 . -452) (undo-tree-id1332 . -485) (undo-tree-id1333 . -485) (undo-tree-id1334 . -485) (undo-tree-id1336 . -485) (undo-tree-id1338 . -485) (undo-tree-id1340 . -485) (undo-tree-id1342 . -485) (undo-tree-id1344 . -472) (undo-tree-id1346 . -472) (undo-tree-id1348 . -485) (undo-tree-id1350 . -485) (undo-tree-id1352 . -484) (undo-tree-id1354 . -483) (undo-tree-id1356 . -452) (undo-tree-id1357 . 1555) (undo-tree-id1358 . -452) (undo-tree-id1359 . 1554) (undo-tree-id1360 . -484) (undo-tree-id1361 . 1522) (undo-tree-id1362 . -485) 486) ((1 . 2007) (#("use super::query;
use postgres;
use warp::Filter;

pub enum Scope {
    Public,
    Private,
}

pub fn get_token(scope: Scope) -> warp::filters::BoxedFilter<(String,)> {
    let token_from_header = warp::header::header::<String>(\"authorization\")
        .map(|auth: String| auth.split(' ').nth(1).unwrap_or(\"invalid\").to_string());

    let token_from_query = warp::query().map(|q: query::Auth| q.access_token);
    let not_logged_in = warp::any().map(|| \"no access token\".to_string());
    match scope {
        Scope::Private => token_from_query.or(token_from_header).unify().boxed(),
        Scope::Public => token_from_query
            .or(token_from_header)
            .unify()
            .or(not_logged_in)
            .unify()
            .boxed(),
    }
}

pub fn get_account_id_from_token(token: String) -> Result<Account, warp::reject::Rejection> {
    if let Ok(account_id) = get_account_id(token) {
        Ok(account_id)
    } else {
        Err(warp::reject::custom(\"Error: Invalid access token\"))
    }
}

fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
}

pub struct Account {
    pub id: String,
    pub langs: Vec<String>,
}

pub fn get_account_id(token: String) -> Result<Account, ()> {
    let conn = conn();
    let result = &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&token],
        )
        .expect(\"Hard-coded query will return Some([0 or more rows])\");
    if !result.is_empty() {
        let only_row = result.get(0);
        let id: i64 = only_row.get(1);
        let langs: Vec<String> = only_row.get(2);
        Ok(Account {
            id: id.to_string(),
            langs,
        })
    } else {
        Err(())
    }
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 17 (fontified t) 17 18 (fontified t) 18 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 30 (fontified t face font-lock-constant-face) 30 32 (fontified t) 32 35 (fontified t face font-lock-keyword-face) 35 36 (fontified t) 36 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 48 (fontified t face font-lock-type-face) 48 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 59 (fontified t face font-lock-keyword-face) 59 60 (fontified t) 60 65 (fontified t face font-lock-type-face) 65 72 (fontified t) 72 78 (fontified t face font-lock-type-face) 78 84 (fontified t) 84 91 (fontified t face font-lock-type-face) 91 96 (fontified t) 96 99 (fontified t face font-lock-keyword-face) 99 100 (fontified t) 100 102 (fontified t face font-lock-keyword-face) 102 103 (fontified t) 103 112 (fontified t face font-lock-function-name-face) 112 113 (fontified t) 113 118 (fontified t face font-lock-variable-name-face) 118 120 (fontified t) 120 125 (fontified t face font-lock-type-face) 125 128 (fontified t) 128 129 (fontified t syntax-table #2#) 129 130 (fontified t) 130 134 (fontified t face font-lock-constant-face) 134 136 (fontified t) 136 143 (fontified t face font-lock-constant-face) 143 145 (fontified t) 145 156 (fontified t face font-lock-type-face) 156 158 (fontified t) 158 164 (fontified t face font-lock-type-face) 164 174 (fontified t) 174 177 (fontified t face font-lock-keyword-face) 177 178 (fontified t) 178 195 (fontified t face font-lock-variable-name-face) 195 198 (fontified t) 198 202 (fontified t face font-lock-constant-face) 202 204 (fontified t) 204 210 (fontified t face font-lock-constant-face) 210 221 (fontified t) 221 227 (fontified t face font-lock-type-face) 227 229 (fontified t) 229 244 (fontified t face font-lock-string-face) 244 260 (fontified t) 260 264 (fontified t face font-lock-variable-name-face) 264 266 (fontified t) 266 272 (fontified t face font-lock-type-face) 272 285 (fontified t) 285 286 (fontified t syntax-table #1# face font-lock-string-face) 286 287 (fontified t face font-lock-string-face) 287 288 (fontified t syntax-table #1# face font-lock-string-face) 288 307 (fontified t) 307 316 (fontified t face font-lock-string-face) 316 337 (fontified t) 337 340 (fontified t face font-lock-keyword-face) 340 341 (fontified t) 341 357 (fontified t face font-lock-variable-name-face) 357 360 (fontified t) 360 364 (fontified t face font-lock-constant-face) 364 379 (fontified t) 379 380 (fontified t face font-lock-variable-name-face) 380 382 (fontified t) 382 387 (fontified t face font-lock-constant-face) 387 389 (fontified t) 389 393 (fontified t face font-lock-type-face) 393 412 (fontified t) 412 416 (fontified t) 416 419 (fontified t face font-lock-keyword-face) 419 420 (fontified t) 420 433 (fontified t face font-lock-variable-name-face) 433 436 (fontified t) 436 440 (fontified t face font-lock-constant-face) 440 455 (fontified t) 455 472 (fontified t face font-lock-string-face) 472 486 (fontified t) 486 491 (fontified t) 491 496 (fontified t face font-lock-keyword-face) 496 513 (fontified t) 513 518 (fontified t face font-lock-type-face) 518 520 (fontified t) 520 527 (fontified t face font-lock-type-face) 527 529 (fontified t) 529 530 (syntax-table #2# fontified t) 530 595 (fontified t) 595 600 (fontified t face font-lock-type-face) 600 602 (fontified t) 602 608 (fontified t face font-lock-type-face) 608 610 (fontified t) 610 611 (syntax-table #2# fontified t) 611 768 (fontified t) 768 771 (fontified t face font-lock-keyword-face) 771 772 (fontified t) 772 774 (fontified t face font-lock-keyword-face) 774 775 (fontified t) 775 800 (fontified t face font-lock-function-name-face) 800 801 (fontified t) 801 806 (fontified t face font-lock-variable-name-face) 806 808 (fontified t) 808 814 (fontified t face font-lock-type-face) 814 817 (fontified t) 817 818 (syntax-table #2# fontified t) 818 819 (fontified t) 819 825 (fontified t face font-lock-type-face) 825 826 (fontified t) 826 833 (fontified t face font-lock-type-face) 833 835 (fontified t) 835 839 (fontified t face font-lock-constant-face) 839 841 (fontified t) 841 847 (fontified t face font-lock-constant-face) 847 849 (fontified t) 849 858 (fontified t face font-lock-type-face) 858 866 (fontified t) 866 868 (fontified t face font-lock-keyword-face) 868 869 (fontified t) 869 872 (fontified t face font-lock-keyword-face) 872 873 (fontified t) 873 875 (fontified t face font-lock-type-face) 875 912 (fontified t) 912 914 (fontified t) 914 922 (fontified t) 922 924 (fontified t face font-lock-type-face) 924 943 (fontified t) 943 947 (fontified t face font-lock-keyword-face) 947 958 (fontified t) 958 961 (fontified t face font-lock-type-face) 961 962 (fontified t) 962 966 (fontified t face font-lock-constant-face) 966 968 (fontified t) 968 974 (fontified t face font-lock-constant-face) 974 983 (fontified t) 983 986 (fontified t face font-lock-string-face) 986 1012 (fontified t face font-lock-string-face) 1012 1015 (fontified t) 1015 1024 (fontified t) 1024 1026 (fontified t face font-lock-keyword-face) 1026 1027 (fontified t) 1027 1031 (fontified t face font-lock-function-name-face) 1031 1035 (fontified t) 1035 1036 (syntax-table #2# fontified t) 1036 1037 (fontified t) 1037 1045 (fontified t face font-lock-constant-face) 1045 1047 (fontified t) 1047 1057 (fontified t face font-lock-type-face) 1057 1064 (fontified t) 1064 1072 (fontified t face font-lock-constant-face) 1072 1074 (fontified t) 1074 1084 (fontified t face font-lock-type-face) 1084 1103 (fontified t) 1103 1152 (fontified t face font-lock-string-face) 1152 1162 (fontified t) 1162 1170 (fontified t face font-lock-constant-face) 1170 1172 (fontified t) 1172 1179 (fontified t face font-lock-type-face) 1179 1181 (fontified t) 1181 1185 (fontified t face font-lock-type-face) 1185 1210 (fontified t) 1210 1213 (fontified t face font-lock-keyword-face) 1213 1214 (fontified t) 1214 1220 (fontified t face font-lock-keyword-face) 1220 1221 (fontified t) 1221 1228 (fontified t face font-lock-type-face) 1228 1235 (fontified t) 1235 1238 (fontified t face font-lock-keyword-face) 1238 1239 (fontified t) 1239 1241 (fontified t face font-lock-variable-name-face) 1241 1243 (fontified t) 1243 1249 (fontified t face font-lock-type-face) 1249 1255 (fontified t) 1255 1258 (fontified t face font-lock-keyword-face) 1258 1259 (fontified t) 1259 1264 (fontified t face font-lock-variable-name-face) 1264 1266 (fontified t) 1266 1269 (fontified t face font-lock-type-face) 1269 1270 (fontified t) 1270 1276 (fontified t face font-lock-type-face) 1276 1282 (fontified t) 1282 1285 (fontified t face font-lock-keyword-face) 1285 1286 (fontified t) 1286 1288 (fontified t face font-lock-keyword-face) 1288 1289 (fontified t) 1289 1303 (fontified t face font-lock-function-name-face) 1303 1304 (fontified t) 1304 1309 (fontified t face font-lock-variable-name-face) 1309 1311 (fontified t) 1311 1317 (fontified t face font-lock-type-face) 1317 1320 (fontified t) 1320 1321 (syntax-table #2# fontified t) 1321 1322 (fontified t) 1322 1328 (fontified t face font-lock-type-face) 1328 1329 (fontified t) 1329 1336 (fontified t face font-lock-type-face) 1336 1348 (fontified t) 1348 1351 (fontified t face font-lock-keyword-face) 1351 1352 (fontified t) 1352 1356 (fontified t face font-lock-variable-name-face) 1356 1371 (fontified t) 1371 1374 (fontified t face font-lock-keyword-face) 1374 1375 (fontified t) 1375 1381 (fontified t face font-lock-variable-name-face) 1381 1414 (fontified t) 1414 1418 (fontified t) 1418 1420 (face font-lock-string-face fontified t) 1420 1515 (face font-lock-string-face) 1515 1532 (face font-lock-string-face)) . 1) (undo-tree-id1363 . -412) (undo-tree-id1364 . -486) (undo-tree-id1365 . -17) (undo-tree-id1366 . -485) (undo-tree-id1367 . -485) (undo-tree-id1368 . -485) (undo-tree-id1369 . -485) (undo-tree-id1370 . -485) (undo-tree-id1371 . -485) (undo-tree-id1372 . -485) (undo-tree-id1373 . -485) (undo-tree-id1374 . -484) (undo-tree-id1375 . -485) (undo-tree-id1376 . -484) (undo-tree-id1377 . -485) (undo-tree-id1378 . -484) (undo-tree-id1379 . -485) (undo-tree-id1380 . -484) (undo-tree-id1381 . -485) (undo-tree-id1382 . -471) (undo-tree-id1383 . -472) (undo-tree-id1384 . -471) (undo-tree-id1385 . -472) (undo-tree-id1386 . -484) (undo-tree-id1387 . -485) (undo-tree-id1388 . -484) (undo-tree-id1389 . -485) (undo-tree-id1390 . -483) (undo-tree-id1391 . -484) (undo-tree-id1392 . -482) (undo-tree-id1393 . -483) (undo-tree-id1394 . -451) (undo-tree-id1395 . -452) (undo-tree-id1396 . -406) (undo-tree-id1397 . -485) (undo-tree-id1398 . -406) (undo-tree-id1399 . -406) (undo-tree-id1400 . -485) (undo-tree-id1401 . -406) (undo-tree-id1402 . -406) (undo-tree-id1403 . -485) (undo-tree-id1404 . -406) (undo-tree-id1405 . -485) (undo-tree-id1406 . -485) (undo-tree-id1407 . -406) (undo-tree-id1408 . -484) (undo-tree-id1409 . -485) (undo-tree-id1410 . -484) (undo-tree-id1411 . -485) (undo-tree-id1412 . -484) (undo-tree-id1413 . -485) (undo-tree-id1414 . -484) (undo-tree-id1415 . -485) (undo-tree-id1416 . -471) (undo-tree-id1417 . -472) (undo-tree-id1418 . -471) (undo-tree-id1419 . -472) (undo-tree-id1420 . -484) (undo-tree-id1421 . -485) (undo-tree-id1422 . -484) (undo-tree-id1423 . -485) (undo-tree-id1424 . -483) (undo-tree-id1425 . -484) (undo-tree-id1426 . -482) (undo-tree-id1427 . -483) (undo-tree-id1428 . -451) (undo-tree-id1429 . -452) (undo-tree-id1430 . -503) (undo-tree-id1431 . -485) (undo-tree-id1432 . -983) (undo-tree-id1433 . -984) (undo-tree-id1434 . -578) (undo-tree-id1435 . -503) (undo-tree-id1436 . -578) (undo-tree-id1437 . -578) (undo-tree-id1438 . -578) (undo-tree-id1439 . -578) (undo-tree-id1440 . -578) (undo-tree-id1441 . -578) (undo-tree-id1442 . -627) (undo-tree-id1443 . -578) (undo-tree-id1444 . -627) (undo-tree-id1445 . -627) (undo-tree-id1446 . -578) (undo-tree-id1447 . -627) (undo-tree-id1448 . -627) (undo-tree-id1449 . -578) (undo-tree-id1450 . -627) (undo-tree-id1451 . -578) (undo-tree-id1452 . -662) (undo-tree-id1453 . -627) (undo-tree-id1454 . -983) (undo-tree-id1455 . -984) (undo-tree-id1456 . -644) (undo-tree-id1457 . -645) (undo-tree-id1458 . -683) (undo-tree-id1459 . -662) (undo-tree-id1460 . -983) (undo-tree-id1461 . -984) (undo-tree-id1462 . -682) (undo-tree-id1463 . -683) (undo-tree-id1464 . -683) (undo-tree-id1465 . -683) (undo-tree-id1466 . -683) (undo-tree-id1467 . -683) (undo-tree-id1468 . -714) (undo-tree-id1469 . -683) (undo-tree-id1470 . -714) (undo-tree-id1471 . -714) (undo-tree-id1472 . -683) (undo-tree-id1473 . -714) (undo-tree-id1474 . -714) (undo-tree-id1475 . -683) (undo-tree-id1476 . -714) (undo-tree-id1477 . -714) (undo-tree-id1478 . -714) (undo-tree-id1479 . -683) (undo-tree-id1480 . -983) (undo-tree-id1481 . -984) (undo-tree-id1482 . -700) (undo-tree-id1483 . -701) (undo-tree-id1484 . 1371) (undo-tree-id1485 . -701) (undo-tree-id1486 . 1370) (undo-tree-id1487 . -714) (undo-tree-id1488 . 1357) (undo-tree-id1489 . -715) (undo-tree-id1490 . -701) (undo-tree-id1491 . -714) (undo-tree-id1492 . -714) (undo-tree-id1493 . -714) (t 23738 9042 321299 491000)) (23738 9042 247551 199000) 0 nil]) ((486 . 487) (t 23738 9039 584651 325000)) nil (23738 9050 57525 972000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 684) (683 . 684) (682 . 684) (#("(" 0 1 (fontified nil)) . -682) (676 . 683) (#(")" 0 1 (fontified nil)) . 676) (675 . 676) (#(" " 0 1 (fontified nil)) . -675) (675 . 676) (#(")" 0 1 (fontified nil)) . -675) (671 . 676) (662 . 671) (#("warp::aany()" 0 4 (fontified t face font-lock-constant-face) 4 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t) 8 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t)) . 662) (undo-tree-id1172 . -7) (undo-tree-id1173 . -7) (undo-tree-id1174 . -7) (undo-tree-id1175 . -7) (undo-tree-id1176 . -7) (undo-tree-id1177 . -7) (undo-tree-id1178 . -7)) nil (23738 9039 568600 910000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 485) (484 . 485) (483 . 485) (#("(" 0 1 (fontified nil)) . -483) (481 . 484) (473 . 481) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 473) (460 . 473) (457 . 460) (456 . 458) (#("\"" 0 1 (fontified nil)) . -456) (453 . 457) (452 . 454) (#("(" 0 1 (fontified nil)) . -452) (448 . 453) (#(")" 0 1 (fontified nil)) . 448) (447 . 448) (446 . 448) (#("(" 0 1 (fontified nil)) . -446) (441 . 447) (423 . 441) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -423) (undo-tree-id1179 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -424) (undo-tree-id1180 . -1) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -425) (undo-tree-id1181 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -426) (undo-tree-id1182 . -1) 427 (424 . 427) (#("-" 0 1 (fontified t)) . -424) (undo-tree-id1183 . -1) 425 (421 . 425) (#("l" 0 1 (fontified t face font-lock-variable-name-face)) . -421) (undo-tree-id1184 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -422) (undo-tree-id1185 . -1) 423 (421 . 423) (417 . 421) (412 . 417) 411) nil (23738 9039 568643 807000) 0 nil] [nil ([nil ([nil ([nil ([nil nil ((#("generic::" 0 7 (fontified t face font-lock-constant-face) 7 9 (fontified t)) . 604) (undo-tree-id929 . -7)) ((604 . 613)) (23738 8710 427462 962000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 630) (629 . 630) (628 . 630) (#("(" 0 1 (fontified nil)) . -628) (620 . 629) (619 . 621) (#("<" 0 1 (fontified nil face font-lock-type-face)) . -619) (619 . 620) (604 . 619) (598 . 604) (#("w" 0 1 (fontified t)) . -598) (undo-tree-id930 . -1) 599 (598 . 599) (597 . 599) (#("<" 0 1 (fontified nil)) . -597) (597 . 598)) ((#("<" 0 1 (fontified nil)) . 597) (597 . 598) (#("<>" 0 1 (fontified nil) 1 2 (fontified nil)) . 597) (undo-tree-id931 . 1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (#("w" 0 1 (fontified nil)) . 598) (undo-tree-id1018 . -1) (598 . 599) (#("warp::" 0 4 (fontified nil face font-lock-constant-face) 4 6 (fontified nil)) . 598) (undo-tree-id1019 . -6) (undo-tree-id1020 . -6) (undo-tree-id1021 . -5) (undo-tree-id1022 . -5) (undo-tree-id1023 . -6) (undo-tree-id1024 . -5) (undo-tree-id1025 . -6) (undo-tree-id1026 . -2) (undo-tree-id1027 . -3) (undo-tree-id1028 . -6) (undo-tree-id1029 . -6) (undo-tree-id1030 . -6) (undo-tree-id1031 . -6) (undo-tree-id1032 . -6) (undo-tree-id1033 . -6) (undo-tree-id1034 . -6) (undo-tree-id1035 . -6) (undo-tree-id1036 . -6) (undo-tree-id1037 . -2) (undo-tree-id1038 . -2) (undo-tree-id1039 . -3) (undo-tree-id1040 . -2) (undo-tree-id1041 . -3) (undo-tree-id1042 . -3) (undo-tree-id1043 . -2) (undo-tree-id1044 . -3) (undo-tree-id1045 . -3) (undo-tree-id1046 . -2) (undo-tree-id1047 . -3) (undo-tree-id1048 . -2) (undo-tree-id1049 . -4) (undo-tree-id1050 . -3) (undo-tree-id1051 . -5) (undo-tree-id1052 . -4) (undo-tree-id1053 . -6) (undo-tree-id1054 . -5) (undo-tree-id1055 . -6) (undo-tree-id1056 . -6) (undo-tree-id1057 . -6) (undo-tree-id1058 . -6) (undo-tree-id1059 . -6) (undo-tree-id1060 . -6) (undo-tree-id1061 . -6) (undo-tree-id1062 . -6) (undo-tree-id1063 . -6) (undo-tree-id1064 . -6) (undo-tree-id1065 . -6) (undo-tree-id1066 . -6) (undo-tree-id1067 . -6) (undo-tree-id1068 . -6) (undo-tree-id1069 . -6) (undo-tree-id1070 . -6) (undo-tree-id1071 . -6) (undo-tree-id1072 . -6) (undo-tree-id1073 . -6) (undo-tree-id1074 . -6) (undo-tree-id1075 . -6) (undo-tree-id1076 . -6) (undo-tree-id1077 . -6) (undo-tree-id1078 . -6) (undo-tree-id1079 . -6) (undo-tree-id1080 . -6) (undo-tree-id1081 . -6) (undo-tree-id1082 . -6) (undo-tree-id1083 . -6) (undo-tree-id1084 . -6) (undo-tree-id1085 . -6) (undo-tree-id1086 . -6) (undo-tree-id1087 . -6) (undo-tree-id1088 . -6) (undo-tree-id1089 . -6) (undo-tree-id1090 . -6) (undo-tree-id1091 . -6) (undo-tree-id1092 . -6) (undo-tree-id1093 . -6) (undo-tree-id1094 . -6) (undo-tree-id1095 . -6) (undo-tree-id1096 . -6) (undo-tree-id1097 . -6) (undo-tree-id1098 . -6) (undo-tree-id1099 . -6) (undo-tree-id1100 . -6) (undo-tree-id1101 . -6) (undo-tree-id1102 . -6) (undo-tree-id1103 . -6) (undo-tree-id1104 . -6) (#("generic::Either" 0 7 (fontified nil face font-lock-constant-face) 7 9 (fontified nil) 9 15 (fontified nil face font-lock-type-face)) . 604) (undo-tree-id1105 . -15) (undo-tree-id1106 . -15) (undo-tree-id1107 . -15) (undo-tree-id1108 . -15) (undo-tree-id1109 . -15) (undo-tree-id1110 . -15) (undo-tree-id1111 . -15) (undo-tree-id1112 . -15) (undo-tree-id1113 . -15) (undo-tree-id1114 . -15) (undo-tree-id1115 . -15) (undo-tree-id1116 . -10) (undo-tree-id1117 . -10) (undo-tree-id1118 . -10) (undo-tree-id1119 . -10) (undo-tree-id1120 . -10) (undo-tree-id1121 . -10) (undo-tree-id1122 . -10) (undo-tree-id1123 . -10) (undo-tree-id1124 . -10) (undo-tree-id1125 . -10) (undo-tree-id1126 . -10) (undo-tree-id1127 . -10) (undo-tree-id1128 . -10) (undo-tree-id1129 . -10) (undo-tree-id1130 . -11) (undo-tree-id1131 . -10) (undo-tree-id1132 . -11) (undo-tree-id1133 . -11) (undo-tree-id1134 . -10) (undo-tree-id1135 . -11) (undo-tree-id1136 . -11) (undo-tree-id1137 . -10) (undo-tree-id1138 . -11) (undo-tree-id1139 . -11) (undo-tree-id1140 . -10) (undo-tree-id1141 . -12) (undo-tree-id1142 . -11) (undo-tree-id1143 . -13) (undo-tree-id1144 . -12) (undo-tree-id1145 . -14) (undo-tree-id1146 . -13) (undo-tree-id1147 . -15) (undo-tree-id1148 . -14) (undo-tree-id1149 . -15) (undo-tree-id1150 . -15) (undo-tree-id1151 . -15) (#("<" 0 1 (fontified nil face font-lock-type-face)) . 619) (619 . 620) (#("<>" 0 1 (fontified nil) 1 2 (fontified nil)) . 619) (undo-tree-id1152 . 1) (undo-tree-id1153 . -1) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (#("String, (" 0 6 (fontified nil face font-lock-type-face) 6 8 (fontified nil) 8 9 (fontified nil)) . 620) (undo-tree-id1163 . -8) (undo-tree-id1164 . -7) (undo-tree-id1165 . -8) (undo-tree-id1166 . -8) (undo-tree-id1167 . -6) (undo-tree-id1168 . -6) (undo-tree-id1169 . -6) (undo-tree-id1170 . -8) (628 . 629) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 628) (undo-tree-id1171 . -1) (#(")" 0 1 (fontified nil)) . 629) (630 . 631)) (23738 8710 432657 958000) 0 nil] [nil ([nil ([nil nil ((622 . 623) (#(">" 0 1 (fontified t)) . -606) (606 . 607) (#(">" 0 1 (fontified t)) . -600) (599 . 601) (#("<" 0 1 (fontified nil)) . -599) (599 . 600)) ((#("<" 0 1 (fontified nil)) . 599) (599 . 600) (#("<>" 0 1 (fontified nil) 1 2 (fontified nil)) . 599) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (600 . 601) (#(">" 0 1 (fontified nil)) . 606) (606 . 607) (#(">" 0 1 (fontified t)) . 622)) (23738 8630 596115 856000) 0 nil] [nil nil ((599 . 601) (#("<" 0 1 (fontified nil)) . -599) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (599 . 600)) ((#("<" 0 1 (fontified nil)) . 599) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (599 . 600) (#("<>" 0 1 (fontified t) 1 2 (fontified t)) . 599) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -2) (undo-tree-id715 . -1)) (23738 8608 892263 534000) 0 nil]) ((602 . 605) (#("eh" 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face)) . 602) (603 . 604) (#("rh" 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face)) . 603) (599 . 605)) ((#("Eiterh" 0 3 (fontified nil face font-lock-type-face) 3 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil face font-lock-type-face) 5 6 (fontified nil face font-lock-type-face)) . 599) (undo-tree-id782 . 6) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -3) (undo-tree-id786 . -3) (undo-tree-id787 . -3) (undo-tree-id788 . -3) (undo-tree-id789 . -3) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -2) (undo-tree-id797 . -1) (undo-tree-id798 . -3) (undo-tree-id799 . -2) (undo-tree-id800 . -3) (undo-tree-id801 . -3) (undo-tree-id802 . -3) (undo-tree-id803 . -3) (undo-tree-id804 . -3) (undo-tree-id805 . -3) (undo-tree-id806 . -3) (undo-tree-id807 . -3) (undo-tree-id808 . -3) (undo-tree-id809 . -3) (undo-tree-id810 . -3) (undo-tree-id811 . -3) (undo-tree-id812 . -3) (undo-tree-id813 . -3) (undo-tree-id814 . -3) (undo-tree-id815 . -3) (undo-tree-id816 . -3) (undo-tree-id817 . -3) (undo-tree-id818 . -3) (undo-tree-id819 . -3) (undo-tree-id820 . -3) (undo-tree-id821 . -3) (undo-tree-id822 . -3) (undo-tree-id823 . -3) (undo-tree-id824 . -3) (undo-tree-id825 . -3) (undo-tree-id826 . -3) (undo-tree-id827 . -3) (undo-tree-id828 . -3) (undo-tree-id829 . -3) (undo-tree-id830 . -3) (undo-tree-id831 . -3) (undo-tree-id832 . -3) (undo-tree-id833 . -3) (undo-tree-id834 . -3) (undo-tree-id835 . -3) (undo-tree-id836 . -3) (undo-tree-id837 . -3) (undo-tree-id838 . -3) (undo-tree-id839 . -3) (undo-tree-id840 . -3) (603 . 605) (#("h" 0 1 (fontified nil face font-lock-type-face)) . 603) (602 . 604) (#("her" 0 3 (fontified t face font-lock-type-face)) . 602) (undo-tree-id841 . -3) (undo-tree-id842 . -3) (undo-tree-id843 . -3) (undo-tree-id844 . -3) (undo-tree-id845 . -3) (undo-tree-id846 . -1) (undo-tree-id847 . -2) (undo-tree-id848 . -1) (undo-tree-id849 . -3) (undo-tree-id850 . -3) (undo-tree-id851 . -3) (undo-tree-id852 . -3) (undo-tree-id853 . -3) (undo-tree-id854 . -3) (undo-tree-id855 . -3) (undo-tree-id856 . -3) (undo-tree-id857 . -3) (undo-tree-id858 . -3) (undo-tree-id859 . -3) (undo-tree-id860 . -3) (undo-tree-id861 . -3) (undo-tree-id862 . -3) (undo-tree-id863 . -3) (undo-tree-id864 . -3) (undo-tree-id865 . -3) (undo-tree-id866 . -3) (undo-tree-id867 . -3) (undo-tree-id868 . -3) (undo-tree-id869 . -3) (undo-tree-id870 . -2) (undo-tree-id871 . -3) (undo-tree-id872 . -3) (undo-tree-id873 . -2) (undo-tree-id874 . -2) (undo-tree-id875 . -3) (undo-tree-id876 . -2) (undo-tree-id877 . -2) (undo-tree-id878 . -2) (undo-tree-id879 . -2) (undo-tree-id880 . -2) (undo-tree-id881 . -2) (undo-tree-id882 . -2) (undo-tree-id883 . -2) (undo-tree-id884 . -2) (undo-tree-id885 . -2)) (23738 8630 611433 484000) 0 nil]) ((610 . 614) (#("i" 0 1 (fontified t face font-lock-type-face)) . -610) (undo-tree-id704 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -611) (undo-tree-id705 . -1) (#("g" 0 1 (fontified t face font-lock-type-face)) . -612) (undo-tree-id706 . -1) 613 (600 . 613) (599 . 601) (#("<" 0 1 (fontified nil)) . -599) (597 . 600)) ((#("::<" 0 2 (fontified nil) 2 3 (fontified nil)) . 597) (undo-tree-id886 . -2) (undo-tree-id887 . -2) (undo-tree-id888 . -2) (undo-tree-id889 . -2) (undo-tree-id890 . -2) (undo-tree-id891 . -2) (undo-tree-id892 . -2) (undo-tree-id893 . -2) (undo-tree-id894 . -2) (undo-tree-id895 . -2) (undo-tree-id896 . -2) (undo-tree-id897 . -2) (undo-tree-id898 . -2) (undo-tree-id899 . -2) (undo-tree-id900 . -2) (undo-tree-id901 . -2) (undo-tree-id902 . -2) (undo-tree-id903 . -2) (undo-tree-id904 . -2) (undo-tree-id905 . -2) (undo-tree-id906 . -2) (599 . 600) (#("<>" 0 1 (fontified nil) 1 2 (fontified nil)) . 599) (undo-tree-id907 . 2) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (undo-tree-id920 . -1) (#("String, Sting" 0 6 (fontified nil face font-lock-type-face) 6 8 (fontified nil) 8 10 (fontified nil face font-lock-type-face) 10 11 (fontified nil face font-lock-type-face) 11 12 (fontified nil face font-lock-type-face) 12 13 (fontified nil face font-lock-type-face)) . 600) (undo-tree-id921 . -8) (undo-tree-id922 . -10) (undo-tree-id923 . -6) (undo-tree-id924 . -6) (undo-tree-id925 . -8) (undo-tree-id926 . -10) (610 . 613) (#("ring" 0 4 (fontified t face font-lock-type-face)) . 610) (undo-tree-id927 . -4) (undo-tree-id928 . -4)) (23738 8631 20458 323000) 0 nil]) (597) (nil undo-tree-canary) (23738 8710 785434 932000) 0 nil]) ((608 . 609) (#(")" 0 1 (fontified nil)) . 608) (607 . 608) (606 . 608) (#("(" 0 1 (fontified nil)) . -606) (605 . 607) (601 . 605)) ((#("unif" 0 4 (fontified nil)) . 601) (#("y(" 0 1 (fontified nil) 1 2 (fontified nil)) . 605) (606 . 607) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 606) (#(")" 0 1 (fontified nil)) . 607) (608 . 609) (#("." 0 1 (fontified t)) . 608)) (23738 8711 650385 602000) 0 nil]) ((#("a" 0 1 (fontified t)) . 595)) ((595 . 596)) (23738 8712 91212 247000) 0 nil]) ((598 . 600) (#("(" 0 1 (fontified nil)) . -598) (598 . 599)) nil (23738 8712 467887 293000) 0 nil]) ((597 . 598) (#("u" 0 1 (fontified t)) . -597) (undo-tree-id707 . -1) 598 (595 . 598) (#("n" 0 1 (fontified t)) . -595) (undo-tree-id708 . -1) (#("u" 0 1 (fontified t)) . -596) (undo-tree-id709 . -1) 597 (588 . 597) (587 . 589) (#("(" 0 1 (fontified nil)) . -587) (587 . 588) (584 . 587)) nil (23738 8608 892411 350000) 0 nil]) ((nil rear-nonsticky nil 592 . 593) (nil fontified nil 538 . 593) (538 . 593) 537) nil (23738 8608 892425 388000) 0 nil] [nil nil ((#("token_from_query.or(token_from_header).unify().boxed()," 0 55 (fontified t)) . 457) (undo-tree-id686 . -54) (undo-tree-id687 . -54)) ((457 . 512)) (23738 8511 891478 492000) 0 nil]) ((536 . 538) (#(" " 0 1 (fontified nil)) . -536) (536 . 537) (#(">" 0 1 (fontified nil syntax-table #2#)) . -536) (535 . 537) (521 . 535)) nil (23738 8511 893003 471000) 0 nil]) ((512 . 521) (511 . 512)) nil (23738 8511 891487 502000) 0 nil]) ((456 . 457) (#("     " 0 1 (fontified nil) 1 4 (fontified nil) 4 5 (fontified nil rear-nonsticky t)) . 456) (undo-tree-id688 . -1) (undo-tree-id689 . -5) (#("
" 0 1 (fontified t)) . -457) (undo-tree-id690 . -1) 435) nil (23738 8511 891492 840000) 0 nil]) ((nil rear-nonsticky nil 461 . 462) (#("
" 0 1 (fontified nil)) . -516) (457 . 517) 431) nil (23738 8511 891495 820000) 0 nil]) ((#("    token_from_query.or(token_from_header).unify().boxed()
" 0 58 (fontified t) 58 59 (fontified t)) . 464) (undo-tree-id691 . -25) (undo-tree-id692 . -25) 489) nil (23738 8511 891500 35000) 0 nil]) ((455 . 457) (#(" " 0 1 (fontified nil)) . -455) (455 . 456) (#(">" 0 1 (fontified nil syntax-table #2#)) . -455) (455 . 456) (#(":" 0 1 (fontified t)) . -455) (undo-tree-id693 . -1) (undo-tree-id694 . -1) 456 (454 . 456) (#("-" 0 1 (fontified t)) . -454) (undo-tree-id695 . -1) 455 (453 . 455) (446 . 453) (#("P" 0 1 (fontified t face font-lock-type-face)) . -446) (undo-tree-id696 . -1) 447 (#("u" 0 1 (fontified t face font-lock-type-face)) . -447) (undo-tree-id697 . -1) 448 (445 . 448) (439 . 445) (430 . 439) 416) nil (23738 8511 891511 646000) 0 nil]) ((430 . 435) (429 . 431) (#("{" 0 1 (fontified nil)) . -429) (423 . 430) (417 . 423) (413 . 417) (413 . 414) 416 (t 23738 8346 638887 677000)) nil (23738 8511 891517 801000) 0 nil] [nil nil ((#("        " 0 8 (fontified t)) . -472) (undo-tree-id680 . -8) (undo-tree-id681 . -8) 480 (471 . 480) (t 23738 8346 638887 677000) 416) ((#("
        " 0 1 (fontified t) 1 9 (fontified nil)) . 471) (undo-tree-id682 . -9) (undo-tree-id683 . -9) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (472 . 480)) (23738 8471 116778 404000) 0 nil]) ((54 . 56) (52 . 54)) nil (23738 8471 127163 401000) 0 nil]) ((51 . 52) (t 23738 8325 39018 343000)) nil (23738 8346 618896 383000) 0 nil]) ((1 . 1773) (#("use super::query;
use postgres;
use warp::Filter;
    enum Scope {
        Public,
        Private,
    }

pub fn get_token(scope: Scope) -> warp::filters::BoxedFilter<(String,)> {
    let token_from_header = warp::header::header::<String>(\"authorization\")
        .map(|auth: String| auth.split(' ').nth(1).unwrap_or(\"invalid\").to_string());

    let token_from_query = warp::query().map(|q: query::Auth| q.access_token);
    token_from_query.or(token_from_header).unify().boxed()
}

pub fn get_account_id_from_token(token: String) -> Result<Account, warp::reject::Rejection> {
    if let Ok(account_id) = get_account_id(token) {
        Ok(account_id)
    } else {
        Err(warp::reject::custom(\"Error: Invalid access token\"))
    }
}

fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
}

pub struct Account {
    pub id: String,
    pub langs: Vec<String>,
}

pub fn get_account_id(token: String) -> Result<Account, ()> {
    let conn = conn();
    let result = &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&token],
        )
        .expect(\"Hard-coded query will return Some([0 or more rows])\");
    if !result.is_empty() {
        let only_row = result.get(0);
        let id: i64 = only_row.get(1);
        let langs: Vec<String> = only_row.get(2);
        Ok(Account {
            id: id.to_string(),
            langs,
        })
    } else {
        Err(())
    }
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 18 (fontified t) 18 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 30 (fontified t face font-lock-constant-face) 30 32 (fontified t) 32 35 (fontified t face font-lock-keyword-face) 35 36 (fontified t) 36 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 48 (fontified t face font-lock-type-face) 48 49 (fontified t) 49 50 (fontified t) 50 53 (fontified t) 53 54 (fontified t rear-nonsticky t) 54 58 (fontified t face font-lock-keyword-face) 58 59 (fontified t) 59 64 (fontified t face font-lock-type-face) 64 65 (fontified t) 65 66 (fontified t) 66 67 (fontified t) 67 75 (fontified t) 75 81 (fontified t face font-lock-type-face) 81 83 (fontified t) 83 91 (fontified t) 91 98 (fontified t face font-lock-type-face) 98 104 (fontified t) 104 105 (fontified t) 105 106 (fontified t) 106 107 (fontified t) 107 110 (fontified t face font-lock-keyword-face) 110 111 (fontified t) 111 113 (fontified t face font-lock-keyword-face) 113 114 (fontified t) 114 123 (fontified t face font-lock-function-name-face) 123 124 (fontified t) 124 129 (fontified t face font-lock-variable-name-face) 129 131 (fontified t) 131 136 (fontified t face font-lock-type-face) 136 139 (fontified t) 139 140 (syntax-table #2# fontified t) 140 141 (fontified t) 141 145 (fontified t face font-lock-constant-face) 145 147 (fontified t) 147 154 (fontified t face font-lock-constant-face) 154 156 (fontified t) 156 167 (fontified t face font-lock-type-face) 167 169 (fontified t) 169 175 (fontified t face font-lock-type-face) 175 181 (fontified t) 181 185 (fontified t) 185 188 (fontified t face font-lock-keyword-face) 188 189 (fontified t) 189 206 (fontified t face font-lock-variable-name-face) 206 209 (fontified t) 209 213 (fontified t face font-lock-constant-face) 213 215 (fontified t) 215 221 (fontified t face font-lock-constant-face) 221 232 (fontified t) 232 238 (fontified t face font-lock-type-face) 238 240 (fontified t) 240 255 (fontified t face font-lock-string-face) 255 271 (fontified t) 271 275 (fontified t face font-lock-variable-name-face) 275 277 (fontified t) 277 283 (fontified t face font-lock-type-face) 283 296 (fontified t) 296 297 (syntax-table #1# fontified t face font-lock-string-face) 297 298 (fontified t face font-lock-string-face) 298 299 (syntax-table #1# fontified t face font-lock-string-face) 299 318 (fontified t) 318 327 (fontified t face font-lock-string-face) 327 348 (fontified t) 348 351 (fontified t face font-lock-keyword-face) 351 352 (fontified t) 352 368 (fontified t face font-lock-variable-name-face) 368 371 (fontified t) 371 375 (fontified t face font-lock-constant-face) 375 390 (fontified t) 390 391 (fontified t face font-lock-variable-name-face) 391 393 (fontified t) 393 398 (fontified t face font-lock-constant-face) 398 400 (fontified t) 400 404 (fontified t face font-lock-type-face) 404 485 (fontified t) 485 488 (fontified t face font-lock-keyword-face) 488 489 (fontified t) 489 491 (fontified t face font-lock-keyword-face) 491 492 (fontified t) 492 517 (fontified t face font-lock-function-name-face) 517 518 (fontified t) 518 523 (fontified t face font-lock-variable-name-face) 523 525 (fontified t) 525 531 (fontified t face font-lock-type-face) 531 534 (fontified t) 534 535 (syntax-table #2# fontified t) 535 536 (fontified t) 536 542 (fontified t face font-lock-type-face) 542 543 (fontified t) 543 550 (fontified t face font-lock-type-face) 550 552 (fontified t) 552 556 (fontified t face font-lock-constant-face) 556 558 (fontified t) 558 564 (fontified t face font-lock-constant-face) 564 566 (fontified t) 566 572 (fontified t face font-lock-type-face) 572 575 (fontified t face font-lock-type-face) 575 579 (fontified t) 579 583 (fontified t) 583 585 (fontified t face font-lock-keyword-face) 585 586 (fontified t) 586 589 (fontified t face font-lock-keyword-face) 589 590 (fontified t) 590 592 (fontified t face font-lock-type-face) 592 606 (fontified t) 606 631 (fontified t) 631 639 (fontified t) 639 641 (fontified t face font-lock-type-face) 641 660 (fontified t) 660 664 (fontified t face font-lock-keyword-face) 664 675 (fontified t) 675 678 (fontified t face font-lock-type-face) 678 679 (fontified t) 679 681 (fontified t face font-lock-constant-face) 681 683 (fontified t face font-lock-constant-face) 683 685 (fontified t) 685 691 (fontified t face font-lock-constant-face) 691 700 (fontified t) 700 729 (fontified t face font-lock-string-face) 729 732 (fontified t) 732 741 (fontified t) 741 743 (fontified t face font-lock-keyword-face) 743 744 (fontified t) 744 748 (fontified t face font-lock-function-name-face) 748 752 (fontified t) 752 753 (syntax-table #2# fontified t) 753 754 (fontified t) 754 762 (fontified t face font-lock-constant-face) 762 764 (fontified t) 764 774 (fontified t face font-lock-type-face) 774 777 (fontified t) 777 781 (fontified t) 781 789 (fontified t face font-lock-constant-face) 789 791 (fontified t) 791 801 (fontified t face font-lock-type-face) 801 811 (fontified t) 811 820 (fontified t) 820 869 (fontified t face font-lock-string-face) 869 879 (fontified t) 879 887 (fontified t face font-lock-constant-face) 887 889 (fontified t) 889 896 (fontified t face font-lock-type-face) 896 898 (fontified t) 898 902 (fontified t face font-lock-type-face) 902 927 (fontified t) 927 930 (fontified t face font-lock-keyword-face) 930 931 (fontified t) 931 937 (fontified t face font-lock-keyword-face) 937 938 (fontified t) 938 945 (fontified t face font-lock-type-face) 945 948 (fontified t) 948 952 (fontified t) 952 955 (fontified t face font-lock-keyword-face) 955 956 (fontified t) 956 958 (fontified t face font-lock-variable-name-face) 958 960 (fontified t) 960 966 (fontified t face font-lock-type-face) 966 967 (fontified t) 967 968 (fontified t) 968 972 (fontified t) 972 975 (fontified t face font-lock-keyword-face) 975 976 (fontified t) 976 981 (fontified t face font-lock-variable-name-face) 981 983 (fontified t) 983 986 (fontified t face font-lock-type-face) 986 987 (fontified t) 987 993 (fontified t face font-lock-type-face) 993 994 (fontified t) 994 996 (fontified t) 996 998 (fontified t) 998 999 (fontified t) 999 1002 (fontified t face font-lock-keyword-face) 1002 1003 (fontified t) 1003 1005 (fontified t face font-lock-keyword-face) 1005 1006 (fontified t) 1006 1020 (fontified t face font-lock-function-name-face) 1020 1021 (fontified t) 1021 1026 (fontified t face font-lock-variable-name-face) 1026 1028 (fontified t) 1028 1034 (fontified t face font-lock-type-face) 1034 1037 (fontified t) 1037 1038 (syntax-table #2# fontified t) 1038 1039 (fontified t) 1039 1045 (fontified t face font-lock-type-face) 1045 1046 (fontified t) 1046 1053 (fontified t face font-lock-type-face) 1053 1065 (fontified t) 1065 1068 (fontified t face font-lock-keyword-face) 1068 1069 (fontified t) 1069 1073 (fontified t face font-lock-variable-name-face) 1073 1088 (fontified t) 1088 1091 (fontified t face font-lock-keyword-face) 1091 1092 (fontified t) 1092 1095 (fontified t face font-lock-variable-name-face) 1095 1098 (fontified t face font-lock-variable-name-face) 1098 1107 (fontified t) 1107 1131 (fontified t) 1131 1135 (fontified t) 1135 1137 (face font-lock-string-face fontified t) 1137 1232 (face font-lock-string-face) 1232 1249 (face font-lock-string-face) 1249 1331 (face font-lock-string-face) 1331 1355 (face font-lock-string-face) 1355 1406 (face font-lock-string-face) 1457 1464 (face font-lock-string-face) 1464 1473 (face font-lock-string-face) 1473 1477 (face font-lock-string-face) 1477 1496 (face font-lock-string-face) 1496 1498 (face font-lock-string-face) 1498 1510 (face font-lock-string-face) 1517 1519 (face font-lock-keyword-face) 1549 1552 (face font-lock-keyword-face) 1553 1561 (face font-lock-variable-name-face) 1587 1590 (face font-lock-keyword-face) 1591 1593 (face font-lock-variable-name-face) 1595 1598 (face font-lock-type-face) 1626 1629 (face font-lock-keyword-face) 1630 1635 (face font-lock-variable-name-face) 1637 1638 (face font-lock-type-face) 1638 1640 (face font-lock-type-face) 1641 1647 (face font-lock-type-face) 1665 1666 (rear-nonsticky t) 1676 1678 (face font-lock-type-face) 1679 1686 (face font-lock-type-face) 1701 1703 (face font-lock-variable-name-face) 1757 1761 (face font-lock-keyword-face) 1772 1775 (face font-lock-type-face)) . 1) (undo-tree-id565 . -105) (undo-tree-id566 . -106) (undo-tree-id567 . -50) (undo-tree-id568 . -105) (undo-tree-id569 . 1652) (undo-tree-id570 . -1560) (undo-tree-id571 . -1687) (undo-tree-id572 . -996) (undo-tree-id573 . -1560) (undo-tree-id574 . -1560) (undo-tree-id575 . -1560) (undo-tree-id576 . -996) (undo-tree-id577 . -1560) (undo-tree-id578 . -1560) (undo-tree-id579 . -1560) (undo-tree-id580 . -996) (undo-tree-id581 . -652) (undo-tree-id582 . -652) (undo-tree-id583 . -482) (undo-tree-id584 . -652) (undo-tree-id585 . -1705) (undo-tree-id586 . -1705) (undo-tree-id587 . -996) (undo-tree-id588 . -1705) (undo-tree-id589 . -1705) (undo-tree-id590 . -1705) (undo-tree-id591 . -1705) (undo-tree-id592 . -960) (undo-tree-id593 . -1705) (undo-tree-id594 . -1600) (undo-tree-id595 . -1600) (undo-tree-id596 . -1600) (undo-tree-id597 . -998) (undo-tree-id598 . -1600) (undo-tree-id599 . -1600) (undo-tree-id600 . -998) (undo-tree-id601 . -1600) (undo-tree-id602 . -1600) (undo-tree-id603 . -1600) (undo-tree-id604 . -1638) (undo-tree-id605 . -1650) (undo-tree-id606 . -1705) (undo-tree-id607 . -1705) (undo-tree-id608 . -1705) (undo-tree-id609 . -1355) (undo-tree-id610 . -1705) (undo-tree-id611 . -1439) (undo-tree-id612 . -1457) (undo-tree-id613 . -871) (undo-tree-id614 . -1705) (undo-tree-id615 . -1439) (undo-tree-id616 . -1439) (undo-tree-id617 . -1439) (undo-tree-id618 . -675) (undo-tree-id619 . -675) (undo-tree-id620 . -675) (undo-tree-id621 . -675) (undo-tree-id622 . -32) (undo-tree-id623 . -675) (undo-tree-id624 . -675) (undo-tree-id625 . -32) (undo-tree-id626 . -675) (undo-tree-id627 . -675) (undo-tree-id628 . -32) (undo-tree-id629 . -675) (undo-tree-id630 . -675) (undo-tree-id631 . -675) (undo-tree-id632 . -675) (undo-tree-id633 . -675) (undo-tree-id634 . -675) (undo-tree-id635 . -675) (undo-tree-id636 . -32) (undo-tree-id637 . -675) (undo-tree-id638 . -675) (undo-tree-id639 . -32) (undo-tree-id640 . -675) (undo-tree-id641 . -675) (undo-tree-id642 . -675) (undo-tree-id643 . -609) (undo-tree-id644 . -609) (undo-tree-id645 . -1675) (undo-tree-id646 . -1625) (undo-tree-id647 . -741) (undo-tree-id648 . -609) (undo-tree-id649 . -1675) (undo-tree-id650 . 644) (undo-tree-id651 . -1149) (undo-tree-id652 . -106) (undo-tree-id653 . -133) (undo-tree-id654 . -1675) (undo-tree-id655 . -106) (undo-tree-id656 . -106) (undo-tree-id657 . -107) (undo-tree-id658 . -106) (undo-tree-id659 . -106) (undo-tree-id660 . -106) (undo-tree-id661 . -106) (undo-tree-id662 . -106) (undo-tree-id663 . -106) (undo-tree-id664 . -106) (undo-tree-id665 . -54) (undo-tree-id666 . -54) (undo-tree-id667 . -32) (undo-tree-id668 . -107) (undo-tree-id669 . -110) (undo-tree-id670 . -107) (undo-tree-id671 . -110) (undo-tree-id672 . -107) (undo-tree-id673 . -110) (undo-tree-id674 . -107) (undo-tree-id675 . -178) (undo-tree-id676 . -107) (undo-tree-id677 . -178) (undo-tree-id678 . -107) (undo-tree-id679 . -178) 55) nil (23738 8325 23172 736000) 0 nil]) ((nil rear-nonsticky nil 54 . 55) (#("
" 0 1 (fontified nil)) . -106) (50 . 107) 33 (t 23738 8304 799140 780000)) nil (23738 8325 23209 751000) 0 nil]) ((#(":" 0 1 (fontified t)) . -81) (undo-tree-id555 . -1) (#(":" 0 1 (fontified t)) . -82) (undo-tree-id556 . -1) (#("P" 0 1 (fontified t face font-lock-type-face)) . -83) (undo-tree-id557 . -1) (#("u" 0 1 (fontified t face font-lock-type-face)) . -84) (undo-tree-id558 . -1) (#("b" 0 1 (fontified t face font-lock-type-face)) . -85) (undo-tree-id559 . -1) (#("l" 0 1 (fontified t face font-lock-type-face)) . -86) (undo-tree-id560 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -87) (undo-tree-id561 . -1) (#("c" 0 1 (fontified t face font-lock-type-face)) . -88) (undo-tree-id562 . -1) 89 (82 . 89) (74 . 82) (#(" " 0 1 (fontified t)) . -74) (undo-tree-id563 . -1) (#(":" 0 1 (fontified t)) . -75) (undo-tree-id564 . -1) 76 (69 . 76) (t 23738 5867 840056 86000)) nil (23738 8304 792856 392000) 0 nil]) ((#(":" 0 1 (fontified t)) . -1671) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (#(" " 0 1 (fontified t)) . -1672) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (#("l" 0 1 (fontified t)) . -1673) (undo-tree-id548 . -1) (undo-tree-id549 . -1) 1674 (1673 . 1674)) nil (23738 5867 827982 33000) 0 nil]) ((926 . 927) (#(">" 0 1 (fontified t)) . -920) (919 . 921) (#("<" 0 1 (fontified nil face font-lock-type-face)) . -919) (916 . 920)) nil (23738 5867 827992 274000) 0 nil]) ((1594 . 1595)) nil (23738 5867 827994 962000) 0 nil]) ((1578 . 1579) (#(" " 0 1 (fontified nil)) . 1578) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (#("
" 0 1 (fontified t)) . -1579) (undo-tree-id552 . -1) (undo-tree-id553 . -1) 1560) nil (23738 5867 828002 269000) 0 nil]) ((nil rear-nonsticky nil 1594 . 1595) (nil fontified nil 1580 . 1595) (1580 . 1595)) nil (23738 5867 828005 885000) 0 nil]) ((#("            " 0 12 (fontified t)) . -1580) (undo-tree-id554 . -12) 1592 (1579 . 1592) 1565) nil (23738 5867 828009 617000) 0 nil] [nil nil ((nil rear-nonsticky nil 1580 . 1581) (nil fontified nil 1566 . 1581) (1566 . 1581) 1565) ((#("only_row.get(2)" 0 8 (fontified nil face font-lock-type-face) 8 14 (fontified nil) 14 15 (fontified nil rear-nonsticky nil)) . 1566) (undo-tree-id519 . -14) (undo-tree-id520 . -14) (undo-tree-id521 . -14) (undo-tree-id522 . -14) (undo-tree-id523 . -14) (undo-tree-id524 . -14) (undo-tree-id525 . -14) (undo-tree-id526 . -14) (undo-tree-id527 . -14) (undo-tree-id528 . -12) (undo-tree-id529 . -13) (undo-tree-id530 . 3) (undo-tree-id531 . -13) (undo-tree-id532 . 2) (undo-tree-id533 . -14) (undo-tree-id534 . 1) (undo-tree-id535 . -15) (nil rear-nonsticky t 1580 . 1581)) (23738 5845 834740 181000) 0 nil]) ((#("only_row.get(2)" 0 15 (fontified t)) . 1652)) nil (23738 5845 838299 601000) 0 nil]) ((1576 . 1579) (#(">" 0 1 (fontified nil syntax-table #2#)) . 1576) (1569 . 1576) (1568 . 1570) (#("<" 0 1 (fontified nil face font-lock-type-face)) . -1568) (1565 . 1569) (1554 . 1565) (1545 . 1554) (t 23738 5416 92116 754000) 1528) nil (23738 5845 834748 558000) 0 nil]) ((1597 . 1598) (#(")" 0 1 (fontified nil)) . 1597) (1596 . 1597) (1595 . 1597) (#("(" 0 1 (fontified nil)) . -1595) (1583 . 1596) (#("only_row.get(1)," 0 9 (fontified t) 9 12 (fontified t) 12 15 (fontified t) 15 16 (fontified t)) . 1583) (undo-tree-id505 . -2) (undo-tree-id506 . -2) (undo-tree-id507 . -2) (undo-tree-id508 . -2) (undo-tree-id509 . -2) (undo-tree-id510 . -2) (undo-tree-id511 . -2) (undo-tree-id512 . -2) (undo-tree-id513 . -2) (undo-tree-id514 . -2) (undo-tree-id515 . -2) (undo-tree-id516 . -2) (undo-tree-id517 . -8)) nil (23738 5416 77919 620000) 0 nil]) ((1521 . 1526)) nil (23738 5416 77926 458000) 0 nil]) ((1539 . 1540) (#(")" 0 1 (fontified nil)) . 1539) (1537 . 1539) (1536 . 1538) (#("(" 0 1 (fontified nil)) . -1536) (1536 . 1537) (1519 . 1536) (1515 . 1519) (#("i" 0 1 (fontified t)) . -1515) (undo-tree-id518 . -1) 1516 (1515 . 1516) (1506 . 1515) (t 23738 3517 769565 758000) 1500) nil (23738 5416 77934 746000) 0 nil] [nil nil ((1569 . 1571) (#("(" 0 1 (fontified nil)) . 1569) (1559 . 1570) (t 23738 3517 769565 758000)) ((#(".to_string(" 0 10 (fontified nil) 10 11 (fontified nil)) . 1559) (undo-tree-id487 . -10) (undo-tree-id488 . -10) (undo-tree-id489 . -10) (undo-tree-id490 . -10) (undo-tree-id491 . -10) (undo-tree-id492 . 1) (undo-tree-id493 . -10) (undo-tree-id494 . 1) (undo-tree-id495 . -10) (undo-tree-id496 . 1) (undo-tree-id497 . -10) (1569 . 1570) (#("()" 0 1 (fontified t) 1 2 (fontified t)) . 1569) (undo-tree-id498 . 1) (undo-tree-id499 . 2) (undo-tree-id500 . -1) (undo-tree-id501 . 1) (undo-tree-id502 . -1) (undo-tree-id503 . 1) (undo-tree-id504 . -2)) (23738 5380 70206 414000) 0 nil] [nil nil ((1561 . 1562) (#("5" 0 1 (fontified t)) . -1561) (undo-tree-id447 . -1) 1562 (1559 . 1562) (1558 . 1560) (#("<" 0 1 (fontified nil)) . -1558) (1556 . 1559) (t 23738 3517 769565 758000)) ((#("::<" 0 2 (fontified nil) 2 3 (fontified nil)) . 1556) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) (undo-tree-id457 . -1) (undo-tree-id458 . -2) (undo-tree-id459 . -1) (undo-tree-id460 . -2) (undo-tree-id461 . -2) (undo-tree-id462 . -1) (undo-tree-id463 . -2) (undo-tree-id464 . -2) (undo-tree-id465 . -1) (undo-tree-id466 . -2) (undo-tree-id467 . -2) (undo-tree-id468 . -2) (undo-tree-id469 . -1) (undo-tree-id470 . 1) (undo-tree-id471 . -2) (undo-tree-id472 . 1) (undo-tree-id473 . -2) (undo-tree-id474 . 1) (undo-tree-id475 . -2) (1558 . 1559) (#("<>" 0 1 (fontified nil) 1 2 (fontified nil)) . 1558) (undo-tree-id476 . 1) (undo-tree-id477 . 2) (undo-tree-id478 . -1) (undo-tree-id479 . 1) (undo-tree-id480 . -1) (undo-tree-id481 . 1) (undo-tree-id482 . -2) (#("i65" 0 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil)) . 1559) (undo-tree-id483 . 3) (undo-tree-id484 . -2) (1561 . 1562) (#("4" 0 1 (fontified t face font-lock-type-face)) . 1561) (undo-tree-id485 . -1)) (23738 5347 958023 385000) 0 nil]) ((893 . 900) (#("i64," 0 3 (fontified t face font-lock-type-face) 3 4 (fontified t)) . 893)) ((893 . 897) (#("String," 0 6 (fontified t face font-lock-type-face) 6 7 (fontified t)) . 893) (t 23738 3517 769565 758000)) (23738 5381 894473 382000) 0 nil] [nil nil ((#("pub id: i64," 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 6 (fontified t face font-lock-variable-name-face) 6 8 (fontified t) 8 11 (fontified t face font-lock-type-face) 11 12 (fontified t)) . 885) (undo-tree-id378 . -3) (undo-tree-id379 . -3) (undo-tree-id380 . -3) (undo-tree-id381 . -3) (undo-tree-id382 . -3) (undo-tree-id383 . -3) (undo-tree-id384 . -3) (undo-tree-id385 . -4) (undo-tree-id386 . -3) (undo-tree-id387 . -4) (undo-tree-id388 . -4) (undo-tree-id389 . -3) (undo-tree-id390 . -4) (undo-tree-id391 . -4) (undo-tree-id392 . -3) (undo-tree-id393 . -4) (undo-tree-id394 . -3) (undo-tree-id395 . -4) (undo-tree-id396 . -3) (undo-tree-id397 . -5) (undo-tree-id398 . -4) (undo-tree-id399 . -5) (undo-tree-id400 . -5) (undo-tree-id401 . -4) (undo-tree-id402 . -5) (undo-tree-id403 . -5) (undo-tree-id404 . -4) (undo-tree-id405 . -5) (undo-tree-id406 . -4) (undo-tree-id407 . -5) (undo-tree-id408 . -4) (undo-tree-id409 . -6) (undo-tree-id410 . -5) (undo-tree-id411 . -6) (undo-tree-id412 . -6) (undo-tree-id413 . -5) (undo-tree-id414 . -6) (undo-tree-id415 . -6) (undo-tree-id416 . -5) (undo-tree-id417 . -6) (undo-tree-id418 . -5) (undo-tree-id419 . -6) (undo-tree-id420 . -5) (undo-tree-id421 . -7) (undo-tree-id422 . -6) (undo-tree-id423 . -7) (undo-tree-id424 . -7) (undo-tree-id425 . -6) (undo-tree-id426 . -7) (undo-tree-id427 . -7) (undo-tree-id428 . -6) (undo-tree-id429 . -7) (undo-tree-id430 . -6) (undo-tree-id431 . -7) (undo-tree-id432 . -6) (undo-tree-id433 . -8) (undo-tree-id434 . -7) (undo-tree-id435 . -8) (undo-tree-id436 . -8) (undo-tree-id437 . -7) (undo-tree-id438 . -8) (undo-tree-id439 . -8) (undo-tree-id440 . -7) (undo-tree-id441 . -8) (undo-tree-id442 . -8) (undo-tree-id443 . -8) (undo-tree-id444 . -7) (undo-tree-id445 . -8) (undo-tree-id446 . -7) 893) ((885 . 897)) (23738 3507 424009 791000) 0 nil]) ((902 . 906)) nil (23738 5375 751608 847000) 0 nil]) (905) nil (23738 3507 424059 318000) 0 nil]) ((885 . 889) (t 23738 3462 389973 332000)) nil (23738 3507 424065 263000) 0 nil]) (892) nil (23738 3507 424070 50000) 0 nil]) ((479 . 483) (476 . 479) (#("i64" 0 3 (fontified t face font-lock-type-face)) . 476)) nil (23738 3462 378580 125000) 0 nil]) ((858 . 860) (856 . 858) (t 23738 3295 244554 950000)) nil (23738 3462 378595 905000) 0 nil]) ((1 . 1626) (#("use super::query;
use postgres;
use warp::Filter;

pub fn get_token() -> warp::filters::BoxedFilter<(String,)> {
    let token_from_header = warp::header::header::<String>(\"authorization\")
        .map(|auth: String| auth.split(' ').nth(1).unwrap_or(\"invalid\").to_string());

    let token_from_query = warp::query().map(|q: query::Auth| q.access_token);
    token_from_query.or(token_from_header).unify().boxed()
}

pub fn get_account_id_from_token(token: String) -> Result<i64, warp::reject::Rejection> {
    if let Ok(account_id) = get_account_id(token) {
        Ok(account_id)
    } else {
        Err(warp::reject::custom(\"Error: Invalid access token\"))
    }
}

fn conn() -> postgres::Connection {
    postgres::Connection::connect(
        \"postgres://dsock@localhost/mastodon_development\",
        postgres::TlsMode::None,
    )
    .unwrap()
} 

struct Account {
    id: i64,
    langs: String,
}

pub fn get_account_id(token: String) -> Result<Account, ()> {
    let conn = conn();
    let result = &conn
        .query(
            \"
SELECT oauth_access_tokens.resource_owner_id, users.account_id, users.chosen_languages
FROM
oauth_access_tokens
INNER JOIN users ON
oauth_access_tokens.resource_owner_id = users.id
WHERE oauth_access_tokens.token = $1
AND oauth_access_tokens.revoked_at IS NULL
LIMIT 1\",
            &[&token],
        )
        .expect(\"Hard-coded query will return Some([0 or more rows])\");
    if !result.is_empty() {
        let only_row = result.get(0);
        Ok(Account { id: only_row.get(1), langs: only_row.get(2) })
    } else {
        Err(())
    }
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-keyword-face) 9 18 (fontified t) 18 21 (fontified t face font-lock-keyword-face) 21 22 (fontified t) 22 30 (fontified t face font-lock-constant-face) 30 32 (fontified t) 32 35 (fontified t face font-lock-keyword-face) 35 36 (fontified t) 36 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 48 (fontified t face font-lock-type-face) 48 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 57 (fontified t face font-lock-keyword-face) 57 58 (fontified t) 58 67 (fontified t face font-lock-function-name-face) 67 71 (fontified t) 71 72 (fontified t syntax-table #2#) 72 73 (fontified t) 73 77 (fontified t face font-lock-constant-face) 77 79 (fontified t) 79 86 (fontified t face font-lock-constant-face) 86 88 (fontified t) 88 99 (fontified t face font-lock-type-face) 99 101 (fontified t) 101 107 (fontified t face font-lock-type-face) 107 117 (fontified t) 117 120 (fontified t face font-lock-keyword-face) 120 121 (fontified t) 121 138 (fontified t face font-lock-variable-name-face) 138 141 (fontified t) 141 145 (fontified t face font-lock-constant-face) 145 147 (fontified t) 147 153 (fontified t face font-lock-constant-face) 153 164 (fontified t) 164 170 (fontified t face font-lock-type-face) 170 172 (fontified t) 172 187 (fontified t face font-lock-string-face) 187 203 (fontified t) 203 207 (fontified t face font-lock-variable-name-face) 207 209 (fontified t) 209 215 (fontified t face font-lock-type-face) 215 228 (fontified t) 228 229 (fontified t syntax-table #1# face font-lock-string-face) 229 230 (fontified t face font-lock-string-face) 230 231 (fontified t syntax-table #1# face font-lock-string-face) 231 250 (fontified t) 250 259 (fontified t face font-lock-string-face) 259 280 (fontified t) 280 283 (fontified t face font-lock-keyword-face) 283 284 (fontified t) 284 300 (fontified t face font-lock-variable-name-face) 300 303 (fontified t) 303 307 (fontified t face font-lock-constant-face) 307 322 (fontified t) 322 323 (fontified t face font-lock-variable-name-face) 323 325 (fontified t) 325 330 (fontified t face font-lock-constant-face) 330 332 (fontified t) 332 336 (fontified t face font-lock-type-face) 336 417 (fontified t) 417 420 (fontified t face font-lock-keyword-face) 420 421 (fontified t) 421 423 (fontified t face font-lock-keyword-face) 423 424 (fontified t) 424 449 (fontified t face font-lock-function-name-face) 449 450 (fontified t) 450 455 (fontified t face font-lock-variable-name-face) 455 457 (fontified t) 457 463 (fontified t face font-lock-type-face) 463 466 (fontified t) 466 467 (fontified t syntax-table #2#) 467 468 (fontified t) 468 474 (fontified t face font-lock-type-face) 474 475 (fontified t) 475 478 (fontified t face font-lock-type-face) 478 480 (fontified t) 480 484 (fontified t face font-lock-constant-face) 484 486 (fontified t) 486 492 (fontified t face font-lock-constant-face) 492 494 (fontified t) 494 500 (fontified t face font-lock-type-face) 500 503 (fontified t face font-lock-type-face) 503 507 (fontified t) 507 511 (fontified t) 511 513 (fontified t face font-lock-keyword-face) 513 514 (fontified t) 514 517 (fontified t face font-lock-keyword-face) 517 518 (fontified t) 518 520 (fontified t face font-lock-type-face) 520 567 (fontified t) 567 569 (fontified t face font-lock-type-face) 569 588 (fontified t) 588 592 (fontified t face font-lock-keyword-face) 592 603 (fontified t) 603 606 (fontified t face font-lock-type-face) 606 607 (fontified t) 607 611 (fontified t face font-lock-constant-face) 611 613 (fontified t) 613 619 (fontified t face font-lock-constant-face) 619 628 (fontified t) 628 657 (fontified t face font-lock-string-face) 657 669 (fontified t) 669 671 (fontified t face font-lock-keyword-face) 671 672 (fontified t) 672 676 (fontified t face font-lock-function-name-face) 676 680 (fontified t) 680 681 (fontified t syntax-table #2#) 681 682 (fontified t) 682 690 (fontified t face font-lock-constant-face) 690 692 (fontified t) 692 702 (fontified t face font-lock-type-face) 702 709 (fontified t) 709 717 (fontified t face font-lock-constant-face) 717 719 (fontified t) 719 729 (fontified t face font-lock-type-face) 729 748 (fontified t) 748 797 (fontified t face font-lock-string-face) 797 807 (fontified t) 807 815 (fontified t face font-lock-constant-face) 815 817 (fontified t) 817 824 (fontified t face font-lock-type-face) 824 826 (fontified t) 826 830 (fontified t face font-lock-type-face) 830 852 (fontified t) 852 853 (fontified t) 853 854 (fontified t rear-nonsticky t) 854 855 (fontified t) 855 856 (fontified t) 856 862 (fontified t face font-lock-keyword-face) 862 863 (fontified t) 863 870 (fontified t face font-lock-type-face) 870 871 (fontified t) 871 872 (fontified t) 872 873 (fontified t) 873 877 (fontified t) 877 879 (fontified t face font-lock-variable-name-face) 879 881 (fontified t) 881 884 (fontified t face font-lock-type-face) 884 886 (fontified t) 886 890 (fontified t) 890 895 (fontified t face font-lock-variable-name-face) 895 897 (fontified t) 897 903 (fontified t face font-lock-type-face) 903 904 (fontified t) 904 905 (fontified t) 905 906 (fontified t) 906 907 (fontified t) 907 908 (fontified t) 908 911 (fontified t face font-lock-keyword-face) 911 912 (fontified t) 912 914 (fontified t face font-lock-keyword-face) 914 915 (fontified t) 915 929 (fontified t face font-lock-function-name-face) 929 930 (fontified t) 930 935 (fontified t face font-lock-variable-name-face) 935 937 (fontified t) 937 943 (fontified t face font-lock-type-face) 943 946 (fontified t) 946 947 (fontified t syntax-table #2#) 947 948 (fontified t) 948 954 (fontified t face font-lock-type-face) 954 955 (fontified t) 955 962 (fontified t face font-lock-type-face) 962 967 (fontified t) 967 970 (fontified t) 970 974 (fontified t) 974 977 (fontified t face font-lock-keyword-face) 977 978 (fontified t) 978 982 (fontified t face font-lock-variable-name-face) 982 997 (fontified t) 997 1000 (fontified t face font-lock-keyword-face) 1000 1001 (fontified t) 1001 1007 (fontified t face font-lock-variable-name-face) 1007 1044 (fontified t) 1044 1064 (fontified t face font-lock-string-face) 1064 1133 (fontified t face font-lock-string-face) 1133 1315 (fontified t face font-lock-string-face) 1315 1366 (fontified t) 1366 1369 (fontified t face font-lock-string-face) 1369 1409 (fontified t face font-lock-string-face) 1409 1411 (fontified t face font-lock-string-face) 1411 1419 (fontified t face font-lock-string-face) 1419 1422 (fontified t) 1422 1426 (fontified t) 1426 1428 (fontified t face font-lock-keyword-face) 1428 1458 (fontified t) 1458 1461 (fontified t face font-lock-keyword-face) 1461 1462 (fontified t) 1462 1470 (fontified t face font-lock-variable-name-face) 1470 1488 (fontified t) 1488 1496 (fontified t) 1496 1498 (fontified t face font-lock-type-face) 1498 1499 (fontified t) 1499 1506 (fontified t face font-lock-type-face) 1506 1507 (fontified t) 1507 1509 (fontified t) 1509 1511 (fontified t face font-lock-variable-name-face) 1511 1525 (fontified t) 1525 1527 (fontified t) 1527 1528 (fontified t) 1528 1530 (fontified t) 1530 1535 (fontified t face font-lock-variable-name-face) 1535 1549 (fontified t) 1549 1551 (fontified t) 1551 1552 (fontified t) 1552 1553 (fontified t) 1553 1554 (fontified t) 1554 1556 (fontified t) 1556 1562 (fontified t) 1562 1566 (fontified t face font-lock-keyword-face) 1566 1577 (fontified t) 1577 1580 (fontified t face font-lock-type-face) 1580 1593 (fontified t)) . 1) (undo-tree-id154 . -926) (undo-tree-id155 . -925) (undo-tree-id156 . -705) (undo-tree-id157 . -1488) (undo-tree-id158 . -926) (undo-tree-id159 . -926) (undo-tree-id160 . -705) (undo-tree-id161 . -926) (undo-tree-id162 . -926) (undo-tree-id163 . -853) (undo-tree-id164 . -1488) (undo-tree-id165 . -1488) (undo-tree-id166 . 42) (undo-tree-id167 . -1488) (undo-tree-id168 . -1488) (undo-tree-id169 . -1488) (undo-tree-id170 . -1503) (undo-tree-id171 . -1503) (undo-tree-id172 . -705) (undo-tree-id173 . -1504) (undo-tree-id174 . -1503) (undo-tree-id175 . -705) (undo-tree-id176 . -1504) (undo-tree-id177 . -1551) (undo-tree-id178 . -1550) (undo-tree-id179 . -705) (undo-tree-id180 . -1550) (undo-tree-id181 . -1550) (undo-tree-id182 . -705) (undo-tree-id183 . -1486) (undo-tree-id184 . -1550) (undo-tree-id185 . -705) (undo-tree-id186 . -1485) (undo-tree-id187 . -1486) (undo-tree-id188 . -1485) (undo-tree-id189 . -1486) (undo-tree-id190 . -1485) (undo-tree-id191 . -1486) (undo-tree-id192 . -1485) (undo-tree-id193 . -1486) (undo-tree-id194 . -1418) (undo-tree-id195 . -1419) (undo-tree-id196 . -1418) (undo-tree-id197 . -1419) (undo-tree-id198 . -1485) (undo-tree-id199 . -1486) (undo-tree-id200 . -1485) (undo-tree-id201 . -1486) (undo-tree-id202 . -1483) (undo-tree-id203 . -1484) (undo-tree-id204 . -1550) (undo-tree-id205 . -1486) (undo-tree-id206 . -705) (undo-tree-id207 . -1549) (undo-tree-id208 . -1550) (undo-tree-id209 . -705) (undo-tree-id210 . -1549) (undo-tree-id211 . -1549) (undo-tree-id212 . -705) (undo-tree-id213 . -1549) (undo-tree-id214 . -1549) (undo-tree-id215 . -705) (undo-tree-id216 . -1549) (undo-tree-id217 . -1549) (undo-tree-id218 . -705) (undo-tree-id219 . -1548) (undo-tree-id220 . -1549) (undo-tree-id221 . -705) (undo-tree-id222 . -1548) (undo-tree-id223 . -1548) (undo-tree-id224 . -1549) (undo-tree-id225 . -705) (undo-tree-id226 . -1548) (undo-tree-id227 . -1548) (undo-tree-id228 . -1549) (undo-tree-id229 . -705) (undo-tree-id230 . -1548) (undo-tree-id231 . -1549) (undo-tree-id232 . -705) (undo-tree-id233 . -1547) (undo-tree-id234 . -1548) (undo-tree-id235 . -705) (undo-tree-id236 . -1546) (undo-tree-id237 . -1547) (undo-tree-id238 . -705) (undo-tree-id239 . -1545) (undo-tree-id240 . -1546) (undo-tree-id241 . -705) (undo-tree-id242 . -1544) (undo-tree-id243 . -1545) (undo-tree-id244 . -705) (undo-tree-id245 . -1543) (undo-tree-id246 . -1544) (undo-tree-id247 . -705) (undo-tree-id248 . -1542) (undo-tree-id249 . -1543) (undo-tree-id250 . -705) (undo-tree-id251 . -1541) (undo-tree-id252 . -1542) (undo-tree-id253 . -705) (undo-tree-id254 . -1540) (undo-tree-id255 . -1541) (undo-tree-id256 . -705) (undo-tree-id257 . -1539) (undo-tree-id258 . -1540) (undo-tree-id259 . -705) (undo-tree-id260 . -1538) (undo-tree-id261 . -1539) (undo-tree-id262 . -705) (undo-tree-id263 . -1537) (undo-tree-id264 . -1538) (undo-tree-id265 . -705) (undo-tree-id266 . -1536) (undo-tree-id267 . -1537) (undo-tree-id268 . -705) (undo-tree-id269 . -1535) (undo-tree-id270 . -1536) (undo-tree-id271 . -705) (undo-tree-id272 . -1534) (undo-tree-id273 . -1535) (undo-tree-id274 . -705) (undo-tree-id275 . -1533) (undo-tree-id276 . -1534) (undo-tree-id277 . -705) (undo-tree-id278 . -1532) (undo-tree-id279 . -1533) (undo-tree-id280 . -705) (undo-tree-id281 . -1531) (undo-tree-id282 . -1532) (undo-tree-id283 . -705) (undo-tree-id284 . -1530) (undo-tree-id285 . -1531) (undo-tree-id286 . -705) (undo-tree-id287 . -1529) (undo-tree-id288 . -1530) (undo-tree-id289 . -705) (undo-tree-id290 . -1529) (undo-tree-id291 . -1529) (undo-tree-id292 . -705) (undo-tree-id293 . -1529) (undo-tree-id294 . -1529) (undo-tree-id295 . -705) (undo-tree-id296 . -1529) (undo-tree-id297 . -1529) (undo-tree-id298 . -705) (undo-tree-id299 . -1529) (undo-tree-id300 . -1529) (undo-tree-id301 . -705) (undo-tree-id302 . -1529) (undo-tree-id303 . -1529) (undo-tree-id304 . -1529) (undo-tree-id305 . -705) (undo-tree-id306 . -1529) (undo-tree-id307 . -1529) (undo-tree-id308 . -1529) (undo-tree-id309 . -705) (undo-tree-id310 . -705) (undo-tree-id311 . -1529) (undo-tree-id312 . -1527) (undo-tree-id313 . -1529) (undo-tree-id314 . -1529) (undo-tree-id315 . -705) (undo-tree-id316 . -1528) (undo-tree-id317 . -1529) (undo-tree-id318 . -705) (undo-tree-id319 . -1527) (undo-tree-id320 . -1528) (undo-tree-id321 . -1527) (undo-tree-id322 . -1528) (undo-tree-id323 . -1527) (undo-tree-id324 . -1528) (undo-tree-id325 . -1527) (undo-tree-id326 . -1528) (undo-tree-id327 . -1418) (undo-tree-id328 . -1419) (undo-tree-id329 . -1418) (undo-tree-id330 . -1419) (undo-tree-id331 . -1527) (undo-tree-id332 . -1528) (undo-tree-id333 . -1527) (undo-tree-id334 . -1528) (undo-tree-id335 . -1525) (undo-tree-id336 . -1526) (undo-tree-id337 . -570) (undo-tree-id338 . -580) (undo-tree-id339 . -570) (undo-tree-id340 . -580) (undo-tree-id341 . -1527) (undo-tree-id342 . -1528) (undo-tree-id343 . -705) (undo-tree-id344 . -1525) (undo-tree-id345 . -1526) (undo-tree-id346 . -1525) (undo-tree-id347 . -1526) (undo-tree-id348 . 68) (undo-tree-id349 . -1526) (undo-tree-id350 . 67) (undo-tree-id351 . -1527) (undo-tree-id352 . 66) (undo-tree-id353 . -1528) 1528) nil (23738 3295 169883 598000) 0 nil]) ((#("," 0 1 (fontified t)) . 1530) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1)) nil (23738 3295 169909 998000) 0 nil]) ((1552 . 1553) (1551 . 1553) (#("(" 0 1 (fontified nil)) . -1551) (1543 . 1552) (#("+" 0 1 (fontified t)) . -1543) (undo-tree-id358 . -1) 1544 (1543 . 1544) (#("." 0 1 (fontified t)) . -1543) (undo-tree-id359 . -1) (#("r" 0 1 (fontified t)) . -1544) (undo-tree-id360 . -1) (#("o" 0 1 (fontified t)) . -1545) (undo-tree-id361 . -1) (#("w" 0 1 (fontified t)) . -1546) (undo-tree-id362 . -1) 1547 (1538 . 1547) (1530 . 1538)) nil (23738 3295 169924 182000) 0 nil]) ((#("        let id: i64 = only_row.get(1);
" 0 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 14 (fontified t face font-lock-variable-name-face) 14 16 (fontified t) 16 19 (fontified t face font-lock-type-face) 19 38 (fontified t) 38 39 (fontified t)) . 1489) (undo-tree-id363 . -38) (undo-tree-id364 . -38) (undo-tree-id365 . -38) (undo-tree-id366 . -37) (undo-tree-id367 . -37) (undo-tree-id368 . 5) (undo-tree-id369 . -35) (undo-tree-id370 . 4) (undo-tree-id371 . -36) (undo-tree-id372 . 3) (undo-tree-id373 . -37) (undo-tree-id374 . -34) (undo-tree-id375 . -35) 1526) nil (23738 3295 169942 413000) 0 nil]) ((1566 . 1567) (1565 . 1567) (#("(" 0 1 (fontified nil)) . -1565) (1562 . 1566) (#("e" 0 1 (fontified t)) . -1562) (undo-tree-id376 . -1) (#("t" 0 1 (fontified t)) . -1563) (undo-tree-id377 . -1) 1564 (1551 . 1564)) nil (23738 3295 169950 647000) 0 nil] [nil nil ((nil rear-nonsticky nil 1535 . 1536) (#("
" 0 1 (fontified nil)) . -1566) (1527 . 1567) 1513) ((#("
        let id: i64 = only_row.get(1);
" 0 1 (fontified t) 1 8 (fontified nil) 8 9 (fontified nil rear-nonsticky nil) 9 12 (fontified nil face font-lock-keyword-face) 12 13 (fontified nil) 13 15 (fontified nil face font-lock-variable-name-face) 15 17 (fontified nil) 17 20 (fontified nil face font-lock-type-face) 20 39 (fontified nil) 39 40 (fontified nil)) . 1527) (undo-tree-id147 . -39) (undo-tree-id148 . -1) (undo-tree-id149 . -39) (undo-tree-id150 . -10) (undo-tree-id151 . -9) (undo-tree-id152 . -10) (undo-tree-id153 . -9) (1566 . 1567) (nil rear-nonsticky t 1535 . 1536)) (23738 3255 298100 360000) 0 nil]) ((1550 . 1553) (1549 . 1550) (#("I" 0 1 (fontified t face font-lock-type-face)) . -1549) (undo-tree-id139 . -1) 1550 (1548 . 1550) (1547 . 1549) (#("{" 0 1 (fontified nil)) . -1547) (1546 . 1548)) nil (23738 3255 306669 397000) 0 nil]) ((#("Info" 0 4 (fontified t face font-lock-type-face)) . 963) (undo-tree-id140 . -4) (undo-tree-id141 . -4)) nil (23738 3255 298160 38000) 0 nil]) ((#("Info" 0 4 (fontified t face font-lock-type-face)) . 871)) nil (23738 3255 298166 457000) 0 nil]) ((1547 . 1554) (#("a" 0 1 (fontified t)) . -1547) (undo-tree-id142 . -1) (#("c" 0 1 (fontified t)) . -1548) (undo-tree-id143 . -1) (#("c" 0 1 (fontified t)) . -1549) (undo-tree-id144 . -1) 1550 (1547 . 1550) (#("account_id" 0 10 (fontified t)) . 1547)) nil (23738 3255 298187 530000) 0 nil]) ((#("account_" 0 8 (fontified t face font-lock-variable-name-face)) . 1509)) nil (23738 3255 298195 686000) 0 nil]) ((960 . 971) (#("Acc" 0 3 (fontified t face font-lock-type-face)) . -960) (undo-tree-id145 . -3) (undo-tree-id146 . -3) 963 (960 . 963) (#("i64" 0 3 (fontified t face font-lock-type-face)) . 960)) nil (23738 3255 298211 20000) 0 nil] [nil ([nil nil ((#("c" 0 1 (fontified t face font-lock-type-face)) . -955) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (undo-tree-id3 . -1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) (undo-tree-id6 . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) (undo-tree-id9 . -1) (undo-tree-id10 . -1) (undo-tree-id11 . -1) (undo-tree-id12 . -1) (undo-tree-id13 . -1) (undo-tree-id14 . -1) (undo-tree-id15 . -1) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (undo-tree-id22 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -956) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) (undo-tree-id31 . -1) (undo-tree-id32 . -1) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (undo-tree-id41 . -1) (#("u" 0 1 (fontified t face font-lock-type-face)) . -957) (undo-tree-id42 . -1) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (undo-tree-id55 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -958) (undo-tree-id56 . -1) (undo-tree-id57 . -1) (undo-tree-id58 . -1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) (undo-tree-id62 . -1) (undo-tree-id63 . -1) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -959) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (undo-tree-id71 . -1) 960 (957 . 960) (953 . 957) (#("<i64, ()>" 0 1 (fontified t) 1 4 (fontified t face font-lock-type-face) 4 9 (fontified t)) . 953) (undo-tree-id72 . 9) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . -4) (undo-tree-id79 . -4) (undo-tree-id80 . -5) (undo-tree-id81 . -1) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (undo-tree-id84 . -1) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1)) ((953 . 962) (#("Acco" 0 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face) 3 4 (fontified nil face font-lock-type-face)) . 953) (undo-tree-id98 . -1) (undo-tree-id99 . -2) (undo-tree-id100 . -1) (undo-tree-id101 . -3) (undo-tree-id102 . -2) (undo-tree-id103 . -4) (undo-tree-id104 . -3) (undo-tree-id105 . -4) (undo-tree-id106 . -4) (undo-tree-id107 . -4) (undo-tree-id108 . -4) (undo-tree-id109 . -4) (undo-tree-id110 . -4) (undo-tree-id111 . -1) (undo-tree-id112 . -4) (undo-tree-id113 . -4) (undo-tree-id114 . -4) (undo-tree-id115 . -4) (undo-tree-id116 . -4) (undo-tree-id117 . -4) (undo-tree-id118 . -4) (undo-tree-id119 . -4) (undo-tree-id120 . -4) (undo-tree-id121 . -3) (undo-tree-id122 . -3) (undo-tree-id123 . -2) (undo-tree-id124 . -2) (undo-tree-id125 . -2) (undo-tree-id126 . -1) (undo-tree-id127 . -1) (#("unt" 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face)) . 957) (undo-tree-id128 . -1) (undo-tree-id129 . -2) (undo-tree-id130 . -1) (undo-tree-id131 . -3) (undo-tree-id132 . -2) (undo-tree-id133 . -3) (undo-tree-id134 . -3) (undo-tree-id135 . -2) (undo-tree-id136 . -2) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (955 . 960)) (23738 3198 98885 862000) 0 nil]) ((#("Result" 0 6 (fontified t face font-lock-type-face)) . 953)) ((953 . 959)) (23738 3198 134824 732000) 0 nil]) ((898 . 909) (896 . 898) (#("n" 0 1 (fontified t)) . -896) (undo-tree-id90 . -1) (#("a" 0 1 (fontified t)) . -897) (undo-tree-id91 . -1) 898 (895 . 898) (890 . 895) (886 . 890) (882 . 886) (877 . 882) 857) nil (23738 3199 695599 248000) 0 nil]) ((877 . 878) (876 . 878) (#("{" 0 1 (fontified nil)) . -876) (867 . 877) (#("i" 0 1 (fontified t face font-lock-type-face)) . -867) (undo-tree-id92 . -1) (undo-tree-id93 . -1) 868 (867 . 868) (#("i" 0 1 (fontified t face font-lock-type-face)) . -867) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (#("y" 0 1 (fontified t face font-lock-type-face)) . -868) (undo-tree-id96 . -1) (undo-tree-id97 . -1) 869 (864 . 869) (857 . 864) (856 . 857) (855 . 856) 853) nil (23738 3198 98999 735000) 0 nil]) ((nil rear-nonsticky nil 854 . 855) (nil fontified nil 854 . 855) (854 . 855) 853 (t 23738 260 319150 275000)) nil (23738 3198 99014 474000) 0 nil]) nil nil (23738 3198 99018 580000) 0 nil] #3# 55188 199 nil)