"f41604e6934678e3604c185f2dc612cf2ab5daa1"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#2=[nil nil ((#("``" 0 1 (fontified t) 1 2 (fontified t)) . 7) (undo-tree-id190 . -1) (undo-tree-id191 . -1) 8 (7 . 9) (#("`" 0 1 (fontified nil face font-lock-function-name-face)) . -7) (7 . 8) (#("i" 0 1 (fontified t face font-lock-function-name-face)) . -7) (undo-tree-id192 . -1) (undo-tree-id193 . -1) 8 (#("n" 0 1 (fontified t face font-lock-function-name-face)) . -8) (undo-tree-id194 . -1) (undo-tree-id195 . -1) 9 (7 . 9)) nil (23743 8908 852320 201000) 0 nil]) ((95 . 96) (#("3...max" 0 7 (fontified t)) . 95) (undo-tree-id196 . -4) (undo-tree-id197 . -4) (undo-tree-id198 . -4) (undo-tree-id199 . -4)) nil (23743 8908 852350 418000) 0 nil]) ((#("    let max = u32::max_value();
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 11 (fontified t face font-lock-variable-name-face) 11 14 (fontified t) 14 17 (fontified t face font-lock-type-face) 17 28 (fontified t) 28 31 (fontified t) 31 32 (fontified t)) . 25) (undo-tree-id200 . -8) (undo-tree-id201 . -8) 33) nil (23743 8908 852365 201000) 0 nil] [nil nil ((#("fn fib(n: u32) -> u32 " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 6 (fontified t face font-lock-function-name-face) 6 7 (fontified t) 7 8 (fontified t face font-lock-variable-name-face) 8 10 (fontified t) 10 13 (fontified t face font-lock-type-face) 13 16 (fontified t) 16 17 (fontified t syntax-table #1=(1)) 17 18 (fontified t) 18 21 (fontified t face font-lock-type-face) 21 22 (fontified t)) . 1) (undo-tree-id166 . 22) (undo-tree-id167 . -8) (undo-tree-id168 . -8) (undo-tree-id169 . -8) (undo-tree-id170 . -8) (undo-tree-id171 . -8) (undo-tree-id172 . -7) (undo-tree-id173 . -8) (undo-tree-id174 . -8) (undo-tree-id175 . -8) (undo-tree-id176 . -15) (undo-tree-id177 . -17) (undo-tree-id178 . -15) (undo-tree-id179 . -17) 9) ((1 . 23)) (23743 2667 466839 926000) 0 nil]) ((131 . 134) (#("u32::max_value()" 0 3 (fontified t face font-lock-type-face) 3 5 (fontified t) 5 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t)) . 131)) nil (23743 2667 473184 367000) 0 nil]) ((55 . 56)) nil (23743 2667 466864 830000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 55) (54 . 55) (53 . 55) (#("(" 0 1 (fontified nil)) . -53) (47 . 54) (#("+" 0 1 (fontified t)) . -47) (undo-tree-id180 . -1) (undo-tree-id181 . -1) 48 (46 . 48) (#("c" 0 1 (fontified t)) . -46) (undo-tree-id182 . -1) (undo-tree-id183 . -1) 47 (40 . 47) (29 . 40) (25 . 29) (25 . 26) 37) nil (23743 2667 466895 431000) 0 nil]) ((#("." 0 1 (fontified t)) . 104) (undo-tree-id184 . 1)) nil (23743 2667 466910 16000) 0 nil]) ((99 . 104) (#("n" 0 1 (fontified t)) . 99)) nil (23743 2667 466915 778000) 0 nil]) ((110 . 112) (#("(" 0 1 (fontified nil)) . -110) (103 . 111) (#("c" 0 1 (fontified t)) . -103) (undo-tree-id185 . -1) (undo-tree-id186 . -1) 104 (99 . 104) (#("44444294967295" 0 4 (fontified t) 4 13 (fontified t) 13 14 (fontified t rear-nonsticky t)) . 99) (undo-tree-id187 . -13) (undo-tree-id188 . 10) (undo-tree-id189 . -14) (t 23742 29380 160092 56000)) nil (23743 2667 466940 975000) 0 nil]) ((99 . 103) (#("0" 0 1 (fontified t)) . -99) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (#("0" 0 1 (fontified t)) . -100) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (#("0" 0 1 (fontified t)) . -101) (undo-tree-id164 . -1) (undo-tree-id165 . -1) 102 (99 . 102) (t 23742 29208 997950 773000)) nil (23742 29380 147878 136000) 0 nil]) ((#("9" 0 1 (fontified t)) . 109) (undo-tree-id158 . -1)) nil (23742 29208 982119 740000) 0 nil]) ((#("2" 0 1 (fontified t)) . 109)) nil (23742 29208 982135 417000) 0 nil]) ((#("4" 0 1 (fontified t)) . 109) (undo-tree-id159 . -1)) nil (23742 29208 982151 307000) 0 nil]) ((nil rear-nonsticky nil 108 . 109) (nil fontified nil 99 . 109) (99 . 109)) nil (23742 29208 982161 891000) 0 nil] [nil nil ((nil rear-nonsticky nil 109 . 110) (nil fontified nil 100 . 110) (100 . 110) 99) ((#("4294967295" 0 9 (fontified nil) 9 10 (fontified nil rear-nonsticky nil)) . 100) (undo-tree-id154 . -9) (undo-tree-id155 . -9) (undo-tree-id156 . -9) (undo-tree-id157 . -9) (nil rear-nonsticky t 109 . 110)) (23742 29201 71380 713000) 0 nil]) ((99 . 102)) nil (23742 29201 82386 170000) 0 nil]) ((#("4" 0 1 (fontified t)) . -99) (undo-tree-id135 . -1) (undo-tree-id136 . -1) 100 (99 . 100)) nil (23742 29201 71423 296000) 0 nil]) ((#("7" 0 1 (fontified t)) . 99)) nil (23742 29201 71431 251000) 0 nil]) ((96 . 97)) nil (23742 29201 71435 887000) 0 nil]) ((#("
" 0 1 (fontified t)) . 1) (undo-tree-id137 . 1)) nil (23742 29201 71443 629000) 0 nil]) ((#("#[macro_use]
extern crate tera;
use std::fs::File;
use std::io::prelude::*;
use tera::Context;
use tera::Tera;
" 0 12 (fontified t face font-lock-preprocessor-face) 12 13 (fontified t) 13 19 (fontified t face font-lock-keyword-face) 19 20 (fontified t) 20 25 (fontified t face font-lock-keyword-face) 25 32 (fontified t) 32 35 (fontified t face font-lock-keyword-face) 35 36 (fontified t) 36 39 (fontified t face font-lock-constant-face) 39 41 (fontified t) 41 43 (fontified t face font-lock-constant-face) 43 45 (fontified t) 45 49 (fontified t face font-lock-type-face) 49 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 58 (fontified t face font-lock-constant-face) 58 60 (fontified t) 60 62 (fontified t face font-lock-constant-face) 62 64 (fontified t) 64 71 (fontified t face font-lock-constant-face) 71 76 (fontified t) 76 79 (fontified t face font-lock-keyword-face) 79 80 (fontified t) 80 84 (fontified t face font-lock-constant-face) 84 86 (fontified t) 86 93 (fontified t face font-lock-type-face) 93 95 (fontified t) 95 98 (fontified t face font-lock-keyword-face) 98 99 (fontified t) 99 103 (fontified t face font-lock-constant-face) 103 105 (fontified t) 105 109 (fontified t face font-lock-type-face) 109 111 (fontified t)) . 1) (undo-tree-id138 . -105) (undo-tree-id139 . -105) (undo-tree-id140 . -10) (undo-tree-id141 . -10) (undo-tree-id142 . -10) (undo-tree-id143 . -10) (undo-tree-id144 . -105) 11) nil (23742 29201 71468 929000) 0 nil]) ((211 . 212)) nil (23742 29201 71474 908000) 0 nil]) ((208 . 211) (#(" " 0 1 (fontified t)) . -208) (undo-tree-id145 . -1) (undo-tree-id146 . -1) 209 (207 . 209)) nil (23742 29201 71487 687000) 0 nil]) ((#("n > 3 " 0 2 (fontified t) 2 3 (fontified t syntax-table #1#) 3 6 (fontified t)) . 207) (undo-tree-id147 . 1) (undo-tree-id148 . 4)) nil (23742 29201 71498 909000) 0 nil]) ((207 . 209)) nil (23742 29201 71503 595000) 0 nil]) ((207 . 210) (#(" " 0 1 (fontified nil)) . -207) (207 . 208) (#(">" 0 1 (fontified nil syntax-table #1#)) . -207) (207 . 208)) nil (23742 29201 71511 333000) 0 nil]) ((#("n if n > 2" 0 1 (fontified t) 1 2 (fontified t) 2 4 (fontified t face font-lock-keyword-face) 4 7 (fontified t) 7 8 (fontified t syntax-table #1#) 8 10 (fontified t)) . 207) (undo-tree-id149 . -9) (undo-tree-id150 . -9) (undo-tree-id151 . -9) (undo-tree-id152 . -9) (undo-tree-id153 . -9) 216 (t 23742 28639 695268 717000)) nil (23742 29201 71532 377000) 0 nil] [nil ([nil nil ((207 . 208) (#("x" 0 1 (fontified t)) . 207)) ((207 . 208) (#("_" 0 1 (fontified t)) . 207) (undo-tree-id133 . -1)) (23742 28723 801875 612000) 0 nil]) ((207 . 208) (#("n" 0 1 (fontified t)) . 207) (t 23742 28639 695268 717000)) ((207 . 208) (#("x" 0 1 (fontified t)) . 207) (undo-tree-id134 . -1)) (23742 28723 805375 683000) 0 nil] [nil ([nil nil ((#(" " 0 1 (fontified t)) . 209) (undo-tree-id124 . 1)) ((209 . 210)) (23742 28699 602774 382000) 0 nil]) ((#("if n > 2" 0 2 (fontified t face font-lock-keyword-face) 2 5 (fontified t) 5 6 (fontified t syntax-table #1#) 6 8 (fontified t)) . 209) (undo-tree-id125 . -7) (undo-tree-id126 . -7) (undo-tree-id127 . -7) (undo-tree-id128 . -7) (undo-tree-id130 . -7) (undo-tree-id132 . -6) 216 (t 23742 28639 695268 717000)) ((209 . 217)) (23742 28699 607030 331000) 0 nil]) ((1 . 301) (#("#[macro_use]
extern crate tera;
use tera::Tera;
use tera::Context;
use std::fs::File;
use std::io::prelude::*;

fn fib(n: u32) -> u32 {
    match n {
        0 => 0,
        1 => 1,
        2 => 2,
        n if n > 2 => fib(n - 1) + fib(n - 2),
    }
}
fn main()  {
    let z = 5;
    dbg!(fib(z));

}
" 0 12 (fontified t face font-lock-preprocessor-face) 12 13 (fontified t) 13 19 (fontified t face font-lock-keyword-face) 19 20 (fontified t) 20 25 (fontified t face font-lock-keyword-face) 25 32 (fontified t) 32 35 (fontified t face font-lock-keyword-face) 35 36 (fontified t) 36 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 46 (fontified t face font-lock-type-face) 46 48 (fontified t) 48 51 (fontified t face font-lock-keyword-face) 51 52 (fontified t) 52 56 (fontified t face font-lock-constant-face) 56 58 (fontified t) 58 65 (fontified t face font-lock-type-face) 65 67 (fontified t) 67 70 (fontified t face font-lock-keyword-face) 70 71 (fontified t) 71 74 (fontified t face font-lock-constant-face) 74 76 (fontified t) 76 78 (fontified t face font-lock-constant-face) 78 80 (fontified t) 80 84 (fontified t face font-lock-type-face) 84 86 (fontified t) 86 89 (fontified t face font-lock-keyword-face) 89 90 (fontified t) 90 93 (fontified t face font-lock-constant-face) 93 95 (fontified t) 95 97 (fontified t face font-lock-constant-face) 97 99 (fontified t) 99 106 (fontified t face font-lock-constant-face) 106 111 (fontified t) 111 112 (fontified t rear-nonsticky t) 112 114 (fontified t face font-lock-keyword-face) 114 115 (fontified t) 115 118 (fontified t face font-lock-function-name-face) 118 119 (fontified t) 119 120 (fontified t face font-lock-variable-name-face) 120 122 (fontified t) 122 123 (fontified t face font-lock-type-face) 123 125 (fontified t face font-lock-type-face) 125 128 (fontified t) 128 129 (fontified t syntax-table #1#) 129 130 (fontified t) 130 131 (fontified t face font-lock-type-face) 131 133 (fontified t face font-lock-type-face) 133 136 (fontified t) 136 140 (fontified t) 140 145 (fontified t face font-lock-keyword-face) 145 150 (fontified t) 150 161 (fontified t) 161 162 (fontified t syntax-table #1#) 162 166 (fontified t) 166 177 (fontified t) 177 178 (fontified t syntax-table #1#) 178 182 (fontified t) 182 193 (fontified t) 193 194 (fontified t syntax-table #1#) 194 198 (fontified t) 198 208 (fontified t) 208 210 (fontified t face font-lock-keyword-face) 210 213 (fontified t) 213 214 (fontified t syntax-table #1#) 214 218 (fontified t) 218 219 (fontified t syntax-table #1#) 219 244 (fontified t) 244 245 (fontified t) 245 251 (fontified t) 251 252 (fontified t) 252 253 (fontified t) 253 255 (fontified t face font-lock-keyword-face) 255 256 (fontified t) 256 260 (fontified t face font-lock-function-name-face) 260 263 (fontified t) 263 264 (fontified t) 264 266 (fontified t) 266 270 (fontified t) 270 273 (fontified t face font-lock-keyword-face) 273 274 (fontified t) 274 275 (fontified t face font-lock-variable-name-face) 275 280 (fontified t) 280 281 (fontified t) 281 285 (fontified t) 285 289 (fontified t face font-lock-preprocessor-face) 289 294 (fontified t) 294 295 (fontified t) 295 299 (fontified t) 299 300 (fontified t) 300 302 (fontified t)) . 1) (undo-tree-id0 . -268) (undo-tree-id1 . -266) (undo-tree-id2 . -266) (undo-tree-id3 . -266) (undo-tree-id4 . -252) (undo-tree-id5 . 33) (undo-tree-id6 . -268) (undo-tree-id7 . -252) (undo-tree-id8 . -266) (undo-tree-id9 . -112) (undo-tree-id10 . -252) (undo-tree-id11 . 32) (undo-tree-id12 . -263) (undo-tree-id13 . -263) (undo-tree-id14 . -263) (undo-tree-id15 . -263) (undo-tree-id16 . -263) (undo-tree-id17 . -263) (undo-tree-id18 . -263) (undo-tree-id19 . -263) (undo-tree-id20 . -263) (undo-tree-id21 . -263) (undo-tree-id22 . -263) (undo-tree-id23 . -263) (undo-tree-id24 . -263) (undo-tree-id25 . -263) (undo-tree-id26 . -263) (undo-tree-id27 . -263) (undo-tree-id28 . -263) (undo-tree-id29 . -262) (undo-tree-id30 . -263) (undo-tree-id31 . -263) (undo-tree-id32 . -263) (undo-tree-id33 . -263) (undo-tree-id34 . -263) (undo-tree-id35 . -263) (undo-tree-id36 . -263) (undo-tree-id37 . -263) (undo-tree-id38 . -263) (undo-tree-id39 . -262) (undo-tree-id40 . -263) (undo-tree-id41 . -263) (undo-tree-id42 . -263) (undo-tree-id43 . -263) (undo-tree-id44 . -263) (undo-tree-id45 . -263) (undo-tree-id46 . -263) (undo-tree-id47 . -263) (undo-tree-id48 . -263) (undo-tree-id49 . -263) (undo-tree-id50 . -263) (undo-tree-id51 . -263) (undo-tree-id52 . -263) (undo-tree-id53 . -263) (undo-tree-id54 . -263) (undo-tree-id55 . -12) (undo-tree-id56 . -36) (undo-tree-id57 . -46) (undo-tree-id58 . -52) (undo-tree-id59 . -65) (undo-tree-id60 . -71) (undo-tree-id61 . -84) (undo-tree-id62 . -90) (undo-tree-id63 . -109) (undo-tree-id64 . -146) (undo-tree-id65 . -147) (undo-tree-id66 . -263) (undo-tree-id67 . -263) (undo-tree-id68 . -263) (undo-tree-id69 . -263) (undo-tree-id70 . -263) (undo-tree-id71 . -263) (undo-tree-id72 . -263) (undo-tree-id73 . -263) (undo-tree-id74 . -263) (undo-tree-id75 . -263) (undo-tree-id76 . -263) (undo-tree-id77 . -263) (undo-tree-id78 . -263) (undo-tree-id79 . -263) (undo-tree-id80 . -263) (undo-tree-id81 . -263) (undo-tree-id82 . -146) (undo-tree-id83 . -147) (undo-tree-id84 . -90) (undo-tree-id85 . -93) (undo-tree-id86 . -71) (undo-tree-id87 . -74) (undo-tree-id88 . -52) (undo-tree-id89 . -56) (undo-tree-id90 . -36) (undo-tree-id91 . -40) (undo-tree-id92 . -1) (undo-tree-id93 . -12) (undo-tree-id94 . -36) (undo-tree-id95 . -46) (undo-tree-id96 . -52) (undo-tree-id97 . -65) (undo-tree-id98 . -71) (undo-tree-id99 . -84) (undo-tree-id100 . -90) (undo-tree-id101 . -109) (undo-tree-id102 . -146) (undo-tree-id103 . -147) 264) nil (23742 28724 875253 50000) 0 nil]) ((#("r" 0 1 (fontified t)) . 264) (undo-tree-id104 . -1) (undo-tree-id105 . -1) (undo-tree-id106 . -1)) nil (23742 28639 689791 192000) 0 nil]) ((264 . 265) (#(">" 0 1 (fontified t syntax-table #1#)) . 264) (undo-tree-id107 . -1) (undo-tree-id108 . -1) (undo-tree-id109 . -1) (undo-tree-id110 . -1)) nil (23742 28639 689798 608000) 0 nil]) ((#("-" 0 1 (fontified t)) . 264)) nil (23742 28639 689800 872000) 0 nil]) ((269 . 273)) nil (23742 28639 689802 389000) 0 nil]) ((#("fn main() " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 7 (fontified t face font-lock-function-name-face) 7 10 (fontified t)) . 269) (undo-tree-id111 . 10)) nil (23742 28639 689804 607000) 0 nil]) ((#("}" 0 1 (fontified t)) . 308) (#("{
    " 0 1 (fontified t) 1 2 (fontified t) 2 6 (fontified t)) . 279) (undo-tree-id112 . -2) (undo-tree-id113 . -2) 281) nil (23742 28639 689808 852000) 0 nil]) ((nil rear-nonsticky nil 112 . 113) (#("
" 0 1 (fontified nil)) . -253) (112 . 254)) nil (23742 28639 689811 674000) 0 nil]) ((#("fn fib(n: u32) -> u32 {
    match n {
        0 => 0,
        1 => 1,
        2 => 2,
        n if n > 2 => fib(n - 1) + fib(n - 2),
    }
}
" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 6 (fontified t face font-lock-function-name-face) 6 7 (fontified t) 7 8 (fontified t face font-lock-variable-name-face) 8 10 (fontified t) 10 11 (fontified t face font-lock-type-face) 11 13 (fontified t face font-lock-type-face) 13 16 (fontified t) 16 17 (syntax-table #1# fontified t) 17 18 (fontified t) 18 19 (fontified t face font-lock-type-face) 19 21 (fontified t face font-lock-type-face) 21 24 (fontified t) 24 28 (fontified t) 28 33 (fontified t face font-lock-keyword-face) 33 38 (fontified t) 38 49 (fontified t) 49 50 (syntax-table #1# fontified t) 50 54 (fontified t) 54 65 (fontified t) 65 66 (syntax-table #1# fontified t) 66 70 (fontified t) 70 81 (fontified t) 81 82 (syntax-table #1# fontified t) 82 86 (fontified t) 86 96 (fontified t) 96 98 (fontified t face font-lock-keyword-face) 98 101 (fontified t) 101 102 (syntax-table #1# fontified t) 102 106 (fontified t) 106 107 (syntax-table #1# fontified t) 107 132 (fontified t) 132 133 (fontified t) 133 139 (fontified t) 139 141 (fontified t)) . 128) (undo-tree-id114 . -140) (undo-tree-id115 . -4) (undo-tree-id116 . -140) (undo-tree-id117 . -4) (undo-tree-id118 . -140) (undo-tree-id119 . -140) (undo-tree-id120 . -140) 268) nil (23742 28639 689820 716000) 0 nil]) ((#("::io::Result<()> " 0 2 (fontified t) 2 4 (fontified t face font-lock-constant-face) 4 6 (fontified t) 6 12 (fontified t face font-lock-type-face) 12 17 (fontified t)) . 126)) nil (23742 28639 689822 987000) 0 nil]) ((#("std" 0 3 (fontified t face font-lock-constant-face)) . 126)) nil (23742 28639 689824 392000) 0 nil]) ((148 . 336) (#("    // Use globbing
    let tera = compile_templates!(\"templates/**/*\");
    let mut context = Context::new();
    let product = \"Daniel's product\";
    context.insert(\"product\", &product);
    let mut file = File::create(\"./index.html\")?;
    file.write_all(tera.render(\"index.html\", &context).unwrap().as_bytes())?;
    Ok(())

" 0 4 (fontified t) 4 7 (fontified t face font-lock-comment-delimiter-face) 7 20 (fontified t face font-lock-comment-face) 20 24 (fontified t) 24 27 (fontified t face font-lock-keyword-face) 27 28 (fontified t) 28 32 (fontified t face font-lock-variable-name-face) 32 35 (fontified t) 35 53 (fontified t face font-lock-preprocessor-face) 53 54 (fontified t) 54 70 (fontified t face font-lock-string-face) 70 77 (fontified t) 77 80 (fontified t face font-lock-keyword-face) 80 81 (fontified t) 81 84 (fontified t face font-lock-keyword-face) 84 85 (fontified t) 85 92 (fontified t face font-lock-variable-name-face) 92 95 (fontified t) 95 102 (fontified t face font-lock-type-face) 102 115 (fontified t) 115 118 (fontified t face font-lock-keyword-face) 118 119 (fontified t) 119 126 (fontified t face font-lock-variable-name-face) 126 129 (fontified t) 129 147 (fontified t face font-lock-string-face) 147 168 (fontified t) 168 177 (fontified t face font-lock-string-face) 177 194 (fontified t) 194 197 (fontified t face font-lock-keyword-face) 197 198 (fontified t) 198 201 (fontified t face font-lock-keyword-face) 201 202 (fontified t) 202 206 (fontified t face font-lock-variable-name-face) 206 209 (fontified t) 209 213 (fontified t face font-lock-type-face) 213 222 (fontified t) 222 236 (fontified t face font-lock-string-face) 236 237 (fontified t) 237 238 (fontified t face rust-question-mark-face) 238 271 (fontified t) 271 283 (fontified t face font-lock-string-face) 283 315 (fontified t) 315 316 (fontified t face rust-question-mark-face) 316 322 (fontified t) 322 324 (fontified t face font-lock-type-face) 324 330 (fontified t)) . 148) (undo-tree-id121 . -330) (undo-tree-id122 . -329) (undo-tree-id123 . -329) (t 23571 46994 198368 351000)) nil (23742 28639 689829 101000) 0 nil]) nil nil (23742 28639 689830 669000) 0 nil] #2# 3688 44 nil)