"4762df785e44d0bd52eb408fc06cbf19f000b61d"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#3=[nil nil ((#("use directories::{BaseDirs, ProjectDirs, UserDirs};
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 15 (fontified t face font-lock-constant-face) 15 18 (fontified t) 18 26 (fontified t face font-lock-type-face) 26 28 (fontified t) 28 39 (fontified t face font-lock-type-face) 39 41 (fontified t) 41 49 (fontified t face font-lock-type-face) 49 51 (fontified t) 51 52 (fontified t)) . 1) (undo-tree-id2616 . 44) (undo-tree-id2617 . 44) (undo-tree-id2618 . 44) (undo-tree-id2619 . 44) (undo-tree-id2620 . -8) (undo-tree-id2621 . -18) (undo-tree-id2622 . -26) (undo-tree-id2623 . -28) (undo-tree-id2624 . -39) (undo-tree-id2625 . -41) (undo-tree-id2626 . -49) (undo-tree-id2627 . 52)) nil (23701 42336 656379 972000) 0 nil]) ((#("use std::path::Path;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 7 (fontified t face font-lock-constant-face) 7 9 (fontified t) 9 13 (fontified t face font-lock-constant-face) 13 15 (fontified t) 15 19 (fontified t face font-lock-type-face) 19 21 (fontified t)) . 105) (undo-tree-id2628 . -4) (undo-tree-id2629 . -19) (undo-tree-id2630 . -19) (undo-tree-id2631 . -19) (undo-tree-id2632 . 2) (undo-tree-id2633 . 2) (undo-tree-id2634 . 2) (undo-tree-id2635 . 2) (undo-tree-id2636 . 2) (undo-tree-id2637 . 2) (undo-tree-id2638 . 2) (undo-tree-id2639 . -15) (undo-tree-id2640 . -19) (undo-tree-id2641 . 2) (undo-tree-id2642 . 2) 124) nil (23701 42336 656404 920000) 0 nil]) ((#(".display()" 0 10 (fontified t)) . 283)) nil (23701 42336 656408 655000) 0 nil]) ((#("
" 0 1 (fontified t)) . 162) (undo-tree-id2643 . 1) (undo-tree-id2644 . -1) (undo-tree-id2645 . 1)) nil (23701 42336 656414 35000) 0 nil]) ((#("    let project_dir = ProjectDirs::from(\"\", \"\", \"qutebrowser\").unwrap();
    let config_dir = project_dir.config_dir();
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 19 (fontified t face font-lock-variable-name-face) 19 22 (fontified t) 22 33 (fontified t face font-lock-type-face) 33 40 (fontified t) 40 42 (fontified t face font-lock-string-face) 42 44 (fontified t) 44 46 (fontified t face font-lock-string-face) 46 48 (fontified t) 48 59 (fontified t face font-lock-string-face) 59 60 (fontified t syntax-table #1=(15) face font-lock-string-face) 60 61 (fontified t face font-lock-string-face) 61 62 (fontified t) 62 73 (fontified t) 73 77 (fontified t) 77 80 (fontified t face font-lock-keyword-face) 80 81 (fontified t) 81 91 (fontified t face font-lock-variable-name-face) 91 105 (fontified t) 105 119 (fontified t) 119 120 (fontified t)) . 162) (undo-tree-id2646 . -77) (undo-tree-id2647 . 101) (undo-tree-id2648 . -77) (undo-tree-id2649 . -4) (undo-tree-id2650 . -81) (undo-tree-id2651 . -4) (undo-tree-id2652 . -4) (undo-tree-id2653 . -77) 166) nil (23701 42336 656424 605000) 0 nil]) ((nil rear-nonsticky nil 286 . 287) (#("
" 0 1 (fontified nil)) . -341) (282 . 342)) nil (23701 42336 656427 897000) 0 nil]) ((#("        dbg!(&line);
" 0 8 (fontified t) 8 12 (fontified t face font-lock-preprocessor-face) 12 21 (fontified t)) . 408) (undo-tree-id2654 . -19) 427 (t 23701 38528 2969 194000)) nil (23701 42336 656431 652000) 0 nil]) ((170 . 181) (#("config_dir" 0 10 (fontified t face font-lock-variable-name-face)) . 170)) nil (23701 38527 932708 541000) 0 nil] [nil nil ((170 . 181) (#("config_dir = ProjectDirs::from(\"\", \"\", \"qutebrowser\")" 0 10 (fontified t face font-lock-variable-name-face) 10 13 (fontified t) 13 24 (fontified t face font-lock-type-face) 24 31 (fontified t) 31 33 (fontified t face font-lock-string-face) 33 35 (fontified t) 35 37 (fontified t face font-lock-string-face) 37 39 (fontified t) 39 50 (fontified t face font-lock-string-face) 50 51 (fontified t syntax-table #1# face font-lock-string-face) 51 52 (fontified t face font-lock-string-face) 52 53 (fontified t)) . 170) (undo-tree-id2560 . 53) (undo-tree-id2561 . 53) (undo-tree-id2562 . 53)) ((170 . 223) (#("project_dir" 0 11 (fontified t face font-lock-variable-name-face)) . 170) (undo-tree-id2610 . -10) (undo-tree-id2611 . 3) (undo-tree-id2612 . -11) (undo-tree-id2613 . 1) (undo-tree-id2614 . 11) (undo-tree-id2615 . -11)) (23701 38503 553586 66000) 0 nil]) ((255 . 266) (#("config_dir" 0 6 (fontified t) 6 10 (fontified t)) . 255) (undo-tree-id2563 . 4) (undo-tree-id2564 . 4) (undo-tree-id2565 . 4) (undo-tree-id2566 . 6) (undo-tree-id2567 . 6) (undo-tree-id2568 . 6) (undo-tree-id2569 . 2) (undo-tree-id2570 . 2) (undo-tree-id2571 . 2) (undo-tree-id2572 . 3) (undo-tree-id2573 . 2) (undo-tree-id2574 . -7) (undo-tree-id2575 . 3) (undo-tree-id2576 . 2) (undo-tree-id2577 . -7) (undo-tree-id2578 . 3) (undo-tree-id2579 . 2) (undo-tree-id2580 . 3) (undo-tree-id2581 . 2) (undo-tree-id2582 . 3) (undo-tree-id2583 . -10) (undo-tree-id2584 . 4) (undo-tree-id2585 . 3) (undo-tree-id2586 . 5) (undo-tree-id2587 . 4) (undo-tree-id2588 . -10) (undo-tree-id2589 . 5) (undo-tree-id2590 . 5) (undo-tree-id2591 . 6) (undo-tree-id2592 . 5) (undo-tree-id2593 . -4) (undo-tree-id2594 . 6) (undo-tree-id2595 . 5) (undo-tree-id2596 . -4) (undo-tree-id2597 . 6) (undo-tree-id2598 . 5) (undo-tree-id2599 . -4) (undo-tree-id2600 . 6) (undo-tree-id2601 . 5) (undo-tree-id2602 . 7) (undo-tree-id2603 . 6) (undo-tree-id2604 . 8) (undo-tree-id2605 . 7) (undo-tree-id2606 . 9) (undo-tree-id2607 . 8) (undo-tree-id2608 . 10) (undo-tree-id2609 . 9)) nil (23701 38503 559636 705000) 0 nil] [nil nil ((255 . 257) (#("config" 0 6 (fontified t)) . 255) (undo-tree-id2550 . -4) 259) ((255 . 261) (#("pr" 0 2 (fontified t)) . 255) (undo-tree-id2557 . -1) (undo-tree-id2558 . 1) (undo-tree-id2559 . 1)) (23701 38487 320650 763000) 0 nil]) ((#("    let jumps = vec![(\"F\", \"https://fosstodon.org\"), (\"G\", \"https://github.com\")];
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 13 (fontified t face font-lock-variable-name-face) 13 16 (fontified t) 16 20 (fontified t face font-lock-preprocessor-face) 20 22 (fontified t) 22 25 (fontified t face font-lock-string-face) 25 27 (fontified t) 27 50 (fontified t face font-lock-string-face) 50 54 (fontified t) 54 57 (fontified t face font-lock-string-face) 57 59 (fontified t) 59 79 (fontified t face font-lock-string-face) 79 83 (fontified t)) . 791)) nil (23701 38487 328007 734000) 0 nil]) ((#("    " 0 4 (fontified t)) . -280) (undo-tree-id2551 . -4) 284 (279 . 284) 238) nil (23701 38487 320677 779000) 0 nil]) ((#("    let input = \"F https://fosstodon.org\\nG https://github.com\";
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 13 (fontified t face font-lock-variable-name-face) 13 16 (fontified t) 16 63 (fontified t face font-lock-string-face) 63 65 (fontified t)) . 280) (undo-tree-id2552 . -65) (undo-tree-id2553 . -4) 284) nil (23701 38487 320694 737000) 0 nil]) ((#("    dbg!(format!(\"{}/{}\", config_dir.display(), \"global_jumps\"));
" 0 4 (fontified t) 4 8 (fontified t face font-lock-preprocessor-face) 8 9 (fontified t) 9 16 (fontified t face rust-builtin-formatting-macro-face) 16 17 (fontified t) 17 18 (fontified t face font-lock-string-face) 18 20 (fontified t face rust-string-interpolation-face) 20 21 (fontified t face font-lock-string-face) 21 23 (fontified t face rust-string-interpolation-face) 23 24 (fontified t face font-lock-string-face) 24 48 (fontified t) 48 62 (fontified t face font-lock-string-face) 62 63 (fontified t) 63 64 (fontified t) 64 65 (fontified t) 65 66 (fontified t)) . 345) (undo-tree-id2554 . -66) (undo-tree-id2555 . -30) (undo-tree-id2556 . -30) 375 (t 23701 38187 261168 5000)) nil (23701 38487 320713 965000) 0 nil]) ((493 . 498) (#("jumps" 0 5 (fontified t face font-lock-string-face)) . 493) (t 23701 38148 664648 544000)) nil (23701 38187 238442 919000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 366) (undo-tree-id2549 . 1)) nil (23701 38148 596066 297000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 365)) nil (23701 38148 596072 426000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 459)) nil (23701 38148 596074 919000) 0 nil] [nil nil ((#("/" 0 1 (fontified t face font-lock-string-face)) . 460)) ((460 . 461)) (23701 38142 278579 891000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 461) (t 23701 38124 24738 933000)) nil (23701 38142 283278 561000) 0 nil]) ((#("?" 0 1 (fontified t face rust-question-mark-face)) . 411) (undo-tree-id2547 . -1) (undo-tree-id2548 . -1)) nil (23701 38123 940219 841000) 0 nil] [nil nil ((410 . 411) (#(")" 0 1 (fontified t)) . -410) (undo-tree-id2405 . -1) (#("?" 0 1 (fontified t face rust-question-mark-face)) . -411) (undo-tree-id2406 . -1) (#(";" 0 1 (fontified t)) . -412) (undo-tree-id2407 . -1) 413) ((410 . 413) (#(";" 0 1 (fontified t)) . 410) (undo-tree-id2416 . -1) (undo-tree-id2417 . 1) (undo-tree-id2418 . 1) (undo-tree-id2419 . 1) (undo-tree-id2420 . 1) (undo-tree-id2421 . 1) (undo-tree-id2422 . 1) (undo-tree-id2423 . 1) (undo-tree-id2424 . 1) (undo-tree-id2425 . 1) (undo-tree-id2426 . 1) (undo-tree-id2427 . 1) (undo-tree-id2428 . 1) (undo-tree-id2429 . 1) (undo-tree-id2430 . 1) (undo-tree-id2431 . 1) (undo-tree-id2432 . 1) (undo-tree-id2433 . 1) (undo-tree-id2434 . 1) (undo-tree-id2435 . 1) (undo-tree-id2436 . 1) (undo-tree-id2437 . 1) (undo-tree-id2438 . 1) (undo-tree-id2439 . 1) (undo-tree-id2440 . 1) (undo-tree-id2441 . 1) (undo-tree-id2442 . 1) (undo-tree-id2443 . 1) (undo-tree-id2444 . 1) (undo-tree-id2445 . 1) (undo-tree-id2446 . 1) (undo-tree-id2447 . 1) (undo-tree-id2448 . 1) (undo-tree-id2449 . 1) (undo-tree-id2450 . 1) (undo-tree-id2451 . 1) (undo-tree-id2452 . 1) (undo-tree-id2453 . 1) (undo-tree-id2454 . 1) (undo-tree-id2455 . 1) (undo-tree-id2456 . 1) (undo-tree-id2457 . 1) (undo-tree-id2458 . 1) (undo-tree-id2459 . 1) (undo-tree-id2460 . 1) (undo-tree-id2461 . 1) (undo-tree-id2462 . 1) (undo-tree-id2463 . 1) (undo-tree-id2464 . 1) (undo-tree-id2465 . 1) (undo-tree-id2466 . 1) (undo-tree-id2467 . 1) (undo-tree-id2468 . 1) (undo-tree-id2469 . 1) (undo-tree-id2470 . 1) (undo-tree-id2471 . 1) (undo-tree-id2472 . 1) (undo-tree-id2473 . 1) (undo-tree-id2474 . 1) (undo-tree-id2475 . 1) (undo-tree-id2476 . 1) (undo-tree-id2477 . 1) (undo-tree-id2478 . 1) (undo-tree-id2479 . 1) (undo-tree-id2480 . 1) (undo-tree-id2481 . 1) (undo-tree-id2482 . 1) (undo-tree-id2483 . 1) (undo-tree-id2484 . 1) (undo-tree-id2485 . 1) (undo-tree-id2486 . 1) (undo-tree-id2487 . 1) (undo-tree-id2488 . 1) (undo-tree-id2489 . 1) (undo-tree-id2490 . 1) (undo-tree-id2491 . 1) (undo-tree-id2492 . 1) (undo-tree-id2493 . 1) (undo-tree-id2494 . 1) (undo-tree-id2495 . 1) (undo-tree-id2496 . 1) (undo-tree-id2497 . 1) (undo-tree-id2498 . 1) (undo-tree-id2499 . 1) (undo-tree-id2500 . 1) (undo-tree-id2501 . 1) (undo-tree-id2502 . 1) (undo-tree-id2503 . 1) (undo-tree-id2504 . 1) (undo-tree-id2505 . 1) (undo-tree-id2506 . 1) (undo-tree-id2507 . 1) (undo-tree-id2508 . 1) (undo-tree-id2509 . 1) (undo-tree-id2510 . 1) (undo-tree-id2511 . 1) (undo-tree-id2512 . 1) (undo-tree-id2513 . 1) (undo-tree-id2514 . 1) (undo-tree-id2515 . 1) (undo-tree-id2516 . 1) (undo-tree-id2517 . 1) (undo-tree-id2518 . 1) (undo-tree-id2519 . 1) (undo-tree-id2520 . 1) (undo-tree-id2521 . 1) (undo-tree-id2522 . 1) (undo-tree-id2523 . 1) (undo-tree-id2524 . 1) (undo-tree-id2525 . 1) (undo-tree-id2526 . 1) (undo-tree-id2527 . 1) (undo-tree-id2528 . 1) (undo-tree-id2529 . 1) (undo-tree-id2530 . 1) (undo-tree-id2531 . 1) (undo-tree-id2532 . 1) (undo-tree-id2533 . 1) (undo-tree-id2534 . 1) (undo-tree-id2535 . 1) (undo-tree-id2536 . 1) (undo-tree-id2537 . 1) (undo-tree-id2538 . 1) (undo-tree-id2539 . 1) (undo-tree-id2540 . 1) (undo-tree-id2541 . 1) (undo-tree-id2542 . 1) (undo-tree-id2543 . 1) (undo-tree-id2544 . 1) (undo-tree-id2545 . 1) (undo-tree-id2546 . 1) (t 23701 38109 508124 129000)) (23701 38109 494775 990000) 0 nil]) ((#("A" 0 1 (fontified t face font-lock-type-face)) . -353) (undo-tree-id2408 . -1) (undo-tree-id2409 . 1) (undo-tree-id2410 . -1) 354 (351 . 354) (349 . 351) (#("let input = fs::read_to_string" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-variable-name-face) 9 12 (fontified t) 12 14 (fontified t face font-lock-constant-face) 14 30 (fontified t)) . 349) (undo-tree-id2411 . -4) (undo-tree-id2412 . -9) (undo-tree-id2413 . -4) (undo-tree-id2414 . -9) (undo-tree-id2415 . 30)) nil (23701 38121 168021 755000) 0 nil]) ((nil rear-nonsticky nil 443 . 444) (#("
" 0 1 (fontified nil)) . -534) (439 . 535) 380 (t 23701 38058 784963 497000)) nil (23701 38109 494802 65000) 0 nil]) ((1 . 954) (#("use directories::{BaseDirs, ProjectDirs, UserDirs};
use std::env;
use std::fs;
use std::io::prelude::*;
use std::path::Path;

fn main() -> std::io::Result<()> {
    let config_dir = ProjectDirs::from(\"\", \"\", \"qutebrowser\")
        .unwrap();
    let config_dir = config_dir.config_dir();
    let input = \"F https://fosstodon.org\\nG https://github.com\";
    let input = fs::read_to_string(format!(\"{} / {}\", config_dir.display(), \"global_jumps\"))?;
    for line in input.lines() {
        dbg!(&line);
        let mut words = line.split(\" \");
        let (key, url) = (words.nth(0).unwrap(), words.nth(0).unwrap());
        let cmd = format!(
            \"bind '{} :buffer {}\\nbind \\\"{} :open -t {}\\n\",
            key, url, key, url
        );
        let mut file = fs::File::create(env::var(\"QUTE_FIFO\").unwrap())?;
        file.write_all(cmd.as_bytes())?;
    }
    let jumps = vec![(\"F\", \"https://fosstodon.org\"), (\"G\", \"https://github.com\")];

    Ok(())
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 15 (fontified t face font-lock-constant-face) 15 18 (fontified t) 18 26 (fontified t face font-lock-type-face) 26 28 (fontified t) 28 39 (fontified t face font-lock-type-face) 39 41 (fontified t) 41 49 (fontified t face font-lock-type-face) 49 51 (fontified t) 51 52 (fontified t) 52 55 (fontified t face font-lock-keyword-face) 55 56 (fontified t) 56 59 (fontified t face font-lock-constant-face) 59 66 (fontified t) 66 69 (fontified t face font-lock-keyword-face) 69 70 (fontified t) 70 73 (fontified t face font-lock-constant-face) 73 79 (fontified t) 79 82 (fontified t face font-lock-keyword-face) 82 83 (fontified t) 83 86 (fontified t face font-lock-constant-face) 86 88 (fontified t) 88 90 (fontified t face font-lock-constant-face) 90 92 (fontified t) 92 99 (fontified t face font-lock-constant-face) 99 104 (fontified t) 104 107 (fontified t face font-lock-keyword-face) 107 108 (fontified t) 108 111 (fontified t face font-lock-constant-face) 111 113 (fontified t) 113 117 (fontified t face font-lock-constant-face) 117 119 (fontified t) 119 123 (fontified t face font-lock-type-face) 123 126 (fontified t) 126 128 (fontified t face font-lock-keyword-face) 128 129 (fontified t) 129 133 (fontified t face font-lock-function-name-face) 133 137 (fontified t) 137 138 (fontified t syntax-table #2=(1)) 138 139 (fontified t) 139 142 (fontified t face font-lock-constant-face) 142 144 (fontified t) 144 146 (fontified t face font-lock-constant-face) 146 148 (fontified t) 148 154 (fontified t face font-lock-type-face) 154 165 (fontified t) 165 168 (fontified t face font-lock-keyword-face) 168 169 (fontified t) 169 179 (fontified t face font-lock-variable-name-face) 179 182 (fontified t) 182 193 (fontified t face font-lock-type-face) 193 200 (fontified t) 200 202 (fontified t face font-lock-string-face) 202 204 (fontified t) 204 206 (fontified t face font-lock-string-face) 206 208 (fontified t) 208 219 (fontified t face font-lock-string-face) 219 220 (fontified t syntax-table #1# face font-lock-string-face) 220 221 (fontified t face font-lock-string-face) 221 223 (fontified t) 223 240 (fontified t) 240 241 (fontified t) 241 242 (fontified t) 242 246 (fontified t) 246 249 (fontified t face font-lock-keyword-face) 249 250 (fontified t) 250 260 (fontified t face font-lock-variable-name-face) 260 263 (fontified t) 263 273 (fontified t) 273 278 (fontified t) 278 284 (fontified t) 284 285 (fontified t) 285 286 (fontified t) 286 287 (fontified t) 287 288 (fontified t) 288 292 (fontified t) 292 295 (fontified t face font-lock-keyword-face) 295 296 (fontified t) 296 301 (fontified t face font-lock-variable-name-face) 301 304 (fontified t) 304 351 (fontified t face font-lock-string-face) 351 352 (fontified t) 352 353 (fontified t) 353 357 (fontified t) 357 360 (fontified t face font-lock-keyword-face) 360 361 (fontified t) 361 366 (fontified t face font-lock-variable-name-face) 366 369 (fontified t) 369 371 (fontified t face font-lock-constant-face) 371 388 (fontified t) 388 395 (fontified t face rust-builtin-formatting-macro-face) 395 396 (fontified t) 396 397 (fontified t face font-lock-string-face) 397 399 (fontified t face rust-string-interpolation-face) 399 402 (fontified t face font-lock-string-face) 402 404 (fontified t face rust-string-interpolation-face) 404 405 (fontified t face font-lock-string-face) 405 416 (fontified t) 416 418 (fontified t) 418 425 (fontified t) 425 427 (fontified t) 427 428 (fontified t) 428 429 (fontified t) 429 430 (fontified t face font-lock-string-face) 430 442 (fontified t face font-lock-string-face) 442 443 (fontified t face font-lock-string-face) 443 444 (fontified t) 444 445 (fontified t) 445 446 (fontified t face rust-question-mark-face) 446 447 (fontified t) 447 448 (fontified t) 448 452 (fontified t) 452 455 (fontified t face font-lock-keyword-face) 455 461 (fontified t) 461 463 (fontified t face font-lock-keyword-face) 463 488 (fontified t) 488 492 (fontified t face font-lock-preprocessor-face) 492 509 (fontified t) 509 512 (fontified t face font-lock-keyword-face) 512 513 (fontified t) 513 516 (fontified t face font-lock-keyword-face) 516 517 (fontified t) 517 522 (fontified t face font-lock-variable-name-face) 522 536 (fontified t) 536 539 (fontified t face font-lock-string-face) 539 550 (fontified t) 550 553 (fontified t face font-lock-keyword-face) 553 623 (fontified t) 623 626 (fontified t face font-lock-keyword-face) 626 627 (fontified t) 627 630 (fontified t face font-lock-variable-name-face) 630 633 (fontified t) 633 640 (fontified t face rust-builtin-formatting-macro-face) 640 654 (fontified t) 654 661 (fontified t face font-lock-string-face) 661 663 (fontified t face rust-string-interpolation-face) 663 672 (fontified t face font-lock-string-face) 672 674 (fontified t face rust-string-interpolation-face) 674 700 (fontified t face font-lock-string-face) 700 752 (fontified t) 752 755 (fontified t face font-lock-keyword-face) 755 756 (fontified t) 756 759 (fontified t face font-lock-keyword-face) 759 760 (fontified t) 760 764 (fontified t face font-lock-variable-name-face) 764 767 (fontified t) 767 769 (fontified t face font-lock-constant-face) 769 771 (fontified t) 771 775 (fontified t face font-lock-type-face) 775 784 (fontified t) 784 787 (fontified t face font-lock-constant-face) 787 788 (fontified t) 788 793 (fontified t) 793 804 (face font-lock-string-face fontified t) 804 815 (fontified t) 815 816 (face rust-question-mark-face fontified t) 816 818 (fontified t) 818 853 (fontified t) 853 854 (fontified t) 854 856 (fontified t) 856 857 (fontified t face rust-question-mark-face) 857 859 (fontified t) 859 869 (fontified t) 869 872 (fontified t face font-lock-keyword-face) 872 873 (fontified t) 873 878 (fontified t face font-lock-variable-name-face) 878 881 (fontified t) 881 885 (fontified t face font-lock-preprocessor-face) 885 887 (fontified t) 887 890 (fontified t face font-lock-string-face) 890 892 (fontified t) 892 915 (fontified t face font-lock-string-face) 915 919 (fontified t) 919 922 (fontified t face font-lock-string-face) 922 924 (fontified t) 924 944 (fontified t face font-lock-string-face) 944 947 (fontified t) 947 948 (fontified t) 948 953 (fontified t) 953 955 (fontified t face font-lock-type-face) 955 962 (fontified t)) . 1) (undo-tree-id2345 . 680) (undo-tree-id2346 . 548) (undo-tree-id2347 . -417) (undo-tree-id2348 . 536) (undo-tree-id2349 . 536) (undo-tree-id2350 . 753) (undo-tree-id2351 . -220) (undo-tree-id2352 . 786) (undo-tree-id2353 . -179) (undo-tree-id2354 . 784) (undo-tree-id2355 . 784) (undo-tree-id2356 . 723) (undo-tree-id2357 . 784) (undo-tree-id2358 . -239) (undo-tree-id2359 . 633) (undo-tree-id2360 . -331) (undo-tree-id2361 . 705) (undo-tree-id2362 . -260) (undo-tree-id2363 . 680) (undo-tree-id2364 . 680) (undo-tree-id2365 . 682) (undo-tree-id2366 . 680) (undo-tree-id2367 . -284) (undo-tree-id2368 . 680) (undo-tree-id2369 . 681) (undo-tree-id2370 . -18) (undo-tree-id2371 . -26) (undo-tree-id2372 . -41) (undo-tree-id2373 . -49) (undo-tree-id2374 . -108) (undo-tree-id2375 . -123) (undo-tree-id2376 . -296) (undo-tree-id2377 . -301) (undo-tree-id2378 . -873) (undo-tree-id2379 . -878) (undo-tree-id2380 . 681) (undo-tree-id2381 . 681) (undo-tree-id2382 . 681) (undo-tree-id2383 . -284) (undo-tree-id2384 . 681) (undo-tree-id2385 . 681) (undo-tree-id2386 . 681) (undo-tree-id2387 . 681) (undo-tree-id2388 . 681) (undo-tree-id2389 . 681) (undo-tree-id2390 . 681) (undo-tree-id2391 . 681) (undo-tree-id2392 . 681) (undo-tree-id2393 . 681) (undo-tree-id2394 . 681) (undo-tree-id2395 . 681) (undo-tree-id2396 . 681) (undo-tree-id2397 . 681) (undo-tree-id2398 . -281) (undo-tree-id2399 . -281) (undo-tree-id2400 . 681) (undo-tree-id2401 . 681) (undo-tree-id2402 . 681) (undo-tree-id2403 . 681)) nil (23701 38058 717606 175000) 0 nil]) ((281 . 283) (#("D" 0 1 (fontified t)) . 281) (undo-tree-id2404 . 1)) nil (23701 38058 717631 533000) 0 nil]) ((286 . 287) (#(")" 0 1 (fontified nil)) . 286) (285 . 286) (284 . 286) (#("(" 0 1 (fontified nil)) . 284) (264 . 285) (#("config" 0 5 (fontified nil) 5 6 (fontified nil)) . 264) (251 . 270) (#("conf" 0 1 (fontified nil face font-lock-variable-name-face) 1 4 (fontified nil face font-lock-variable-name-face)) . 251) (242 . 255)) ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 242) (undo-tree-id2286 . -5) (#("let c" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil) 4 5 (fontified nil face font-lock-variable-name-face)) . 247) (undo-tree-id2287 . -5) (#("onf" 0 3 (fontified nil face font-lock-variable-name-face)) . 252) (undo-tree-id2288 . -3) (251 . 255) (#("config_dir" 0 10 (fontified nil face font-lock-variable-name-face)) . 251) (undo-tree-id2289 . -10) (undo-tree-id2291 . -10) (#(" = confi" 0 3 (fontified nil) 3 8 (fontified nil)) . 261) (undo-tree-id2292 . -8) (#("g" 0 1 (fontified nil)) . 269) (undo-tree-id2293 . -1) (264 . 270) (#("config_dir" 0 10 (fontified nil)) . 264) (undo-tree-id2294 . -10) (undo-tree-id2296 . -10) (#(".conf" 0 5 (fontified nil)) . 274) (undo-tree-id2297 . -5) (undo-tree-id2299 . -2) (undo-tree-id2301 . -3) (undo-tree-id2303 . -4) (undo-tree-id2305 . -5) (undo-tree-id2307 . -5) (undo-tree-id2309 . -5) (#("igDir(" 0 5 (fontified nil) 5 6 (fontified nil)) . 279) (undo-tree-id2310 . -5) (undo-tree-id2312 . -1) (undo-tree-id2314 . -2) (undo-tree-id2316 . -3) (undo-tree-id2318 . -4) (undo-tree-id2320 . -5) (284 . 285) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 284) (undo-tree-id2322 . -1) (undo-tree-id2324 . 2) (undo-tree-id2326 . -1) (#(")" 0 1 (fontified nil)) . 285) (undo-tree-id2328 . -1) (undo-tree-id2330 . -1) (286 . 287) (#(";" 0 1 (fontified t)) . 286) (undo-tree-id2332 . 1)) (23701 38054 538690 910000) 0 nil]) ((241 . 242)) ((#(";" 0 1 (fontified t)) . 241)) (23701 38054 320606 463000) 0 nil]) ((#("        .config_dir();
" 0 23 (fontified t)) . 242) (undo-tree-id2335 . -21) (undo-tree-id2336 . 2) (undo-tree-id2337 . -21) (undo-tree-id2338 . -22) (undo-tree-id2339 . 2) (undo-tree-id2340 . 2) (undo-tree-id2341 . 7) (undo-tree-id2342 . -19) (undo-tree-id2343 . 2) (undo-tree-id2344 . 2) (t 23701 37996 905154 667000)) ((242 . 265)) (23701 38054 111279 110000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 404) (undo-tree-id2269 . -1) (undo-tree-id2270 . 1) (403 . 404) (402 . 404) (#("(" 0 1 (fontified nil)) . -402) (undo-tree-id2271 . -1) (undo-tree-id2272 . -1) (402 . 403) (395 . 402) (#("d" 0 1 (fontified t)) . -395) (undo-tree-id2273 . -1) 396 (394 . 396) (t 23701 37978 11875 46000)) nil (23701 38050 259259 959000) 0 nil] [nil ([nil nil ((#("," 0 1 (fontified t)) . 393) (undo-tree-id2261 . 1) (undo-tree-id2262 . 1) (undo-tree-id2263 . 1) (undo-tree-id2264 . 1) (undo-tree-id2265 . 1)) ((393 . 394)) (23701 37990 967265 153000) 0 nil]) ((#("r" 0 1 (fontified t)) . 393) (undo-tree-id2266 . -1) (undo-tree-id2267 . -1) (undo-tree-id2268 . 1) (t 23701 37978 11875 46000)) ((393 . 394)) (23701 37990 971540 24000) 0 nil]) ((381 . 382)) nil (23701 37991 412252 176000) 0 nil]) ((#("\"" 0 1 (fontified t face font-lock-string-face)) . 374) (undo-tree-id2258 . 1) (undo-tree-id2259 . -1) (undo-tree-id2260 . -1)) nil (23701 37977 977736 220000) 0 nil]) ((373 . 375) (#("\"" 0 1 (fontified nil)) . -373) (373 . 374) (t 23701 37957 915262 958000)) nil (23701 37977 977747 710000) 0 nil]) ((#("Path::new(" 0 4 (fontified t face font-lock-type-face) 4 10 (fontified t)) . 365) (undo-tree-id2255 . -4)) nil (23701 37957 881478 671000) 0 nil]) ((#(")" 0 1 (fontified t)) . 420) (undo-tree-id2256 . 1) (undo-tree-id2257 . 1) (t 23701 37929 315335 900000)) nil (23701 37957 881498 642000) 0 nil]) ((420 . 421) (#(")" 0 1 (fontified nil)) . 420) (undo-tree-id2252 . 1) (undo-tree-id2253 . 1) (419 . 420) (#(" " 0 1 (fontified nil)) . -419) (419 . 420) (#(")" 0 1 (fontified nil)) . -419) (419 . 420)) nil (23701 37929 251890 597000) 0 nil]) ((#(")" 0 1 (fontified t)) . 390) (undo-tree-id2254 . 1) (t 23701 37893 835418 232000)) nil (23701 37929 251898 144000) 0 nil]) ((1 . 938) (#("use directories::{BaseDirs, ProjectDirs, UserDirs};
use std::env;
use std::fs;
use std::io::prelude::*;
use std::path::Path;

fn main() -> std::io::Result<()> {
    let config_dir =  ProjectDirs::from(\"\", \"\", \"qutebrowser\").unwrap().config_dir();
    let input = \"F https://fosstodon.org\\nG https://github.com\";
    let input = fs::read_to_string(Path::new(format!({}/{}), config_dir, \"global_jumps\"))?;
    for line in input.lines() {
        dbg!(&line);
        let mut words = line.split(\" \");
        let (key, url) = (words.nth(0).unwrap(), words.nth(0).unwrap());
        let cmd = format!(
            \"bind '{} :buffer {}\\nbind \\\"{} :open -t {}\\n\",
            key, url, key, url
        );
        let mut file = fs::File::create(env::var(\"QUTE_FIFO\").unwrap())?;
        file.write_all(cmd.as_bytes())?;
    }
    let jumps = vec![(\"F\", \"https://fosstodon.org\"), (\"G\", \"https://github.com\")];

    Ok(())
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 15 (fontified t face font-lock-constant-face) 15 18 (fontified t) 18 26 (fontified t face font-lock-type-face) 26 28 (fontified t) 28 39 (fontified t face font-lock-type-face) 39 41 (fontified t) 41 49 (fontified t face font-lock-type-face) 49 51 (fontified t) 51 52 (fontified t) 52 55 (fontified t face font-lock-keyword-face) 55 56 (fontified t) 56 59 (fontified t face font-lock-constant-face) 59 66 (fontified t) 66 69 (fontified t face font-lock-keyword-face) 69 70 (fontified t) 70 73 (fontified t face font-lock-constant-face) 73 79 (fontified t) 79 82 (fontified t face font-lock-keyword-face) 82 83 (fontified t) 83 86 (fontified t face font-lock-constant-face) 86 88 (fontified t) 88 90 (fontified t face font-lock-constant-face) 90 92 (fontified t) 92 99 (fontified t face font-lock-constant-face) 99 104 (fontified t) 104 107 (fontified t face font-lock-keyword-face) 107 108 (fontified t) 108 111 (fontified t face font-lock-constant-face) 111 113 (fontified t) 113 117 (fontified t face font-lock-constant-face) 117 119 (fontified t) 119 123 (fontified t face font-lock-type-face) 123 126 (fontified t) 126 128 (fontified t face font-lock-keyword-face) 128 129 (fontified t) 129 133 (fontified t face font-lock-function-name-face) 133 137 (fontified t) 137 138 (fontified t syntax-table #2#) 138 139 (fontified t) 139 142 (fontified t face font-lock-constant-face) 142 144 (fontified t) 144 146 (fontified t face font-lock-constant-face) 146 148 (fontified t) 148 154 (fontified t face font-lock-type-face) 154 161 (fontified t) 161 165 (fontified t) 165 168 (fontified t face font-lock-keyword-face) 168 169 (fontified t) 169 179 (fontified t face font-lock-variable-name-face) 179 182 (fontified t) 182 183 (fontified t) 183 194 (fontified t face font-lock-type-face) 194 201 (fontified t) 201 203 (fontified t face font-lock-string-face) 203 205 (fontified t) 205 207 (fontified t face font-lock-string-face) 207 209 (fontified t) 209 215 (fontified t face font-lock-string-face) 215 216 (fontified t face font-lock-string-face) 216 220 (fontified t face font-lock-string-face) 220 221 (fontified t syntax-table #1# face font-lock-string-face) 221 222 (fontified t face font-lock-string-face) 222 224 (fontified t) 224 230 (fontified t) 230 233 (fontified t) 233 243 (fontified t) 243 246 (fontified t) 246 247 (fontified t) 247 251 (fontified t) 251 254 (fontified t face font-lock-keyword-face) 254 255 (fontified t) 255 260 (fontified t face font-lock-variable-name-face) 260 263 (fontified t) 263 310 (fontified t face font-lock-string-face) 310 311 (fontified t) 311 312 (fontified t) 312 316 (fontified t) 316 319 (fontified t face font-lock-keyword-face) 319 320 (fontified t) 320 325 (fontified t face font-lock-variable-name-face) 325 328 (fontified t) 328 330 (fontified t face font-lock-constant-face) 330 347 (fontified t) 347 351 (fontified t face font-lock-type-face) 351 357 (fontified t) 357 364 (fontified t face rust-builtin-formatting-macro-face) 364 365 (fontified t) 365 368 (fontified t) 368 373 (fontified t) 373 385 (fontified t) 385 398 (fontified t face font-lock-string-face) 398 399 (fontified t face font-lock-string-face) 399 401 (fontified t) 401 402 (fontified t face rust-question-mark-face) 402 404 (fontified t) 404 408 (fontified t) 408 411 (fontified t face font-lock-keyword-face) 411 417 (fontified t) 417 419 (fontified t face font-lock-keyword-face) 419 444 (fontified t) 444 448 (fontified t face font-lock-preprocessor-face) 448 465 (fontified t) 465 468 (fontified t face font-lock-keyword-face) 468 469 (fontified t) 469 472 (fontified t face font-lock-keyword-face) 472 473 (fontified t) 473 478 (fontified t face font-lock-variable-name-face) 478 492 (fontified t) 492 495 (fontified t face font-lock-string-face) 495 506 (fontified t) 506 509 (fontified t face font-lock-keyword-face) 509 579 (fontified t) 579 582 (fontified t face font-lock-keyword-face) 582 583 (fontified t) 583 586 (fontified t face font-lock-variable-name-face) 586 589 (fontified t) 589 596 (fontified t face rust-builtin-formatting-macro-face) 596 610 (fontified t) 610 617 (fontified t face font-lock-string-face) 617 619 (fontified t face rust-string-interpolation-face) 619 628 (fontified t face font-lock-string-face) 628 630 (fontified t face rust-string-interpolation-face) 630 656 (fontified t face font-lock-string-face) 656 708 (fontified t) 708 711 (fontified t face font-lock-keyword-face) 711 712 (fontified t) 712 715 (fontified t face font-lock-keyword-face) 715 716 (fontified t) 716 720 (fontified t face font-lock-variable-name-face) 720 723 (fontified t) 723 725 (fontified t face font-lock-constant-face) 725 727 (fontified t) 727 731 (fontified t face font-lock-type-face) 731 740 (fontified t) 740 743 (fontified t face font-lock-constant-face) 743 747 (fontified t) 747 749 (fontified t) 749 752 (fontified t face font-lock-string-face) 752 760 (fontified t face font-lock-string-face) 760 771 (fontified t) 771 772 (fontified t face rust-question-mark-face) 772 774 (fontified t) 774 812 (fontified t) 812 813 (fontified t face rust-question-mark-face) 813 818 (fontified t) 818 821 (fontified t) 821 825 (fontified t) 825 828 (fontified t face font-lock-keyword-face) 828 829 (fontified t) 829 834 (fontified t face font-lock-variable-name-face) 834 837 (fontified t) 837 841 (fontified t face font-lock-preprocessor-face) 841 843 (fontified t) 843 846 (fontified t face font-lock-string-face) 846 848 (fontified t) 848 871 (fontified t face font-lock-string-face) 871 875 (fontified t) 875 878 (fontified t face font-lock-string-face) 878 880 (fontified t) 880 900 (fontified t face font-lock-string-face) 900 904 (fontified t) 904 909 (fontified t) 909 911 (fontified t face font-lock-type-face) 911 918 (fontified t)) . 1) (undo-tree-id2086 . -357) (undo-tree-id2087 . 520) (undo-tree-id2088 . 742) (undo-tree-id2089 . -179) (undo-tree-id2090 . 735) (undo-tree-id2091 . -194) (undo-tree-id2092 . 708) (undo-tree-id2093 . -221) (undo-tree-id2094 . 678) (undo-tree-id2095 . -243) (undo-tree-id2096 . 590) (undo-tree-id2097 . -330) (undo-tree-id2098 . 519) (undo-tree-id2099 . 519) (undo-tree-id2100 . 562) (undo-tree-id2101 . -357) (undo-tree-id2102 . 519) (undo-tree-id2103 . 519) (undo-tree-id2104 . 519) (undo-tree-id2105 . 519) (undo-tree-id2106 . 519) (undo-tree-id2107 . 519) (undo-tree-id2108 . 519) (undo-tree-id2109 . 519) (undo-tree-id2110 . 519) (undo-tree-id2111 . 519) (undo-tree-id2112 . 519) (undo-tree-id2113 . 519) (undo-tree-id2114 . 519) (undo-tree-id2115 . 519) (undo-tree-id2116 . 519) (undo-tree-id2117 . 519) (undo-tree-id2118 . 519) (undo-tree-id2119 . 519) (undo-tree-id2120 . 519) (undo-tree-id2121 . 519) (undo-tree-id2122 . 519) (undo-tree-id2123 . 519) (undo-tree-id2124 . 519) (undo-tree-id2125 . 519) (undo-tree-id2126 . 519) (undo-tree-id2127 . 519) (undo-tree-id2128 . 519) (undo-tree-id2129 . 561) (undo-tree-id2130 . -358) (undo-tree-id2131 . 538) (undo-tree-id2132 . -383) (undo-tree-id2133 . -365) (undo-tree-id2134 . -370) (undo-tree-id2135 . -18) (undo-tree-id2136 . -26) (undo-tree-id2137 . -41) (undo-tree-id2138 . -49) (undo-tree-id2139 . -347) (undo-tree-id2140 . -400) (undo-tree-id2141 . -365) (undo-tree-id2142 . -370) (undo-tree-id2143 . -18) (undo-tree-id2144 . -26) (undo-tree-id2145 . -41) (undo-tree-id2146 . -49) (undo-tree-id2147 . -347) (undo-tree-id2148 . -400) (undo-tree-id2149 . 520) (undo-tree-id2150 . 523) (undo-tree-id2151 . -365) (undo-tree-id2152 . -370) (undo-tree-id2153 . -18) (undo-tree-id2154 . -26) (undo-tree-id2155 . -41) (undo-tree-id2156 . -49) (undo-tree-id2157 . -347) (undo-tree-id2158 . -400) (undo-tree-id2159 . 520) (undo-tree-id2160 . 522) (undo-tree-id2161 . -365) (undo-tree-id2162 . -370) (undo-tree-id2163 . -18) (undo-tree-id2164 . -26) (undo-tree-id2165 . -41) (undo-tree-id2166 . -49) (undo-tree-id2167 . -347) (undo-tree-id2168 . -400) (undo-tree-id2169 . 520) (undo-tree-id2170 . 521) (undo-tree-id2171 . -365) (undo-tree-id2172 . -370) (undo-tree-id2173 . -18) (undo-tree-id2174 . -26) (undo-tree-id2175 . -41) (undo-tree-id2176 . -49) (undo-tree-id2177 . -347) (undo-tree-id2178 . -400) (undo-tree-id2179 . 521) (undo-tree-id2180 . 521) (undo-tree-id2181 . 521) (undo-tree-id2182 . 521) (undo-tree-id2183 . 521) (undo-tree-id2184 . 521) (undo-tree-id2185 . 521) (undo-tree-id2186 . 521) (undo-tree-id2187 . 521) (undo-tree-id2188 . 521) (undo-tree-id2189 . 521) (undo-tree-id2190 . 521) (undo-tree-id2191 . 521) (undo-tree-id2192 . 521) (undo-tree-id2193 . 521) (undo-tree-id2194 . 521) (undo-tree-id2195 . -397) (undo-tree-id2196 . -397) (undo-tree-id2197 . 521) (undo-tree-id2198 . 521) (undo-tree-id2199 . 521) (undo-tree-id2200 . 521)) nil (23701 37893 772490 577000) 0 nil]) ((387 . 399) (386 . 388) (#("\"" 0 1 (fontified nil)) . -386) (386 . 387) (384 . 386) (374 . 384) (#("config_d" 0 8 (fontified t)) . -374) (undo-tree-id2201 . -8) 382 (380 . 382) (#("." 0 1 (fontified t)) . -380) (undo-tree-id2202 . -1) 381 (372 . 381) (#(")" 0 1 (fontified nil)) . 372) (371 . 372) (#("}" 0 1 (fontified nil)) . 371) (370 . 371) (369 . 371) (#("{" 0 1 (fontified nil)) . -369) (369 . 370) (368 . 369) (#("}" 0 1 (fontified nil)) . 368) (367 . 368) (366 . 368) (#("{" 0 1 (fontified nil)) . -366) (366 . 367) (365 . 367) (#("(" 0 1 (fontified nil)) . -365) (358 . 366) (#("\"~/.config/qutebrowser/global_marks\"" 0 36 (fontified t face font-lock-string-face)) . 358) (undo-tree-id2203 . 36) (undo-tree-id2204 . 36) (undo-tree-id2205 . 36) (undo-tree-id2206 . 36) (undo-tree-id2207 . 36) (undo-tree-id2208 . 36) (undo-tree-id2209 . 36) (undo-tree-id2210 . 36) (undo-tree-id2211 . 36) (undo-tree-id2212 . 36) (undo-tree-id2213 . 36) (undo-tree-id2214 . 36) (undo-tree-id2215 . 36) (undo-tree-id2216 . 36) (undo-tree-id2217 . 36) (undo-tree-id2218 . 36) (undo-tree-id2219 . 36) (undo-tree-id2220 . 36) (undo-tree-id2221 . 36) (undo-tree-id2222 . 36) (undo-tree-id2223 . 36) (undo-tree-id2224 . 36) (undo-tree-id2225 . 36) (undo-tree-id2226 . 36)) nil (23701 37893 772538 386000) 0 nil]) ((#("    }
" 0 5 (fontified t) 5 6 (fontified t)) . 248) (undo-tree-id2227 . -4) 252) nil (23701 37893 772547 534000) 0 nil]) ((#("        proj_dirs.config_dir();
" 0 32 (fontified t)) . 248) (undo-tree-id2228 . -30) 278) nil (23701 37893 772550 706000) 0 nil]) ((246 . 247) (#(")" 0 1 (fontified nil)) . 246) (245 . 246) (244 . 246) (#("(" 0 1 (fontified nil)) . -244) (244 . 245) (234 . 244) (#("confi" 0 5 (fontified t)) . -234) (undo-tree-id2229 . -5) 239 (233 . 239) (#(")" 0 1 (fontified nil)) . 233) (232 . 233) (231 . 233) (#("(" 0 1 (fontified nil)) . -231) (231 . 232) (225 . 231) (#("unwr" 0 4 (fontified t)) . -225) (undo-tree-id2230 . -4) 229 (227 . 229) (#("w" 0 1 (fontified t)) . -227) (undo-tree-id2231 . -1) (#("r" 0 1 (fontified t)) . -228) (undo-tree-id2232 . -1) (#("a" 0 1 (fontified t)) . -229) (undo-tree-id2233 . -1) 230 (227 . 230) (#("r" 0 1 (fontified t)) . -227) (undo-tree-id2234 . -1) (#("a" 0 1 (fontified t)) . -228) (undo-tree-id2235 . -1) 229 (227 . 229) (#("w" 0 1 (fontified t)) . -227) (undo-tree-id2236 . -1) (#("a" 0 1 (fontified t)) . -228) (undo-tree-id2237 . -1) (#("p" 0 1 (fontified t)) . -229) (undo-tree-id2238 . -1) 230 (227 . 230) (#("q" 0 1 (fontified t)) . -227) (undo-tree-id2239 . -1) 228 (224 . 228) (#(" " 0 1 (fontified t)) . -224) (undo-tree-id2240 . -1) (#("{" 0 1 (fontified t)) . -225) (undo-tree-id2241 . -1) 226) nil (23701 37893 772578 533000) 0 nil]) ((#(" " 0 1 (fontified t)) . 184)) nil (23701 37893 772585 983000) 0 nil]) ((#("=" 0 1 (fontified t)) . 184)) nil (23701 37893 772587 429000) 0 nil]) ((#("Some(proj_dirs) " 0 4 (fontified t face font-lock-type-face) 4 16 (fontified t)) . 184)) nil (23701 37893 772588 841000) 0 nil]) ((174 . 183) (#("f" 0 1 (fontified t face font-lock-variable-name-face)) . -174) (undo-tree-id2242 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -175) (undo-tree-id2243 . -1) (#("g" 0 1 (fontified t face font-lock-variable-name-face)) . -176) (undo-tree-id2244 . -1) (#("_" 0 1 (fontified t face font-lock-variable-name-face)) . -177) (undo-tree-id2245 . -1) 178 (170 . 178)) nil (23701 37893 772595 952000) 0 nil]) ((#(" " 0 1 (fontified t)) . 166)) nil (23701 37893 772598 350000) 0 nil]) ((#("if" 0 2 (fontified t face font-lock-keyword-face)) . 166) (undo-tree-id2246 . -1) 167) nil (23701 37893 772600 879000) 0 nil]) ((172 . 173)) nil (23701 37893 772602 505000) 0 nil]) ((222 . 229) (218 . 222) (#("App" 0 3 (fontified t face font-lock-string-face)) . 218) (undo-tree-id2247 . 3)) nil (23701 37893 772605 380000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 218) (undo-tree-id2248 . 1)) nil (23701 37893 772608 132000) 0 nil]) ((#("Bar" 0 3 (fontified t face font-lock-string-face)) . 218) (undo-tree-id2249 . -2) 220) nil (23701 37893 772610 921000) 0 nil]) ((#("Foo Corp" 0 8 (fontified t face font-lock-string-face)) . 214) (undo-tree-id2250 . -3) 217) nil (23701 37893 772613 676000) 0 nil]) ((#("com" 0 3 (fontified t face font-lock-string-face)) . 210) (undo-tree-id2251 . -1) 211 (t 23701 37729 889647 577000)) nil (23701 37893 772616 656000) 0 nil]) ((1 . 944) (#("use std::env;
use std::fs;
use std::io::prelude::*;
use std::path::Path;
use directories::{BaseDirs, UserDirs, ProjectDirs};


fn main() -> std::io::Result<()> {
    if let Some(proj_dirs) = ProjectDirs::from(\"com\", \"Foo Corp\",  \"Bar App\") {
        proj_dirs.config_dir();
    }
    let input = \"F https://fosstodon.org\\nG https://github.com\";
    let input = fs::read_to_string(Path::new(\"~/.config/qutebrowser/global_marks\"))?;
    for line in input.lines() {
        dbg!(&line);
        let mut words = line.split(\" \");
        let (key, url) = (words.nth(0).unwrap(), words.nth(0).unwrap());
        let cmd = format!(
            \"bind '{} :buffer {}\\nbind \\\"{} :open -t {}\\n\",
            key, url, key, url
        );
        let mut file = fs::File::create(env::var(\"QUTE_FIFO\").unwrap())?;
        file.write_all(cmd.as_bytes())?;
    }
    let jumps = vec![(\"F\", \"https://fosstodon.org\"), (\"G\", \"https://github.com\")];

    Ok(())
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 7 (fontified t face font-lock-constant-face) 7 13 (fontified t) 13 14 (fontified t) 14 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t) 18 21 (fontified t face font-lock-constant-face) 21 27 (fontified t) 27 30 (fontified t face font-lock-keyword-face) 30 31 (fontified t) 31 34 (fontified t face font-lock-constant-face) 34 36 (fontified t) 36 38 (fontified t face font-lock-constant-face) 38 40 (fontified t) 40 47 (fontified t face font-lock-constant-face) 47 52 (fontified t) 52 55 (fontified t face font-lock-keyword-face) 55 56 (fontified t) 56 59 (fontified t face font-lock-constant-face) 59 61 (fontified t) 61 65 (fontified t face font-lock-constant-face) 65 67 (fontified t) 67 71 (fontified t face font-lock-type-face) 71 72 (fontified t) 72 73 (fontified t) 73 76 (fontified t face font-lock-keyword-face) 76 77 (fontified t) 77 88 (fontified t face font-lock-constant-face) 88 91 (fontified t) 91 99 (fontified t face font-lock-type-face) 99 101 (fontified t) 101 109 (fontified t face font-lock-type-face) 109 111 (fontified t) 111 122 (fontified t face font-lock-type-face) 122 126 (fontified t) 126 127 (fontified t) 127 129 (fontified t face font-lock-keyword-face) 129 130 (fontified t) 130 134 (fontified t face font-lock-function-name-face) 134 138 (fontified t) 138 139 (fontified t syntax-table #2#) 139 140 (fontified t) 140 143 (fontified t face font-lock-constant-face) 143 145 (fontified t) 145 147 (fontified t face font-lock-constant-face) 147 149 (fontified t) 149 155 (fontified t face font-lock-type-face) 155 161 (fontified t) 161 162 (fontified t rear-nonsticky t) 162 166 (fontified t) 166 168 (fontified t face font-lock-keyword-face) 168 169 (fontified t) 169 172 (fontified t face font-lock-keyword-face) 172 173 (fontified t) 173 177 (fontified t face font-lock-type-face) 177 191 (fontified t) 191 202 (fontified t face font-lock-type-face) 202 209 (fontified t) 209 214 (fontified t face font-lock-string-face) 214 216 (fontified t) 216 226 (fontified t face font-lock-string-face) 226 229 (fontified t) 229 238 (fontified t face font-lock-string-face) 238 241 (fontified t) 241 242 (fontified t) 242 250 (fontified t) 250 272 (fontified t) 272 273 (rear-nonsticky t fontified t) 273 274 (fontified t) 274 279 (fontified t) 279 280 (fontified t) 280 284 (fontified t) 284 287 (fontified t face font-lock-keyword-face) 287 288 (fontified t) 288 293 (fontified t face font-lock-variable-name-face) 293 296 (fontified t) 296 343 (fontified t face font-lock-string-face) 343 345 (fontified t) 345 349 (fontified t) 349 352 (fontified t face font-lock-keyword-face) 352 353 (fontified t) 353 358 (fontified t face font-lock-variable-name-face) 358 361 (fontified t) 361 363 (fontified t face font-lock-constant-face) 363 380 (fontified t) 380 384 (fontified t face font-lock-type-face) 384 390 (fontified t) 390 426 (fontified t face font-lock-string-face) 426 428 (fontified t) 428 429 (fontified t face rust-question-mark-face) 429 430 (fontified t) 430 435 (fontified t) 435 438 (fontified t face font-lock-keyword-face) 438 444 (fontified t) 444 446 (fontified t face font-lock-keyword-face) 446 471 (fontified t) 471 475 (fontified t face font-lock-preprocessor-face) 475 492 (fontified t) 492 495 (fontified t face font-lock-keyword-face) 495 496 (fontified t) 496 499 (fontified t face font-lock-keyword-face) 499 500 (fontified t) 500 505 (fontified t face font-lock-variable-name-face) 505 519 (fontified t) 519 522 (fontified t face font-lock-string-face) 522 533 (fontified t) 533 536 (fontified t face font-lock-keyword-face) 536 606 (fontified t) 606 609 (fontified t face font-lock-keyword-face) 609 610 (fontified t) 610 613 (fontified t face font-lock-variable-name-face) 613 616 (fontified t) 616 623 (fontified t face rust-builtin-formatting-macro-face) 623 637 (fontified t) 637 644 (fontified t face font-lock-string-face) 644 646 (fontified t face rust-string-interpolation-face) 646 655 (fontified t face font-lock-string-face) 655 657 (fontified t face rust-string-interpolation-face) 657 683 (fontified t face font-lock-string-face) 683 735 (fontified t) 735 738 (fontified t face font-lock-keyword-face) 738 739 (fontified t) 739 742 (fontified t face font-lock-keyword-face) 742 743 (fontified t) 743 744 (fontified t face font-lock-variable-name-face) 744 745 (fontified t face font-lock-variable-name-face) 745 747 (fontified t face font-lock-variable-name-face) 747 750 (fontified t) 750 752 (fontified t face font-lock-constant-face) 752 754 (fontified t) 754 758 (fontified t face font-lock-type-face) 758 767 (fontified t) 767 770 (fontified t face font-lock-constant-face) 770 776 (fontified t) 776 780 (fontified t face font-lock-string-face) 780 787 (face font-lock-string-face fontified t) 787 798 (fontified t) 798 799 (face rust-question-mark-face fontified t) 799 801 (fontified t) 801 839 (fontified t) 839 840 (fontified t face rust-question-mark-face) 840 845 (fontified t) 845 848 (fontified t) 848 852 (fontified t) 852 855 (fontified t face font-lock-keyword-face) 855 856 (fontified t) 856 861 (fontified t face font-lock-variable-name-face) 861 864 (fontified t) 864 868 (fontified t face font-lock-preprocessor-face) 868 870 (fontified t) 870 873 (fontified t face font-lock-string-face) 873 875 (fontified t) 875 898 (fontified t face font-lock-string-face) 898 902 (fontified t) 902 905 (fontified t face font-lock-string-face) 905 907 (fontified t) 907 927 (fontified t face font-lock-string-face) 927 930 (fontified t) 930 931 (fontified t) 931 936 (fontified t) 936 938 (fontified t face font-lock-type-face) 938 945 (fontified t)) . 1) (undo-tree-id2021 . -242) (undo-tree-id2022 . 666) (undo-tree-id2023 . -162) (undo-tree-id2024 . -273) (undo-tree-id2025 . -162) (undo-tree-id2026 . 665) (undo-tree-id2027 . -162) (undo-tree-id2028 . -242) (undo-tree-id2029 . 518) (undo-tree-id2030 . 518) (undo-tree-id2031 . 518) (undo-tree-id2032 . 518) (undo-tree-id2033 . 518) (undo-tree-id2034 . 518) (undo-tree-id2035 . -427) (undo-tree-id2036 . -427) (undo-tree-id2037 . 518) (undo-tree-id2038 . 518) (undo-tree-id2039 . 518) (undo-tree-id2040 . 518) (undo-tree-id2041 . 518) (undo-tree-id2042 . 518) (undo-tree-id2043 . 518) (undo-tree-id2044 . 518) (undo-tree-id2045 . -427) (undo-tree-id2046 . -427) (undo-tree-id2047 . -72) (undo-tree-id2048 . -72) (undo-tree-id2049 . 834) (undo-tree-id2050 . -122) (undo-tree-id2051 . 818) (undo-tree-id2052 . -129) (undo-tree-id2053 . 678) (undo-tree-id2054 . -270) (undo-tree-id2055 . -91) (undo-tree-id2056 . -99) (undo-tree-id2057 . -101) (undo-tree-id2058 . -109) (undo-tree-id2059 . -288) (undo-tree-id2060 . -293) (undo-tree-id2061 . -856) (undo-tree-id2062 . -861) (undo-tree-id2063 . -288) (undo-tree-id2064 . -293) (undo-tree-id2065 . -856) (undo-tree-id2066 . -861) (undo-tree-id2067 . -91) (undo-tree-id2068 . -99) (undo-tree-id2069 . -101) (undo-tree-id2070 . -109) (undo-tree-id2071 . -288) (undo-tree-id2072 . -293) (undo-tree-id2073 . -856) (undo-tree-id2074 . -861) (undo-tree-id2075 . 667) (undo-tree-id2076 . 667) (undo-tree-id2077 . 667) (undo-tree-id2078 . 667) (undo-tree-id2079 . 667) (undo-tree-id2080 . 667) (undo-tree-id2081 . -278) (undo-tree-id2082 . -278) (undo-tree-id2083 . 667) (undo-tree-id2084 . 667)) nil (23701 37729 868276 745000) 0 nil]) ((#("    " 0 4 (fontified nil)) . -279) (undo-tree-id2085 . -4) (283 . 284) (274 . 283) 247) nil (23701 37729 868288 230000) 0 nil]) ((#("    " 0 4 (fontified nil)) . -251) (243 . 251) (163 . 167) 239 (t 23701 37707 389804 618000)) nil (23701 37729 868292 384000) 0 nil]) ((nil rear-nonsticky nil 162 . 163) (#("
" 0 1 (fontified nil)) . -266) (162 . 267) 128) nil (23701 37707 375240 611000) 0 nil]) ((#("if let Some(proj_dirs) = ProjectDirs::from(\"com\", \"Foo Corp\",  \"Bar App\") {
    proj_dirs.config_dir();
" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 11 (fontified t face font-lock-type-face) 11 25 (fontified t) 25 36 (fontified t face font-lock-type-face) 36 43 (fontified t) 43 48 (fontified t face font-lock-string-face) 48 50 (fontified t) 50 60 (fontified t face font-lock-string-face) 60 63 (fontified t) 63 72 (fontified t face font-lock-string-face) 72 102 (fontified t) 102 103 (fontified t rear-nonsticky t) 103 104 (fontified t)) . 127) (undo-tree-id2013 . -102) (undo-tree-id2014 . 1) (undo-tree-id2015 . -26) (undo-tree-id2016 . -102) (undo-tree-id2017 . -102) (undo-tree-id2018 . -102) (undo-tree-id2019 . -26) (undo-tree-id2020 . -102) 229) nil (23701 37707 375261 139000) 0 nil]) ((nil rear-nonsticky nil 229 . 230) (nil fontified nil 74 . 230) (74 . 230) (73 . 74) (t 23701 37401 775311 588000) 72) nil (23701 37707 375266 59000) 0 nil] [nil nil ((nil rear-nonsticky nil 228 . 229) (nil fontified nil 73 . 229) (73 . 229) 72 (t 23701 37401 775311 588000)) ((#("use directories::{BaseDirs, UserDirs, ProjectDirs};

if let Some(proj_dirs) = ProjectDirs::from(\"com\", \"Foo Corp\",  \"Bar App\") {
    proj_dirs.config_dir();" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil) 4 15 (fontified nil face font-lock-constant-face) 15 18 (fontified nil) 18 26 (fontified nil face font-lock-type-face) 26 28 (fontified nil) 28 36 (fontified nil face font-lock-type-face) 36 38 (fontified nil) 38 49 (fontified nil face font-lock-type-face) 49 53 (fontified nil) 53 55 (fontified nil face font-lock-keyword-face) 55 56 (fontified nil) 56 59 (fontified nil face font-lock-keyword-face) 59 60 (fontified nil) 60 64 (fontified nil face font-lock-type-face) 64 78 (fontified nil) 78 89 (fontified nil face font-lock-type-face) 89 96 (fontified nil) 96 101 (fontified nil face font-lock-string-face) 101 103 (fontified nil) 103 113 (fontified nil face font-lock-string-face) 113 116 (fontified nil) 116 125 (fontified nil face font-lock-string-face) 125 129 (fontified nil) 129 155 (fontified nil) 155 156 (fontified nil rear-nonsticky nil)) . 73) (undo-tree-id2000 . -155) (undo-tree-id2001 . 1) (undo-tree-id2002 . -155) (undo-tree-id2003 . 1) (undo-tree-id2004 . -155) (undo-tree-id2005 . 1) (undo-tree-id2006 . -155) (undo-tree-id2007 . -155) (undo-tree-id2008 . 1) (undo-tree-id2009 . 6) (undo-tree-id2010 . -153) (undo-tree-id2011 . 1) (undo-tree-id2012 . 1) (nil fontified t 198 . 202) (nil fontified t 189 . 198) (nil fontified t 186 . 189) (nil fontified t 176 . 186) (nil fontified t 174 . 176) (nil fontified t 169 . 174) (nil fontified t 162 . 169) (nil fontified t 151 . 162) (nil fontified t 137 . 151) (nil fontified t 133 . 137) (nil fontified t 132 . 133) (nil fontified t 129 . 132) (nil fontified t 128 . 129) (nil fontified t 126 . 128) (nil fontified t 122 . 126) (nil fontified t 111 . 122) (nil fontified t 109 . 111) (nil fontified t 101 . 109) (nil fontified t 99 . 101) (nil fontified t 91 . 99) (nil fontified t 88 . 91) (nil fontified t 77 . 88) (nil fontified t 76 . 77) (nil fontified t 73 . 76) (nil rear-nonsticky t 228 . 229)) (23701 37691 814093 565000) 0 nil]) ((1 . 775) (#("use std::env;
use std::fs;
use std::path::Path;
use std::io::prelude::*;

fn main() -> std::io::Result<()> {
    let input = \"F https://fosstodon.org\\nG https://github.com\";
    let input = fs::read_to_string(Path::new(\"~/.config/qutebrowser/global_marks\"))?;
    for line in input.lines() {
        dbg!(&line);
        let mut words = line.split(\" \");
        let (key, url) = (words.nth(0).unwrap(), words.nth(0).unwrap());
        let cmd = format!(
            \"bind '{} :buffer {}\\nbind \\\"{} :open -t {}\\n\",
            key, url, key, url
        );
        let mut file = fs::File::create(env::var(\"QUTE_FIFO\").unwrap())?;
        file.write_all(cmd.as_bytes())?;
    }
    let jumps = vec![(\"F\", \"https://fosstodon.org\"), (\"G\", \"https://github.com\")];

    Ok(())
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 7 (fontified t face font-lock-constant-face) 7 13 (fontified t) 13 14 (fontified t) 14 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t) 18 21 (fontified t face font-lock-constant-face) 21 23 (fontified t) 23 26 (fontified t) 26 27 (fontified t) 27 30 (fontified t face font-lock-keyword-face) 30 31 (fontified t) 31 34 (fontified t face font-lock-constant-face) 34 36 (fontified t) 36 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 46 (fontified t face font-lock-type-face) 46 47 (fontified t) 47 48 (fontified t) 48 51 (fontified t face font-lock-keyword-face) 51 52 (fontified t) 52 55 (fontified t face font-lock-constant-face) 55 57 (fontified t) 57 59 (fontified t face font-lock-constant-face) 59 61 (fontified t) 61 68 (fontified t face font-lock-constant-face) 68 73 (fontified t) 73 74 (fontified t) 74 76 (fontified t face font-lock-keyword-face) 76 77 (fontified t) 77 81 (fontified t face font-lock-function-name-face) 81 85 (fontified t) 85 86 (syntax-table #2# fontified t) 86 87 (fontified t) 87 90 (fontified t face font-lock-constant-face) 90 92 (fontified t) 92 94 (fontified t face font-lock-constant-face) 94 96 (fontified t) 96 102 (fontified t face font-lock-type-face) 102 109 (fontified t) 109 113 (fontified t) 113 116 (fontified t face font-lock-keyword-face) 116 117 (fontified t) 117 122 (fontified t face font-lock-variable-name-face) 122 125 (fontified t) 125 172 (fontified t face font-lock-string-face) 172 173 (fontified t) 173 174 (fontified t) 174 178 (fontified t) 178 181 (fontified t face font-lock-keyword-face) 181 182 (fontified t) 182 187 (fontified t face font-lock-variable-name-face) 187 190 (fontified t) 190 192 (fontified t face font-lock-constant-face) 192 194 (fontified t) 194 208 (fontified t) 208 209 (fontified t) 209 213 (fontified t face font-lock-type-face) 213 218 (fontified t) 218 219 (fontified t) 219 235 (fontified t face font-lock-string-face) 235 236 (fontified t face font-lock-string-face) 236 240 (fontified t face font-lock-string-face) 240 241 (fontified t face font-lock-string-face) 241 251 (fontified t face font-lock-string-face) 251 252 (fontified t face font-lock-string-face) 252 254 (fontified t face font-lock-string-face) 254 255 (fontified t face font-lock-string-face) 255 257 (fontified t) 257 258 (fontified t face rust-question-mark-face) 258 259 (fontified t) 259 260 (fontified t) 260 264 (fontified t) 264 267 (fontified t face font-lock-keyword-face) 267 273 (fontified t) 273 275 (fontified t face font-lock-keyword-face) 275 292 (fontified t) 292 300 (fontified t) 300 304 (fontified t face font-lock-preprocessor-face) 304 312 (fontified t) 312 313 (fontified t) 313 321 (fontified t) 321 322 (fontified t face font-lock-keyword-face) 322 324 (fontified t face font-lock-keyword-face) 324 325 (fontified t) 325 328 (fontified t face font-lock-keyword-face) 328 329 (fontified t) 329 334 (fontified t face font-lock-variable-name-face) 334 348 (fontified t) 348 351 (fontified t face font-lock-string-face) 351 354 (fontified t) 354 362 (fontified t) 362 365 (fontified t face font-lock-keyword-face) 365 390 (fontified t) 390 391 (fontified t) 391 399 (fontified t) 399 401 (fontified t) 401 413 (fontified t) 413 414 (fontified t) 414 422 (fontified t) 422 424 (fontified t) 424 427 (fontified t) 427 435 (fontified t) 435 438 (fontified t face font-lock-keyword-face) 438 439 (fontified t) 439 442 (fontified t face font-lock-variable-name-face) 442 445 (fontified t) 445 452 (fontified t face rust-builtin-formatting-macro-face) 452 466 (fontified t) 466 473 (fontified t face font-lock-string-face) 473 475 (fontified t face rust-string-interpolation-face) 475 484 (fontified t face font-lock-string-face) 484 486 (fontified t face rust-string-interpolation-face) 486 512 (fontified t face font-lock-string-face) 512 514 (fontified t) 514 544 (fontified t) 544 556 (fontified t) 556 559 (fontified t) 559 564 (fontified t) 564 567 (fontified t face font-lock-keyword-face) 567 568 (fontified t) 568 571 (fontified t face font-lock-keyword-face) 571 572 (fontified t) 572 576 (fontified t face font-lock-variable-name-face) 576 579 (fontified t) 579 581 (fontified t face font-lock-constant-face) 581 583 (fontified t) 583 587 (fontified t face font-lock-type-face) 587 596 (fontified t) 596 599 (fontified t face font-lock-constant-face) 599 605 (fontified t) 605 616 (fontified t face font-lock-string-face) 616 619 (fontified t) 619 621 (fontified t) 621 627 (fontified t) 627 628 (fontified t face rust-question-mark-face) 628 630 (fontified t) 630 668 (fontified t) 668 669 (fontified t face rust-question-mark-face) 669 681 (fontified t) 681 684 (fontified t face font-lock-keyword-face) 684 685 (fontified t) 685 690 (fontified t face font-lock-variable-name-face) 690 693 (fontified t) 693 697 (fontified t face font-lock-preprocessor-face) 697 699 (fontified t) 699 702 (fontified t face font-lock-string-face) 702 704 (fontified t) 704 727 (fontified t face font-lock-string-face) 727 731 (fontified t) 731 734 (fontified t face font-lock-string-face) 734 736 (fontified t) 736 756 (fontified t face font-lock-string-face) 756 760 (fontified t) 760 764 (fontified t) 764 765 (fontified t) 765 767 (fontified t face font-lock-type-face) 767 772 (fontified t) 772 774 (fontified t)) . 1) (undo-tree-id1885 . -255) (undo-tree-id1886 . 517) (undo-tree-id1887 . -322) (undo-tree-id1888 . -322) (undo-tree-id1889 . 206) (undo-tree-id1890 . -571) (undo-tree-id1891 . 474) (undo-tree-id1892 . -303) (undo-tree-id1893 . 449) (undo-tree-id1894 . -328) (undo-tree-id1895 . 402) (undo-tree-id1896 . -375) (undo-tree-id1897 . 361) (undo-tree-id1898 . 361) (undo-tree-id1899 . 584) (undo-tree-id1900 . -192) (undo-tree-id1901 . 516) (undo-tree-id1902 . 516) (undo-tree-id1903 . 516) (undo-tree-id1904 . 516) (undo-tree-id1905 . 516) (undo-tree-id1906 . 516) (undo-tree-id1907 . 519) (undo-tree-id1908 . 519) (undo-tree-id1909 . 519) (undo-tree-id1910 . 519) (undo-tree-id1911 . 519) (undo-tree-id1912 . 519) (undo-tree-id1913 . -322) (undo-tree-id1914 . -255) (undo-tree-id1915 . -255) (undo-tree-id1916 . 519) (undo-tree-id1917 . 519) (undo-tree-id1918 . 519) (undo-tree-id1919 . 519) (undo-tree-id1920 . 519) (undo-tree-id1921 . 519) (undo-tree-id1922 . 519) (undo-tree-id1923 . 519) (undo-tree-id1924 . -255) (undo-tree-id1925 . -255) (undo-tree-id1926 . 168) (undo-tree-id1927 . -610) (undo-tree-id1928 . 178) (undo-tree-id1929 . -599) (undo-tree-id1930 . 195) (undo-tree-id1931 . -581) (undo-tree-id1932 . 192) (undo-tree-id1933 . 192) (undo-tree-id1934 . 233) (undo-tree-id1935 . -544) (undo-tree-id1936 . 638) (undo-tree-id1937 . -145) (undo-tree-id1938 . 751) (undo-tree-id1939 . -25) (undo-tree-id1940 . 646) (undo-tree-id1941 . -133) (undo-tree-id1942 . 566) (undo-tree-id1943 . 566) (undo-tree-id1944 . 555) (undo-tree-id1945 . 566) (undo-tree-id1946 . -209) (undo-tree-id1947 . 555) (undo-tree-id1948 . -218) (undo-tree-id1949 . -218) (undo-tree-id1950 . 555) (undo-tree-id1951 . 555) (undo-tree-id1952 . 544) (undo-tree-id1953 . -241) (undo-tree-id1954 . 517) (undo-tree-id1955 . 519) (undo-tree-id1956 . -117) (undo-tree-id1957 . -122) (undo-tree-id1958 . -685) (undo-tree-id1959 . -690) (undo-tree-id1960 . 517) (undo-tree-id1961 . 517) (undo-tree-id1962 . 518) (undo-tree-id1963 . 518) (undo-tree-id1964 . 518) (undo-tree-id1965 . 518) (undo-tree-id1966 . 518) (undo-tree-id1967 . 518) (undo-tree-id1968 . 518) (undo-tree-id1969 . 518) (undo-tree-id1970 . 518) (undo-tree-id1971 . 518) (undo-tree-id1972 . 518) (undo-tree-id1973 . 518) (undo-tree-id1974 . 518) (undo-tree-id1975 . 518) (undo-tree-id1976 . 518) (undo-tree-id1977 . 518) (undo-tree-id1978 . -256) (undo-tree-id1979 . -256) (undo-tree-id1980 . 518) (undo-tree-id1981 . 518) (undo-tree-id1982 . 518) (undo-tree-id1983 . 518)) nil (23701 37691 820878 297000) 0 nil]) ((257 . 258)) nil (23701 37401 714328 738000) 0 nil]) ((#(")" 0 1 (fontified t)) . 220) (undo-tree-id1984 . 1) (undo-tree-id1985 . 1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . 1)) nil (23701 37401 714338 254000) 0 nil]) ((219 . 221) (#("(" 0 1 (fontified nil)) . -219) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (219 . 220) (210 . 219) (#("p" 0 1 (fontified t)) . -210) (undo-tree-id1993 . -1) (undo-tree-id1994 . 1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) 211 (210 . 211)) nil (23701 37401 714348 837000) 0 nil]) ((37 . 48) (#("P" 0 1 (fontified t face font-lock-type-face)) . -37) (undo-tree-id1997 . -1) 38 (34 . 38) (#("e" 0 1 (fontified t face font-lock-constant-face)) . -34) (undo-tree-id1998 . -1) (undo-tree-id1999 . -1) 35 (28 . 35) (27 . 28) (t 23701 37343 282405 302000) 26) nil (23701 37401 714358 401000) 0 nil]) ((548 . 552) (t 23701 37260 789682 206000)) nil (23701 37343 250816 178000) 0 nil]) ((227 . 228) (#("'" 0 1 (fontified nil)) . -227) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . 1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (#("'" 0 1 (fontified t)) . 228) (undo-tree-id1769 . -1) (undo-tree-id1770 . 1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (227 . 229) (#("'" 0 1 (fontified nil face rust-question-mark-face)) . -227) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (226 . 228) (#(";" 0 1 (fontified t)) . -226) (undo-tree-id1783 . -1) 227 (226 . 227) (#(")" 0 1 (fontified nil)) . 226) (225 . 226) (#(" " 0 1 (fontified nil)) . -225) (225 . 226) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -225) (225 . 226) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 225) (224 . 225) (#(" " 0 1 (fontified nil)) . -224) (224 . 225) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -224) (212 . 225) (198 . 212) (#("t" 0 1 (fontified t face font-lock-string-face)) . -198) (undo-tree-id1784 . -1) 199 (195 . 199) (#("f" 0 1 (fontified t face font-lock-string-face)) . -195) (undo-tree-id1785 . -1) 196 (190 . 196) (189 . 191) (#("\"" 0 1 (fontified nil)) . -189) (189 . 190) (188 . 190) (#("(" 0 1 (fontified nil)) . -188) (188 . 189) (174 . 188) (#("read_to" 0 7 (fontified t)) . -174) (undo-tree-id1786 . -7) 181 (170 . 181)) nil (23701 37260 716401 925000) 0 nil]) ((26 . 27)) nil (23701 37260 716414 439000) 0 nil]) ((#("File;" 0 4 (fontified t) 4 5 (fontified t)) . 26) (undo-tree-id1787 . 5) (undo-tree-id1788 . -4) (undo-tree-id1789 . -4) (undo-tree-id1790 . 5) (undo-tree-id1791 . 5) (undo-tree-id1792 . -4) (undo-tree-id1793 . 5) (undo-tree-id1794 . 5) (undo-tree-id1795 . 5) (undo-tree-id1796 . 5) (undo-tree-id1797 . -4) (undo-tree-id1798 . -4) (undo-tree-id1799 . -4) (undo-tree-id1800 . 5)) nil (23701 37260 716432 404000) 0 nil]) ((#(":" 0 1 (fontified t)) . -26) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (#(":" 0 1 (fontified t)) . -27) (undo-tree-id1803 . -1) (#("h" 0 1 (fontified t)) . -28) (undo-tree-id1804 . -1) 29 (28 . 29)) nil (23701 37260 716440 341000) 0 nil]) ((164 . 176) (159 . 164) 99) nil (23701 37260 716443 434000) 0 nil]) ((#("    let file = 
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 12 (fontified t face font-lock-variable-name-face) 12 15 (fontified t) 15 16 (fontified t)) . 95) (undo-tree-id1805 . 1) (undo-tree-id1806 . 1) (undo-tree-id1807 . 1) (undo-tree-id1808 . 1) (undo-tree-id1809 . 1) (undo-tree-id1810 . -15) (undo-tree-id1811 . -15) (undo-tree-id1812 . -12) (undo-tree-id1813 . 1) (undo-tree-id1814 . 1) (undo-tree-id1815 . 1) (undo-tree-id1816 . 1) (undo-tree-id1817 . 1) (undo-tree-id1818 . 1) (undo-tree-id1819 . 1) (undo-tree-id1820 . 1) (undo-tree-id1821 . 1) (undo-tree-id1822 . 1) (undo-tree-id1823 . 1) (undo-tree-id1824 . 1) (undo-tree-id1825 . 1) (undo-tree-id1826 . 1) (undo-tree-id1827 . 1) (undo-tree-id1828 . 1) (undo-tree-id1829 . 1) (undo-tree-id1830 . 1) (undo-tree-id1831 . 1) (undo-tree-id1832 . 1) (undo-tree-id1833 . 2) (undo-tree-id1834 . 2) (undo-tree-id1835 . 3) (undo-tree-id1836 . 2) (undo-tree-id1837 . 4) (undo-tree-id1838 . 3) 107) nil (23701 37260 716478 898000) 0 nil]) ((#("File::open()" 0 4 (fontified t face font-lock-type-face) 4 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t)) . 110) (undo-tree-id1839 . 1) (undo-tree-id1840 . -6) (undo-tree-id1841 . -7) (undo-tree-id1842 . -7) (undo-tree-id1843 . -8) (undo-tree-id1844 . -8) (undo-tree-id1845 . -10) (undo-tree-id1846 . -9) (undo-tree-id1847 . -10) (undo-tree-id1848 . -10) (undo-tree-id1849 . -11) (undo-tree-id1850 . -11) (undo-tree-id1851 . -12) (undo-tree-id1852 . -11) (undo-tree-id1853 . -12) (undo-tree-id1854 . 3) (undo-tree-id1855 . 3) (undo-tree-id1856 . 4) (undo-tree-id1857 . 3) (undo-tree-id1858 . -8) (undo-tree-id1859 . -8) (undo-tree-id1860 . 4) (undo-tree-id1861 . 3) (undo-tree-id1862 . 5) (undo-tree-id1863 . 4) (undo-tree-id1864 . 6) (undo-tree-id1865 . 5) (undo-tree-id1866 . 7) (undo-tree-id1867 . 6) (undo-tree-id1868 . 8) (undo-tree-id1869 . 7) (undo-tree-id1870 . 9) (undo-tree-id1871 . 8) (undo-tree-id1872 . 10) (undo-tree-id1873 . 9) (undo-tree-id1874 . 11) (undo-tree-id1875 . 10) (undo-tree-id1876 . 12) (undo-tree-id1877 . 11)) nil (23701 37260 716536 624000) 0 nil]) ((120 . 122) (#("(" 0 1 (fontified nil)) . -120) (112 . 121) (#("e" 0 1 (fontified t face font-lock-type-face)) . -112) (undo-tree-id1878 . -1) 113 (111 . 113) (#("l" 0 1 (fontified t face font-lock-type-face)) . -111) (undo-tree-id1879 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -112) (undo-tree-id1880 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -113) (undo-tree-id1881 . -1) 114 (107 . 114) (#("a" 0 1 (fontified t face font-lock-variable-name-face)) . -107) (undo-tree-id1882 . -1) 108 (107 . 108) (#(" " 0 1 (fontified t)) . -107) (undo-tree-id1883 . -1) 108 (99 . 108) (95 . 99) (95 . 96) 111) nil (23701 37260 716553 494000) 0 nil]) ((#("use std::collections::HashMap;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 7 (fontified t face font-lock-constant-face) 7 9 (fontified t) 9 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-type-face) 29 30 (fontified t) 30 31 (fontified t)) . 1)) nil (23701 37260 716557 830000) 0 nil]) ((#("use toml::Value;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 10 (fontified t) 10 15 (fontified t face font-lock-type-face) 15 17 (fontified t)) . 90) (undo-tree-id1884 . -15) 105 (t 23701 36460 119907 192000)) nil (23701 37260 716561 231000) 0 nil]) ((361 . 362) (#("1" 0 1 (fontified t)) . 361) (undo-tree-id1742 . 1) (t 23701 36413 387074 259000)) nil (23701 36460 54599 533000) 0 nil]) ((253 . 254)) nil (23701 36413 311255 235000) 0 nil]) ((258 . 259) (#(")" 0 1 (fontified nil)) . 258) (undo-tree-id1735 . -1) (undo-tree-id1736 . 1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (253 . 258) (252 . 254) (#("(" 0 1 (fontified nil)) . -252) (252 . 253) (251 . 252) (#("(" 0 1 (fontified nil)) . -251) (undo-tree-id1739 . -1) (#(")" 0 1 (fontified t)) . 252) (251 . 253) (#("(" 0 1 (fontified nil)) . -251) (250 . 252) (#("f" 0 1 (fontified t)) . -250) (undo-tree-id1740 . -1) 251 (248 . 251) (#("b" 0 1 (fontified t)) . -248) (undo-tree-id1741 . -1) 249 (248 . 249) (240 . 248) (240 . 241) 247 (t 23701 36309 371588 946000)) nil (23701 36413 311280 806000) 0 nil]) (249) nil (23701 36413 311286 758000) 0 nil] [nil nil ((nil rear-nonsticky nil 252 . 253) (nil fontified nil 249 . 253) (249 . 253) (t 23701 36309 371588 946000)) ((#("take" 0 3 (fontified nil) 3 4 (fontified nil rear-nonsticky nil)) . 249) (undo-tree-id1729 . -3) (undo-tree-id1730 . -3) (undo-tree-id1731 . 1) (undo-tree-id1732 . 4) (undo-tree-id1733 . 1) (undo-tree-id1734 . 1) (nil rear-nonsticky t 252 . 253)) (23701 36398 920495 928000) 0 nil]) ((252 . 256) (t 23701 36293 15117 522000)) nil (23701 36398 926764 957000) 0 nil]) ((313 . 314) (#("1" 0 1 (fontified t)) . 313)) nil (23701 36292 995178 828000) 0 nil]) ((309 . 312) (#("take" 0 4 (fontified t)) . 309) (undo-tree-id1694 . -3) 312) nil (23701 36292 995191 601000) 0 nil]) ((333 . 336) (#("take" 0 4 (fontified t)) . 333) (undo-tree-id1695 . 1) (undo-tree-id1696 . 1) (undo-tree-id1697 . 1) (undo-tree-id1698 . 1) (undo-tree-id1699 . 1) (undo-tree-id1700 . 1) (undo-tree-id1701 . 1) (undo-tree-id1702 . 2) (undo-tree-id1703 . 1) (undo-tree-id1704 . -2) (undo-tree-id1705 . 2) (undo-tree-id1706 . 1) (undo-tree-id1707 . -2) (undo-tree-id1708 . 2) (undo-tree-id1709 . 1) (undo-tree-id1710 . -2) (undo-tree-id1711 . -2) (undo-tree-id1712 . 2) (undo-tree-id1713 . 1) (undo-tree-id1714 . 2) (undo-tree-id1715 . 2) (undo-tree-id1716 . 2) (undo-tree-id1717 . 2) (undo-tree-id1718 . -4) (undo-tree-id1719 . 2) (undo-tree-id1720 . 2) (undo-tree-id1721 . 2) (undo-tree-id1722 . 2) (undo-tree-id1723 . 2) (undo-tree-id1724 . 2) (undo-tree-id1725 . 2) (undo-tree-id1726 . 2) (undo-tree-id1727 . 2) (undo-tree-id1728 . 2) 335 (t 23701 36250 435639 195000)) nil (23701 36292 995231 219000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 349) (undo-tree-id1688 . -1) (undo-tree-id1689 . 1) (348 . 349) (347 . 349) (#("(" 0 1 (fontified nil)) . -347) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (340 . 348)) nil (23701 36250 365460 380000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 325) (undo-tree-id1692 . -1) (undo-tree-id1693 . 1) (324 . 325) (323 . 325) (#("(" 0 1 (fontified nil)) . -323) (316 . 324) (t 23701 36219 662695 667000)) nil (23701 36250 365470 299000) 0 nil]) ((1 . 677) (#("use std::collections::HashMap;
use std::env;
use std::fs::File;
use std::io::prelude::*;
use toml::Value;

fn main() -> std::io::Result<()> {
    let input = \"F https://fosstodon.org\\nG https://github.com\";
    for line in input.lines() {
        let words = line.split(\" \");
        let (key, url) = (
            words.take(1),
            words.take(1),
        );
        let cmd = format!(
            \"bind '{} :buffer {}\\nbind \\\"{} :open -t {}\\n\",
            key, url, key, url
        );
        let mut file = File::create(env::var(\"QUTE_FIFO\").unwrap())?;
        file.write_all(cmd.as_bytes())?;
    }
    let jumps = vec![(\"F\", \"https://fosstodon.org\"), (\"G\", \"https://github.com\")];

    Ok(())
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 7 (fontified t face font-lock-constant-face) 7 9 (fontified t) 9 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-type-face) 29 30 (fontified t) 30 31 (fontified t) 31 34 (fontified t face font-lock-keyword-face) 34 35 (fontified t) 35 38 (fontified t face font-lock-constant-face) 38 45 (fontified t) 45 48 (fontified t face font-lock-keyword-face) 48 49 (fontified t) 49 52 (fontified t face font-lock-constant-face) 52 54 (fontified t) 54 56 (fontified t face font-lock-constant-face) 56 58 (fontified t) 58 62 (fontified t face font-lock-type-face) 62 64 (fontified t) 64 67 (fontified t face font-lock-keyword-face) 67 68 (fontified t) 68 71 (fontified t face font-lock-constant-face) 71 73 (fontified t) 73 75 (fontified t face font-lock-constant-face) 75 77 (fontified t) 77 84 (fontified t face font-lock-constant-face) 84 89 (fontified t) 89 92 (fontified t face font-lock-keyword-face) 92 93 (fontified t) 93 97 (fontified t face font-lock-constant-face) 97 99 (fontified t) 99 104 (fontified t face font-lock-type-face) 104 107 (fontified t) 107 109 (fontified t face font-lock-keyword-face) 109 110 (fontified t) 110 114 (fontified t face font-lock-function-name-face) 114 118 (fontified t) 118 119 (fontified t syntax-table #2#) 119 120 (fontified t) 120 123 (fontified t face font-lock-constant-face) 123 125 (fontified t) 125 127 (fontified t face font-lock-constant-face) 127 129 (fontified t) 129 135 (fontified t face font-lock-type-face) 135 146 (fontified t) 146 149 (fontified t face font-lock-keyword-face) 149 150 (fontified t) 150 155 (fontified t face font-lock-variable-name-face) 155 158 (fontified t) 158 205 (fontified t face font-lock-string-face) 205 211 (fontified t) 211 214 (fontified t face font-lock-keyword-face) 214 220 (fontified t) 220 222 (fontified t face font-lock-keyword-face) 222 239 (fontified t) 239 247 (fontified t) 247 250 (fontified t face font-lock-keyword-face) 250 251 (fontified t) 251 256 (fontified t face font-lock-variable-name-face) 256 269 (fontified t) 269 270 (fontified t) 270 273 (fontified t face font-lock-string-face) 273 275 (fontified t) 275 276 (fontified t) 276 284 (fontified t) 284 287 (fontified t face font-lock-keyword-face) 287 302 (fontified t) 302 303 (fontified t) 303 325 (fontified t) 325 330 (fontified t) 330 342 (fontified t) 342 352 (fontified t) 352 356 (fontified t) 356 357 (fontified t) 357 367 (fontified t) 367 368 (fontified t) 368 376 (fontified t) 376 379 (fontified t face font-lock-keyword-face) 379 380 (fontified t) 380 383 (fontified t face font-lock-variable-name-face) 383 386 (fontified t) 386 393 (fontified t face rust-builtin-formatting-macro-face) 393 407 (fontified t) 407 414 (fontified t face font-lock-string-face) 414 416 (fontified t face rust-string-interpolation-face) 416 425 (fontified t face font-lock-string-face) 425 427 (fontified t face rust-string-interpolation-face) 427 453 (fontified t face font-lock-string-face) 453 505 (fontified t) 505 508 (fontified t face font-lock-keyword-face) 508 509 (fontified t) 509 512 (fontified t face font-lock-keyword-face) 512 513 (fontified t) 513 517 (fontified t face font-lock-variable-name-face) 517 520 (fontified t) 520 524 (fontified t face font-lock-type-face) 524 533 (fontified t) 533 536 (fontified t face font-lock-constant-face) 536 542 (fontified t) 542 553 (fontified t face font-lock-string-face) 553 564 (fontified t) 564 565 (fontified t face rust-question-mark-face) 565 605 (fontified t) 605 606 (fontified t face rust-question-mark-face) 606 618 (fontified t) 618 621 (fontified t face font-lock-keyword-face) 621 622 (fontified t) 622 627 (fontified t face font-lock-variable-name-face) 627 630 (fontified t) 630 634 (fontified t face font-lock-preprocessor-face) 634 636 (fontified t) 636 639 (fontified t face font-lock-string-face) 639 641 (fontified t) 641 664 (fontified t face font-lock-string-face) 664 668 (fontified t) 668 671 (fontified t face font-lock-string-face) 671 673 (fontified t) 673 693 (fontified t face font-lock-string-face) 693 702 (fontified t) 702 704 (fontified t face font-lock-type-face) 704 711 (fontified t)) . 1) (undo-tree-id1636 . 355) (undo-tree-id1637 . 550) (undo-tree-id1638 . -166) (undo-tree-id1639 . 479) (undo-tree-id1640 . 479) (undo-tree-id1641 . 410) (undo-tree-id1642 . 479) (undo-tree-id1643 . -301) (undo-tree-id1644 . 417) (undo-tree-id1645 . -297) (undo-tree-id1646 . -357) (undo-tree-id1647 . -367) (undo-tree-id1648 . 346) (undo-tree-id1649 . 354) (undo-tree-id1650 . -4) (undo-tree-id1651 . -29) (undo-tree-id1652 . -93) (undo-tree-id1653 . -104) (undo-tree-id1654 . -467) (undo-tree-id1655 . -470) (undo-tree-id1656 . -472) (undo-tree-id1657 . -475) (undo-tree-id1658 . -477) (undo-tree-id1659 . -480) (undo-tree-id1660 . -482) (undo-tree-id1661 . -485) (undo-tree-id1662 . 346) (undo-tree-id1663 . 346) (undo-tree-id1664 . 346) (undo-tree-id1665 . 346) (undo-tree-id1666 . 346) (undo-tree-id1667 . 346) (undo-tree-id1668 . 346) (undo-tree-id1669 . 346) (undo-tree-id1670 . 346) (undo-tree-id1671 . 346) (undo-tree-id1672 . 346) (undo-tree-id1673 . 346) (undo-tree-id1674 . 346) (undo-tree-id1675 . 346) (undo-tree-id1676 . -365) (undo-tree-id1677 . -365) (undo-tree-id1678 . 346) (undo-tree-id1679 . 346) (undo-tree-id1680 . 346) (undo-tree-id1681 . 346)) nil (23701 36219 644174 697000) 0 nil]) ((#("
" 0 1 (fontified t)) . 358)) nil (23701 36219 644193 778000) 0 nil]) ((356 . 357) (#(";" 0 1 (fontified t)) . -356) (undo-tree-id1682 . -1) 357 (356 . 357) (#(")" 0 1 (fontified nil)) . 356) (354 . 356) (353 . 355) (#("(" 0 1 (fontified nil)) . -353) (348 . 354) (343 . 348) (#("word" 0 4 (fontified t)) . -343) (undo-tree-id1683 . -4) 347 (343 . 347) (330 . 343) (329 . 330) (#(")" 0 1 (fontified nil)) . 329) (327 . 329) (326 . 328) (#("(" 0 1 (fontified nil)) . -326) (316 . 327) (303 . 316) 293) nil (23701 36219 644221 66000) 0 nil]) ((256 . 257)) nil (23701 36219 644232 75000) 0 nil]) ((#("            " 0 12 (fontified t)) . -303) (undo-tree-id1684 . -12) 315 (303 . 315) (303 . 304) 311) nil (23701 36219 644241 55000) 0 nil]) ((#("            line.split(\" \").last().unwrap(),
" 0 23 (fontified t) 23 26 (fontified t face font-lock-string-face) 26 44 (fontified t) 44 45 (fontified t)) . 303) (undo-tree-id1685 . -12) 315) nil (23701 36219 644249 248000) 0 nil]) ((#("            line.split(\" \").first().unwrap(),
" 0 23 (fontified t) 23 26 (fontified t face font-lock-string-face) 26 46 (fontified t)) . 303) (undo-tree-id1686 . -34) 337) nil (23701 36219 644256 277000) 0 nil]) ((274 . 275) (#(")" 0 1 (fontified nil)) . 274) (273 . 274) (#(" " 0 1 (fontified nil)) . -273) (273 . 274) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -273) (271 . 274) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -271) (undo-tree-id1687 . -1) 272 (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 272) (271 . 272) (270 . 272) (#("\"" 0 1 (fontified nil)) . -270) (270 . 271) (269 . 271) (#("(" 0 1 (fontified nil)) . -269) (269 . 270) (248 . 269) (240 . 248) (240 . 241) 265 (t 23701 36129 583905 370000)) nil (23701 36219 644279 362000) 0 nil]) ((1 . 712) (#("use std::collections::HashMap;
use std::env;
use std::fs::File;
use std::io::prelude::*;
use toml::Value;

fn main() -> std::io::Result<()> {
    let input = \"F https://fosstodon.org\\nG https://github.com\";
    for line in input.lines() {
        let (key, url) = (line.split(\" \").first().unwrap(), line.split(\" \").last().unwrap());
        let cmd = format!(
            \"bind '{} :buffer {}\\nbind \\\"{} :open -t {}\\n\",
            key, url, key, url
        );
        let mut file = File::create(env::var(\"QUTE_FIFO\").unwrap())?;
        file.write_all(cmd.as_bytes())?;
    }
    let jumps = vec![(\"F\", \"https://fosstodon.org\"), (\"G\", \"https://github.com\")];

    Ok(())
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 7 (fontified t face font-lock-constant-face) 7 9 (fontified t) 9 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-type-face) 29 30 (fontified t) 30 31 (fontified t) 31 34 (fontified t face font-lock-keyword-face) 34 35 (fontified t) 35 38 (fontified t face font-lock-constant-face) 38 45 (fontified t) 45 48 (fontified t face font-lock-keyword-face) 48 49 (fontified t) 49 52 (fontified t face font-lock-constant-face) 52 54 (fontified t) 54 56 (fontified t face font-lock-constant-face) 56 58 (fontified t) 58 62 (fontified t face font-lock-type-face) 62 64 (fontified t) 64 67 (fontified t face font-lock-keyword-face) 67 68 (fontified t) 68 71 (fontified t face font-lock-constant-face) 71 73 (fontified t) 73 75 (fontified t face font-lock-constant-face) 75 77 (fontified t) 77 84 (fontified t face font-lock-constant-face) 84 89 (fontified t) 89 92 (fontified t face font-lock-keyword-face) 92 93 (fontified t) 93 97 (fontified t face font-lock-constant-face) 97 99 (fontified t) 99 104 (fontified t face font-lock-type-face) 104 107 (fontified t) 107 109 (fontified t face font-lock-keyword-face) 109 110 (fontified t) 110 114 (fontified t face font-lock-function-name-face) 114 118 (fontified t) 118 119 (fontified t syntax-table #2#) 119 120 (fontified t) 120 123 (fontified t face font-lock-constant-face) 123 125 (fontified t) 125 127 (fontified t face font-lock-constant-face) 127 129 (fontified t) 129 135 (fontified t face font-lock-type-face) 135 142 (fontified t) 142 146 (fontified t) 146 149 (fontified t face font-lock-keyword-face) 149 150 (fontified t) 150 155 (fontified t face font-lock-variable-name-face) 155 158 (fontified t) 158 180 (fontified t face font-lock-string-face) 180 181 (fontified t face font-lock-string-face) 181 205 (fontified t face font-lock-string-face) 205 206 (fontified t) 206 207 (fontified t) 207 211 (fontified t) 211 214 (fontified t face font-lock-keyword-face) 214 220 (fontified t) 220 222 (fontified t face font-lock-keyword-face) 222 223 (fontified t) 223 234 (fontified t) 234 237 (fontified t) 237 238 (fontified t) 238 239 (fontified t) 239 247 (fontified t) 247 250 (fontified t face font-lock-keyword-face) 250 251 (fontified t) 251 264 (fontified t) 264 265 (fontified t) 265 266 (fontified t) 266 275 (fontified t) 275 276 (fontified t) 276 278 (fontified t face font-lock-string-face) 278 279 (fontified t face font-lock-string-face) 279 286 (fontified t) 286 295 (fontified t) 295 297 (fontified t) 297 309 (fontified t) 309 310 (fontified t) 310 313 (fontified t face font-lock-string-face) 313 319 (fontified t) 319 328 (fontified t) 328 332 (fontified t) 332 333 (fontified t) 333 340 (fontified t) 340 341 (rear-nonsticky t fontified t) 341 344 (fontified t face font-lock-keyword-face) 344 345 (fontified t) 345 348 (fontified t face font-lock-variable-name-face) 348 351 (fontified t) 351 358 (fontified t face rust-builtin-formatting-macro-face) 358 372 (fontified t) 372 379 (fontified t face font-lock-string-face) 379 381 (fontified t face rust-string-interpolation-face) 381 390 (fontified t face font-lock-string-face) 390 392 (fontified t face rust-string-interpolation-face) 392 418 (fontified t face font-lock-string-face) 418 470 (fontified t) 470 473 (fontified t face font-lock-keyword-face) 473 474 (fontified t) 474 477 (fontified t face font-lock-keyword-face) 477 478 (fontified t) 478 482 (fontified t face font-lock-variable-name-face) 482 485 (fontified t) 485 489 (fontified t face font-lock-type-face) 489 498 (fontified t) 498 501 (fontified t face font-lock-constant-face) 501 507 (fontified t) 507 518 (fontified t face font-lock-string-face) 518 529 (fontified t) 529 530 (fontified t face rust-question-mark-face) 530 570 (fontified t) 570 571 (fontified t face rust-question-mark-face) 571 572 (fontified t) 572 573 (fontified t) 573 577 (fontified t) 577 578 (fontified t) 578 579 (fontified t) 579 583 (fontified t) 583 586 (fontified t face font-lock-keyword-face) 586 587 (fontified t) 587 592 (fontified t face font-lock-variable-name-face) 592 595 (fontified t) 595 599 (fontified t face font-lock-preprocessor-face) 599 601 (fontified t) 601 604 (fontified t face font-lock-string-face) 604 606 (fontified t) 606 629 (fontified t face font-lock-string-face) 629 633 (fontified t) 633 636 (fontified t face font-lock-string-face) 636 638 (fontified t) 638 658 (fontified t face font-lock-string-face) 658 661 (fontified t) 661 662 (fontified t) 662 663 (fontified t) 663 667 (fontified t) 667 669 (fontified t face font-lock-type-face) 669 673 (fontified t) 673 674 (fontified t) 674 676 (fontified t)) . 1) (undo-tree-id1428 . -667) (undo-tree-id1429 . -667) (undo-tree-id1430 . 344) (undo-tree-id1431 . -333) (undo-tree-id1432 . -572) (undo-tree-id1433 . -663) (undo-tree-id1434 . 13) (undo-tree-id1435 . -663) (undo-tree-id1436 . -663) (undo-tree-id1437 . 515) (undo-tree-id1438 . -166) (undo-tree-id1439 . 507) (undo-tree-id1440 . -178) (undo-tree-id1441 . 493) (undo-tree-id1442 . -185) (undo-tree-id1443 . 490) (undo-tree-id1444 . -191) (undo-tree-id1445 . 482) (undo-tree-id1446 . -200) (undo-tree-id1447 . 471) (undo-tree-id1448 . 471) (undo-tree-id1449 . 13) (undo-tree-id1450 . 14) (undo-tree-id1451 . 13) (undo-tree-id1452 . 13) (undo-tree-id1453 . 583) (undo-tree-id1454 . -97) (undo-tree-id1455 . 61) (undo-tree-id1456 . -624) (undo-tree-id1457 . 9) (undo-tree-id1458 . 9) (undo-tree-id1459 . -663) (undo-tree-id1460 . -667) (undo-tree-id1461 . -667) (undo-tree-id1462 . 9) (undo-tree-id1463 . 9) (undo-tree-id1464 . 9) (undo-tree-id1465 . 9) (undo-tree-id1466 . -667) (undo-tree-id1467 . 9) (undo-tree-id1468 . 9) (undo-tree-id1469 . 9) (undo-tree-id1470 . 9) (undo-tree-id1471 . -667) (undo-tree-id1472 . 407) (undo-tree-id1473 . 407) (undo-tree-id1474 . 430) (undo-tree-id1475 . 430) (undo-tree-id1476 . 429) (undo-tree-id1477 . 430) (undo-tree-id1478 . -247) (undo-tree-id1479 . -266) (undo-tree-id1480 . -266) (undo-tree-id1481 . -266) (undo-tree-id1482 . 410) (undo-tree-id1483 . 410) (undo-tree-id1484 . -266) (undo-tree-id1485 . -266) (undo-tree-id1486 . -266) (undo-tree-id1487 . -266) (undo-tree-id1488 . -266) (undo-tree-id1489 . -266) (undo-tree-id1490 . -266) (undo-tree-id1491 . -266) (undo-tree-id1492 . -266) (undo-tree-id1493 . -266) (undo-tree-id1494 . -266) (undo-tree-id1495 . -266) (undo-tree-id1496 . -266) (undo-tree-id1497 . -266) (undo-tree-id1498 . -266) (undo-tree-id1499 . -266) (undo-tree-id1500 . -266) (undo-tree-id1501 . -266) (undo-tree-id1502 . 411) (undo-tree-id1503 . 419) (undo-tree-id1504 . -260) (undo-tree-id1505 . 411) (undo-tree-id1506 . 344) (undo-tree-id1507 . 344) (undo-tree-id1508 . 344) (undo-tree-id1509 . 344) (undo-tree-id1510 . 344) (undo-tree-id1511 . 344) (undo-tree-id1512 . 344) (undo-tree-id1513 . 344) (undo-tree-id1514 . 344) (undo-tree-id1515 . 344) (undo-tree-id1516 . 344) (undo-tree-id1517 . 344) (undo-tree-id1518 . 344) (undo-tree-id1519 . 344) (undo-tree-id1520 . 344) (undo-tree-id1521 . 344) (undo-tree-id1522 . -328) (undo-tree-id1523 . -328) (undo-tree-id1524 . 344) (undo-tree-id1525 . 379) (undo-tree-id1526 . 381) (undo-tree-id1527 . 379) (undo-tree-id1528 . 379) (undo-tree-id1529 . 380) (undo-tree-id1530 . 380) (undo-tree-id1531 . 318) (undo-tree-id1532 . 380) (undo-tree-id1533 . 380) (undo-tree-id1534 . 318) (undo-tree-id1535 . 344) (undo-tree-id1536 . 380) (undo-tree-id1537 . 344) (undo-tree-id1538 . 345) (undo-tree-id1539 . 345) (undo-tree-id1540 . 345) (undo-tree-id1541 . -4) (undo-tree-id1542 . -29) (undo-tree-id1543 . -93) (undo-tree-id1544 . -104) (undo-tree-id1545 . -281) (undo-tree-id1546 . -286) (undo-tree-id1547 . 345) (undo-tree-id1548 . 345) (undo-tree-id1549 . 345) (undo-tree-id1550 . 345) (undo-tree-id1551 . 345) (undo-tree-id1552 . 345) (undo-tree-id1553 . 345) (undo-tree-id1554 . 345) (undo-tree-id1555 . 345) (undo-tree-id1556 . 345) (undo-tree-id1557 . 345) (undo-tree-id1558 . 345) (undo-tree-id1559 . 345) (undo-tree-id1560 . 345) (undo-tree-id1561 . -331) (undo-tree-id1562 . -331) (undo-tree-id1563 . 345) (undo-tree-id1564 . 345) (undo-tree-id1565 . 345) (undo-tree-id1566 . 345)) nil (23701 36129 522952 389000) 0 nil]) ((332 . 333)) nil (23701 36129 522967 196000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 298) (undo-tree-id1567 . -1) (undo-tree-id1568 . 1) (297 . 298) (296 . 298) (#("(" 0 1 (fontified nil)) . -296) (292 . 297) (#("q" 0 1 (fontified t)) . -292) (undo-tree-id1569 . -1) 293 (289 . 293)) nil (23701 36129 522974 800000) 0 nil]) ((322 . 323) (#(")" 0 1 (fontified nil)) . 322) (undo-tree-id1570 . -1) (undo-tree-id1571 . 1) (undo-tree-id1572 . -1) (321 . 322) (320 . 322) (#("(" 0 1 (fontified nil)) . -320) (undo-tree-id1573 . -1) (undo-tree-id1574 . -1) (313 . 321) (#(")" 0 1 (fontified nil)) . 313) (undo-tree-id1575 . -1) (312 . 313) (311 . 313) (#("(" 0 1 (fontified nil)) . -311) (311 . 312) (306 . 311) (#(")" 0 1 (fontified nil)) . 306) (undo-tree-id1576 . -1) (305 . 306) (#(" " 0 1 (fontified nil)) . -305) (305 . 306) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -305) (305 . 306) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 305) (303 . 305) (302 . 304) (#("\"" 0 1 (fontified nil)) . -302) (302 . 303) (#(" " 0 1 (fontified t)) . -302) (undo-tree-id1577 . -1) 303 (302 . 303) (301 . 303) (#("(" 0 1 (fontified nil)) . -301) (291 . 302) (289 . 291) (#(")" 0 1 (fontified nil)) . 289) (288 . 289) (287 . 289) (#("(" 0 1 (fontified nil)) . -287) (283 . 288) (282 . 283) (#("map();" 0 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t) 5 6 (fontified t)) . 282) (undo-tree-id1578 . -5) (undo-tree-id1579 . -6) (undo-tree-id1580 . 1) (undo-tree-id1581 . 1) (undo-tree-id1582 . 2) (undo-tree-id1583 . 1) (undo-tree-id1584 . 1) (undo-tree-id1585 . 2) (undo-tree-id1586 . 2) (undo-tree-id1587 . 1) (undo-tree-id1588 . 3) (undo-tree-id1589 . 2) (undo-tree-id1590 . 4) (undo-tree-id1591 . 3) (undo-tree-id1592 . 5) (undo-tree-id1593 . 4) (undo-tree-id1594 . 6) (undo-tree-id1595 . 5)) nil (23701 36129 523016 128000) 0 nil]) ((#(")" 0 1 (fontified t)) . 266) (undo-tree-id1596 . 1) (undo-tree-id1597 . 1) (undo-tree-id1598 . -1) (undo-tree-id1599 . -1) (undo-tree-id1600 . 1)) nil (23701 36129 523029 701000) 0 nil]) ((265 . 267) (#("(" 0 1 (fontified nil)) . -265) (265 . 266)) nil (23701 36129 523032 383000) 0 nil]) (265) nil (23701 36129 523033 929000) 0 nil]) ((#("`" 0 1 (fontified nil)) . -266) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . 1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (#("`" 0 1 (fontified t)) . 267) (undo-tree-id1626 . -1) (undo-tree-id1627 . 1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (266 . 268) (#("`" 0 1 (fontified nil)) . -266) (undo-tree-id1634 . -1) (undo-tree-id1635 . -1) (266 . 267)) nil (23701 36129 523068 815000) 0 nil]) ((284 . 286) (#("(" 0 1 (fontified nil)) . -284) (280 . 285) (t 23701 35943 433470 150000)) nil (23701 36129 523074 390000) 0 nil]) ((#("s" 0 1 (fontified t)) . 269) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . 1) (t 23701 35902 127535 888000)) nil (23701 35943 371988 123000) 0 nil]) ((#("    for (key, url) in jumps {
    }
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 19 (fontified t) 19 21 (fontified t face font-lock-keyword-face) 21 29 (fontified t) 29 30 (fontified t) 30 35 (fontified t) 35 36 (fontified t)) . 613) (undo-tree-id1391 . -35) (undo-tree-id1392 . -8) (undo-tree-id1393 . -35) (undo-tree-id1394 . 36) (undo-tree-id1395 . 36) (undo-tree-id1396 . 36) (undo-tree-id1397 . -35) (undo-tree-id1398 . -30) (undo-tree-id1399 . -35) (undo-tree-id1400 . 28) (undo-tree-id1401 . -36) (undo-tree-id1402 . 28) (undo-tree-id1403 . 28) (undo-tree-id1404 . -8) (undo-tree-id1405 . -35) (undo-tree-id1406 . 1) (undo-tree-id1407 . 28) 648) nil (23701 35902 108825 938000) 0 nil]) ((nil rear-nonsticky nil 290 . 291) (#("
" 0 1 (fontified nil)) . -522) (282 . 523) 244) nil (23701 35902 108832 909000) 0 nil]) ((#("        let cmd = format!(
            \"bind '{} :buffer {}\\nbind \\\"{} :open -t {}\\n\",
            key, url, key, url
        );
        let mut file = File::create(env::var(\"QUTE_FIFO\").unwrap())?;
        file.write_all(cmd.as_bytes())?;
" 0 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 15 (fontified t face font-lock-variable-name-face) 15 18 (fontified t) 18 25 (fontified t face rust-builtin-formatting-macro-face) 25 39 (fontified t) 39 46 (fontified t face font-lock-string-face) 46 48 (fontified t face rust-string-interpolation-face) 48 57 (fontified t face font-lock-string-face) 57 59 (fontified t face rust-string-interpolation-face) 59 85 (fontified t face font-lock-string-face) 85 137 (fontified t) 137 140 (fontified t face font-lock-keyword-face) 140 141 (fontified t) 141 144 (fontified t face font-lock-keyword-face) 144 145 (fontified t) 145 149 (fontified t face font-lock-variable-name-face) 149 152 (fontified t) 152 156 (fontified t face font-lock-type-face) 156 165 (fontified t) 165 168 (fontified t face font-lock-constant-face) 168 174 (fontified t) 174 185 (fontified t face font-lock-string-face) 185 196 (fontified t) 196 197 (fontified t face rust-question-mark-face) 197 237 (fontified t) 237 238 (fontified t face rust-question-mark-face) 238 240 (fontified t)) . 403) (undo-tree-id1408 . -203) (undo-tree-id1409 . -203) (undo-tree-id1410 . -4) (undo-tree-id1411 . -4) (undo-tree-id1412 . -4) (undo-tree-id1413 . -203) (undo-tree-id1414 . 126) (undo-tree-id1415 . -117) 407) nil (23701 35902 108844 176000) 0 nil]) ((281 . 282) (#(")" 0 1 (fontified nil)) . 281) (280 . 281) (#(" " 0 1 (fontified nil)) . -280) (280 . 281) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -280) (280 . 281) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 280) (279 . 280) (#(" " 0 1 (fontified nil)) . -279) (279 . 280) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -279) (279 . 280) (#(")" 0 1 (fontified t face font-lock-string-face)) . -279) (undo-tree-id1416 . -1) 280 (278 . 280) (277 . 279) (#("\"" 0 1 (fontified nil)) . -277) (277 . 278) (#("'" 0 1 (fontified nil)) . -277) (undo-tree-id1417 . -1) (#("'" 0 1 (fontified t)) . 278) (277 . 279) (#("'" 0 1 (fontified nil)) . -277) (277 . 278) (276 . 278) (#("(" 0 1 (fontified nil)) . -276) (264 . 277) (262 . 264) (#(")" 0 1 (fontified nil)) . 262) (253 . 262) (252 . 254) (#("(" 0 1 (fontified nil)) . -252) (248 . 253) (239 . 248) 212) nil (23701 35902 108862 587000) 0 nil]) ((#("    dbg!(value);
" 0 4 (fontified t) 4 8 (fontified t face font-lock-preprocessor-face) 8 10 (fontified t) 10 11 (fontified t) 11 17 (fontified t)) . 330) (undo-tree-id1418 . 2) (undo-tree-id1419 . 2) (undo-tree-id1420 . 2) (undo-tree-id1421 . -4) 334) nil (23701 35902 108873 253000) 0 nil]) ((#("        let ()
" 0 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 13 (fontified t) 13 14 (fontified t) 14 15 (fontified t)) . 240) (undo-tree-id1422 . 2) (undo-tree-id1423 . -12) 252) nil (23701 35902 108877 623000) 0 nil]) ((252 . 254) (#("(" 0 1 (fontified nil)) . -252) (248 . 253) (239 . 248) 211) nil (23701 35902 108880 933000) 0 nil]) ((239 . 244) (238 . 240) (#("{" 0 1 (fontified nil)) . -238) (237 . 239) (#(")" 0 1 (fontified nil)) . 237) (236 . 237) (235 . 237) (#("(" 0 1 (fontified nil)) . -235) (221 . 236) (#("i" 0 1 (fontified t)) . -221) (undo-tree-id1424 . -1) 222 (221 . 222) (212 . 221) (207 . 212) 153) nil (23701 35902 108888 958000) 0 nil] [nil nil ((#("a" 0 1 (fontified t)) . 302)) ((302 . 303)) (23701 35729 648000 835000) 0 nil]) ((206 . 207)) nil (23701 35729 651936 167000) 0 nil]) ((185 . 205)) nil (23701 35729 648018 922000) 0 nil]) ((173 . 185) (#("t" 0 1 (fontified t face font-lock-string-face)) . -173) (undo-tree-id1382 . -1) 174 (166 . 174) (160 . 166) (159 . 161) (#("\"" 0 1 (fontified nil)) . -159) (147 . 160) (143 . 147) (143 . 144) 147) nil (23701 35729 648055 79000) 0 nil]) ((#("    let value = \"F = 'https://fosstodon.org'\\nG = 'https://github.com'\"
        .parse::<Value>()
        .unwrap();
    let map: HashMap<String, String> = HashMap::From(value.try_into());
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 13 (fontified t face font-lock-variable-name-face) 13 16 (fontified t) 16 71 (fontified t face font-lock-string-face) 71 72 (fontified t) 72 89 (fontified t) 89 94 (fontified t face font-lock-type-face) 94 97 (fontified t) 97 98 (fontified t) 98 116 (fontified t) 116 117 (fontified t) 117 121 (fontified t) 121 124 (fontified t face font-lock-keyword-face) 124 125 (fontified t) 125 128 (fontified t face font-lock-variable-name-face) 128 130 (fontified t) 130 137 (fontified t face font-lock-type-face) 137 138 (fontified t) 138 144 (fontified t face font-lock-type-face) 144 146 (fontified t) 146 152 (fontified t face font-lock-type-face) 152 153 (fontified t) 153 156 (fontified t) 156 163 (fontified t face font-lock-type-face) 163 165 (fontified t) 165 169 (fontified t face font-lock-type-face) 169 176 (fontified t) 176 184 (fontified t) 184 186 (fontified t) 186 188 (fontified t) 188 189 (fontified t)) . 143) (undo-tree-id1383 . -168) (undo-tree-id1384 . 20) (undo-tree-id1385 . -51) (undo-tree-id1386 . -168) (undo-tree-id1387 . -168) (undo-tree-id1388 . -168) (undo-tree-id1389 . -51) (undo-tree-id1390 . -168) 311 (t 23701 35422 251361 29000)) nil (23701 35729 648097 977000) 0 nil]) ((308 . 312) (#("new" 0 3 (fontified t)) . 308) (undo-tree-id1372 . -3) (undo-tree-id1373 . 1) (undo-tree-id1374 . 2) (undo-tree-id1375 . 1) (undo-tree-id1376 . 3) (undo-tree-id1377 . 2) (undo-tree-id1378 . 3) (undo-tree-id1379 . 3) (undo-tree-id1380 . 3) (undo-tree-id1381 . 3) (t 23701 35356 851667 142000)) nil (23701 35422 237767 175000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 328) (undo-tree-id1369 . -1) (undo-tree-id1370 . 1) (327 . 328) (326 . 328) (#("(" 0 1 (fontified nil)) . -326) (312 . 327) (#("," 0 1 (fontified t)) . -312) (undo-tree-id1371 . -1) 313 (312 . 313) (t 23701 35337 818422 580000)) nil (23701 35356 831842 547000) 0 nil]) ((281 . 295) (280 . 282) (#("<" 0 1 (fontified nil face font-lock-type-face)) . -280) (280 . 281) (273 . 280) (#("Has" 0 3 (fontified t face font-lock-type-face)) . -273) (undo-tree-id1298 . -3) 276 (273 . 276) (#("i32" 0 3 (fontified t face font-lock-type-face)) . 273) (undo-tree-id1299 . 1) (undo-tree-id1300 . 1) (undo-tree-id1301 . 1) (undo-tree-id1302 . 1) (undo-tree-id1303 . 1) (undo-tree-id1304 . 1) (undo-tree-id1305 . 1) (undo-tree-id1306 . 1) (undo-tree-id1307 . 1) (undo-tree-id1308 . 1) (undo-tree-id1309 . 1) (undo-tree-id1310 . 1) (undo-tree-id1311 . 1) (undo-tree-id1312 . 1) (undo-tree-id1313 . 1) (undo-tree-id1314 . 1) (undo-tree-id1315 . 1) (undo-tree-id1316 . 1) (undo-tree-id1317 . 1) (undo-tree-id1318 . 1) (undo-tree-id1319 . 1) (undo-tree-id1320 . 1) (undo-tree-id1321 . 1) (undo-tree-id1322 . 1) (undo-tree-id1323 . 1) (undo-tree-id1324 . 1) (undo-tree-id1325 . 1) (undo-tree-id1326 . 1) (undo-tree-id1327 . 1) (undo-tree-id1328 . 1) (undo-tree-id1329 . 1) (undo-tree-id1330 . 1) (undo-tree-id1331 . 1) (undo-tree-id1332 . 1) (undo-tree-id1333 . 1) (undo-tree-id1334 . 1) (undo-tree-id1335 . 1) (undo-tree-id1336 . 1) (undo-tree-id1337 . 1) (undo-tree-id1338 . 1) (undo-tree-id1339 . 1) (undo-tree-id1340 . 1) (undo-tree-id1341 . 1) (undo-tree-id1342 . 1) (undo-tree-id1343 . 1) (undo-tree-id1344 . 1) (undo-tree-id1345 . 1) (undo-tree-id1346 . 1) (undo-tree-id1347 . 1) (undo-tree-id1348 . 1) (undo-tree-id1349 . 1) (undo-tree-id1350 . 1) (undo-tree-id1351 . 1) (undo-tree-id1352 . 1) (undo-tree-id1353 . 1) (undo-tree-id1354 . 1) (undo-tree-id1355 . 1) (undo-tree-id1356 . 1) (undo-tree-id1357 . 1) (undo-tree-id1358 . 1) (undo-tree-id1359 . 1) (undo-tree-id1360 . 1) (undo-tree-id1361 . 1) (undo-tree-id1362 . 1) (undo-tree-id1363 . -2) (undo-tree-id1364 . -2) (undo-tree-id1365 . 1) (undo-tree-id1366 . 1) (undo-tree-id1367 . 1) (undo-tree-id1368 . 1) 275 (t 23701 35314 321865 276000)) nil (23701 35337 801215 226000) 0 nil]) ((271 . 276) (#("<" 0 1 (fontified nil)) . -271) (undo-tree-id1296 . -1) (#(">" 0 1 (fontified t)) . 272) (#("i" 0 1 (fontified t)) . -272) (undo-tree-id1297 . -1) 273 (272 . 273) (271 . 273) (#("<" 0 1 (fontified nil face font-lock-variable-name-face)) . -271) (271 . 272) (t 23701 35290 948640 485000)) nil (23701 35314 296291 174000) 0 nil]) ((288 . 289) (#(")" 0 1 (fontified nil)) . 288) (undo-tree-id1293 . -1) (undo-tree-id1294 . -1) (287 . 288) (286 . 288) (#("(" 0 1 (fontified nil)) . -286) (281 . 287) (274 . 281) (#("Has" 0 3 (fontified t face font-lock-type-face)) . -274) (undo-tree-id1295 . -3) 277 (274 . 277) (264 . 274) (259 . 264) (t 23701 35216 242318 948000) 258) nil (23701 35290 928790 944000) 0 nil]) ((1 . 650) (#("use std::env;
use std::fs::File;
use std::io::prelude::*;
use std::collections::HashMap;
use toml::Value;

fn main() -> std::io::Result<()> {
    let value = \"F = 'https://fosstodon.org'\\nG = 'https://github.com'\"
        .parse::<Value>()
        .unwrap();
    let jumps = vec![(\"F\", \"https://fosstodon.org\"), (\"G\", \"https://github.com\")];

    dbg!(value);
    for (key, url) in jumps {
        let cmd = format!(
            \"bind '{} :buffer {}\\nbind \\\"{} :open -t {}\\n\",
            key, url, key, url
        );
        let mut file = File::create(env::var(\"QUTE_FIFO\").unwrap())?;
        file.write_all(cmd.as_bytes())?;
    }
    Ok(())
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 7 (fontified t face font-lock-constant-face) 7 13 (fontified t) 13 14 (fontified t) 14 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t) 18 21 (fontified t face font-lock-constant-face) 21 23 (fontified t) 23 25 (fontified t face font-lock-constant-face) 25 27 (fontified t) 27 31 (fontified t face font-lock-type-face) 31 33 (fontified t) 33 36 (fontified t face font-lock-keyword-face) 36 37 (fontified t) 37 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 44 (fontified t face font-lock-constant-face) 44 46 (fontified t) 46 53 (fontified t face font-lock-constant-face) 53 57 (fontified t) 57 58 (fontified t) 58 61 (fontified t face font-lock-keyword-face) 61 62 (fontified t) 62 65 (fontified t face font-lock-constant-face) 65 67 (fontified t) 67 78 (fontified t face font-lock-constant-face) 78 80 (fontified t) 80 87 (fontified t face font-lock-type-face) 87 88 (fontified t) 88 89 (fontified t) 89 92 (fontified t face font-lock-keyword-face) 92 93 (fontified t) 93 97 (fontified t face font-lock-constant-face) 97 99 (fontified t) 99 104 (fontified t face font-lock-type-face) 104 107 (fontified t) 107 109 (fontified t face font-lock-keyword-face) 109 110 (fontified t) 110 114 (fontified t face font-lock-function-name-face) 114 118 (fontified t) 118 119 (syntax-table #2# fontified t) 119 120 (fontified t) 120 123 (fontified t face font-lock-constant-face) 123 125 (fontified t) 125 127 (fontified t face font-lock-constant-face) 127 129 (fontified t) 129 135 (fontified t face font-lock-type-face) 135 146 (fontified t) 146 149 (fontified t face font-lock-keyword-face) 149 150 (fontified t) 150 155 (fontified t face font-lock-variable-name-face) 155 158 (fontified t) 158 213 (fontified t face font-lock-string-face) 213 231 (fontified t) 231 236 (fontified t face font-lock-type-face) 236 263 (fontified t) 263 266 (fontified t face font-lock-keyword-face) 266 267 (fontified t) 267 272 (fontified t face font-lock-variable-name-face) 272 275 (fontified t) 275 279 (fontified t face font-lock-preprocessor-face) 279 281 (fontified t) 281 284 (fontified t face font-lock-string-face) 284 286 (fontified t) 286 309 (fontified t face font-lock-string-face) 309 313 (fontified t) 313 316 (fontified t face font-lock-string-face) 316 318 (fontified t) 318 338 (fontified t face font-lock-string-face) 338 347 (fontified t) 347 351 (fontified t face font-lock-preprocessor-face) 351 364 (fontified t) 364 367 (fontified t face font-lock-keyword-face) 367 379 (fontified t) 379 381 (fontified t face font-lock-keyword-face) 381 398 (fontified t) 398 401 (fontified t face font-lock-keyword-face) 401 402 (fontified t) 402 405 (fontified t face font-lock-variable-name-face) 405 408 (fontified t) 408 415 (fontified t face rust-builtin-formatting-macro-face) 415 417 (fontified t) 417 429 (fontified t) 429 436 (fontified t face font-lock-string-face) 436 438 (fontified t face rust-string-interpolation-face) 438 447 (fontified t face font-lock-string-face) 447 449 (fontified t face rust-string-interpolation-face) 449 475 (fontified t face font-lock-string-face) 475 476 (fontified t) 476 527 (fontified t) 527 530 (fontified t face font-lock-keyword-face) 530 531 (fontified t) 531 534 (fontified t face font-lock-keyword-face) 534 535 (fontified t) 535 539 (fontified t face font-lock-variable-name-face) 539 542 (fontified t) 542 546 (fontified t face font-lock-type-face) 546 555 (fontified t) 555 558 (fontified t face font-lock-constant-face) 558 564 (fontified t) 564 575 (fontified t face font-lock-string-face) 575 586 (fontified t) 586 587 (fontified t face rust-question-mark-face) 587 589 (fontified t) 589 627 (fontified t) 627 628 (fontified t face rust-question-mark-face) 628 640 (fontified t) 640 642 (fontified t face font-lock-type-face) 642 649 (fontified t)) . 1) (undo-tree-id1248 . 562) (undo-tree-id1249 . 302) (undo-tree-id1250 . -350) (undo-tree-id1251 . 556) (undo-tree-id1252 . -97) (undo-tree-id1253 . -62) (undo-tree-id1254 . -87) (undo-tree-id1255 . 569) (undo-tree-id1256 . -87) (undo-tree-id1257 . 562) (undo-tree-id1258 . 562) (undo-tree-id1259 . 562) (undo-tree-id1260 . 562) (undo-tree-id1261 . -87) (undo-tree-id1262 . 514) (undo-tree-id1263 . 543) (undo-tree-id1264 . 479) (undo-tree-id1265 . 514) (undo-tree-id1266 . 411) (undo-tree-id1267 . 479) (undo-tree-id1268 . 485) (undo-tree-id1269 . -169) (undo-tree-id1270 . 411) (undo-tree-id1271 . 411) (undo-tree-id1272 . 411) (undo-tree-id1273 . 411) (undo-tree-id1274 . 411) (undo-tree-id1275 . 411) (undo-tree-id1276 . 411) (undo-tree-id1277 . 411) (undo-tree-id1278 . 411) (undo-tree-id1279 . 411) (undo-tree-id1280 . 411) (undo-tree-id1281 . 411) (undo-tree-id1282 . 411) (undo-tree-id1283 . 411) (undo-tree-id1284 . -238) (undo-tree-id1285 . -238) (undo-tree-id1286 . 411) (undo-tree-id1287 . 411) (undo-tree-id1288 . 411) (undo-tree-id1289 . 411)) nil (23701 35216 228080 357000) 0 nil]) ((88 . 89)) nil (23701 35216 228090 343000) 0 nil]) ((81 . 88) (#("HashM" 0 5 (fontified t face font-lock-type-face)) . -81) (undo-tree-id1290 . -5) 86 (85 . 86) (81 . 85) (#("H" 0 1 (fontified t face font-lock-type-face)) . -81) (undo-tree-id1291 . -1) 82 (81 . 82) (79 . 81) (68 . 79) (#("co" 0 2 (fontified t)) . -68) (undo-tree-id1292 . -2) 70 (59 . 70) (58 . 59) (t 23701 34881 353821 22000) 38) nil (23701 35216 228105 828000) 0 nil]) ((1 . 619) (#("use std::env;
use std::fs::File;
use std::io::prelude::*;
use toml::Value;

fn main() -> std::io::Result<()> {

    let value = \"F = 'https://fosstodon.org'\\nG = 'https://github.com'\".parse::<Value>().unwrap();
    let jumps = vec![
        (\"F\", \"https://fosstodon.org\"),
        (\"G\", \"https://github.com\"),
    ];

        dbg!(value);
    for (key, url) in jumps {
        let cmd = format!(
            \"bind '{} :buffer {}\\nbind \\\"{} :open -t {}\\n\",
            key, url, key, url
        );
        let mut file = File::create(env::var(\"QUTE_FIFO\").unwrap())?;
        file.write_all(cmd.as_bytes())?;
    }
    Ok(())
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 7 (fontified t face font-lock-constant-face) 7 13 (fontified t) 13 14 (fontified t) 14 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t) 18 21 (fontified t face font-lock-constant-face) 21 23 (fontified t) 23 25 (fontified t face font-lock-constant-face) 25 27 (fontified t) 27 31 (fontified t face font-lock-type-face) 31 33 (fontified t) 33 36 (fontified t face font-lock-keyword-face) 36 37 (fontified t) 37 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 44 (fontified t face font-lock-constant-face) 44 46 (fontified t) 46 53 (fontified t face font-lock-constant-face) 53 58 (fontified t) 58 61 (fontified t face font-lock-keyword-face) 61 62 (fontified t) 62 66 (fontified t face font-lock-constant-face) 66 68 (fontified t) 68 73 (fontified t face font-lock-type-face) 73 74 (fontified t) 74 75 (fontified t) 75 76 (fontified t) 76 78 (fontified t face font-lock-keyword-face) 78 79 (fontified t) 79 83 (fontified t face font-lock-function-name-face) 83 87 (fontified t) 87 88 (syntax-table #2# fontified t) 88 89 (fontified t) 89 92 (fontified t face font-lock-constant-face) 92 94 (fontified t) 94 96 (fontified t face font-lock-constant-face) 96 98 (fontified t) 98 104 (fontified t face font-lock-type-face) 104 110 (fontified t) 110 111 (fontified t) 111 112 (fontified t) 112 116 (fontified t) 116 119 (fontified t face font-lock-keyword-face) 119 120 (fontified t) 120 125 (fontified t face font-lock-variable-name-face) 125 128 (fontified t) 128 133 (fontified t face font-lock-string-face) 133 134 (fontified t face font-lock-string-face) 134 155 (fontified t face font-lock-string-face) 155 162 (fontified t face font-lock-string-face) 162 163 (fontified t face font-lock-string-face) 163 168 (fontified t face font-lock-string-face) 168 169 (fontified t face font-lock-string-face) 169 171 (fontified t face font-lock-string-face) 171 183 (fontified t face font-lock-string-face) 183 191 (fontified t) 191 192 (fontified t) 192 197 (fontified t face font-lock-type-face) 197 198 (fontified t) 198 209 (fontified t) 209 210 (rear-nonsticky t fontified t) 210 211 (fontified t) 211 215 (fontified t) 215 218 (fontified t face font-lock-keyword-face) 218 219 (fontified t) 219 224 (fontified t face font-lock-variable-name-face) 224 227 (fontified t) 227 231 (fontified t face font-lock-preprocessor-face) 231 242 (fontified t) 242 243 (fontified t face font-lock-string-face) 243 244 (fontified t face font-lock-string-face) 244 245 (fontified t face font-lock-string-face) 245 247 (fontified t) 247 248 (fontified t face font-lock-string-face) 248 253 (fontified t face font-lock-string-face) 253 254 (fontified t face font-lock-string-face) 254 256 (fontified t face font-lock-string-face) 256 270 (fontified t face font-lock-string-face) 270 273 (fontified t) 273 282 (fontified t) 282 285 (fontified t face font-lock-string-face) 285 287 (fontified t) 287 307 (fontified t face font-lock-string-face) 307 310 (fontified t) 310 317 (fontified t) 317 318 (fontified t) 318 325 (fontified t) 325 326 (fontified t rear-nonsticky t) 326 330 (fontified t face font-lock-preprocessor-face) 330 338 (fontified t) 338 339 (fontified t) 339 343 (fontified t) 343 346 (fontified t face font-lock-keyword-face) 346 358 (fontified t) 358 360 (fontified t face font-lock-keyword-face) 360 368 (fontified t) 368 369 (fontified t) 369 377 (fontified t) 377 380 (fontified t face font-lock-keyword-face) 380 381 (fontified t) 381 384 (fontified t face font-lock-variable-name-face) 384 387 (fontified t) 387 394 (fontified t face rust-builtin-formatting-macro-face) 394 395 (fontified t) 395 396 (fontified t) 396 408 (fontified t) 408 415 (fontified t face font-lock-string-face) 415 417 (fontified t face rust-string-interpolation-face) 417 426 (fontified t face font-lock-string-face) 426 428 (fontified t face rust-string-interpolation-face) 428 454 (fontified t face font-lock-string-face) 454 506 (fontified t) 506 509 (fontified t face font-lock-keyword-face) 509 510 (fontified t) 510 513 (fontified t face font-lock-keyword-face) 513 514 (fontified t) 514 518 (fontified t face font-lock-variable-name-face) 518 521 (fontified t) 521 525 (fontified t face font-lock-type-face) 525 534 (fontified t) 534 537 (fontified t face font-lock-constant-face) 537 543 (fontified t) 543 554 (fontified t face font-lock-string-face) 554 565 (fontified t) 565 566 (fontified t face rust-question-mark-face) 566 606 (fontified t) 606 607 (fontified t face rust-question-mark-face) 607 619 (fontified t) 619 621 (fontified t face font-lock-type-face) 621 628 (fontified t)) . 1) (undo-tree-id1069 . -329) (undo-tree-id1070 . 290) (undo-tree-id1071 . -318) (undo-tree-id1072 . -329) (undo-tree-id1073 . 372) (undo-tree-id1074 . -265) (undo-tree-id1075 . 266) (undo-tree-id1076 . 236) (undo-tree-id1077 . 266) (undo-tree-id1078 . 266) (undo-tree-id1079 . 332) (undo-tree-id1080 . -302) (undo-tree-id1081 . 552) (undo-tree-id1082 . -78) (undo-tree-id1083 . 494) (undo-tree-id1084 . -139) (undo-tree-id1085 . 486) (undo-tree-id1086 . -151) (undo-tree-id1087 . 471) (undo-tree-id1088 . -159) (undo-tree-id1089 . 465) (undo-tree-id1090 . -168) (undo-tree-id1091 . 457) (undo-tree-id1092 . -177) (undo-tree-id1093 . 401) (undo-tree-id1094 . -230) (undo-tree-id1095 . 302) (undo-tree-id1096 . -329) (undo-tree-id1097 . -626) (undo-tree-id1098 . -627) (undo-tree-id1099 . -330) (undo-tree-id1100 . -331) (undo-tree-id1101 . -109) (undo-tree-id1102 . -110) (undo-tree-id1103 . -619) (undo-tree-id1104 . -621) (undo-tree-id1105 . -4) (undo-tree-id1106 . -12) (undo-tree-id1107 . -18) (undo-tree-id1108 . -31) (undo-tree-id1109 . -37) (undo-tree-id1110 . -56) (undo-tree-id1111 . -331) (undo-tree-id1112 . -337) (undo-tree-id1113 . -343) (undo-tree-id1114 . -346) (undo-tree-id1115 . -326) (undo-tree-id1116 . -337) (undo-tree-id1117 . -331) (undo-tree-id1118 . -337) (undo-tree-id1119 . -343) (undo-tree-id1120 . -346) (undo-tree-id1121 . -326) (undo-tree-id1122 . -337) (undo-tree-id1123 . -4) (undo-tree-id1124 . -12) (undo-tree-id1125 . -18) (undo-tree-id1126 . -31) (undo-tree-id1127 . -37) (undo-tree-id1128 . -56) (undo-tree-id1129 . -332) (undo-tree-id1130 . -333) (undo-tree-id1131 . -343) (undo-tree-id1132 . -346) (undo-tree-id1133 . -331) (undo-tree-id1134 . -332) (undo-tree-id1135 . -4) (undo-tree-id1136 . -12) (undo-tree-id1137 . -18) (undo-tree-id1138 . -31) (undo-tree-id1139 . -37) (undo-tree-id1140 . -56) (undo-tree-id1141 . -333) (undo-tree-id1142 . -334) (undo-tree-id1143 . -343) (undo-tree-id1144 . -346) (undo-tree-id1145 . -331) (undo-tree-id1146 . -333) (undo-tree-id1147 . -4) (undo-tree-id1148 . -12) (undo-tree-id1149 . -18) (undo-tree-id1150 . -31) (undo-tree-id1151 . -37) (undo-tree-id1152 . -56) (undo-tree-id1153 . -334) (undo-tree-id1154 . -337) (undo-tree-id1155 . -343) (undo-tree-id1156 . -346) (undo-tree-id1157 . -331) (undo-tree-id1158 . -334) (undo-tree-id1159 . -334) (undo-tree-id1160 . -336) (undo-tree-id1161 . -343) (undo-tree-id1162 . -346) (undo-tree-id1163 . -331) (undo-tree-id1164 . -334) (undo-tree-id1165 . -4) (undo-tree-id1166 . -12) (undo-tree-id1167 . -18) (undo-tree-id1168 . -31) (undo-tree-id1169 . -37) (undo-tree-id1170 . -56) (undo-tree-id1171 . -336) (undo-tree-id1172 . -337) (undo-tree-id1173 . -343) (undo-tree-id1174 . -346) (undo-tree-id1175 . -326) (undo-tree-id1176 . -337) (undo-tree-id1177 . -89) (undo-tree-id1178 . -108) (undo-tree-id1179 . -336) (undo-tree-id1180 . -337) (undo-tree-id1181 . -343) (undo-tree-id1182 . -346) (undo-tree-id1183 . -4) (undo-tree-id1184 . -12) (undo-tree-id1185 . -18) (undo-tree-id1186 . -31) (undo-tree-id1187 . -37) (undo-tree-id1188 . -56) (undo-tree-id1189 . -326) (undo-tree-id1190 . -337) (undo-tree-id1191 . -89) (undo-tree-id1192 . -108) (undo-tree-id1193 . -336) (undo-tree-id1194 . -337) (undo-tree-id1195 . -343) (undo-tree-id1196 . -346) (undo-tree-id1197 . -4) (undo-tree-id1198 . -12) (undo-tree-id1199 . -18) (undo-tree-id1200 . -31) (undo-tree-id1201 . -37) (undo-tree-id1202 . -56) (undo-tree-id1203 . -326) (undo-tree-id1204 . -337) (undo-tree-id1205 . -89) (undo-tree-id1206 . -108) (undo-tree-id1207 . 291) (undo-tree-id1208 . 291) (undo-tree-id1209 . 291) (undo-tree-id1210 . 291) (undo-tree-id1211 . 291) (undo-tree-id1212 . 291) (undo-tree-id1213 . -337) (undo-tree-id1214 . -337) (undo-tree-id1215 . 291) (undo-tree-id1216 . 291)) nil (23701 34881 338425 710000) 0 nil]) ((338 . 339) (#(")" 0 1 (fontified nil)) . 338) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (undo-tree-id1223 . -1) (332 . 338) (331 . 333) (#("(" 0 1 (fontified nil)) . -331) (330 . 332)) nil (23701 34881 338449 528000) 0 nil]) ((nil rear-nonsticky nil 326 . 327) (#("
" 0 1 (fontified nil)) . -330) (318 . 331)) nil (23701 34881 338453 856000) 0 nil]) ((#("        dbg
" 0 11 (fontified t) 11 12 (fontified t)) . 349) (undo-tree-id1224 . 1) (undo-tree-id1225 . -10) 359) nil (23701 34881 338457 880000) 0 nil]) ((357 . 360) (#("p" 0 1 (fontified t)) . -357) (undo-tree-id1226 . -1) (#("r" 0 1 (fontified t)) . -358) (undo-tree-id1227 . -1) (#("i" 0 1 (fontified t)) . -359) (undo-tree-id1228 . -1) (#("n" 0 1 (fontified t)) . -360) (undo-tree-id1229 . -1) (#("t" 0 1 (fontified t)) . -361) (undo-tree-id1230 . -1) (#("l" 0 1 (fontified t)) . -362) (undo-tree-id1231 . -1) (#("n" 0 1 (fontified t)) . -363) (undo-tree-id1232 . -1) (#("!" 0 1 (fontified t)) . -364) (undo-tree-id1233 . -1) (#("(" 0 1 (fontified nil)) . -365) (undo-tree-id1234 . -1) (#(")" 0 1 (fontified t)) . 366) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -366) (undo-tree-id1235 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 367) (#("{" 0 1 (fontified t face font-lock-string-face)) . -367) (undo-tree-id1236 . -1) (#("}" 0 1 (fontified t face rust-string-interpolation-face)) . -368) (undo-tree-id1237 . -1) 369 (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 369) (368 . 369) (367 . 369) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -367) (367 . 368) (366 . 368) (#("\"" 0 1 (fontified nil)) . -366) (366 . 367) (365 . 367) (#("(" 0 1 (fontified nil)) . -365) (364 . 366) (#("`" 0 1 (fontified nil)) . -364) (undo-tree-id1238 . -1) (#("`" 0 1 (fontified t)) . 365) (364 . 366) (#("`" 0 1 (fontified nil)) . -364) (357 . 365) (348 . 357) 347) nil (23701 34881 338484 316000) 0 nil]) ((183 . 184)) nil (23701 34881 338492 257000) 0 nil]) ((163 . 164) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 163)) nil (23701 34881 338493 965000) 0 nil]) ((182 . 183) (#("\"" 0 1 (fontified nil face font-lock-comment-face)) . -182) (undo-tree-id1239 . -1) (#("\"" 0 1 (fontified t face font-lock-comment-face)) . 183) (#("h" 0 1 (fontified t face font-lock-comment-face)) . -183) (undo-tree-id1240 . -1) 184 (183 . 184) (182 . 184) (#("\"" 0 1 (fontified nil face font-lock-comment-face)) . -182) (182 . 183) (164 . 182) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 164) (163 . 164) (#(" " 0 1 (fontified nil)) . -163) (163 . 164) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -163) (163 . 164) (160 . 163) (#("i" 0 1 (fontified t face font-lock-string-face)) . -160) (undo-tree-id1241 . -1) 161 (160 . 161) (#(" " 0 1 (fontified t face font-lock-string-face)) . -160) (undo-tree-id1242 . -1) 161 (157 . 161) (#("," 0 1 (fontified t face font-lock-string-face)) . -157) (undo-tree-id1243 . -1) 158 (157 . 158)) nil (23701 34881 338509 817000) 0 nil]) ((135 . 156) (#("bar" 0 3 (fontified t face font-lock-string-face)) . 135)) nil (23701 34881 338515 42000) 0 nil]) ((130 . 131) (#("foo" 0 3 (fontified t face font-lock-string-face)) . 130)) nil (23701 34881 338517 405000) 0 nil]) ((113 . 117)) nil (23701 34881 338518 863000) 0 nil]) ((#("j" 0 1 (fontified t)) . 76)) nil (23701 34881 338520 227000) 0 nil]) ((76 . 77) (75 . 76) 59) nil (23701 34881 338522 398000) 0 nil]) ((#("
" 0 1 (fontified t rear-nonsticky t)) . 59) (undo-tree-id1244 . -1)) nil (23701 34881 338524 907000) 0 nil]) ((nil rear-nonsticky nil 59 . 60) (#("
" 0 1 (fontified nil)) . -76) (59 . 77)) nil (23701 34881 338527 150000) 0 nil]) ((#("use toml::Value;
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 8 (fontified t face font-lock-constant-face) 8 10 (fontified t) 10 15 (fontified t face font-lock-type-face) 15 17 (fontified t)) . 95) (undo-tree-id1245 . -15) 110) nil (23701 34881 338529 981000) 0 nil]) ((nil rear-nonsticky nil 164 . 165) (nil fontified nil 95 . 165) (95 . 165)) nil (23701 34881 338532 455000) 0 nil]) ((#("    " 0 4 (fontified t)) . -95) (undo-tree-id1246 . -4) (undo-tree-id1247 . -4) 99 (94 . 99) 83) nil (23701 34881 338537 6000) 0 nil]) ((#("www." 0 4 (fontified t face font-lock-string-face)) . 180) (t 23701 34169 806461 509000)) nil (23701 34881 338539 352000) 0 nil]) ((1 . 495) (#("use std::env;
use std::fs::File;
use std::io::prelude::*;

fn main() -> std::io::Result<()> {
    let jumps = vec![
        (\"F\", \"https://fosstodon.org\"),
        (\"G\", \"https://www.github.com\"),
    ];

    for (key, url) in jumps {
        let cmd = format!(\"bind '{} :buffer {}\\nbind \\\"{} :open -t {}\\n\", key, url, key, url);
        let mut file = File::create(env::var(\"QUTE_FIFO\").unwrap())?;
        file.write_all(cmd.as_bytes())?;
    }
    Ok(())
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 7 (fontified t face font-lock-constant-face) 7 13 (fontified t) 13 14 (fontified t) 14 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t) 18 21 (fontified t face font-lock-constant-face) 21 23 (fontified t) 23 25 (fontified t face font-lock-constant-face) 25 27 (fontified t) 27 31 (fontified t face font-lock-type-face) 31 33 (fontified t) 33 36 (fontified t face font-lock-keyword-face) 36 37 (fontified t) 37 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 44 (fontified t face font-lock-constant-face) 44 46 (fontified t) 46 53 (fontified t face font-lock-constant-face) 53 58 (fontified t) 58 59 (fontified t) 59 61 (fontified t face font-lock-keyword-face) 61 62 (fontified t) 62 66 (fontified t face font-lock-function-name-face) 66 70 (fontified t) 70 71 (fontified t syntax-table #2#) 71 72 (fontified t) 72 75 (fontified t face font-lock-constant-face) 75 77 (fontified t) 77 79 (fontified t face font-lock-constant-face) 79 81 (fontified t) 81 87 (fontified t face font-lock-type-face) 87 93 (fontified t) 93 94 (fontified t) 94 98 (fontified t) 98 101 (fontified t face font-lock-keyword-face) 101 102 (fontified t) 102 107 (fontified t face font-lock-variable-name-face) 107 110 (fontified t) 110 114 (fontified t face font-lock-preprocessor-face) 114 116 (fontified t) 116 124 (fontified t) 124 125 (fontified t) 125 126 (fontified t face font-lock-string-face) 126 127 (fontified t face font-lock-string-face) 127 128 (fontified t face font-lock-string-face) 128 130 (fontified t) 130 150 (fontified t face font-lock-string-face) 150 151 (fontified t face font-lock-string-face) 151 153 (fontified t face font-lock-string-face) 153 156 (fontified t) 156 164 (fontified t) 164 165 (fontified t) 165 166 (fontified t face font-lock-string-face) 166 167 (fontified t face font-lock-string-face) 167 168 (fontified t face font-lock-string-face) 168 170 (fontified t) 170 193 (fontified t face font-lock-string-face) 193 194 (fontified t face font-lock-string-face) 194 201 (fontified t) 201 203 (fontified t) 203 204 (fontified t) 204 205 (fontified t) 205 209 (fontified t) 209 212 (fontified t face font-lock-keyword-face) 212 213 (fontified t) 213 224 (fontified t) 224 226 (fontified t face font-lock-keyword-face) 226 233 (fontified t) 233 234 (fontified t) 234 235 (fontified t) 235 243 (fontified t) 243 246 (fontified t face font-lock-keyword-face) 246 247 (fontified t) 247 250 (fontified t face font-lock-variable-name-face) 250 253 (fontified t) 253 260 (fontified t face rust-builtin-formatting-macro-face) 260 261 (fontified t) 261 268 (fontified t face font-lock-string-face) 268 270 (fontified t face rust-string-interpolation-face) 270 279 (fontified t face font-lock-string-face) 279 281 (fontified t face rust-string-interpolation-face) 281 283 (fontified t face font-lock-string-face) 283 288 (fontified t face font-lock-string-face) 288 290 (fontified t face font-lock-string-face) 290 292 (fontified t face font-lock-string-face) 292 302 (fontified t face font-lock-string-face) 302 304 (fontified t face font-lock-string-face) 304 306 (fontified t face font-lock-string-face) 306 307 (fontified t face font-lock-string-face) 307 329 (fontified t) 329 330 (fontified t) 330 338 (fontified t) 338 341 (fontified t face font-lock-keyword-face) 341 342 (fontified t) 342 345 (fontified t face font-lock-keyword-face) 345 346 (fontified t) 346 350 (fontified t face font-lock-variable-name-face) 350 353 (fontified t) 353 357 (fontified t face font-lock-type-face) 357 366 (fontified t) 366 369 (fontified t face font-lock-constant-face) 369 375 (fontified t) 375 376 (fontified t face font-lock-string-face) 376 385 (fontified t face font-lock-string-face) 385 386 (fontified t face font-lock-string-face) 386 397 (fontified t) 397 398 (fontified t face rust-question-mark-face) 398 400 (fontified t) 400 408 (fontified t) 408 438 (fontified t) 438 439 (fontified t face rust-question-mark-face) 439 440 (fontified t) 440 441 (fontified t) 441 445 (fontified t) 445 446 (fontified t) 446 447 (fontified t) 447 451 (fontified t) 451 453 (fontified t face font-lock-type-face) 453 457 (fontified t) 457 458 (fontified t) 458 460 (fontified t)) . 1) (undo-tree-id879 . -329) (undo-tree-id880 . 133) (undo-tree-id881 . -329) (undo-tree-id882 . -329) (undo-tree-id883 . 401) (undo-tree-id884 . -61) (undo-tree-id885 . 241) (undo-tree-id886 . -222) (undo-tree-id887 . -235) (undo-tree-id888 . 19) (undo-tree-id889 . -243) (undo-tree-id890 . -408) (undo-tree-id891 . 177) (undo-tree-id892 . 177) (undo-tree-id893 . 177) (undo-tree-id894 . 177) (undo-tree-id895 . -408) (undo-tree-id896 . -115) (undo-tree-id897 . -115) (undo-tree-id898 . -115) (undo-tree-id899 . -131) (undo-tree-id900 . 213) (undo-tree-id901 . -250) (undo-tree-id902 . 178) (undo-tree-id903 . 178) (undo-tree-id904 . 178) (undo-tree-id905 . 178) (undo-tree-id906 . 178) (undo-tree-id907 . 178) (undo-tree-id908 . 178) (undo-tree-id909 . 178) (undo-tree-id910 . 451) (undo-tree-id911 . -12) (undo-tree-id912 . 256) (undo-tree-id913 . 256) (undo-tree-id914 . 329) (undo-tree-id915 . -136) (undo-tree-id916 . 321) (undo-tree-id917 . -148) (undo-tree-id918 . 289) (undo-tree-id919 . -176) (undo-tree-id920 . 277) (undo-tree-id921 . -189) (undo-tree-id922 . 350) (undo-tree-id923 . -113) (undo-tree-id924 . -329) (undo-tree-id925 . -283) (undo-tree-id926 . 177) (undo-tree-id927 . 86) (undo-tree-id928 . 86) (undo-tree-id929 . 160) (undo-tree-id930 . 86) (undo-tree-id931 . -300) (undo-tree-id932 . 177) (undo-tree-id933 . 177) (undo-tree-id934 . 177) (undo-tree-id935 . 178) (undo-tree-id936 . -287) (undo-tree-id937 . 146) (undo-tree-id938 . -317) (undo-tree-id939 . -268) (undo-tree-id940 . -270) (undo-tree-id941 . -279) (undo-tree-id942 . -281) (undo-tree-id943 . -290) (undo-tree-id944 . -292) (undo-tree-id945 . -302) (undo-tree-id946 . -304) (undo-tree-id947 . -268) (undo-tree-id948 . -270) (undo-tree-id949 . -279) (undo-tree-id950 . -281) (undo-tree-id951 . -290) (undo-tree-id952 . -292) (undo-tree-id953 . -302) (undo-tree-id954 . -304) (undo-tree-id955 . -268) (undo-tree-id956 . -270) (undo-tree-id957 . -279) (undo-tree-id958 . -281) (undo-tree-id959 . -290) (undo-tree-id960 . -292) (undo-tree-id961 . -302) (undo-tree-id962 . -304) (undo-tree-id963 . -319) (undo-tree-id964 . -320) (undo-tree-id965 . -268) (undo-tree-id966 . -270) (undo-tree-id967 . -279) (undo-tree-id968 . -281) (undo-tree-id969 . -290) (undo-tree-id970 . -292) (undo-tree-id971 . -302) (undo-tree-id972 . -304) (undo-tree-id973 . -319) (undo-tree-id974 . -321) (undo-tree-id975 . -268) (undo-tree-id976 . -270) (undo-tree-id977 . -279) (undo-tree-id978 . -281) (undo-tree-id979 . -290) (undo-tree-id980 . -292) (undo-tree-id981 . -302) (undo-tree-id982 . -304) (undo-tree-id983 . -268) (undo-tree-id984 . -270) (undo-tree-id985 . -279) (undo-tree-id986 . -281) (undo-tree-id987 . -290) (undo-tree-id988 . -292) (undo-tree-id989 . -302) (undo-tree-id990 . -304) (undo-tree-id991 . -268) (undo-tree-id992 . -270) (undo-tree-id993 . -279) (undo-tree-id994 . -281) (undo-tree-id995 . -290) (undo-tree-id996 . -292) (undo-tree-id997 . -302) (undo-tree-id998 . -304) (undo-tree-id999 . -268) (undo-tree-id1000 . -270) (undo-tree-id1001 . -279) (undo-tree-id1002 . -281) (undo-tree-id1003 . -290) (undo-tree-id1004 . -292) (undo-tree-id1005 . -302) (undo-tree-id1006 . -304) (undo-tree-id1007 . 133) (undo-tree-id1008 . 135) (undo-tree-id1009 . -324) (undo-tree-id1010 . -325) (undo-tree-id1011 . 133) (undo-tree-id1012 . 134) (undo-tree-id1013 . -324) (undo-tree-id1014 . -326) (undo-tree-id1015 . 134) (undo-tree-id1016 . 134) (undo-tree-id1017 . 136) (undo-tree-id1018 . -327) (undo-tree-id1019 . 134) (undo-tree-id1020 . 134) (undo-tree-id1021 . 134) (undo-tree-id1022 . 134) (undo-tree-id1023 . 134) (undo-tree-id1024 . 134) (undo-tree-id1025 . 134) (undo-tree-id1026 . 134) (undo-tree-id1027 . 134) (undo-tree-id1028 . 134) (undo-tree-id1029 . 134) (undo-tree-id1030 . 134) (undo-tree-id1031 . 134) (undo-tree-id1032 . 134) (undo-tree-id1033 . -326) (undo-tree-id1034 . -326) (undo-tree-id1035 . 134) (undo-tree-id1036 . 134) (undo-tree-id1037 . 134) (undo-tree-id1038 . 134)) nil (23701 34169 745542 707000) 0 nil]) ((322 . 328) (318 . 322)) nil (23701 34169 745568 296000) 0 nil]) ((#(" let cmd = format!(\"" 0 1 (fontified t face font-lock-string-face) 1 4 (fontified t face font-lock-string-face) 4 5 (fontified t face font-lock-string-face) 5 8 (fontified t face font-lock-string-face) 8 11 (fontified t face font-lock-string-face) 11 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face)) . 284) (undo-tree-id1039 . 19) (undo-tree-id1040 . 19) (undo-tree-id1041 . 19) (undo-tree-id1042 . 19) (undo-tree-id1043 . 15) (undo-tree-id1044 . -8) (undo-tree-id1045 . 19) (undo-tree-id1046 . 19) (undo-tree-id1047 . 19) (undo-tree-id1048 . 20)) nil (23701 34169 745589 525000) 0 nil]) ((284 . 285) (#("        " 0 7 (fontified nil face font-lock-string-face) 7 8 (rear-nonsticky t fontified nil face font-lock-string-face)) . 284) (undo-tree-id1049 . 8) (undo-tree-id1050 . 8) (undo-tree-id1051 . 8) (undo-tree-id1052 . 8) (undo-tree-id1053 . -8) (undo-tree-id1054 . 8) (undo-tree-id1055 . 8) (#("
" 0 1 (fontified t face font-lock-string-face)) . -284) (undo-tree-id1056 . 1) (undo-tree-id1057 . 1) (undo-tree-id1058 . 1) (undo-tree-id1059 . 1) (undo-tree-id1060 . 1) (undo-tree-id1061 . 1) 283) nil (23701 34169 745618 761000) 0 nil]) ((#("\", key, url);" 0 1 (fontified t face font-lock-string-face) 1 13 (fontified t)) . 284) (undo-tree-id1062 . 1) (undo-tree-id1063 . 1) (undo-tree-id1064 . 1) (undo-tree-id1065 . 1) (undo-tree-id1066 . 5) (undo-tree-id1067 . -11) (undo-tree-id1068 . 13) (t 23701 34110 143282 328000)) nil (23701 34169 745637 560000) 0 nil] [nil ([nil ([nil ([nil nil ((#("        let mut file = File::create(env::var(\"QUTE_FIFO\").unwrap())?;
" 0 7 (fontified t) 7 8 (fontified t rear-nonsticky t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 20 (fontified t face font-lock-variable-name-face) 20 23 (fontified t) 23 27 (fontified t face font-lock-type-face) 27 36 (fontified t) 36 39 (fontified t face font-lock-constant-face) 39 45 (fontified t) 45 56 (fontified t face font-lock-string-face) 56 67 (fontified t) 67 68 (fontified t face rust-question-mark-face) 68 69 (fontified t) 69 70 (fontified t)) . 432) (undo-tree-id858 . -69) (undo-tree-id859 . -69) (undo-tree-id860 . -8) (undo-tree-id861 . 62) 440) ((432 . 502)) (23701 34134 595451 172000) 0 nil]) ((nil rear-nonsticky nil 439 . 440) (#("
" 0 1 (fontified nil)) . -501) (431 . 502) 376) ((#("
        let mut file = File::create(env::var(\"QUTE_FIFO\").unwrap())?;
" 0 1 (fontified t) 1 8 (fontified nil) 8 9 (fontified nil rear-nonsticky nil) 9 12 (fontified nil face font-lock-keyword-face) 12 13 (fontified nil) 13 16 (fontified nil face font-lock-keyword-face) 16 17 (fontified nil) 17 21 (fontified nil face font-lock-variable-name-face) 21 24 (fontified nil) 24 28 (fontified nil face font-lock-type-face) 28 37 (fontified nil) 37 40 (fontified nil face font-lock-constant-face) 40 46 (fontified nil) 46 57 (fontified nil face font-lock-string-face) 57 68 (fontified nil) 68 69 (fontified nil face rust-question-mark-face) 69 70 (fontified nil) 70 71 (fontified nil)) . 431) (undo-tree-id866 . -70) (undo-tree-id867 . -1) (undo-tree-id868 . -70) (undo-tree-id869 . -9) (undo-tree-id870 . 62) (undo-tree-id871 . -1) (undo-tree-id872 . 62) (501 . 502) (nil rear-nonsticky t 439 . 440)) (23701 34134 600431 283000) 0 nil]) ((298 . 368) 306) ((#("        let mut file = File::create(env::var(\"QUTE_FIFO\").unwrap())?;
" 0 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 20 (fontified t face font-lock-variable-name-face) 20 23 (fontified t) 23 27 (fontified t face font-lock-type-face) 27 36 (fontified t) 36 39 (fontified t face font-lock-constant-face) 39 45 (fontified t) 45 56 (fontified t face font-lock-string-face) 56 67 (fontified t) 67 68 (fontified t face rust-question-mark-face) 68 70 (fontified t)) . 298) (undo-tree-id873 . 62) (undo-tree-id874 . 62) (undo-tree-id875 . -16) (undo-tree-id876 . -20) (undo-tree-id877 . -12) (undo-tree-id878 . -20)) (23701 34134 795681 893000) 0 nil]) ((#("        let mut file = File::create(env::var(\"QUTE_FIFO\").unwrap())?;
" 0 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 20 (fontified t face font-lock-variable-name-face) 20 23 (fontified t) 23 27 (fontified t face font-lock-type-face) 27 36 (fontified t) 36 39 (fontified t face font-lock-constant-face) 39 45 (fontified t) 45 56 (fontified t face font-lock-string-face) 56 67 (fontified t) 67 68 (fontified t face rust-question-mark-face) 68 70 (fontified t)) . 362) (undo-tree-id862 . -44) (undo-tree-id863 . -44) (undo-tree-id864 . 26) (undo-tree-id865 . 26) 406 (t 23701 34110 143282 328000)) ((362 . 432)) (23701 34135 128222 174000) 0 nil]) ((341 . 343) (#("=" 0 1 (fontified t face font-lock-string-face)) . -341) (undo-tree-id844 . -1) 342 (336 . 342) (#("buffer" 0 6 (fontified t face font-lock-string-face)) . 336) (undo-tree-id845 . 6)) nil (23701 34135 647837 564000) 0 nil]) ((#("\"" 0 1 (fontified t face font-lock-string-face)) . 332) (undo-tree-id846 . 1) (undo-tree-id847 . 1) (undo-tree-id848 . 1) (undo-tree-id849 . 1) (undo-tree-id850 . 1)) nil (23701 34110 125483 879000) 0 nil]) ((#("\\" 0 1 (fontified t face font-lock-string-face)) . 332) (undo-tree-id851 . 1) (undo-tree-id852 . 1) (undo-tree-id853 . 1)) nil (23701 34110 125499 807000) 0 nil]) ((330 . 334) (#("\\\"" 0 2 (fontified nil face font-lock-string-face)) . -330) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (331 . 332)) nil (23701 34110 125514 574000) 0 nil]) ((330 . 331) (#("'" 0 1 (fontified t face font-lock-string-face)) . 330) (undo-tree-id857 . 1)) nil (23701 34110 125526 301000) 0 nil]) ((nil rear-nonsticky nil 305 . 306) (#("
" 0 1 (fontified nil)) . -359) (297 . 360) 239 (t 23701 34001 570184 538000)) nil (23701 34110 125538 535000) 0 nil]) ((197 . 202) (196 . 197)) nil (23701 34001 548827 662000) 0 nil]) ((174 . 194) (172 . 174) (#("g" 0 1 (fontified t face font-lock-string-face)) . -172) (undo-tree-id836 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -173) (undo-tree-id837 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -174) (undo-tree-id838 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -175) (undo-tree-id839 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -176) (undo-tree-id840 . -1) (#("b" 0 1 (fontified t face font-lock-string-face)) . -177) (undo-tree-id841 . -1) 178 (172 . 178) (#("https://doc.rust-lang.org/std/macro.vec.html" 0 1 (fontified t face font-lock-string-face) 1 5 (fontified t face font-lock-string-face) 5 6 (fontified t face font-lock-string-face) 6 8 (fontified t face font-lock-string-face) 8 43 (fontified t face font-lock-string-face) 43 44 (rear-nonsticky t fontified t face font-lock-string-face)) . 172) (undo-tree-id842 . -20) 192) nil (23701 34001 548897 108000) 0 nil]) ((135 . 153) (#("s" 0 1 (fontified t face font-lock-string-face)) . -135) (undo-tree-id843 . -1) 136 (134 . 136) (132 . 134) (#("https://github.com/qutebrowser/qutebrowser/blob/81b3ef937ebf202670c1561429552874ed51d32a/doc/userscripts.asciidoc" 0 112 (fontified t face font-lock-string-face) 112 113 (fontified t rear-nonsticky t face font-lock-string-face)) . 132)) nil (23701 34001 548929 54000) 0 nil]) ((259 . 260) (#("Z" 0 1 (fontified t face font-lock-string-face)) . 259)) nil (23701 34001 548940 971000) 0 nil]) ((127 . 128) (#("Q" 0 1 (fontified t face font-lock-string-face)) . 127) (t 23701 33521 91807 708000)) nil (23701 34001 548950 490000) 0 nil]) ((390 . 392) (t 23701 33399 265886 278000)) nil (23701 33521 15575 10000) 0 nil]) ((249 . 257) (#(" " 0 1 (fontified nil)) . 249) (248 . 249)) nil (23701 33399 251339 935000) 0 nil]) ((nil rear-nonsticky nil 244 . 245) (nil fontified nil 132 . 245) (132 . 245)) nil (23701 33399 251351 208000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 132)) nil (23701 33399 251354 727000) 0 nil]) ((132 . 133) (#("
" 0 1 (fontified t rear-nonsticky t face font-lock-string-face)) . -132) 120) nil (23701 33399 251359 337000) 0 nil]) ((135 . 137)) nil (23701 33399 251362 198000) 0 nil]) ((nil rear-nonsticky nil 132 . 133) (132 . 133) (131 . 133) (#("\"" 0 1 (fontified nil)) . -131) (129 . 132) (#("<" 0 1 (fontified nil syntax-table #2#)) . -129) (undo-tree-id831 . -1) (#(">" 0 1 (fontified t syntax-table #2#)) . 130) (129 . 131) (#("<" 0 1 (fontified nil face font-lock-string-face syntax-table #2#)) . -129) (129 . 130) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 129) (127 . 129) (126 . 128) (#("\"" 0 1 (fontified nil)) . -126) (126 . 127) (125 . 127) (#("(" 0 1 (fontified nil)) . -125) (125 . 126) (116 . 125)) nil (23701 33399 251389 587000) 0 nil]) ((#("
" 0 1 (fontified t)) . 172) (undo-tree-id832 . 1) (undo-tree-id833 . 1) (undo-tree-id834 . 1) (undo-tree-id835 . 1)) nil (23701 33399 251401 212000) 0 nil]) ((#("    " 0 4 (fontified nil)) . 172) (undo-tree-id829 . -4) (undo-tree-id830 . -4) (171 . 176) (t 23701 33256 616772 150000)) ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 171) (undo-tree-id819 . -5) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -5) (undo-tree-id823 . -5) (172 . 176)) (23701 33359 155883 155000) 0 nil] [nil ([nil ([nil nil ((185 . 187)) ((#("ii" 0 2 (fontified t)) . 185) (undo-tree-id784 . -1) (undo-tree-id785 . 2) (undo-tree-id786 . -1) (undo-tree-id787 . 1) (undo-tree-id788 . 1) (undo-tree-id789 . 1) (undo-tree-id790 . -2) (undo-tree-id791 . 2)) (23701 33352 461885 688000) 0 nil]) ((185 . 186) (180 . 185) 125) ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 180) (undo-tree-id792 . -5) (#("O" 0 1 (fontified t face font-lock-type-face)) . 185) (undo-tree-id793 . 1) (undo-tree-id794 . 1) (undo-tree-id795 . 1) (undo-tree-id796 . 1) (undo-tree-id797 . 1) (undo-tree-id798 . 1) (undo-tree-id799 . 1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . 1) (undo-tree-id803 . 1) (undo-tree-id804 . 1) (undo-tree-id805 . 1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . 1) (undo-tree-id809 . 1)) (23701 33352 466555 473000) 0 nil] [nil nil ((nil rear-nonsticky nil 360 . 361) (nil fontified nil 125 . 361) (125 . 361)) ((#("\")
        (\"Z\", \"https://doc.rust-lang.org/std/macro.vec.html\")];

    for (key, url) in jumps {
        let cmd = format!(\"bind '{} :buffer {}\", key, url);
        let mut file = File::create(env::var(\"QUTE_FIFO\").unwrap())?;
        " 0 13 (fontified nil face font-lock-string-face) 13 14 (fontified nil face font-lock-type-face) 14 18 (fontified nil face font-lock-string-face) 18 23 (fontified nil face font-lock-variable-name-face) 23 24 (fontified nil) 24 26 (fontified nil face font-lock-comment-delimiter-face) 26 67 (fontified nil face font-lock-comment-face) 67 72 (fontified nil) 72 75 (fontified nil face font-lock-keyword-face) 75 87 (fontified nil) 87 89 (fontified nil face font-lock-keyword-face) 89 106 (fontified nil) 106 109 (fontified nil face font-lock-keyword-face) 109 110 (fontified nil) 110 113 (fontified nil face font-lock-variable-name-face) 113 116 (fontified nil) 116 123 (fontified nil face rust-builtin-formatting-macro-face) 123 124 (fontified nil) 124 131 (fontified nil face font-lock-string-face) 131 133 (fontified nil face rust-string-interpolation-face) 133 142 (fontified nil face font-lock-string-face) 142 144 (fontified nil face rust-string-interpolation-face) 144 145 (fontified nil face font-lock-string-face) 145 166 (fontified nil) 166 169 (fontified nil face font-lock-keyword-face) 169 170 (fontified nil) 170 173 (fontified nil face font-lock-keyword-face) 173 174 (fontified nil) 174 178 (fontified nil face font-lock-variable-name-face) 178 181 (fontified nil) 181 185 (fontified nil face font-lock-type-face) 185 194 (fontified nil) 194 197 (fontified nil face font-lock-constant-face) 197 203 (fontified nil) 203 214 (fontified nil face font-lock-string-face) 214 225 (fontified nil) 225 226 (fontified nil face rust-question-mark-face) 226 228 (fontified nil) 228 235 (fontified nil) 235 236 (fontified nil rear-nonsticky nil)) . 125) (undo-tree-id768 . -235) (undo-tree-id769 . -235) (undo-tree-id770 . 1) (undo-tree-id771 . 236) (undo-tree-id772 . -96) (undo-tree-id773 . -97) (undo-tree-id774 . -14) (undo-tree-id775 . -14) (undo-tree-id776 . -23) (undo-tree-id777 . -96) (undo-tree-id778 . -97) (undo-tree-id779 . -14) (undo-tree-id780 . -14) (undo-tree-id781 . -23) (undo-tree-id782 . 1) (undo-tree-id783 . 1) (nil fontified t 351 . 353) (nil fontified t 350 . 351) (nil fontified t 339 . 350) (nil fontified t 328 . 339) (nil fontified t 322 . 328) (nil fontified t 319 . 322) (nil fontified t 310 . 319) (nil fontified t 306 . 310) (nil fontified t 303 . 306) (nil fontified t 299 . 303) (nil fontified t 298 . 299) (nil fontified t 295 . 298) (nil fontified t 294 . 295) (nil fontified t 291 . 294) (nil fontified t 270 . 291) (nil fontified t 269 . 270) (nil fontified t 267 . 269) (nil fontified t 258 . 267) (nil fontified t 256 . 258) (nil fontified t 249 . 256) (nil fontified t 248 . 249) (nil fontified t 241 . 248) (nil fontified t 238 . 241) (nil fontified t 235 . 238) (nil fontified t 234 . 235) (nil fontified t 231 . 234) (nil fontified t 214 . 231) (nil fontified t 212 . 214) (nil fontified t 200 . 212) (nil fontified t 197 . 200) (nil fontified t 192 . 197) (nil fontified t 151 . 192) (nil fontified t 149 . 151) (nil fontified t 148 . 149) (nil fontified t 143 . 148) (nil fontified t 139 . 143) (nil fontified t 138 . 139) (nil fontified t 125 . 138) (nil rear-nonsticky t 360 . 361)) (23701 33347 407114 661000) 0 nil] [nil ([nil nil ((nil rear-nonsticky nil 367 . 368) (nil fontified nil 358 . 368) (nil fontified nil 357 . 358) (nil fontified nil 346 . 357) (nil fontified nil 335 . 346) (nil fontified nil 329 . 335) (nil fontified nil 326 . 329) (nil fontified nil 317 . 326) (nil fontified nil 313 . 317) (nil fontified nil 310 . 313) (nil fontified nil 306 . 310) (nil fontified nil 305 . 306) (nil fontified nil 302 . 305) (nil fontified nil 301 . 302) (nil fontified nil 298 . 301) (nil fontified nil 290 . 298) (nil fontified nil 289 . 290) (nil fontified nil 277 . 289) (nil fontified nil 276 . 277) (nil fontified nil 274 . 276) (nil fontified nil 265 . 274) (nil fontified nil 263 . 265) (nil fontified nil 256 . 263) (nil fontified nil 255 . 256) (nil fontified nil 248 . 255) (nil fontified nil 245 . 248) (nil fontified nil 242 . 245) (nil fontified nil 241 . 242) (nil fontified nil 238 . 241) (nil fontified nil 230 . 238) (nil fontified nil 229 . 230) (nil fontified nil 228 . 229) (nil fontified nil 221 . 228) (nil fontified nil 219 . 221) (nil fontified nil 208 . 219) (nil fontified nil 207 . 208) (nil fontified nil 204 . 207) (nil fontified nil 200 . 204) (nil fontified nil 199 . 200) (nil fontified nil 196 . 199) (nil fontified nil 195 . 196) (nil fontified nil 194 . 195) (nil fontified nil 193 . 194) (nil fontified nil 151 . 193) (nil fontified nil 150 . 151) (nil fontified nil 149 . 150) (nil fontified nil 147 . 149) (nil fontified nil 146 . 147) (nil fontified nil 145 . 146) (nil fontified nil 144 . 145) (nil fontified nil 143 . 144) (nil fontified nil 135 . 143) (nil fontified nil 134 . 135) (nil fontified nil 133 . 134) (nil fontified nil 132 . 133) (132 . 368)) ((#("\")
        (\"Z\", \"https://doc.rust-lang.org/std/macro.vec.html\")];

    for (key, url) in jumps {
        let cmd = format!(\"bind '{} :buffer {}\", key, url);
        let mut file = File::create(env::var(\"QUTE_FIFO\").unwrap())?;
        " 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil) 2 3 (fontified nil) 3 11 (fontified nil) 11 12 (fontified nil) 12 13 (fontified nil face font-lock-string-face) 13 14 (fontified nil face font-lock-string-face) 14 15 (fontified nil face font-lock-string-face) 15 17 (fontified nil) 17 18 (fontified nil face font-lock-string-face) 18 19 (fontified nil face font-lock-string-face) 19 61 (fontified nil face font-lock-string-face) 61 62 (rear-nonsticky t fontified nil face font-lock-string-face) 62 63 (fontified nil face font-lock-string-face) 63 64 (fontified nil) 64 67 (fontified nil) 67 68 (fontified nil) 68 72 (fontified nil) 72 75 (fontified nil face font-lock-keyword-face) 75 76 (fontified nil) 76 87 (fontified nil) 87 89 (fontified nil face font-lock-keyword-face) 89 96 (fontified nil) 96 97 (fontified nil) 97 98 (fontified nil) 98 106 (fontified nil) 106 109 (fontified nil face font-lock-keyword-face) 109 110 (fontified nil) 110 113 (fontified nil face font-lock-variable-name-face) 113 116 (fontified nil) 116 123 (fontified nil face rust-builtin-formatting-macro-face) 123 124 (fontified nil) 124 131 (fontified nil face font-lock-string-face) 131 133 (fontified nil face rust-string-interpolation-face) 133 142 (fontified nil face font-lock-string-face) 142 144 (fontified nil face rust-string-interpolation-face) 144 145 (fontified nil face font-lock-string-face) 145 157 (fontified nil) 157 158 (fontified nil) 158 166 (fontified nil) 166 169 (fontified nil face font-lock-keyword-face) 169 170 (fontified nil) 170 173 (fontified nil face font-lock-keyword-face) 173 174 (fontified nil) 174 178 (fontified nil face font-lock-variable-name-face) 178 181 (fontified nil) 181 185 (fontified nil face font-lock-type-face) 185 194 (fontified nil) 194 197 (fontified nil face font-lock-constant-face) 197 203 (fontified nil) 203 214 (fontified nil face font-lock-string-face) 214 225 (fontified nil) 225 226 (fontified nil face rust-question-mark-face) 226 228 (fontified nil) 228 235 (fontified nil) 235 236 (fontified nil rear-nonsticky nil)) . 132) (undo-tree-id711 . -235) (undo-tree-id712 . 236) (undo-tree-id713 . -96) (undo-tree-id714 . -97) (undo-tree-id715 . -236) (undo-tree-id716 . -64) (undo-tree-id717 . -2) (undo-tree-id718 . -236) (undo-tree-id719 . -181) (undo-tree-id720 . -226) (undo-tree-id721 . -72) (undo-tree-id722 . 1) (undo-tree-id723 . 1) (nil fontified t 134 . 135) (nil fontified t 196 . 199) (nil fontified t 199 . 200) (nil fontified t 229 . 230) (nil fontified t 289 . 290) (nil fontified t 358 . 360) (nil rear-nonsticky t 367 . 368)) (23701 33343 571449 846000) 0 nil]) ((nil rear-nonsticky nil 367 . 368) (nil fontified nil 358 . 368) (nil fontified nil 357 . 358) (nil fontified nil 346 . 357) (nil fontified nil 335 . 346) (nil fontified nil 329 . 335) (nil fontified nil 326 . 329) (nil fontified nil 317 . 326) (nil fontified nil 313 . 317) (nil fontified nil 310 . 313) (nil fontified nil 306 . 310) (nil fontified nil 305 . 306) (nil fontified nil 302 . 305) (nil fontified nil 301 . 302) (nil fontified nil 298 . 301) (nil fontified nil 290 . 298) (nil fontified nil 289 . 290) (nil fontified nil 277 . 289) (nil fontified nil 276 . 277) (nil fontified nil 274 . 276) (nil fontified nil 265 . 274) (nil fontified nil 263 . 265) (nil fontified nil 256 . 263) (nil fontified nil 255 . 256) (nil fontified nil 248 . 255) (nil fontified nil 245 . 248) (nil fontified nil 242 . 245) (nil fontified nil 241 . 242) (nil fontified nil 238 . 241) (nil fontified nil 230 . 238) (nil fontified nil 229 . 230) (nil fontified nil 228 . 229) (nil fontified nil 221 . 228) (nil fontified nil 219 . 221) (nil fontified nil 208 . 219) (nil fontified nil 207 . 208) (nil fontified nil 204 . 207) (nil fontified nil 200 . 204) (nil fontified nil 199 . 200) (nil fontified nil 196 . 199) (nil fontified nil 195 . 196) (nil fontified nil 194 . 195) (nil fontified nil 193 . 194) (nil fontified nil 151 . 193) (nil fontified nil 150 . 151) (nil fontified nil 149 . 150) (nil fontified nil 147 . 149) (nil fontified nil 146 . 147) (nil fontified nil 145 . 146) (nil fontified nil 144 . 145) (nil fontified nil 143 . 144) (nil fontified nil 135 . 143) (nil fontified nil 134 . 135) (nil fontified nil 133 . 134) (nil fontified nil 132 . 133) (132 . 368) (131 . 133) (#("\"" 0 1 (fontified nil)) . -131) (129 . 132) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 129) (127 . 129) (126 . 128) (#("\"" 0 1 (fontified nil)) . -126) (126 . 127) (125 . 127) (#("(" 0 1 (fontified nil)) . -125) (125 . 126) (117 . 125) (117 . 118) 125) ((#("
" 0 1 (fontified nil face font-lock-string-face)) . 117) (undo-tree-id724 . 1) (undo-tree-id725 . 1) (undo-tree-id726 . 1) (#("        " 0 8 (fontified nil)) . 117) (undo-tree-id727 . -8) (undo-tree-id728 . -8) (undo-tree-id729 . -8) (undo-tree-id730 . -8) (#("(" 0 1 (fontified nil)) . 125) (125 . 126) (#("()" 0 1 (fontified nil) 1 2 (fontified nil face font-lock-string-face)) . 125) (undo-tree-id731 . -1) (undo-tree-id732 . 1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . 1) (undo-tree-id738 . 1) (#("\"" 0 1 (fontified nil)) . 126) (126 . 127) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 126) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (#("Q\"" 0 2 (fontified nil face font-lock-string-face)) . 127) (undo-tree-id744 . -2) (undo-tree-id745 . -2) (undo-tree-id746 . -2) (undo-tree-id747 . -2) (undo-tree-id748 . -2) (129 . 130) (#(", \"" 0 2 (fontified nil) 2 3 (fontified nil)) . 129) (undo-tree-id749 . -2) (undo-tree-id750 . -2) (undo-tree-id751 . -2) (undo-tree-id752 . -2) (undo-tree-id753 . -2) (131 . 132) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 131) (undo-tree-id754 . -1) (undo-tree-id755 . 1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . 1) (undo-tree-id761 . 1) (#("\")
        (\"Z\", \"https://doc.rust-lang.org/std/macro.vec.html\")];

    for (key, url) in jumps {
        let cmd = format!(\"bind '{} :buffer {}\", key, url);
        let mut file = File::create(env::var(\"QUTE_FIFO\").unwrap())?;
        " 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil) 2 3 (fontified nil) 3 11 (fontified nil face font-lock-string-face) 11 12 (fontified nil face font-lock-string-face) 12 13 (fontified nil face font-lock-string-face) 13 14 (fontified nil face font-lock-type-face) 14 15 (fontified nil face font-lock-string-face) 15 17 (fontified nil face font-lock-string-face) 17 18 (fontified nil face font-lock-string-face) 18 19 (fontified nil face font-lock-variable-name-face) 19 23 (fontified nil face font-lock-variable-name-face) 23 24 (fontified nil) 24 26 (fontified nil face font-lock-comment-delimiter-face) 26 61 (fontified nil face font-lock-comment-face) 61 62 (rear-nonsticky t fontified nil face font-lock-comment-face) 62 63 (fontified nil face font-lock-comment-face) 63 64 (fontified nil face font-lock-comment-face) 64 67 (fontified nil face font-lock-comment-face) 67 68 (fontified nil) 68 72 (fontified nil) 72 75 (fontified nil face font-lock-keyword-face) 75 76 (fontified nil) 76 87 (fontified nil) 87 89 (fontified nil face font-lock-keyword-face) 89 96 (fontified nil) 96 97 (fontified nil) 97 98 (fontified nil) 98 106 (fontified nil) 106 109 (fontified nil face font-lock-keyword-face) 109 110 (fontified nil) 110 113 (fontified nil face font-lock-variable-name-face) 113 116 (fontified nil) 116 123 (fontified nil face rust-builtin-formatting-macro-face) 123 124 (fontified nil) 124 131 (fontified nil face font-lock-string-face) 131 133 (fontified nil face rust-string-interpolation-face) 133 142 (fontified nil face font-lock-string-face) 142 144 (fontified nil face rust-string-interpolation-face) 144 145 (fontified nil face font-lock-string-face) 145 157 (fontified nil) 157 158 (fontified nil) 158 166 (fontified nil) 166 169 (fontified nil face font-lock-keyword-face) 169 170 (fontified nil) 170 173 (fontified nil face font-lock-keyword-face) 173 174 (fontified nil) 174 178 (fontified nil face font-lock-variable-name-face) 178 181 (fontified nil) 181 185 (fontified nil face font-lock-type-face) 185 194 (fontified nil) 194 197 (fontified nil face font-lock-constant-face) 197 203 (fontified nil) 203 214 (fontified nil face font-lock-string-face) 214 225 (fontified nil) 225 226 (fontified nil face rust-question-mark-face) 226 228 (fontified nil) 228 235 (fontified nil) 235 236 (rear-nonsticky nil fontified nil)) . 132) (undo-tree-id762 . 236) (undo-tree-id763 . -14) (undo-tree-id764 . 236) (undo-tree-id765 . 236) (undo-tree-id766 . 84) (undo-tree-id767 . -155) (nil fontified t 134 . 135) (nil fontified t 196 . 199) (nil fontified t 199 . 200) (nil fontified t 229 . 230) (nil fontified t 289 . 290) (nil fontified t 358 . 360) (nil rear-nonsticky t 367 . 368)) (23701 33343 585903 982000) 0 nil]) ((116 . 125) (t 23701 33256 616772 150000)) ((#("
        " 0 1 (fontified t) 1 9 (fontified t)) . 116) (undo-tree-id810 . -9) (undo-tree-id811 . -9) (undo-tree-id812 . -9) (undo-tree-id813 . -9) (undo-tree-id814 . -1) (undo-tree-id815 . -1)) (23701 33352 743482 184000) 0 nil]) ((168 . 169) (#("]" 0 1 (fontified t)) . 168) (undo-tree-id826 . 1) (undo-tree-id827 . -1) (undo-tree-id828 . -1)) ((168 . 169) (#(")" 0 1 (fontified t)) . 168) (undo-tree-id824 . 1) (undo-tree-id825 . 1) (t 23701 33256 616772 150000)) (23701 33358 844071 524000) 0 nil]) ((116 . 117) (#("[" 0 1 (fontified t)) . 116) (t 23701 33236 373565 895000)) nil (23701 33357 292931 951000) 0 nil]) ((252 . 262) (#("env::var(\"QUTE_URL\").unwrap(),);" 0 3 (fontified t face font-lock-constant-face) 3 9 (fontified t) 9 19 (fontified t face font-lock-string-face) 19 32 (fontified t)) . 252)) nil (23701 33236 361062 621000) 0 nil]) ((#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 238) (237 . 238) (236 . 238) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -236) (236 . 237) (#("Z" 0 1 (fontified t face font-lock-string-face)) . 236)) nil (23701 33236 361070 144000) 0 nil]) ((#("    " 0 4 (fontified nil)) . -362) (undo-tree-id683 . -4) (undo-tree-id684 . -4) (undo-tree-id685 . -4) (undo-tree-id686 . -4) (354 . 362) (#("    " 0 4 (fontified nil)) . -292) (284 . 292) (#("    " 0 3 (fontified nil) 3 4 (fontified nil rear-nonsticky t)) . -211) (undo-tree-id687 . -4) (undo-tree-id688 . -4) (203 . 211) 350) nil (23701 33236 361087 498000) 0 nil]) ((nil rear-nonsticky nil 206 . 207) (#("
" 0 1 (fontified nil)) . -382) (202 . 383) 177) nil (23701 33236 361091 743000) 0 nil]) ((#("    let cmd = format!(\"bind 'Z :buffer {}\", env::var(\"QUTE_URL\").unwrap(),);
    let mut file = File::create(env::var(\"QUTE_FIFO\").unwrap())?;
    file.write_all(cmd.as_bytes())?;
" 0 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 11 (fontified t face font-lock-variable-name-face) 11 14 (fontified t) 14 21 (fontified t face rust-builtin-formatting-macro-face) 21 22 (fontified t) 22 39 (fontified t face font-lock-string-face) 39 41 (fontified t face rust-string-interpolation-face) 41 42 (fontified t face font-lock-string-face) 42 44 (fontified t) 44 47 (fontified t face font-lock-constant-face) 47 53 (fontified t) 53 63 (fontified t face font-lock-string-face) 63 77 (fontified t) 77 81 (fontified t) 81 84 (fontified t face font-lock-keyword-face) 84 85 (fontified t) 85 88 (fontified t face font-lock-keyword-face) 88 89 (fontified t) 89 93 (fontified t face font-lock-variable-name-face) 93 96 (fontified t) 96 100 (fontified t face font-lock-type-face) 100 109 (fontified t) 109 112 (fontified t face font-lock-constant-face) 112 118 (fontified t) 118 129 (fontified t face font-lock-string-face) 129 140 (fontified t) 140 141 (fontified t face rust-question-mark-face) 141 177 (fontified t) 177 178 (fontified t face rust-question-mark-face) 178 180 (fontified t)) . 209) (undo-tree-id689 . -146) (undo-tree-id690 . -146) (undo-tree-id691 . -3) (undo-tree-id692 . -146) (undo-tree-id693 . -3) (undo-tree-id694 . -146) 355) nil (23701 33236 361100 495000) 0 nil]) ((202 . 207) (201 . 203) (#("{" 0 1 (fontified nil)) . -201) (195 . 202) (191 . 195) (#(")" 0 1 (fontified nil)) . 191) (182 . 191) (181 . 183) (#("(" 0 1 (fontified nil)) . -181) (177 . 182) (173 . 177) (#("    " 0 4 (fontified nil)) . 172) (undo-tree-id695 . -4) (171 . 177) (170 . 171) (#("
" 0 1 (fontified t)) . -170) (undo-tree-id696 . -1) (#(" " 0 1 (fontified t)) . -171) (undo-tree-id697 . -1) (#(" " 0 1 (fontified t)) . -172) (undo-tree-id698 . -1) (#(" " 0 1 (fontified t)) . -173) (undo-tree-id699 . -1) (#(" " 0 1 (fontified t)) . -174) (undo-tree-id700 . -1) (#(" " 0 1 (fontified t)) . -175) (undo-tree-id701 . -1) (#(" " 0 1 (fontified t)) . -176) (undo-tree-id702 . -1) (#(" " 0 1 (fontified t)) . -177) (undo-tree-id703 . -1) (#(" " 0 1 (fontified t)) . -178) (undo-tree-id704 . -1) 179 (171 . 179) (171 . 172) 208) nil (23701 33236 361123 197000) 0 nil]) ((#("    " 0 4 (fontified nil)) . 116) (#("
" 0 1 (fontified t)) . -116) 115 (t 23701 33156 107407 170000)) nil (23701 33236 361130 365000) 0 nil] [nil nil ((#("h" 0 1 (fontified t face font-lock-string-face)) . 128) (undo-tree-id657 . 1) (undo-tree-id658 . 1) (undo-tree-id659 . 1) (undo-tree-id660 . 1) (undo-tree-id661 . 1) (undo-tree-id662 . 1) (undo-tree-id663 . 1) (undo-tree-id664 . 1) (undo-tree-id665 . 1) (undo-tree-id666 . 1) (undo-tree-id667 . 1) (undo-tree-id668 . 1) (undo-tree-id669 . 1) (undo-tree-id670 . 1) (undo-tree-id671 . 1) (undo-tree-id672 . 1) (undo-tree-id673 . 1) (undo-tree-id674 . 1)) ((128 . 129)) (23701 33153 109248 383000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 128) (undo-tree-id675 . -1) (undo-tree-id676 . 1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . 1) (undo-tree-id680 . 1) (undo-tree-id681 . 1) (undo-tree-id682 . 1)) nil (23701 33153 113979 114000) 0 nil]) ((nil rear-nonsticky nil 172 . 173) (128 . 173) (127 . 129) (#("\"" 0 1 (fontified nil)) . 127) (125 . 128) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 125) (124 . 125) (#(" " 0 1 (fontified nil)) . 124) (124 . 125) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 124) (124 . 125) (#(":" 0 1 (fontified nil face font-lock-string-face)) . 124) (123 . 125) (122 . 124) (#("\"" 0 1 (fontified nil)) . 122) (122 . 123) (#("''" 0 1 (fontified nil) 1 2 (fontified nil)) . 122) (122 . 124) (#("'" 0 1 (fontified nil)) . 122) (122 . 123) (121 . 123) (#("[" 0 1 (fontified nil)) . 121) (121 . 122) (#("\\" 0 1 (fontified nil)) . 121) (121 . 122) (#("[]" 0 1 (fontified nil) 1 2 (fontified nil)) . 121) (121 . 123) (#("[" 0 1 (fontified nil)) . 121) (116 . 122) (115 . 117) (#("[" 0 1 (fontified nil)) . 115) (94 . 116) (t 23701 32964 721982 785000)) ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 94) (undo-tree-id595 . -5) (undo-tree-id596 . -5) (undo-tree-id597 . -5) (undo-tree-id598 . -5) (#("let " 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil)) . 99) (undo-tree-id599 . -4) (undo-tree-id600 . -4) (#("jumps = vec!" 0 5 (fontified nil face font-lock-variable-name-face) 5 8 (fontified nil) 8 12 (fontified nil face font-lock-preprocessor-face)) . 103) (undo-tree-id601 . -12) (undo-tree-id602 . -12) (undo-tree-id603 . 4) (undo-tree-id604 . -11) (#("[" 0 1 (fontified nil)) . 115) (115 . 116) (#("[]" 0 1 (fontified nil) 1 2 (fontified nil)) . 115) (undo-tree-id605 . -1) (undo-tree-id606 . 1) (undo-tree-id607 . -1) (undo-tree-id608 . 1) (undo-tree-id609 . 1) (undo-tree-id610 . -1) (undo-tree-id611 . -2) (undo-tree-id612 . -1) (undo-tree-id613 . -2) (undo-tree-id614 . 1) (undo-tree-id615 . 1) (#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 116) (undo-tree-id616 . -5) (undo-tree-id617 . -5) (undo-tree-id618 . -5) (undo-tree-id619 . -5) (#("[" 0 1 (fontified nil)) . 121) (121 . 122) (#("[]" 0 1 (fontified nil) 1 2 (fontified nil)) . 121) (undo-tree-id620 . -1) (121 . 123) (#("\\" 0 1 (fontified nil)) . 121) (undo-tree-id621 . -1) (121 . 122) (#("[" 0 1 (fontified nil)) . 121) (121 . 122) (#("[]" 0 1 (fontified nil) 1 2 (fontified nil)) . 121) (undo-tree-id622 . -1) (undo-tree-id623 . 1) (undo-tree-id624 . -1) (undo-tree-id625 . 1) (undo-tree-id626 . 1) (undo-tree-id627 . -2) (undo-tree-id628 . -2) (undo-tree-id629 . 1) (undo-tree-id630 . 1) (#("'" 0 1 (fontified nil)) . 122) (122 . 123) (#("''" 0 1 (fontified nil) 1 2 (fontified nil)) . 122) (undo-tree-id631 . -1) (122 . 124) (#("\"" 0 1 (fontified nil)) . 122) (122 . 123) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 122) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (#("Z:" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 123) (undo-tree-id634 . -1) (undo-tree-id635 . -2) (124 . 125) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 124) (124 . 125) (#(" " 0 1 (fontified nil)) . 124) (124 . 125) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 124) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (125 . 126) (#(", \"" 0 2 (fontified nil) 2 3 (fontified nil)) . 125) (undo-tree-id638 . -2) (undo-tree-id639 . -2) (127 . 128) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 127) (undo-tree-id640 . -1) (undo-tree-id641 . 1) (undo-tree-id642 . -1) (undo-tree-id643 . 1) (undo-tree-id644 . 1) (undo-tree-id645 . 1) (undo-tree-id646 . 1) (#(" " 0 1 (fontified nil face font-lock-string-face)) . 128) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . 1) (#("https://doc.rust-lang.org/std/macro.vec.html" 0 43 (fontified nil face font-lock-string-face) 43 44 (fontified nil rear-nonsticky nil face font-lock-string-face)) . 129) (undo-tree-id650 . -43) (undo-tree-id651 . 4) (undo-tree-id652 . -44) (undo-tree-id653 . -2) (undo-tree-id654 . -5) (undo-tree-id655 . 1) (undo-tree-id656 . 1) (nil rear-nonsticky t 172 . 173)) (23701 33150 991733 749000) 0 nil] [nil nil ((59 . 60) (t 23701 32964 721982 785000) 59) ((#("
" 0 1 (fontified t)) . 59) (undo-tree-id589 . -1) (undo-tree-id590 . 1)) (23701 33074 78843 155000) 0 nil]) ((1 . 288) (#("use std::env;
use std::fs::File;
use std::io::prelude::*;

fn main() -> std::io::Result<()> {
    let cmd = format!(
        \"bind 'Z :buffer {}\",
        env::var(\"QUTE_URL\").unwrap(),
    );
    let mut file = File::create(env::var(\"QUTE_FIFO\").unwrap())?;
    file.write_all(cmd.as_bytes())?;
    Ok(())
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 7 (fontified t face font-lock-constant-face) 7 9 (fontified t) 9 13 (fontified t) 13 14 (fontified t) 14 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t) 18 21 (fontified t face font-lock-constant-face) 21 23 (fontified t) 23 25 (fontified t face font-lock-constant-face) 25 27 (fontified t) 27 31 (fontified t face font-lock-type-face) 31 33 (fontified t) 33 36 (fontified t face font-lock-keyword-face) 36 37 (fontified t) 37 40 (fontified t face font-lock-constant-face) 40 42 (fontified t) 42 44 (fontified t face font-lock-constant-face) 44 46 (fontified t) 46 53 (fontified t face font-lock-constant-face) 53 56 (fontified t) 56 57 (fontified t rear-nonsticky t) 57 58 (fontified t) 58 59 (fontified t) 59 61 (fontified t face font-lock-keyword-face) 61 62 (fontified t) 62 66 (fontified t face font-lock-function-name-face) 66 70 (fontified t) 70 71 (fontified t syntax-table #2#) 71 72 (fontified t) 72 75 (fontified t face font-lock-constant-face) 75 77 (fontified t) 77 79 (fontified t face font-lock-constant-face) 79 81 (fontified t) 81 87 (fontified t face font-lock-type-face) 87 88 (fontified t) 88 90 (fontified t) 90 91 (fontified t) 91 94 (fontified t) 94 98 (fontified t) 98 101 (fontified t face font-lock-keyword-face) 101 102 (fontified t) 102 105 (fontified t face font-lock-variable-name-face) 105 108 (fontified t) 108 114 (fontified t face rust-builtin-formatting-macro-face) 114 115 (fontified t face rust-builtin-formatting-macro-face) 115 116 (fontified t) 116 117 (fontified t) 117 125 (fontified t) 125 126 (fontified t face font-lock-string-face) 126 140 (fontified t face font-lock-string-face) 140 141 (fontified t rear-nonsticky t face font-lock-string-face) 141 142 (fontified t face font-lock-string-face) 142 143 (fontified t face font-lock-string-face) 143 144 (fontified t face font-lock-string-face) 144 145 (fontified t face font-lock-string-face) 145 146 (fontified t) 146 147 (fontified t) 147 155 (fontified t) 155 158 (fontified t face font-lock-constant-face) 158 163 (fontified t) 163 164 (fontified t) 164 173 (fontified t face font-lock-string-face) 173 174 (fontified t face font-lock-string-face) 174 175 (fontified t) 175 176 (fontified t) 176 182 (fontified t) 182 183 (fontified t) 183 184 (fontified t) 184 185 (fontified t) 185 186 (fontified t) 186 192 (fontified t) 192 193 (fontified t) 193 197 (fontified t) 197 200 (fontified t face font-lock-keyword-face) 200 201 (fontified t) 201 204 (fontified t face font-lock-keyword-face) 204 205 (fontified t) 205 209 (fontified t face font-lock-variable-name-face) 209 212 (fontified t) 212 216 (fontified t face font-lock-type-face) 216 225 (fontified t) 225 228 (fontified t face font-lock-constant-face) 228 233 (fontified t) 233 234 (fontified t) 234 244 (fontified t face font-lock-string-face) 244 245 (fontified t face font-lock-string-face) 245 247 (fontified t) 247 253 (fontified t) 253 254 (fontified t) 254 255 (fontified t) 255 256 (fontified t) 256 257 (fontified t face rust-question-mark-face) 257 258 (fontified t) 258 259 (fontified t) 259 282 (fontified t) 282 290 (fontified t) 290 292 (fontified t) 292 293 (fontified t) 293 294 (fontified t face rust-question-mark-face) 294 296 (fontified t) 296 300 (fontified t) 300 302 (fontified t face font-lock-type-face) 302 305 (fontified t) 305 306 (rear-nonsticky t fontified t) 306 307 (fontified t) 307 308 (fontified t) 308 309 (fontified t)) . 1) (undo-tree-id496 . -126) (undo-tree-id497 . 166) (undo-tree-id498 . -9) (undo-tree-id499 . -193) (undo-tree-id500 . -305) (undo-tree-id501 . 300) (undo-tree-id502 . -12) (undo-tree-id503 . -9) (undo-tree-id504 . -14) (undo-tree-id505 . 54) (undo-tree-id506 . 54) (undo-tree-id507 . -193) (undo-tree-id508 . -225) (undo-tree-id509 . 54) (undo-tree-id510 . 54) (undo-tree-id511 . 207) (undo-tree-id512 . -105) (undo-tree-id513 . 250) (undo-tree-id514 . -61) (undo-tree-id515 . 108) (undo-tree-id516 . -204) (undo-tree-id517 . 31) (undo-tree-id518 . -281) (undo-tree-id519 . 84) (undo-tree-id520 . -228) (undo-tree-id521 . 74) (undo-tree-id522 . -239) (undo-tree-id523 . 125) (undo-tree-id524 . 125) (undo-tree-id525 . 125) (undo-tree-id526 . 125) (undo-tree-id527 . 144) (undo-tree-id528 . -169) (undo-tree-id529 . 154) (undo-tree-id530 . -158) (undo-tree-id531 . 165) (undo-tree-id532 . 184) (undo-tree-id533 . -225) (undo-tree-id534 . -126) (undo-tree-id535 . -126) (undo-tree-id536 . 165) (undo-tree-id537 . 165) (undo-tree-id538 . -126) (undo-tree-id539 . 165) (undo-tree-id540 . -126) (undo-tree-id541 . 125) (undo-tree-id542 . 165) (undo-tree-id543 . 125) (undo-tree-id544 . 134) (undo-tree-id545 . -184) (undo-tree-id546 . -184) (undo-tree-id547 . -190) (undo-tree-id548 . 165) (undo-tree-id549 . 165) (undo-tree-id550 . 165) (undo-tree-id551 . -126) (undo-tree-id552 . 165) (undo-tree-id553 . 183) (undo-tree-id554 . 165) (undo-tree-id555 . 168) (undo-tree-id556 . -142) (undo-tree-id557 . -142) (undo-tree-id558 . -142) (undo-tree-id559 . -142) (undo-tree-id560 . -142) (undo-tree-id561 . -143) (undo-tree-id562 . 166) (undo-tree-id563 . 167) (undo-tree-id564 . 167) (undo-tree-id565 . 167) (undo-tree-id566 . 137) (undo-tree-id567 . 167) (undo-tree-id568 . 123) (undo-tree-id569 . 137) (undo-tree-id570 . -186) (undo-tree-id571 . -192) (undo-tree-id572 . 119) (undo-tree-id573 . 123) 191) nil (23701 33149 833409 846000) 0 nil]) ((#("        env::var(\"USER\").unwrap()
" 0 8 (fontified t) 8 11 (fontified t face font-lock-constant-face) 11 17 (fontified t) 17 21 (fontified t face font-lock-string-face) 21 22 (fontified t face font-lock-string-face) 22 23 (fontified t face font-lock-string-face) 23 34 (fontified t)) . 187) (undo-tree-id574 . 26) (undo-tree-id575 . -11) (undo-tree-id576 . -25) (undo-tree-id577 . -8) (undo-tree-id578 . -33) (undo-tree-id579 . -8) (undo-tree-id580 . -33) (undo-tree-id581 . 9) 212) nil (23701 32964 708848 633000) 0 nil]) ((143 . 145) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -143) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (142 . 144) (nil rear-nonsticky nil 141 . 142) (nil fontified nil 127 . 142) (127 . 142) (#("message-info 'hi to {} from {} with rust!" 0 20 (fontified t face font-lock-string-face) 20 23 (fontified t face font-lock-string-face) 23 28 (fontified t face font-lock-string-face) 28 30 (fontified t face font-lock-string-face) 30 40 (fontified t face font-lock-string-face) 40 41 (fontified t rear-nonsticky t face font-lock-string-face)) . 127) (undo-tree-id584 . 41) (undo-tree-id585 . -41) (undo-tree-id586 . 41) (undo-tree-id587 . 41) (undo-tree-id588 . 41)) nil (23701 32964 708860 245000) 0 nil]) ((nil rear-nonsticky nil 167 . 168) (127 . 168) (#("message-info 'hi to {} from {} with rust!" 0 20 (fontified t face font-lock-string-face) 20 23 (fontified t face font-lock-string-face) 23 28 (fontified t face font-lock-string-face) 28 30 (fontified t face font-lock-string-face) 30 41 (fontified t face font-lock-string-face)) . 127) (undo-tree-id485 . 41) (undo-tree-id486 . 41) (undo-tree-id487 . 41) (undo-tree-id488 . 41) (undo-tree-id489 . 41) (undo-tree-id490 . 41) (undo-tree-id491 . 41) (undo-tree-id492 . 41) (undo-tree-id493 . 41) (undo-tree-id494 . 41) (undo-tree-id495 . 41) (t 23701 32861 259344 387000)) ((127 . 168) (#("message-info 'hi to {} from {} with rust!" 0 20 (fontified nil face font-lock-string-face) 20 23 (fontified nil face font-lock-string-face) 23 28 (fontified nil face font-lock-string-face) 28 30 (fontified nil face font-lock-string-face) 30 40 (fontified nil face font-lock-string-face) 40 41 (fontified nil rear-nonsticky nil face font-lock-string-face)) . 127) (undo-tree-id475 . 41) (undo-tree-id476 . -41) (undo-tree-id478 . -41) (undo-tree-id480 . -41) (undo-tree-id481 . -40) (undo-tree-id483 . 1) (nil rear-nonsticky t 167 . 168)) (23701 32947 918920 30000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 208) (207 . 208) (206 . 208) (#("(" 0 1 (fontified nil)) . 206) (200 . 207) (#("un" 0 2 (fontified nil)) . 200) (199 . 202)) ((#(".un" 0 1 (fontified nil) 1 3 (fontified nil)) . 199) (200 . 202) (#("unwrap" 0 6 (fontified nil)) . 200) (#("(" 0 1 (fontified nil)) . 206) (206 . 207) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 206) (#(")" 0 1 (fontified nil)) . 207) (208 . 209) (t 23701 32861 259344 387000)) (23701 32947 728817 113000) 0 nil]) ((199 . 200)) nil (23701 32946 663506 816000) 0 nil]) ((189 . 197) (#("U" 0 1 (fontified t face font-lock-string-face)) . -189) (undo-tree-id442 . -1) 190 (189 . 190) (188 . 190) (#("\"" 0 1 (fontified nil)) . -188) (188 . 189) (187 . 189) (#("(" 0 1 (fontified nil)) . -187) (181 . 188) (#("b" 0 1 (fontified t)) . -181) (undo-tree-id443 . -1) 182 (179 . 182) (170 . 179) 149) nil (23701 32840 567687 101000) 0 nil]) ((149 . 150) (#("}" 0 1 (fontified nil face font-lock-string-face)) . 149) (148 . 149) (147 . 149) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -147) (144 . 148) (t 23701 32763 776685 123000)) nil (23701 32840 567696 984000) 0 nil]) ((266 . 268) (#("(" 0 1 (fontified nil)) . -266) (undo-tree-id424 . -1) (undo-tree-id425 . -1) (266 . 267) (260 . 266) (#("un" 0 2 (fontified t)) . -260) (undo-tree-id426 . -2) 262 (259 . 262) (#("?" 0 1 (fontified t face rust-question-mark-face)) . 259) (undo-tree-id427 . 1) (undo-tree-id428 . 1) (undo-tree-id429 . 1) (undo-tree-id430 . 1) (undo-tree-id431 . 1) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (undo-tree-id434 . 1) (undo-tree-id435 . 1) (undo-tree-id436 . 1) (undo-tree-id437 . 1) (undo-tree-id438 . 1) (undo-tree-id439 . 1) (undo-tree-id440 . 1) (undo-tree-id441 . 1) (t 23701 32724 146965 414000)) nil (23701 32763 762490 385000) 0 nil] [nil nil ((259 . 260) (#("?)?;" 0 1 (fontified t face rust-question-mark-face) 1 2 (fontified t) 2 3 (fontified t face rust-question-mark-face) 3 4 (fontified t)) . 259) (undo-tree-id407 . 3) (undo-tree-id408 . 3) (undo-tree-id409 . 3) (undo-tree-id410 . 3) (undo-tree-id411 . 4) (undo-tree-id412 . 4) (undo-tree-id413 . -1) (undo-tree-id414 . -1) (undo-tree-id415 . -1) (undo-tree-id416 . -1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . -1) (undo-tree-id420 . 4) (t 23701 32724 146965 414000)) ((259 . 263) (#("." 0 1 (fontified t)) . 259) (undo-tree-id421 . 1) (undo-tree-id422 . 1) (undo-tree-id423 . 1)) (23701 32757 39779 893000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 297) (undo-tree-id403 . -1) (undo-tree-id404 . 1) (296 . 297) (295 . 297) (#("(" 0 1 (fontified nil)) . -295) (undo-tree-id405 . -1) (undo-tree-id406 . -1) (286 . 296) (t 23701 32703 490446 438000)) nil (23701 32757 43022 658000) 0 nil]) ((259 . 260) (#("/" 0 1 (fontified t)) . -259) (undo-tree-id400 . -1) (undo-tree-id401 . 1) (undo-tree-id402 . -1) 260 (259 . 260) (t 23701 32680 530611 965000)) nil (23701 32703 474185 936000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 91) (90 . 91) (89 . 91) (#("(" 0 1 (fontified nil)) . -89) (89 . 90) (88 . 90) (#("<" 0 1 (fontified nil face font-lock-type-face)) . -88) (88 . 89) (82 . 88) (#("Res" 0 3 (fontified t face font-lock-type-face)) . -82) (undo-tree-id399 . -3) 85 (73 . 85)) nil (23701 32680 522727 764000) 0 nil]) ((69 . 73)) nil (23701 32680 522735 5000) 0 nil] [nil nil ((#("    Ok(())
" 0 4 (fontified t) 4 6 (fontified t face font-lock-type-face) 6 9 (fontified t) 9 10 (rear-nonsticky t fontified t) 10 11 (fontified t)) . 266) (undo-tree-id305 . -9) (undo-tree-id306 . -9) (undo-tree-id308 . -10) (undo-tree-id310 . -10) (undo-tree-id312 . -10) (undo-tree-id314 . -10) (undo-tree-id316 . -10) (undo-tree-id318 . -10) (undo-tree-id320 . -10) (undo-tree-id322 . -10) (undo-tree-id324 . -10) 275) ((266 . 277) (t 23701 32611 927782 260000)) (23701 32611 918104 990000) 0 nil]) ((260 . 262) (#("o" 0 1 (fontified t)) . -260) (undo-tree-id326 . -1) (undo-tree-id327 . 1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (#("m" 0 1 (fontified t)) . -261) (undo-tree-id332 . -1) (undo-tree-id333 . 1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (#("m" 0 1 (fontified t)) . -262) (undo-tree-id337 . -1) (undo-tree-id338 . 1) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) 263 (259 . 263) (#("f" 0 1 (fontified t)) . -259) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#("o" 0 1 (fontified t)) . -260) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (undo-tree-id348 . -1) (#("r" 0 1 (fontified t face font-lock-keyword-face)) . -261) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (#("m" 0 1 (fontified t)) . -262) (undo-tree-id352 . -1) 263 (259 . 263) (#("b\"Hello, world!\"" 0 1 (fontified t) 1 16 (fontified t face font-lock-string-face)) . 259) (undo-tree-id353 . 16) (undo-tree-id354 . 15) (undo-tree-id355 . 16) (undo-tree-id356 . 16) (undo-tree-id357 . 15) (undo-tree-id358 . 15) (undo-tree-id359 . 16) (undo-tree-id360 . 16) (undo-tree-id361 . 15)) nil (23701 32630 845394 672000) 0 nil]) ((76 . 92) (#("println" 0 7 (fontified t face rust-builtin-formatting-macro-face)) . 76) (undo-tree-id362 . -2) (undo-tree-id363 . 1) (undo-tree-id364 . 2) (undo-tree-id365 . 1) (undo-tree-id366 . 3) (undo-tree-id367 . 2) (undo-tree-id368 . 4) (undo-tree-id369 . 3) (undo-tree-id370 . 5) (undo-tree-id371 . 4) 78) nil (23701 32611 918200 848000) 0 nil]) ((221 . 225) (#("_" 0 1 (fontified t face font-lock-string-face)) . -221) (undo-tree-id372 . -1) 222 (216 . 222) (215 . 217) (#("\"" 0 1 (fontified nil)) . -215) (215 . 216) (214 . 216) (#("(" 0 1 (fontified nil)) . -214) (209 . 215) (#("." 0 1 (fontified t)) . -209) (undo-tree-id373 . -1) 210 (206 . 210) (#("\"foo.txt\"" 0 9 (fontified t face font-lock-string-face)) . 206) (undo-tree-id374 . 9) (undo-tree-id375 . 8) (undo-tree-id376 . 9) (undo-tree-id377 . 9) (undo-tree-id378 . 9) (undo-tree-id379 . 9) (undo-tree-id380 . 9) (undo-tree-id381 . 9) (undo-tree-id382 . 9) (undo-tree-id383 . 9) (undo-tree-id384 . 9) (undo-tree-id385 . 9) (undo-tree-id386 . 9) (undo-tree-id387 . 9) (undo-tree-id388 . 9) (undo-tree-id389 . 9) (undo-tree-id390 . 9) (undo-tree-id391 . 9) (undo-tree-id392 . 9) (undo-tree-id393 . 9) (undo-tree-id394 . 9) (undo-tree-id395 . 9) (undo-tree-id396 . 9) (undo-tree-id397 . 9)) nil (23701 32611 918257 226000) 0 nil]) ((nil rear-nonsticky nil 267 . 268) (nil fontified nil 174 . 268) (174 . 268)) nil (23701 32611 918266 477000) 0 nil]) ((#("    " 0 4 (fontified t)) . -174) (undo-tree-id398 . -4) 178 (173 . 178) 172) nil (23701 32611 918271 53000) 0 nil]) ((nil rear-nonsticky nil 57 . 58) (nil fontified nil 15 . 58) (15 . 58) (14 . 15) (t 23701 32341 79940 744000) 9) nil (23701 32611 918276 442000) 0 nil] [nil nil ((nil rear-nonsticky nil 52 . 53) (nil fontified nil 10 . 53) (10 . 53) 9 (t 23701 32341 79940 744000)) ((#("use std::fs::File;
use std::io::prelude::*;" 0 3 (fontified nil face font-lock-keyword-face) 3 4 (fontified nil) 4 7 (fontified nil face font-lock-constant-face) 7 9 (fontified nil) 9 11 (fontified nil face font-lock-constant-face) 11 13 (fontified nil) 13 17 (fontified nil face font-lock-type-face) 17 19 (fontified nil) 19 22 (fontified nil face font-lock-keyword-face) 22 23 (fontified nil) 23 26 (fontified nil face font-lock-constant-face) 26 28 (fontified nil) 28 30 (fontified nil face font-lock-constant-face) 30 32 (fontified nil) 32 39 (fontified nil face font-lock-constant-face) 39 42 (fontified nil) 42 43 (fontified nil rear-nonsticky nil)) . 10) (undo-tree-id296 . -42) (undo-tree-id297 . -42) (undo-tree-id298 . 1) (undo-tree-id299 . -3) (undo-tree-id300 . -4) (undo-tree-id301 . -7) (undo-tree-id302 . -3) (undo-tree-id303 . -4) (undo-tree-id304 . -7) (nil fontified t 27 . 29) (nil fontified t 23 . 27) (nil fontified t 21 . 23) (nil fontified t 19 . 21) (nil fontified t 17 . 19) (nil fontified t 14 . 17) (nil fontified t 13 . 14) (nil fontified t 10 . 13) (nil rear-nonsticky t 52 . 53)) (23701 32509 835749 442000) 0 nil]) ((1 . 132) (#("use std::env;

fn main() {
    println!(\"message-info 'hi from {} with rust!\", env::var(\"USER\").unwrap());
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 7 (fontified t face font-lock-constant-face) 7 13 (fontified t) 13 15 (fontified t) 15 17 (fontified t face font-lock-keyword-face) 17 18 (fontified t) 18 22 (fontified t face font-lock-function-name-face) 22 27 (fontified t) 27 31 (fontified t) 31 39 (fontified t face rust-builtin-formatting-macro-face) 39 40 (fontified t) 40 63 (fontified t face font-lock-string-face) 63 65 (fontified t face rust-string-interpolation-face) 65 71 (fontified t face font-lock-string-face) 71 77 (fontified t face font-lock-string-face) 77 78 (fontified t) 78 79 (fontified t) 79 82 (fontified t face font-lock-constant-face) 82 87 (fontified t) 87 88 (fontified t) 88 92 (fontified t face font-lock-string-face) 92 93 (fontified t face font-lock-string-face) 93 94 (fontified t face font-lock-string-face) 94 96 (fontified t) 96 102 (fontified t) 102 104 (fontified t) 104 106 (fontified t) 106 107 (fontified t) 107 109 (fontified t)) . 1) (undo-tree-id255 . 3) (undo-tree-id256 . 100) (undo-tree-id257 . -12) (undo-tree-id258 . 31) (undo-tree-id259 . 31) (undo-tree-id260 . 94) (undo-tree-id261 . -17) (undo-tree-id262 . 30) (undo-tree-id263 . -82) (undo-tree-id264 . 30) (undo-tree-id265 . 30) (undo-tree-id266 . 54) (undo-tree-id267 . 30) (undo-tree-id268 . -55) (undo-tree-id269 . -55) (undo-tree-id270 . -105) (undo-tree-id271 . 31) (undo-tree-id272 . 31) (undo-tree-id273 . 31) (undo-tree-id274 . 31) (undo-tree-id275 . 31) (undo-tree-id276 . 3) (undo-tree-id277 . 4) (undo-tree-id278 . 4) (undo-tree-id279 . 4) 106) nil (23701 32509 842811 564000) 0 nil]) ((106 . 107)) nil (23701 32341 67114 434000) 0 nil]) ((#(";" 0 1 (fontified t)) . -106) (undo-tree-id280 . -1) 107) nil (23701 32341 67118 132000) 0 nil]) ((78 . 79)) nil (23701 32341 67119 912000) 0 nil]) ((#(" println!(\"user is: {}\"," 0 1 (fontified t) 1 2 (fontified t face rust-builtin-formatting-macro-face) 2 3 (fontified t face rust-builtin-formatting-macro-face) 3 9 (fontified t face rust-builtin-formatting-macro-face) 9 10 (fontified t) 10 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face) 15 20 (fontified t face font-lock-string-face) 20 22 (fontified t face rust-string-interpolation-face) 22 23 (fontified t face font-lock-string-face) 23 24 (fontified t)) . 78) (undo-tree-id281 . 22) (undo-tree-id282 . 22) (undo-tree-id283 . -8) (undo-tree-id284 . 24) (undo-tree-id285 . -4) (undo-tree-id286 . -11) (undo-tree-id287 . -1) (undo-tree-id288 . -8) (undo-tree-id289 . -1) (undo-tree-id290 . -8) (undo-tree-id291 . 23) (undo-tree-id292 . 24) (undo-tree-id293 . 24) (undo-tree-id294 . 23)) nil (23701 32341 67132 919000) 0 nil]) ((78 . 79) (#("    " 0 4 (fontified nil)) . 78) (undo-tree-id295 . -4) (#("
" 0 1 (fontified t)) . -78) 77) nil (23701 32341 67137 485000) 0 nil]) ((#(");" 0 2 (fontified t)) . 78)) nil (23701 32341 67140 358000) 0 nil]) ((66 . 72) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 66) (65 . 66) (64 . 66) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -64) (64 . 65) (t 23701 32282 763784 811000)) nil (23701 32341 67144 219000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 126) (undo-tree-id253 . -1) (125 . 126) (124 . 126) (#("(" 0 1 (fontified nil)) . -124) (124 . 125) (118 . 124) (#("un" 0 2 (fontified t)) . -118) (undo-tree-id254 . -2) 120 (119 . 120) (117 . 119) (t 23701 32212 531094 412000)) nil (23701 32282 754506 797000) 0 nil]) ((78 . 79) (#("t" 0 1 (fontified t face font-lock-preprocessor-face)) . 78) (undo-tree-id247 . 1)) nil (23701 32212 522611 648000) 0 nil]) ((118 . 119)) nil (23701 32212 522616 542000) 0 nil]) ((113 . 115) (#("e" 0 1 (fontified t face font-lock-string-face)) . -113) (undo-tree-id248 . -1) (undo-tree-id249 . -1) (#("r" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . -114) (undo-tree-id250 . -1) 115 (113 . 115) (#("R" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . -113) (undo-tree-id251 . -1) (#("T" 0 1 (fontified t face font-lock-string-face)) . -114) (undo-tree-id252 . -1) 115 (111 . 115) (110 . 112) (#("\"" 0 1 (fontified nil)) . -110) (110 . 111) (109 . 111) (#("(" 0 1 (fontified nil)) . -109) (99 . 110) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 99) (98 . 99) (#(" " 0 1 (fontified nil)) . -98) (98 . 99) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -98) (98 . 99) (#("}" 0 1 (fontified nil face font-lock-string-face)) . 98) (97 . 98) (96 . 98) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -96) (96 . 97)) nil (23701 32212 522637 661000) 0 nil]) ((#("\"" 0 1 (fontified nil face font-lock-string-face)) . 97) (87 . 97) (86 . 88) (#("\"" 0 1 (fontified nil)) . -86) (86 . 87) (85 . 87) (#("(" 0 1 (fontified nil)) . -85) (77 . 86) (72 . 77) (t 23701 32152 628336 654000) 28) nil (23701 32212 522647 462000) 0 nil]) ((1 . 75) (#("use std::env;


fn main() {
    println!(\"message-info 'hi from rust!\");
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 7 (fontified t face font-lock-constant-face) 7 14 (fontified t) 14 15 (fontified t) 15 16 (fontified t) 16 18 (fontified t face font-lock-keyword-face) 18 19 (fontified t) 19 23 (fontified t face font-lock-function-name-face) 23 28 (fontified t) 28 32 (fontified t) 32 40 (fontified t face rust-builtin-formatting-macro-face) 40 41 (fontified t) 41 55 (fontified t face font-lock-string-face) 55 60 (fontified t face font-lock-string-face) 60 61 (fontified t face font-lock-string-face) 61 64 (fontified t face font-lock-string-face) 64 65 (fontified t face font-lock-string-face) 65 70 (fontified t face font-lock-string-face) 70 72 (fontified t) 72 73 (fontified t) 73 75 (fontified t)) . 1) (undo-tree-id160 . 6) (undo-tree-id161 . 6) (undo-tree-id162 . -42) (undo-tree-id163 . -42) (undo-tree-id164 . -42) (undo-tree-id165 . 6) (undo-tree-id166 . 6) (undo-tree-id167 . 6) (undo-tree-id168 . 6) (undo-tree-id169 . 6) (undo-tree-id170 . 6) (undo-tree-id171 . 6) (undo-tree-id172 . 6) (undo-tree-id173 . -42) (undo-tree-id174 . -42) (undo-tree-id175 . 6) (undo-tree-id176 . 34) (undo-tree-id177 . -42) (undo-tree-id178 . 6) (undo-tree-id179 . 6) (undo-tree-id180 . 71) (undo-tree-id181 . 59) (undo-tree-id182 . -18) (undo-tree-id183 . 3) (undo-tree-id184 . 3) (undo-tree-id185 . 3) (undo-tree-id186 . 3) (undo-tree-id187 . 3) (undo-tree-id188 . 3) (undo-tree-id189 . 3) (undo-tree-id190 . 3) (undo-tree-id191 . 55) (undo-tree-id192 . 43) (undo-tree-id193 . 60) (undo-tree-id194 . 55) (undo-tree-id195 . 61) (undo-tree-id196 . 60) (undo-tree-id197 . 67) (undo-tree-id198 . 61) (undo-tree-id199 . 66) (undo-tree-id200 . -12) (undo-tree-id201 . 71) (undo-tree-id202 . 67) (undo-tree-id203 . 71) (undo-tree-id204 . 75) (undo-tree-id205 . -12) (undo-tree-id206 . -13) (undo-tree-id207 . 71) (undo-tree-id208 . 74) (undo-tree-id209 . -12) (undo-tree-id210 . -13) (undo-tree-id211 . 71) (undo-tree-id212 . 73) (undo-tree-id213 . -12) (undo-tree-id214 . -13) (undo-tree-id215 . 71) (undo-tree-id216 . 72) (undo-tree-id217 . -4) (undo-tree-id218 . -12) (undo-tree-id219 . 72) (undo-tree-id220 . 72) (undo-tree-id221 . 71) (undo-tree-id222 . 72) (undo-tree-id223 . -4) (undo-tree-id224 . -7) (undo-tree-id225 . 71) (undo-tree-id226 . 71) (undo-tree-id227 . 71) (undo-tree-id228 . 71) (undo-tree-id229 . 71) (undo-tree-id230 . 71) (undo-tree-id231 . 71) (undo-tree-id232 . 71) (undo-tree-id233 . 71) (undo-tree-id234 . 71) (undo-tree-id235 . 71) (undo-tree-id236 . 71) (undo-tree-id237 . 71) (undo-tree-id238 . 71) (undo-tree-id239 . 71) (undo-tree-id240 . 71) (undo-tree-id241 . -4) (undo-tree-id242 . -4) (undo-tree-id243 . 71) (undo-tree-id244 . 71) (undo-tree-id245 . 71) (undo-tree-id246 . 71)) nil (23701 32152 618064 151000) 0 nil]) ((1 . 5)) nil (23701 32152 618092 640000) 0 nil]) (5) nil (23701 32152 618098 324000) 0 nil] [nil nil ((106 . 110) (105 . 107) (#("\"" 0 1 (fontified nil)) . -105) (105 . 106) (104 . 106) (#("(" 0 1 (fontified nil)) . -104) (96 . 105) (#("s" 0 1 (fontified t)) . -96) (undo-tree-id49 . -1) 97 (96 . 97) (94 . 96) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 94) (93 . 94) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 93) (92 . 93) (91 . 93) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -91) (84 . 92) (83 . 85) (#("\"" 0 1 (fontified nil)) . -83) (83 . 84) (82 . 84) (#("(" 0 1 (fontified nil)) . -82) (82 . 83) (81 . 82) (#(":" 0 1 (fontified t)) . -81) (undo-tree-id50 . -1) 82 (79 . 82) (74 . 79) (69 . 74) 29) ((#("
    " 0 1 (fontified t) 1 5 (fontified nil)) . 69) (undo-tree-id51 . 4) (undo-tree-id52 . 4) (undo-tree-id53 . 4) (undo-tree-id54 . 4) (undo-tree-id55 . 4) (undo-tree-id56 . 4) (undo-tree-id57 . 4) (undo-tree-id58 . 4) (undo-tree-id59 . 4) (undo-tree-id60 . 4) (undo-tree-id61 . 4) (undo-tree-id62 . 4) (undo-tree-id63 . 4) (undo-tree-id64 . 4) (undo-tree-id65 . 4) (undo-tree-id66 . 4) (undo-tree-id67 . 4) (undo-tree-id68 . 4) (undo-tree-id69 . 4) (undo-tree-id70 . 4) (undo-tree-id71 . 4) (undo-tree-id72 . 4) (undo-tree-id73 . 4) (undo-tree-id74 . 4) (undo-tree-id75 . 4) (undo-tree-id76 . 4) (undo-tree-id77 . 4) (undo-tree-id78 . 4) (undo-tree-id79 . 4) (undo-tree-id80 . 4) (undo-tree-id81 . 4) (undo-tree-id82 . 4) (undo-tree-id83 . 4) (undo-tree-id84 . 4) (undo-tree-id85 . 4) (undo-tree-id86 . 4) (undo-tree-id87 . 4) (undo-tree-id88 . 4) (undo-tree-id89 . 4) (undo-tree-id90 . 4) (undo-tree-id91 . 4) (undo-tree-id92 . 4) (undo-tree-id93 . 4) (undo-tree-id94 . 4) (undo-tree-id95 . 4) (undo-tree-id96 . 4) (undo-tree-id97 . 4) (undo-tree-id98 . 4) (undo-tree-id99 . 4) (undo-tree-id100 . 4) (undo-tree-id101 . 4) (undo-tree-id102 . 4) (undo-tree-id103 . 4) (undo-tree-id104 . 4) (undo-tree-id105 . 4) (undo-tree-id106 . 4) (undo-tree-id107 . 4) (undo-tree-id108 . 4) (undo-tree-id109 . 4) (undo-tree-id110 . 4) (undo-tree-id111 . 4) (undo-tree-id112 . 4) (undo-tree-id113 . 4) (undo-tree-id114 . 4) (undo-tree-id115 . 4) (undo-tree-id116 . 4) (undo-tree-id117 . 4) (undo-tree-id118 . 4) (undo-tree-id119 . 4) (undo-tree-id120 . 4) (undo-tree-id121 . 4) (undo-tree-id122 . 4) (undo-tree-id123 . 4) (undo-tree-id124 . 4) (undo-tree-id125 . 4) (undo-tree-id126 . 4) (undo-tree-id127 . 4) (undo-tree-id128 . 4) (undo-tree-id129 . 4) (undo-tree-id130 . 4) (undo-tree-id131 . 4) (undo-tree-id132 . 4) (undo-tree-id133 . 4) (undo-tree-id134 . 4) (undo-tree-id135 . 4) (undo-tree-id136 . 4) (undo-tree-id137 . 4) (undo-tree-id138 . 4) (undo-tree-id139 . 4) (undo-tree-id140 . 4) (undo-tree-id141 . 4) (undo-tree-id142 . 4) (undo-tree-id143 . 4) (undo-tree-id144 . 4) (undo-tree-id145 . 4) (undo-tree-id146 . 4) (undo-tree-id147 . 4) (undo-tree-id148 . 4) (undo-tree-id149 . -1) (undo-tree-id150 . 4) (undo-tree-id151 . 4) (undo-tree-id152 . 4) (undo-tree-id153 . 4) (undo-tree-id154 . 4) (#("print" 0 5 (fontified nil face rust-builtin-formatting-macro-face)) . 74) (#("ln:" 0 2 (fontified nil face rust-builtin-formatting-macro-face) 2 3 (fontified nil)) . 79) (81 . 82) (#("!" 0 1 (fontified nil face rust-builtin-formatting-macro-face)) . 81) (#("(" 0 1 (fontified nil)) . 82) (82 . 83) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 82) (undo-tree-id155 . 1) (#("\"" 0 1 (fontified nil)) . 83) (83 . 84) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 83) (#("URL is {" 0 7 (fontified nil face font-lock-string-face) 7 8 (fontified nil face font-lock-string-face)) . 84) (91 . 92) (#("{}" 0 1 (fontified nil face rust-string-interpolation-face) 1 2 (fontified nil face rust-string-interpolation-face)) . 91) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 92) (93 . 94) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 93) (94 . 95) (#(", " 0 2 (fontified nil)) . 94) (#("s" 0 1 (fontified nil)) . 96) (96 . 97) (#("env::var(" 0 3 (fontified nil face font-lock-constant-face) 3 8 (fontified nil) 8 9 (fontified nil)) . 96) (undo-tree-id156 . 9) (undo-tree-id157 . -3) (104 . 105) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 104) (undo-tree-id158 . 1) (#("\"" 0 1 (fontified nil)) . 105) (105 . 106) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 105) (undo-tree-id159 . 1) (#("HOME" 0 4 (fontified t face font-lock-string-face)) . 106) (t 23701 32079 835741 197000)) (23701 32079 830534 114000) 0 nil]) ((10 . 12) (1 . 10) (1 . 2) (t 23701 31952 673816 994000)) nil (23701 32123 315853 471000) 0 nil]) ((49 . 54) (#("t" 0 1 (fontified t face font-lock-string-face)) . -49) (undo-tree-id0 . -1) (#("h" 0 1 (fontified t face font-lock-string-face)) . -50) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -51) (undo-tree-id3 . -1) (#(" " 0 1 (fontified t face font-lock-string-face)) . -52) (undo-tree-id4 . -1) (#("u" 0 1 (fontified t face font-lock-string-face)) . -53) (undo-tree-id5 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -54) (undo-tree-id6 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -55) (undo-tree-id7 . -1) (#("r" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . -56) (undo-tree-id8 . -1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -57) (undo-tree-id9 . -1) (#("c" 0 1 (fontified t face font-lock-string-face)) . -58) (undo-tree-id10 . -1) (#("r" 0 1 (fontified t syntax-table #1# face font-lock-string-face)) . -59) (undo-tree-id11 . -1) 60 (57 . 60) (42 . 57) (#("o" 0 1 (fontified t face font-lock-string-face)) . -42) (undo-tree-id12 . -1) 43 (40 . 43) (#(" " 0 1 (fontified nil)) . -40) (40 . 41) (#("'" 0 1 (fontified nil face font-lock-string-face)) . -40) (27 . 41) (#("Hello, world!" 0 13 (fontified t face font-lock-string-face)) . 27) (undo-tree-id13 . 13) (undo-tree-id14 . 12) (undo-tree-id15 . 13) (undo-tree-id16 . 13) (undo-tree-id17 . 13) (undo-tree-id18 . 13) (undo-tree-id19 . 13) (undo-tree-id20 . 13) (undo-tree-id21 . 13) (undo-tree-id22 . 13) (undo-tree-id23 . 13) (undo-tree-id24 . 13) (undo-tree-id25 . 13) (undo-tree-id26 . 13) (undo-tree-id27 . 13) (undo-tree-id28 . 13) (undo-tree-id29 . 13) (undo-tree-id30 . 13) (undo-tree-id31 . 13) (undo-tree-id32 . 13) (undo-tree-id33 . 13) (undo-tree-id34 . 13) (undo-tree-id35 . 13) (undo-tree-id36 . 13) (undo-tree-id37 . 13) (undo-tree-id38 . 13) (undo-tree-id39 . 13) (undo-tree-id40 . 13) (undo-tree-id41 . 13) (undo-tree-id42 . 13) (undo-tree-id43 . 13) (undo-tree-id44 . 13) (undo-tree-id45 . 13) (undo-tree-id46 . 13) (undo-tree-id47 . 13) (undo-tree-id48 . 13) (t 23701 31597 697717 720000)) nil (23701 31952 666952 168000) 0 nil]) nil nil (23701 31952 666976 972000) 0 nil] #3# 44538 238 nil)