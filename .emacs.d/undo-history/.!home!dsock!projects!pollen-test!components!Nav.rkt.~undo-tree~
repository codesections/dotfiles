"8eff8fbacb31ed6353cbb9a0efdcf9f6b1221ce7"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#3=[nil nil ((#("provide " 0 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t)) . 1537) (undo-tree-id1707 . 8) (undo-tree-id1708 . 8)) nil (23728 55076 752107 853000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 1554) (#("(" 0 1 (fontified t)) . -1537) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) 1538) nil (23728 55076 752134 596000) 0 nil]) ((1528 . 1537) (1547 . 1548) (#(")" 0 1 (fontified t)) . -1527) 1520) nil (23728 55076 752144 693000) 0 nil]) ((1510 . 1511) (1498 . 1499) (#("]" 0 1 (fontified nil)) . 1509) (#("[" 0 1 (fontified t)) . -1498) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) 1499) nil (23728 55076 752157 833000) 0 nil]) ((1492 . 1493) (1373 . 1374) (#("]" 0 1 (fontified t)) . 1491) (undo-tree-id1713 . 1) (#("[" 0 1 (fontified t)) . 1373) (undo-tree-id1714 . -1) 1383) nil (23728 55076 752172 743000) 0 nil]) ((1193 . 1194) (#("   " 0 1 (fontified nil) 1 3 (fontified nil)) . 1193) (#("
" 0 1 (fontified t)) . -1194) 1193) nil (23728 55076 752180 884000) 0 nil]) ((485 . 486) (#("   " 0 3 (fontified nil)) . 485) (undo-tree-id1715 . -3) (undo-tree-id1716 . -3) (undo-tree-id1717 . -3) (undo-tree-id1718 . -3) (undo-tree-id1719 . -3) (undo-tree-id1720 . -3) (undo-tree-id1721 . -3) (undo-tree-id1722 . -3) (undo-tree-id1723 . -3) (undo-tree-id1724 . -3) (undo-tree-id1725 . -3) (undo-tree-id1726 . -3) (undo-tree-id1727 . -3) (undo-tree-id1728 . -3) (#("
" 0 1 (fontified t)) . -485) 484) nil (23728 55076 752233 659000) 0 nil]) ((809 . 810) (#("  " 0 2 (fontified nil)) . 809) (#("
" 0 1 (fontified t)) . -809) 808) nil (23728 55076 752244 41000) 0 nil]) ((#("
" 0 1 (fontified t)) . -1223) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) 1200) nil (23728 55076 752259 679000) 0 nil]) ((#("  (nav ((class \"NavBar\"))
        \"\\n\"
        ,@(indent children))" 0 9 (fontified t) 9 14 (fontified t face font-lock-builtin-face) 14 15 (fontified t) 15 22 (fontified t face font-lock-string-face) 22 23 (fontified t face font-lock-string-face) 23 25 (fontified t) 25 26 (fontified t) 26 34 (fontified t) 34 37 (fontified t face font-lock-string-face) 37 38 (fontified t face font-lock-string-face) 38 39 (fontified t) 39 49 (fontified t) 49 57 (fontified t) 57 65 (fontified t) 65 66 (fontified t) 66 67 (fontified t)) . 1224) (undo-tree-id1733 . -50) (undo-tree-id1734 . -50) (undo-tree-id1735 . -50) (undo-tree-id1736 . -50) (undo-tree-id1737 . 51) (undo-tree-id1738 . -22)) nil (23728 55076 752281 469000) 0 nil]) ((#("`" 0 1 (fontified t)) . 1226) 1245) nil (23728 55076 752287 266000) 0 nil]) ((1215 . 1222) (#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -1215) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) 1216 (1215 . 1216) (#("N" 0 1 (fontified t)) . -1215) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (#("a" 0 1 (fontified t)) . -1216) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) 1217 (1203 . 1217) (1202 . 1204) (#("(" 0 1 (fontified nil)) . -1202) (1202 . 1203) (1200 . 1202) (1200 . 1201) 1214) nil (23728 55076 752321 166000) 0 nil]) ((#(". children" 0 10 (fontified t)) . 1199)) nil (23728 55076 752330 172000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 1209) (#("(" 0 1 (fontified t)) . -1192) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) 1193 (t 23728 54944 401964 638000)) nil (23728 55076 752341 557000) 0 nil]) ((#("
" 0 1 (rear-nonsticky t fontified t)) . 512) (undo-tree-id1647 . 1) (undo-tree-id1648 . 1) (undo-tree-id1649 . 1) (undo-tree-id1650 . 1) (undo-tree-id1651 . 1) (undo-tree-id1652 . 1) (undo-tree-id1653 . 1) (undo-tree-id1654 . 1) (undo-tree-id1655 . 1) (undo-tree-id1656 . 1)) nil (23728 54944 371989 380000) 0 nil]) ((#(";`(li ((class \"NavBtn\")) ,btn-content ,@(indent children))
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 8 (fontified t face font-lock-comment-face) 8 13 (fontified t face font-lock-comment-face) 13 14 (fontified t face font-lock-comment-face) 14 22 (fontified t face font-lock-comment-face) 22 57 (fontified t face font-lock-comment-face) 57 58 (rear-nonsticky t fontified t face font-lock-comment-face) 58 59 (fontified t face font-lock-comment-face)) . 512) (undo-tree-id1657 . -57) (undo-tree-id1658 . 59) (undo-tree-id1659 . 59) (undo-tree-id1660 . 59) (undo-tree-id1661 . 59) (undo-tree-id1662 . 59) (undo-tree-id1663 . 59) (undo-tree-id1664 . -23) (undo-tree-id1665 . -23) (undo-tree-id1666 . 36) (undo-tree-id1667 . 44) (undo-tree-id1668 . -21) (undo-tree-id1669 . -22) (undo-tree-id1670 . -23) (undo-tree-id1671 . -7) (undo-tree-id1672 . -8) (undo-tree-id1673 . -6) (undo-tree-id1674 . -7) (undo-tree-id1675 . -22) (undo-tree-id1676 . -23) (undo-tree-id1677 . -22) (undo-tree-id1678 . -23) (undo-tree-id1679 . -22) (undo-tree-id1680 . -23) (undo-tree-id1681 . -22) (undo-tree-id1682 . -23) (undo-tree-id1683 . -21) (undo-tree-id1684 . -22) (undo-tree-id1685 . -21) (undo-tree-id1686 . -22) (undo-tree-id1687 . -22) (undo-tree-id1688 . -23) (undo-tree-id1689 . -22) (undo-tree-id1690 . -23) (undo-tree-id1691 . -7) (undo-tree-id1692 . -8) (undo-tree-id1693 . 52) (undo-tree-id1694 . -8) (undo-tree-id1695 . 51) (undo-tree-id1696 . -22) (undo-tree-id1697 . 37) (undo-tree-id1698 . -23) (undo-tree-id1699 . -14) (undo-tree-id1700 . -15) 535) nil (23728 54944 372132 945000) 0 nil]) ((#("  " 0 1 (fontified nil) 1 2 (fontified nil)) . 893) (#("
" 0 1 (fontified t)) . -893) 872) nil (23728 54944 372152 653000) 0 nil]) ((#("`(ul ((class \"NavList\"))
       ,@(indent children))" 0 2 (fontified t) 2 7 (fontified t) 7 12 (fontified t face font-lock-builtin-face) 12 13 (fontified t) 13 21 (fontified t face font-lock-string-face) 21 22 (fontified t face font-lock-string-face) 22 23 (fontified t) 23 25 (fontified t) 25 28 (fontified t) 28 32 (fontified t) 32 34 (fontified t) 34 41 (fontified t) 41 42 (fontified t) 42 47 (fontified t) 47 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t)) . 896)) nil (23728 54944 372158 134000) 0 nil]) ((879 . 892) (875 . 879) (#("u" 0 1 (fontified t)) . -875) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (#("l" 0 1 (fontified t)) . -876) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (#("e" 0 1 (fontified t)) . -877) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) 878 (873 . 878) (872 . 874) (#("(" 0 1 (fontified nil)) . -872) (872 . 873) (869 . 872) 868) nil (23728 54944 372190 250000) 0 nil]) ((862 . 869) (#("(NavList . children)" 0 1 (fontified t) 1 8 (fontified t face font-lock-function-name-face) 8 11 (fontified t) 11 12 (fontified t) 12 14 (fontified t) 14 20 (fontified t)) . 862) (t 23728 54892 28981 385000)) nil (23728 54944 372203 533000) 0 nil]) ((512 . 513) (t 23728 54888 982335 837000)) nil (23728 54891 941524 514000) 0 nil]) (525) nil (23728 54891 941537 824000) 0 nil]) ((479 . 485)) nil (23728 54888 956424 655000) 0 nil]) ((#("NavBtn btn-content . children" 0 6 (fontified t face font-lock-variable-name-face) 6 29 (fontified t)) . 479) (undo-tree-id1619 . 29) (undo-tree-id1620 . 29) (undo-tree-id1621 . 29) (undo-tree-id1622 . 29) (undo-tree-id1623 . 28) (undo-tree-id1624 . 29) (undo-tree-id1625 . 29) (undo-tree-id1626 . 28)) nil (23728 54888 956470 528000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 508) (undo-tree-id1627 . 1) (#("(" 0 1 (fontified t)) . -479) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . 1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) 480) nil (23728 54888 956497 427000) 0 nil]) ((526 . 533) (#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . -526) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (#("N" 0 1 (fontified t face font-lock-comment-face)) . -527) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) 528 (526 . 528) (523 . 526) (#("N" 0 1 (fontified t face racket-selfeval-face)) . -523) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (#("a" 0 1 (fontified t face racket-selfeval-face)) . -524) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (#("v" 0 1 (fontified t face racket-selfeval-face)) . -525) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) 526 (516 . 526) (#("y" 0 1 (fontified t)) . -516) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (#("t" 0 1 (fontified t)) . -517) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) 518 (515 . 518) (514 . 516) (#("(" 0 1 (fontified nil)) . -514) (514 . 515)) nil (23728 54888 956559 915000) 0 nil] [nil ([nil ([nil nil ((521 . 533) (515 . 521) (514 . 516) (#("(" 0 1 (fontified nil)) . -514) (undo-tree-id1445 . -1) (514 . 515)) ((#("(" 0 1 (fontified nil)) . 514) (514 . 515) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 514) (undo-tree-id1486 . 1) (undo-tree-id1487 . -2) (undo-tree-id1488 . -2) (undo-tree-id1489 . 1) (undo-tree-id1490 . 1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (undo-tree-id1495 . 1) (undo-tree-id1496 . 1) (undo-tree-id1497 . 1) (undo-tree-id1498 . 1) (undo-tree-id1499 . -1) (undo-tree-id1500 . 1) (undo-tree-id1501 . -1) (undo-tree-id1502 . -2) (undo-tree-id1503 . -2) (undo-tree-id1504 . -2) (undo-tree-id1505 . -2) (undo-tree-id1506 . -2) (undo-tree-id1507 . -2) (undo-tree-id1508 . -1) (undo-tree-id1509 . -2) (undo-tree-id1510 . -1) (undo-tree-id1511 . -2) (#("styled" 0 6 (fontified nil)) . 515) (undo-tree-id1512 . -6) (undo-tree-id1513 . -6) (undo-tree-id1514 . -6) (undo-tree-id1515 . -6) (undo-tree-id1516 . -6) (undo-tree-id1517 . -6) (undo-tree-id1518 . -6) (#(" 'li 'NavBtn" 0 1 (fontified t) 1 4 (fontified t face racket-selfeval-face) 4 5 (fontified t) 5 12 (fontified t face racket-selfeval-face)) . 521) (undo-tree-id1519 . 1) (undo-tree-id1520 . 1) (undo-tree-id1521 . -11) (undo-tree-id1522 . -11) (undo-tree-id1523 . -11) (undo-tree-id1524 . -11) (undo-tree-id1525 . 1) (undo-tree-id1526 . 1) (undo-tree-id1527 . 1) (undo-tree-id1528 . 1) (undo-tree-id1529 . -11) (undo-tree-id1530 . -11) (undo-tree-id1531 . -12) (t 23728 54747 683434 499000)) (23728 54747 585250 109000) 0 nil]) ((517 . 518)) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 517)) (23728 54830 7594 888000) 0 nil]) (573) (nil . #1=(undo-tree-canary)) (23728 54830 327604 123000) 0 nil]) ((nil rear-nonsticky nil 573 . 574) (517 . 574)) ((#("`(li ((class \"NavBtn\")) ,btn-content ,@(indent children))" 0 7 (fontified nil) 7 12 (fontified nil face font-lock-builtin-face) 12 13 (fontified nil) 13 21 (fontified nil face font-lock-string-face) 21 56 (fontified nil) 56 57 (rear-nonsticky nil fontified nil)) . 517) (undo-tree-id1532 . -56) (undo-tree-id1533 . -56) (undo-tree-id1534 . -56) (undo-tree-id1536 . 1) (undo-tree-id1538 . -55) (undo-tree-id1540 . -39) (undo-tree-id1542 . -22) (undo-tree-id1544 . -21) (undo-tree-id1546 . -6) (undo-tree-id1548 . -5) (undo-tree-id1550 . -1) (undo-tree-id1552 . 56) (undo-tree-id1554 . 55) (undo-tree-id1556 . 1) (nil rear-nonsticky t 573 . 574)) (23728 54854 234325 911000) 0 nil]) ((515 . 517)) ((#("
" 0 1 (fontified t)) . 515) (undo-tree-id1558 . -1) (undo-tree-id1559 . -1) (undo-tree-id1560 . -1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1565 . -1) (undo-tree-id1567 . -1) (undo-tree-id1569 . -1) (undo-tree-id1571 . -1) (undo-tree-id1573 . -1) (undo-tree-id1575 . -1) (undo-tree-id1577 . -1) (#("
" 0 1 (fontified t)) . 516) (undo-tree-id1578 . -1) (undo-tree-id1579 . -1) (undo-tree-id1580 . -1) (undo-tree-id1581 . -1) (undo-tree-id1582 . -1) (undo-tree-id1583 . -1) (undo-tree-id1585 . -1) (undo-tree-id1587 . -1) (undo-tree-id1589 . -1) (undo-tree-id1591 . -1) (undo-tree-id1593 . -1) (undo-tree-id1595 . -1) (undo-tree-id1597 . -1)) (23728 54853 923954 525000) 0 nil]) ((#("`(li ((class \"NavBtn\")) ,btn-content ,@(indent children))" 0 7 (fontified t) 7 12 (fontified t face font-lock-builtin-face) 12 13 (fontified t) 13 14 (fontified t face font-lock-string-face) 14 20 (fontified t face font-lock-string-face) 20 21 (fontified t face font-lock-string-face) 21 23 (fontified t) 23 24 (fontified t) 24 36 (fontified t) 36 37 (fontified t) 37 39 (fontified t) 39 40 (fontified t) 40 41 (fontified t) 41 47 (fontified t) 47 55 (fontified t) 55 56 (fontified t) 56 57 (fontified t)) . 514) (undo-tree-id1598 . 51) (undo-tree-id1599 . 51) (undo-tree-id1600 . -6) (undo-tree-id1601 . -6) (undo-tree-id1602 . 57) (undo-tree-id1603 . 57) (undo-tree-id1604 . -6) (undo-tree-id1605 . 57) (undo-tree-id1606 . 57) (undo-tree-id1607 . 57) (undo-tree-id1608 . 57) (undo-tree-id1609 . 57) (undo-tree-id1610 . 57) (undo-tree-id1611 . 57) (undo-tree-id1612 . 57) (undo-tree-id1613 . 57) (undo-tree-id1614 . 57) (undo-tree-id1615 . 57) (undo-tree-id1616 . 57) (undo-tree-id1617 . 57) (undo-tree-id1618 . 57) (t 23728 54834 106066 72000)) ((514 . 571)) (23728 54853 588185 675000) 0 nil]) ((550 . 551) (#("        " 0 8 (fontified nil)) . 550) (#("
" 0 1 (fontified t)) . -550) 537) nil (23728 54831 625877 31000) 0 nil]) ((537 . 538) (#("        " 0 1 (fontified nil) 1 8 (fontified nil)) . 537) (#("
" 0 1 (fontified t)) . -537) 525 (t 23728 54693 167272 787000)) nil (23728 54747 585408 656000) 0 nil] [nil nil ((#("  " 0 2 (fontified t)) . -511) (undo-tree-id1435 . -2) (undo-tree-id1436 . -2) 513 (511 . 513) (511 . 512) 516 (t 23728 54693 167272 787000)) ((#("
" 0 1 (fontified nil)) . 511) (undo-tree-id1437 . 1) (undo-tree-id1438 . 1) (undo-tree-id1439 . 1) (undo-tree-id1440 . 1) (#("  " 0 2 (fontified nil)) . 511) (undo-tree-id1441 . -2) (undo-tree-id1442 . -2) (511 . 513)) (23728 54719 143974 48000) 0 nil]) ((48 . 58) (#(" " 0 1 (fontified t)) . 48) (undo-tree-id1443 . 1)) ((48 . 49) (#("
         " 0 10 (fontified t)) . 48) (t 23728 54693 167272 787000)) (23728 54720 506611 712000) 0 nil]) ((87 . 96) (101 . 102) (#(")" 0 1 (fontified t)) . -86) (62 . 71) (77 . 78) (#(")" 0 1 (fontified t)) . -61) (61 . 62) (#(")" 0 1 (fontified t)) . -48) (33 . 42) (39 . 40) (#(")" 0 1 (fontified t)) . -32) 16) nil (23728 54719 504107 824000) 0 nil]) ((#("require " 0 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t)) . 34)) nil (23728 54693 149582 84000) 0 nil]) ((#("require " 0 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t)) . 62) (undo-tree-id1416 . 8) (undo-tree-id1417 . 8) (undo-tree-id1418 . 8) (undo-tree-id1419 . 8) (undo-tree-id1420 . 8) (undo-tree-id1421 . 8)) nil (23728 54693 149597 902000) 0 nil]) ((#("require " 0 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t)) . 86) (undo-tree-id1422 . 8) (undo-tree-id1423 . 8)) nil (23728 54693 149602 747000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 108) (#("(" 0 1 (fontified t)) . 86)) nil (23728 54693 149605 457000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 85) (undo-tree-id1424 . 1) (undo-tree-id1425 . -1) (undo-tree-id1426 . 1) (#("(" 0 1 (fontified t)) . 62) (undo-tree-id1427 . 1) (undo-tree-id1428 . 1) (undo-tree-id1429 . -1) (undo-tree-id1430 . 1) (undo-tree-id1431 . 1) (undo-tree-id1432 . -1)) nil (23728 54693 149618 752000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 61) (undo-tree-id1433 . 1) (#("(" 0 1 (fontified t)) . 34) (undo-tree-id1434 . -1) 45 (t 23727 57795 335447 425000)) nil (23728 54693 149624 966000) 0 nil]) ((1364 . 1366) (1363 . 1365) (#("\"" 0 1 (fontified nil)) . -1363) (undo-tree-id1392 . -1) (undo-tree-id1393 . -1) (1363 . 1364) (1354 . 1363) 1345) nil (23727 57795 205289 51000) 0 nil]) ((#("j" 0 1 (fontified t)) . -571) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (#("j" 0 1 (fontified t)) . -572) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) (#("j" 0 1 (fontified t)) . -573) (undo-tree-id1398 . -1) (undo-tree-id1399 . -1) (#("j" 0 1 (fontified t)) . -574) (undo-tree-id1400 . -1) (undo-tree-id1401 . -1) (#("j" 0 1 (fontified t)) . -575) (undo-tree-id1402 . -1) (undo-tree-id1403 . -1) (#("j" 0 1 (fontified t)) . -576) (undo-tree-id1404 . -1) (undo-tree-id1405 . -1) (#("j" 0 1 (fontified t)) . -577) (undo-tree-id1406 . -1) (undo-tree-id1407 . -1) (#("j" 0 1 (fontified t)) . -578) (undo-tree-id1408 . -1) (undo-tree-id1409 . -1) (#("j" 0 1 (fontified t)) . -579) (undo-tree-id1410 . -1) (undo-tree-id1411 . -1) (#("j" 0 1 (fontified t)) . -580) (undo-tree-id1412 . -1) (undo-tree-id1413 . -1) (#("j" 0 1 (fontified t)) . -581) (undo-tree-id1414 . -1) (undo-tree-id1415 . -1) 582 (571 . 582) (t 23727 57666 396598 140000)) nil (23727 57795 205370 97000) 0 nil]) (nil . #1#) nil (23727 57795 205392 139000) 0 nil]) ((579 . 580) (#(")" 0 1 (fontified t)) . -571) (undo-tree-id1376 . -1) (undo-tree-id1377 . 1) (undo-tree-id1378 . 1) (undo-tree-id1379 . 1) (undo-tree-id1380 . 1) (undo-tree-id1381 . 1) (undo-tree-id1382 . 1) (undo-tree-id1383 . 1) (undo-tree-id1384 . 1) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (undo-tree-id1387 . -1)) nil (23727 57666 368105 144000) 0 nil]) ((564 . 571) (563 . 565) (#("(" 0 1 (fontified nil)) . -563) (undo-tree-id1388 . -1) (undo-tree-id1389 . -1) (563 . 564)) nil (23727 57666 368129 800000) 0 nil]) ((938 . 939) (929 . 930) (#(")" 0 1 (fontified t)) . -929) (923 . 929) (922 . 924) (#("(" 0 1 (fontified nil)) . -922) (922 . 923) (#("9" 0 1 (fontified t)) . -922) (undo-tree-id1390 . -1) (undo-tree-id1391 . -1) 923 (922 . 923)) nil (23727 57666 368153 120000) 0 nil] [nil nil ((921 . 931) (#("       " 0 3 (fontified t) 3 7 (fontified t)) . -921) (888 . 898) (#("  " 0 1 (fontified nil) 1 2 (fontified nil)) . -888) (undo-tree-id1359 . -2) (undo-tree-id1360 . -2) (undo-tree-id1361 . -2) (undo-tree-id1362 . -2) (undo-tree-id1363 . -2) (undo-tree-id1364 . -2) (865 . 867) (#("`(" 0 2 (fontified t)) . 888) (undo-tree-id1365 . -1) (undo-tree-id1366 . -2) (undo-tree-id1367 . -1) (undo-tree-id1368 . -2) (undo-tree-id1369 . -1) (undo-tree-id1370 . -2) 922) ((888 . 890) (#("`(" 0 1 (fontified t) 1 2 (fontified t)) . 865) (undo-tree-id1373 . -2) (undo-tree-id1374 . -1) (undo-tree-id1375 . -2) (888 . 890) (#("          " 0 10 (fontified t)) . 888) (921 . 928) (#("          " 0 10 (fontified t)) . 921)) (23727 57648 45558 757000) 0 nil]) ((1363 . 1364) (#(")" 0 1 (fontified t)) . -1355) (undo-tree-id1371 . -1) (undo-tree-id1372 . 1) (1349 . 1355) (1348 . 1349) (1347 . 1349) (#("(" 0 1 (fontified nil)) . -1347) (1347 . 1348) (t 23727 50020 58932 796000)) nil (23727 57648 46299 168000) 0 nil]) ((610 . 614) (#("Var" 0 3 (fontified t face racket-selfeval-face)) . 610) (undo-tree-id1357 . 3) (undo-tree-id1358 . 3)) ((610 . 613) (#("List" 0 4 (fontified t face racket-selfeval-face)) . 610) (undo-tree-id1336 . -3) (undo-tree-id1337 . -3) (undo-tree-id1338 . 1) (undo-tree-id1339 . 1) (undo-tree-id1340 . -3) (undo-tree-id1341 . 1) (undo-tree-id1342 . 1) (undo-tree-id1343 . 1) (undo-tree-id1344 . 1) (undo-tree-id1345 . 1) (undo-tree-id1346 . 1) (undo-tree-id1347 . -3) (undo-tree-id1348 . 1) (undo-tree-id1349 . 1) (undo-tree-id1350 . -3) (undo-tree-id1351 . 1) (undo-tree-id1352 . 1) (undo-tree-id1353 . -3) (undo-tree-id1354 . -3) (undo-tree-id1355 . 1) (undo-tree-id1356 . 1) (t 23727 50020 58932 796000)) (23727 50477 340348 365000) 0 nil]) ((#("
" 0 1 (fontified t)) . 116)) nil (23727 50475 647165 242000) 0 nil]) ((#("
" 0 1 (fontified t)) . 117)) nil (23727 50019 925507 791000) 0 nil]) ((#("
" 0 1 (fontified t)) . 117)) nil (23727 50019 925512 113000) 0 nil]) ((#("(define css \"
  \")" 0 1 (fontified t) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 11 (fontified t face font-lock-variable-name-face) 11 12 (fontified t) 12 14 (fontified t face font-lock-string-face) 14 17 (fontified t face font-lock-string-face) 17 18 (fontified t)) . 117) (t 23727 49442 567705 107000)) nil (23727 50019 925517 432000) 0 nil]) ((952 . 953) 933) nil (23727 49442 533061 91000) 0 nil]) ((nil rear-nonsticky nil 595 . 596) (#("
" 0 1 (fontified nil)) . -952) (595 . 953)) nil (23727 49442 533085 584000) 0 nil]) ((#("(define NavList_Style
  (style 'NavVar `((display . \"flex\")
                   (max-width . \"700px\")
                   (padding-left . \"8px\")
                   (padding-right . \"8px\")
                   (margin . \"auto\")
                   (justify-content . \"space-between\"))))
(define (NavList . children)
  `(ul ((class \"NavList\"))
       ,@children))
" 0 1 (fontified t) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 21 (fontified t face font-lock-variable-name-face) 21 22 (fontified t) 22 24 (fontified t) 24 31 (fontified t) 31 38 (fontified t face racket-selfeval-face) 38 40 (fontified t) 40 41 (fontified t) 41 42 (fontified t) 42 49 (fontified t face font-lock-builtin-face) 49 52 (fontified t) 52 53 (fontified t face font-lock-string-face) 53 57 (fontified t face font-lock-string-face) 57 58 (fontified t face font-lock-string-face) 58 59 (fontified t) 59 60 (fontified t) 60 79 (fontified t) 79 80 (fontified t) 80 89 (fontified t) 89 92 (fontified t) 92 93 (fontified t face font-lock-string-face) 93 98 (fontified t face font-lock-string-face) 98 99 (fontified t face font-lock-string-face) 99 100 (fontified t) 100 101 (fontified t) 101 120 (fontified t) 120 121 (fontified t) 121 133 (fontified t) 133 136 (fontified t) 136 137 (fontified t face font-lock-string-face) 137 140 (fontified t face font-lock-string-face) 140 141 (fontified t face font-lock-string-face) 141 142 (fontified t) 142 143 (fontified t) 143 162 (fontified t) 162 163 (fontified t) 163 176 (fontified t) 176 179 (fontified t) 179 180 (fontified t face font-lock-string-face) 180 183 (fontified t face font-lock-string-face) 183 184 (fontified t face font-lock-string-face) 184 185 (fontified t) 185 186 (fontified t) 186 205 (fontified t) 205 206 (fontified t) 206 212 (fontified t) 212 215 (fontified t) 215 216 (fontified t face font-lock-string-face) 216 220 (fontified t face font-lock-string-face) 220 221 (fontified t face font-lock-string-face) 221 222 (fontified t) 222 223 (fontified t) 223 242 (fontified t) 242 243 (fontified t) 243 258 (fontified t) 258 261 (fontified t) 261 262 (fontified t face font-lock-string-face) 262 275 (fontified t face font-lock-string-face) 275 276 (fontified t face font-lock-string-face) 276 277 (fontified t) 277 278 (fontified t) 278 279 (fontified t) 279 280 (fontified t) 280 281 (fontified t) 281 282 (fontified t) 282 284 (fontified t face font-lock-keyword-face) 284 288 (fontified t face font-lock-keyword-face) 288 290 (fontified t) 290 297 (fontified t face font-lock-function-name-face) 297 300 (fontified t) 300 301 (fontified t) 301 303 (fontified t) 303 310 (fontified t) 310 311 (fontified t) 311 319 (fontified t) 319 324 (fontified t face font-lock-builtin-face) 324 325 (fontified t) 325 333 (fontified t face font-lock-string-face) 333 334 (fontified t face font-lock-string-face) 334 335 (fontified t) 335 337 (fontified t) 337 340 (fontified t) 340 351 (fontified t) 351 354 (fontified t) 354 357 (fontified t)) . 1021) (undo-tree-id1260 . -355) (undo-tree-id1261 . -355) (undo-tree-id1262 . -18) (undo-tree-id1263 . -41) (undo-tree-id1264 . -275) (undo-tree-id1265 . -319) (undo-tree-id1266 . -319) (undo-tree-id1267 . -357) (undo-tree-id1268 . -319) (undo-tree-id1269 . -357) (undo-tree-id1270 . -319) (undo-tree-id1271 . -41) (undo-tree-id1272 . -18) (undo-tree-id1273 . -355) (undo-tree-id1274 . -18) (undo-tree-id1275 . -18) 1039) nil (23727 49442 533147 959000) 0 nil]) ((1430 . 1440) (1426 . 1430)) nil (23727 49442 533157 796000) 0 nil]) ((#("; Use unquote-splicing (`,@`) to return the ul with a list of it's children,
; rather than the ul with a list of a list of its children.  `ul` is a function,
; and it expects to take a series of arguments, not a single list of children.
;
; Related: a function will *always* have a single return value, which means
; it can return *either* a list of components or a single component (which can
; contain child components).  If it's a list of components, we need to use `,@`
; to splice it into its parent component; if it's a single component, we need to
; use `,` to evaluate it in its parent component.
" 0 2 (fontified t face font-lock-comment-delimiter-face) 2 12 (fontified t face font-lock-comment-face) 12 18 (fontified t face font-lock-comment-face) 18 19 (fontified t face font-lock-comment-face) 19 20 (fontified t face font-lock-comment-face) 20 27 (fontified t face font-lock-comment-face) 27 34 (fontified t face font-lock-comment-face) 34 37 (fontified t face font-lock-comment-face) 37 60 (fontified t face font-lock-comment-face) 60 61 (fontified t face font-lock-comment-face) 61 77 (fontified t face font-lock-comment-face) 77 79 (fontified t face font-lock-comment-delimiter-face) 79 81 (fontified t face font-lock-comment-face) 81 95 (fontified t face font-lock-comment-face) 95 102 (fontified t face font-lock-comment-face) 102 103 (fontified t face font-lock-comment-face) 103 107 (fontified t face font-lock-comment-face) 107 116 (fontified t face font-lock-comment-face) 116 129 (fontified t face font-lock-comment-face) 129 138 (fontified t face font-lock-comment-face) 138 141 (fontified t face font-lock-comment-face) 141 145 (fontified t face font-lock-comment-face) 145 158 (fontified t face font-lock-comment-face) 158 160 (fontified t face font-lock-comment-delimiter-face) 160 166 (fontified t face font-lock-comment-face) 166 167 (fontified t face font-lock-comment-face) 167 168 (fontified t face font-lock-comment-face) 168 204 (fontified t face font-lock-comment-face) 204 207 (fontified t face font-lock-comment-face) 207 209 (fontified t face font-lock-comment-face) 209 212 (fontified t face font-lock-comment-face) 212 217 (fontified t face font-lock-comment-face) 217 236 (fontified t face font-lock-comment-face) 236 237 (fontified t face font-lock-comment-face) 237 238 (fontified t face font-lock-comment-delimiter-face) 238 239 (fontified t face font-lock-comment-face) 239 241 (fontified t face font-lock-comment-delimiter-face) 241 264 (fontified t face font-lock-comment-face) 264 280 (fontified t face font-lock-comment-face) 280 287 (fontified t face font-lock-comment-face) 287 290 (fontified t face font-lock-comment-face) 290 291 (fontified t face font-lock-comment-face) 291 304 (fontified t face font-lock-comment-face) 304 312 (fontified t face font-lock-comment-face) 312 313 (fontified t face font-lock-comment-face) 313 315 (fontified t face font-lock-comment-face) 315 317 (fontified t face font-lock-comment-delimiter-face) 317 322 (fontified t face font-lock-comment-face) 322 342 (fontified t face font-lock-comment-face) 342 359 (fontified t face font-lock-comment-face) 359 374 (fontified t face font-lock-comment-face) 374 375 (fontified t face font-lock-comment-face) 375 394 (fontified t face font-lock-comment-face) 394 396 (fontified t face font-lock-comment-delimiter-face) 396 407 (fontified t face font-lock-comment-face) 407 411 (fontified t face font-lock-comment-face) 411 474 (fontified t face font-lock-comment-face) 474 476 (fontified t face font-lock-comment-delimiter-face) 476 480 (fontified t face font-lock-comment-face) 480 500 (face font-lock-comment-face fontified t) 500 555 (face font-lock-comment-face fontified t) 555 557 (fontified t face font-lock-comment-delimiter-face) 557 577 (fontified t face font-lock-comment-face) 577 605 (fontified t face font-lock-comment-face)) . 1378) (undo-tree-id1276 . -577) (undo-tree-id1277 . -22) (undo-tree-id1278 . -577) (undo-tree-id1279 . -605) (undo-tree-id1280 . -605) (undo-tree-id1281 . -22) (undo-tree-id1282 . -577) (undo-tree-id1283 . -577) (undo-tree-id1284 . -577) 1955) nil (23727 49442 533185 103000) 0 nil]) ((1347 . 1354) (1346 . 1348) (#("\"" 0 1 (fontified nil)) . -1346) (1346 . 1347) (#("'" 0 1 (fontified t)) . -1346) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) 1347 (1346 . 1347) (1340 . 1346) (#("style \"
\"" 0 1 (fontified t) 1 4 (fontified t) 4 6 (fontified t) 6 7 (fontified t face font-lock-string-face) 7 8 (fontified t face font-lock-string-face) 8 9 (fontified t face font-lock-string-face)) . 1340) (undo-tree-id1287 . -8) (undo-tree-id1288 . 1) (undo-tree-id1289 . -8) (undo-tree-id1290 . -8) (undo-tree-id1291 . -8) (undo-tree-id1292 . -8) (undo-tree-id1293 . -8) (undo-tree-id1294 . -8)) nil (23727 49442 533222 540000) 0 nil]) ((#("                   " 0 19 (fontified nil)) . 1062) (#("
" 0 1 (fontified t)) . -1062) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) 1061) nil (23727 49442 533240 104000) 0 nil]) ((#("                   " 0 19 (fontified nil)) . 1318) (#("
" 0 1 (fontified t)) . -1318) 1264) nil (23727 49442 533247 297000) 0 nil]) ((1300 . 1302) (1315 . 1316) (#(")" 0 1 (fontified nil)) . -1299) (1264 . 1283) (1280 . 1281) (#(")" 0 1 (fontified nil)) . -1265) (1264 . 1266) (#("(" 0 1 (fontified nil)) . -1264) (1264 . 1265) (#(";" 0 1 (rear-nonsticky t fontified nil face font-lock-comment-delimiter-face)) . 1294) (1295 . 1296) (1280 . 1281) (#(":" 0 1 (fontified t)) . 1279)) nil (23727 49442 533263 395000) 0 nil]) ((1254 . 1256) (1260 . 1261) (#(")" 0 1 (fontified nil)) . -1253) (1227 . 1246) (1234 . 1235) (#(")" 0 1 (fontified nil)) . -1228) (1227 . 1229) (#("(" 0 1 (fontified nil)) . -1227) (1227 . 1228) (#(";" 0 1 (fontified nil face font-lock-comment-delimiter-face)) . 1239) (1240 . 1241) (1234 . 1235) (#(":" 0 1 (fontified t)) . 1233)) nil (23727 49442 533283 196000) 0 nil]) ((1218 . 1220) (1223 . 1224) (#(")" 0 1 (fontified nil)) . -1217) (1184 . 1203) (1198 . 1199) (#(")" 0 1 (fontified nil)) . -1185) (1184 . 1186) (#("(" 0 1 (fontified nil)) . -1184) (1184 . 1185) (#(";" 0 1 (fontified nil face font-lock-comment-delimiter-face)) . 1202) (1203 . 1204) (1198 . 1199) (#(":" 0 1 (fontified t)) . 1197)) nil (23727 49442 533303 377000) 0 nil]) ((1175 . 1177) (1180 . 1181) (#(")" 0 1 (fontified nil)) . -1174) (1142 . 1161) (1155 . 1156) (#(")" 0 1 (fontified nil)) . -1143) (1142 . 1144) (#("(" 0 1 (fontified nil)) . -1142) (1142 . 1143) (#(";" 0 1 (fontified nil face font-lock-comment-delimiter-face)) . 1159) (1160 . 1161) (1155 . 1156) (#(":" 0 1 (fontified t)) . 1154)) nil (23727 49442 533324 333000) 0 nil]) ((1131 . 1133) (1138 . 1139) (#(")" 0 1 (fontified nil)) . -1130) (1101 . 1120) (1111 . 1112) (#(")" 0 1 (fontified nil)) . -1102) (1101 . 1103) (#("(" 0 1 (fontified nil)) . -1101) (1101 . 1102) (#(";" 0 1 (fontified nil face font-lock-comment-delimiter-face)) . 1117) (1118 . 1119) (1111 . 1112) (#(":" 0 1 (fontified t)) . 1110)) nil (23727 49442 533343 517000) 0 nil]) ((1091 . 1093)) nil (23727 49442 533351 251000) 0 nil]) ((1097 . 1098) (#(")" 0 1 (fontified t)) . -1090) (1063 . 1082) (1071 . 1072) (#(")" 0 1 (fontified t)) . -1064) (1063 . 1065) (#("(" 0 1 (fontified nil)) . -1063) (1063 . 1064)) nil (23727 49442 533361 412000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-string-face)) . 1076)) nil (23727 49442 533367 76000) 0 nil]) ((1077 . 1078) (1071 . 1072)) nil (23727 49442 533372 249000) 0 nil]) ((#(":" 0 1 (fontified t)) . 1070)) nil (23727 49442 533376 887000) 0 nil]) ((nil rear-nonsticky nil 1179 . 1180) (nil fontified nil 1063 . 1180) (1063 . 1180)) nil (23727 49442 533382 553000) 0 nil]) ((#("display: flex;
max-width: 700px;
padding-left: 8px;
padding-right: 8px;
margin: auto;
justify-content: space-between;" 0 1 (fontified t face font-lock-string-face) 1 5 (fontified t face font-lock-string-face) 5 13 (fontified t face font-lock-string-face) 13 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face) 15 21 (fontified t face font-lock-string-face) 21 22 (fontified t face font-lock-string-face) 22 23 (fontified t face font-lock-string-face) 23 31 (fontified t face font-lock-string-face) 31 32 (fontified t face font-lock-string-face) 32 33 (fontified t face font-lock-string-face) 33 36 (fontified t face font-lock-string-face) 36 39 (fontified t face font-lock-string-face) 39 41 (fontified t face font-lock-string-face) 41 42 (fontified t face font-lock-string-face) 42 44 (fontified t face font-lock-string-face) 44 46 (fontified t face font-lock-string-face) 46 47 (fontified t face font-lock-string-face) 47 48 (fontified t face font-lock-string-face) 48 50 (fontified t face font-lock-string-face) 50 51 (fontified t face font-lock-string-face) 51 52 (fontified t face font-lock-string-face) 52 64 (fontified t face font-lock-string-face) 64 69 (fontified t face font-lock-string-face) 69 70 (fontified t face font-lock-string-face) 70 71 (fontified t face font-lock-string-face) 71 72 (fontified t face font-lock-string-face) 72 84 (fontified t face font-lock-string-face) 84 85 (fontified t face font-lock-string-face) 85 86 (fontified t face font-lock-string-face) 86 87 (fontified t face font-lock-string-face) 87 89 (fontified t face font-lock-string-face) 89 93 (fontified t face font-lock-string-face) 93 94 (fontified t face font-lock-string-face) 94 105 (fontified t face font-lock-string-face) 105 116 (fontified t face font-lock-string-face) 116 117 (fontified t face font-lock-string-face)) . 1133) (undo-tree-id1298 . -116) (undo-tree-id1299 . -116) (undo-tree-id1300 . -52) (undo-tree-id1301 . -86) (undo-tree-id1302 . -52) (undo-tree-id1303 . -116) (undo-tree-id1304 . -116) (undo-tree-id1305 . -116) 1249) nil (23727 49442 533408 92000) 0 nil]) ((#("                   " 0 19 (fontified t)) . -1063) (undo-tree-id1306 . -19) (undo-tree-id1307 . -19) 1082 (1063 . 1082) (1063 . 1064) 1081) nil (23727 49442 533422 118000) 0 nil]) ((1062 . 1082) (1061 . 1063) (#("(" 0 1 (fontified nil)) . -1061) (1061 . 1062)) nil (23727 49442 533430 884000) 0 nil]) ((#("                   " 0 19 (fontified nil)) . 636) (#("
" 0 1 (fontified t)) . -636) (undo-tree-id1308 . -1) 634) nil (23727 49442 533440 170000) 0 nil]) ((1072 . 1081) (1066 . 1072) (1065 . 1067) (#("(" 0 1 (fontified nil)) . -1065) (1065 . 1066) (1062 . 1065)) nil (23727 49442 533449 624000) 0 nil] [nil nil ((1049 . 1050)) ((#("'" 0 1 (fontified t face racket-selfeval-face)) . 1049) (undo-tree-id1247 . 1) (undo-tree-id1248 . 1) (undo-tree-id1249 . 1) (undo-tree-id1250 . 1) (undo-tree-id1251 . 1) (undo-tree-id1252 . 1) (undo-tree-id1253 . 1) (undo-tree-id1254 . -1) (undo-tree-id1255 . 1) (undo-tree-id1256 . -1) (undo-tree-id1257 . 1) (undo-tree-id1258 . 1) (undo-tree-id1259 . 1)) (23727 49279 370726 457000) 0 nil]) ((1060 . 1062) (1042 . 1060) (1041 . 1043) (#("(" 0 1 (fontified nil)) . -1041) (1041 . 1042) (1041 . 1042) (t 23727 48574 133544 933000)) nil (23727 49279 371036 2000) 0 nil]) ((#("(provide NavBar_Style)
" 0 1 (fontified t) 1 8 (fontified t face font-lock-keyword-face) 8 21 (fontified t) 21 22 (fontified t) 22 23 (fontified t)) . 2150) (undo-tree-id1181 . -21) (undo-tree-id1182 . -11) (undo-tree-id1183 . -11) (undo-tree-id1184 . -20) (undo-tree-id1185 . 2) (undo-tree-id1186 . 3) (undo-tree-id1187 . 2) (undo-tree-id1188 . 2) (undo-tree-id1189 . -21) (undo-tree-id1190 . -20) (undo-tree-id1191 . -21) (undo-tree-id1192 . -21) (undo-tree-id1193 . -21) (undo-tree-id1194 . -21) (undo-tree-id1195 . -21) (undo-tree-id1196 . -21) (undo-tree-id1197 . -17) (undo-tree-id1198 . -17) (undo-tree-id1199 . 6) 2167) nil (23727 48574 5539 603000) 0 nil]) ((2143 . 2148) (#("s" 0 1 (fontified t)) . -2143) (undo-tree-id1200 . -1) (undo-tree-id1201 . -1) (undo-tree-id1202 . 1) 2144 (2142 . 2144) (#("Btn_Style" 0 9 (fontified t)) . 2142) (undo-tree-id1203 . 1) (undo-tree-id1204 . 1) (undo-tree-id1205 . -8) (undo-tree-id1206 . -8) (undo-tree-id1207 . -8) (undo-tree-id1208 . 9)) nil (23727 48574 5582 757000) 0 nil]) ((1886 . 1894) (#("u" 0 1 (fontified t)) . -1886) (undo-tree-id1209 . -1) (undo-tree-id1210 . -1) 1887 (1885 . 1887) (#("_" 0 1 (fontified t)) . -1885) (undo-tree-id1211 . -1) (undo-tree-id1212 . -1) 1886 (1883 . 1886) (1869 . 1883) (#("()" 0 1 (fontified t) 1 2 (fontified t)) . 1869) (undo-tree-id1213 . -1) (undo-tree-id1214 . -1) 1870 (#("N" 0 1 (fontified t)) . -1870) (undo-tree-id1215 . -1) (undo-tree-id1216 . -1) (#("a" 0 1 (fontified t)) . -1871) (undo-tree-id1217 . -1) (undo-tree-id1218 . -1) (#("v" 0 1 (fontified t)) . -1872) (undo-tree-id1219 . -1) (undo-tree-id1220 . -1) (#("B" 0 1 (fontified t)) . -1873) (undo-tree-id1221 . -1) (undo-tree-id1222 . -1) (#("a" 0 1 (fontified t)) . -1874) (undo-tree-id1223 . -1) (undo-tree-id1224 . -1) (#("r" 0 1 (fontified t)) . -1875) (undo-tree-id1225 . -1) (undo-tree-id1226 . -1) (#("_" 0 1 (fontified t)) . -1876) (undo-tree-id1227 . -1) (undo-tree-id1228 . -1) (#("S" 0 1 (fontified t)) . -1877) (undo-tree-id1229 . -1) (undo-tree-id1230 . -1) (#("t" 0 1 (fontified t)) . -1878) (undo-tree-id1231 . -1) (undo-tree-id1232 . -1) (#("y" 0 1 (fontified t)) . -1879) (undo-tree-id1233 . -1) (undo-tree-id1234 . -1) (#("l" 0 1 (fontified t)) . -1880) (undo-tree-id1235 . -1) (undo-tree-id1236 . -1) (#("e" 0 1 (fontified t)) . -1881) (undo-tree-id1237 . -1) (undo-tree-id1238 . -1) 1882 (1876 . 1882) (#("S" 0 1 (fontified t)) . -1876) (undo-tree-id1239 . -1) (undo-tree-id1240 . -1) 1877 (1870 . 1877) (1869 . 1871) (#("(" 0 1 (fontified nil)) . -1869) (1868 . 1870) (1855 . 1868) (#("string-a" 0 8 (fontified t)) . -1855) (undo-tree-id1241 . -8) (undo-tree-id1242 . -8) 1863 (1855 . 1863) (1854 . 1856) (#("(" 0 1 (fontified nil)) . -1854) (1854 . 1855) (1851 . 1854) (1846 . 1851) (1842 . 1846) (#("()" 0 1 (fontified t) 1 2 (fontified t)) . 1842) (undo-tree-id1243 . -1) (undo-tree-id1244 . -1) 1843 (1842 . 1844) (#("(" 0 1 (fontified nil)) . -1842) (1835 . 1843) (1834 . 1836) (#("(" 0 1 (fontified nil)) . -1834) (1834 . 1835) (1833 . 1834)) nil (23727 48574 5730 953000) 0 nil]) ((#("(provide css)
" 0 1 (fontified t) 1 8 (fontified t face font-lock-keyword-face) 8 14 (fontified t)) . 2067) (undo-tree-id1245 . -12) (undo-tree-id1246 . -12) 2079 (t 23727 48416 665056 475000)) nil (23727 48574 5776 389000) 0 nil]) ((#("#482BB" 0 1 (fontified t syntax-table #2=(6) face font-lock-string-face) 1 2 (fontified t syntax-table #2# face font-lock-string-face) 2 6 (fontified t syntax-table #2# face font-lock-string-face)) . 862) (undo-tree-id1177 . -4) (undo-tree-id1178 . -4) (undo-tree-id1179 . -4) (undo-tree-id1180 . -2)) nil (23727 48416 638931 818000) 0 nil]) ((nil rear-nonsticky nil 861 . 862) (nil fontified nil 855 . 862) (855 . 862) 854 (t 23727 48278 946577 600000)) nil (23727 48416 638948 44000) 0 nil] [nil nil ((nil rear-nonsticky nil 863 . 864) (nil fontified nil 857 . 864) (857 . 864) 856 (t 23727 48278 946577 600000)) ((#("#4F82BB" 0 6 (fontified nil syntax-table #2# face font-lock-string-face) 6 7 (fontified nil rear-nonsticky nil syntax-table #2# face font-lock-string-face)) . 857) (undo-tree-id1167 . -6) (undo-tree-id1168 . 1) (undo-tree-id1169 . -6) (undo-tree-id1170 . 1) (undo-tree-id1171 . -6) (undo-tree-id1172 . 1) (undo-tree-id1173 . -6) (undo-tree-id1174 . -6) (undo-tree-id1175 . 1) (undo-tree-id1176 . 1) (nil rear-nonsticky t 863 . 864)) (23727 48411 409927 848000) 0 nil]) ((2125 . 2126) 2123) nil (23727 48411 410748 455000) 0 nil]) ((2121 . 2124) (2115 . 2121)) nil (23727 48278 921561 396000) 0 nil]) ((2104 . 2115) (2103 . 2105) (#("(" 0 1 (fontified nil)) . -2103) (2103 . 2104) (t 23727 48235 505868 18000)) nil (23727 48278 921570 931000) 0 nil] [nil nil ((971 . 973)) ((#(". " 0 1 (fontified t face font-lock-variable-name-face) 1 2 (fontified t)) . 971) (undo-tree-id1166 . 1)) (23727 48231 20521 582000) 0 nil]) ((953 . 955)) ((#(". " 0 2 (fontified t)) . 953)) (23727 48234 199121 741000) 0 nil]) ((896 . 898)) nil (23727 48233 105595 68000) 0 nil]) ((852 . 854)) nil (23727 48231 20531 499000) 0 nil]) ((808 . 810)) nil (23727 48231 20533 109000) 0 nil]) ((770 . 772)) nil (23727 48231 20534 747000) 0 nil]) ((737 . 739)) nil (23727 48231 20536 332000) 0 nil]) ((705 . 707)) nil (23727 48231 20537 858000) 0 nil]) ((666 . 668) (t 23727 48180 695132 232000)) nil (23727 48231 20540 406000) 0 nil] [nil nil ((673 . 679) (672 . 674) (#("\"" 0 1 (fontified nil)) . -672) (672 . 673) (#(" " 0 1 (fontified nil)) . -672) (undo-tree-id1119 . -1) (672 . 673) (#("\"" 0 1 (fontified nil)) . -672) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (666 . 673) (t 23727 48180 695132 232000)) ((#("class \"" 0 5 (fontified nil face font-lock-builtin-face) 5 6 (fontified nil) 6 7 (fontified nil)) . 666) (undo-tree-id1122 . -6) (undo-tree-id1123 . -6) (undo-tree-id1124 . 7) (undo-tree-id1125 . 7) (undo-tree-id1126 . 7) (undo-tree-id1127 . 7) (undo-tree-id1128 . 7) (undo-tree-id1129 . 7) (undo-tree-id1130 . -6) (undo-tree-id1131 . -7) (undo-tree-id1132 . -6) (undo-tree-id1133 . -7) (undo-tree-id1134 . -6) (undo-tree-id1135 . -6) (undo-tree-id1136 . -6) (undo-tree-id1137 . 7) (undo-tree-id1138 . 7) (undo-tree-id1139 . 7) (undo-tree-id1140 . 7) (undo-tree-id1141 . 7) (undo-tree-id1142 . 7) (undo-tree-id1143 . 7) (undo-tree-id1144 . 7) (undo-tree-id1145 . 7) (undo-tree-id1146 . 7) (672 . 673) (#(" " 0 1 (fontified nil)) . 672) (undo-tree-id1147 . -1) (672 . 673) (#("\"" 0 1 (fontified nil)) . 672) (672 . 673) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 672) (undo-tree-id1148 . 1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (undo-tree-id1151 . -1) (undo-tree-id1152 . 1) (undo-tree-id1153 . 1) (undo-tree-id1154 . 1) (undo-tree-id1155 . 1) (undo-tree-id1156 . 1) (undo-tree-id1157 . 1) (undo-tree-id1158 . 1) (undo-tree-id1159 . 1) (undo-tree-id1160 . 1) (undo-tree-id1161 . 1) (#("NavBar" 0 6 (fontified t face font-lock-string-face)) . 673) (undo-tree-id1162 . -5) (undo-tree-id1163 . -5) (undo-tree-id1164 . 1) (undo-tree-id1165 . 1)) (23727 48202 63674 552000) 0 nil]) ((992 . 998) (991 . 993) (#("\"" 0 1 (fontified nil)) . -991) (985 . 992)) nil (23727 48202 64464 351000) 0 nil]) ((#("style \"
\"" 0 6 (fontified t) 6 7 (fontified t face font-lock-string-face) 7 8 (fontified t face font-lock-string-face) 8 9 (fontified t face font-lock-string-face)) . 985) (undo-tree-id1108 . -8) (undo-tree-id1109 . 1) (undo-tree-id1110 . -8) (undo-tree-id1111 . -8) (undo-tree-id1112 . -8) (undo-tree-id1113 . 9) (undo-tree-id1114 . 8) (undo-tree-id1115 . 9) (undo-tree-id1116 . 8) (undo-tree-id1117 . 9) (undo-tree-id1118 . 8)) nil (23727 48180 664546 796000) 0 nil]) ((#("                   " 0 19 (fontified nil)) . 943) (#("
" 0 1 (fontified t)) . -943) 942) nil (23727 48180 664557 523000) 0 nil]) ((#("
" 0 1 (fontified t)) . -943) 934) nil (23727 48180 664564 96000) 0 nil]) ((914 . 934) (#(" " 0 1 (fontified t)) . 914)) nil (23727 48180 664569 275000) 0 nil]) ((914 . 915) (#("
" 0 1 (fontified t)) . -914) 913) nil (23727 48180 664575 98000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 914)) nil (23727 48180 664579 310000) 0 nil]) ((912 . 913)) nil (23727 48180 664582 971000) 0 nil]) ((884 . 885) (#("(" 0 1 (fontified t)) . 884) (884 . 885) (#("r" 0 1 (fontified t)) . 884)) nil (23727 48180 664588 851000) 0 nil]) ((884 . 885)) nil (23727 48180 664593 670000) 0 nil]) ((#(":" 0 1 (fontified t)) . 883)) nil (23727 48180 664597 271000) 0 nil]) ((912 . 913) (#(")" 0 1 (fontified t)) . -899) (899 . 900) (#(")" 0 1 (fontified nil)) . -894) (894 . 895) (#(")" 0 1 (fontified t)) . -890) (890 . 891) (#(")" 0 1 (fontified t)) . -886) (886 . 887) (#(")" 0 1 (fontified t)) . -884) (853 . 872) (865 . 866) (#(")" 0 1 (fontified t)) . -854) (853 . 855) (#("(" 0 1 (fontified nil face font-lock-comment-face)) . -853) (853 . 854)) nil (23727 48180 664615 561000) 0 nil] [nil nil ((853 . 872) (889 . 890) (#(")" 0 1 (fontified t)) . 891) (undo-tree-id1086 . -1) 853) ((891 . 892) (#(";" 0 1 (fontified nil face font-lock-comment-delimiter-face)) . 889) (#("                   " 0 19 (fontified t)) . 853) (undo-tree-id1087 . 19) (undo-tree-id1088 . 19) (undo-tree-id1089 . 19) (undo-tree-id1090 . 19) (undo-tree-id1091 . 19) (undo-tree-id1092 . 19) (undo-tree-id1093 . 19) (undo-tree-id1094 . 19) (undo-tree-id1095 . 19) (undo-tree-id1096 . 19) (undo-tree-id1097 . 19) (undo-tree-id1098 . 19) (undo-tree-id1099 . 19) (undo-tree-id1100 . 19) (undo-tree-id1101 . 19) (undo-tree-id1102 . 19) (undo-tree-id1103 . 19) (undo-tree-id1104 . 19) (undo-tree-id1105 . 19) (undo-tree-id1106 . 19) (undo-tree-id1107 . 19)) (23727 48134 410597 675000) 0 nil] [nil nil ((#(" " 0 1 (fontified nil)) . 888) (886 . 887) (#("#" 0 1 (fontified nil)) . 886) (884 . 885) (#("'" 0 1 (fontified nil)) . 884) (884 . 885) (#("#" 0 1 (fontified nil)) . 884) (886 . 887) (884 . 885) (#(":" 0 1 (fontified nil)) . 883) (886 . 887) (#(")" 0 1 (fontified nil)) . -884) (853 . 872) (865 . 866) (#(")" 0 1 (fontified nil)) . -854) (853 . 855) (#("(" 0 1 (fontified nil face font-lock-comment-face)) . -853) (853 . 854)) ((#("(" 0 1 (fontified nil face font-lock-comment-face)) . 853) (undo-tree-id650 . 1) (853 . 854) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 853) (undo-tree-id651 . 2) (undo-tree-id652 . 2) (undo-tree-id653 . 2) (undo-tree-id654 . 2) (undo-tree-id655 . 2) (undo-tree-id656 . 2) (undo-tree-id657 . 2) (undo-tree-id658 . 2) (undo-tree-id659 . 2) (undo-tree-id660 . 2) (undo-tree-id661 . 2) (undo-tree-id662 . 2) (undo-tree-id663 . 2) (undo-tree-id664 . 2) (undo-tree-id665 . 2) (undo-tree-id666 . 2) (undo-tree-id667 . 2) (undo-tree-id668 . 2) (undo-tree-id669 . 2) (undo-tree-id670 . 2) (undo-tree-id671 . 2) (undo-tree-id672 . 2) (undo-tree-id673 . 2) (undo-tree-id674 . 2) (undo-tree-id675 . 2) (undo-tree-id676 . 2) (undo-tree-id677 . 2) (undo-tree-id678 . 2) (undo-tree-id679 . 2) (undo-tree-id680 . 2) (undo-tree-id681 . 2) (undo-tree-id682 . 2) (undo-tree-id683 . 2) (undo-tree-id684 . 2) (undo-tree-id685 . 2) (undo-tree-id686 . 2) (undo-tree-id687 . 2) (undo-tree-id688 . 2) (undo-tree-id689 . 2) (undo-tree-id690 . 2) (undo-tree-id691 . 2) (undo-tree-id692 . 2) (undo-tree-id693 . 2) (undo-tree-id694 . 2) (undo-tree-id695 . 2) (undo-tree-id696 . 2) (undo-tree-id697 . 2) (undo-tree-id698 . 2) (undo-tree-id699 . 2) (undo-tree-id700 . 2) (undo-tree-id701 . 2) (undo-tree-id702 . 2) (undo-tree-id703 . 2) (undo-tree-id704 . 2) (undo-tree-id705 . 2) (undo-tree-id706 . 2) (undo-tree-id707 . 2) (undo-tree-id708 . 2) (undo-tree-id709 . 2) (undo-tree-id710 . 2) (undo-tree-id711 . 2) (undo-tree-id712 . 2) (undo-tree-id713 . 2) (undo-tree-id714 . 2) (undo-tree-id715 . 2) (undo-tree-id716 . 2) (undo-tree-id717 . 2) (undo-tree-id718 . 2) (undo-tree-id719 . 2) (undo-tree-id720 . 2) (undo-tree-id721 . 2) (undo-tree-id722 . 2) (undo-tree-id723 . 2) (undo-tree-id724 . 2) (undo-tree-id725 . 2) (undo-tree-id726 . 2) (undo-tree-id727 . 2) (undo-tree-id728 . 2) (undo-tree-id729 . 2) (undo-tree-id730 . 2) (undo-tree-id731 . 2) (undo-tree-id732 . 2) (undo-tree-id733 . 2) (undo-tree-id734 . 2) (undo-tree-id735 . 2) (undo-tree-id736 . 2) (undo-tree-id737 . 2) (undo-tree-id738 . 2) (undo-tree-id739 . 2) (undo-tree-id740 . 2) (undo-tree-id741 . 2) (undo-tree-id742 . 2) (undo-tree-id743 . 2) (undo-tree-id744 . 2) (undo-tree-id745 . 2) (undo-tree-id746 . 2) (undo-tree-id747 . 2) (undo-tree-id748 . 2) (undo-tree-id749 . 2) (undo-tree-id750 . 2) (undo-tree-id751 . 2) (undo-tree-id752 . 2) (undo-tree-id753 . 2) (undo-tree-id754 . 2) (undo-tree-id755 . 2) (undo-tree-id756 . 2) (undo-tree-id757 . 2) (undo-tree-id758 . 2) (undo-tree-id759 . 2) (undo-tree-id760 . 2) (undo-tree-id761 . 2) (undo-tree-id762 . 2) (undo-tree-id763 . 2) (undo-tree-id764 . 2) (undo-tree-id765 . 2) (undo-tree-id766 . 2) (undo-tree-id767 . 2) (undo-tree-id768 . 2) (undo-tree-id769 . 2) (undo-tree-id770 . 2) (undo-tree-id771 . 2) (undo-tree-id772 . 2) (undo-tree-id773 . 2) (undo-tree-id774 . 2) (undo-tree-id775 . 2) (undo-tree-id776 . 2) (undo-tree-id777 . 2) (undo-tree-id778 . 2) (undo-tree-id779 . 2) (undo-tree-id780 . 2) (undo-tree-id781 . 2) (undo-tree-id782 . 2) (undo-tree-id783 . 2) (undo-tree-id784 . 2) (undo-tree-id785 . 2) (undo-tree-id786 . 2) (undo-tree-id787 . 2) (undo-tree-id788 . 2) (undo-tree-id789 . 2) (undo-tree-id790 . 2) (undo-tree-id791 . 2) (undo-tree-id792 . 2) (undo-tree-id793 . 2) (undo-tree-id794 . 2) (undo-tree-id795 . 2) (undo-tree-id796 . 2) (undo-tree-id797 . 2) (undo-tree-id798 . 2) (undo-tree-id799 . 2) (undo-tree-id800 . 2) (undo-tree-id801 . 2) (undo-tree-id802 . 2) (undo-tree-id803 . 2) (undo-tree-id804 . 2) (undo-tree-id805 . 2) (undo-tree-id806 . 2) (undo-tree-id807 . 2) (undo-tree-id808 . 2) (undo-tree-id809 . 2) (undo-tree-id810 . 2) (undo-tree-id811 . 2) (undo-tree-id812 . 2) (undo-tree-id813 . 2) (undo-tree-id814 . 2) (undo-tree-id815 . 2) (undo-tree-id816 . 2) (undo-tree-id817 . 2) (undo-tree-id818 . 2) (undo-tree-id819 . 2) (undo-tree-id820 . 2) (undo-tree-id821 . 2) (undo-tree-id822 . 2) (undo-tree-id823 . 2) (undo-tree-id824 . 2) (undo-tree-id825 . 2) (undo-tree-id826 . 2) (undo-tree-id827 . -1) (undo-tree-id828 . 2) (undo-tree-id829 . -1) (undo-tree-id830 . 2) (undo-tree-id831 . 2) (undo-tree-id832 . 2) (undo-tree-id833 . -1) (undo-tree-id834 . 2) (undo-tree-id835 . -1) (854 . 855) (#(")" 0 1 (fontified nil)) . 865) (#("                   " 0 19 (fontified nil)) . 853) (undo-tree-id836 . 19) (undo-tree-id837 . 19) (undo-tree-id838 . 19) (undo-tree-id839 . 19) (undo-tree-id840 . 19) (undo-tree-id841 . 18) (undo-tree-id842 . 19) (undo-tree-id843 . -1) (undo-tree-id844 . 18) (undo-tree-id845 . 19) (undo-tree-id846 . -1) (undo-tree-id847 . 18) (undo-tree-id848 . 19) (undo-tree-id849 . 18) (undo-tree-id850 . 19) (undo-tree-id851 . 18) (undo-tree-id852 . 19) (undo-tree-id853 . 18) (undo-tree-id854 . 18) (undo-tree-id855 . 18) (undo-tree-id856 . 18) (undo-tree-id857 . 18) (undo-tree-id858 . 15) (undo-tree-id859 . -4) (undo-tree-id860 . 15) (undo-tree-id861 . -4) (undo-tree-id862 . 15) (undo-tree-id863 . 15) (undo-tree-id864 . 15) (undo-tree-id865 . 14) (undo-tree-id866 . 15) (undo-tree-id867 . -5) (undo-tree-id868 . 14) (undo-tree-id869 . 15) (undo-tree-id870 . -5) (undo-tree-id871 . 14) (undo-tree-id872 . 15) (undo-tree-id873 . 14) (undo-tree-id874 . 15) (undo-tree-id875 . 14) (undo-tree-id876 . 15) (undo-tree-id877 . 13) (undo-tree-id878 . 14) (undo-tree-id879 . -6) (undo-tree-id880 . 13) (undo-tree-id881 . 14) (undo-tree-id882 . -6) (undo-tree-id883 . 13) (undo-tree-id884 . 14) (undo-tree-id885 . 13) (undo-tree-id886 . 14) (undo-tree-id887 . 13) (undo-tree-id888 . 14) (undo-tree-id889 . 12) (undo-tree-id890 . 13) (undo-tree-id891 . -7) (undo-tree-id892 . 12) (undo-tree-id893 . 13) (undo-tree-id894 . -7) (undo-tree-id895 . 12) (undo-tree-id896 . 13) (undo-tree-id897 . 12) (undo-tree-id898 . 13) (undo-tree-id899 . 12) (undo-tree-id900 . 13) (undo-tree-id901 . 11) (undo-tree-id902 . 12) (undo-tree-id903 . -8) (undo-tree-id904 . 11) (undo-tree-id905 . 12) (undo-tree-id906 . -8) (undo-tree-id907 . 11) (undo-tree-id908 . 12) (undo-tree-id909 . 11) (undo-tree-id910 . 12) (undo-tree-id911 . 11) (undo-tree-id912 . 12) (undo-tree-id913 . 10) (undo-tree-id914 . 11) (undo-tree-id915 . -9) (undo-tree-id916 . 10) (undo-tree-id917 . 11) (undo-tree-id918 . -9) (undo-tree-id919 . 10) (undo-tree-id920 . 11) (undo-tree-id921 . 10) (undo-tree-id922 . 11) (undo-tree-id923 . 10) (undo-tree-id924 . 11) (undo-tree-id925 . 9) (undo-tree-id926 . 10) (undo-tree-id927 . -10) (undo-tree-id928 . 9) (undo-tree-id929 . 10) (undo-tree-id930 . -10) (undo-tree-id931 . 9) (undo-tree-id932 . 10) (undo-tree-id933 . 9) (undo-tree-id934 . 10) (undo-tree-id935 . 9) (undo-tree-id936 . 10) (undo-tree-id937 . 8) (undo-tree-id938 . 9) (undo-tree-id939 . -11) (undo-tree-id940 . 8) (undo-tree-id941 . 9) (undo-tree-id942 . -11) (undo-tree-id943 . 8) (undo-tree-id944 . 9) (undo-tree-id945 . 8) (undo-tree-id946 . 9) (undo-tree-id947 . 8) (undo-tree-id948 . 9) (undo-tree-id949 . 7) (undo-tree-id950 . 8) (undo-tree-id951 . -12) (undo-tree-id952 . 7) (undo-tree-id953 . 8) (undo-tree-id954 . -12) (undo-tree-id955 . 7) (undo-tree-id956 . 8) (undo-tree-id957 . 7) (undo-tree-id958 . 8) (undo-tree-id959 . 7) (undo-tree-id960 . 8) (undo-tree-id961 . 6) (undo-tree-id962 . 7) (undo-tree-id963 . -13) (undo-tree-id964 . 6) (undo-tree-id965 . 7) (undo-tree-id966 . -13) (undo-tree-id967 . 6) (undo-tree-id968 . 7) (undo-tree-id969 . 6) (undo-tree-id970 . 7) (undo-tree-id971 . 6) (undo-tree-id972 . 7) (undo-tree-id973 . 5) (undo-tree-id974 . 6) (undo-tree-id975 . -14) (undo-tree-id976 . 5) (undo-tree-id977 . 6) (undo-tree-id978 . -14) (undo-tree-id979 . 5) (undo-tree-id980 . 6) (undo-tree-id981 . 5) (undo-tree-id982 . 6) (undo-tree-id983 . 5) (undo-tree-id984 . 6) (undo-tree-id985 . 4) (undo-tree-id986 . 5) (undo-tree-id987 . -15) (undo-tree-id988 . 4) (undo-tree-id989 . 5) (undo-tree-id990 . -15) (undo-tree-id991 . 4) (undo-tree-id992 . 5) (undo-tree-id993 . 4) (undo-tree-id994 . 5) (undo-tree-id995 . 4) (undo-tree-id996 . 5) (undo-tree-id997 . 3) (undo-tree-id998 . 4) (undo-tree-id999 . -16) (undo-tree-id1000 . 3) (undo-tree-id1001 . 4) (undo-tree-id1002 . -16) (undo-tree-id1003 . 3) (undo-tree-id1004 . 4) (undo-tree-id1005 . 3) (undo-tree-id1006 . 4) (undo-tree-id1007 . 3) (undo-tree-id1008 . 4) (undo-tree-id1009 . 2) (undo-tree-id1010 . 3) (undo-tree-id1011 . -17) (undo-tree-id1012 . 2) (undo-tree-id1013 . 3) (undo-tree-id1014 . -17) (undo-tree-id1015 . 2) (undo-tree-id1016 . 3) (undo-tree-id1017 . 2) (undo-tree-id1018 . 3) (undo-tree-id1019 . 2) (undo-tree-id1020 . 3) (undo-tree-id1021 . 1) (undo-tree-id1022 . 2) (undo-tree-id1023 . -18) (undo-tree-id1024 . 1) (undo-tree-id1025 . 2) (undo-tree-id1026 . -18) (undo-tree-id1027 . 1) (undo-tree-id1028 . 2) (undo-tree-id1029 . 1) (undo-tree-id1030 . 2) (undo-tree-id1031 . 1) (undo-tree-id1032 . 2) (undo-tree-id1033 . 1) (undo-tree-id1034 . -19) (undo-tree-id1035 . 1) (undo-tree-id1036 . -19) (undo-tree-id1037 . 1) (undo-tree-id1038 . 1) (undo-tree-id1039 . 1) (undo-tree-id1040 . -19) (884 . 885) (#(")" 0 1 (fontified nil)) . 886) (undo-tree-id1041 . 1) (undo-tree-id1042 . 1) (undo-tree-id1043 . 1) (undo-tree-id1044 . 1) (undo-tree-id1045 . 1) (undo-tree-id1046 . 1) (undo-tree-id1047 . 1) (undo-tree-id1048 . 1) (undo-tree-id1049 . 1) (undo-tree-id1050 . 1) (undo-tree-id1051 . 1) (undo-tree-id1052 . 1) (undo-tree-id1053 . 1) (undo-tree-id1054 . 1) (undo-tree-id1055 . 1) (undo-tree-id1056 . 1) (undo-tree-id1057 . 1) (undo-tree-id1058 . -1) (883 . 884) (#("#" 0 1 (fontified nil)) . 884) (#("#" 0 1 (fontified nil)) . 886) (884 . 885) (#("'" 0 1 (fontified nil)) . 884) (884 . 885) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 884) (undo-tree-id1059 . 1) (undo-tree-id1060 . 1) (undo-tree-id1061 . 1) (undo-tree-id1062 . 1) (undo-tree-id1063 . 1) (undo-tree-id1064 . 1) (undo-tree-id1065 . -1) (undo-tree-id1066 . 1) (undo-tree-id1067 . -1) (undo-tree-id1068 . 1) (undo-tree-id1069 . 1) (undo-tree-id1070 . 1) (886 . 887) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 886) (undo-tree-id1071 . 1) (undo-tree-id1072 . 1) (undo-tree-id1073 . 1) (undo-tree-id1074 . 1) (undo-tree-id1075 . 1) (undo-tree-id1076 . 1) (undo-tree-id1077 . -1) (undo-tree-id1078 . 1) (undo-tree-id1079 . -1) (undo-tree-id1080 . 1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . 1) (undo-tree-id1084 . 1) (undo-tree-id1085 . -1) (888 . 889)) (23727 48129 367216 133000) 0 nil]) ((849 . 850) (#("#" 0 1 (fontified t face font-lock-string-face)) . 849)) nil (23727 48134 411098 502000) 0 nil]) ((843 . 844) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 843)) nil (23727 48129 367259 561000) 0 nil] [nil nil ((#("\"\"" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 842) (undo-tree-id617 . 2) (undo-tree-id618 . 2) (undo-tree-id619 . 2) (undo-tree-id620 . 2) (undo-tree-id621 . 2) (undo-tree-id622 . 1) (undo-tree-id623 . 2) (undo-tree-id624 . -1) (undo-tree-id625 . 1) (undo-tree-id626 . 2) (undo-tree-id627 . -1) (undo-tree-id628 . 1) (undo-tree-id629 . 2) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . 1) (undo-tree-id633 . 2) (undo-tree-id634 . 1) (undo-tree-id635 . 2) (undo-tree-id636 . 2) (undo-tree-id637 . -1) (undo-tree-id638 . 1) (undo-tree-id639 . -1) (undo-tree-id640 . 1) (undo-tree-id641 . -2) (undo-tree-id642 . -1) (undo-tree-id643 . -2) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -2) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -2) 843) ((842 . 844)) (23727 48113 305889 162000) 0 nil]) ((#(";" 0 1 (rear-nonsticky t fontified t face font-lock-comment-delimiter-face)) . 903) (901 . 902) (#("#" 0 1 (fontified nil)) . 901) (899 . 900) (#("'" 0 1 (fontified nil)) . 899) (899 . 900) (#("#" 0 1 (fontified nil)) . 899) (901 . 902) (899 . 900) (#(":" 0 1 (fontified nil)) . 898) (901 . 902) (#(")" 0 1 (fontified nil)) . -899) (899 . 900) (#(")" 0 1 (fontified nil)) . -895) (894 . 896) (#("(" 0 1 (fontified nil face font-lock-comment-face)) . -894) (894 . 895)) nil (23727 48113 306419 63000) 0 nil] [nil nil ((#(" " 0 1 (fontified nil)) . 888) (undo-tree-id483 . 1) (886 . 887) (#("#" 0 1 (fontified nil)) . 886) (undo-tree-id484 . 1) (undo-tree-id485 . 1) (884 . 885) (#("'" 0 1 (fontified nil)) . 884) (undo-tree-id486 . 1) (undo-tree-id487 . 1) (884 . 885) (#("#" 0 1 (fontified nil)) . 884) (undo-tree-id488 . 1) (undo-tree-id489 . 1) (undo-tree-id490 . 1) (undo-tree-id491 . 1) (undo-tree-id492 . 1) (undo-tree-id493 . 1) (undo-tree-id494 . 1) (undo-tree-id495 . 1) (undo-tree-id496 . 1) (undo-tree-id497 . 1) (undo-tree-id498 . 1) (undo-tree-id499 . 1) (undo-tree-id500 . 1) (undo-tree-id501 . 1) (undo-tree-id502 . 1) (undo-tree-id503 . 1) (undo-tree-id504 . 1) (undo-tree-id505 . 1) (undo-tree-id506 . 1) (undo-tree-id507 . 1) (undo-tree-id508 . 1) (undo-tree-id509 . 1) (886 . 887) (884 . 885) (#(":" 0 1 (fontified nil)) . 883) (undo-tree-id510 . 1) (886 . 887) (#(")" 0 1 (fontified nil)) . -884) (853 . 872) (865 . 866) (#(")" 0 1 (fontified nil)) . -854) (853 . 855) (#("(" 0 1 (fontified nil face font-lock-comment-face)) . -853) (853 . 854)) ((#("(" 0 1 (fontified nil face font-lock-comment-face)) . 853) (853 . 854) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 853) (undo-tree-id559 . 2) (undo-tree-id560 . 2) (undo-tree-id561 . 2) (undo-tree-id562 . 2) (undo-tree-id563 . 2) (undo-tree-id564 . 2) (854 . 855) (#(")" 0 1 (fontified nil)) . 865) (#("                   " 0 19 (fontified nil)) . 853) (undo-tree-id565 . 19) (undo-tree-id566 . 19) (undo-tree-id567 . 19) (undo-tree-id568 . 19) (undo-tree-id569 . 19) (undo-tree-id570 . 19) (884 . 885) (#(")" 0 1 (fontified nil)) . 886) (undo-tree-id571 . 1) (undo-tree-id572 . 1) (undo-tree-id573 . 1) (undo-tree-id574 . 1) (undo-tree-id575 . 1) (undo-tree-id576 . 1) (undo-tree-id577 . 1) (undo-tree-id578 . 1) (883 . 884) (#("#" 0 1 (fontified nil)) . 884) (undo-tree-id579 . 1) (undo-tree-id580 . 1) (undo-tree-id581 . 1) (undo-tree-id582 . 1) (undo-tree-id583 . 1) (undo-tree-id584 . 1) (undo-tree-id585 . 1) (undo-tree-id586 . 1) (undo-tree-id587 . 1) (undo-tree-id588 . 1) (undo-tree-id589 . 1) (undo-tree-id590 . 1) (undo-tree-id591 . 1) (undo-tree-id592 . 1) (undo-tree-id593 . 1) (undo-tree-id594 . 1) (undo-tree-id595 . 1) (undo-tree-id596 . 1) (undo-tree-id597 . 1) (undo-tree-id598 . 1) (undo-tree-id599 . 1) (undo-tree-id600 . 1) (#("#" 0 1 (fontified nil)) . 886) (undo-tree-id601 . 1) (undo-tree-id602 . 1) (884 . 885) (#("'" 0 1 (fontified nil)) . 884) (undo-tree-id603 . 1) (undo-tree-id604 . 1) (884 . 885) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 884) (undo-tree-id605 . 1) (undo-tree-id606 . 1) (undo-tree-id607 . 1) (undo-tree-id608 . 1) (undo-tree-id609 . 1) (undo-tree-id610 . 1) (undo-tree-id611 . 1) (undo-tree-id612 . 1) (undo-tree-id613 . 1) (undo-tree-id614 . 1) (undo-tree-id615 . 1) (886 . 887) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 886) (undo-tree-id616 . 1) (888 . 889)) (23727 48100 503645 387000) 0 nil]) ((#("F" 0 1 (fontified nil)) . 845) (undo-tree-id511 . 1) (843 . 844) (#("#" 0 1 (fontified nil)) . 843) (undo-tree-id512 . 1) (undo-tree-id513 . 1) (undo-tree-id514 . 1) (undo-tree-id515 . 1) (undo-tree-id516 . 1) (undo-tree-id517 . 1) (undo-tree-id518 . 1) (undo-tree-id519 . 1) (undo-tree-id520 . 1) (undo-tree-id521 . 1) (undo-tree-id522 . 1) (undo-tree-id523 . 1) (undo-tree-id524 . 1) (undo-tree-id525 . 1) (undo-tree-id526 . 1) (undo-tree-id527 . 1) (undo-tree-id528 . 1) (undo-tree-id529 . 1) (undo-tree-id530 . 1) (undo-tree-id531 . 1) (undo-tree-id532 . 1) (undo-tree-id533 . 1) (undo-tree-id534 . 1) (undo-tree-id535 . 1) (undo-tree-id536 . 1) (842 . 843) (#("'" 0 1 (fontified nil)) . 842) (undo-tree-id537 . 1) (undo-tree-id538 . 1) (842 . 843) (#("#" 0 1 (fontified nil)) . 842) (undo-tree-id539 . 1) (undo-tree-id540 . 1) (undo-tree-id541 . 1) (undo-tree-id542 . 1) (undo-tree-id543 . 1) (undo-tree-id544 . 1) (undo-tree-id545 . 1) (undo-tree-id546 . 1) (undo-tree-id547 . 1) (undo-tree-id548 . 1) (undo-tree-id549 . 1) (undo-tree-id550 . 1) (undo-tree-id551 . 1) (undo-tree-id552 . 1) (undo-tree-id553 . 1) (undo-tree-id554 . 1) (undo-tree-id555 . 1) (undo-tree-id556 . 1) (undo-tree-id557 . 1) (850 . 851) (842 . 843) (#(":" 0 1 (fontified t)) . 841) (undo-tree-id558 . 1) (850 . 851) (#(")" 0 1 (fontified nil)) . -842) (805 . 824) (823 . 824) (#(")" 0 1 (fontified nil)) . -806) (805 . 807) (#("(" 0 1 (fontified nil)) . -805) (805 . 806)) nil (23727 48100 504492 981000) 0 nil] [nil nil ((#("F" 0 1 (fontified nil)) . 845) (undo-tree-id464 . 1) (843 . 844) (#("#" 0 1 (fontified nil)) . 843) (undo-tree-id465 . 1) (undo-tree-id466 . 1) (undo-tree-id467 . 1) (842 . 843) (#("'" 0 1 (fontified nil)) . 842) (842 . 843) (#("#" 0 1 (fontified nil)) . 842) (undo-tree-id468 . 1) (undo-tree-id469 . 1) (undo-tree-id470 . 1) (850 . 851) (842 . 843) (#(":" 0 1 (fontified nil)) . 841) (850 . 851) (#(")" 0 1 (fontified nil)) . -842) (805 . 824) (823 . 824) (#(")" 0 1 (fontified nil)) . -806) (805 . 807) (#("(" 0 1 (fontified nil)) . -805) (805 . 806)) ((#("(" 0 1 (fontified nil)) . 805) (805 . 806) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 805) (undo-tree-id471 . 2) (806 . 807) (#(")" 0 1 (fontified nil)) . 823) (#("                   " 0 19 (fontified nil)) . 805) (undo-tree-id472 . 19) (842 . 843) (#(")" 0 1 (fontified nil)) . 850) (undo-tree-id473 . 1) (841 . 842) (#("#" 0 1 (fontified nil)) . 842) (undo-tree-id474 . 1) (undo-tree-id475 . 1) (undo-tree-id476 . 1) (#("#" 0 1 (fontified nil)) . 850) (842 . 843) (#("'" 0 1 (fontified nil)) . 842) (842 . 843) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 842) (undo-tree-id477 . 1) (undo-tree-id478 . 1) (undo-tree-id479 . 1) (undo-tree-id480 . 1) (undo-tree-id481 . 1) (undo-tree-id482 . 1) (843 . 844) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 843) (845 . 846)) (23727 48093 18452 469000) 0 nil] [nil nil ((#("F" 0 1 (fontified nil)) . 845) (843 . 844) (#("#" 0 1 (fontified nil)) . 843) (undo-tree-id445 . 1) (undo-tree-id446 . 1) (842 . 843) (#("'" 0 1 (fontified nil)) . 842) (842 . 843) (#("#" 0 1 (fontified nil)) . 842) (undo-tree-id447 . 1) (undo-tree-id448 . 1) (850 . 851) (842 . 843) (#(":" 0 1 (fontified t)) . 841) (850 . 851) (#(")" 0 1 (fontified nil)) . -842) (805 . 824) (823 . 824) (#(")" 0 1 (fontified nil)) . -806) (805 . 807) (#("(" 0 1 (fontified nil)) . -805) (805 . 806)) ((#("(" 0 1 (fontified nil)) . 805) (805 . 806) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 805) (806 . 807) (#(")" 0 1 (fontified nil)) . 823) (#("                   " 0 19 (fontified nil)) . 805) (842 . 843) (#(")" 0 1 (fontified nil)) . 850) (undo-tree-id459 . 1) (841 . 842) (#("#" 0 1 (fontified nil)) . 842) (undo-tree-id460 . 1) (undo-tree-id461 . 1) (#("#" 0 1 (fontified nil)) . 850) (842 . 843) (#("'" 0 1 (fontified nil)) . 842) (842 . 843) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 842) (undo-tree-id462 . 1) (undo-tree-id463 . 1) (843 . 844) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 843) (845 . 846)) (23727 48088 970977 352000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 804) (802 . 803) (#("#" 0 1 (fontified nil face racket-selfeval-face)) . 802) (800 . 801) (#("'" 0 1 (fontified nil)) . 800) (800 . 801) (#("#" 0 1 (fontified nil)) . 800) (802 . 803) (800 . 801) (#(":" 0 1 (fontified nil)) . 799) (802 . 803) (#(")" 0 1 (fontified nil)) . -800) (772 . 791) (781 . 782) (#(")" 0 1 (fontified nil)) . -773) (772 . 774) (#("(" 0 1 (fontified nil)) . -772) (772 . 773)) nil (23727 48093 19740 883000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 771) (769 . 770) (#("#" 0 1 (fontified nil)) . 769) (764 . 765) (#("'" 0 1 (fontified nil)) . 764) (764 . 765) (#("#" 0 1 (fontified nil)) . 764) (769 . 770) (764 . 765) (#(":" 0 1 (fontified nil)) . 763) (769 . 770) (#(")" 0 1 (fontified nil)) . -764) (738 . 757) (745 . 746) (#(")" 0 1 (fontified nil)) . -739) (738 . 740) (#("(" 0 1 (fontified nil)) . -738) (738 . 739)) nil (23727 48088 971037 979000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 737) (735 . 736) (#("#" 0 1 (fontified nil)) . 735) (733 . 734) (#("'" 0 1 (fontified nil)) . 733) (733 . 734) (#("#" 0 1 (fontified nil)) . 733) (735 . 736) (733 . 734) (#(":" 0 1 (fontified t)) . 732) (735 . 736) (#(")" 0 1 (fontified nil)) . -733) (708 . 727) (714 . 715) (#(")" 0 1 (fontified nil)) . -709) (708 . 710) (#("(" 0 1 (fontified nil)) . -708) (708 . 709)) nil (23727 48088 971062 590000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 707) (705 . 706) (#("#" 0 1 (fontified nil)) . 705) (703 . 704) (#("'" 0 1 (fontified nil)) . 703) (703 . 704) (#("#" 0 1 (fontified nil)) . 703) (705 . 706) (703 . 704) (#(":" 0 1 (fontified t)) . 702) (705 . 706) (#(")" 0 1 (fontified nil)) . -703) (675 . 694) (684 . 685) (#(")" 0 1 (fontified nil)) . -676) (675 . 677) (#("(" 0 1 (fontified nil)) . -675) (675 . 676)) nil (23727 48088 971087 288000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 674)) nil (23727 48088 971097 316000) 0 nil]) ((672 . 673) (#("#" 0 1 (fontified t face font-lock-string-face)) . 672)) nil (23727 48088 971102 332000) 0 nil]) ((666 . 667) (#("'" 0 1 (fontified t face racket-selfeval-face)) . 666) (666 . 667) (#("#" 0 1 (fontified t)) . 666)) nil (23727 48088 971109 139000) 0 nil]) ((672 . 673)) nil (23727 48088 971114 59000) 0 nil]) ((666 . 667)) nil (23727 48088 971117 557000) 0 nil]) ((#(":" 0 1 (fontified t)) . 665)) nil (23727 48088 971121 101000) 0 nil]) ((672 . 673) (#(")" 0 1 (fontified t)) . -666) (637 . 656) (647 . 648) (#(")" 0 1 (fontified t)) . -638) (637 . 639) (#("(" 0 1 (fontified nil)) . -637) (637 . 638)) nil (23727 48088 971131 568000) 0 nil]) ((nil rear-nonsticky nil 774 . 775) (nil fontified nil 637 . 775) (637 . 775)) nil (23727 48088 971138 886000) 0 nil]) ((#("position: fixed;
z-index: 1;
left: 0;
width: 100%;
padding: 0;
background-color: #4F82BB;
box-shadow: 0 3px 6px rgba(0, 0, 0, .3);
top: 0;" 0 63 (fontified t face font-lock-string-face) 63 85 (fontified t face font-lock-string-face) 85 87 (fontified t face font-lock-string-face) 87 88 (fontified t face font-lock-string-face) 88 90 (fontified t face font-lock-string-face) 90 119 (fontified t face font-lock-string-face) 119 125 (fontified t face font-lock-string-face) 125 131 (fontified t face font-lock-string-face) 131 138 (fontified t face font-lock-string-face)) . 708) (undo-tree-id449 . -137) (undo-tree-id450 . -137) (undo-tree-id451 . -137) (undo-tree-id452 . -137) (undo-tree-id453 . -137) 845) nil (23727 48088 971157 457000) 0 nil]) ((639 . 658) (#("                   " 0 19 (fontified nil)) . 638) (undo-tree-id454 . -19) (undo-tree-id455 . -19) (638 . 658) (#("                   " 0 19 (fontified nil)) . 637) (undo-tree-id456 . -19) (undo-tree-id457 . -19) (636 . 657)) nil (23727 48088 971176 81000) 0 nil]) ((#("()" 0 1 (fontified t) 1 2 (fontified t)) . 636) (undo-tree-id458 . 1)) nil (23727 48088 971184 475000) 0 nil]) ((#("                  " 0 18 (fontified nil)) . 637) (#("
" 0 1 (fontified t)) . -637) 635) nil (23727 48088 971190 254000) 0 nil]) ((#("  " 0 1 (fontified nil) 1 2 (fontified nil)) . 656) (undo-tree-id440 . -1) (637 . 658) (636 . 638) (#("(" 0 1 (fontified nil)) . 636) (636 . 637) (635 . 637) (#("(" 0 1 (fontified nil)) . 635) (634 . 636) (#("`" 0 1 (fontified nil)) . 634) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (620 . 635) (619 . 621) (#("(" 0 1 (fontified nil)) . 619) (607 . 620) (#("Btn_" 0 1 (fontified nil face font-lock-variable-name-face) 1 2 (fontified nil face font-lock-variable-name-face) 2 3 (fontified nil face font-lock-variable-name-face) 3 4 (fontified nil face font-lock-variable-name-face)) . 607) (undo-tree-id443 . -4) (undo-tree-id444 . -4) (597 . 611) (596 . 598) (#("(" 0 1 (fontified nil)) . 596) (595 . 597) (t 23727 47760 16204 378000)) ((#("
" 0 1 (fontified t)) . 595) (undo-tree-id238 . -1) (undo-tree-id239 . -1) (undo-tree-id240 . -1) (undo-tree-id241 . -1) (undo-tree-id242 . -1) (undo-tree-id243 . -1) (undo-tree-id244 . -1) (#("(" 0 1 (fontified nil)) . 596) (596 . 597) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 596) (undo-tree-id245 . 1) (undo-tree-id246 . 1) (undo-tree-id247 . 1) (undo-tree-id248 . -1) (undo-tree-id249 . 1) (undo-tree-id250 . 1) (undo-tree-id251 . 1) (undo-tree-id252 . 1) (undo-tree-id253 . 1) (undo-tree-id254 . 1) (undo-tree-id255 . -1) (undo-tree-id256 . 1) (undo-tree-id257 . 1) (undo-tree-id258 . -1) (undo-tree-id259 . 1) (undo-tree-id260 . 1) (undo-tree-id261 . 1) (undo-tree-id262 . 1) (undo-tree-id263 . 1) (undo-tree-id264 . 1) (undo-tree-id265 . 1) (undo-tree-id266 . 1) (undo-tree-id267 . -1) (undo-tree-id268 . 1) (undo-tree-id269 . 1) (undo-tree-id270 . -1) (undo-tree-id271 . 1) (undo-tree-id272 . 1) (undo-tree-id273 . -1) (undo-tree-id274 . -1) (undo-tree-id275 . 1) (undo-tree-id276 . 1) (undo-tree-id277 . 1) (undo-tree-id278 . 1) (#("define N" 0 6 (fontified nil face font-lock-keyword-face) 6 7 (fontified nil) 7 8 (fontified nil face font-lock-variable-name-face)) . 597) (undo-tree-id279 . -8) (undo-tree-id280 . -8) (undo-tree-id281 . -8) (undo-tree-id282 . -8) (undo-tree-id283 . -8) (undo-tree-id284 . -8) (undo-tree-id285 . -8) (#("avBtn_" 0 2 (fontified nil face font-lock-variable-name-face) 2 3 (fontified nil face font-lock-variable-name-face) 3 4 (fontified nil face font-lock-variable-name-face) 4 5 (fontified nil face font-lock-variable-name-face) 5 6 (fontified nil face font-lock-variable-name-face)) . 605) (undo-tree-id286 . -2) (undo-tree-id287 . -2) (undo-tree-id288 . -2) (undo-tree-id289 . -2) (undo-tree-id290 . -2) (undo-tree-id291 . -6) (undo-tree-id292 . -6) (607 . 611) (#("Bar_Style" 0 9 (fontified nil face font-lock-variable-name-face)) . 607) (undo-tree-id293 . -9) (undo-tree-id294 . -9) (undo-tree-id295 . -9) (undo-tree-id296 . -9) (undo-tree-id297 . -9) (undo-tree-id298 . -9) (undo-tree-id299 . -9) (#("
  " 0 1 (fontified t) 1 3 (fontified nil)) . 616) (undo-tree-id300 . -3) (undo-tree-id301 . -3) (undo-tree-id302 . -3) (undo-tree-id303 . -3) (undo-tree-id304 . -3) (undo-tree-id305 . -3) (undo-tree-id306 . -3) (#("(" 0 1 (fontified nil)) . 619) (619 . 620) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 619) (undo-tree-id307 . 1) (undo-tree-id308 . 1) (undo-tree-id309 . 1) (undo-tree-id310 . -1) (undo-tree-id311 . 1) (undo-tree-id312 . 1) (undo-tree-id313 . 1) (undo-tree-id314 . 1) (undo-tree-id315 . 1) (undo-tree-id316 . 1) (undo-tree-id317 . -1) (undo-tree-id318 . 1) (undo-tree-id319 . 1) (undo-tree-id320 . -1) (undo-tree-id321 . 1) (undo-tree-id322 . 1) (undo-tree-id323 . 1) (undo-tree-id324 . 1) (undo-tree-id325 . 1) (undo-tree-id326 . 1) (undo-tree-id327 . 1) (undo-tree-id328 . 1) (undo-tree-id329 . -1) (undo-tree-id330 . 1) (undo-tree-id331 . 1) (undo-tree-id332 . -1) (undo-tree-id333 . 1) (undo-tree-id334 . 1) (undo-tree-id335 . -1) (undo-tree-id336 . -1) (undo-tree-id337 . 1) (undo-tree-id338 . 1) (undo-tree-id339 . 1) (undo-tree-id340 . 1) (#("style 'NavBar `" 0 6 (fontified nil) 6 13 (fontified nil face racket-selfeval-face) 13 14 (fontified nil) 14 15 (fontified nil)) . 620) (undo-tree-id341 . -14) (undo-tree-id342 . -14) (undo-tree-id343 . -14) (undo-tree-id344 . -14) (undo-tree-id345 . -14) (undo-tree-id346 . -15) (undo-tree-id347 . -15) (634 . 635) (#("`(" 0 1 (fontified nil) 1 2 (fontified nil)) . 634) (undo-tree-id348 . -1) (undo-tree-id349 . -1) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (635 . 636) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 635) (undo-tree-id355 . 1) (undo-tree-id356 . 1) (undo-tree-id357 . 1) (undo-tree-id358 . -1) (undo-tree-id359 . 1) (undo-tree-id360 . 1) (undo-tree-id361 . 1) (undo-tree-id362 . 1) (undo-tree-id363 . 1) (undo-tree-id364 . 1) (undo-tree-id365 . -1) (undo-tree-id366 . 1) (undo-tree-id367 . 1) (undo-tree-id368 . -1) (undo-tree-id369 . 1) (undo-tree-id370 . 1) (undo-tree-id371 . 1) (undo-tree-id372 . 1) (undo-tree-id373 . 1) (undo-tree-id374 . 1) (undo-tree-id375 . 1) (undo-tree-id376 . 1) (undo-tree-id377 . -1) (undo-tree-id378 . 1) (undo-tree-id379 . 1) (undo-tree-id380 . -1) (undo-tree-id381 . 1) (undo-tree-id382 . 1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (undo-tree-id385 . 1) (undo-tree-id386 . 1) (undo-tree-id387 . 1) (undo-tree-id388 . 1) (#("(" 0 1 (fontified nil)) . 636) (636 . 637) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 636) (undo-tree-id389 . 1) (undo-tree-id390 . 1) (undo-tree-id391 . 1) (undo-tree-id392 . -1) (undo-tree-id393 . 1) (undo-tree-id394 . 1) (undo-tree-id395 . 1) (undo-tree-id396 . 1) (undo-tree-id397 . 1) (undo-tree-id398 . 1) (undo-tree-id399 . -1) (undo-tree-id400 . 1) (undo-tree-id401 . 1) (undo-tree-id402 . -1) (undo-tree-id403 . 1) (undo-tree-id404 . 1) (undo-tree-id405 . 1) (undo-tree-id406 . 1) (undo-tree-id407 . 1) (undo-tree-id408 . 1) (undo-tree-id409 . 1) (undo-tree-id410 . 1) (undo-tree-id411 . -1) (undo-tree-id412 . 1) (undo-tree-id413 . 1) (undo-tree-id414 . -1) (undo-tree-id415 . 1) (undo-tree-id416 . 1) (undo-tree-id417 . -1) (undo-tree-id418 . -1) (undo-tree-id419 . 1) (undo-tree-id420 . 1) (undo-tree-id421 . 1) (undo-tree-id422 . 1) (#("
                    " 0 1 (fontified t) 1 19 (fontified nil) 19 20 (fontified nil) 20 21 (fontified nil)) . 637) (undo-tree-id423 . -20) (undo-tree-id424 . -19) (undo-tree-id425 . -19) (undo-tree-id426 . 3) (undo-tree-id427 . 3) (undo-tree-id428 . -18) (undo-tree-id429 . 3) (undo-tree-id430 . 3) (undo-tree-id431 . -18) (undo-tree-id432 . 3) (undo-tree-id433 . 3) (undo-tree-id434 . -18) (undo-tree-id435 . -18) (undo-tree-id436 . 3) (undo-tree-id437 . 3) (undo-tree-id438 . 3) (undo-tree-id439 . 3) (656 . 658)) (23727 47948 318322 18000) 0 nil]) ((#("'" 0 1 (fontified t)) . 542) (undo-tree-id222 . 1)) nil (23727 47946 946582 839000) 0 nil]) ((550 . 551) (543 . 544) 545) nil (23727 47760 674 887000) 0 nil]) ((187 . 190)) nil (23727 47760 677 566000) 0 nil]) ((230 . 233)) nil (23727 47760 679 270000) 0 nil]) ((323 . 325)) nil (23727 47760 681 15000) 0 nil]) ((365 . 367)) nil (23727 47760 682 530000) 0 nil]) ((413 . 415)) nil (23727 47760 684 112000) 0 nil]) ((322 . 323)) nil (23727 47760 685 808000) 0 nil]) ((362 . 364)) nil (23727 47760 687 355000) 0 nil]) ((320 . 322)) nil (23727 47760 688 908000) 0 nil]) ((228 . 230) (t 23727 47682 731589 414000)) nil (23727 47760 690 812000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 322) (undo-tree-id218 . 1)) nil (23727 47682 722195 583000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 368) (undo-tree-id219 . 1)) nil (23727 47682 722201 731000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 412) (undo-tree-id220 . 1)) nil (23727 47682 722205 522000) 0 nil]) ((#(" " 0 1 (fontified t face font-lock-string-face)) . 458) (undo-tree-id221 . 1) (t 23727 47638 919410 471000)) nil (23727 47682 722209 85000) 0 nil]) ((453 . 455)) nil (23727 47638 901699 87000) 0 nil]) ((407 . 409)) nil (23727 47638 901709 809000) 0 nil]) ((358 . 360)) nil (23727 47638 901715 277000) 0 nil]) ((317 . 319)) nil (23727 47638 901718 797000) 0 nil] [nil nil ((319 . 321)) ((#(" ." 0 2 (fontified t face font-lock-string-face)) . 319) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (undo-tree-id215 . 1) (undo-tree-id216 . 1) (undo-tree-id217 . 1)) (23727 47631 126888 94000) 0 nil]) ((277 . 279)) nil (23727 47631 126969 920000) 0 nil]) ((227 . 229)) nil (23727 47631 126894 821000) 0 nil] [nil nil ((228 . 230)) ((#(" ." 0 2 (fontified t)) . 228) (undo-tree-id207 . 2) (undo-tree-id208 . 1) (undo-tree-id209 . 2) (undo-tree-id210 . 1) (undo-tree-id211 . 2) (undo-tree-id212 . 1)) (23727 47622 480769 157000) 0 nil] [nil nil ((229 . 231)) ((#(" ." 0 2 (fontified t face font-lock-string-face)) . 229) (undo-tree-id202 . -1) (undo-tree-id203 . -1) (undo-tree-id204 . 1) (undo-tree-id205 . 1) (undo-tree-id206 . 1)) (23727 47618 309566 94000) 0 nil]) ((186 . 188) (t 23727 47416 848473 263000)) nil (23727 47622 480987 68000) 0 nil]) ((1832 . 1837) (#("s" 0 1 (fontified nil)) . -1832) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . 1) (#("t" 0 1 (fontified nil)) . -1833) (undo-tree-id184 . -1) (undo-tree-id185 . -1) (undo-tree-id186 . 1) (#("y" 0 1 (fontified t)) . -1834) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (undo-tree-id189 . 1) 1835 (1828 . 1835) (#("Style" 0 5 (fontified t)) . 1828) (undo-tree-id190 . -5) (undo-tree-id191 . 5)) nil (23727 47416 829031 977000) 0 nil]) ((#("
" 0 1 (fontified t)) . 497) (undo-tree-id192 . 1) (undo-tree-id193 . 1) (undo-tree-id194 . 1) (undo-tree-id195 . 1) (undo-tree-id196 . 1) (undo-tree-id197 . 1)) nil (23727 47416 829061 382000) 0 nil]) ((#("
" 0 1 (fontified t)) . 497) (undo-tree-id198 . -1) (undo-tree-id199 . -1) (undo-tree-id200 . -1) (undo-tree-id201 . -1) (t 23727 47370 899627 617000)) nil (23727 47416 829077 464000) 0 nil]) ((515 . 522) (#("css" 0 3 (fontified t)) . 515) (undo-tree-id167 . 2) (undo-tree-id168 . 3) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . 2) (undo-tree-id173 . 3) (undo-tree-id174 . 2) (undo-tree-id175 . 3) 516) nil (23727 47370 877645 991000) 0 nil]) ((#("," 0 1 (fontified t)) . 515)) nil (23727 47370 877661 756000) 0 nil]) ((509 . 514) (#("style" 0 5 (fontified t)) . 509)) nil (23727 47370 877669 41000) 0 nil]) ((#("  ;(cons css \"\")
" 0 2 (fontified t) 2 3 (fontified t face font-lock-comment-delimiter-face) 3 17 (fontified t face font-lock-comment-face)) . 499) (undo-tree-id176 . -15) (undo-tree-id177 . -15) (undo-tree-id178 . 8) (undo-tree-id179 . -12) 514) nil (23727 47370 877684 519000) 0 nil]) ((409 . 429) (#(" " 0 1 (fontified t)) . 409)) nil (23727 47370 877691 112000) 0 nil]) ((409 . 410) (#("  " 0 2 (fontified nil)) . 409) (#("
" 0 1 (fontified t)) . -409) 370) nil (23727 47370 877697 326000) 0 nil]) ((408 . 409) (#(")" 0 1 (fontified t)) . -397) (368 . 387) (#("  " 0 2 (fontified nil)) . -368) (380 . 381) (#(")" 0 1 (fontified t)) . -371) (undo-tree-id180 . 1)) nil (23727 47370 877716 458000) 0 nil]) ((366 . 367) (#(")" 0 1 (fontified t)) . -350) (323 . 342) (#("  " 0 2 (fontified nil)) . -323) (333 . 334) (#(")" 0 1 (fontified t)) . -326)) nil (23727 47370 877726 34000) 0 nil]) ((321 . 322) (#(")" 0 1 (fontified t)) . -311) (285 . 304) (#("  " 0 2 (fontified nil)) . -285) (294 . 295) (#(")" 0 1 (fontified t)) . -288)) nil (23727 47370 877735 828000) 0 nil] [nil nil ((592 . 608) (#("         " 0 9 (fontified nil)) . -592) (563 . 579) (#("         " 0 9 (fontified t)) . -563) (532 . 543) (#("    " 0 4 (fontified t)) . -532) (506 . 517) (#("    " 0 4 (fontified t)) . -506) (455 . 464) (#("  " 0 2 (fontified t)) . -455) (undo-tree-id139 . -2) (585 . 586) (#(")" 0 1 (fontified t)) . -454) (565 . 574) (#("        " 0 8 (fontified nil)) . -565) (543 . 552) (#("        " 0 1 (fontified t) 1 8 (fontified t)) . -543) (519 . 523) (#("   " 0 3 (fontified t)) . -519) (500 . 504) (#("  " 0 2 (fontified t)) . -500) (456 . 458) (410 . 429) (#("  " 0 2 (fontified nil)) . -410) (368 . 387) (#("  " 0 2 (fontified t)) . -368) (323 . 342) (#("  " 0 2 (fontified t)) . -323) (285 . 304) (#("  " 0 2 (fontified t)) . -285) (undo-tree-id140 . -2) (undo-tree-id141 . -2) (511 . 512) (#(")" 0 1 (fontified t)) . -387) 287) ((387 . 388) (#(")" 0 1 (fontified nil)) . 511) (285 . 287) (#("                   " 0 19 (fontified t)) . 285) (undo-tree-id142 . 19) (undo-tree-id143 . 19) (undo-tree-id144 . 19) (undo-tree-id145 . 19) (undo-tree-id146 . 19) (undo-tree-id147 . 19) (undo-tree-id148 . -19) (undo-tree-id149 . 19) (undo-tree-id150 . 19) (undo-tree-id151 . 19) (undo-tree-id152 . 19) (undo-tree-id153 . 19) (undo-tree-id154 . 19) (undo-tree-id155 . 19) (undo-tree-id156 . 19) (undo-tree-id157 . -19) (undo-tree-id158 . 19) (undo-tree-id159 . 19) (323 . 325) (#("                   " 0 19 (fontified t)) . 323) (undo-tree-id160 . -19) (undo-tree-id161 . -19) (368 . 370) (#("                   " 0 19 (fontified t)) . 368) (undo-tree-id162 . -19) (undo-tree-id163 . -19) (410 . 412) (#("                   " 0 19 (fontified nil)) . 410) (undo-tree-id164 . -19) (undo-tree-id165 . -19) (#("  " 0 2 (fontified nil)) . 456) (undo-tree-id166 . -2) (500 . 502) (#("    " 0 4 (fontified nil)) . 500) (519 . 522) (#("    " 0 4 (fontified nil)) . 519) (543 . 551) (#("         " 0 9 (fontified nil)) . 543) (565 . 573) (#("         " 0 9 (fontified nil)) . 565) (454 . 455) (#(")" 0 1 (fontified nil)) . 585) (455 . 457) (#("         " 0 9 (fontified t)) . 455) (506 . 510) (#("           " 0 11 (fontified t)) . 506) (532 . 536) (#("           " 0 11 (fontified t)) . 532) (563 . 572) (#("                " 0 16 (fontified t)) . 563) (592 . 601) (#("                " 0 16 (fontified t)) . 592)) (23727 47292 372107 851000) 0 nil]) ((283 . 284) (#(")" 0 1 (fontified t)) . -273) (237 . 256) (#("  " 0 2 (fontified nil)) . -237) (256 . 257) (#(")" 0 1 (fontified t)) . -240)) nil (23727 47292 373195 617000) 0 nil] [nil nil ((565 . 574) (#("        " 0 8 (fontified nil)) . -565) (543 . 552) (#("        " 0 1 (fontified t) 1 8 (fontified t)) . -543) (519 . 523) (#("   " 0 3 (fontified t)) . -519) (500 . 504) (#("  " 0 2 (fontified t)) . -500) (456 . 458) (410 . 429) (#("  " 0 2 (fontified nil)) . -410) (undo-tree-id102 . -2) (undo-tree-id104 . -2) (368 . 387) (#("  " 0 2 (fontified t)) . -368) (undo-tree-id106 . -2) (undo-tree-id108 . -2) (323 . 342) (#("  " 0 2 (fontified t)) . -323) (undo-tree-id110 . -2) (undo-tree-id112 . -2) (undo-tree-id114 . -2) (285 . 304) (#("  " 0 2 (fontified t)) . -285) (undo-tree-id116 . -2) (undo-tree-id118 . -2) (undo-tree-id120 . -2) (237 . 256) (#("  " 0 2 (fontified t)) . -237) (undo-tree-id122 . -2) (undo-tree-id124 . -2) (undo-tree-id126 . -2) (494 . 495) (#(")" 0 1 (fontified t)) . -370) 257) ((370 . 371) (#(")" 0 1 (fontified nil)) . 494) (237 . 239) (#("                   " 0 19 (fontified t)) . 237) (285 . 287) (#("                   " 0 19 (fontified t)) . 285) (323 . 325) (#("                   " 0 19 (fontified t)) . 323) (368 . 370) (#("                   " 0 19 (fontified t)) . 368) (410 . 412) (#("                   " 0 19 (fontified t)) . 410) (#("  " 0 2 (fontified t)) . 456) (500 . 502) (#("    " 0 4 (fontified t)) . 500) (519 . 522) (#("    " 0 4 (fontified t)) . 519) (543 . 551) (#("         " 0 9 (fontified t)) . 543) (565 . 573) (#("         " 0 9 (fontified t)) . 565)) (23727 47282 679947 546000) 0 nil]) ((235 . 236) (#(")" 0 1 (fontified t)) . -225) (undo-tree-id127 . 1) (undo-tree-id128 . -1) (199 . 218) (#("  " 0 2 (fontified nil)) . -199) (undo-tree-id129 . -2) (undo-tree-id130 . -2) (208 . 209) (#(")" 0 1 (fontified t)) . -202)) nil (23727 47282 775445 405000) 0 nil]) ((302 . 304) (#("(" 0 1 (fontified nil)) . -302) (302 . 303)) nil (23727 47282 679985 978000) 0 nil]) ((274 . 276) (#("(" 0 1 (fontified nil)) . -274) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (274 . 275)) nil (23727 47282 679996 203000) 0 nil]) ((253 . 255) (#("(" 0 1 (fontified nil)) . -253) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (253 . 254)) nil (23727 47282 680006 482000) 0 nil]) ((222 . 224) (#("(" 0 1 (fontified nil)) . -222) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (222 . 223)) nil (23727 47282 680016 221000) 0 nil]) ((201 . 203) (#("(" 0 1 (fontified nil)) . -201) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (201 . 202)) nil (23727 47282 773724 464000) 0 nil]) ((197 . 198) (#("r" 0 1 (fontified t)) . 197)) nil (23727 47282 773737 162000) 0 nil]) ((197 . 198)) nil (23727 47282 773743 304000) 0 nil]) ((316 . 317) (#("s" 0 1 (fontified t)) . 316)) nil (23727 47282 773749 167000) 0 nil]) ((316 . 317)) nil (23727 47282 773753 661000) 0 nil] [nil ([nil nil ((197 . 227) (#(" " 0 1 (fontified t)) . 197) (undo-tree-id44 . 1) (undo-tree-id45 . 1) (undo-tree-id46 . 1) (undo-tree-id47 . 1) (undo-tree-id48 . 1)) ((197 . 198) (#("
                             " 0 30 (fontified t)) . 197) (undo-tree-id77 . 30) (undo-tree-id78 . -30) (undo-tree-id79 . 30) (undo-tree-id80 . -30) (undo-tree-id81 . 30) (undo-tree-id82 . -30) (undo-tree-id83 . -30) (undo-tree-id84 . 30) (undo-tree-id85 . 30)) (23727 47229 11609 355000) 0 nil]) ((197 . 198) (#("  " 0 2 (fontified nil)) . 197) (#("
" 0 1 (fontified t)) . -197) 178) ((197 . 198) (197 . 199) (#(" " 0 1 (fontified t)) . 197) (undo-tree-id86 . 1) (undo-tree-id87 . 1) (undo-tree-id88 . 1) (undo-tree-id89 . 1) (undo-tree-id90 . 1) (undo-tree-id91 . 1) (undo-tree-id92 . 1) (undo-tree-id93 . 1) (undo-tree-id94 . 1) (undo-tree-id95 . 1) (undo-tree-id96 . 1) (undo-tree-id97 . 1) (undo-tree-id98 . 1) (undo-tree-id99 . 1) (undo-tree-id100 . 1)) (23727 47229 12265 541000) 0 nil]) ((#("  " 0 2 (fontified nil)) . 178) (undo-tree-id49 . 2) (#("
" 0 1 (fontified t)) . -178) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (undo-tree-id52 . -1) (undo-tree-id53 . 1) 177) nil (23727 47229 984310 110000) 0 nil]) ((#("
" 0 1 (fontified t)) . -177) (undo-tree-id54 . -1) (undo-tree-id55 . 1) (undo-tree-id56 . -1) (undo-tree-id57 . 1) (undo-tree-id58 . 1) (undo-tree-id59 . -1) (undo-tree-id60 . -1) (undo-tree-id61 . -1) 158) nil (23727 47229 11673 609000) 0 nil]) ((177 . 178)) nil (23727 47229 11679 632000) 0 nil]) ((#("                    " 0 20 (fontified nil)) . 341) (#("
" 0 1 (fontified t)) . -341) 332) nil (23727 47229 11685 586000) 0 nil]) ((340 . 341) (333 . 334) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -333) 332) nil (23727 47229 11692 953000) 0 nil]) ((315 . 316) (308 . 309) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -308) 307) nil (23727 47229 11700 186000) 0 nil]) ((292 . 293) (285 . 286) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -285) 279) nil (23727 47229 11707 387000) 0 nil]) ((266 . 267) (260 . 261) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -260) 259) nil (23727 47229 11714 442000) 0 nil]) ((#(";" 0 1 (rear-nonsticky t fontified t face font-lock-comment-delimiter-face)) . 337) (330 . 331) (328 . 329) (":" . 327)) nil (23727 47229 11721 352000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 313) (306 . 307) (304 . 305) (#(":" 0 1 (fontified t)) . 303)) nil (23727 47229 11729 331000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 291) (284 . 285) (277 . 278) (#(":" 0 1 (fontified t)) . 276)) nil (23727 47229 11737 119000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 266) (260 . 261) (258 . 259) (#(":" 0 1 (fontified t)) . 257)) nil (23727 47229 11744 569000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 248) (247 . 248) (239 . 240) (#(":" 0 1 (fontified t)) . 238)) nil (23727 47229 11752 239000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 219)) nil (23727 47229 11756 817000) 0 nil]) ((218 . 219) (210 . 211)) nil (23727 47229 11761 954000) 0 nil]) ((#(":" 0 1 (fontified t)) . 209)) nil (23727 47229 11765 476000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 200)) nil (23727 47229 11769 234000) 0 nil]) ((199 . 200) (190 . 191)) nil (23727 47229 11773 954000) 0 nil]) ((189 . 190)) nil (23727 47229 11777 685000) 0 nil]) ((#(": " 0 2 (fontified t)) . 189)) nil (23727 47229 11780 835000) 0 nil]) ((179 . 181)) nil (23727 47229 11784 381000) 0 nil]) ((nil rear-nonsticky nil 334 . 335) (nil fontified nil 179 . 335) (179 . 335)) nil (23727 47229 11789 416000) 0 nil]) ((#("position: relative;
  cursor: pointer;
  background-color: inherit;
  height: 1.25em;
  display: inline-block;
  font-size: 1.382em;
  line-height: 1.382em;" 0 156 (fontified t face font-lock-string-face)) . 133) (undo-tree-id62 . -155) (undo-tree-id63 . -155) (undo-tree-id64 . -155) (undo-tree-id65 . -155) (undo-tree-id66 . -155) 288) nil (23727 47229 11806 359000) 0 nil]) ((#("                    " 0 20 (fontified t)) . -335) (undo-tree-id67 . -20) (undo-tree-id68 . -20) 355 (335 . 355) (335 . 336) 354) nil (23727 47229 11829 185000) 0 nil]) ((334 . 355) (#("p" 0 1 (fontified t)) . -334) (undo-tree-id69 . -1) (undo-tree-id70 . -1) (#("o" 0 1 (fontified t)) . -335) (undo-tree-id71 . -1) (undo-tree-id72 . -1) (#("s" 0 1 (fontified t)) . -336) (undo-tree-id73 . -1) (undo-tree-id74 . -1) 337 (334 . 337) (333 . 335) (#("(" 0 1 (fontified nil)) . -333) (333 . 334) (332 . 334) (#("(" 0 1 (fontified nil)) . -332) (331 . 333) (324 . 331) (317 . 324) (316 . 318) (#("(" 0 1 (fontified nil)) . -316) (316 . 317) (313 . 316) (308 . 313) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -308) (undo-tree-id75 . -1) (undo-tree-id76 . -1) 309 (294 . 309) (293 . 295) (#("(" 0 1 (fontified nil)) . -293) (293 . 294) (292 . 293) 292) nil (23727 47229 11875 522000) 0 nil]) ((#("  (hash-set! NavStyle class \"
  position: relative;
  cursor: pointer;
  background-color: inherit;
  height: 1.25em;
  display: inline-block;
  font-size: 1.382em;
  line-height: 1.382em;\")" 0 2 (fontified t) 2 3 (fontified t) 3 12 (fontified t face font-lock-builtin-face) 12 22 (fontified t) 22 27 (fontified t face font-lock-builtin-face) 27 28 (fontified t) 28 63 (fontified t face font-lock-string-face) 63 71 (fontified t face font-lock-string-face) 71 152 (fontified t face font-lock-string-face) 152 165 (fontified t face font-lock-string-face) 165 189 (fontified t face font-lock-string-face) 189 190 (fontified t)) . 334)) nil (23727 47229 11888 926000) 0 nil]) ((#("  (define class (number->string(random 100000000)))" 0 3 (fontified t) 3 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 15 (fontified t face font-lock-variable-name-face) 15 17 (fontified t) 17 31 (fontified t face font-lock-builtin-face) 31 32 (fontified t) 32 38 (fontified t face font-lock-builtin-face) 38 39 (fontified t) 39 48 (fontified t face racket-selfeval-face) 48 51 (fontified t)) . 333)) nil (23727 47229 11892 570000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil nil ((#("`(li ((style ,css))
        ,btn-content
        ,@children)" 0 20 (fontified t) 20 21 (fontified t) 21 41 (fontified t) 41 60 (fontified t)) . 164) (undo-tree-id0 . 60) (undo-tree-id1 . 60) (undo-tree-id2 . 60) (undo-tree-id3 . -14) (undo-tree-id4 . -17) (undo-tree-id5 . -59) (undo-tree-id6 . -60) (undo-tree-id7 . -18) (undo-tree-id8 . -19) (undo-tree-id9 . -17) (undo-tree-id10 . -18) (undo-tree-id11 . -6) (undo-tree-id12 . -7) (undo-tree-id13 . -5) (undo-tree-id14 . -6) (undo-tree-id15 . -1) (undo-tree-id16 . -2) (undo-tree-id17 . -60) (undo-tree-id18 . -60) (undo-tree-id19 . -60) (undo-tree-id20 . -59) (undo-tree-id21 . -60) (undo-tree-id22 . -18) (undo-tree-id23 . -19) (undo-tree-id24 . -17) (undo-tree-id25 . -18) (undo-tree-id26 . -6) (undo-tree-id27 . -7) (undo-tree-id28 . -5) (undo-tree-id29 . -6) (undo-tree-id30 . -1) (undo-tree-id31 . -2)) ((164 . 224)) (23727 47005 155460 327000) 0 nil]) ((#("  ;(cons css \"\")
" 0 2 (fontified t) 2 3 (fontified t face font-lock-comment-delimiter-face) 3 17 (fontified t face font-lock-comment-face)) . 161) (undo-tree-id32 . -1) (undo-tree-id33 . -1) 162) ((161 . 178)) (23727 47005 156102 522000) 0 nil]) ((#("  (define class (number->string(random 100000000)))
" 0 3 (fontified t) 3 9 (fontified t face font-lock-keyword-face) 9 10 (fontified t) 10 15 (fontified t face font-lock-variable-name-face) 15 17 (fontified t) 17 31 (fontified t face font-lock-builtin-face) 31 32 (fontified t) 32 38 (fontified t face font-lock-builtin-face) 38 39 (fontified t) 39 48 (fontified t face racket-selfeval-face) 48 52 (fontified t)) . 158) (undo-tree-id34 . -1) (undo-tree-id35 . -1) 159) ((158 . 210)) (23727 47011 941036 247000) 0 nil]) ((#("(hash-set! NavStyle class \"
  position: relative;
  cursor: pointer;
  background-color: inherit;
  height: 1.25em;
  display: inline-block;
  font-size: 1.382em;
  line-height: 1.382em;\")" 0 1 (fontified t) 1 10 (fontified t face font-lock-builtin-face) 10 20 (fontified t) 20 25 (fontified t face font-lock-builtin-face) 25 26 (fontified t) 26 61 (fontified t face font-lock-string-face) 61 69 (fontified t face font-lock-string-face) 69 150 (fontified t face font-lock-string-face) 150 163 (fontified t face font-lock-string-face) 163 187 (fontified t face font-lock-string-face) 187 188 (fontified t)) . 212)) ((212 . 400)) (23727 47012 887081 494000) 0 nil]) ((#("
" 0 1 (fontified t)) . 117)) ((117 . 118)) (23727 47013 833176 461000) 0 nil]) ((#("(define css \"
  position: relative;
  cursor: pointer;
  background-color: inherit;
  height: 1.25em;
  display: inline-block;
  font-size: 1.382em;
  line-height: 1.382em;\")" 0 1 (fontified t) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 11 (fontified t face font-lock-variable-name-face) 11 12 (fontified t) 12 173 (fontified t face font-lock-string-face) 173 174 (fontified t)) . 117)) ((117 . 291)) (23727 47021 296689 805000) 0 nil]) ((#("(define NavStyle (make-hash))" 0 1 (fontified t) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 16 (fontified t face font-lock-variable-name-face) 16 18 (fontified t) 18 27 (fontified t face font-lock-builtin-face) 27 29 (fontified t)) . 116)) nil (23727 47022 232649 19000) 0 nil]) ((#(";(define (styled el) (curry el ((class \"tom\"))))
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 49 (fontified t face font-lock-comment-face)) . 116) (undo-tree-id36 . -21) (undo-tree-id37 . -21) (undo-tree-id38 . 32) (undo-tree-id39 . -19) 137) nil (23727 47005 155544 280000) 0 nil]) ((100 . 112) (#("../u" 0 4 (fontified t face font-lock-string-face)) . -100) (undo-tree-id40 . -4) (undo-tree-id41 . -4) 104 (100 . 104) (99 . 101) (#("\"" 0 1 (fontified nil)) . -99) (99 . 100) (#("." 0 1 (fontified t)) . -99) (undo-tree-id42 . -1) (undo-tree-id43 . -1) 100 (95 . 100) (91 . 95) (90 . 92) (#("(" 0 1 (fontified nil)) . -90) (90 . 91) (89 . 90) (t 23726 2016 113902 411000) 64) nil (23727 47005 155579 279000) 0 nil]) nil nil (23727 47005 155588 610000) 0 nil] #3# 26748 229 nil)