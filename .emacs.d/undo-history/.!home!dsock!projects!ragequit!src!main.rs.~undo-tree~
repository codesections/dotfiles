"be0239bacc5e69aec78ad3578a84d2fa72f14a08"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#3=[nil nil ((6728 . 6735) (6724 . 6728) (#("ADDRESS" 0 7 (fontified t face font-lock-string-face)) . 6724) (t 23765 6192 283570 219000)) nil (23765 6919 720938 564000) 0 nil]) ((6820 . 6829) (6816 . 6820) (#("h" 0 1 (fontified t face font-lock-string-face)) . -6816) (undo-tree-id743 . -1) (#("a" 0 1 (fontified t face font-lock-string-face)) . -6817) (undo-tree-id744 . -1) (#("r" 0 1 (fontified t syntax-table #2=(15) face font-lock-string-face)) . -6818) (undo-tree-id745 . -1) 6819 (6816 . 6819) (6815 . 6817) (#("\"" 0 1 (fontified nil)) . -6815) (6815 . 6816)) nil (23765 6192 177000 300000) 0 nil]) ((6808 . 6814) (#("unwrap" 0 6 (fontified t)) . 6808) (undo-tree-id746 . -4) (undo-tree-id747 . -6) (undo-tree-id748 . -6) (undo-tree-id749 . -6) (undo-tree-id750 . -5) (undo-tree-id751 . -6) (undo-tree-id752 . -4) (undo-tree-id753 . -5) (undo-tree-id754 . -6) (undo-tree-id755 . -4) (undo-tree-id756 . -4) 6812 (t 23765 6176 310296 906000)) nil (23765 6192 177048 868000) 0 nil]) ((1 . 6872) (#("//! Streaming server for Mastodon
//!
//!
//! This server provides live, streaming updates for Mastodon clients.  Specifically, when a server
//! is running this sever, Mastodon clients can use either Server Sent Events or WebSockets to
//! connect to the server with the API described [in the public API
//! documentation](https://docs.joinmastodon.org/api/streaming/)
//!
//! # Notes on data flow
//! * **Client Request → Warp**:
//! Warp filters for valid requests and parses request data. Based on that data, it generates a `User`
//! representing the client that made the request.  The `User` is authenticated, if appropriate.  Warp
//! repeatedly polls the StreamManager for information relevant to the User.
//!
//! * **Warp → StreamManager**:
//! A new `StreamManager` is created for each request.  The `StreamManager` exists to manage concurrent
//! access to the (single) `Receiver`, which it can access behind an `Arc<Mutex>`.  The `StreamManager`
//! polles the `Receiver` for any updates relvant to the current client.  If there are updates, the
//! `StreamManager` filters them with the client's filters and passes any matching updates up to Warp.
//! The `StreamManager` is also responsible for sending `subscribe` commands to Redis (via the
//! `Receiver`) when necessary.
//!
//! * **StreamManger → Receiver**:
//! The Receiver receives data from Redis and stores it in a series of queues (one for each
//! StreamManager). When (asynchronously) polled by the StreamManager, it sends back the  messages
//! relevant to that StreamManager and removes them from the queue.

pub mod error;
pub mod query;
pub mod receiver;
pub mod redis_cmd;
pub mod stream;
pub mod timeline;
pub mod user;
pub mod ws;
use std::net::SocketAddr;
use dotenv::dotenv;
use futures::stream::Stream;
use futures::Async;
use receiver::Receiver;
use std::env;
use stream::StreamManager;
use user::{Scope, User};
use warp::path;
use warp::Filter as WarpFilter;

fn main() {
    pretty_env_logger::init();
    dotenv().ok();

    let redis_updates = StreamManager::new(Receiver::new());
    let redis_updates_sse = redis_updates.blank_copy();
    let redis_updates_ws = redis_updates.blank_copy();

    let routes = any_of!(
        // GET /api/v1/streaming/user/notification                     [private; notification filter]
        timeline::user_notifications(),
        // GET /api/v1/streaming/user                                  [private; language filter]
        timeline::user(),
        // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
        timeline::public_local_media(),
        // GET /api/v1/streaming/public?only_media=true                [public; language filter]
        timeline::public_media(),
        // GET /api/v1/streaming/public/local                          [public; language filter]
        timeline::public_local(),
        // GET /api/v1/streaming/public                                [public; language filter]
        timeline::public(),
        // GET /api/v1/streaming/direct                                [private; *no* filter]
        timeline::direct(),
        // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
        timeline::hashtag(),
        // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
        timeline::hashtag_local(),
        // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
        timeline::list()
    )
    .untuple_one()
    .and(warp::sse())
    .map(move |timeline: String, user: User, sse: warp::sse::Sse| {
        let mut redis_stream = redis_updates_sse.configure_copy(&timeline, user);
        let event_stream = tokio::timer::Interval::new(
            std::time::Instant::now(),
            std::time::Duration::from_millis(100),
        )
        .filter_map(move |_| match redis_stream.poll() {
            Ok(Async::Ready(Some(json_value))) => Some((
                warp::sse::event(json_value[\"event\"].clone().to_string()),
                warp::sse::data(json_value[\"payload\"].clone()),
            )),
            _ => None,
        });
        sse.reply(warp::sse::keep(event_stream, None))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    //let redis_updates_ws = StreamManager::new(Receiver::new());
    let websocket = path!(\"api\" / \"v1\" / \"streaming\")
        .and(Scope::Public.get_access_token())
        .and_then(|token| User::from_access_token(token, Scope::Public))
        .and(warp::query())
        .and(query::Media::to_filter())
        .and(query::Hashtag::to_filter())
        .and(query::List::to_filter())
        .and(warp::ws2())
        .and_then(
            move |mut user: User,
                  q: query::Stream,
                  m: query::Media,
                  h: query::Hashtag,
                  l: query::List,
                  ws: warp::ws::Ws2| {
                let unauthorized = Err(warp::reject::custom(\"Error: Invalid Access Token\"));
                let timeline = match q.stream.as_ref() {
                    // Public endpoints:
                    tl @ \"public\" | tl @ \"public:local\" if m.is_truthy() => format!(\"{}:media\", tl),
                    tl @ \"public:media\" | tl @ \"public:local:media\" => tl.to_string(),
                    tl @ \"public\" | tl @ \"public:local\" => tl.to_string(),
                    // User
                    \"user\" if user.id == -1 => return unauthorized,
                    \"user\" => format!(\"{}\", user.id),
                    \"user:notification\" => {
                        user = user.with_notification_filter();
                        format!(\"{}\", user.id)
                    }
                    // Hashtag endpoints:
                    // TODO: handle missing query
                    tl @ \"hashtag\" | tl @ \"hashtag:local\" => format!(\"{}:{}\", tl, h.tag),
                    // List endpoint:
                    // TODO: handle missing query
                    \"list\" if user.authorized_for_list(l.list).is_err() => return unauthorized,
                    \"list\" => format!(\"list:{}\", l.list),
                    // Direct endpoint:
                    \"direct\" if user.id == -1 => return unauthorized,
                    \"direct\" => \"direct\".to_string(),
                    // Other endpoints don't exist:
                    _ => return Err(warp::reject::custom(\"Error: Nonexistent WebSocket query\")),
                };
                let stream = redis_updates_ws.configure_copy(&timeline, user);

                Ok(ws.on_upgrade(move |socket| ws::send_replies(socket, stream)))
            },
        );

    let address: SocketAddr = env::var(\"ADDRESS\").unwrap_or(\"127.0.0.1:4000\".to_owned()).parse().unwrap();
    warp::serve(websocket.or(routes)).run(address);
}
" 0 34 (fontified t face font-lock-doc-face) 34 38 (fontified t face font-lock-doc-face) 38 42 (fontified t face font-lock-doc-face) 42 142 (fontified t face font-lock-doc-face) 142 237 (fontified t face font-lock-doc-face) 237 305 (fontified t face font-lock-doc-face) 305 370 (fontified t face font-lock-doc-face) 370 374 (fontified t face font-lock-doc-face) 374 399 (fontified t face font-lock-doc-face) 399 432 (fontified t face font-lock-doc-face) 432 500 (fontified t face font-lock-doc-face) 500 535 (fontified t face font-lock-doc-face) 535 638 (fontified t face font-lock-doc-face) 638 715 (fontified t face font-lock-doc-face) 715 719 (fontified t face font-lock-doc-face) 719 751 (fontified t face font-lock-doc-face) 751 855 (fontified t face font-lock-doc-face) 855 928 (fontified t face font-lock-doc-face) 928 929 (fontified t syntax-table #1=(1) face font-lock-doc-face) 929 934 (fontified t face font-lock-doc-face) 934 935 (fontified t syntax-table #1# face font-lock-doc-face) 935 959 (fontified t face font-lock-doc-face) 959 1035 (fontified t face font-lock-doc-face) 1035 1059 (fontified t face font-lock-doc-face) 1059 1162 (fontified t face font-lock-doc-face) 1162 1257 (fontified t face font-lock-doc-face) 1257 1289 (fontified t face font-lock-doc-face) 1289 1293 (fontified t face font-lock-doc-face) 1293 1328 (fontified t face font-lock-doc-face) 1328 1420 (fontified t face font-lock-doc-face) 1420 1519 (fontified t face font-lock-doc-face) 1519 1559 (fontified t face font-lock-doc-face) 1559 1587 (fontified t face font-lock-doc-face) 1587 1588 (fontified t) 1588 1591 (fontified t face font-lock-keyword-face) 1591 1592 (fontified t) 1592 1595 (fontified t face font-lock-keyword-face) 1595 1596 (fontified t) 1596 1601 (fontified t face font-lock-constant-face) 1601 1603 (fontified t) 1603 1606 (fontified t face font-lock-keyword-face) 1606 1607 (fontified t) 1607 1610 (fontified t face font-lock-keyword-face) 1610 1611 (fontified t) 1611 1616 (fontified t face font-lock-constant-face) 1616 1618 (fontified t) 1618 1621 (fontified t face font-lock-keyword-face) 1621 1622 (fontified t) 1622 1625 (fontified t face font-lock-keyword-face) 1625 1626 (fontified t) 1626 1634 (fontified t face font-lock-constant-face) 1634 1636 (fontified t) 1636 1639 (fontified t face font-lock-keyword-face) 1639 1640 (fontified t) 1640 1643 (fontified t face font-lock-keyword-face) 1643 1644 (fontified t) 1644 1653 (fontified t face font-lock-constant-face) 1653 1655 (fontified t) 1655 1658 (fontified t face font-lock-keyword-face) 1658 1659 (fontified t) 1659 1662 (fontified t face font-lock-keyword-face) 1662 1663 (fontified t) 1663 1669 (fontified t face font-lock-constant-face) 1669 1671 (fontified t) 1671 1674 (fontified t face font-lock-keyword-face) 1674 1675 (fontified t) 1675 1678 (fontified t face font-lock-keyword-face) 1678 1679 (fontified t) 1679 1687 (fontified t face font-lock-constant-face) 1687 1689 (fontified t) 1689 1692 (fontified t face font-lock-keyword-face) 1692 1693 (fontified t) 1693 1696 (fontified t face font-lock-keyword-face) 1696 1697 (fontified t) 1697 1701 (fontified t face font-lock-constant-face) 1701 1703 (fontified t) 1703 1704 (fontified t face font-lock-keyword-face) 1704 1706 (fontified t face font-lock-keyword-face) 1706 1707 (fontified t) 1707 1710 (fontified t face font-lock-keyword-face) 1710 1711 (fontified t) 1711 1713 (fontified t face font-lock-constant-face) 1713 1714 (fontified t) 1714 1715 (fontified t) 1715 1718 (fontified t face font-lock-keyword-face) 1718 1719 (fontified t) 1719 1722 (fontified t face font-lock-constant-face) 1722 1724 (fontified t) 1724 1727 (fontified t face font-lock-constant-face) 1727 1729 (fontified t) 1729 1739 (fontified t face font-lock-type-face) 1739 1740 (fontified t) 1740 1741 (fontified t) 1741 1744 (fontified t face font-lock-keyword-face) 1744 1745 (fontified t) 1745 1751 (fontified t face font-lock-constant-face) 1751 1761 (fontified t) 1761 1764 (fontified t face font-lock-keyword-face) 1764 1765 (fontified t) 1765 1772 (fontified t face font-lock-constant-face) 1772 1774 (fontified t) 1774 1780 (fontified t face font-lock-constant-face) 1780 1782 (fontified t) 1782 1788 (fontified t face font-lock-type-face) 1788 1790 (fontified t) 1790 1793 (fontified t face font-lock-keyword-face) 1793 1794 (fontified t) 1794 1801 (fontified t face font-lock-constant-face) 1801 1803 (fontified t) 1803 1808 (fontified t face font-lock-type-face) 1808 1810 (fontified t) 1810 1813 (fontified t face font-lock-keyword-face) 1813 1814 (fontified t) 1814 1822 (fontified t face font-lock-constant-face) 1822 1824 (fontified t) 1824 1832 (fontified t face font-lock-type-face) 1832 1834 (fontified t) 1834 1837 (fontified t face font-lock-keyword-face) 1837 1838 (fontified t) 1838 1841 (fontified t face font-lock-constant-face) 1841 1848 (fontified t) 1848 1851 (fontified t face font-lock-keyword-face) 1851 1852 (fontified t) 1852 1858 (fontified t face font-lock-constant-face) 1858 1860 (fontified t) 1860 1873 (fontified t face font-lock-type-face) 1873 1875 (fontified t) 1875 1878 (fontified t face font-lock-keyword-face) 1878 1879 (fontified t) 1879 1883 (fontified t face font-lock-constant-face) 1883 1886 (fontified t) 1886 1891 (fontified t face font-lock-type-face) 1891 1893 (fontified t) 1893 1897 (fontified t face font-lock-type-face) 1897 1900 (fontified t) 1900 1903 (fontified t face font-lock-keyword-face) 1903 1904 (fontified t) 1904 1908 (fontified t face font-lock-constant-face) 1908 1916 (fontified t) 1916 1919 (fontified t face font-lock-keyword-face) 1919 1920 (fontified t) 1920 1924 (fontified t face font-lock-constant-face) 1924 1926 (fontified t) 1926 1932 (fontified t face font-lock-type-face) 1932 1933 (fontified t) 1933 1935 (fontified t face font-lock-keyword-face) 1935 1936 (fontified t) 1936 1946 (fontified t face font-lock-type-face) 1946 1949 (fontified t) 1949 1951 (fontified t face font-lock-keyword-face) 1951 1952 (fontified t) 1952 1956 (fontified t face font-lock-function-name-face) 1956 1965 (fontified t) 1965 1982 (fontified t face font-lock-constant-face) 1982 2016 (fontified t) 2016 2019 (fontified t face font-lock-keyword-face) 2019 2020 (fontified t) 2020 2033 (fontified t face font-lock-variable-name-face) 2033 2036 (fontified t) 2036 2049 (fontified t face font-lock-type-face) 2049 2055 (fontified t) 2055 2063 (fontified t face font-lock-type-face) 2063 2077 (fontified t) 2077 2080 (fontified t face font-lock-keyword-face) 2080 2081 (fontified t) 2081 2098 (fontified t face font-lock-variable-name-face) 2098 2113 (fontified t) 2113 2129 (fontified t) 2129 2133 (fontified t) 2133 2136 (fontified t face font-lock-keyword-face) 2136 2137 (fontified t) 2137 2153 (fontified t face font-lock-variable-name-face) 2153 2189 (fontified t) 2189 2192 (fontified t face font-lock-keyword-face) 2192 2193 (fontified t) 2193 2199 (fontified t face font-lock-variable-name-face) 2199 2202 (fontified t) 2202 2208 (fontified t face font-lock-preprocessor-face) 2208 2209 (fontified t face font-lock-preprocessor-face) 2209 2211 (fontified t) 2211 2219 (fontified t) 2219 2222 (fontified t face font-lock-comment-delimiter-face) 2222 2241 (fontified t face font-lock-comment-face) 2241 2313 (face font-lock-comment-face fontified t) 3944 3945 (syntax-table #1#) 4123 4124 (syntax-table #1#) 4657 4670 (fontified t) 4670 4675 (fontified t face font-lock-constant-face) 4675 4677 (fontified t) 4677 4681 (fontified t face font-lock-type-face) 4681 4709 (fontified t) 4709 4713 (fontified t face font-lock-constant-face) 4713 4753 (fontified t) 4753 4757 (fontified t face font-lock-keyword-face) 4757 4759 (fontified t) 4759 4762 (fontified t face font-lock-keyword-face) 4762 4763 (fontified t) 4763 4767 (fontified t face font-lock-variable-name-face) 4767 4769 (fontified t) 4769 4773 (fontified t face font-lock-type-face) 4773 4793 (fontified t) 4793 4794 (fontified t face font-lock-variable-name-face) 4794 4796 (fontified t) 4796 4801 (fontified t face font-lock-constant-face) 4801 4803 (fontified t) 4803 4809 (fontified t face font-lock-type-face) 4809 4829 (fontified t) 4829 4830 (fontified t face font-lock-variable-name-face) 4830 4832 (fontified t) 4832 4837 (fontified t face font-lock-constant-face) 4837 4839 (fontified t) 4839 4844 (fontified t face font-lock-type-face) 4844 4864 (fontified t) 4864 4865 (fontified t face font-lock-variable-name-face) 4865 4867 (fontified t) 4867 4872 (fontified t face font-lock-constant-face) 4872 4874 (fontified t) 4874 4881 (fontified t face font-lock-type-face) 4881 4901 (fontified t) 4901 4902 (fontified t face font-lock-variable-name-face) 4902 4904 (fontified t) 4904 4909 (fontified t face font-lock-constant-face) 4909 4911 (fontified t) 4911 4915 (fontified t face font-lock-type-face) 4915 4935 (fontified t) 4935 4937 (fontified t face font-lock-variable-name-face) 4937 4939 (fontified t) 4939 4943 (fontified t face font-lock-constant-face) 4943 4945 (fontified t) 4945 4947 (fontified t face font-lock-constant-face) 4947 4949 (fontified t) 4949 4952 (fontified t face font-lock-type-face) 4952 4972 (fontified t) 4972 4975 (fontified t face font-lock-keyword-face) 4975 4976 (fontified t) 4976 4988 (fontified t face font-lock-variable-name-face) 4988 4991 (fontified t) 4991 4994 (fontified t face font-lock-type-face) 4994 4995 (fontified t) 4995 4999 (fontified t face font-lock-constant-face) 4999 5001 (fontified t) 5001 5007 (fontified t face font-lock-constant-face) 5007 5016 (fontified t) 5016 5045 (fontified t face font-lock-string-face) 5045 5065 (fontified t) 5065 5068 (fontified t face font-lock-keyword-face) 5068 5069 (fontified t) 5069 5077 (fontified t face font-lock-variable-name-face) 5077 5080 (fontified t) 5080 5085 (fontified t face font-lock-keyword-face) 5085 5126 (fontified t) 5126 5129 (fontified t face font-lock-comment-delimiter-face) 5129 5147 (fontified t face font-lock-comment-face) 5147 5157 (fontified t) 5157 5172 (fontified t) 5172 5180 (face font-lock-string-face fontified t) 5180 5188 (fontified t) 5188 5202 (face font-lock-string-face fontified t) 5202 5203 (fontified t) 5203 5205 (face font-lock-keyword-face fontified t) 5205 5221 (fontified t) 5221 5222 (syntax-table #1# fontified t) 5222 5223 (fontified t) 5223 5230 (face rust-builtin-formatting-macro-face fontified t) 5230 5231 (fontified t) 5231 5232 (face font-lock-string-face fontified t) 5232 5234 (face rust-string-interpolation-face fontified t) 5234 5241 (face font-lock-string-face fontified t) 5241 5248 (fontified t) 5248 5273 (fontified t) 5273 5287 (fontified t face font-lock-string-face) 5287 5295 (fontified t) 5295 5315 (fontified t face font-lock-string-face) 5315 5317 (fontified t) 5317 5318 (syntax-table #1# fontified t) 5318 5360 (fontified t) 5360 5368 (fontified t face font-lock-string-face) 5368 5376 (fontified t) 5376 5390 (fontified t face font-lock-string-face) 5390 5392 (fontified t) 5392 5393 (syntax-table #1# fontified t) 5393 5430 (fontified t) 5430 5433 (fontified t face font-lock-comment-delimiter-face) 5433 5438 (fontified t face font-lock-comment-face) 5438 5458 (fontified t) 5458 5462 (fontified t face font-lock-string-face) 5462 5463 (syntax-table #2# fontified t face font-lock-string-face) 5463 5464 (fontified t face font-lock-string-face) 5464 5465 (fontified t) 5465 5467 (fontified t face font-lock-keyword-face) 5467 5483 (fontified t) 5483 5484 (syntax-table #1# fontified t) 5484 5485 (fontified t) 5485 5491 (fontified t face font-lock-keyword-face) 5491 5506 (fontified t) 5506 5526 (fontified t) 5526 5530 (fontified t face font-lock-string-face) 5530 5531 (syntax-table #2# fontified t face font-lock-string-face) 5531 5532 (fontified t face font-lock-string-face) 5532 5534 (fontified t) 5534 5535 (syntax-table #1# fontified t) 5535 5536 (fontified t) 5536 5543 (fontified t face rust-builtin-formatting-macro-face) 5543 5544 (fontified t) 5544 5545 (fontified t face font-lock-string-face) 5545 5547 (fontified t face rust-string-interpolation-face) 5547 5548 (fontified t face font-lock-string-face) 5548 5560 (fontified t) 5560 5580 (fontified t) 5580 5599 (fontified t face font-lock-string-face) 5599 5601 (fontified t) 5601 5602 (syntax-table #1# fontified t) 5602 5605 (fontified t) 5605 5693 (fontified t) 5693 5700 (fontified t face rust-builtin-formatting-macro-face) 5700 5701 (fontified t) 5701 5702 (fontified t face font-lock-string-face) 5702 5704 (fontified t face rust-string-interpolation-face) 5704 5705 (fontified t face font-lock-string-face) 5705 5748 (fontified t) 5748 5758 (fontified t) 5758 5761 (face font-lock-comment-delimiter-face fontified t) 5761 5780 (face font-lock-comment-face fontified t) 5780 5800 (fontified t) 5800 5803 (fontified t face font-lock-comment-delimiter-face) 5803 5830 (fontified t face font-lock-comment-face) 5830 5855 (fontified t) 5855 5864 (fontified t face font-lock-string-face) 5864 5872 (fontified t) 5872 5887 (fontified t face font-lock-string-face) 5887 5889 (fontified t) 5889 5890 (syntax-table #1# fontified t) 5890 5891 (fontified t) 5891 5898 (fontified t face rust-builtin-formatting-macro-face) 5898 5899 (fontified t) 5899 5900 (fontified t face font-lock-string-face) 5900 5902 (fontified t face rust-string-interpolation-face) 5902 5903 (fontified t face font-lock-string-face) 5903 5905 (fontified t face rust-string-interpolation-face) 5905 5906 (fontified t face font-lock-string-face) 5906 5940 (fontified t) 5940 5943 (fontified t face font-lock-comment-delimiter-face) 5943 5958 (fontified t face font-lock-comment-face) 5958 5978 (fontified t) 5978 5981 (fontified t face font-lock-comment-delimiter-face) 5981 6008 (fontified t face font-lock-comment-face) 6008 6028 (fontified t) 6028 6034 (fontified t face font-lock-string-face) 6034 6035 (fontified t) 6035 6037 (fontified t face font-lock-keyword-face) 6037 6060 (fontified t) 6060 6081 (fontified t) 6081 6082 (syntax-table #1# fontified t) 6082 6083 (fontified t) 6083 6089 (fontified t face font-lock-keyword-face) 6089 6104 (fontified t) 6104 6105 (fontified t) 6105 6124 (fontified t) 6124 6130 (fontified t face font-lock-string-face) 6130 6132 (fontified t) 6132 6133 (syntax-table #1# fontified t) 6133 6134 (fontified t) 6134 6141 (fontified t face rust-builtin-formatting-macro-face) 6141 6142 (fontified t) 6142 6148 (fontified t face font-lock-string-face) 6148 6150 (fontified t face rust-string-interpolation-face) 6150 6151 (fontified t face font-lock-string-face) 6151 6162 (fontified t) 6162 6182 (fontified t) 6182 6185 (fontified t face font-lock-comment-delimiter-face) 6185 6202 (fontified t face font-lock-comment-face) 6202 6222 (fontified t) 6222 6230 (fontified t face font-lock-string-face) 6230 6231 (fontified t) 6231 6233 (fontified t face font-lock-keyword-face) 6233 6249 (fontified t) 6249 6250 (syntax-table #1# fontified t) 6250 6251 (fontified t) 6251 6257 (fontified t face font-lock-keyword-face) 6257 6272 (fontified t) 6272 6280 (fontified t) 6280 6292 (fontified t) 6292 6300 (face font-lock-string-face fontified t) 6300 6302 (fontified t) 6302 6303 (syntax-table #1# fontified t) 6303 6304 (fontified t) 6304 6312 (face font-lock-string-face fontified t) 6312 6325 (fontified t) 6325 6326 (fontified t) 6326 6346 (fontified t) 6346 6349 (fontified t face font-lock-comment-delimiter-face) 6349 6378 (fontified t face font-lock-comment-face) 6378 6401 (fontified t) 6401 6402 (syntax-table #1# fontified t) 6402 6403 (fontified t) 6403 6409 (fontified t face font-lock-keyword-face) 6409 6410 (fontified t) 6410 6413 (fontified t face font-lock-type-face) 6413 6414 (fontified t) 6414 6418 (fontified t face font-lock-constant-face) 6418 6420 (fontified t) 6420 6426 (fontified t face font-lock-constant-face) 6426 6435 (fontified t) 6435 6471 (fontified t face font-lock-string-face) 6471 6510 (fontified t) 6510 6513 (fontified t face font-lock-keyword-face) 6513 6514 (fontified t) 6514 6520 (fontified t face font-lock-variable-name-face) 6520 6590 (fontified t) 6590 6592 (fontified t face font-lock-type-face) 6592 6604 (fontified t) 6604 6607 (fontified t) 6607 6611 (fontified t face font-lock-keyword-face) 6611 6621 (fontified t) 6621 6623 (fontified t face font-lock-constant-face) 6623 6656 (fontified t) 6656 6683 (fontified t) 6683 6687 (fontified t) 6687 6690 (fontified t face font-lock-keyword-face) 6690 6691 (fontified t) 6691 6698 (fontified t face font-lock-variable-name-face) 6698 6700 (fontified t) 6700 6710 (fontified t face font-lock-type-face) 6710 6711 (fontified t) 6711 6713 (fontified t) 6713 6716 (fontified t face font-lock-constant-face) 6716 6722 (fontified t) 6722 6731 (fontified t face font-lock-string-face) 6731 6743 (fontified t) 6743 6759 (fontified t face font-lock-string-face) 6759 6768 (fontified t) 6768 6770 (fontified t) 6770 6786 (fontified t) 6786 6788 (fontified t) 6788 6789 (fontified t) 6789 6790 (fontified t) 6790 6794 (fontified t) 6794 6798 (fontified t face font-lock-constant-face) 6798 6836 (fontified t) 6836 6842 (fontified t) 6842 6844 (fontified t)) . 1) (undo-tree-id684 . -1718) (undo-tree-id685 . -1715) (undo-tree-id686 . -1739) (undo-tree-id687 . 134) (undo-tree-id688 . -6711) (undo-tree-id689 . -6711) (undo-tree-id690 . -1704) (undo-tree-id691 . -1715) (undo-tree-id692 . -1718) (undo-tree-id693 . -1718) (undo-tree-id694 . -6844) (undo-tree-id695 . -1718) (undo-tree-id696 . -4657) (undo-tree-id697 . -6844) (undo-tree-id698 . -1718) (undo-tree-id699 . -4657) (undo-tree-id700 . -6844) (undo-tree-id701 . -4657) (undo-tree-id702 . -6844) (undo-tree-id703 . -6709) (undo-tree-id704 . -6698) (undo-tree-id705 . -6698) (undo-tree-id706 . -6698) (undo-tree-id707 . -6698) (undo-tree-id708 . -6691) (undo-tree-id709 . -6698) (undo-tree-id710 . -6700) (undo-tree-id711 . -6711) (undo-tree-id712 . -1719) (undo-tree-id713 . -1739) (undo-tree-id714 . -6700) (undo-tree-id715 . -6700) (undo-tree-id716 . -4657) (undo-tree-id717 . -6700) (undo-tree-id718 . -6700) (undo-tree-id719 . -1719) (undo-tree-id720 . -1722) (undo-tree-id721 . -6700) (undo-tree-id722 . -6700) (undo-tree-id723 . -1719) (undo-tree-id724 . -1739) (undo-tree-id725 . -6710) (undo-tree-id726 . -6700) (undo-tree-id727 . -4657) (undo-tree-id728 . -6709) (undo-tree-id729 . -6709) (undo-tree-id730 . -4657) 6710) nil (23765 6176 219181 425000) 0 nil]) ((6701 . 6711) (#("Soc" 0 3 (fontified t face font-lock-type-face)) . -6701) (undo-tree-id731 . -3) (undo-tree-id732 . -1) (undo-tree-id733 . -3) (undo-tree-id734 . -3) (undo-tree-id735 . -3) (undo-tree-id736 . -3) (undo-tree-id737 . -1) (undo-tree-id738 . -2) 6704 (6700 . 6704)) nil (23765 6176 219196 239000) 0 nil]) ((#(" " 0 1 (fontified t)) . 6699) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (t 23765 6161 607018 724000)) nil (23765 6176 219202 834000) 0 nil]) ((1716 . 1720) (t 23765 6157 327034 769000)) nil (23765 6161 511720 422000) 0 nil]) (1736) nil (23765 6161 511725 969000) 0 nil]) ((#(" " 0 1 (fontified t rear-nonsticky t)) . 1736) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (undo-tree-id665 . -1) (undo-tree-id666 . -1) (undo-tree-id667 . -1) (undo-tree-id668 . -1) (undo-tree-id669 . -1) (undo-tree-id670 . -1) (undo-tree-id671 . -1) (undo-tree-id672 . -1) (undo-tree-id673 . -1) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (t 23765 6154 97046 872000)) nil (23765 6157 235923 338000) 0 nil]) ((1737 . 1738) (t 23765 6151 320390 600000)) nil (23765 6154 7345 422000) 0 nil]) ((nil rear-nonsticky nil 1736 . 1737) (nil fontified nil 1716 . 1737) (1716 . 1737)) nil (23765 6151 223628 693000) 0 nil]) ((1715 . 1716) 1704) nil (23765 6151 223635 424000) 0 nil] [nil nil ((nil rear-nonsticky nil 1725 . 1726) (nil fontified nil 1705 . 1726) (1705 . 1726) 1704) ((#("std::net::SocketAddr " 0 3 (fontified nil face font-lock-constant-face) 3 5 (fontified nil) 5 8 (fontified nil face font-lock-constant-face) 8 10 (fontified nil) 10 20 (fontified nil face font-lock-type-face) 20 21 (fontified nil rear-nonsticky nil)) . 1705) (undo-tree-id649 . -20) (undo-tree-id650 . -20) (undo-tree-id651 . -20) (undo-tree-id652 . -21) (undo-tree-id653 . -21) (nil rear-nonsticky t 1725 . 1726)) (23765 6148 934306 949000) 0 nil]) ((#("std::net::SocketAddr " 0 3 (fontified t face font-lock-constant-face) 3 5 (fontified t) 5 8 (fontified t face font-lock-constant-face) 8 10 (fontified t) 10 20 (fontified t face font-lock-type-face) 20 21 (fontified t)) . 6676) (undo-tree-id647 . 1) (undo-tree-id648 . -3)) nil (23765 6148 938037 628000) 0 nil] [nil nil ((#("std::net::SocketAddr = env::var(\"ADDRESS\").unwrap_or(\"127.0.0.1:4000\".to_owned()).parse().unwrap();" 0 3 (fontified t face font-lock-constant-face) 3 5 (fontified t) 5 8 (fontified t face font-lock-constant-face) 8 10 (fontified t) 10 20 (fontified t face font-lock-type-face) 20 23 (fontified t) 23 26 (fontified t face font-lock-constant-face) 26 32 (fontified t) 32 41 (fontified t face font-lock-string-face) 41 53 (fontified t) 53 69 (fontified t face font-lock-string-face) 69 78 (fontified t) 78 80 (fontified t) 80 96 (fontified t) 96 98 (fontified t) 98 99 (fontified t)) . 6676) (undo-tree-id636 . 79) (undo-tree-id637 . -16) (undo-tree-id638 . -17) (undo-tree-id639 . -16) (undo-tree-id640 . -16) (undo-tree-id641 . -1) (undo-tree-id642 . -3)) ((6676 . 6775)) (23765 6141 614265 771000) 0 nil]) ((6686 . 6696) (#("So" 0 2 (fontified t face font-lock-type-face)) . -6686) (undo-tree-id643 . -2) 6688 (6686 . 6688) (#("Ipv4Addr" 0 8 (fontified t face font-lock-type-face)) . 6686) (undo-tree-id644 . -7) 6693) nil (23765 6141 616630 989000) 0 nil]) ((6686 . 6694) (6684 . 6686) (6681 . 6684) (#("n" 0 1 (fontified t)) . -6681) (undo-tree-id645 . -1) (undo-tree-id646 . -1) 6682 (6681 . 6682)) nil (23765 6141 614289 656000) 0 nil]) ((6674 . 6682)) nil (23765 6141 614294 163000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 6751) (6750 . 6751) (6749 . 6751) (#("(" 0 1 (fontified nil)) . -6749) (6742 . 6750)) nil (23765 6141 614299 477000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 6733) (6732 . 6733) (6731 . 6733) (#("(" 0 1 (fontified nil)) . -6731) (6722 . 6732) (t 23765 6023 757531 259000)) nil (23765 6141 614306 290000) 0 nil]) ((1 . 6787) (#("//! Streaming server for Mastodon
//!
//!
//! This server provides live, streaming updates for Mastodon clients.  Specifically, when a server
//! is running this sever, Mastodon clients can use either Server Sent Events or WebSockets to
//! connect to the server with the API described [in the public API
//! documentation](https://docs.joinmastodon.org/api/streaming/)
//!
//! # Notes on data flow
//! * **Client Request → Warp**:
//! Warp filters for valid requests and parses request data. Based on that data, it generates a `User`
//! representing the client that made the request.  The `User` is authenticated, if appropriate.  Warp
//! repeatedly polls the StreamManager for information relevant to the User.
//!
//! * **Warp → StreamManager**:
//! A new `StreamManager` is created for each request.  The `StreamManager` exists to manage concurrent
//! access to the (single) `Receiver`, which it can access behind an `Arc<Mutex>`.  The `StreamManager`
//! polles the `Receiver` for any updates relvant to the current client.  If there are updates, the
//! `StreamManager` filters them with the client's filters and passes any matching updates up to Warp.
//! The `StreamManager` is also responsible for sending `subscribe` commands to Redis (via the
//! `Receiver`) when necessary.
//!
//! * **StreamManger → Receiver**:
//! The Receiver receives data from Redis and stores it in a series of queues (one for each
//! StreamManager). When (asynchronously) polled by the StreamManager, it sends back the  messages
//! relevant to that StreamManager and removes them from the queue.

pub mod error;
pub mod query;
pub mod receiver;
pub mod redis_cmd;
pub mod stream;
pub mod timeline;
pub mod user;
pub mod ws;
use dotenv::dotenv;
use futures::stream::Stream;
use futures::Async;
use receiver::Receiver;
use std::env;
use stream::StreamManager;
use user::{Scope, User};
use warp::path;
use warp::Filter as WarpFilter;

fn main() {
    pretty_env_logger::init();
    dotenv().ok();

    let redis_updates = StreamManager::new(Receiver::new());
    let redis_updates_sse = redis_updates.blank_copy();
    let redis_updates_ws = redis_updates.blank_copy();

    let routes = any_of!(
        // GET /api/v1/streaming/user/notification                     [private; notification filter]
        timeline::user_notifications(),
        // GET /api/v1/streaming/user                                  [private; language filter]
        timeline::user(),
        // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
        timeline::public_local_media(),
        // GET /api/v1/streaming/public?only_media=true                [public; language filter]
        timeline::public_media(),
        // GET /api/v1/streaming/public/local                          [public; language filter]
        timeline::public_local(),
        // GET /api/v1/streaming/public                                [public; language filter]
        timeline::public(),
        // GET /api/v1/streaming/direct                                [private; *no* filter]
        timeline::direct(),
        // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
        timeline::hashtag(),
        // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
        timeline::hashtag_local(),
        // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
        timeline::list()
    )
    .untuple_one()
    .and(warp::sse())
    .map(move |timeline: String, user: User, sse: warp::sse::Sse| {
        let mut redis_stream = redis_updates_sse.configure_copy(&timeline, user);
        let event_stream = tokio::timer::Interval::new(
            std::time::Instant::now(),
            std::time::Duration::from_millis(100),
        )
        .filter_map(move |_| match redis_stream.poll() {
            Ok(Async::Ready(Some(json_value))) => Some((
                warp::sse::event(json_value[\"event\"].clone().to_string()),
                warp::sse::data(json_value[\"payload\"].clone()),
            )),
            _ => None,
        });
        sse.reply(warp::sse::keep(event_stream, None))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    //let redis_updates_ws = StreamManager::new(Receiver::new());
    let websocket = path!(\"api\" / \"v1\" / \"streaming\")
        .and(Scope::Public.get_access_token())
        .and_then(|token| User::from_access_token(token, Scope::Public))
        .and(warp::query())
        .and(query::Media::to_filter())
        .and(query::Hashtag::to_filter())
        .and(query::List::to_filter())
        .and(warp::ws2())
        .and_then(
            move |mut user: User,
                  q: query::Stream,
                  m: query::Media,
                  h: query::Hashtag,
                  l: query::List,
                  ws: warp::ws::Ws2| {
                let unauthorized = Err(warp::reject::custom(\"Error: Invalid Access Token\"));
                let timeline = match q.stream.as_ref() {
                    // Public endpoints:
                    tl @ \"public\" | tl @ \"public:local\" if m.is_truthy() => format!(\"{}:media\", tl),
                    tl @ \"public:media\" | tl @ \"public:local:media\" => tl.to_string(),
                    tl @ \"public\" | tl @ \"public:local\" => tl.to_string(),
                    // User
                    \"user\" if user.id == -1 => return unauthorized,
                    \"user\" => format!(\"{}\", user.id),
                    \"user:notification\" => {
                        user = user.with_notification_filter();
                        format!(\"{}\", user.id)
                    }
                    // Hashtag endpoints:
                    // TODO: handle missing query
                    tl @ \"hashtag\" | tl @ \"hashtag:local\" => format!(\"{}:{}\", tl, h.tag),
                    // List endpoint:
                    // TODO: handle missing query
                    \"list\" if user.authorized_for_list(l.list).is_err() => return unauthorized,
                    \"list\" => format!(\"list:{}\", l.list),
                    // Direct endpoint:
                    \"direct\" if user.id == -1 => return unauthorized,
                    \"direct\" => \"direct\".to_string(),
                    // Other endpoints don't exist:
                    _ => return Err(warp::reject::custom(\"Error: Nonexistent WebSocket query\")),
                };
                let stream = redis_updates_ws.configure_copy(&timeline, user);

                Ok(ws.on_upgrade(move |socket| ws::send_replies(socket, stream)))
            },
        );

    
    let address = env::var(\"ADDRESS\").unwrap_or(\"127.0.0.1:4000\").parse();
    warp::serve(websocket.or(routes)).run(address);
}
" 0 34 (fontified t face font-lock-doc-face) 34 38 (fontified t face font-lock-doc-face) 38 42 (fontified t face font-lock-doc-face) 42 142 (fontified t face font-lock-doc-face) 142 237 (fontified t face font-lock-doc-face) 237 305 (fontified t face font-lock-doc-face) 305 370 (fontified t face font-lock-doc-face) 370 374 (fontified t face font-lock-doc-face) 374 399 (fontified t face font-lock-doc-face) 399 432 (fontified t face font-lock-doc-face) 432 500 (fontified t face font-lock-doc-face) 500 535 (fontified t face font-lock-doc-face) 535 638 (fontified t face font-lock-doc-face) 638 715 (fontified t face font-lock-doc-face) 715 719 (fontified t face font-lock-doc-face) 719 751 (fontified t face font-lock-doc-face) 751 855 (fontified t face font-lock-doc-face) 855 928 (fontified t face font-lock-doc-face) 928 929 (fontified t syntax-table #1# face font-lock-doc-face) 929 934 (fontified t face font-lock-doc-face) 934 935 (fontified t syntax-table #1# face font-lock-doc-face) 935 959 (fontified t face font-lock-doc-face) 959 1058 (face font-lock-doc-face) 1058 1059 (face font-lock-doc-face) 1059 1162 (face font-lock-doc-face) 1162 1257 (face font-lock-doc-face) 1257 1289 (face font-lock-doc-face) 1289 1293 (face font-lock-doc-face) 1293 1328 (face font-lock-doc-face) 1328 1420 (fontified t face font-lock-doc-face) 1420 1519 (fontified t face font-lock-doc-face) 1519 1558 (fontified t face font-lock-doc-face) 1558 1587 (fontified t face font-lock-doc-face) 1587 1588 (fontified t) 1588 1591 (fontified t face font-lock-keyword-face) 1591 1592 (fontified t) 1592 1595 (fontified t face font-lock-keyword-face) 1595 1596 (fontified t) 1596 1601 (fontified t face font-lock-constant-face) 1601 1603 (fontified t) 1603 1606 (fontified t face font-lock-keyword-face) 1606 1607 (fontified t) 1607 1610 (fontified t face font-lock-keyword-face) 1610 1611 (fontified t) 1611 1616 (fontified t face font-lock-constant-face) 1616 1618 (fontified t) 1618 1621 (fontified t face font-lock-keyword-face) 1621 1622 (fontified t) 1622 1625 (fontified t face font-lock-keyword-face) 1625 1626 (fontified t) 1626 1634 (fontified t face font-lock-constant-face) 1634 1636 (fontified t) 1636 1639 (fontified t face font-lock-keyword-face) 1639 1640 (fontified t) 1640 1643 (fontified t face font-lock-keyword-face) 1643 1644 (fontified t) 1644 1653 (fontified t face font-lock-constant-face) 1653 1655 (fontified t) 1655 1658 (fontified t face font-lock-keyword-face) 1658 1659 (fontified t) 1659 1662 (fontified t face font-lock-keyword-face) 1662 1663 (fontified t) 1663 1669 (fontified t face font-lock-constant-face) 1669 1671 (fontified t) 1671 1674 (fontified t face font-lock-keyword-face) 1674 1675 (fontified t) 1675 1678 (fontified t face font-lock-keyword-face) 1678 1679 (fontified t) 1679 1687 (fontified t face font-lock-constant-face) 1687 1689 (fontified t) 1689 1692 (fontified t face font-lock-keyword-face) 1692 1693 (fontified t) 1693 1696 (fontified t face font-lock-keyword-face) 1696 1697 (fontified t) 1697 1701 (fontified t face font-lock-constant-face) 1701 1703 (fontified t) 1703 1706 (fontified t face font-lock-keyword-face) 1706 1707 (fontified t) 1707 1710 (fontified t face font-lock-keyword-face) 1710 1711 (fontified t) 1711 1713 (fontified t face font-lock-constant-face) 1713 1715 (fontified t) 1715 1718 (fontified t face font-lock-keyword-face) 1718 1719 (fontified t) 1719 1725 (fontified t face font-lock-constant-face) 1725 1735 (fontified t) 1735 1738 (fontified t face font-lock-keyword-face) 1738 1739 (fontified t) 1739 1746 (fontified t face font-lock-constant-face) 1746 1748 (fontified t) 1748 1754 (fontified t face font-lock-constant-face) 1754 1756 (fontified t) 1756 1762 (fontified t face font-lock-type-face) 1762 1764 (fontified t) 1764 1767 (fontified t face font-lock-keyword-face) 1767 1768 (fontified t) 1768 1775 (fontified t face font-lock-constant-face) 1775 1777 (fontified t) 1777 1782 (fontified t face font-lock-type-face) 1782 1784 (fontified t) 1784 1787 (fontified t face font-lock-keyword-face) 1787 1788 (fontified t) 1788 1796 (fontified t face font-lock-constant-face) 1796 1798 (fontified t) 1798 1806 (fontified t face font-lock-type-face) 1806 1808 (fontified t) 1808 1811 (fontified t face font-lock-keyword-face) 1811 1812 (fontified t) 1812 1815 (fontified t face font-lock-constant-face) 1815 1822 (fontified t) 1822 1825 (fontified t face font-lock-keyword-face) 1825 1826 (fontified t) 1826 1832 (fontified t face font-lock-constant-face) 1832 1834 (fontified t) 1834 1847 (fontified t face font-lock-type-face) 1847 1849 (fontified t) 1849 1852 (fontified t face font-lock-keyword-face) 1852 1853 (fontified t) 1853 1857 (fontified t face font-lock-constant-face) 1857 1860 (fontified t) 1860 1865 (fontified t face font-lock-type-face) 1865 1867 (fontified t) 1867 1871 (fontified t face font-lock-type-face) 1871 1874 (fontified t) 1874 1877 (fontified t face font-lock-keyword-face) 1877 1878 (fontified t) 1878 1882 (fontified t face font-lock-constant-face) 1882 1890 (fontified t) 1890 1893 (fontified t face font-lock-keyword-face) 1893 1894 (fontified t) 1894 1898 (fontified t face font-lock-constant-face) 1898 1900 (fontified t) 1900 1906 (fontified t face font-lock-type-face) 1906 1907 (fontified t) 1907 1909 (fontified t face font-lock-keyword-face) 1909 1910 (fontified t) 1910 1920 (fontified t face font-lock-type-face) 1920 1922 (fontified t) 1922 1923 (fontified t) 1923 1925 (fontified t face font-lock-keyword-face) 1925 1926 (fontified t) 1926 1930 (fontified t face font-lock-function-name-face) 1930 1939 (fontified t) 1939 1956 (fontified t face font-lock-constant-face) 1956 1966 (fontified t) 1966 1984 (fontified t) 1984 1985 (fontified t) 1985 1986 (fontified t) 1986 1990 (fontified t) 1990 1993 (fontified t face font-lock-keyword-face) 1993 1994 (fontified t) 1994 2007 (fontified t face font-lock-variable-name-face) 2007 2010 (fontified t) 2010 2023 (fontified t face font-lock-type-face) 2023 2029 (fontified t) 2029 2037 (fontified t face font-lock-type-face) 2037 2051 (fontified t) 2051 2054 (fontified t face font-lock-keyword-face) 2054 2055 (fontified t) 2055 2072 (fontified t face font-lock-variable-name-face) 2072 2107 (fontified t) 2107 2110 (fontified t face font-lock-keyword-face) 2110 2111 (fontified t) 2111 2127 (fontified t face font-lock-variable-name-face) 2127 2163 (fontified t) 2163 2166 (fontified t face font-lock-keyword-face) 2166 2167 (fontified t) 2167 2173 (fontified t face font-lock-variable-name-face) 2173 2176 (fontified t) 2176 2183 (fontified t face font-lock-preprocessor-face) 2183 2193 (fontified t) 2193 2196 (fontified t face font-lock-comment-delimiter-face) 2196 2287 (fontified t face font-lock-comment-face) 2287 2295 (fontified t) 2295 2303 (fontified t face font-lock-constant-face) 2303 2335 (fontified t) 2335 2338 (fontified t face font-lock-comment-delimiter-face) 2338 2422 (fontified t face font-lock-comment-face) 2422 2425 (fontified t face font-lock-comment-face) 2425 2433 (fontified t) 2433 2441 (fontified t face font-lock-constant-face) 2441 2459 (fontified t) 2459 2462 (fontified t face font-lock-comment-delimiter-face) 2462 2484 (fontified t face font-lock-comment-face) 2484 2485 (fontified t face font-lock-comment-face) 2485 2486 (fontified t face font-lock-comment-face) 2486 2548 (face font-lock-comment-face fontified t) 2548 2556 (fontified t) 2556 2564 (fontified t face font-lock-constant-face) 2564 2596 (fontified t) 2596 2599 (fontified t face font-lock-comment-delimiter-face) 2599 2685 (fontified t face font-lock-comment-face) 2685 2693 (fontified t) 2693 2701 (fontified t face font-lock-constant-face) 2701 2727 (fontified t) 2727 2730 (fontified t face font-lock-comment-delimiter-face) 2730 2816 (fontified t face font-lock-comment-face) 2816 2824 (fontified t) 2824 2832 (fontified t face font-lock-constant-face) 2832 2858 (fontified t) 2858 2861 (fontified t face font-lock-comment-delimiter-face) 2861 2925 (fontified t face font-lock-comment-face) 2925 2947 (fontified t face font-lock-comment-face) 2947 2955 (fontified t) 2955 2963 (fontified t face font-lock-constant-face) 2963 2983 (fontified t) 2983 2986 (fontified t face font-lock-comment-delimiter-face) 2986 3048 (fontified t face font-lock-comment-face) 3048 3069 (face font-lock-comment-face fontified t) 3069 3077 (fontified t) 3077 3085 (fontified t face font-lock-constant-face) 3085 3105 (fontified t) 3105 3108 (fontified t face font-lock-comment-delimiter-face) 3108 3188 (fontified t face font-lock-comment-face) 3188 3196 (fontified t) 3196 3204 (fontified t face font-lock-constant-face) 3204 3225 (fontified t) 3225 3228 (fontified t face font-lock-comment-delimiter-face) 3228 3308 (fontified t face font-lock-comment-face) 3308 3316 (fontified t) 3316 3324 (fontified t face font-lock-constant-face) 3324 3351 (fontified t) 3351 3354 (fontified t face font-lock-comment-delimiter-face) 3354 3435 (fontified t face font-lock-comment-face) 3435 3443 (fontified t) 3443 3447 (fontified t face font-lock-constant-face) 3447 3451 (fontified t face font-lock-constant-face) 3451 3460 (fontified t) 3460 3494 (fontified t) 3494 3498 (fontified t face font-lock-constant-face) 3498 3516 (fontified t) 3516 3520 (fontified t face font-lock-keyword-face) 3520 3522 (fontified t) 3522 3530 (fontified t face font-lock-variable-name-face) 3530 3532 (fontified t) 3532 3538 (fontified t face font-lock-type-face) 3538 3540 (fontified t) 3540 3544 (fontified t face font-lock-variable-name-face) 3544 3546 (fontified t) 3546 3550 (fontified t face font-lock-type-face) 3550 3552 (fontified t) 3552 3555 (fontified t face font-lock-variable-name-face) 3555 3557 (fontified t) 3557 3561 (fontified t face font-lock-constant-face) 3561 3563 (fontified t) 3563 3566 (fontified t face font-lock-constant-face) 3566 3568 (fontified t) 3568 3569 (fontified t face font-lock-type-face) 3569 3571 (face font-lock-type-face fontified t) 3571 3575 (fontified t) 3575 3583 (fontified t) 3583 3586 (fontified t face font-lock-keyword-face) 3586 3587 (fontified t) 3587 3590 (fontified t face font-lock-keyword-face) 3590 3591 (fontified t) 3591 3603 (fontified t face font-lock-variable-name-face) 3603 3665 (fontified t) 3665 3668 (fontified t face font-lock-keyword-face) 3668 3669 (fontified t) 3669 3681 (fontified t face font-lock-variable-name-face) 3681 3684 (fontified t) 3684 3689 (fontified t face font-lock-constant-face) 3689 3691 (fontified t) 3691 3696 (fontified t face font-lock-constant-face) 3696 3698 (fontified t) 3698 3706 (fontified t face font-lock-type-face) 3706 3725 (fontified t) 3725 3728 (fontified t face font-lock-constant-face) 3728 3730 (fontified t) 3730 3734 (fontified t face font-lock-constant-face) 3734 3736 (fontified t) 3736 3743 (fontified t face font-lock-type-face) 3743 3764 (fontified t) 3764 3767 (fontified t face font-lock-constant-face) 3767 3769 (fontified t) 3769 3773 (fontified t face font-lock-constant-face) 3773 3775 (fontified t) 3775 3783 (fontified t face font-lock-type-face) 3783 3833 (fontified t) 3833 3837 (fontified t face font-lock-keyword-face) 3837 3842 (fontified t) 3842 3847 (fontified t face font-lock-keyword-face) 3847 3882 (fontified t) 3882 3884 (fontified t face font-lock-type-face) 3884 3885 (fontified t) 3885 3890 (fontified t face font-lock-type-face) 3890 3892 (fontified t) 3892 3897 (fontified t face font-lock-type-face) 3897 3898 (fontified t) 3898 3902 (fontified t face font-lock-type-face) 3902 3918 (fontified t) 3918 3919 (fontified t syntax-table #1#) 3919 3920 (fontified t) 3920 3924 (fontified t face font-lock-type-face) 3924 3943 (fontified t) 3943 3947 (fontified t face font-lock-constant-face) 3947 3949 (fontified t) 3949 3952 (fontified t face font-lock-constant-face) 3952 3971 (fontified t) 3971 3978 (fontified t face font-lock-string-face) 3978 4018 (fontified t) 4018 4022 (fontified t face font-lock-constant-face) 4022 4024 (fontified t) 4024 4027 (fontified t face font-lock-constant-face) 4027 4045 (fontified t) 4045 4054 (fontified t face font-lock-string-face) 4054 4075 (fontified t) 4075 4082 (fontified t) 4082 4097 (fontified t) 4097 4098 (fontified t syntax-table #1#) 4098 4099 (fontified t) 4099 4103 (fontified t face font-lock-type-face) 4103 4135 (fontified t) 4135 4139 (fontified t face font-lock-constant-face) 4139 4141 (fontified t) 4141 4144 (fontified t face font-lock-constant-face) 4144 4165 (fontified t) 4165 4169 (fontified t face font-lock-type-face) 4169 4189 (fontified t) 4189 4193 (fontified t face font-lock-constant-face) 4193 4195 (fontified t) 4195 4200 (fontified t face font-lock-constant-face) 4200 4202 (fontified t) 4202 4206 (fontified t face font-lock-constant-face) 4206 4215 (fontified t) 4215 4227 (fontified t face font-lock-string-face) 4227 4229 (fontified t) 4229 4241 (fontified t face font-lock-string-face) 4241 4257 (fontified t) 4257 4262 (fontified t face font-lock-constant-face) 4262 4285 (fontified t) 4285 4287 (fontified t face font-lock-comment-delimiter-face) 4287 4347 (fontified t face font-lock-comment-face) 4347 4351 (fontified t) 4351 4354 (fontified t face font-lock-keyword-face) 4354 4355 (fontified t) 4355 4364 (fontified t face font-lock-variable-name-face) 4364 4367 (fontified t) 4367 4372 (fontified t face font-lock-preprocessor-face) 4372 4373 (fontified t) 4373 4378 (fontified t face font-lock-string-face) 4378 4381 (fontified t) 4381 4385 (fontified t face font-lock-string-face) 4385 4388 (fontified t) 4388 4399 (fontified t face font-lock-string-face) 4399 4414 (fontified t) 4414 4419 (fontified t face font-lock-type-face) 4419 4421 (fontified t) 4421 4427 (fontified t face font-lock-type-face) 4427 4474 (fontified t) 4474 4478 (fontified t face font-lock-type-face) 4478 4505 (fontified t) 4505 4510 (fontified t face font-lock-type-face) 4510 4512 (fontified t) 4512 4518 (fontified t face font-lock-type-face) 4518 4534 (fontified t) 4534 4538 (fontified t face font-lock-constant-face) 4538 4562 (fontified t) 4562 4567 (fontified t face font-lock-constant-face) 4567 4569 (fontified t) 4569 4574 (fontified t face font-lock-type-face) 4574 4582 (fontified t) 4582 4589 (fontified t) 4589 4602 (fontified t) 4602 4607 (fontified t face font-lock-constant-face) 4607 4609 (fontified t) 4609 4616 (fontified t face font-lock-type-face) 4616 4644 (fontified t) 4644 4649 (fontified t face font-lock-constant-face) 4649 4651 (fontified t) 4651 4655 (fontified t face font-lock-type-face) 4655 4683 (fontified t) 4683 4687 (fontified t face font-lock-constant-face) 4687 4727 (fontified t) 4727 4731 (fontified t face font-lock-keyword-face) 4731 4733 (fontified t) 4733 4736 (fontified t face font-lock-keyword-face) 4736 4737 (fontified t) 4737 4741 (fontified t face font-lock-variable-name-face) 4741 4743 (fontified t) 4743 4747 (fontified t face font-lock-type-face) 4747 4767 (fontified t) 4767 4768 (fontified t face font-lock-variable-name-face) 4768 4770 (fontified t) 4770 4775 (fontified t face font-lock-constant-face) 4775 4777 (fontified t) 4777 4783 (fontified t face font-lock-type-face) 4783 4803 (fontified t) 4803 4804 (fontified t face font-lock-variable-name-face) 4804 4806 (fontified t) 4806 4811 (fontified t face font-lock-constant-face) 4811 4813 (fontified t) 4813 4818 (fontified t face font-lock-type-face) 4818 4838 (fontified t) 4838 4839 (fontified t face font-lock-variable-name-face) 4839 4841 (fontified t) 4841 4846 (fontified t face font-lock-constant-face) 4846 4848 (fontified t) 4848 4855 (fontified t face font-lock-type-face) 4855 4875 (fontified t) 4875 4876 (fontified t face font-lock-variable-name-face) 4876 4878 (fontified t) 4878 4883 (fontified t face font-lock-constant-face) 4883 4885 (fontified t) 4885 4889 (fontified t face font-lock-type-face) 4889 4909 (fontified t) 4909 4911 (fontified t face font-lock-variable-name-face) 4911 4913 (fontified t) 4913 4917 (fontified t face font-lock-constant-face) 4917 4919 (fontified t) 4919 4921 (fontified t face font-lock-constant-face) 4921 4923 (fontified t) 4923 4926 (fontified t face font-lock-type-face) 4926 4946 (fontified t) 4946 4949 (fontified t face font-lock-keyword-face) 4949 4950 (fontified t) 4950 4962 (fontified t face font-lock-variable-name-face) 4962 4965 (fontified t) 4965 4968 (fontified t face font-lock-type-face) 4968 4969 (fontified t) 4969 4973 (fontified t face font-lock-constant-face) 4973 4975 (fontified t) 4975 4981 (fontified t face font-lock-constant-face) 4981 4990 (fontified t) 4990 5019 (fontified t face font-lock-string-face) 5019 5039 (fontified t) 5039 5042 (fontified t face font-lock-keyword-face) 5042 5043 (fontified t) 5043 5051 (fontified t face font-lock-variable-name-face) 5051 5054 (fontified t) 5054 5059 (fontified t face font-lock-keyword-face) 5059 5089 (fontified t) 5089 5100 (fontified t) 5100 5103 (face font-lock-comment-delimiter-face fontified t) 5103 5121 (face font-lock-comment-face fontified t) 5121 5146 (fontified t) 5146 5154 (fontified t face font-lock-string-face) 5154 5162 (fontified t) 5162 5176 (fontified t face font-lock-string-face) 5176 5177 (fontified t) 5177 5179 (fontified t face font-lock-keyword-face) 5179 5195 (fontified t) 5195 5196 (fontified t syntax-table #1#) 5196 5197 (fontified t) 5197 5204 (fontified t face rust-builtin-formatting-macro-face) 5204 5205 (fontified t) 5205 5206 (fontified t face font-lock-string-face) 5206 5208 (fontified t face rust-string-interpolation-face) 5208 5215 (fontified t face font-lock-string-face) 5215 5247 (fontified t) 5247 5261 (fontified t face font-lock-string-face) 5261 5269 (fontified t) 5269 5289 (fontified t face font-lock-string-face) 5289 5291 (fontified t) 5291 5292 (fontified t syntax-table #1#) 5292 5334 (fontified t) 5334 5342 (fontified t face font-lock-string-face) 5342 5350 (fontified t) 5350 5364 (fontified t face font-lock-string-face) 5364 5366 (fontified t) 5366 5367 (fontified t syntax-table #1#) 5367 5404 (fontified t) 5404 5407 (fontified t face font-lock-comment-delimiter-face) 5407 5412 (fontified t face font-lock-comment-face) 5412 5432 (fontified t) 5432 5436 (fontified t face font-lock-string-face) 5436 5437 (fontified t syntax-table #2# face font-lock-string-face) 5437 5438 (fontified t face font-lock-string-face) 5438 5439 (fontified t) 5439 5441 (fontified t face font-lock-keyword-face) 5441 5457 (fontified t) 5457 5458 (fontified t syntax-table #1#) 5458 5459 (fontified t) 5459 5465 (fontified t face font-lock-keyword-face) 5465 5500 (fontified t) 5500 5501 (fontified t face font-lock-string-face) 5501 5504 (fontified t face font-lock-string-face) 5504 5505 (fontified t syntax-table #2# face font-lock-string-face) 5505 5506 (fontified t face font-lock-string-face) 5506 5508 (fontified t) 5508 5509 (fontified t syntax-table #1#) 5509 5510 (fontified t) 5510 5517 (fontified t face rust-builtin-formatting-macro-face) 5517 5518 (fontified t) 5518 5519 (fontified t face font-lock-string-face) 5519 5521 (fontified t face rust-string-interpolation-face) 5521 5522 (fontified t face font-lock-string-face) 5522 5554 (fontified t) 5554 5573 (fontified t face font-lock-string-face) 5573 5575 (fontified t) 5575 5576 (fontified t syntax-table #1#) 5576 5621 (fontified t) 5621 5643 (fontified t) 5643 5667 (fontified t) 5667 5674 (fontified t face rust-builtin-formatting-macro-face) 5674 5675 (fontified t) 5675 5676 (fontified t face font-lock-string-face) 5676 5678 (fontified t face rust-string-interpolation-face) 5678 5679 (fontified t face font-lock-string-face) 5679 5732 (fontified t) 5732 5735 (fontified t face font-lock-comment-delimiter-face) 5735 5754 (fontified t face font-lock-comment-face) 5754 5774 (fontified t) 5774 5777 (fontified t face font-lock-comment-delimiter-face) 5777 5804 (fontified t face font-lock-comment-face) 5804 5829 (fontified t) 5829 5838 (fontified t face font-lock-string-face) 5838 5846 (fontified t) 5846 5861 (fontified t face font-lock-string-face) 5861 5863 (fontified t) 5863 5864 (fontified t syntax-table #1#) 5864 5865 (fontified t) 5865 5872 (fontified t face rust-builtin-formatting-macro-face) 5872 5873 (fontified t) 5873 5874 (fontified t face font-lock-string-face) 5874 5876 (fontified t face rust-string-interpolation-face) 5876 5877 (fontified t face font-lock-string-face) 5877 5879 (fontified t face rust-string-interpolation-face) 5879 5880 (fontified t face font-lock-string-face) 5880 5914 (fontified t) 5914 5917 (fontified t face font-lock-comment-delimiter-face) 5917 5932 (fontified t face font-lock-comment-face) 5932 5952 (fontified t) 5952 5955 (fontified t face font-lock-comment-delimiter-face) 5955 5982 (fontified t face font-lock-comment-face) 5982 6002 (fontified t) 6002 6008 (fontified t face font-lock-string-face) 6008 6009 (fontified t) 6009 6011 (fontified t face font-lock-keyword-face) 6011 6055 (fontified t) 6055 6056 (fontified t syntax-table #1#) 6056 6057 (fontified t) 6057 6063 (fontified t face font-lock-keyword-face) 6063 6098 (fontified t) 6098 6104 (fontified t face font-lock-string-face) 6104 6106 (fontified t) 6106 6107 (fontified t syntax-table #1#) 6107 6108 (fontified t) 6108 6115 (fontified t face rust-builtin-formatting-macro-face) 6115 6116 (fontified t) 6116 6122 (fontified t face font-lock-string-face) 6122 6124 (fontified t face rust-string-interpolation-face) 6124 6125 (fontified t face font-lock-string-face) 6125 6143 (fontified t) 6143 6156 (fontified t) 6156 6159 (face font-lock-comment-delimiter-face fontified t) 6159 6176 (face font-lock-comment-face fontified t) 6176 6196 (fontified t) 6196 6204 (fontified t face font-lock-string-face) 6204 6205 (fontified t) 6205 6207 (fontified t face font-lock-keyword-face) 6207 6223 (fontified t) 6223 6224 (fontified t syntax-table #1#) 6224 6225 (fontified t) 6225 6231 (fontified t face font-lock-keyword-face) 6231 6266 (fontified t) 6266 6274 (fontified t face font-lock-string-face) 6274 6276 (fontified t) 6276 6277 (fontified t syntax-table #1#) 6277 6278 (fontified t) 6278 6286 (fontified t face font-lock-string-face) 6286 6320 (fontified t) 6320 6323 (fontified t face font-lock-comment-delimiter-face) 6323 6352 (fontified t face font-lock-comment-face) 6352 6375 (fontified t) 6375 6376 (fontified t syntax-table #1#) 6376 6377 (fontified t) 6377 6383 (fontified t face font-lock-keyword-face) 6383 6384 (fontified t) 6384 6387 (fontified t face font-lock-type-face) 6387 6388 (fontified t) 6388 6392 (fontified t face font-lock-constant-face) 6392 6394 (fontified t) 6394 6400 (fontified t face font-lock-constant-face) 6400 6409 (fontified t) 6409 6445 (fontified t face font-lock-string-face) 6445 6484 (fontified t) 6484 6487 (fontified t face font-lock-keyword-face) 6487 6488 (fontified t) 6488 6494 (fontified t face font-lock-variable-name-face) 6494 6564 (fontified t) 6564 6566 (fontified t face font-lock-type-face) 6566 6581 (fontified t) 6581 6585 (fontified t face font-lock-keyword-face) 6585 6595 (fontified t) 6595 6597 (fontified t face font-lock-constant-face) 6597 6656 (fontified t) 6656 6657 (fontified t) 6657 6661 (fontified t) 6661 6662 (fontified t) 6662 6666 (fontified t) 6666 6669 (fontified t face font-lock-keyword-face) 6669 6670 (fontified t) 6670 6677 (fontified t face font-lock-variable-name-face) 6677 6680 (fontified t) 6680 6683 (fontified t face font-lock-constant-face) 6683 6688 (fontified t) 6688 6689 (fontified t) 6689 6698 (fontified t face font-lock-string-face) 6698 6703 (fontified t) 6703 6704 (fontified t) 6704 6709 (fontified t) 6709 6710 (fontified t) 6710 6726 (fontified t face font-lock-string-face) 6726 6733 (fontified t) 6733 6734 (fontified t) 6734 6735 (fontified t) 6735 6736 (fontified t) 6736 6737 (fontified t) 6737 6741 (fontified t) 6741 6745 (fontified t face font-lock-constant-face) 6745 6756 (fontified t) 6756 6778 (fontified t) 6778 6789 (fontified t) 6789 6791 (fontified t)) . 1) (undo-tree-id422 . -6737) (undo-tree-id423 . -6737) (undo-tree-id424 . -6737) (undo-tree-id425 . 57) (undo-tree-id426 . -1985) (undo-tree-id427 . -1985) (undo-tree-id428 . -1420) (undo-tree-id429 . -6710) (undo-tree-id430 . -6677) (undo-tree-id431 . -6677) (undo-tree-id432 . -4857) (undo-tree-id433 . -6710) (undo-tree-id434 . -6677) (undo-tree-id435 . -6670) (undo-tree-id436 . -6677) (undo-tree-id437 . -6677) (undo-tree-id438 . -6776) (undo-tree-id439 . -6777) (undo-tree-id440 . -6246) (undo-tree-id441 . -6776) (undo-tree-id442 . -6776) (undo-tree-id443 . -6246) (undo-tree-id444 . -6677) (undo-tree-id445 . -6778) (undo-tree-id446 . -6778) (undo-tree-id447 . 91) (undo-tree-id448 . -6704) (undo-tree-id449 . -6704) (undo-tree-id450 . -6710) (undo-tree-id451 . -6710) (undo-tree-id452 . -6246) (undo-tree-id453 . -6710) (undo-tree-id454 . -6710) (undo-tree-id455 . -6246) (undo-tree-id456 . -6710) (undo-tree-id457 . -6246) (undo-tree-id458 . -6710) (undo-tree-id459 . -6702) (undo-tree-id460 . -6756) (undo-tree-id461 . -6762) (undo-tree-id462 . -6775) (undo-tree-id463 . -6778) (undo-tree-id464 . -6710) (undo-tree-id465 . -6711) (undo-tree-id466 . -6710) (undo-tree-id467 . -6726) (undo-tree-id468 . -6775) (undo-tree-id469 . -6778) (undo-tree-id470 . -6738) (undo-tree-id471 . -6662) (undo-tree-id472 . -6246) (undo-tree-id473 . -6663) (undo-tree-id474 . -6738) (undo-tree-id475 . -6246) (undo-tree-id476 . -6664) (undo-tree-id477 . -6663) (undo-tree-id478 . -6246) (undo-tree-id479 . -6665) (undo-tree-id480 . -6664) (undo-tree-id481 . -6246) (undo-tree-id482 . -6666) (undo-tree-id483 . -6665) (undo-tree-id484 . -6246) (undo-tree-id485 . -6667) (undo-tree-id486 . -6666) (undo-tree-id487 . -6246) (undo-tree-id488 . -6668) (undo-tree-id489 . -6667) (undo-tree-id490 . -6246) (undo-tree-id491 . -6669) (undo-tree-id492 . -6668) (undo-tree-id493 . -6246) (undo-tree-id494 . -6670) (undo-tree-id495 . -6669) (undo-tree-id496 . -6246) (undo-tree-id497 . -6671) (undo-tree-id498 . -6670) (undo-tree-id499 . -6246) (undo-tree-id500 . -6672) (undo-tree-id501 . -6671) (undo-tree-id502 . -6246) (undo-tree-id503 . -6673) (undo-tree-id504 . -6672) (undo-tree-id505 . -6246) (undo-tree-id506 . -6674) (undo-tree-id507 . -6673) (undo-tree-id508 . -6246) (undo-tree-id509 . -6675) (undo-tree-id510 . -6674) (undo-tree-id511 . -6246) (undo-tree-id512 . -6676) (undo-tree-id513 . -6675) (undo-tree-id514 . -6246) (undo-tree-id515 . -6677) (undo-tree-id516 . -6676) (undo-tree-id517 . -6246) (undo-tree-id518 . -6678) (undo-tree-id519 . -6677) (undo-tree-id520 . -6246) (undo-tree-id521 . -6679) (undo-tree-id522 . -6678) (undo-tree-id523 . -6246) (undo-tree-id524 . -6680) (undo-tree-id525 . -6679) (undo-tree-id526 . -6246) (undo-tree-id527 . -6681) (undo-tree-id528 . -6680) (undo-tree-id529 . -6246) (undo-tree-id530 . -6682) (undo-tree-id531 . -6681) (undo-tree-id532 . -6246) (undo-tree-id533 . -6683) (undo-tree-id534 . -6682) (undo-tree-id535 . -6246) (undo-tree-id536 . -6684) (undo-tree-id537 . -6683) (undo-tree-id538 . -6246) (undo-tree-id539 . -6685) (undo-tree-id540 . -6684) (undo-tree-id541 . -6246) (undo-tree-id542 . -6686) (undo-tree-id543 . -6685) (undo-tree-id544 . -6246) (undo-tree-id545 . -6687) (undo-tree-id546 . -6686) (undo-tree-id547 . -6246) (undo-tree-id548 . -6688) (undo-tree-id549 . -6687) (undo-tree-id550 . -6246) (undo-tree-id551 . -6689) (undo-tree-id552 . -6688) (undo-tree-id553 . -6246) (undo-tree-id554 . -6690) (undo-tree-id555 . -6689) (undo-tree-id556 . -6246) (undo-tree-id557 . -6691) (undo-tree-id558 . -6690) (undo-tree-id559 . -6246) (undo-tree-id560 . -6692) (undo-tree-id561 . -6691) (undo-tree-id562 . -6246) (undo-tree-id563 . -6693) (undo-tree-id564 . -6692) (undo-tree-id565 . -6246) (undo-tree-id566 . -6694) (undo-tree-id567 . -6693) (undo-tree-id568 . -6246) (undo-tree-id569 . -6695) (undo-tree-id570 . -6694) (undo-tree-id571 . -6246) (undo-tree-id572 . -6696) (undo-tree-id573 . -6695) (undo-tree-id574 . -6246) (undo-tree-id575 . -6697) (undo-tree-id576 . -6696) (undo-tree-id577 . -6246) (undo-tree-id578 . -6698) (undo-tree-id579 . -6697) (undo-tree-id580 . -6246) (undo-tree-id581 . -6699) (undo-tree-id582 . -6698) (undo-tree-id583 . -6246) (undo-tree-id584 . -6700) (undo-tree-id585 . -6699) (undo-tree-id586 . -6246) (undo-tree-id587 . -6701) (undo-tree-id588 . -6700) (undo-tree-id589 . -6246) (undo-tree-id590 . -6702) (undo-tree-id591 . -6701) (undo-tree-id592 . -6246) (undo-tree-id593 . -6703) (undo-tree-id594 . -6702) (undo-tree-id595 . -6246) (undo-tree-id596 . -6704) (undo-tree-id597 . -6703) (undo-tree-id598 . -6246) (undo-tree-id599 . -6705) (undo-tree-id600 . -6704) (undo-tree-id601 . -6246) (undo-tree-id602 . -6706) (undo-tree-id603 . -6705) (undo-tree-id604 . -6246) (undo-tree-id605 . -6707) (undo-tree-id606 . -6706) (undo-tree-id607 . -6246) (undo-tree-id608 . -6706) (undo-tree-id609 . -6707) (undo-tree-id610 . -6246) (undo-tree-id611 . -6705) (undo-tree-id612 . -6706) (undo-tree-id613 . -6246) (undo-tree-id614 . -6704) (undo-tree-id615 . -6705) (undo-tree-id616 . -6246) (undo-tree-id617 . -6703) (undo-tree-id618 . -6704) (undo-tree-id619 . -6246) (undo-tree-id620 . -6702) (undo-tree-id621 . -6703) (undo-tree-id622 . -6246) (undo-tree-id623 . -6700) (undo-tree-id624 . -6709) (undo-tree-id625 . -6702) (undo-tree-id626 . -6702) (undo-tree-id627 . -6246) 6703) nil (23765 6023 670901 509000) 0 nil]) ((#("    \"127.0.0.1:8080\"
" 0 4 (fontified t) 4 19 (fontified t face font-lock-string-face) 19 20 (rear-nonsticky t fontified t face font-lock-string-face) 20 21 (fontified t)) . 6738) (undo-tree-id628 . -4) (undo-tree-id629 . -4) (undo-tree-id630 . -19) (undo-tree-id631 . -19) 6757) nil (23765 6023 670928 983000) 0 nil]) ((6734 . 6736) (#("(" 0 1 (fontified nil)) . -6734) (6728 . 6735) (#(")" 0 1 (fontified nil)) . 6728) (6727 . 6728) (#(" " 0 1 (fontified nil)) . -6727) (6727 . 6728) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -6727) (6727 . 6728) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 6727) (6723 . 6727) (6712 . 6723) (6711 . 6713) (#("\"" 0 1 (fontified nil)) . -6711) (6711 . 6712) (#("([127, 0, 0, 1], 4000)" 0 1 (fontified t) 1 21 (fontified t) 21 22 (fontified t)) . 6711) (undo-tree-id632 . -1) (undo-tree-id633 . -1)) nil (23765 6023 670940 605000) 0 nil]) ((#("p" 0 1 (fontified t)) . 6740) (undo-tree-id634 . -1) (undo-tree-id635 . -1)) nil (23765 6023 670947 465000) 0 nil]) ((nil rear-nonsticky nil 6756 . 6757) (nil fontified nil 6741 . 6757) (6741 . 6757) 6740) nil (23765 6023 670950 782000) 0 nil]) ((6740 . 6741) (6735 . 6740) 6704) nil (23765 6023 670953 714000) 0 nil] [nil nil ((nil rear-nonsticky nil 6720 . 6721) (nil fontified nil 6705 . 6721) (6705 . 6721) 6704) ((#("\"127.0.0.1:8080\"" 0 15 (fontified nil face font-lock-string-face) 15 16 (fontified nil rear-nonsticky nil syntax-table (15) face font-lock-string-face)) . 6705) (undo-tree-id390 . -15) (undo-tree-id391 . -15) (undo-tree-id392 . -15) (undo-tree-id393 . -15) (undo-tree-id394 . -15) (undo-tree-id395 . -15) (undo-tree-id396 . -5) (undo-tree-id397 . -6) (undo-tree-id398 . -6) (undo-tree-id399 . -15) (undo-tree-id400 . -15) (undo-tree-id401 . -15) (undo-tree-id402 . -16) (undo-tree-id403 . -15) (undo-tree-id404 . -16) (undo-tree-id405 . -15) (undo-tree-id406 . -16) (undo-tree-id407 . -1) (undo-tree-id408 . -15) (undo-tree-id409 . -16) (undo-tree-id410 . -15) (undo-tree-id411 . -16) (undo-tree-id412 . -1) (undo-tree-id413 . -1) (undo-tree-id414 . -15) (undo-tree-id415 . -16) (undo-tree-id416 . 16) (undo-tree-id417 . -1) (undo-tree-id418 . 15) (undo-tree-id419 . -15) (undo-tree-id420 . 1) (undo-tree-id421 . -16) (nil rear-nonsticky t 6720 . 6721)) (23765 5980 510925 492000) 0 nil] [nil nil ((nil rear-nonsticky nil 6792 . 6793) (nil fontified nil 6777 . 6793) (6777 . 6793) 6776) ((#("\"127.0.0.1:8080\"" 0 15 (fontified nil face font-lock-string-face) 15 16 (fontified nil rear-nonsticky nil face font-lock-string-face)) . 6777) (undo-tree-id374 . -15) (undo-tree-id375 . 1) (undo-tree-id376 . -15) (undo-tree-id377 . -15) (undo-tree-id378 . -15) (undo-tree-id379 . -15) (undo-tree-id380 . -15) (undo-tree-id381 . -15) (undo-tree-id382 . -14) (undo-tree-id383 . -15) (undo-tree-id384 . -15) (undo-tree-id385 . -15) (undo-tree-id386 . -15) (undo-tree-id387 . -15) (undo-tree-id388 . -14) (undo-tree-id389 . -14) (nil rear-nonsticky t 6792 . 6793)) (23765 5977 78884 647000) 0 nil]) ((6684 . 6686)) nil (23765 5980 514148 976000) 0 nil]) ((#("." 0 1 (fontified t)) . 6684)) nil (23765 5977 78893 831000) 0 nil]) ((6733 . 6734)) nil (23765 5977 78896 498000) 0 nil]) ((6780 . 6783)) nil (23765 5977 78898 646000) 0 nil]) ((#("addres" 0 6 (fontified nil face font-lock-variable-name-face)) . 6678) (undo-tree-id366 . -6) (undo-tree-id367 . -4) (undo-tree-id368 . -4) (undo-tree-id369 . -4) (undo-tree-id370 . -4) (undo-tree-id371 . -6) (undo-tree-id372 . -6) (undo-tree-id373 . -6) (6671 . 6678) 6677) nil (23765 5977 78921 877000) 0 nil] [nil nil ((6671 . 6678) (#("addres" 0 6 (fontified t face font-lock-variable-name-face)) . -6671) (undo-tree-id351 . -4) (undo-tree-id352 . -4) 6675) ((6671 . 6677) (#("add res" 0 3 (fontified t face font-lock-variable-name-face) 3 7 (fontified t)) . 6671) (undo-tree-id362 . -4) (undo-tree-id363 . -4) (undo-tree-id364 . -4) (undo-tree-id365 . -4)) (23765 5756 71610 118000) 0 nil]) ((6775 . 6779)) nil (23765 5756 74338 965000) 0 nil]) ((#(")" 0 1 (fontified nil rear-nonsticky t)) . 6730) (#("(" 0 1 (fontified t)) . 6710) 6731) nil (23765 5756 71616 857000) 0 nil]) ((nil rear-nonsticky nil 6731 . 6732) (nil fontified nil 6710 . 6732) (6710 . 6732) 6709) nil (23765 5756 71619 306000) 0 nil]) ((#("([127, 0, 0, 1], 4000)" 0 22 (fontified t)) . 6755)) nil (23765 5756 71620 821000) 0 nil]) ((6709 . 6711) (#("(" 0 1 (fontified nil)) . -6709) (6709 . 6710) (6708 . 6710) (#("(" 0 1 (fontified nil)) . -6708) (6705 . 6709) (6701 . 6705) (#("q" 0 1 (fontified t)) . -6701) (undo-tree-id353 . -1) 6702 (6698 . 6702) (#(")" 0 1 (fontified nil)) . 6698) (6697 . 6698) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 6697) (6692 . 6697) (6689 . 6692) (6688 . 6690) (#("\"" 0 1 (fontified nil)) . -6688) (6688 . 6689) (6687 . 6689) (#("(" 0 1 (fontified nil)) . -6687) (6681 . 6688) (6671 . 6681)) nil (23765 5756 71630 73000) 0 nil]) ((6669 . 6671) (#("y" 0 1 (fontified t)) . -6669) (undo-tree-id354 . -1) 6670 (6667 . 6670) (6662 . 6667) 6661) nil (23765 5756 71636 202000) 0 nil]) ((6657 . 6662) 6657) nil (23765 5756 71638 306000) 0 nil]) ((#("    println!(\"user: {}\", env::var(\"USER\").unwrap());
" 0 4 (fontified t) 4 12 (fontified t face rust-builtin-formatting-macro-face) 12 13 (fontified t) 13 17 (fontified t face font-lock-string-face) 17 18 (fontified t face font-lock-string-face) 18 20 (fontified t face font-lock-string-face) 20 21 (fontified t face rust-string-interpolation-face) 21 22 (fontified t face rust-string-interpolation-face) 22 23 (fontified t face font-lock-string-face) 23 25 (fontified t) 25 28 (fontified t face font-lock-constant-face) 28 33 (fontified t) 33 34 (fontified t) 34 38 (fontified t face font-lock-string-face) 38 39 (fontified t syntax-table #2# face font-lock-string-face) 39 40 (fontified t face font-lock-string-face) 40 48 (fontified t) 48 50 (fontified t) 50 52 (fontified t) 52 53 (fontified t)) . 1986) (undo-tree-id355 . 3) (undo-tree-id356 . -36) (undo-tree-id357 . -36) (undo-tree-id358 . -36) (undo-tree-id359 . -36) (undo-tree-id360 . -36) (undo-tree-id361 . -36) 2022 (t 23765 5523 985945 429000)) nil (23765 5756 71645 584000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 2036) (undo-tree-id341 . -1) (2035 . 2036) (2034 . 2036) (#("(" 0 1 (fontified nil)) . -2034) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (2034 . 2035) (2027 . 2034)) nil (23765 5523 898214 865000) 0 nil]) ((2010 . 2011)) nil (23765 5523 898220 463000) 0 nil]) ((2027 . 2028)) nil (23765 5523 898222 413000) 0 nil]) ((2026 . 2027) (#(")" 0 1 (fontified t)) . -2018) (2018 . 2019) (#(")" 0 1 (fontified t)) . -2013) (2013 . 2014) (#(")" 0 1 (fontified t)) . -2010) (2009 . 2010) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 2009) (2008 . 2009) (#(" " 0 1 (fontified nil)) . -2008) (2008 . 2009) (#("\"" 0 1 (fontified nil face rust-string-interpolation-face)) . -2008) (2008 . 2009) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 2008) (2007 . 2008) (#(" " 0 1 (fontified nil)) . -2007) (2007 . 2008) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . -2007) (2007 . 2008) (#("\\\"" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . -2007) (undo-tree-id344 . -2) 2009 (2007 . 2008) (2007 . 2008) (2006 . 2008) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -2006) (2000 . 2007) (1999 . 2001) (#("\"" 0 1 (fontified nil)) . -1999) (1999 . 2000) (1998 . 2000) (#("(" 0 1 (fontified nil)) . -1998) (1995 . 1999) (1990 . 1995)) nil (23765 5523 898237 613000) 0 nil]) (1990) nil (23765 5523 898244 525000) 0 nil]) ((2000 . 2004) (1999 . 2001) (#("\"" 0 1 (fontified nil)) . -1999) (1999 . 2000) (#(":" 0 1 (fontified t)) . -1999) (undo-tree-id345 . -1) 2000 (1999 . 2000) (1998 . 2000) (#("(" 0 1 (fontified nil)) . -1998) (1993 . 1999) (#("." 0 1 (fontified t)) . -1993) (undo-tree-id346 . -1) (#("v" 0 1 (fontified t)) . -1994) (undo-tree-id347 . -1) (#("a" 0 1 (fontified t)) . -1995) (undo-tree-id348 . -1) 1996 (1994 . 1996) (1993 . 1994) (#(":" 0 1 (fontified t)) . -1993) (undo-tree-id349 . -1) 1994 (1991 . 1994) (#("v" 0 1 (fontified t)) . -1991) (undo-tree-id350 . -1) 1992 (1990 . 1992) (1985 . 1990) (t 23765 5463 489471 902000) 1980) nil (23765 5523 898262 313000) 0 nil]) ((1 . 6727) (#("//! Streaming server for Mastodon
//!
//!
//! This server provides live, streaming updates for Mastodon clients.  Specifically, when a server
//! is running this sever, Mastodon clients can use either Server Sent Events or WebSockets to
//! connect to the server with the API described [in the public API
//! documentation](https://docs.joinmastodon.org/api/streaming/)
//!
//! # Notes on data flow
//! * **Client Request → Warp**:
//! Warp filters for valid requests and parses request data. Based on that data, it generates a `User`
//! representing the client that made the request.  The `User` is authenticated, if appropriate.  Warp
//! repeatedly polls the StreamManager for information relevant to the User.
//!
//! * **Warp → StreamManager**:
//! A new `StreamManager` is created for each request.  The `StreamManager` exists to manage concurrent
//! access to the (single) `Receiver`, which it can access behind an `Arc<Mutex>`.  The `StreamManager`
//! polles the `Receiver` for any updates relvant to the current client.  If there are updates, the
//! `StreamManager` filters them with the client's filters and passes any matching updates up to Warp.
//! The `StreamManager` is also responsible for sending `subscribe` commands to Redis (via the
//! `Receiver`) when necessary.
//!
//! * **StreamManger → Receiver**:
//! The Receiver receives data from Redis and stores it in a series of queues (one for each
//! StreamManager). When (asynchronously) polled by the StreamManager, it sends back the  messages
//! relevant to that StreamManager and removes them from the queue.

pub mod error;
pub mod query;
pub mod receiver;
pub mod redis_cmd;
pub mod stream;
pub mod timeline;
pub mod user;
pub mod ws;
use dotenv::dotenv;
use futures::stream::Stream;
use futures::Async;
use receiver::Receiver;
use std::env;
use stream::StreamManager;
use user::{Scope, User};
use warp::path;
use warp::Filter as WarpFilter;

fn main() {
    pretty_env_logger::init();
dotenv().ok();

    let redis_updates = StreamManager::new(Receiver::new());
    let redis_updates_sse = redis_updates.blank_copy();
    let redis_updates_ws = redis_updates.blank_copy();

    let routes = any_of!(
        // GET /api/v1/streaming/user/notification                     [private; notification filter]
        timeline::user_notifications(),
        // GET /api/v1/streaming/user                                  [private; language filter]
        timeline::user(),
        // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
        timeline::public_local_media(),
        // GET /api/v1/streaming/public?only_media=true                [public; language filter]
        timeline::public_media(),
        // GET /api/v1/streaming/public/local                          [public; language filter]
        timeline::public_local(),
        // GET /api/v1/streaming/public                                [public; language filter]
        timeline::public(),
        // GET /api/v1/streaming/direct                                [private; *no* filter]
        timeline::direct(),
        // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
        timeline::hashtag(),
        // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
        timeline::hashtag_local(),
        // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
        timeline::list()
    )
    .untuple_one()
    .and(warp::sse())
    .map(move |timeline: String, user: User, sse: warp::sse::Sse| {
        let mut redis_stream = redis_updates_sse.configure_copy(&timeline, user);
        let event_stream = tokio::timer::Interval::new(
            std::time::Instant::now(),
            std::time::Duration::from_millis(100),
        )
        .filter_map(move |_| match redis_stream.poll() {
            Ok(Async::Ready(Some(json_value))) => Some((
                warp::sse::event(json_value[\"event\"].clone().to_string()),
                warp::sse::data(json_value[\"payload\"].clone()),
            )),
            _ => None,
        });
        sse.reply(warp::sse::keep(event_stream, None))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    //let redis_updates_ws = StreamManager::new(Receiver::new());
    let websocket = path!(\"api\" / \"v1\" / \"streaming\")
        .and(Scope::Public.get_access_token())
        .and_then(|token| User::from_access_token(token, Scope::Public))
        .and(warp::query())
        .and(query::Media::to_filter())
        .and(query::Hashtag::to_filter())
        .and(query::List::to_filter())
        .and(warp::ws2())
        .and_then(
            move |mut user: User,
                  q: query::Stream,
                  m: query::Media,
                  h: query::Hashtag,
                  l: query::List,
                  ws: warp::ws::Ws2| {
                let unauthorized = Err(warp::reject::custom(\"Error: Invalid Access Token\"));
                let timeline = match q.stream.as_ref() {
                    // Public endpoints:
                    tl @ \"public\" | tl @ \"public:local\" if m.is_truthy() => format!(\"{}:media\", tl),
                    tl @ \"public:media\" | tl @ \"public:local:media\" => tl.to_string(),
                    tl @ \"public\" | tl @ \"public:local\" => tl.to_string(),
                    // User
                    \"user\" if user.id == -1 => return unauthorized,
                    \"user\" => format!(\"{}\", user.id),
                    \"user:notification\" => {
                        user = user.with_notification_filter();
                        format!(\"{}\", user.id)
                    }
                    // Hashtag endpoints:
                    // TODO: handle missing query
                    tl @ \"hashtag\" | tl @ \"hashtag:local\" => format!(\"{}:{}\", tl, h.tag),
                    // List endpoint:
                    // TODO: handle missing query
                    \"list\" if user.authorized_for_list(l.list).is_err() => return unauthorized,
                    \"list\" => format!(\"list:{}\", l.list),
                    // Direct endpoint:
                    \"direct\" if user.id == -1 => return unauthorized,
                    \"direct\" => \"direct\".to_string(),
                    // Other endpoints don't exist:
                    _ => return Err(warp::reject::custom(\"Error: Nonexistent WebSocket query\")),
                };
                let stream = redis_updates_ws.configure_copy(&timeline, user);

                Ok(ws.on_upgrade(move |socket| ws::send_replies(socket, stream)))
            },
        );

    warp::serve(websocket.or(routes)).run(([127, 0, 0, 1], 4000));
}
" 0 33 (fontified t face font-lock-doc-face) 33 34 (fontified t face font-lock-doc-face) 34 38 (fontified t face font-lock-doc-face) 38 42 (fontified t face font-lock-doc-face) 42 142 (fontified t face font-lock-doc-face) 142 237 (fontified t face font-lock-doc-face) 237 305 (fontified t face font-lock-doc-face) 305 370 (fontified t face font-lock-doc-face) 370 374 (fontified t face font-lock-doc-face) 374 399 (fontified t face font-lock-doc-face) 399 432 (fontified t face font-lock-doc-face) 432 533 (fontified t face font-lock-doc-face) 533 535 (fontified t face font-lock-doc-face) 535 638 (fontified t face font-lock-doc-face) 638 715 (fontified t face font-lock-doc-face) 715 719 (fontified t face font-lock-doc-face) 719 751 (fontified t face font-lock-doc-face) 751 855 (fontified t face font-lock-doc-face) 855 928 (fontified t face font-lock-doc-face) 928 929 (fontified t syntax-table #1# face font-lock-doc-face) 929 934 (fontified t face font-lock-doc-face) 934 935 (fontified t syntax-table #1# face font-lock-doc-face) 935 959 (fontified t face font-lock-doc-face) 959 1035 (fontified t face font-lock-doc-face) 1035 1059 (fontified t face font-lock-doc-face) 1059 1162 (fontified t face font-lock-doc-face) 1162 1257 (fontified t face font-lock-doc-face) 1257 1289 (fontified t face font-lock-doc-face) 1289 1293 (fontified t face font-lock-doc-face) 1293 1328 (fontified t face font-lock-doc-face) 1328 1420 (fontified t face font-lock-doc-face) 1420 1519 (fontified t face font-lock-doc-face) 1519 1559 (fontified t face font-lock-doc-face) 1559 1587 (fontified t face font-lock-doc-face) 1587 1588 (fontified t) 1588 1591 (fontified t face font-lock-keyword-face) 1591 1592 (fontified t) 1592 1595 (fontified t face font-lock-keyword-face) 1595 1596 (fontified t) 1596 1601 (fontified t face font-lock-constant-face) 1601 1603 (fontified t) 1603 1606 (fontified t face font-lock-keyword-face) 1606 1607 (fontified t) 1607 1610 (fontified t face font-lock-keyword-face) 1610 1611 (fontified t) 1611 1616 (fontified t face font-lock-constant-face) 1616 1618 (fontified t) 1618 1621 (fontified t face font-lock-keyword-face) 1621 1622 (fontified t) 1622 1625 (fontified t face font-lock-keyword-face) 1625 1626 (fontified t) 1626 1634 (fontified t face font-lock-constant-face) 1634 1636 (fontified t) 1636 1639 (fontified t face font-lock-keyword-face) 1639 1640 (fontified t) 1640 1643 (fontified t face font-lock-keyword-face) 1643 1644 (fontified t) 1644 1653 (fontified t face font-lock-constant-face) 1653 1655 (fontified t) 1655 1658 (fontified t face font-lock-keyword-face) 1658 1659 (fontified t) 1659 1662 (fontified t face font-lock-keyword-face) 1662 1663 (fontified t) 1663 1669 (fontified t face font-lock-constant-face) 1669 1671 (fontified t) 1671 1674 (fontified t face font-lock-keyword-face) 1674 1675 (fontified t) 1675 1678 (fontified t face font-lock-keyword-face) 1678 1679 (fontified t) 1679 1687 (fontified t face font-lock-constant-face) 1687 1689 (fontified t) 1689 1692 (fontified t face font-lock-keyword-face) 1692 1693 (fontified t) 1693 1696 (fontified t face font-lock-keyword-face) 1696 1697 (fontified t) 1697 1701 (fontified t face font-lock-constant-face) 1701 1703 (fontified t) 1703 1706 (fontified t face font-lock-keyword-face) 1706 1707 (fontified t) 1707 1710 (fontified t face font-lock-keyword-face) 1710 1711 (fontified t) 1711 1713 (fontified t face font-lock-constant-face) 1713 1715 (fontified t) 1715 1718 (fontified t face font-lock-keyword-face) 1718 1719 (fontified t) 1719 1725 (fontified t face font-lock-constant-face) 1725 1735 (fontified t) 1735 1738 (fontified t face font-lock-keyword-face) 1738 1739 (fontified t) 1739 1746 (fontified t face font-lock-constant-face) 1746 1748 (fontified t) 1748 1754 (fontified t face font-lock-constant-face) 1754 1756 (fontified t) 1756 1762 (fontified t face font-lock-type-face) 1762 1763 (fontified t) 1763 1764 (fontified t) 1764 1767 (fontified t face font-lock-keyword-face) 1767 1768 (fontified t) 1768 1775 (fontified t face font-lock-constant-face) 1775 1777 (fontified t) 1777 1782 (fontified t face font-lock-type-face) 1782 1784 (fontified t) 1784 1787 (fontified t face font-lock-keyword-face) 1787 1788 (fontified t) 1788 1796 (fontified t face font-lock-constant-face) 1796 1798 (fontified t) 1798 1806 (fontified t face font-lock-type-face) 1806 1808 (fontified t) 1808 1811 (fontified t face font-lock-keyword-face) 1811 1812 (fontified t) 1812 1815 (fontified t face font-lock-constant-face) 1815 1822 (fontified t) 1822 1825 (fontified t face font-lock-keyword-face) 1825 1826 (fontified t) 1826 1832 (fontified t face font-lock-constant-face) 1832 1834 (fontified t) 1834 1847 (fontified t face font-lock-type-face) 1847 1849 (fontified t) 1849 1852 (fontified t face font-lock-keyword-face) 1852 1853 (fontified t) 1853 1857 (fontified t face font-lock-constant-face) 1857 1860 (fontified t) 1860 1865 (fontified t face font-lock-type-face) 1865 1867 (fontified t) 1867 1871 (fontified t face font-lock-type-face) 1871 1874 (fontified t) 1874 1877 (fontified t face font-lock-keyword-face) 1877 1878 (fontified t) 1878 1882 (fontified t face font-lock-constant-face) 1882 1890 (fontified t) 1890 1893 (fontified t face font-lock-keyword-face) 1893 1894 (fontified t) 1894 1898 (fontified t face font-lock-constant-face) 1898 1900 (fontified t) 1900 1906 (fontified t face font-lock-type-face) 1906 1907 (fontified t) 1907 1909 (fontified t face font-lock-keyword-face) 1909 1910 (fontified t) 1910 1920 (fontified t face font-lock-type-face) 1920 1923 (fontified t) 1923 1925 (fontified t face font-lock-keyword-face) 1925 1926 (fontified t) 1926 1930 (fontified t face font-lock-function-name-face) 1930 1935 (fontified t) 1935 1939 (fontified t) 1939 1942 (fontified t face font-lock-constant-face) 1942 1956 (fontified t face font-lock-constant-face) 1956 1965 (fontified t) 1965 1966 (fontified t) 1966 1979 (fontified t) 1979 1980 (fontified t rear-nonsticky t) 1980 1981 (fontified t) 1981 1986 (fontified t) 1986 1989 (fontified t face font-lock-keyword-face) 1989 1990 (fontified t) 1990 2003 (fontified t face font-lock-variable-name-face) 2003 2006 (fontified t) 2006 2019 (fontified t face font-lock-type-face) 2019 2025 (fontified t) 2025 2033 (fontified t face font-lock-type-face) 2033 2047 (fontified t) 2047 2050 (fontified t face font-lock-keyword-face) 2050 2051 (fontified t) 2051 2068 (fontified t face font-lock-variable-name-face) 2068 2103 (fontified t) 2103 2106 (fontified t face font-lock-keyword-face) 2106 2107 (fontified t) 2107 2123 (fontified t face font-lock-variable-name-face) 2123 2159 (fontified t) 2159 2162 (fontified t face font-lock-keyword-face) 2162 2163 (fontified t) 2163 2169 (fontified t face font-lock-variable-name-face) 2169 2172 (fontified t) 2172 2179 (fontified t face font-lock-preprocessor-face) 2179 2189 (fontified t) 2189 2192 (fontified t face font-lock-comment-delimiter-face) 2192 2250 (fontified t face font-lock-comment-face) 2250 2278 (fontified t face font-lock-comment-face) 2278 2283 (fontified t face font-lock-comment-face) 2283 2291 (fontified t) 2291 2299 (fontified t face font-lock-constant-face) 2299 2331 (fontified t) 2331 2334 (fontified t face font-lock-comment-delimiter-face) 2334 2421 (fontified t face font-lock-comment-face) 2421 2429 (fontified t) 2429 2437 (fontified t face font-lock-constant-face) 2437 2455 (fontified t) 2455 2458 (fontified t face font-lock-comment-delimiter-face) 2458 2481 (fontified t face font-lock-comment-face) 2481 2544 (face font-lock-comment-face fontified t) 2544 2552 (fontified t) 2552 2560 (fontified t face font-lock-constant-face) 2560 2592 (fontified t) 2592 2595 (fontified t face font-lock-comment-delimiter-face) 2595 2681 (fontified t face font-lock-comment-face) 2681 2689 (fontified t) 2689 2697 (fontified t face font-lock-constant-face) 2697 2723 (fontified t) 2723 2726 (fontified t face font-lock-comment-delimiter-face) 2726 2783 (fontified t face font-lock-comment-face) 2783 2812 (fontified t face font-lock-comment-face) 2812 2820 (fontified t) 2820 2828 (fontified t face font-lock-constant-face) 2828 2854 (fontified t) 2854 2857 (fontified t face font-lock-comment-delimiter-face) 2857 2943 (fontified t face font-lock-comment-face) 2943 2951 (fontified t) 2951 2959 (fontified t face font-lock-constant-face) 2959 2979 (fontified t) 2979 2982 (fontified t face font-lock-comment-delimiter-face) 2982 3044 (fontified t face font-lock-comment-face) 3044 3065 (face font-lock-comment-face fontified t) 3914 3915 (syntax-table #1#)) . 1) (undo-tree-id162 . -1966) (undo-tree-id163 . -1966) (undo-tree-id164 . -1979) (undo-tree-id165 . 4742) (undo-tree-id166 . -1741) (undo-tree-id167 . -1741) (undo-tree-id168 . -1770) (undo-tree-id169 . -1741) (undo-tree-id170 . -1770) (undo-tree-id171 . -2329) (undo-tree-id172 . -2289) (undo-tree-id173 . -1056) (undo-tree-id174 . -2289) (undo-tree-id175 . -2329) (undo-tree-id176 . -1056) (undo-tree-id177 . -2187) (undo-tree-id178 . -2289) (undo-tree-id179 . -1056) (undo-tree-id180 . -2161) (undo-tree-id181 . -2187) (undo-tree-id182 . -1056) (undo-tree-id183 . -2154) (undo-tree-id184 . -2161) (undo-tree-id185 . -1056) (undo-tree-id186 . -2105) (undo-tree-id187 . -2154) (undo-tree-id188 . -1056) (undo-tree-id189 . -2049) (undo-tree-id190 . -2105) (undo-tree-id191 . -1056) (undo-tree-id192 . -1988) (undo-tree-id193 . -2049) (undo-tree-id194 . -1056) (undo-tree-id195 . -1981) (undo-tree-id196 . -1988) (undo-tree-id197 . -1056) (undo-tree-id198 . -1941) (undo-tree-id199 . -1981) (undo-tree-id200 . -1056) (undo-tree-id201 . -1939) (undo-tree-id202 . -1956) (undo-tree-id203 . -1941) (undo-tree-id204 . -1941) (undo-tree-id205 . -1056) (undo-tree-id206 . -1981) (undo-tree-id207 . -1941) (undo-tree-id208 . -1056) (undo-tree-id209 . -1981) (undo-tree-id210 . -1981) (undo-tree-id211 . -1941) (undo-tree-id212 . -1056) (undo-tree-id213 . -1981) (undo-tree-id214 . -1981) (undo-tree-id215 . -1941) (undo-tree-id216 . -1056) (undo-tree-id217 . -1056) (undo-tree-id218 . -1981) (undo-tree-id219 . -1979) (undo-tree-id220 . -1981) (undo-tree-id221 . -1941) (undo-tree-id222 . -1056) (undo-tree-id223 . -1941) (undo-tree-id224 . -1981) (undo-tree-id225 . -1056) (undo-tree-id226 . -1942) (undo-tree-id227 . -1941) (undo-tree-id228 . -1056) (undo-tree-id229 . -1942) (undo-tree-id230 . -1942) (undo-tree-id231 . -1942) (undo-tree-id232 . -1942) (undo-tree-id233 . -1942) (undo-tree-id234 . -1942) (undo-tree-id235 . -1942) (undo-tree-id236 . -1942) (undo-tree-id237 . -1270) (undo-tree-id238 . -1271) (undo-tree-id239 . -1270) (undo-tree-id240 . -1271) (undo-tree-id241 . -1942) (undo-tree-id242 . -1942) (undo-tree-id243 . -1942) (undo-tree-id244 . -1942) (undo-tree-id245 . -1942) (undo-tree-id246 . -1942) (undo-tree-id247 . -1942) (undo-tree-id248 . -1942) (undo-tree-id249 . -1056) (undo-tree-id250 . -1942) (undo-tree-id251 . -1942) (undo-tree-id252 . -1942) (undo-tree-id253 . -1942) (undo-tree-id254 . -1942) (undo-tree-id255 . -1942) (undo-tree-id256 . -1942) (undo-tree-id257 . -1942) (undo-tree-id258 . -1270) (undo-tree-id259 . -1271) (undo-tree-id260 . -1270) (undo-tree-id261 . -1271) (undo-tree-id262 . -1942) (undo-tree-id263 . -1942) (undo-tree-id264 . -1942) (undo-tree-id265 . -1942) (undo-tree-id266 . -1942) (undo-tree-id267 . -1942) (undo-tree-id268 . -1941) (undo-tree-id269 . -1942) (undo-tree-id270 . -1056) (undo-tree-id271 . -1966) (undo-tree-id272 . -1941) (undo-tree-id273 . -1056) (undo-tree-id274 . -1966) (undo-tree-id275 . -1966) (undo-tree-id276 . -1056) (undo-tree-id277 . -1942) (undo-tree-id278 . -1979) (undo-tree-id279 . -1966) (undo-tree-id280 . -1056) (undo-tree-id281 . -1978) (undo-tree-id282 . -1979) (undo-tree-id283 . -1978) (undo-tree-id284 . -1979) (undo-tree-id285 . -1978) (undo-tree-id286 . -1979) (undo-tree-id287 . -1978) (undo-tree-id288 . -1979) (undo-tree-id289 . -1270) (undo-tree-id290 . -1271) (undo-tree-id291 . -1270) (undo-tree-id292 . -1271) (undo-tree-id293 . -1978) (undo-tree-id294 . -1979) (undo-tree-id295 . -1978) (undo-tree-id296 . -1979) (undo-tree-id297 . -1977) (undo-tree-id298 . -1978) (undo-tree-id299 . -1812) (undo-tree-id300 . -1815) (undo-tree-id301 . -1719) (undo-tree-id302 . -1725) (undo-tree-id303 . -1939) (undo-tree-id304 . -1956) (undo-tree-id305 . -1939) (undo-tree-id306 . -1956) (undo-tree-id307 . -1956) (undo-tree-id308 . -1970) (undo-tree-id309 . -1939) (undo-tree-id310 . -1948) (undo-tree-id311 . -1719) (undo-tree-id312 . -1733) (undo-tree-id313 . -1812) (undo-tree-id314 . -1820) (undo-tree-id315 . -1978) (undo-tree-id316 . -1979) (undo-tree-id317 . -1978) (undo-tree-id318 . -1979) (undo-tree-id319 . -1978) (undo-tree-id320 . -1979) (undo-tree-id321 . -1978) (undo-tree-id322 . -1979) (undo-tree-id323 . -1270) (undo-tree-id324 . -1271) (undo-tree-id325 . -1270) (undo-tree-id326 . -1271) (undo-tree-id327 . -1978) (undo-tree-id328 . -1979) (undo-tree-id329 . -1978) (undo-tree-id330 . -1979) (undo-tree-id331 . -1977) (undo-tree-id332 . -1978) (undo-tree-id333 . 4745) (undo-tree-id334 . -1978) (undo-tree-id335 . 4744) (undo-tree-id336 . -1978) (undo-tree-id337 . 4744) (undo-tree-id338 . -1979) 1980) nil (23765 5463 396982 759000) 0 nil]) ((nil rear-nonsticky nil 1980 . 1981) (nil fontified nil 1967 . 1981) (1967 . 1981)) nil (23765 5463 396998 617000) 0 nil]) ((#("    " 0 4 (fontified t)) . -1967) (undo-tree-id339 . -4) (undo-tree-id340 . -4) 1971 (1966 . 1971) (t 23765 5441 326207 927000) 1942) nil (23765 5463 397003 955000) 0 nil] [nil nil ((nil rear-nonsticky nil 1956 . 1957) (nil fontified nil 1943 . 1957) (1943 . 1957) 1942 (t 23765 5441 326207 927000)) ((#("dotenv().ok();" 0 13 (fontified nil) 13 14 (fontified nil rear-nonsticky nil)) . 1943) (undo-tree-id123 . -13) (undo-tree-id124 . -13) (undo-tree-id125 . -13) (undo-tree-id126 . -12) (undo-tree-id127 . -13) (undo-tree-id128 . -12) (undo-tree-id129 . -13) (undo-tree-id130 . -12) (undo-tree-id131 . -13) (undo-tree-id132 . -12) (undo-tree-id133 . -13) (undo-tree-id134 . -12) (undo-tree-id135 . -13) (undo-tree-id136 . -12) (undo-tree-id137 . -13) (undo-tree-id138 . -11) (undo-tree-id139 . -12) (undo-tree-id140 . -13) (undo-tree-id141 . -13) (undo-tree-id142 . -12) (undo-tree-id143 . -13) (undo-tree-id144 . -12) (undo-tree-id145 . -13) (undo-tree-id146 . -12) (undo-tree-id147 . -13) (undo-tree-id148 . -12) (undo-tree-id149 . -13) (undo-tree-id150 . -12) (undo-tree-id151 . -13) (undo-tree-id152 . -12) (undo-tree-id153 . -13) (undo-tree-id154 . -11) (undo-tree-id155 . -12) (undo-tree-id156 . 3) (undo-tree-id157 . -12) (undo-tree-id158 . 2) (undo-tree-id159 . -12) (undo-tree-id160 . 2) (undo-tree-id161 . -13) (nil rear-nonsticky t 1956 . 1957)) (23765 5461 569 721000) 0 nil]) ((1 . 6708) (#("//! Streaming server for Mastodon
//!
//!
//! This server provides live, streaming updates for Mastodon clients.  Specifically, when a server
//! is running this sever, Mastodon clients can use either Server Sent Events or WebSockets to
//! connect to the server with the API described [in the public API
//! documentation](https://docs.joinmastodon.org/api/streaming/)
//!
//! # Notes on data flow
//! * **Client Request → Warp**:
//! Warp filters for valid requests and parses request data. Based on that data, it generates a `User`
//! representing the client that made the request.  The `User` is authenticated, if appropriate.  Warp
//! repeatedly polls the StreamManager for information relevant to the User.
//!
//! * **Warp → StreamManager**:
//! A new `StreamManager` is created for each request.  The `StreamManager` exists to manage concurrent
//! access to the (single) `Receiver`, which it can access behind an `Arc<Mutex>`.  The `StreamManager`
//! polles the `Receiver` for any updates relvant to the current client.  If there are updates, the
//! `StreamManager` filters them with the client's filters and passes any matching updates up to Warp.
//! The `StreamManager` is also responsible for sending `subscribe` commands to Redis (via the
//! `Receiver`) when necessary.
//!
//! * **StreamManger → Receiver**:
//! The Receiver receives data from Redis and stores it in a series of queues (one for each
//! StreamManager). When (asynchronously) polled by the StreamManager, it sends back the  messages
//! relevant to that StreamManager and removes them from the queue.

pub mod error;
pub mod query;
pub mod receiver;
pub mod redis_cmd;
pub mod stream;
pub mod timeline;
pub mod user;
pub mod ws;
use dotenv::dotenv;
use std::env;
use futures::stream::Stream;
use futures::Async;
use receiver::Receiver;
use stream::StreamManager;
use user::{Scope, User};
use warp::path;
use warp::Filter as WarpFilter;

fn main() {
    pretty_env_logger::init();

    let redis_updates = StreamManager::new(Receiver::new());
    let redis_updates_sse = redis_updates.blank_copy();
    let redis_updates_ws = redis_updates.blank_copy();

    let routes = any_of!(
        // GET /api/v1/streaming/user/notification                     [private; notification filter]
        timeline::user_notifications(),
        // GET /api/v1/streaming/user                                  [private; language filter]
        timeline::user(),
        // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
        timeline::public_local_media(),
        // GET /api/v1/streaming/public?only_media=true                [public; language filter]
        timeline::public_media(),
        // GET /api/v1/streaming/public/local                          [public; language filter]
        timeline::public_local(),
        // GET /api/v1/streaming/public                                [public; language filter]
        timeline::public(),
        // GET /api/v1/streaming/direct                                [private; *no* filter]
        timeline::direct(),
        // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
        timeline::hashtag(),
        // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
        timeline::hashtag_local(),
        // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
        timeline::list()
    )
    .untuple_one()
    .and(warp::sse())
    .map(move |timeline: String, user: User, sse: warp::sse::Sse| {
        let mut redis_stream = redis_updates_sse.configure_copy(&timeline, user);
        let event_stream = tokio::timer::Interval::new(
            std::time::Instant::now(),
            std::time::Duration::from_millis(100),
        )
        .filter_map(move |_| match redis_stream.poll() {
            Ok(Async::Ready(Some(json_value))) => Some((
                warp::sse::event(json_value[\"event\"].clone().to_string()),
                warp::sse::data(json_value[\"payload\"].clone()),
            )),
            _ => None,
        });
        sse.reply(warp::sse::keep(event_stream, None))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    //let redis_updates_ws = StreamManager::new(Receiver::new());
    let websocket = path!(\"api\" / \"v1\" / \"streaming\")
        .and(Scope::Public.get_access_token())
        .and_then(|token| User::from_access_token(token, Scope::Public))
        .and(warp::query())
        .and(query::Media::to_filter())
        .and(query::Hashtag::to_filter())
        .and(query::List::to_filter())
        .and(warp::ws2())
        .and_then(
            move |mut user: User,
                  q: query::Stream,
                  m: query::Media,
                  h: query::Hashtag,
                  l: query::List,
                  ws: warp::ws::Ws2| {
                let unauthorized = Err(warp::reject::custom(\"Error: Invalid Access Token\"));
                let timeline = match q.stream.as_ref() {
                    // Public endpoints:
                    tl @ \"public\" | tl @ \"public:local\" if m.is_truthy() => format!(\"{}:media\", tl),
                    tl @ \"public:media\" | tl @ \"public:local:media\" => tl.to_string(),
                    tl @ \"public\" | tl @ \"public:local\" => tl.to_string(),
                    // User
                    \"user\" if user.id == -1 => return unauthorized,
                    \"user\" => format!(\"{}\", user.id),
                    \"user:notification\" => {
                        user = user.with_notification_filter();
                        format!(\"{}\", user.id)
                    }
                    // Hashtag endpoints:
                    // TODO: handle missing query
                    tl @ \"hashtag\" | tl @ \"hashtag:local\" => format!(\"{}:{}\", tl, h.tag),
                    // List endpoint:
                    // TODO: handle missing query
                    \"list\" if user.authorized_for_list(l.list).is_err() => return unauthorized,
                    \"list\" => format!(\"list:{}\", l.list),
                    // Direct endpoint:
                    \"direct\" if user.id == -1 => return unauthorized,
                    \"direct\" => \"direct\".to_string(),
                    // Other endpoints don't exist:
                    _ => return Err(warp::reject::custom(\"Error: Nonexistent WebSocket query\")),
                };
                let stream = redis_updates_ws.configure_copy(&timeline, user);

                Ok(ws.on_upgrade(move |socket| ws::send_replies(socket, stream)))
            },
        );

    warp::serve(websocket.or(routes)).run(([127, 0, 0, 1], 4000));
}
" 0 33 (fontified t face font-lock-doc-face) 33 34 (fontified t face font-lock-doc-face) 34 38 (fontified t face font-lock-doc-face) 38 42 (fontified t face font-lock-doc-face) 42 142 (fontified t face font-lock-doc-face) 142 237 (fontified t face font-lock-doc-face) 237 305 (fontified t face font-lock-doc-face) 305 370 (fontified t face font-lock-doc-face) 370 374 (fontified t face font-lock-doc-face) 374 399 (fontified t face font-lock-doc-face) 399 432 (fontified t face font-lock-doc-face) 432 500 (fontified t face font-lock-doc-face) 500 533 (fontified t face font-lock-doc-face) 533 535 (fontified t face font-lock-doc-face) 535 638 (fontified t face font-lock-doc-face) 638 715 (fontified t face font-lock-doc-face) 715 719 (fontified t face font-lock-doc-face) 719 751 (fontified t face font-lock-doc-face) 751 855 (fontified t face font-lock-doc-face) 855 928 (fontified t face font-lock-doc-face) 928 929 (fontified t syntax-table #1# face font-lock-doc-face) 929 934 (fontified t face font-lock-doc-face) 934 935 (fontified t syntax-table #1# face font-lock-doc-face) 935 959 (fontified t face font-lock-doc-face) 959 1035 (fontified t face font-lock-doc-face) 1035 1059 (fontified t face font-lock-doc-face) 1059 1162 (fontified t face font-lock-doc-face) 1162 1257 (fontified t face font-lock-doc-face) 1257 1289 (fontified t face font-lock-doc-face) 1289 1293 (fontified t face font-lock-doc-face) 1293 1328 (fontified t face font-lock-doc-face) 1328 1420 (fontified t face font-lock-doc-face) 1420 1519 (fontified t face font-lock-doc-face) 1519 1559 (fontified t face font-lock-doc-face) 1559 1587 (fontified t face font-lock-doc-face) 1587 1588 (fontified t) 1588 1591 (fontified t face font-lock-keyword-face) 1591 1592 (fontified t) 1592 1595 (fontified t face font-lock-keyword-face) 1595 1596 (fontified t) 1596 1601 (fontified t face font-lock-constant-face) 1601 1603 (fontified t) 1603 1606 (fontified t face font-lock-keyword-face) 1606 1607 (fontified t) 1607 1610 (fontified t face font-lock-keyword-face) 1610 1611 (fontified t) 1611 1616 (fontified t face font-lock-constant-face) 1616 1618 (fontified t) 1618 1621 (fontified t face font-lock-keyword-face) 1621 1622 (fontified t) 1622 1625 (fontified t face font-lock-keyword-face) 1625 1626 (fontified t) 1626 1634 (fontified t face font-lock-constant-face) 1634 1636 (fontified t) 1636 1639 (fontified t face font-lock-keyword-face) 1639 1640 (fontified t) 1640 1643 (fontified t face font-lock-keyword-face) 1643 1644 (fontified t) 1644 1653 (fontified t face font-lock-constant-face) 1653 1655 (fontified t) 1655 1658 (fontified t face font-lock-keyword-face) 1658 1659 (fontified t) 1659 1662 (fontified t face font-lock-keyword-face) 1662 1663 (fontified t) 1663 1669 (fontified t face font-lock-constant-face) 1669 1671 (fontified t) 1671 1674 (fontified t face font-lock-keyword-face) 1674 1675 (fontified t) 1675 1678 (fontified t face font-lock-keyword-face) 1678 1679 (fontified t) 1679 1687 (fontified t face font-lock-constant-face) 1687 1689 (fontified t) 1689 1692 (fontified t face font-lock-keyword-face) 1692 1693 (fontified t) 1693 1696 (fontified t face font-lock-keyword-face) 1696 1697 (fontified t) 1697 1701 (fontified t face font-lock-constant-face) 1701 1703 (fontified t) 1703 1704 (fontified t face font-lock-keyword-face) 1704 1706 (fontified t face font-lock-keyword-face) 1706 1707 (fontified t) 1707 1710 (fontified t face font-lock-keyword-face) 1710 1711 (fontified t) 1711 1713 (fontified t face font-lock-constant-face) 1713 1714 (fontified t) 1714 1715 (fontified t) 1715 1718 (fontified t face font-lock-keyword-face) 1718 1719 (fontified t) 1719 1725 (fontified t face font-lock-constant-face) 1725 1735 (fontified t) 1735 1738 (fontified t face font-lock-keyword-face) 1738 1739 (fontified t) 1739 1742 (fontified t face font-lock-constant-face) 1742 1747 (fontified t) 1747 1748 (fontified t rear-nonsticky t) 1748 1749 (fontified t) 1749 1752 (fontified t face font-lock-keyword-face) 1752 1753 (fontified t) 1753 1760 (fontified t face font-lock-constant-face) 1760 1762 (fontified t) 1762 1768 (fontified t face font-lock-constant-face) 1768 1770 (fontified t) 1770 1776 (fontified t face font-lock-type-face) 1776 1778 (fontified t) 1778 1781 (fontified t face font-lock-keyword-face) 1781 1782 (fontified t) 1782 1789 (fontified t face font-lock-constant-face) 1789 1791 (fontified t) 1791 1796 (fontified t face font-lock-type-face) 1796 1798 (fontified t) 1798 1801 (fontified t face font-lock-keyword-face) 1801 1802 (fontified t) 1802 1810 (fontified t face font-lock-constant-face) 1810 1812 (fontified t) 1812 1820 (fontified t face font-lock-type-face) 1820 1822 (fontified t) 1822 1825 (fontified t face font-lock-keyword-face) 1825 1826 (fontified t) 1826 1832 (fontified t face font-lock-constant-face) 1832 1834 (fontified t) 1834 1847 (fontified t face font-lock-type-face) 1847 1849 (fontified t) 1849 1852 (fontified t face font-lock-keyword-face) 1852 1853 (fontified t) 1853 1857 (fontified t face font-lock-constant-face) 1857 1860 (fontified t) 1860 1865 (fontified t face font-lock-type-face) 1865 1867 (fontified t) 1867 1871 (fontified t face font-lock-type-face) 1871 1874 (fontified t) 1874 1877 (fontified t face font-lock-keyword-face) 1877 1878 (fontified t) 1878 1882 (fontified t face font-lock-constant-face) 1882 1890 (fontified t) 1890 1893 (fontified t face font-lock-keyword-face) 1893 1894 (fontified t) 1894 1898 (fontified t face font-lock-constant-face) 1898 1900 (fontified t) 1900 1906 (fontified t face font-lock-type-face) 1906 1907 (fontified t) 1907 1909 (fontified t face font-lock-keyword-face) 1909 1910 (fontified t) 1910 1920 (fontified t face font-lock-type-face) 1920 1923 (fontified t) 1923 1925 (fontified t face font-lock-keyword-face) 1925 1926 (fontified t) 1926 1930 (fontified t face font-lock-function-name-face) 1930 1939 (fontified t) 1939 1956 (fontified t face font-lock-constant-face) 1956 1971 (fontified t) 1971 1974 (fontified t face font-lock-keyword-face) 1974 1975 (fontified t) 1975 1988 (fontified t face font-lock-variable-name-face) 1988 1991 (fontified t) 1991 2004 (fontified t face font-lock-type-face) 2004 2010 (fontified t) 2010 2018 (fontified t face font-lock-type-face) 2018 2032 (fontified t) 2032 2035 (fontified t face font-lock-keyword-face) 2035 2036 (fontified t) 2036 2053 (fontified t face font-lock-variable-name-face) 2053 2088 (fontified t) 2088 2091 (fontified t face font-lock-keyword-face) 2091 2092 (fontified t) 2092 2108 (fontified t face font-lock-variable-name-face) 2108 2121 (fontified t) 2121 2139 (fontified t) 2139 2144 (fontified t) 2144 2147 (fontified t face font-lock-keyword-face) 2147 2148 (fontified t) 2148 2154 (fontified t face font-lock-variable-name-face) 2154 2157 (fontified t) 2157 2164 (fontified t face font-lock-preprocessor-face) 2164 2174 (fontified t) 2174 2177 (fontified t face font-lock-comment-delimiter-face) 2177 2204 (fontified t face font-lock-comment-face) 2204 2249 (fontified t face font-lock-comment-face) 2249 2268 (face font-lock-comment-face fontified t) 3564 3567 (face font-lock-keyword-face) 3568 3571 (face font-lock-keyword-face) 3572 3584 (face font-lock-variable-name-face) 3646 3649 (face font-lock-keyword-face) 3650 3662 (face font-lock-variable-name-face) 3665 3670 (face font-lock-constant-face) 3672 3677 (face font-lock-constant-face) 3679 3687 (face font-lock-type-face) 3706 3709 (face font-lock-constant-face) 3711 3715 (face font-lock-constant-face) 3717 3724 (face font-lock-type-face) 3745 3748 (face font-lock-constant-face) 3750 3754 (face font-lock-constant-face) 3756 3764 (face font-lock-type-face) 3814 3818 (face font-lock-keyword-face) 3823 3828 (face font-lock-keyword-face) 3863 3865 (face font-lock-type-face) 3866 3871 (face font-lock-type-face) 3873 3878 (face font-lock-type-face) 3879 3883 (face font-lock-type-face) 3899 3900 (syntax-table #1#) 3901 3905 (face font-lock-type-face) 3924 3928 (face font-lock-constant-face) 3930 3933 (face font-lock-constant-face) 3952 3959 (face font-lock-string-face) 3999 4003 (face font-lock-constant-face) 4005 4008 (face font-lock-constant-face) 4026 4035 (face font-lock-string-face) 4078 4079 (syntax-table #1#) 4080 4084 (face font-lock-type-face) 4116 4120 (face font-lock-constant-face) 4122 4125 (face font-lock-constant-face) 4146 4150 (face font-lock-type-face) 4170 4174 (face font-lock-constant-face) 4176 4181 (face font-lock-constant-face) 4183 4187 (face font-lock-constant-face) 4196 4208 (face font-lock-string-face) 4210 4222 (face font-lock-string-face) 4238 4243 (face font-lock-constant-face) 4266 4268 (face font-lock-comment-delimiter-face) 4268 4284 (face font-lock-comment-face) 4284 4328 (face font-lock-comment-face) 4332 4335 (face font-lock-keyword-face) 4336 4345 (face font-lock-variable-name-face) 4348 4353 (face font-lock-preprocessor-face) 4354 4359 (face font-lock-string-face) 4362 4366 (face font-lock-string-face) 4369 4380 (face font-lock-string-face) 4395 4400 (face font-lock-type-face) 4402 4408 (face font-lock-type-face) 4455 4459 (face font-lock-type-face) 4486 4491 (face font-lock-type-face) 4493 4499 (face font-lock-type-face) 4515 4519 (face font-lock-constant-face) 4543 4548 (face font-lock-constant-face) 4550 4555 (face font-lock-type-face) 4583 4588 (face font-lock-constant-face) 4590 4597 (face font-lock-type-face) 4625 4630 (face font-lock-constant-face) 4632 4636 (face font-lock-type-face) 4664 4668 (face font-lock-constant-face) 4708 4712 (face font-lock-keyword-face) 4714 4717 (face font-lock-keyword-face) 4718 4722 (face font-lock-variable-name-face) 4724 4728 (face font-lock-type-face) 4748 4749 (face font-lock-variable-name-face) 4751 4756 (face font-lock-constant-face) 4758 4764 (face font-lock-type-face) 4784 4785 (face font-lock-variable-name-face) 4787 4792 (face font-lock-constant-face) 4794 4799 (face font-lock-type-face) 4819 4820 (face font-lock-variable-name-face) 4822 4827 (face font-lock-constant-face) 4829 4836 (face font-lock-type-face) 4856 4857 (face font-lock-variable-name-face) 4859 4864 (face font-lock-constant-face) 4866 4870 (face font-lock-type-face) 4890 4892 (face font-lock-variable-name-face) 4894 4898 (face font-lock-constant-face) 4900 4902 (face font-lock-constant-face) 4904 4907 (face font-lock-type-face) 4927 4930 (face font-lock-keyword-face) 4931 4943 (face font-lock-variable-name-face) 4946 4949 (face font-lock-type-face) 4950 4954 (face font-lock-constant-face) 4956 4962 (face font-lock-constant-face) 4971 5000 (face font-lock-string-face) 5020 5023 (face font-lock-keyword-face) 5024 5032 (face font-lock-variable-name-face) 5035 5040 (face font-lock-keyword-face) 5081 5084 (face font-lock-comment-delimiter-face) 5084 5102 (face font-lock-comment-face) 5127 5135 (face font-lock-string-face) 5143 5157 (face font-lock-string-face) 5158 5160 (face font-lock-keyword-face) 5176 5177 (syntax-table #1#) 5178 5185 (face rust-builtin-formatting-macro-face) 5186 5187 (face font-lock-string-face) 5187 5189 (face rust-string-interpolation-face) 5189 5196 (face font-lock-string-face) 5228 5242 (face font-lock-string-face) 5250 5270 (face font-lock-string-face) 5272 5273 (syntax-table #1#) 5315 5323 (face font-lock-string-face) 5331 5338 (face font-lock-string-face) 5338 5345 (face font-lock-string-face) 5347 5348 (syntax-table #1#) 5385 5388 (face font-lock-comment-delimiter-face) 5388 5393 (face font-lock-comment-face) 5413 5417 (face font-lock-string-face) 5417 5418 (syntax-table #2# face font-lock-string-face) 5418 5419 (face font-lock-string-face) 5420 5422 (face font-lock-keyword-face) 5438 5439 (syntax-table #1#) 5440 5446 (face font-lock-keyword-face) 5481 5485 (face font-lock-string-face) 5485 5486 (syntax-table #2# face font-lock-string-face) 5486 5487 (face font-lock-string-face) 5489 5490 (syntax-table #1#) 5491 5498 (face rust-builtin-formatting-macro-face) 5499 5500 (face font-lock-string-face) 5500 5502 (face rust-string-interpolation-face) 5502 5503 (face font-lock-string-face) 5535 5554 (face font-lock-string-face) 5556 5557 (syntax-table #1#) 5648 5655 (face rust-builtin-formatting-macro-face) 5656 5657 (face font-lock-string-face) 5657 5659 (face rust-string-interpolation-face) 5659 5660 (face font-lock-string-face) 5713 5716 (face font-lock-comment-delimiter-face) 5716 5735 (face font-lock-comment-face) 5755 5758 (face font-lock-comment-delimiter-face) 5758 5785 (face font-lock-comment-face) 5810 5819 (face font-lock-string-face) 5827 5842 (face font-lock-string-face) 5844 5845 (syntax-table #1#) 5846 5853 (face rust-builtin-formatting-macro-face) 5854 5855 (face font-lock-string-face) 5855 5857 (face rust-string-interpolation-face) 5857 5858 (face font-lock-string-face) 5858 5860 (face rust-string-interpolation-face) 5860 5861 (face font-lock-string-face) 5895 5898 (face font-lock-comment-delimiter-face) 5898 5913 (face font-lock-comment-face) 5933 5936 (face font-lock-comment-delimiter-face) 5936 5963 (face font-lock-comment-face) 5983 5989 (face font-lock-string-face) 5990 5992 (face font-lock-keyword-face) 6036 6037 (syntax-table #1#) 6038 6044 (face font-lock-keyword-face) 6079 6085 (face font-lock-string-face) 6087 6088 (syntax-table #1#) 6089 6096 (face rust-builtin-formatting-macro-face) 6097 6103 (face font-lock-string-face) 6103 6105 (face rust-string-interpolation-face) 6105 6106 (face font-lock-string-face) 6137 6140 (face font-lock-comment-delimiter-face) 6140 6157 (face font-lock-comment-face) 6204 6205 (syntax-table #1#) 6257 6258 (syntax-table #1#) 6356 6357 (syntax-table #1#)) . 1) (undo-tree-id36 . -1715) (undo-tree-id37 . -1715) (undo-tree-id38 . -1747) (undo-tree-id39 . 4959) (undo-tree-id40 . -3556) (undo-tree-id41 . -4096) (undo-tree-id42 . -4096) (undo-tree-id43 . -4096) (undo-tree-id44 . -2956) (undo-tree-id45 . -4096) (undo-tree-id46 . -4096) (undo-tree-id47 . -2956) (undo-tree-id48 . -3598) (undo-tree-id49 . -3598) (undo-tree-id50 . -1771) (undo-tree-id51 . -1770) (undo-tree-id52 . -1420) (undo-tree-id53 . -3598) (undo-tree-id54 . -1771) (undo-tree-id55 . -1771) (undo-tree-id56 . -1844) (undo-tree-id57 . -1820) (undo-tree-id58 . -1420) (undo-tree-id59 . -1771) (undo-tree-id60 . -1844) (undo-tree-id61 . -1844) (undo-tree-id62 . -3578) (undo-tree-id63 . -3660) (undo-tree-id64 . -3447) (undo-tree-id65 . -1844) (undo-tree-id66 . -3578) (undo-tree-id67 . -6587) (undo-tree-id68 . -6586) (undo-tree-id69 . -4502) (undo-tree-id70 . -3578) (undo-tree-id71 . -6587) (undo-tree-id72 . -6587) (undo-tree-id73 . -3906) (undo-tree-id74 . -3849) (undo-tree-id75 . -2084) (undo-tree-id76 . -3906) (undo-tree-id77 . -3906) (undo-tree-id78 . -2084) (undo-tree-id79 . -3906) (undo-tree-id80 . -3849) (undo-tree-id81 . -2084) (undo-tree-id82 . -6587) (undo-tree-id83 . -3906) (undo-tree-id84 . -3906) (undo-tree-id85 . -3416) (undo-tree-id86 . -6504) (undo-tree-id87 . -6447) (undo-tree-id88 . -4382) (undo-tree-id89 . -3906) (undo-tree-id90 . -6504) (undo-tree-id91 . -5100) (undo-tree-id92 . -4096) (undo-tree-id93 . -4096) (undo-tree-id94 . -3556) (undo-tree-id95 . -4096) (undo-tree-id96 . -4096) (undo-tree-id97 . -3556) (undo-tree-id98 . -4096) (undo-tree-id99 . -4096) (undo-tree-id100 . -3556) (undo-tree-id101 . -5100) (undo-tree-id102 . -4096) (undo-tree-id103 . -4096) (undo-tree-id104 . -4096) (undo-tree-id105 . -1708) (undo-tree-id106 . -1714) (undo-tree-id107 . -1704) (undo-tree-id108 . -1707) (undo-tree-id109 . -1710) (undo-tree-id110 . -1747) (undo-tree-id111 . -1715) (undo-tree-id112 . -1747) (undo-tree-id113 . -1747) (undo-tree-id114 . -1747) (undo-tree-id115 . -1747) (undo-tree-id116 . -1715) (undo-tree-id117 . -1777) (undo-tree-id118 . -1777) (undo-tree-id119 . -1797) (undo-tree-id120 . -1797) (undo-tree-id121 . -1747) (undo-tree-id122 . -1747) 1748) nil (23765 5461 3423 768000) 0 nil]) ((nil rear-nonsticky nil 1748 . 1749) (nil fontified nil 1716 . 1749) (1716 . 1749)) nil (23765 5441 310220 87000) 0 nil]) ((1715 . 1716) (t 23765 5224 523504 294000) 1704) nil (23765 5441 310222 411000) 0 nil] [nil nil ((nil rear-nonsticky nil 1737 . 1738) (nil fontified nil 1705 . 1738) (1705 . 1738) 1704 (t 23765 5224 523504 294000)) ((#("use dotenv::dotenv;
use std::env;" 0 4 (fontified nil) 4 10 (fontified nil face font-lock-constant-face) 10 20 (fontified nil) 20 23 (fontified nil face font-lock-keyword-face) 23 24 (fontified nil) 24 27 (fontified nil face font-lock-constant-face) 27 32 (fontified nil) 32 33 (fontified nil rear-nonsticky nil)) . 1705) (undo-tree-id0 . -32) (undo-tree-id1 . -32) (undo-tree-id2 . -32) (undo-tree-id3 . -32) (undo-tree-id4 . -32) (undo-tree-id5 . -32) (undo-tree-id6 . -32) (undo-tree-id7 . -32) (undo-tree-id8 . -32) (undo-tree-id9 . -32) (undo-tree-id10 . -32) (undo-tree-id11 . -32) (undo-tree-id12 . -32) (undo-tree-id13 . -32) (undo-tree-id14 . -4) (undo-tree-id15 . -10) (undo-tree-id16 . -32) (undo-tree-id17 . -32) (undo-tree-id18 . -32) (undo-tree-id19 . -32) (undo-tree-id20 . -32) (undo-tree-id21 . -32) (undo-tree-id22 . -32) (undo-tree-id23 . -32) (undo-tree-id24 . -32) (undo-tree-id25 . -32) (undo-tree-id26 . -32) (undo-tree-id27 . -32) (undo-tree-id28 . -32) (undo-tree-id29 . -32) (undo-tree-id30 . -32) (undo-tree-id31 . -32) (undo-tree-id32 . -32) (undo-tree-id33 . -32) (undo-tree-id34 . -32) (undo-tree-id35 . -32) (nil fontified t 1715 . 1725) (nil fontified t 1709 . 1715) (nil fontified t 1705 . 1709) (nil rear-nonsticky t 1737 . 1738)) (23765 5439 145597 21000) 0 nil]) ((3745 . 3748) (#("3000" 0 4 (fontified t)) . 3745) (t 23764 65109 818798 41000)) nil (23765 5439 161656 526000) 0 nil]) ((1 . 6675) (#("//! Streaming server for Mastodon
//!
//!
//! This server provides live, streaming updates for Mastodon clients.  Specifically, when a server
//! is running this sever, Mastodon clients can use either Server Sent Events or WebSockets to
//! connect to the server with the API described [in the public API
//! documentation](https://docs.joinmastodon.org/api/streaming/)
//!
//! # Notes on data flow
//! * **Client Request → Warp**:
//! Warp filters for valid requests and parses request data. Based on that data, it generates a `User`
//! representing the client that made the request.  The `User` is authenticated, if appropriate.  Warp
//! repeatedly polls the StreamManager for information relevant to the User.
//!
//! * **Warp → StreamManager**:
//! A new `StreamManager` is created for each request.  The `StreamManager` exists to manage concurrent
//! access to the (single) `Receiver`, which it can access behind an `Arc<Mutex>`.  The `StreamManager`
//! polles the `Receiver` for any updates relvant to the current client.  If there are updates, the
//! `StreamManager` filters them with the client's filters and passes any matching updates up to Warp.
//! The `StreamManager` is also responsible for sending `subscribe` commands to Redis (via the
//! `Receiver`) when necessary.
//!
//! * **StreamManger → Receiver**:
//! The Receiver receives data from Redis and stores it in a series of queues (one for each
//! StreamManager). When (asynchronously) polled by the StreamManager, it sends back the  messages
//! relevant to that StreamManager and removes them from the queue.

pub mod error;
pub mod query;
pub mod receiver;
pub mod redis_cmd;
pub mod stream;
pub mod timeline;
pub mod user;
pub mod ws;
use futures::stream::Stream;
use futures::Async;
use receiver::Receiver;
use stream::StreamManager;
use user::{Scope, User};
use warp::path;
use warp::Filter as WarpFilter;

fn main() {
    pretty_env_logger::init();

    let redis_updates = StreamManager::new(Receiver::new());
    let redis_updates_sse = redis_updates.blank_copy();
    let redis_updates_ws = redis_updates.blank_copy();

    let routes = any_of!(
        // GET /api/v1/streaming/user/notification                     [private; notification filter]
        timeline::user_notifications(),
        // GET /api/v1/streaming/user                                  [private; language filter]
        timeline::user(),
        // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
        timeline::public_local_media(),
        // GET /api/v1/streaming/public?only_media=true                [public; language filter]
        timeline::public_media(),
        // GET /api/v1/streaming/public/local                          [public; language filter]
        timeline::public_local(),
        // GET /api/v1/streaming/public                                [public; language filter]
        timeline::public(),
        // GET /api/v1/streaming/direct                                [private; *no* filter]
        timeline::direct(),
        // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
        timeline::hashtag(),
        // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
        timeline::hashtag_local(),
        // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
        timeline::list()
    )
    .untuple_one()
    .and(warp::sse())
    .map(move |timeline: String, user: User, sse: warp::sse::Sse| {
        let mut redis_stream = redis_updates_sse.configure_copy(&timeline, user);
        let event_stream = tokio::timer::Interval::new(
            std::time::Instant::now(),
            std::time::Duration::from_millis(3000),
        )
        .filter_map(move |_| {
            match redis_stream.poll() {
                Ok(Async::Ready(Some(json_value))) => Some((
                    warp::sse::event(json_value[\"event\"].clone().to_string()),
                    warp::sse::data(json_value[\"payload\"].clone()),
                )),
                _ => None,
            }  
        });
        sse.reply(warp::sse::keep(event_stream, None))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    //let redis_updates_ws = StreamManager::new(Receiver::new());
    let websocket = path!(\"api\" / \"v1\" / \"streaming\")
        .and(Scope::Public.get_access_token())
        .and_then(|token| User::from_access_token(token, Scope::Public))
        .and(warp::query())
        .and(query::Media::to_filter())
        .and(query::Hashtag::to_filter())
        .and(query::List::to_filter())
        .and(warp::ws2())
        .and_then(
            move |mut user: User,
                  q: query::Stream,
                  m: query::Media,
                  h: query::Hashtag,
                  l: query::List,
                  ws: warp::ws::Ws2| {
                let unauthorized = Err(warp::reject::custom(\"Error: Invalid Access Token\"));
                let timeline = match q.stream.as_ref() {
                    // Public endpoints:
                    tl @ \"public\" | tl @ \"public:local\" if m.is_truthy() => format!(\"{}:media\", tl),
                    tl @ \"public:media\" | tl @ \"public:local:media\" => tl.to_string(),
                    tl @ \"public\" | tl @ \"public:local\" => tl.to_string(),
                    // User
                    \"user\" if user.id == -1 => return unauthorized,
                    \"user\" => format!(\"{}\", user.id),
                    \"user:notification\" => {
                        user = user.with_notification_filter();
                        format!(\"{}\", user.id)
                    }
                    // Hashtag endpoints:
                    // TODO: handle missing query
                    tl @ \"hashtag\" | tl @ \"hashtag:local\" => format!(\"{}:{}\", tl, h.tag),
                    // List endpoint:
                    // TODO: handle missing query
                    \"list\" if user.authorized_for_list(l.list).is_err() => return unauthorized,
                    \"list\" => format!(\"list:{}\", l.list),
                    // Direct endpoint:
                    \"direct\" if user.id == -1 => return unauthorized,
                    \"direct\" => \"direct\".to_string(),
                    // Other endpoints don't exist:
                    _ => return Err(warp::reject::custom(\"Error: Nonexistent WebSocket query\")),
                };
                let stream = redis_updates_ws.configure_copy(&timeline, user);

                Ok(ws.on_upgrade(move |socket| ws::send_replies(socket, stream)))
            },
        );

    warp::serve(websocket.or(routes)).run(([127, 0, 0, 1], 4000));
}
" 0 34 (fontified t face font-lock-doc-face) 34 38 (fontified t face font-lock-doc-face) 38 42 (fontified t face font-lock-doc-face) 42 142 (fontified t face font-lock-doc-face) 142 237 (fontified t face font-lock-doc-face) 237 305 (fontified t face font-lock-doc-face) 305 370 (fontified t face font-lock-doc-face) 370 374 (fontified t face font-lock-doc-face) 374 399 (fontified t face font-lock-doc-face) 399 432 (fontified t face font-lock-doc-face) 432 500 (fontified t face font-lock-doc-face) 500 535 (fontified t face font-lock-doc-face) 535 638 (fontified t face font-lock-doc-face) 638 715 (fontified t face font-lock-doc-face) 715 719 (fontified t face font-lock-doc-face) 719 751 (fontified t face font-lock-doc-face) 751 855 (fontified t face font-lock-doc-face) 855 928 (fontified t face font-lock-doc-face) 928 929 (fontified t syntax-table #1# face font-lock-doc-face) 929 934 (fontified t face font-lock-doc-face) 934 935 (fontified t syntax-table #1# face font-lock-doc-face) 935 959 (fontified t face font-lock-doc-face) 959 1035 (fontified t face font-lock-doc-face) 1035 1059 (fontified t face font-lock-doc-face) 1059 1162 (fontified t face font-lock-doc-face) 1162 1257 (fontified t face font-lock-doc-face) 1257 1289 (fontified t face font-lock-doc-face) 1289 1293 (fontified t face font-lock-doc-face) 1293 1328 (fontified t face font-lock-doc-face) 1328 1420 (fontified t face font-lock-doc-face) 1420 1519 (fontified t face font-lock-doc-face) 1519 1559 (fontified t face font-lock-doc-face) 1559 1587 (fontified t face font-lock-doc-face) 1587 1588 (fontified t) 1588 1591 (fontified t face font-lock-keyword-face) 1591 1592 (fontified t) 1592 1595 (fontified t face font-lock-keyword-face) 1595 1596 (fontified t) 1596 1601 (fontified t face font-lock-constant-face) 1601 1603 (fontified t) 1603 1606 (fontified t face font-lock-keyword-face) 1606 1607 (fontified t) 1607 1610 (fontified t face font-lock-keyword-face) 1610 1611 (fontified t) 1611 1616 (fontified t face font-lock-constant-face) 1616 1618 (fontified t) 1618 1621 (fontified t face font-lock-keyword-face) 1621 1622 (fontified t) 1622 1625 (fontified t face font-lock-keyword-face) 1625 1626 (fontified t) 1626 1634 (fontified t face font-lock-constant-face) 1634 1636 (fontified t) 1636 1639 (fontified t face font-lock-keyword-face) 1639 1640 (fontified t) 1640 1643 (fontified t face font-lock-keyword-face) 1643 1644 (fontified t) 1644 1653 (fontified t face font-lock-constant-face) 1653 1655 (fontified t) 1655 1658 (fontified t face font-lock-keyword-face) 1658 1659 (fontified t) 1659 1662 (fontified t face font-lock-keyword-face) 1662 1663 (fontified t) 1663 1669 (fontified t face font-lock-constant-face) 1669 1671 (fontified t) 1671 1674 (fontified t face font-lock-keyword-face) 1674 1675 (fontified t) 1675 1678 (fontified t face font-lock-keyword-face) 1678 1679 (fontified t) 1679 1687 (fontified t face font-lock-constant-face) 1687 1689 (fontified t) 1689 1692 (fontified t face font-lock-keyword-face) 1692 1693 (fontified t) 1693 1696 (fontified t face font-lock-keyword-face) 1696 1697 (fontified t) 1697 1701 (fontified t face font-lock-constant-face) 1701 1703 (fontified t) 1703 1706 (fontified t face font-lock-keyword-face) 1706 1707 (fontified t) 1707 1710 (fontified t face font-lock-keyword-face) 1710 1711 (fontified t) 1711 1713 (fontified t face font-lock-constant-face) 1713 1715 (fontified t) 1715 1718 (fontified t face font-lock-keyword-face) 1718 1719 (fontified t) 1719 1726 (fontified t face font-lock-constant-face) 1726 1728 (fontified t) 1728 1734 (fontified t face font-lock-constant-face) 1734 1736 (fontified t) 1736 1742 (fontified t face font-lock-type-face) 1742 1744 (fontified t) 1744 1747 (fontified t face font-lock-keyword-face) 1747 1748 (fontified t) 1748 1755 (fontified t face font-lock-constant-face) 1755 1757 (fontified t) 1757 1762 (fontified t face font-lock-type-face) 1762 1764 (fontified t) 1764 1767 (fontified t face font-lock-keyword-face) 1767 1768 (fontified t) 1768 1776 (fontified t face font-lock-constant-face) 1776 1778 (fontified t) 1778 1786 (fontified t face font-lock-type-face) 1786 1788 (fontified t) 1788 1791 (fontified t face font-lock-keyword-face) 1791 1792 (fontified t) 1792 1798 (fontified t face font-lock-constant-face) 1798 1800 (fontified t) 1800 1813 (fontified t face font-lock-type-face) 1813 1815 (fontified t) 1815 1818 (fontified t face font-lock-keyword-face) 1818 1819 (fontified t) 1819 1823 (fontified t face font-lock-constant-face) 1823 1826 (fontified t) 1826 1831 (fontified t face font-lock-type-face) 1831 1833 (fontified t) 1833 1837 (fontified t face font-lock-type-face) 1837 1840 (fontified t) 1840 1843 (fontified t face font-lock-keyword-face) 1843 1844 (fontified t) 1844 1848 (fontified t face font-lock-constant-face) 1848 1856 (fontified t) 1856 1859 (fontified t face font-lock-keyword-face) 1859 1860 (fontified t) 1860 1864 (fontified t face font-lock-constant-face) 1864 1866 (fontified t) 1866 1872 (fontified t face font-lock-type-face) 1872 1873 (fontified t) 1873 1875 (fontified t face font-lock-keyword-face) 1875 1876 (fontified t) 1876 1886 (fontified t face font-lock-type-face) 1886 1889 (fontified t) 1889 1891 (fontified t face font-lock-keyword-face) 1891 1892 (fontified t) 1892 1896 (fontified t face font-lock-function-name-face) 1896 1905 (fontified t) 1905 1922 (fontified t face font-lock-constant-face) 1922 1937 (fontified t) 1937 1940 (fontified t face font-lock-keyword-face) 1940 1941 (fontified t) 1941 1954 (fontified t face font-lock-variable-name-face) 1954 1957 (fontified t) 1957 1970 (fontified t face font-lock-type-face) 1970 1976 (fontified t) 1976 1984 (fontified t face font-lock-type-face) 1984 1998 (fontified t) 1998 2001 (fontified t face font-lock-keyword-face) 2001 2002 (fontified t) 2002 2019 (fontified t face font-lock-variable-name-face) 2019 2054 (fontified t) 2054 2057 (fontified t face font-lock-keyword-face) 2057 2058 (fontified t) 2058 2074 (fontified t face font-lock-variable-name-face) 2074 2087 (fontified t) 2087 2105 (fontified t) 3164 3172 (fontified t) 3172 3175 (fontified t face font-lock-comment-delimiter-face) 3175 3255 (fontified t face font-lock-comment-face) 3255 3263 (fontified t) 3263 3271 (fontified t face font-lock-constant-face) 3271 3290 (fontified t) 3290 3298 (fontified t) 3298 3301 (fontified t face font-lock-comment-delimiter-face) 3301 3382 (fontified t face font-lock-comment-face) 3382 3390 (fontified t) 3390 3398 (fontified t face font-lock-constant-face) 3398 3407 (fontified t) 3407 3412 (fontified t) 3412 3441 (fontified t) 3441 3445 (fontified t face font-lock-constant-face) 3445 3463 (fontified t) 3463 3467 (fontified t face font-lock-keyword-face) 3467 3469 (fontified t) 3469 3477 (fontified t face font-lock-variable-name-face) 3477 3479 (fontified t) 3479 3485 (fontified t face font-lock-type-face) 3485 3487 (fontified t) 3487 3491 (fontified t face font-lock-variable-name-face) 3491 3493 (fontified t) 3493 3497 (fontified t face font-lock-type-face) 3497 3499 (fontified t) 3499 3502 (fontified t face font-lock-variable-name-face) 3502 3504 (fontified t) 3504 3508 (fontified t face font-lock-constant-face) 3508 3510 (fontified t) 3510 3513 (fontified t face font-lock-constant-face) 3513 3515 (fontified t) 3515 3518 (fontified t face font-lock-type-face) 3518 3530 (fontified t) 3530 3533 (fontified t face font-lock-keyword-face) 3533 3534 (fontified t) 3534 3537 (fontified t face font-lock-keyword-face) 3537 3538 (fontified t) 3538 3550 (fontified t face font-lock-variable-name-face) 3550 3612 (fontified t) 3612 3615 (fontified t face font-lock-keyword-face) 3615 3616 (fontified t) 3616 3628 (fontified t face font-lock-variable-name-face) 3628 3631 (fontified t) 3631 3636 (fontified t face font-lock-constant-face) 3636 3638 (fontified t) 3638 3643 (fontified t face font-lock-constant-face) 3643 3645 (fontified t) 3645 3653 (fontified t face font-lock-type-face) 3653 3672 (fontified t) 3672 3675 (fontified t face font-lock-constant-face) 3675 3677 (fontified t) 3677 3681 (fontified t face font-lock-constant-face) 3681 3683 (fontified t) 3683 3690 (fontified t face font-lock-type-face) 3690 3699 (fontified t) 3699 3711 (fontified t) 3711 3714 (fontified t face font-lock-constant-face) 3714 3716 (fontified t) 3716 3720 (fontified t face font-lock-constant-face) 3720 3722 (fontified t) 3722 3730 (fontified t face font-lock-type-face) 3730 3744 (fontified t) 3744 3745 (fontified t) 3745 3751 (fontified t) 3751 3756 (fontified t) 3756 3761 (fontified t) 3761 3781 (fontified t) 3781 3785 (fontified t face font-lock-keyword-face) 3785 3792 (fontified t) 3792 3804 (fontified t) 3804 3809 (fontified t face font-lock-keyword-face) 3809 3810 (fontified t) 3810 3830 (fontified t) 3830 3832 (fontified t) 3832 3848 (fontified t) 3848 3850 (fontified t face font-lock-type-face) 3850 3851 (fontified t) 3851 3856 (fontified t face font-lock-type-face) 3856 3858 (fontified t) 3858 3863 (fontified t face font-lock-type-face) 3863 3864 (fontified t) 3864 3868 (fontified t face font-lock-type-face) 3868 3881 (fontified t) 3881 3884 (fontified t) 3884 3885 (syntax-table #1# fontified t) 3885 3886 (fontified t) 3886 3890 (fontified t face font-lock-type-face) 3890 3893 (fontified t) 3893 3913 (fontified t) 3913 3917 (fontified t face font-lock-constant-face) 3917 3919 (fontified t) 3919 3922 (fontified t face font-lock-constant-face) 3922 3941 (fontified t) 3941 3948 (fontified t face font-lock-string-face) 3948 3972 (fontified t) 3972 3992 (fontified t) 3992 3996 (fontified t face font-lock-constant-face) 3996 3998 (fontified t) 3998 4001 (fontified t face font-lock-constant-face) 4001 4019 (fontified t) 4019 4028 (fontified t face font-lock-string-face) 4028 4037 (fontified t) 4037 4040 (fontified t) 4040 4059 (fontified t) 4059 4060 (fontified t) 4060 4079 (fontified t) 4079 4080 (fontified t syntax-table #1#) 4080 4081 (fontified t) 4081 4085 (fontified t face font-lock-type-face) 4085 4086 (fontified t) 4086 4087 (fontified t) 4087 4101 (fontified t) 4101 4102 (fontified t) 4102 4103 (fontified t) 4103 4133 (fontified t) 4133 4137 (fontified t face font-lock-constant-face) 4137 4139 (fontified t) 4139 4142 (fontified t face font-lock-constant-face) 4142 4163 (fontified t) 4163 4167 (fontified t face font-lock-type-face) 4167 4170 (fontified t) 4170 4176 (fontified t) 4176 4187 (fontified t) 4187 4191 (fontified t face font-lock-constant-face) 4191 4193 (fontified t) 4193 4198 (fontified t face font-lock-constant-face) 4198 4200 (fontified t) 4200 4204 (fontified t face font-lock-constant-face) 4204 4213 (fontified t) 4213 4225 (fontified t face font-lock-string-face) 4225 4227 (fontified t) 4227 4239 (fontified t face font-lock-string-face) 4239 4242 (fontified t) 4242 4249 (fontified t) 4249 4255 (fontified t) 4255 4260 (fontified t face font-lock-constant-face) 4260 4278 (fontified t) 4278 4283 (fontified t) 4283 4285 (fontified t face font-lock-comment-delimiter-face) 4285 4345 (fontified t face font-lock-comment-face) 4345 4349 (fontified t) 4349 4352 (fontified t face font-lock-keyword-face) 4352 4353 (fontified t) 4353 4358 (fontified t face font-lock-variable-name-face) 4358 4362 (fontified t face font-lock-variable-name-face) 4362 4365 (fontified t) 4365 4370 (fontified t face font-lock-preprocessor-face) 4370 4371 (fontified t) 4371 4376 (fontified t face font-lock-string-face) 4376 4379 (fontified t) 4379 4381 (fontified t face font-lock-string-face) 4381 4383 (fontified t face font-lock-string-face) 4383 4386 (fontified t) 4386 4397 (fontified t face font-lock-string-face) 4397 4399 (fontified t) 4399 4404 (fontified t) 4404 4412 (fontified t) 4412 4417 (fontified t face font-lock-type-face) 4417 4419 (fontified t) 4419 4425 (fontified t face font-lock-type-face) 4425 4446 (fontified t) 4446 4472 (fontified t) 4472 4476 (fontified t face font-lock-type-face) 4476 4502 (fontified t) 4502 4503 (fontified t) 4503 4508 (fontified t face font-lock-type-face) 4508 4510 (fontified t) 4510 4516 (fontified t face font-lock-type-face) 4516 4519 (fontified t) 4519 4528 (fontified t) 4528 4532 (fontified t) 4532 4536 (fontified t face font-lock-constant-face) 4536 4547 (fontified t) 4547 4560 (fontified t) 4560 4565 (fontified t face font-lock-constant-face) 4565 4567 (fontified t) 4567 4568 (fontified t face font-lock-type-face) 4568 4570 (fontified t face font-lock-type-face) 4570 4572 (fontified t face font-lock-type-face) 4572 4586 (fontified t) 4586 4587 (fontified t) 4587 4588 (fontified t) 4588 4589 (fontified t) 4589 4600 (fontified t) 4600 4603 (fontified t face font-lock-constant-face) 4603 4605 (face font-lock-constant-face fontified t) 4605 4607 (fontified t) 4607 4614 (face font-lock-type-face fontified t) 4614 4629 (fontified t) 4629 4642 (fontified t) 4642 4647 (fontified t face font-lock-constant-face) 4647 4649 (fontified t) 4649 4653 (fontified t face font-lock-type-face) 4653 4676 (fontified t) 4676 4681 (fontified t) 4681 4685 (fontified t face font-lock-constant-face) 4685 4694 (fontified t) 4694 4725 (fontified t) 4725 4729 (fontified t face font-lock-keyword-face) 4729 4731 (fontified t) 4731 4734 (fontified t face font-lock-keyword-face) 4734 4735 (fontified t) 4735 4739 (fontified t face font-lock-variable-name-face) 4739 4741 (fontified t) 4741 4742 (fontified t face font-lock-type-face) 4742 4745 (fontified t face font-lock-type-face) 4745 4747 (fontified t) 4747 4765 (fontified t) 4765 4766 (fontified t face font-lock-variable-name-face) 4766 4768 (fontified t) 4768 4773 (fontified t face font-lock-constant-face) 4773 4775 (fontified t) 4775 4778 (fontified t face font-lock-type-face) 4778 4781 (fontified t face font-lock-type-face) 4781 4783 (fontified t) 4783 4801 (fontified t) 4801 4802 (fontified t face font-lock-variable-name-face) 4802 4804 (fontified t) 4804 4809 (fontified t face font-lock-constant-face) 4809 4811 (fontified t) 4811 4816 (fontified t face font-lock-type-face) 4816 4836 (fontified t) 4836 4837 (fontified t face font-lock-variable-name-face) 4837 4839 (fontified t) 4839 4844 (fontified t face font-lock-constant-face) 4844 4846 (fontified t) 4846 4853 (fontified t face font-lock-type-face) 4853 4873 (fontified t) 4873 4874 (fontified t face font-lock-variable-name-face) 4874 4876 (fontified t) 4876 4881 (fontified t face font-lock-constant-face) 4881 4883 (fontified t) 4883 4887 (fontified t face font-lock-type-face) 4887 4899 (fontified t) 4899 4907 (fontified t) 4907 4909 (fontified t face font-lock-variable-name-face) 4909 4911 (fontified t) 4911 4915 (fontified t face font-lock-constant-face) 4915 4917 (fontified t) 4917 4919 (fontified t face font-lock-constant-face) 4919 4921 (fontified t) 4921 4924 (fontified t face font-lock-type-face) 4924 4928 (fontified t) 4928 4944 (fontified t) 4944 4946 (fontified t face font-lock-keyword-face) 4946 4947 (fontified t face font-lock-keyword-face) 4947 4948 (fontified t) 4948 4960 (fontified t face font-lock-variable-name-face) 4960 4963 (fontified t) 4963 4966 (fontified t face font-lock-type-face) 4966 4967 (fontified t) 4967 4971 (fontified t face font-lock-constant-face) 4971 4973 (fontified t) 4973 4979 (fontified t face font-lock-constant-face) 4979 4988 (fontified t) 4988 5017 (fontified t face font-lock-string-face) 5017 5019 (fontified t) 5019 5021 (fontified t) 5021 5037 (fontified t) 5037 5040 (fontified t face font-lock-keyword-face) 5040 5041 (fontified t) 5041 5047 (fontified t face font-lock-variable-name-face) 5047 5049 (fontified t face font-lock-variable-name-face) 5049 5052 (fontified t) 5052 5057 (fontified t face font-lock-keyword-face) 5057 5078 (fontified t) 5078 5087 (fontified t) 5087 5098 (fontified t) 5098 5101 (fontified t face font-lock-comment-delimiter-face) 5101 5119 (fontified t face font-lock-comment-face) 5119 5129 (fontified t) 5129 5144 (fontified t) 5144 5152 (face font-lock-string-face fontified t) 5152 5160 (fontified t) 5160 5174 (face font-lock-string-face fontified t) 5174 5175 (fontified t) 5175 5177 (face font-lock-keyword-face fontified t) 5177 5193 (fontified t) 5193 5194 (syntax-table #1# fontified t) 5194 5195 (fontified t) 5195 5202 (face rust-builtin-formatting-macro-face fontified t) 5202 5203 (fontified t) 5203 5204 (face font-lock-string-face fontified t) 5204 5206 (face rust-string-interpolation-face fontified t) 5206 5213 (face font-lock-string-face fontified t) 5213 5220 (fontified t) 5220 5245 (fontified t) 5245 5247 (fontified t face font-lock-string-face) 5247 5259 (fontified t face font-lock-string-face) 5259 5267 (fontified t) 5267 5283 (fontified t face font-lock-string-face) 5283 5287 (fontified t face font-lock-string-face) 5287 5289 (fontified t) 5289 5290 (syntax-table #1# fontified t) 5290 5307 (fontified t) 5307 5332 (fontified t) 5332 5340 (fontified t face font-lock-string-face) 5340 5348 (fontified t) 5348 5362 (fontified t face font-lock-string-face) 5362 5364 (fontified t) 5364 5365 (syntax-table #1# fontified t) 5365 5402 (fontified t) 5402 5405 (fontified t face font-lock-comment-delimiter-face) 5405 5410 (fontified t face font-lock-comment-face) 5410 5428 (fontified t) 5428 5430 (fontified t) 5430 5434 (fontified t face font-lock-string-face) 5434 5435 (syntax-table #2# fontified t face font-lock-string-face) 5435 5436 (fontified t face font-lock-string-face) 5436 5437 (fontified t) 5437 5439 (fontified t face font-lock-keyword-face) 5439 5455 (fontified t) 5455 5456 (syntax-table #1# fontified t) 5456 5457 (fontified t) 5457 5463 (fontified t face font-lock-keyword-face) 5463 5478 (fontified t) 5478 5498 (fontified t) 5498 5502 (fontified t face font-lock-string-face) 5502 5503 (syntax-table #2# fontified t face font-lock-string-face) 5503 5504 (fontified t face font-lock-string-face) 5504 5506 (fontified t) 5506 5507 (syntax-table #1# fontified t) 5507 5508 (fontified t) 5508 5515 (fontified t face rust-builtin-formatting-macro-face) 5515 5516 (fontified t) 5516 5517 (fontified t face font-lock-string-face) 5517 5519 (fontified t face rust-string-interpolation-face) 5519 5520 (fontified t face font-lock-string-face) 5520 5521 (fontified t) 5521 5532 (fontified t) 5532 5552 (fontified t) 5552 5571 (fontified t face font-lock-string-face) 5571 5573 (fontified t) 5573 5574 (syntax-table #1# fontified t) 5574 5578 (fontified t) 5578 5619 (fontified t) 5619 5641 (fontified t) 5641 5665 (fontified t) 5665 5672 (fontified t face rust-builtin-formatting-macro-face) 5672 5673 (fontified t) 5673 5674 (fontified t face font-lock-string-face) 5674 5676 (fontified t face rust-string-interpolation-face) 5676 5677 (fontified t face font-lock-string-face) 5677 5720 (fontified t) 5720 5730 (fontified t) 5730 5733 (face font-lock-comment-delimiter-face fontified t) 5733 5752 (face font-lock-comment-face fontified t) 5861 5862 (syntax-table #1#) 6053 6054 (syntax-table #1#) 6104 6105 (syntax-table #1#) 6221 6222 (syntax-table #1#) 6274 6275 (syntax-table #1#) 6373 6374 (syntax-table #1#)) . 1) (undo-tree-id2066 . -4102) (undo-tree-id2067 . -4102) (undo-tree-id2068 . -4102) (undo-tree-id2069 . -4102) (undo-tree-id2070 . 2622) (undo-tree-id2071 . -4102) (undo-tree-id2072 . -4102) (undo-tree-id2073 . 2638) (undo-tree-id2074 . -3255) (undo-tree-id2075 . -4102) (undo-tree-id2076 . -4175) (undo-tree-id2077 . -4175) (undo-tree-id2078 . -3255) (undo-tree-id2079 . -4175) (undo-tree-id2080 . -4175) (undo-tree-id2081 . -3255) (undo-tree-id2082 . -4057) (undo-tree-id2083 . -4102) (undo-tree-id2084 . -4102) (undo-tree-id2085 . -3255) (undo-tree-id2086 . -4102) (undo-tree-id2087 . -4102) (undo-tree-id2088 . -3255) (undo-tree-id2089 . -4102) (undo-tree-id2090 . -4102) (undo-tree-id2091 . -4102) (undo-tree-id2092 . -3255) (undo-tree-id2093 . -4102) (undo-tree-id2094 . -4102) (undo-tree-id2095 . -4101) (undo-tree-id2096 . -4074) (undo-tree-id2097 . -3255) (undo-tree-id2098 . -4101) (undo-tree-id2099 . -3255) (undo-tree-id2100 . -4101) (undo-tree-id2101 . -4101) (undo-tree-id2102 . -4101) (undo-tree-id2103 . -4074) (undo-tree-id2104 . -3255) (undo-tree-id2105 . -4101) (undo-tree-id2106 . -4074) (undo-tree-id2107 . -3255) 4102) nil (23764 65109 786065 660000) 0 nil]) ((#("
" 0 1 (fontified t)) . 4088)) nil (23764 65109 786079 331000) 0 nil]) ((4080 . 4087) (#(" " 0 1 (fontified nil)) . -4080) (4080 . 4081) (#(">" 0 1 (fontified nil syntax-table #1#)) . -4080) (4079 . 4081) (4077 . 4079) (#("-" 0 1 (fontified t)) . -4077) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (#(">" 0 1 (fontified t syntax-table #1#)) . -4078) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1) 4079 (4078 . 4079) (#(" " 0 1 (fontified nil)) . -4078) (4078 . 4079) (#(">" 0 1 (fontified nil syntax-table #1#)) . -4078) (4077 . 4079) (4060 . 4077) 4059) nil (23764 65109 786100 806000) 0 nil]) ((#(" " 0 1 (fontified t)) . 3831)) nil (23764 65109 786107 998000) 0 nil]) ((#("match" 0 5 (fontified t face font-lock-keyword-face)) . 3831) (undo-tree-id2112 . -2) (undo-tree-id2113 . -2) 3833) nil (23764 65109 786114 729000) 0 nil]) ((3805 . 3811)) nil (23764 65109 786117 815000) 0 nil]) ((4059 . 4060)) nil (23764 65109 786120 254000) 0 nil]) ((#("{}" 0 1 (fontified t) 1 2 (fontified t)) . 4076) (undo-tree-id2114 . -1) (undo-tree-id2115 . -1) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . 1) (undo-tree-id2119 . -1) (undo-tree-id2120 . -1) (undo-tree-id2121 . -1) (undo-tree-id2122 . -1) (undo-tree-id2123 . -1) (undo-tree-id2124 . -1) (undo-tree-id2125 . -1) (undo-tree-id2126 . -1) (undo-tree-id2127 . -1) (undo-tree-id2128 . -1) (undo-tree-id2129 . -1) (undo-tree-id2130 . -1)) nil (23764 65109 786151 56000) 0 nil]) ((#("            " 0 12 (fontified nil)) . 4077) (undo-tree-id2131 . 12) (#("
" 0 1 (fontified t)) . -4077) (undo-tree-id2132 . -1) (undo-tree-id2133 . -1) (undo-tree-id2134 . -1) (undo-tree-id2135 . -1) (undo-tree-id2136 . -1) (undo-tree-id2137 . -1) (undo-tree-id2138 . -1) (undo-tree-id2139 . -1) (undo-tree-id2140 . -1) (undo-tree-id2141 . -1) (undo-tree-id2142 . -1) (undo-tree-id2143 . -1) (undo-tree-id2144 . -1) (undo-tree-id2145 . -1) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1) 4061) nil (23764 65109 786185 708000) 0 nil]) ((4060 . 4061)) nil (23764 65109 786191 987000) 0 nil]) ((#("                None
" 0 16 (fontified t) 16 20 (fontified t face font-lock-type-face) 20 21 (fontified t)) . 4077) (undo-tree-id2148 . 21) (undo-tree-id2149 . -14) (undo-tree-id2150 . -14) 4091) nil (23764 65109 786203 802000) 0 nil]) ((#("else" 0 4 (fontified t face font-lock-keyword-face)) . 4074)) nil (23764 65109 786207 620000) 0 nil]) ((3885 . 3887) (#(" " 0 1 (fontified nil)) . -3885) (3885 . 3886) (#(">" 0 1 (fontified nil syntax-table #1#)) . -3885) (3885 . 3886) (3883 . 3885) (#(")" 0 1 (fontified nil)) . 3883) (3882 . 3883) (#(" " 0 1 (fontified nil)) . -3882) (3882 . 3883) (#(")" 0 1 (fontified nil)) . -3882) (3882 . 3883) (#(")" 0 1 (fontified nil)) . 3882) (3881 . 3882) (#(")" 0 1 (fontified nil)) . 3881) (3870 . 3881) (3869 . 3871) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -3869) (3865 . 3870) (3864 . 3866) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -3864) (3864 . 3865) (3859 . 3864) (#("Re" 0 2 (fontified t face font-lock-type-face)) . -3859) (undo-tree-id2151 . -2) (undo-tree-id2152 . -2) 3861 (3857 . 3861) (3852 . 3857) (#("Asy" 0 3 (fontified t face font-lock-type-face)) . -3852) (undo-tree-id2153 . -3) (undo-tree-id2154 . -3) 3855 (3852 . 3855) (#("R" 0 1 (fontified t face font-lock-type-face)) . -3852) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) 3853 (3852 . 3853) (3851 . 3853) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -3851) (3849 . 3852)) nil (23764 65109 786245 761000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((4054 . 4055)) ((#("," 0 1 (fontified t)) . 4054) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1)) (23764 64999 570061 706000) 0 nil]) ((#("h" 0 1 (fontified t)) . -4069) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) 4070 (4069 . 4070)) ((#("h" 0 1 (fontified nil)) . 4069) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (4069 . 4070)) (23764 64999 571954 109000) 0 nil]) ((#("{}" 0 1 (fontified t) 1 2 (fontified t)) . 4069) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . 1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (undo-tree-id1997 . 2) (undo-tree-id1998 . -1) (undo-tree-id1999 . 1) (undo-tree-id2000 . -1) (undo-tree-id2001 . 1) (undo-tree-id2002 . -2) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (undo-tree-id2009 . -1)) ((4069 . 4071)) (23764 64999 877492 770000) 0 nil]) ((#("            " 0 12 (fontified nil)) . 4070) (undo-tree-id2010 . 12) (undo-tree-id2011 . 12) (undo-tree-id2012 . -12) (#("
" 0 1 (fontified t)) . -4070) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) (undo-tree-id2015 . -1) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (undo-tree-id2026 . -1) (undo-tree-id2027 . -1) (undo-tree-id2028 . -1) (undo-tree-id2029 . 1) 4069) ((4070 . 4071) (4070 . 4082)) (23764 65000 160748 921000) 0 nil]) ((#("                None
" 0 16 (fontified t) 16 20 (fontified t face font-lock-type-face) 20 21 (fontified t)) . 4071) (undo-tree-id2030 . 21) (undo-tree-id2031 . -14) (undo-tree-id2032 . -14) 4085) ((4071 . 4092)) (23764 65000 454112 997000) 0 nil]) ((#("else " 0 4 (fontified t face font-lock-keyword-face) 4 5 (fontified t)) . 4069) (t 23764 64956 819297 732000)) ((4069 . 4074)) (23764 65000 760572 781000) 0 nil]) ((3870 . 3880) (3869 . 3871) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -3869) (undo-tree-id1935 . -1) (3869 . 3870)) ((#("(" 0 1 (fontified nil face font-lock-type-face)) . 3869) (3869 . 3870) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 3869) (#("json_value" 0 10 (fontified t)) . 3870) (t 23764 64956 819297 732000)) (23764 65001 49532 177000) 0 nil]) ((3873 . 3874) (#(" " 0 1 (fontified nil)) . -3873) (3873 . 3874) (#(">" 0 1 (fontified nil syntax-table #1#)) . -3873) (3871 . 3874)) ((#(" =>" 0 2 (fontified nil) 2 3 (fontified nil syntax-table #1#)) . 3871) (3873 . 3874) (#(" " 0 1 (fontified nil)) . 3873) (3873 . 3874) (#(">" 0 1 (fontified t syntax-table #1#)) . 3873)) (23764 65001 376337 339000) 0 nil]) ((3869 . 3870) (#(")" 0 1 (fontified t)) . -3865) (3870 . 3871) (#(")" 0 1 (fontified t)) . -3866) 3865 (3864 . 3866) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -3864) (3864 . 3865) (3859 . 3864) (#("R" 0 1 (fontified t face font-lock-type-face)) . -3859) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) 3860 (3857 . 3860) (3852 . 3857) (#("Asy" 0 3 (fontified t face font-lock-type-face)) . -3852) (undo-tree-id1938 . -3) (undo-tree-id1939 . -3) 3855 (3852 . 3855) (#("R" 0 1 (fontified t face font-lock-type-face)) . -3852) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -3853) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (#("a" 0 1 (fontified t face font-lock-type-face)) . -3854) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (#("d" 0 1 (fontified t face font-lock-type-face)) . -3855) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (#("y" 0 1 (fontified t face font-lock-type-face)) . -3856) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (#(":" 0 1 (fontified t)) . -3857) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (#(":" 0 1 (fontified t)) . -3858) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) 3859 (3852 . 3859) (3851 . 3853) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -3851) (3849 . 3852)) ((#("Ok(" 0 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face)) . 3849) (undo-tree-id2046 . -2) (undo-tree-id2047 . -2) (3851 . 3852) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 3851) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (#("Ready::" 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face) 3 4 (fontified nil face font-lock-type-face) 4 5 (fontified nil face font-lock-type-face) 5 6 (fontified nil) 6 7 (fontified nil)) . 3852) (3852 . 3859) (#("Asy" 0 3 (fontified nil face font-lock-type-face)) . 3852) (3852 . 3855) (#("Async" 0 5 (fontified nil face font-lock-type-face)) . 3852) (undo-tree-id2050 . -5) (undo-tree-id2051 . -5) (#("::R" 0 2 (fontified nil) 2 3 (fontified nil face font-lock-type-face)) . 3857) (undo-tree-id2052 . -2) (undo-tree-id2053 . -2) (3859 . 3860) (#("Ready" 0 5 (fontified nil face font-lock-type-face)) . 3859) (undo-tree-id2054 . -5) (undo-tree-id2055 . -5) (#("(" 0 1 (fontified nil face font-lock-type-face)) . 3864) (3864 . 3865) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 3864) (undo-tree-id2056 . -1) (3866 . 3867) (#(")" 0 1 (fontified nil)) . 3870) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (3865 . 3866) (#(")" 0 1 (fontified t)) . 3869)) (23764 65001 749130 645000) 0 nil]) (3854) (nil undo-tree-canary) (23764 65002 134458 226000) 0 nil]) ((#("j" 0 1 (fontified t)) . -3830) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) 3831 (3829 . 3831) (#("j" 0 1 (fontified t)) . -3829) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (#("h" 0 1 (fontified t)) . -3830) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) 3831 (3824 . 3831)) nil (23764 65002 506049 855000) 0 nil]) ((#("i" 0 1 (fontified t)) . -3805) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) 3806 (3805 . 3806) (#("if let Ok(Async::Ready(Some(json_value))) = " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 4 (fontified t face font-lock-keyword-face) 4 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 9 (fontified t face font-lock-type-face) 9 10 (fontified t) 10 15 (fontified t face font-lock-type-face) 15 17 (fontified t) 17 22 (fontified t face font-lock-type-face) 22 23 (fontified t) 23 27 (fontified t face font-lock-type-face) 27 44 (fontified t)) . 3805) (undo-tree-id1962 . 40)) nil (23764 64956 733219 579000) 0 nil] [nil nil ((3805 . 3806) (#("if l" 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 4 (fontified t face font-lock-keyword-face)) . 3805) (undo-tree-id1884 . -4) (undo-tree-id1885 . -4) (undo-tree-id1886 . -4) (undo-tree-id1887 . -4) (undo-tree-id1888 . -4) (undo-tree-id1889 . -4) (undo-tree-id1890 . -4) (undo-tree-id1891 . -3) (undo-tree-id1892 . -4) (undo-tree-id1893 . -3) (undo-tree-id1894 . -3) (undo-tree-id1895 . -4) (undo-tree-id1896 . -3) (undo-tree-id1897 . -3) (undo-tree-id1898 . -4) (undo-tree-id1899 . -3) (undo-tree-id1900 . -4) (undo-tree-id1901 . -3) (undo-tree-id1902 . -4) (undo-tree-id1903 . -2) (undo-tree-id1904 . -3) (undo-tree-id1905 . -2) (undo-tree-id1906 . -2) (undo-tree-id1907 . -3) (undo-tree-id1908 . -2) (undo-tree-id1909 . -2) (undo-tree-id1910 . -3) (undo-tree-id1911 . -2) (undo-tree-id1912 . -3) (undo-tree-id1913 . -2) (undo-tree-id1914 . -3) (undo-tree-id1915 . -1) (undo-tree-id1916 . -2) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -2) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -2) (undo-tree-id1923 . -1) (undo-tree-id1924 . -2) (undo-tree-id1925 . -1) (undo-tree-id1926 . -2) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1)) ((3805 . 3809) (#("r" 0 1 (fontified t)) . 3805) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1)) (23764 64912 426374 16000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((#(")" 0 1 (fontified nil)) . 4228) (4227 . 4228) (4226 . 4228) (#("(" 0 1 (fontified nil)) . -4226) (4216 . 4227)) ((#(".to_string(" 0 10 (fontified nil) 10 11 (fontified nil)) . 4216) (4226 . 4227) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 4226) (#(")" 0 1 (fontified nil)) . 4227) (4228 . 4229) (t 23764 64709 846709 322000)) (23764 64709 747541 887000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 4050) (4049 . 4050) (4048 . 4050) (#("(" 0 1 (fontified nil)) . -4048) (4048 . 4049) (4038 . 4048)) ((#(".to_string" 0 10 (fontified nil)) . 4038) (#("(" 0 1 (fontified nil)) . 4048) (4048 . 4049) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 4048) (#(")" 0 1 (fontified nil)) . 4049) (4050 . 4051)) (23764 64892 73519 584000) 0 nil]) ((4201 . 4202)) ((#(":" 0 1 (fontified t face font-lock-string-face)) . 4201) (undo-tree-id1728 . -1)) (23764 64892 429934 829000) 0 nil]) ((4201 . 4202) (#(" " 0 1 (fontified nil)) . -4201) (4201 . 4202) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -4201) (4201 . 4202) (4200 . 4202) (#("\"" 0 1 (fontified nil)) . -4200) (4200 . 4201)) ((#("\"" 0 1 (fontified nil)) . 4200) (undo-tree-id1729 . 1) (4200 . 4201) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 4200) (undo-tree-id1730 . -2) (undo-tree-id1731 . -2) (undo-tree-id1732 . -2) (undo-tree-id1733 . -2) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -2) (undo-tree-id1737 . -2) (undo-tree-id1738 . -2) (undo-tree-id1739 . -2) (undo-tree-id1740 . -2) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -2) (undo-tree-id1752 . 1) (undo-tree-id1753 . -1) (#(")" 0 1 (fontified nil face font-lock-string-face)) . 4201) (undo-tree-id1754 . 1) (4201 . 4202) (#(" " 0 1 (fontified nil)) . 4201) (undo-tree-id1755 . 1) (4201 . 4202) (#(")" 0 1 (fontified t face font-lock-string-face)) . 4201) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . 1) (undo-tree-id1759 . -1)) (23764 64892 706394 152000) 0 nil]) ((#("json_value[\"payload\"].clone()" 0 11 (fontified t) 11 20 (fontified t face font-lock-string-face) 20 29 (fontified t)) . 4200)) ((4200 . 4229)) (23764 64893 35783 331000) 0 nil]) ((4142 . 4148) (#("event" 0 5 (fontified t face font-lock-string-face)) . 4142) (undo-tree-id1719 . -4) (undo-tree-id1720 . -4) 4146) ((4142 . 4147) (#("update" 0 6 (fontified t face font-lock-string-face)) . 4142)) (23764 64893 290909 652000) 0 nil]) ((4142 . 4147) (4141 . 4143) (#("\"" 0 1 (fontified nil)) . -4141) (4141 . 4142) (#("json_value[\"event\"].clone()" 0 11 (fontified t) 11 18 (fontified t face font-lock-string-face) 18 27 (fontified t)) . 4141) (undo-tree-id1721 . -26) (undo-tree-id1722 . -26) (undo-tree-id1723 . -26) (undo-tree-id1724 . -26) (undo-tree-id1725 . -26) 4167) ((4141 . 4168) (#("\"" 0 1 (fontified nil)) . 4141) (4141 . 4142) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 4141) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (#("event" 0 5 (fontified t face font-lock-string-face)) . 4142) (undo-tree-id1770 . -4) (undo-tree-id1771 . -4) (undo-tree-id1772 . -4) (undo-tree-id1773 . -4) (undo-tree-id1774 . -4) (undo-tree-id1775 . -4) (undo-tree-id1776 . -4) (undo-tree-id1777 . -4) (undo-tree-id1778 . -4)) (23764 64893 614649 87000) 0 nil]) ((#("                None
" 0 16 (fontified t) 16 20 (fontified t face font-lock-type-face) 20 21 (fontified t)) . 4270) (undo-tree-id1726 . -16) (undo-tree-id1727 . -16) 4286) ((4270 . 4291)) (23764 64893 977151 233000) 0 nil]) ((4081 . 4270) 4098) ((#("                Some((
                    warp::sse::event(json_value[\"event\"].clone().to_string()),
                    warp::sse::data(json_value[\"payload\"].clone()),
                ))
" 0 16 (fontified t) 16 20 (fontified t face font-lock-type-face) 20 23 (fontified t) 23 43 (fontified t) 43 47 (fontified t face font-lock-constant-face) 47 49 (fontified t) 49 52 (fontified t face font-lock-constant-face) 52 60 (fontified t) 60 71 (fontified t) 71 78 (fontified t face font-lock-string-face) 78 87 (fontified t) 87 102 (fontified t) 102 122 (fontified t) 122 126 (fontified t face font-lock-constant-face) 126 128 (fontified t) 128 131 (fontified t face font-lock-constant-face) 131 138 (fontified t) 138 149 (fontified t) 149 158 (fontified t face font-lock-string-face) 158 167 (fontified t) 167 170 (fontified t) 170 189 (fontified t)) . 4081) (undo-tree-id1779 . -21) (undo-tree-id1780 . -188) (undo-tree-id1781 . -60) (undo-tree-id1782 . 102) (undo-tree-id1783 . -60) (undo-tree-id1784 . -86) (undo-tree-id1785 . 22) (undo-tree-id1786 . -125) (undo-tree-id1787 . -125) (undo-tree-id1788 . -125) (undo-tree-id1789 . -125) (undo-tree-id1790 . -125) (undo-tree-id1791 . -125) (undo-tree-id1792 . -21) (undo-tree-id1793 . -46) (undo-tree-id1794 . -60) (undo-tree-id1795 . -21) (undo-tree-id1796 . -20) (undo-tree-id1797 . -20) (undo-tree-id1798 . -138) (undo-tree-id1799 . -20) (undo-tree-id1800 . -138) (undo-tree-id1801 . -138) (undo-tree-id1802 . -20) (undo-tree-id1803 . -138) (undo-tree-id1804 . -20) (undo-tree-id1805 . -138) (undo-tree-id1806 . -138) (undo-tree-id1807 . -137) (undo-tree-id1808 . -138) (undo-tree-id1809 . -138) (undo-tree-id1810 . -138) (undo-tree-id1811 . -138) (undo-tree-id1812 . -138) (undo-tree-id1813 . -138) (undo-tree-id1814 . -60) (undo-tree-id1815 . -60) (undo-tree-id1816 . -138) (undo-tree-id1817 . -138) (undo-tree-id1818 . -138) (undo-tree-id1819 . -138) (undo-tree-id1820 . -138) (undo-tree-id1821 . -138) (undo-tree-id1822 . -138) (undo-tree-id1823 . -138) (undo-tree-id1824 . -138) (undo-tree-id1825 . -138) (undo-tree-id1826 . -138) (undo-tree-id1827 . -138) (undo-tree-id1828 . -138) (undo-tree-id1829 . -138) (undo-tree-id1830 . -138) (undo-tree-id1831 . -138) (undo-tree-id1832 . -138) (undo-tree-id1833 . -138) (undo-tree-id1834 . -138) (undo-tree-id1835 . -138) (undo-tree-id1836 . -138) (undo-tree-id1837 . -137) (undo-tree-id1838 . -138) (undo-tree-id1839 . -138) (undo-tree-id1840 . -138) (undo-tree-id1841 . -138) (undo-tree-id1842 . -138) (undo-tree-id1843 . -138) (undo-tree-id1844 . -138) (undo-tree-id1845 . -138) (undo-tree-id1846 . -138) (undo-tree-id1847 . -138) (undo-tree-id1848 . -138) (undo-tree-id1849 . -138) (undo-tree-id1850 . -138) (undo-tree-id1851 . -60) (undo-tree-id1852 . -138) (undo-tree-id1853 . -60) (undo-tree-id1854 . -60) (undo-tree-id1855 . -138) (undo-tree-id1856 . -60) (undo-tree-id1857 . -60) (undo-tree-id1858 . -138) (undo-tree-id1859 . -60) (undo-tree-id1860 . -138) (undo-tree-id1861 . -60) (undo-tree-id1862 . -138) (undo-tree-id1863 . -86) (undo-tree-id1864 . -86) (undo-tree-id1865 . -86) (undo-tree-id1866 . -86) (undo-tree-id1867 . -86) (undo-tree-id1868 . -86) (undo-tree-id1869 . -86) (undo-tree-id1870 . -86) (undo-tree-id1871 . -86) (undo-tree-id1872 . -86) (undo-tree-id1873 . -86) (undo-tree-id1874 . -86) (undo-tree-id1875 . -149) (undo-tree-id1876 . -150) (undo-tree-id1877 . -85) (undo-tree-id1878 . -86) (undo-tree-id1879 . -86) (undo-tree-id1880 . -86) (undo-tree-id1881 . -86) (undo-tree-id1882 . -86) (undo-tree-id1883 . -86)) (23764 64894 282428 443000) 0 nil]) ((3745 . 3746) (#("1" 0 1 (fontified t)) . 3745)) nil (23764 64912 430447 139000) 0 nil]) ((3748 . 3749) (t 23764 64471 680651 4000)) nil (23764 64709 747605 795000) 0 nil]) ((1 . 6736) (#("//! Streaming server for Mastodon
//!
//!
//! This server provides live, streaming updates for Mastodon clients.  Specifically, when a server
//! is running this sever, Mastodon clients can use either Server Sent Events or WebSockets to
//! connect to the server with the API described [in the public API
//! documentation](https://docs.joinmastodon.org/api/streaming/)
//!
//! # Notes on data flow
//! * **Client Request → Warp**:
//! Warp filters for valid requests and parses request data. Based on that data, it generates a `User`
//! representing the client that made the request.  The `User` is authenticated, if appropriate.  Warp
//! repeatedly polls the StreamManager for information relevant to the User.
//!
//! * **Warp → StreamManager**:
//! A new `StreamManager` is created for each request.  The `StreamManager` exists to manage concurrent
//! access to the (single) `Receiver`, which it can access behind an `Arc<Mutex>`.  The `StreamManager`
//! polles the `Receiver` for any updates relvant to the current client.  If there are updates, the
//! `StreamManager` filters them with the client's filters and passes any matching updates up to Warp.
//! The `StreamManager` is also responsible for sending `subscribe` commands to Redis (via the
//! `Receiver`) when necessary.
//!
//! * **StreamManger → Receiver**:
//! The Receiver receives data from Redis and stores it in a series of queues (one for each
//! StreamManager). When (asynchronously) polled by the StreamManager, it sends back the  messages
//! relevant to that StreamManager and removes them from the queue.

pub mod error;
pub mod query;
pub mod receiver;
pub mod redis_cmd;
pub mod stream;
pub mod timeline;
pub mod user;
pub mod ws;
use futures::stream::Stream;
use futures::Async;
use receiver::Receiver;
use stream::StreamManager;
use user::{Scope, User};
use warp::path;
use warp::Filter as WarpFilter;

fn main() {
    pretty_env_logger::init();

    let redis_updates = StreamManager::new(Receiver::new());
    let redis_updates_sse = redis_updates.blank_copy();
    let redis_updates_ws = redis_updates.blank_copy();

    let routes = any_of!(
        // GET /api/v1/streaming/user/notification                     [private; notification filter]
        timeline::user_notifications(),
        // GET /api/v1/streaming/user                                  [private; language filter]
        timeline::user(),
        // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
        timeline::public_local_media(),
        // GET /api/v1/streaming/public?only_media=true                [public; language filter]
        timeline::public_media(),
        // GET /api/v1/streaming/public/local                          [public; language filter]
        timeline::public_local(),
        // GET /api/v1/streaming/public                                [public; language filter]
        timeline::public(),
        // GET /api/v1/streaming/direct                                [private; *no* filter]
        timeline::direct(),
        // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
        timeline::hashtag(),
        // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
        timeline::hashtag_local(),
        // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
        timeline::list()
    )
    .untuple_one()
    .and(warp::sse())
    .map(move |timeline: String, user: User, sse: warp::sse::Sse| {
        let mut redis_stream = redis_updates_sse.configure_copy(&timeline, user);
        let event_stream = tokio::timer::Interval::new(
            std::time::Instant::now(),
            std::time::Duration::from_millis(100),
        )
        .filter_map(move |_| {
            if let Ok(Async::Ready(Some(json_value))) = redis_stream.poll() {
                Some((
                    warp::sse::event(json_value[\"event\"].clone().to_string()),
                    warp::sse::data(json_value[\"payload\"].clone()),
                ))
            } else {
                None
            }
        });
        sse.reply(warp::sse::keep(
            event_stream,
            None,
        ))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    //let redis_updates_ws = StreamManager::new(Receiver::new());
    let websocket = path!(\"api\" / \"v1\" / \"streaming\")
        .and(Scope::Public.get_access_token())
        .and_then(|token| User::from_access_token(token, Scope::Public))
        .and(warp::query())
        .and(query::Media::to_filter())
        .and(query::Hashtag::to_filter())
        .and(query::List::to_filter())
        .and(warp::ws2())
        .and_then(
            move |mut user: User,
                  q: query::Stream,
                  m: query::Media,
                  h: query::Hashtag,
                  l: query::List,
                  ws: warp::ws::Ws2| {
                let unauthorized = Err(warp::reject::custom(\"Error: Invalid Access Token\"));
                let timeline = match q.stream.as_ref() {
                    // Public endpoints:
                    tl @ \"public\" | tl @ \"public:local\" if m.is_truthy() => format!(\"{}:media\", tl),
                    tl @ \"public:media\" | tl @ \"public:local:media\" => tl.to_string(),
                    tl @ \"public\" | tl @ \"public:local\" => tl.to_string(),
                    // User
                    \"user\" if user.id == -1 => return unauthorized,
                    \"user\" => format!(\"{}\", user.id),
                    \"user:notification\" => {
                        user = user.with_notification_filter();
                        format!(\"{}\", user.id)
                    }
                    // Hashtag endpoints:
                    // TODO: handle missing query
                    tl @ \"hashtag\" | tl @ \"hashtag:local\" => format!(\"{}:{}\", tl, h.tag),
                    // List endpoint:
                    // TODO: handle missing query
                    \"list\" if user.authorized_for_list(l.list).is_err() => return unauthorized,
                    \"list\" => format!(\"list:{}\", l.list),
                    // Direct endpoint:
                    \"direct\" if user.id == -1 => return unauthorized,
                    \"direct\" => \"direct\".to_string(),
                    // Other endpoints don't exist:
                    _ => return Err(warp::reject::custom(\"Error: Nonexistent WebSocket query\")),
                };
                let stream = redis_updates_ws.configure_copy(&timeline, user);

                Ok(ws.on_upgrade(move |socket| ws::send_replies(socket, stream)))
            },
        );

    warp::serve(websocket.or(routes)).run(([127, 0, 0, 1], 4000));
}
" 0 34 (face font-lock-doc-face) 34 38 (face font-lock-doc-face) 38 42 (face font-lock-doc-face) 42 142 (face font-lock-doc-face) 142 237 (face font-lock-doc-face) 237 305 (face font-lock-doc-face) 305 370 (face font-lock-doc-face) 370 374 (face font-lock-doc-face) 374 399 (face font-lock-doc-face) 399 432 (face font-lock-doc-face) 432 500 (face font-lock-doc-face) 500 535 (face font-lock-doc-face) 535 638 (face font-lock-doc-face) 638 715 (face font-lock-doc-face) 715 719 (face font-lock-doc-face) 719 751 (face font-lock-doc-face) 751 855 (face font-lock-doc-face) 855 928 (face font-lock-doc-face) 928 929 (face font-lock-doc-face syntax-table #1#) 929 934 (face font-lock-doc-face) 934 935 (face font-lock-doc-face syntax-table #1#) 935 959 (face font-lock-doc-face) 959 1035 (face font-lock-doc-face) 1035 1059 (face font-lock-doc-face) 1059 1162 (face font-lock-doc-face) 1162 1257 (face font-lock-doc-face) 1257 1289 (face font-lock-doc-face) 1289 1293 (face font-lock-doc-face) 1293 1328 (face font-lock-doc-face) 1328 1420 (face font-lock-doc-face) 1420 1519 (face font-lock-doc-face) 1519 1559 (face font-lock-doc-face) 1559 1587 (face font-lock-doc-face) 1588 1591 (face font-lock-keyword-face) 1592 1595 (face font-lock-keyword-face) 1596 1601 (face font-lock-constant-face) 1603 1606 (face font-lock-keyword-face) 1607 1610 (face font-lock-keyword-face) 1611 1616 (face font-lock-constant-face) 1618 1621 (face font-lock-keyword-face) 1622 1625 (face font-lock-keyword-face) 1626 1634 (face font-lock-constant-face) 1636 1639 (face font-lock-keyword-face) 1640 1643 (face font-lock-keyword-face) 1644 1653 (face font-lock-constant-face) 1655 1658 (face font-lock-keyword-face) 1659 1662 (face font-lock-keyword-face) 1663 1669 (face font-lock-constant-face) 1671 1674 (face font-lock-keyword-face) 1675 1678 (face font-lock-keyword-face) 1679 1687 (face font-lock-constant-face) 1689 1692 (face font-lock-keyword-face) 1693 1696 (face font-lock-keyword-face) 1697 1701 (face font-lock-constant-face) 1703 1706 (face font-lock-keyword-face) 1707 1710 (face font-lock-keyword-face) 1711 1713 (face font-lock-constant-face) 1715 1718 (face font-lock-keyword-face) 1719 1726 (face font-lock-constant-face) 1728 1734 (face font-lock-constant-face) 1736 1742 (face font-lock-type-face) 1744 1747 (face font-lock-keyword-face) 1748 1755 (face font-lock-constant-face) 1757 1762 (face font-lock-type-face) 1764 1767 (face font-lock-keyword-face) 1768 1776 (face font-lock-constant-face) 1778 1786 (face font-lock-type-face) 1788 1791 (face font-lock-keyword-face) 1792 1798 (face font-lock-constant-face) 1800 1813 (face font-lock-type-face) 1815 1818 (face font-lock-keyword-face) 1819 1823 (face font-lock-constant-face) 1826 1831 (face font-lock-type-face) 1833 1837 (face font-lock-type-face) 1840 1843 (face font-lock-keyword-face) 1844 1848 (face font-lock-constant-face) 1856 1859 (face font-lock-keyword-face) 1860 1864 (face font-lock-constant-face) 1866 1872 (face font-lock-type-face) 1873 1875 (face font-lock-keyword-face) 1876 1886 (face font-lock-type-face) 1889 1891 (face font-lock-keyword-face) 1892 1896 (face font-lock-function-name-face) 1905 1922 (face font-lock-constant-face) 1937 1940 (face font-lock-keyword-face) 1941 1954 (face font-lock-variable-name-face) 1957 1970 (face font-lock-type-face) 1976 1984 (face font-lock-type-face) 1998 2001 (face font-lock-keyword-face) 2002 2019 (face font-lock-variable-name-face) 2054 2057 (face font-lock-keyword-face) 2058 2074 (face font-lock-variable-name-face) 2640 2648 (face font-lock-constant-face) 2674 2677 (face font-lock-comment-delimiter-face) 2677 2763 (face font-lock-comment-face) 2771 2779 (face font-lock-constant-face) 2805 2808 (face font-lock-comment-delimiter-face) 2808 2894 (face font-lock-comment-face) 2902 2910 (face font-lock-constant-face) 2930 2933 (face font-lock-comment-delimiter-face) 2933 3016 (face font-lock-comment-face) 3024 3032 (face font-lock-constant-face) 3052 3055 (face font-lock-comment-delimiter-face) 3055 3135 (face font-lock-comment-face) 3143 3151 (face font-lock-constant-face) 3172 3175 (face font-lock-comment-delimiter-face) 3175 3255 (face font-lock-comment-face) 3263 3271 (face font-lock-constant-face) 3298 3301 (face font-lock-comment-delimiter-face) 3301 3382 (face font-lock-comment-face) 3390 3398 (face font-lock-constant-face) 3407 3421 (fontified t) 3421 3432 (fontified t) 3432 3441 (fontified t) 3441 3445 (fontified t face font-lock-constant-face) 3445 3463 (fontified t) 3463 3467 (fontified t face font-lock-keyword-face) 3467 3469 (fontified t) 3469 3477 (fontified t face font-lock-variable-name-face) 3477 3479 (fontified t) 3479 3485 (fontified t face font-lock-type-face) 3485 3487 (fontified t) 3487 3491 (fontified t face font-lock-variable-name-face) 3491 3493 (fontified t) 3493 3497 (fontified t face font-lock-type-face) 3497 3499 (fontified t) 3499 3502 (fontified t face font-lock-variable-name-face) 3502 3504 (fontified t) 3504 3508 (fontified t face font-lock-constant-face) 3508 3510 (fontified t) 3510 3513 (fontified t face font-lock-constant-face) 3513 3515 (fontified t) 3515 3518 (fontified t face font-lock-type-face) 3518 3522 (fontified t) 3522 3530 (fontified t) 3530 3533 (fontified t face font-lock-keyword-face) 3533 3534 (fontified t) 3534 3537 (fontified t face font-lock-keyword-face) 3537 3538 (fontified t) 3538 3543 (fontified t face font-lock-variable-name-face) 3543 3550 (fontified t face font-lock-variable-name-face) 3550 3553 (fontified t) 3553 3603 (fontified t) 3603 3604 (fontified t) 3604 3612 (fontified t) 3612 3615 (fontified t face font-lock-keyword-face) 3615 3616 (fontified t) 3616 3621 (fontified t face font-lock-variable-name-face) 3621 3628 (fontified t face font-lock-variable-name-face) 3628 3631 (fontified t) 3631 3636 (fontified t face font-lock-constant-face) 3636 3638 (fontified t) 3638 3643 (fontified t face font-lock-constant-face) 3643 3645 (fontified t) 3645 3653 (fontified t face font-lock-type-face) 3653 3660 (fontified t) 3660 3672 (fontified t) 3672 3675 (fontified t face font-lock-constant-face) 3675 3677 (fontified t) 3677 3681 (fontified t face font-lock-constant-face) 3681 3683 (fontified t) 3683 3690 (fontified t face font-lock-type-face) 3690 3711 (fontified t) 3711 3714 (fontified t face font-lock-constant-face) 3714 3716 (fontified t) 3716 3720 (fontified t face font-lock-constant-face) 3720 3722 (fontified t) 3722 3730 (fontified t face font-lock-type-face) 3730 3756 (fontified t) 3756 3760 (fontified t) 3760 3780 (fontified t) 3780 3784 (fontified t face font-lock-keyword-face) 3784 3791 (fontified t) 3791 3803 (fontified t) 3803 3805 (fontified t face font-lock-keyword-face) 3805 3806 (fontified t) 3806 3809 (fontified t face font-lock-keyword-face) 3809 3810 (fontified t) 3810 3812 (fontified t face font-lock-type-face) 3812 3813 (fontified t) 3813 3818 (fontified t face font-lock-type-face) 3818 3820 (fontified t) 3820 3825 (fontified t face font-lock-type-face) 3825 3826 (fontified t) 3826 3830 (fontified t face font-lock-type-face) 3830 3846 (fontified t) 3846 3852 (fontified t) 3852 3867 (fontified t) 3867 3869 (fontified t) 3869 3885 (fontified t) 3885 3889 (fontified t face font-lock-type-face) 3889 3891 (fontified t) 3891 3892 (fontified t) 3892 3912 (fontified t) 3912 3916 (fontified t face font-lock-constant-face) 3916 3918 (fontified t) 3918 3921 (fontified t face font-lock-constant-face) 3921 3940 (fontified t) 3940 3947 (fontified t face font-lock-string-face) 3947 3953 (fontified t) 3953 3971 (fontified t) 3971 3991 (fontified t) 3991 3995 (fontified t face font-lock-constant-face) 3995 3997 (fontified t) 3997 4000 (fontified t face font-lock-constant-face) 4000 4018 (fontified t) 4018 4027 (fontified t face font-lock-string-face) 4027 4072 (fontified t) 4072 4076 (fontified t face font-lock-keyword-face) 4076 4095 (fontified t) 4095 4099 (fontified t face font-lock-type-face) 4099 4105 (fontified t) 4105 4114 (fontified t) 4114 4126 (fontified t) 4126 4130 (fontified t) 4130 4144 (fontified t) 4144 4148 (fontified t face font-lock-constant-face) 4148 4150 (fontified t) 4150 4153 (fontified t face font-lock-constant-face) 4153 4160 (fontified t) 4160 4161 (fontified t) 4161 4165 (fontified t) 4165 4187 (fontified t) 4187 4199 (fontified t) 4199 4203 (fontified t face font-lock-type-face) 4203 4233 (fontified t) 4233 4237 (fontified t face font-lock-constant-face) 4237 4239 (fontified t) 4239 4244 (fontified t face font-lock-constant-face) 4244 4246 (fontified t) 4246 4250 (fontified t face font-lock-constant-face) 4250 4259 (fontified t) 4259 4271 (fontified t face font-lock-string-face) 4271 4273 (fontified t) 4273 4285 (fontified t face font-lock-string-face) 4285 4288 (fontified t) 4288 4301 (fontified t) 4301 4306 (fontified t face font-lock-constant-face) 4306 4329 (fontified t) 4329 4331 (fontified t face font-lock-comment-delimiter-face) 4331 4332 (fontified t face font-lock-comment-face) 4332 4370 (fontified t face font-lock-comment-face) 4370 4389 (fontified t face font-lock-comment-face) 4389 4391 (fontified t face font-lock-comment-face) 4391 4395 (fontified t) 4395 4398 (fontified t face font-lock-keyword-face) 4398 4399 (fontified t) 4399 4408 (fontified t face font-lock-variable-name-face) 4408 4411 (fontified t) 4411 4416 (fontified t face font-lock-preprocessor-face) 4416 4417 (fontified t) 4417 4422 (fontified t face font-lock-string-face) 4422 4425 (fontified t) 4425 4429 (fontified t face font-lock-string-face) 4429 4432 (fontified t) 4432 4443 (fontified t face font-lock-string-face) 4443 4458 (fontified t) 4458 4463 (fontified t face font-lock-type-face) 4463 4465 (fontified t) 4465 4471 (fontified t face font-lock-type-face) 4471 4472 (fontified t) 4472 4492 (fontified t) 4492 4518 (fontified t) 4518 4522 (fontified t face font-lock-type-face) 4522 4549 (fontified t) 4549 4554 (fontified t face font-lock-type-face) 4554 4556 (fontified t) 4556 4562 (fontified t face font-lock-type-face) 4562 4578 (fontified t) 4578 4582 (fontified t face font-lock-constant-face) 4582 4606 (fontified t) 4606 4611 (fontified t face font-lock-constant-face) 4611 4613 (fontified t) 4613 4615 (fontified t face font-lock-type-face) 4615 4618 (fontified t face font-lock-type-face) 4618 4633 (fontified t) 4633 4646 (fontified t) 4646 4651 (fontified t face font-lock-constant-face) 4651 4653 (fontified t) 4653 4660 (fontified t face font-lock-type-face) 4660 4662 (fontified t) 4662 4675 (fontified t) 4675 4687 (fontified t) 4687 4688 (fontified t) 4688 4693 (face font-lock-constant-face fontified t) 4693 4695 (fontified t) 4695 4699 (face font-lock-type-face fontified t) 4699 4714 (fontified t) 4714 4727 (fontified t) 4727 4731 (fontified t face font-lock-constant-face) 4731 4771 (fontified t) 4771 4775 (fontified t face font-lock-keyword-face) 4775 4777 (fontified t) 4777 4780 (fontified t face font-lock-keyword-face) 4780 4781 (fontified t) 4781 4785 (fontified t face font-lock-variable-name-face) 4785 4787 (fontified t) 4787 4788 (fontified t face font-lock-type-face) 4788 4791 (fontified t face font-lock-type-face) 4791 4793 (fontified t) 4793 4811 (fontified t) 4811 4812 (fontified t face font-lock-variable-name-face) 4812 4814 (fontified t) 4814 4819 (fontified t face font-lock-constant-face) 4819 4821 (fontified t) 4821 4827 (fontified t face font-lock-type-face) 4827 4847 (fontified t) 4847 4848 (fontified t face font-lock-variable-name-face) 4848 4850 (fontified t) 4850 4855 (fontified t face font-lock-constant-face) 4855 4857 (fontified t) 4857 4862 (fontified t face font-lock-type-face) 4862 4882 (fontified t) 4882 4883 (fontified t face font-lock-variable-name-face) 4883 4885 (fontified t) 4885 4890 (fontified t face font-lock-constant-face) 4890 4891 (fontified t) 4891 4892 (fontified t) 4892 4899 (fontified t face font-lock-type-face) 4899 4901 (fontified t) 4901 4919 (fontified t) 4919 4920 (fontified t face font-lock-variable-name-face) 4920 4922 (fontified t) 4922 4927 (fontified t face font-lock-constant-face) 4927 4929 (fontified t) 4929 4933 (fontified t face font-lock-type-face) 4933 4953 (fontified t) 4953 4955 (fontified t face font-lock-variable-name-face) 4955 4957 (fontified t) 4957 4961 (fontified t face font-lock-constant-face) 4961 4963 (fontified t) 4963 4965 (fontified t face font-lock-constant-face) 4965 4967 (fontified t) 4967 4970 (fontified t face font-lock-type-face) 4970 4990 (fontified t) 4990 4992 (fontified t face font-lock-keyword-face) 4992 4993 (fontified t face font-lock-keyword-face) 4993 4994 (fontified t) 4994 5006 (fontified t face font-lock-variable-name-face) 5006 5009 (fontified t) 5009 5012 (fontified t face font-lock-type-face) 5012 5013 (fontified t) 5013 5017 (fontified t face font-lock-constant-face) 5017 5019 (fontified t) 5019 5025 (fontified t face font-lock-constant-face) 5025 5034 (fontified t) 5034 5063 (fontified t face font-lock-string-face) 5063 5067 (fontified t) 5067 5083 (fontified t) 5083 5086 (fontified t face font-lock-keyword-face) 5086 5087 (fontified t) 5087 5095 (fontified t face font-lock-variable-name-face) 5095 5098 (fontified t) 5098 5103 (fontified t face font-lock-keyword-face) 5103 5133 (fontified t) 5133 5144 (fontified t) 5144 5147 (fontified t face font-lock-comment-delimiter-face) 5147 5165 (fontified t face font-lock-comment-face) 5165 5175 (fontified t) 5175 5190 (fontified t) 5190 5198 (fontified t face font-lock-string-face) 5198 5206 (fontified t) 5206 5214 (fontified t face font-lock-string-face) 5214 5220 (face font-lock-string-face fontified t) 5220 5221 (fontified t) 5221 5223 (face font-lock-keyword-face fontified t) 5223 5239 (fontified t) 5239 5240 (syntax-table #1# fontified t) 5240 5241 (fontified t) 5241 5248 (face rust-builtin-formatting-macro-face fontified t) 5248 5249 (fontified t) 5249 5250 (face font-lock-string-face fontified t) 5250 5252 (face rust-string-interpolation-face fontified t) 5252 5259 (face font-lock-string-face fontified t) 5259 5266 (fontified t) 5266 5291 (fontified t) 5291 5293 (fontified t face font-lock-string-face) 5293 5305 (fontified t face font-lock-string-face) 5305 5313 (fontified t) 5313 5333 (fontified t face font-lock-string-face) 5333 5335 (fontified t) 5335 5336 (fontified t syntax-table #1#) 5336 5353 (fontified t) 5353 5378 (fontified t) 5378 5386 (fontified t face font-lock-string-face) 5386 5394 (fontified t) 5394 5401 (fontified t face font-lock-string-face) 5401 5408 (fontified t face font-lock-string-face) 5408 5410 (fontified t) 5410 5411 (fontified t syntax-table #1#) 5411 5428 (fontified t) 5428 5448 (fontified t) 5448 5451 (fontified t face font-lock-comment-delimiter-face) 5451 5456 (fontified t face font-lock-comment-face) 5456 5476 (fontified t) 5476 5480 (fontified t face font-lock-string-face) 5480 5481 (fontified t syntax-table #2# face font-lock-string-face) 5481 5482 (fontified t face font-lock-string-face) 5482 5483 (fontified t) 5483 5485 (fontified t face font-lock-keyword-face) 5485 5501 (fontified t) 5501 5502 (fontified t syntax-table #1#) 5502 5503 (fontified t) 5503 5509 (fontified t face font-lock-keyword-face) 5509 5544 (fontified t) 5544 5548 (fontified t face font-lock-string-face) 5548 5549 (fontified t syntax-table #2# face font-lock-string-face) 5549 5550 (fontified t face font-lock-string-face) 5550 5552 (fontified t) 5552 5553 (fontified t syntax-table #1#) 5553 5554 (fontified t) 5554 5561 (fontified t face rust-builtin-formatting-macro-face) 5561 5562 (fontified t) 5562 5563 (fontified t face font-lock-string-face) 5563 5565 (fontified t face rust-string-interpolation-face) 5565 5566 (fontified t face font-lock-string-face) 5566 5567 (fontified t) 5567 5578 (fontified t) 5578 5598 (fontified t) 5598 5617 (fontified t face font-lock-string-face) 5617 5619 (fontified t) 5619 5620 (fontified t syntax-table #1#) 5620 5665 (fontified t) 5665 5687 (fontified t) 5687 5711 (fontified t) 5711 5718 (fontified t face rust-builtin-formatting-macro-face) 5718 5719 (fontified t) 5719 5720 (fontified t face font-lock-string-face) 5720 5722 (fontified t face rust-string-interpolation-face) 5722 5723 (fontified t face font-lock-string-face) 5723 5766 (fontified t) 5766 5776 (fontified t) 5776 5779 (face font-lock-comment-delimiter-face fontified t) 5779 5798 (face font-lock-comment-face fontified t) 5907 5908 (syntax-table #1#) 6099 6100 (syntax-table #1#) 6150 6151 (syntax-table #1#) 6267 6268 (syntax-table #1#) 6320 6321 (syntax-table #1#) 6419 6420 (syntax-table #1#)) . 1) (undo-tree-id1626 . -3847) (undo-tree-id1627 . -3847) (undo-tree-id1628 . -3847) (undo-tree-id1629 . -4161) (undo-tree-id1630 . 2609) (undo-tree-id1631 . -4161) (undo-tree-id1632 . -4161) (undo-tree-id1633 . 2592) (undo-tree-id1634 . -3407) (undo-tree-id1635 . -3869) (undo-tree-id1636 . -4161) (undo-tree-id1637 . -4161) (undo-tree-id1638 . -2666) (undo-tree-id1639 . -4161) (undo-tree-id1640 . -4161) (undo-tree-id1641 . -3869) (undo-tree-id1642 . -3869) (undo-tree-id1643 . -3869) (undo-tree-id1644 . -2666) (undo-tree-id1645 . -3869) (undo-tree-id1646 . -3869) (undo-tree-id1647 . -2666) (undo-tree-id1648 . -4161) (undo-tree-id1649 . -3869) (undo-tree-id1650 . -3869) (undo-tree-id1651 . -3869) (undo-tree-id1652 . -2666) (undo-tree-id1653 . -3869) (undo-tree-id1654 . -3869) (undo-tree-id1655 . -2666) (undo-tree-id1656 . -4058) (undo-tree-id1657 . -4058) (undo-tree-id1658 . -2666) (undo-tree-id1659 . -4058) (undo-tree-id1660 . -4058) (undo-tree-id1661 . -2666) (undo-tree-id1662 . -3869) (undo-tree-id1663 . -3869) (undo-tree-id1664 . -3869) (undo-tree-id1665 . -3890) (undo-tree-id1666 . -3890) (undo-tree-id1667 . -3407) (undo-tree-id1668 . -3890) (undo-tree-id1669 . -3890) (undo-tree-id1670 . -3407) (undo-tree-id1671 . -3869) (undo-tree-id1672 . -3869) (undo-tree-id1673 . -3407) (undo-tree-id1674 . -3869) (undo-tree-id1675 . -3869) (undo-tree-id1676 . -3407) (undo-tree-id1677 . -3869) (undo-tree-id1678 . -3869) (undo-tree-id1679 . -3407) (undo-tree-id1680 . -3869) (undo-tree-id1681 . -3869) (undo-tree-id1682 . -3407) (undo-tree-id1683 . -3869) (undo-tree-id1684 . -3869) (undo-tree-id1685 . -3407) (undo-tree-id1686 . -3869) (undo-tree-id1687 . -4161) (undo-tree-id1688 . -4173) (undo-tree-id1689 . -4173) (undo-tree-id1690 . -3407) (undo-tree-id1691 . -4173) (undo-tree-id1692 . -3407) (undo-tree-id1693 . -4177) (undo-tree-id1694 . -4177) (undo-tree-id1695 . -4177) (undo-tree-id1696 . -4173) (undo-tree-id1697 . -3407) (undo-tree-id1698 . -4177) (undo-tree-id1699 . -4177) (undo-tree-id1700 . -3407) (undo-tree-id1701 . -4177) (undo-tree-id1702 . -4177) (undo-tree-id1703 . -3407) (undo-tree-id1704 . -4177) (undo-tree-id1705 . -4177) (undo-tree-id1706 . -3407) (undo-tree-id1707 . -4177) (undo-tree-id1708 . -4177) (undo-tree-id1709 . -3407) 4178) nil (23764 64471 645650 138000) 0 nil]) ((4174 . 4179) (#("time" 0 4 (fontified t)) . 4174) (undo-tree-id1710 . -2) (undo-tree-id1711 . -2) (undo-tree-id1712 . -2) (undo-tree-id1713 . -2) (undo-tree-id1714 . -2) 4176) nil (23764 64471 645689 467000) 0 nil]) ((3620 . 3622) (3617 . 3620) (#("time" 0 4 (fontified t face font-lock-variable-name-face)) . 3617) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) 3618) nil (23764 64471 645703 94000) 0 nil]) ((3847 . 3852) (#("event" 0 5 (fontified t)) . 3847)) nil (23764 64471 645709 192000) 0 nil]) ((3539 . 3544) (#("event" 0 5 (fontified t face font-lock-variable-name-face)) . 3539) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) 3540) nil (23764 64471 645719 798000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((#("move" 0 4 (fontified t face font-lock-keyword-face)) . 3698) (undo-tree-id1433 . -4) (undo-tree-id1434 . -4) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) 3699 (t 23764 64396 990810 46000)) ((3698 . 3702)) (23764 64409 131614 580000) 0 nil]) ((1 . 6717) (#("//! Streaming server for Mastodon
//!
//!
//! This server provides live, streaming updates for Mastodon clients.  Specifically, when a server
//! is running this sever, Mastodon clients can use either Server Sent Events or WebSockets to
//! connect to the server with the API described [in the public API
//! documentation](https://docs.joinmastodon.org/api/streaming/)
//!
//! # Notes on data flow
//! * **Client Request → Warp**:
//! Warp filters for valid requests and parses request data. Based on that data, it generates a `User`
//! representing the client that made the request.  The `User` is authenticated, if appropriate.  Warp
//! repeatedly polls the StreamManager for information relevant to the User.
//!
//! * **Warp → StreamManager**:
//! A new `StreamManager` is created for each request.  The `StreamManager` exists to manage concurrent
//! access to the (single) `Receiver`, which it can access behind an `Arc<Mutex>`.  The `StreamManager`
//! polles the `Receiver` for any updates relvant to the current client.  If there are updates, the
//! `StreamManager` filters them with the client's filters and passes any matching updates up to Warp.
//! The `StreamManager` is also responsible for sending `subscribe` commands to Redis (via the
//! `Receiver`) when necessary.
//!
//! * **StreamManger → Receiver**:
//! The Receiver receives data from Redis and stores it in a series of queues (one for each
//! StreamManager). When (asynchronously) polled by the StreamManager, it sends back the  messages
//! relevant to that StreamManager and removes them from the queue.

pub mod error;
pub mod query;
pub mod receiver;
pub mod redis_cmd;
pub mod stream;
pub mod timeline;
pub mod user;
pub mod ws;
use futures::stream::Stream;
use futures::Async;
use receiver::Receiver;
use stream::StreamManager;
use user::{Scope, User};
use warp::path;
use warp::Filter as WarpFilter;

fn main() {
    pretty_env_logger::init();

    let redis_updates = StreamManager::new(Receiver::new());
    let redis_updates_sse = redis_updates.blank_copy();
    let redis_updates_ws = redis_updates.blank_copy();

    let routes = any_of!(
        // GET /api/v1/streaming/user/notification                     [private; notification filter]
        timeline::user_notifications(),
        // GET /api/v1/streaming/user                                  [private; language filter]
        timeline::user(),
        // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
        timeline::public_local_media(),
        // GET /api/v1/streaming/public?only_media=true                [public; language filter]
        timeline::public_media(),
        // GET /api/v1/streaming/public/local                          [public; language filter]
        timeline::public_local(),
        // GET /api/v1/streaming/public                                [public; language filter]
        timeline::public(),
        // GET /api/v1/streaming/direct                                [private; *no* filter]
        timeline::direct(),
        // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
        timeline::hashtag(),
        // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
        timeline::hashtag_local(),
        // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
        timeline::list()
    )
    .untuple_one()
    .and(warp::sse())
    .map(move |timeline: String, user: User, sse: warp::sse::Sse| {
        let time_stream = tokio::timer::Interval::new(
            std::time::Instant::now(),
            std::time::Duration::from_millis(100),
        )
        .filter_map(move |_| {
            if let Ok(Async::Ready(Some(json_value))) = redis_updates_sse.configure_copy(&timeline, user).poll() {
                Some((
                    warp::sse::event(json_value[\"event\"].clone().to_string()),
                    warp::sse::data(json_value[\"payload\"].clone()),
                ))
            } else {
                None
            }
        });
        sse.reply(warp::sse::keep(
            time_stream,
            None,
        ))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    //let redis_updates_ws = StreamManager::new(Receiver::new());
    let websocket = path!(\"api\" / \"v1\" / \"streaming\")
        .and(Scope::Public.get_access_token())
        .and_then(|token| User::from_access_token(token, Scope::Public))
        .and(warp::query())
        .and(query::Media::to_filter())
        .and(query::Hashtag::to_filter())
        .and(query::List::to_filter())
        .and(warp::ws2())
        .and_then(
            move |mut user: User,
                  q: query::Stream,
                  m: query::Media,
                  h: query::Hashtag,
                  l: query::List,
                  ws: warp::ws::Ws2| {
                let unauthorized = Err(warp::reject::custom(\"Error: Invalid Access Token\"));
                let timeline = match q.stream.as_ref() {
                    // Public endpoints:
                    tl @ \"public\" | tl @ \"public:local\" if m.is_truthy() => format!(\"{}:media\", tl),
                    tl @ \"public:media\" | tl @ \"public:local:media\" => tl.to_string(),
                    tl @ \"public\" | tl @ \"public:local\" => tl.to_string(),
                    // User
                    \"user\" if user.id == -1 => return unauthorized,
                    \"user\" => format!(\"{}\", user.id),
                    \"user:notification\" => {
                        user = user.with_notification_filter();
                        format!(\"{}\", user.id)
                    }
                    // Hashtag endpoints:
                    // TODO: handle missing query
                    tl @ \"hashtag\" | tl @ \"hashtag:local\" => format!(\"{}:{}\", tl, h.tag),
                    // List endpoint:
                    // TODO: handle missing query
                    \"list\" if user.authorized_for_list(l.list).is_err() => return unauthorized,
                    \"list\" => format!(\"list:{}\", l.list),
                    // Direct endpoint:
                    \"direct\" if user.id == -1 => return unauthorized,
                    \"direct\" => \"direct\".to_string(),
                    // Other endpoints don't exist:
                    _ => return Err(warp::reject::custom(\"Error: Nonexistent WebSocket query\")),
                };
                let stream = redis_updates_ws.configure_copy(&timeline, user);

                Ok(ws.on_upgrade(move |socket| ws::send_replies(socket, stream)))
            },
        );

    warp::serve(websocket.or(routes)).run(([127, 0, 0, 1], 4000));
}
" 0 34 (fontified t face font-lock-doc-face) 34 38 (fontified t face font-lock-doc-face) 38 42 (fontified t face font-lock-doc-face) 42 142 (fontified t face font-lock-doc-face) 142 237 (fontified t face font-lock-doc-face) 237 305 (fontified t face font-lock-doc-face) 305 370 (fontified t face font-lock-doc-face) 370 374 (fontified t face font-lock-doc-face) 374 399 (fontified t face font-lock-doc-face) 399 432 (fontified t face font-lock-doc-face) 432 500 (fontified t face font-lock-doc-face) 500 535 (fontified t face font-lock-doc-face) 535 638 (fontified t face font-lock-doc-face) 638 715 (fontified t face font-lock-doc-face) 715 719 (fontified t face font-lock-doc-face) 719 751 (fontified t face font-lock-doc-face) 751 855 (fontified t face font-lock-doc-face) 855 928 (fontified t face font-lock-doc-face) 928 929 (fontified t syntax-table #1# face font-lock-doc-face) 929 934 (fontified t face font-lock-doc-face) 934 935 (fontified t syntax-table #1# face font-lock-doc-face) 935 959 (fontified t face font-lock-doc-face) 959 1035 (fontified t face font-lock-doc-face) 1035 1059 (fontified t face font-lock-doc-face) 1059 1162 (fontified t face font-lock-doc-face) 1162 1257 (fontified t face font-lock-doc-face) 1257 1289 (fontified t face font-lock-doc-face) 1289 1293 (fontified t face font-lock-doc-face) 1293 1328 (fontified t face font-lock-doc-face) 1328 1420 (fontified t face font-lock-doc-face) 1420 1519 (fontified t face font-lock-doc-face) 1519 1559 (fontified t face font-lock-doc-face) 1559 1587 (fontified t face font-lock-doc-face) 1587 1588 (fontified t) 1588 1591 (fontified t face font-lock-keyword-face) 1591 1592 (fontified t) 1592 1595 (fontified t face font-lock-keyword-face) 1595 1596 (fontified t) 1596 1601 (fontified t face font-lock-constant-face) 1601 1603 (fontified t) 1603 1606 (fontified t face font-lock-keyword-face) 1606 1607 (fontified t) 1607 1610 (fontified t face font-lock-keyword-face) 1610 1611 (fontified t) 1611 1616 (fontified t face font-lock-constant-face) 1616 1618 (fontified t) 1618 1621 (fontified t face font-lock-keyword-face) 1621 1622 (fontified t) 1622 1625 (fontified t face font-lock-keyword-face) 1625 1626 (fontified t) 1626 1634 (fontified t face font-lock-constant-face) 1634 1636 (fontified t) 1636 1639 (fontified t face font-lock-keyword-face) 1639 1640 (fontified t) 1640 1643 (fontified t face font-lock-keyword-face) 1643 1644 (fontified t) 1644 1653 (fontified t face font-lock-constant-face) 1653 1655 (fontified t) 1655 1658 (fontified t face font-lock-keyword-face) 1658 1659 (fontified t) 1659 1662 (fontified t face font-lock-keyword-face) 1662 1663 (fontified t) 1663 1669 (fontified t face font-lock-constant-face) 1669 1671 (fontified t) 1671 1674 (fontified t face font-lock-keyword-face) 1674 1675 (fontified t) 1675 1678 (fontified t face font-lock-keyword-face) 1678 1679 (fontified t) 1679 1687 (fontified t face font-lock-constant-face) 1687 1689 (fontified t) 1689 1692 (fontified t face font-lock-keyword-face) 1692 1693 (fontified t) 1693 1696 (fontified t face font-lock-keyword-face) 1696 1697 (fontified t) 1697 1701 (fontified t face font-lock-constant-face) 1701 1703 (fontified t) 1703 1706 (fontified t face font-lock-keyword-face) 1706 1707 (fontified t) 1707 1710 (fontified t face font-lock-keyword-face) 1710 1711 (fontified t) 1711 1713 (fontified t face font-lock-constant-face) 1713 1715 (fontified t) 1715 1718 (fontified t face font-lock-keyword-face) 1718 1719 (fontified t) 1719 1726 (fontified t face font-lock-constant-face) 1726 1728 (fontified t) 1728 1734 (fontified t face font-lock-constant-face) 1734 1736 (fontified t) 1736 1742 (fontified t face font-lock-type-face) 1742 1744 (fontified t) 1744 1747 (fontified t face font-lock-keyword-face) 1747 1748 (fontified t) 1748 1755 (fontified t face font-lock-constant-face) 1755 1757 (fontified t) 1757 1762 (fontified t face font-lock-type-face) 1762 1764 (fontified t) 1764 1767 (fontified t face font-lock-keyword-face) 1767 1768 (fontified t) 1768 1776 (fontified t face font-lock-constant-face) 1776 1778 (fontified t) 1778 1786 (fontified t face font-lock-type-face) 1786 1788 (fontified t) 1788 1791 (fontified t face font-lock-keyword-face) 1791 1792 (fontified t) 1792 1798 (fontified t face font-lock-constant-face) 1798 1800 (fontified t) 1800 1813 (fontified t face font-lock-type-face) 1813 1815 (fontified t) 1815 1818 (fontified t face font-lock-keyword-face) 1818 1819 (fontified t) 1819 1823 (fontified t face font-lock-constant-face) 1823 1826 (fontified t) 1826 1831 (fontified t face font-lock-type-face) 1831 1833 (fontified t) 1833 1837 (fontified t face font-lock-type-face) 1837 1840 (fontified t) 1840 1843 (fontified t face font-lock-keyword-face) 1843 1844 (fontified t) 1844 1848 (fontified t face font-lock-constant-face) 1848 1856 (fontified t) 1856 1859 (fontified t face font-lock-keyword-face) 1859 1860 (fontified t) 1860 1864 (fontified t face font-lock-constant-face) 1864 1866 (fontified t) 1866 1872 (fontified t face font-lock-type-face) 1872 1873 (fontified t) 1873 1875 (fontified t face font-lock-keyword-face) 1875 1876 (fontified t) 1876 1886 (fontified t face font-lock-type-face) 1886 1889 (fontified t) 1889 1891 (fontified t face font-lock-keyword-face) 1891 1892 (fontified t) 1892 1896 (fontified t face font-lock-function-name-face) 1896 1905 (fontified t) 1905 1922 (fontified t face font-lock-constant-face) 1922 1937 (fontified t) 1937 1940 (fontified t face font-lock-keyword-face) 1940 1941 (fontified t) 1941 1954 (fontified t face font-lock-variable-name-face) 1954 1957 (fontified t) 1957 1970 (fontified t face font-lock-type-face) 1970 1976 (fontified t) 1976 1984 (fontified t face font-lock-type-face) 1984 1998 (fontified t) 1998 2001 (fontified t face font-lock-keyword-face) 2001 2002 (fontified t) 2002 2019 (fontified t face font-lock-variable-name-face) 2019 2054 (fontified t) 2054 2057 (fontified t face font-lock-keyword-face) 2057 2058 (fontified t) 2058 2074 (fontified t face font-lock-variable-name-face) 2074 2087 (fontified t) 2087 2105 (fontified t) 2632 2640 (fontified t) 2640 2648 (fontified t face font-lock-constant-face) 2648 2666 (fontified t) 2666 2674 (fontified t) 2674 2677 (fontified t face font-lock-comment-delimiter-face) 2677 2763 (fontified t face font-lock-comment-face) 2763 2771 (fontified t) 2771 2779 (fontified t face font-lock-constant-face) 2779 2805 (fontified t) 2805 2808 (fontified t face font-lock-comment-delimiter-face) 2808 2894 (fontified t face font-lock-comment-face) 2894 2902 (fontified t) 2902 2910 (fontified t face font-lock-constant-face) 2910 2921 (fontified t) 2921 2930 (fontified t) 2930 2933 (fontified t face font-lock-comment-delimiter-face) 2933 3016 (fontified t face font-lock-comment-face) 3016 3024 (fontified t) 3024 3032 (fontified t face font-lock-constant-face) 3032 3052 (fontified t) 3052 3055 (fontified t face font-lock-comment-delimiter-face) 3055 3135 (fontified t face font-lock-comment-face) 3135 3143 (fontified t) 3143 3151 (fontified t face font-lock-constant-face) 3151 3166 (fontified t) 3166 3172 (fontified t) 3172 3175 (face font-lock-comment-delimiter-face fontified t) 3175 3255 (face font-lock-comment-face fontified t) 3255 3263 (fontified t) 3263 3271 (fontified t face font-lock-constant-face) 3271 3298 (fontified t) 3298 3301 (fontified t face font-lock-comment-delimiter-face) 3301 3382 (fontified t face font-lock-comment-face) 3382 3390 (fontified t) 3390 3398 (fontified t face font-lock-constant-face) 3398 3421 (fontified t) 3421 3432 (fontified t) 3432 3441 (fontified t) 3441 3445 (fontified t face font-lock-constant-face) 3445 3463 (fontified t) 3463 3467 (fontified t face font-lock-keyword-face) 3467 3469 (fontified t) 3469 3477 (fontified t face font-lock-variable-name-face) 3477 3479 (fontified t) 3479 3485 (fontified t face font-lock-type-face) 3485 3487 (fontified t) 3487 3491 (fontified t face font-lock-variable-name-face) 3491 3493 (fontified t) 3493 3497 (fontified t face font-lock-type-face) 3497 3499 (fontified t) 3499 3502 (fontified t face font-lock-variable-name-face) 3502 3504 (fontified t) 3504 3508 (fontified t face font-lock-constant-face) 3508 3510 (fontified t) 3510 3513 (fontified t face font-lock-constant-face) 3513 3515 (fontified t) 3515 3518 (fontified t face font-lock-type-face) 3518 3522 (fontified t) 3522 3530 (fontified t) 3530 3533 (fontified t face font-lock-keyword-face) 3533 3534 (fontified t) 3534 3545 (fontified t face font-lock-variable-name-face) 3545 3548 (fontified t) 3548 3553 (fontified t face font-lock-constant-face) 3553 3555 (fontified t) 3555 3560 (fontified t face font-lock-constant-face) 3560 3562 (fontified t) 3562 3570 (fontified t face font-lock-type-face) 3570 3577 (fontified t) 3577 3589 (fontified t) 3589 3592 (fontified t face font-lock-constant-face) 3592 3594 (fontified t) 3594 3598 (fontified t face font-lock-constant-face) 3598 3600 (fontified t) 3600 3607 (fontified t face font-lock-type-face) 3607 3628 (fontified t) 3628 3631 (fontified t face font-lock-constant-face) 3631 3633 (fontified t) 3633 3637 (fontified t face font-lock-constant-face) 3637 3639 (fontified t) 3639 3647 (fontified t face font-lock-type-face) 3647 3673 (fontified t) 3673 3677 (fontified t) 3677 3697 (fontified t) 3697 3701 (fontified t face font-lock-keyword-face) 3701 3708 (fontified t) 3708 3720 (fontified t) 3720 3722 (fontified t face font-lock-keyword-face) 3722 3723 (fontified t) 3723 3726 (fontified t face font-lock-keyword-face) 3726 3727 (fontified t) 3727 3729 (fontified t face font-lock-type-face) 3729 3730 (fontified t) 3730 3735 (fontified t face font-lock-type-face) 3735 3737 (fontified t) 3737 3742 (fontified t face font-lock-type-face) 3742 3743 (fontified t) 3743 3747 (fontified t face font-lock-type-face) 3747 3763 (fontified t) 3763 3764 (fontified t) 3764 3818 (fontified t) 3818 3819 (fontified t) 3819 3820 (fontified t) 3820 3821 (fontified t) 3821 3823 (fontified t) 3823 3839 (fontified t) 3839 3843 (fontified t face font-lock-type-face) 3843 3845 (fontified t) 3845 3846 (fontified t) 3846 3866 (fontified t) 3866 3870 (fontified t face font-lock-constant-face) 3870 3872 (fontified t) 3872 3875 (fontified t face font-lock-constant-face) 3875 3894 (fontified t) 3894 3901 (fontified t face font-lock-string-face) 3901 3945 (fontified t) 3945 3949 (fontified t face font-lock-constant-face) 3949 3951 (fontified t) 3951 3954 (fontified t face font-lock-constant-face) 3954 3972 (fontified t) 3972 3981 (fontified t face font-lock-string-face) 3981 4026 (fontified t) 4026 4030 (fontified t face font-lock-keyword-face) 4030 4049 (fontified t) 4049 4053 (fontified t face font-lock-type-face) 4053 4059 (fontified t) 4059 4068 (fontified t) 4068 4080 (fontified t) 4080 4084 (fontified t) 4084 4098 (fontified t) 4098 4102 (fontified t face font-lock-constant-face) 4102 4104 (fontified t) 4104 4107 (fontified t face font-lock-constant-face) 4107 4115 (fontified t) 4115 4119 (fontified t) 4119 4140 (fontified t) 4140 4152 (fontified t) 4152 4156 (fontified t face font-lock-type-face) 4156 4186 (fontified t) 4186 4190 (fontified t face font-lock-constant-face) 4190 4192 (fontified t) 4192 4197 (fontified t face font-lock-constant-face) 4197 4199 (fontified t) 4199 4203 (fontified t face font-lock-constant-face) 4203 4212 (fontified t) 4212 4224 (fontified t face font-lock-string-face) 4224 4226 (fontified t) 4226 4238 (fontified t face font-lock-string-face) 4238 4241 (fontified t) 4241 4254 (fontified t) 4254 4259 (fontified t face font-lock-constant-face) 4259 4282 (fontified t) 4282 4284 (fontified t face font-lock-comment-delimiter-face) 4284 4285 (fontified t face font-lock-comment-face) 4285 4323 (fontified t face font-lock-comment-face) 4323 4342 (face font-lock-comment-face fontified t) 4342 4344 (face font-lock-comment-face fontified t) 4344 4348 (fontified t) 4348 4351 (fontified t face font-lock-keyword-face) 4351 4352 (fontified t) 4352 4361 (fontified t face font-lock-variable-name-face) 4361 4364 (fontified t) 4364 4369 (fontified t face font-lock-preprocessor-face) 4369 4370 (fontified t) 4370 4375 (fontified t face font-lock-string-face) 4375 4378 (fontified t) 4378 4382 (fontified t face font-lock-string-face) 4382 4385 (fontified t) 4385 4396 (fontified t face font-lock-string-face) 4396 4411 (fontified t) 4411 4416 (fontified t face font-lock-type-face) 4416 4418 (fontified t) 4418 4424 (fontified t face font-lock-type-face) 4424 4471 (fontified t) 4471 4475 (fontified t face font-lock-type-face) 4475 4502 (fontified t) 4502 4507 (fontified t face font-lock-type-face) 4507 4509 (fontified t) 4509 4515 (fontified t face font-lock-type-face) 4515 4531 (fontified t) 4531 4535 (fontified t face font-lock-constant-face) 4535 4559 (fontified t) 4559 4564 (fontified t face font-lock-constant-face) 4564 4566 (fontified t) 4566 4568 (fontified t face font-lock-type-face) 4568 4571 (fontified t face font-lock-type-face) 4571 4586 (fontified t) 4586 4599 (fontified t) 4599 4604 (fontified t face font-lock-constant-face) 4604 4606 (fontified t) 4606 4613 (fontified t face font-lock-type-face) 4613 4615 (fontified t) 4615 4628 (fontified t) 4628 4640 (fontified t) 4640 4641 (fontified t) 4641 4646 (fontified t face font-lock-constant-face) 4646 4648 (fontified t) 4648 4652 (fontified t face font-lock-type-face) 4652 4667 (fontified t) 4667 4680 (fontified t) 4680 4684 (fontified t face font-lock-constant-face) 4684 4724 (fontified t) 4724 4728 (fontified t face font-lock-keyword-face) 4728 4730 (fontified t) 4730 4733 (fontified t face font-lock-keyword-face) 4733 4734 (fontified t) 4734 4738 (fontified t face font-lock-variable-name-face) 4738 4740 (fontified t) 4740 4741 (fontified t face font-lock-type-face) 4741 4744 (fontified t face font-lock-type-face) 4744 4746 (fontified t) 4746 4764 (fontified t) 4764 4765 (fontified t face font-lock-variable-name-face) 4765 4767 (fontified t) 4767 4772 (fontified t face font-lock-constant-face) 4772 4774 (fontified t) 4774 4780 (fontified t face font-lock-type-face) 4780 4800 (fontified t) 4800 4801 (fontified t face font-lock-variable-name-face) 4801 4803 (fontified t) 4803 4808 (fontified t face font-lock-constant-face) 4808 4810 (fontified t) 4810 4815 (fontified t face font-lock-type-face) 4815 4835 (fontified t) 4835 4836 (fontified t face font-lock-variable-name-face) 4836 4838 (fontified t) 4838 4843 (fontified t face font-lock-constant-face) 4843 4844 (fontified t) 4844 4845 (fontified t) 4845 4852 (face font-lock-type-face fontified t) 4852 4854 (fontified t) 4854 4872 (fontified t) 4872 4873 (fontified t face font-lock-variable-name-face) 4873 4875 (fontified t) 4875 4880 (fontified t face font-lock-constant-face) 4880 4882 (fontified t) 4882 4886 (fontified t face font-lock-type-face) 4886 4906 (fontified t) 4906 4908 (fontified t face font-lock-variable-name-face) 4908 4910 (fontified t) 4910 4914 (fontified t face font-lock-constant-face) 4914 4916 (fontified t) 4916 4918 (fontified t face font-lock-constant-face) 4918 4920 (fontified t) 4920 4923 (fontified t face font-lock-type-face) 4923 4943 (fontified t) 4943 4946 (fontified t face font-lock-keyword-face) 4946 4947 (fontified t) 4947 4959 (fontified t face font-lock-variable-name-face) 4959 4962 (fontified t) 4962 4965 (fontified t face font-lock-type-face) 4965 4966 (fontified t) 4966 4970 (fontified t face font-lock-constant-face) 4970 4972 (fontified t) 4972 4978 (fontified t face font-lock-constant-face) 4978 4987 (fontified t) 4987 5016 (fontified t face font-lock-string-face) 5016 5036 (fontified t) 5036 5039 (fontified t face font-lock-keyword-face) 5039 5040 (fontified t) 5040 5048 (fontified t face font-lock-variable-name-face) 5048 5051 (fontified t) 5051 5056 (fontified t face font-lock-keyword-face) 5056 5086 (fontified t) 5086 5097 (fontified t) 5097 5100 (fontified t face font-lock-comment-delimiter-face) 5100 5118 (fontified t face font-lock-comment-face) 5118 5128 (fontified t) 5128 5143 (fontified t) 5143 5151 (fontified t face font-lock-string-face) 5151 5159 (fontified t) 5159 5167 (fontified t face font-lock-string-face) 5167 5173 (fontified t face font-lock-string-face) 5173 5174 (fontified t) 5174 5176 (fontified t face font-lock-keyword-face) 5176 5192 (fontified t) 5192 5193 (fontified t syntax-table #1#) 5193 5194 (fontified t) 5194 5201 (fontified t face rust-builtin-formatting-macro-face) 5201 5202 (fontified t) 5202 5203 (fontified t face font-lock-string-face) 5203 5205 (fontified t face rust-string-interpolation-face) 5205 5212 (fontified t face font-lock-string-face) 5212 5219 (fontified t) 5219 5244 (fontified t) 5244 5246 (fontified t face font-lock-string-face) 5246 5258 (fontified t face font-lock-string-face) 5258 5266 (fontified t) 5266 5286 (fontified t face font-lock-string-face) 5286 5288 (fontified t) 5288 5289 (fontified t syntax-table #1#) 5289 5306 (fontified t) 5306 5331 (fontified t) 5331 5339 (fontified t face font-lock-string-face) 5339 5347 (fontified t) 5347 5354 (fontified t face font-lock-string-face) 5354 5361 (face font-lock-string-face fontified t) 5361 5363 (fontified t) 5363 5364 (syntax-table #1# fontified t) 5364 5381 (fontified t) 5401 5404 (face font-lock-comment-delimiter-face) 5404 5409 (face font-lock-comment-face) 5429 5433 (face font-lock-string-face) 5433 5434 (syntax-table #2# face font-lock-string-face) 5434 5435 (face font-lock-string-face) 5436 5438 (face font-lock-keyword-face) 5454 5455 (syntax-table #1#) 5456 5462 (face font-lock-keyword-face) 5497 5501 (face font-lock-string-face) 5501 5502 (syntax-table #2# face font-lock-string-face) 5502 5503 (face font-lock-string-face) 5505 5506 (syntax-table #1#) 5507 5514 (face rust-builtin-formatting-macro-face) 5515 5516 (face font-lock-string-face) 5516 5518 (face rust-string-interpolation-face) 5518 5519 (face font-lock-string-face) 5551 5570 (face font-lock-string-face) 5572 5573 (syntax-table #1#) 5664 5671 (face rust-builtin-formatting-macro-face) 5672 5673 (face font-lock-string-face) 5673 5675 (face rust-string-interpolation-face) 5675 5676 (face font-lock-string-face) 5729 5732 (face font-lock-comment-delimiter-face) 5732 5751 (face font-lock-comment-face) 5860 5861 (syntax-table #1#) 6052 6053 (syntax-table #1#) 6103 6104 (syntax-table #1#) 6220 6221 (syntax-table #1#) 6273 6274 (syntax-table #1#) 6372 6373 (syntax-table #1#)) . 1) (undo-tree-id1323 . -3763) (undo-tree-id1324 . -3763) (undo-tree-id1325 . -3813) (undo-tree-id1326 . -4115) (undo-tree-id1327 . 2608) (undo-tree-id1328 . -4115) (undo-tree-id1329 . -4115) (undo-tree-id1330 . 2904) (undo-tree-id1331 . -3407) (undo-tree-id1332 . -3823) (undo-tree-id1333 . -4115) (undo-tree-id1334 . -4115) (undo-tree-id1335 . -2666) (undo-tree-id1336 . -4115) (undo-tree-id1337 . -4115) (undo-tree-id1338 . -3823) (undo-tree-id1339 . -3823) (undo-tree-id1340 . -3823) (undo-tree-id1341 . -2666) (undo-tree-id1342 . -3823) (undo-tree-id1343 . -3823) (undo-tree-id1344 . -2666) (undo-tree-id1345 . -4115) (undo-tree-id1346 . -3823) (undo-tree-id1347 . -3823) (undo-tree-id1348 . -3823) (undo-tree-id1349 . -2666) (undo-tree-id1350 . -3823) (undo-tree-id1351 . -3823) (undo-tree-id1352 . -2666) (undo-tree-id1353 . -4012) (undo-tree-id1354 . -4012) (undo-tree-id1355 . -2666) (undo-tree-id1356 . -4012) (undo-tree-id1357 . -4012) (undo-tree-id1358 . -2666) (undo-tree-id1359 . -3823) (undo-tree-id1360 . -3823) (undo-tree-id1361 . -3823) (undo-tree-id1362 . -3844) (undo-tree-id1363 . -3844) (undo-tree-id1364 . -3407) (undo-tree-id1365 . -3844) (undo-tree-id1366 . -3844) (undo-tree-id1367 . -3407) (undo-tree-id1368 . -3823) (undo-tree-id1369 . -3823) (undo-tree-id1370 . -3407) (undo-tree-id1371 . -3823) (undo-tree-id1372 . -3823) (undo-tree-id1373 . -3407) (undo-tree-id1374 . -3823) (undo-tree-id1375 . -3823) (undo-tree-id1376 . -3407) (undo-tree-id1377 . -3823) (undo-tree-id1378 . -3823) (undo-tree-id1379 . -3407) (undo-tree-id1380 . -3823) (undo-tree-id1381 . -3823) (undo-tree-id1382 . -3407) (undo-tree-id1383 . -3823) (undo-tree-id1384 . -4115) (undo-tree-id1386 . -3817) (undo-tree-id1388 . -3817) (undo-tree-id1390 . -3815) (undo-tree-id1392 . -3816) (undo-tree-id1394 . -3818) (undo-tree-id1396 . -3819) (undo-tree-id1398 . -3818) (undo-tree-id1400 . -3819) (undo-tree-id1402 . -3407) (undo-tree-id1404 . -3818) (undo-tree-id1406 . -3818) (undo-tree-id1408 . -3818) (undo-tree-id1410 . -3818) (undo-tree-id1412 . -3818) (undo-tree-id1414 . -3407) (undo-tree-id1415 . -3818) (undo-tree-id1416 . -3818) (undo-tree-id1418 . -3818) (undo-tree-id1420 . -3818) (undo-tree-id1422 . -3407) (undo-tree-id1424 . -3895) (undo-tree-id1426 . -3895) (undo-tree-id1428 . -3819) (undo-tree-id1430 . -3819) (undo-tree-id1432 . -3820) 3819) ((1 . 6724) (#("//! Streaming server for Mastodon
//!
//!
//! This server provides live, streaming updates for Mastodon clients.  Specifically, when a server
//! is running this sever, Mastodon clients can use either Server Sent Events or WebSockets to
//! connect to the server with the API described [in the public API
//! documentation](https://docs.joinmastodon.org/api/streaming/)
//!
//! # Notes on data flow
//! * **Client Request → Warp**:
//! Warp filters for valid requests and parses request data. Based on that data, it generates a `User`
//! representing the client that made the request.  The `User` is authenticated, if appropriate.  Warp
//! repeatedly polls the StreamManager for information relevant to the User.
//!
//! * **Warp → StreamManager**:
//! A new `StreamManager` is created for each request.  The `StreamManager` exists to manage concurrent
//! access to the (single) `Receiver`, which it can access behind an `Arc<Mutex>`.  The `StreamManager`
//! polles the `Receiver` for any updates relvant to the current client.  If there are updates, the
//! `StreamManager` filters them with the client's filters and passes any matching updates up to Warp.
//! The `StreamManager` is also responsible for sending `subscribe` commands to Redis (via the
//! `Receiver`) when necessary.
//!
//! * **StreamManger → Receiver**:
//! The Receiver receives data from Redis and stores it in a series of queues (one for each
//! StreamManager). When (asynchronously) polled by the StreamManager, it sends back the  messages
//! relevant to that StreamManager and removes them from the queue.

pub mod error;
pub mod query;
pub mod receiver;
pub mod redis_cmd;
pub mod stream;
pub mod timeline;
pub mod user;
pub mod ws;
use futures::stream::Stream;
use futures::Async;
use receiver::Receiver;
use stream::StreamManager;
use user::{Scope, User};
use warp::path;
use warp::Filter as WarpFilter;

fn main() {
    pretty_env_logger::init();

    let redis_updates = StreamManager::new(Receiver::new());
    let redis_updates_sse = redis_updates.blank_copy();
    let redis_updates_ws = redis_updates.blank_copy();

    let routes = any_of!(
        // GET /api/v1/streaming/user/notification                     [private; notification filter]
        timeline::user_notifications(),
        // GET /api/v1/streaming/user                                  [private; language filter]
        timeline::user(),
        // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
        timeline::public_local_media(),
        // GET /api/v1/streaming/public?only_media=true                [public; language filter]
        timeline::public_media(),
        // GET /api/v1/streaming/public/local                          [public; language filter]
        timeline::public_local(),
        // GET /api/v1/streaming/public                                [public; language filter]
        timeline::public(),
        // GET /api/v1/streaming/direct                                [private; *no* filter]
        timeline::direct(),
        // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
        timeline::hashtag(),
        // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
        timeline::hashtag_local(),
        // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
        timeline::list()
    )
    .untuple_one()
    .and(warp::sse())
    .map(move |timeline: String, user: User, sse: warp::sse::Sse| {
        let time_stream = tokio::timer::Interval::new(
            std::time::Instant::now(),
            std::time::Duration::from_millis(100),
        )
        .filter_map(move |_| {
            if let Ok(Async::Ready(Some(json_value))) =
                redis_updates_sse.configure_copy(&timeline, user).poll()
            {
                Some((
                    warp::sse::event(json_value[\"event\"].clone().to_string()),
                    warp::sse::data(json_value[\"payload\"].clone()),
                ))
            } else {
                None
            }
        });
        sse.reply(warp::sse::keep(time_stream, None))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    //let redis_updates_ws = StreamManager::new(Receiver::new());
    let websocket = path!(\"api\" / \"v1\" / \"streaming\")
        .and(Scope::Public.get_access_token())
        .and_then(|token| User::from_access_token(token, Scope::Public))
        .and(warp::query())
        .and(query::Media::to_filter())
        .and(query::Hashtag::to_filter())
        .and(query::List::to_filter())
        .and(warp::ws2())
        .and_then(
            move |mut user: User,
                  q: query::Stream,
                  m: query::Media,
                  h: query::Hashtag,
                  l: query::List,
                  ws: warp::ws::Ws2| {
                let unauthorized = Err(warp::reject::custom(\"Error: Invalid Access Token\"));
                let timeline = match q.stream.as_ref() {
                    // Public endpoints:
                    tl @ \"public\" | tl @ \"public:local\" if m.is_truthy() => format!(\"{}:media\", tl),
                    tl @ \"public:media\" | tl @ \"public:local:media\" => tl.to_string(),
                    tl @ \"public\" | tl @ \"public:local\" => tl.to_string(),
                    // User
                    \"user\" if user.id == -1 => return unauthorized,
                    \"user\" => format!(\"{}\", user.id),
                    \"user:notification\" => {
                        user = user.with_notification_filter();
                        format!(\"{}\", user.id)
                    }
                    // Hashtag endpoints:
                    // TODO: handle missing query
                    tl @ \"hashtag\" | tl @ \"hashtag:local\" => format!(\"{}:{}\", tl, h.tag),
                    // List endpoint:
                    // TODO: handle missing query
                    \"list\" if user.authorized_for_list(l.list).is_err() => return unauthorized,
                    \"list\" => format!(\"list:{}\", l.list),
                    // Direct endpoint:
                    \"direct\" if user.id == -1 => return unauthorized,
                    \"direct\" => \"direct\".to_string(),
                    // Other endpoints don't exist:
                    _ => return Err(warp::reject::custom(\"Error: Nonexistent WebSocket query\")),
                };
                let stream = redis_updates_ws.configure_copy(&timeline, user);

                Ok(ws.on_upgrade(move |socket| ws::send_replies(socket, stream)))
            },
        );

    warp::serve(websocket.or(routes)).run(([127, 0, 0, 1], 4000));
}
" 0 34 (fontified t face font-lock-doc-face) 34 38 (fontified t face font-lock-doc-face) 38 42 (fontified t face font-lock-doc-face) 42 142 (fontified t face font-lock-doc-face) 142 237 (fontified t face font-lock-doc-face) 237 305 (fontified t face font-lock-doc-face) 305 370 (fontified t face font-lock-doc-face) 370 374 (fontified t face font-lock-doc-face) 374 399 (fontified t face font-lock-doc-face) 399 432 (fontified t face font-lock-doc-face) 432 500 (fontified t face font-lock-doc-face) 500 535 (fontified t face font-lock-doc-face) 535 638 (fontified t face font-lock-doc-face) 638 715 (fontified t face font-lock-doc-face) 715 719 (fontified t face font-lock-doc-face) 719 751 (fontified t face font-lock-doc-face) 751 855 (fontified t face font-lock-doc-face) 855 928 (fontified t face font-lock-doc-face) 928 929 (fontified t syntax-table #1# face font-lock-doc-face) 929 934 (fontified t face font-lock-doc-face) 934 935 (fontified t syntax-table #1# face font-lock-doc-face) 935 959 (fontified t face font-lock-doc-face) 959 1035 (fontified t face font-lock-doc-face) 1035 1059 (fontified t face font-lock-doc-face) 1059 1162 (fontified t face font-lock-doc-face) 1162 1257 (fontified t face font-lock-doc-face) 1257 1289 (fontified t face font-lock-doc-face) 1289 1293 (fontified t face font-lock-doc-face) 1293 1328 (fontified t face font-lock-doc-face) 1328 1420 (fontified t face font-lock-doc-face) 1420 1519 (fontified t face font-lock-doc-face) 1519 1559 (fontified t face font-lock-doc-face) 1559 1587 (fontified t face font-lock-doc-face) 1587 1588 (fontified t) 1588 1591 (fontified t face font-lock-keyword-face) 1591 1592 (fontified t) 1592 1595 (fontified t face font-lock-keyword-face) 1595 1596 (fontified t) 1596 1601 (fontified t face font-lock-constant-face) 1601 1603 (fontified t) 1603 1606 (fontified t face font-lock-keyword-face) 1606 1607 (fontified t) 1607 1610 (fontified t face font-lock-keyword-face) 1610 1611 (fontified t) 1611 1616 (fontified t face font-lock-constant-face) 1616 1618 (fontified t) 1618 1621 (fontified t face font-lock-keyword-face) 1621 1622 (fontified t) 1622 1625 (fontified t face font-lock-keyword-face) 1625 1626 (fontified t) 1626 1634 (fontified t face font-lock-constant-face) 1634 1636 (fontified t) 1636 1639 (fontified t face font-lock-keyword-face) 1639 1640 (fontified t) 1640 1643 (fontified t face font-lock-keyword-face) 1643 1644 (fontified t) 1644 1653 (fontified t face font-lock-constant-face) 1653 1655 (fontified t) 1655 1658 (fontified t face font-lock-keyword-face) 1658 1659 (fontified t) 1659 1662 (fontified t face font-lock-keyword-face) 1662 1663 (fontified t) 1663 1669 (fontified t face font-lock-constant-face) 1669 1671 (fontified t) 1671 1674 (fontified t face font-lock-keyword-face) 1674 1675 (fontified t) 1675 1678 (fontified t face font-lock-keyword-face) 1678 1679 (fontified t) 1679 1687 (fontified t face font-lock-constant-face) 1687 1689 (fontified t) 1689 1692 (fontified t face font-lock-keyword-face) 1692 1693 (fontified t) 1693 1696 (fontified t face font-lock-keyword-face) 1696 1697 (fontified t) 1697 1701 (fontified t face font-lock-constant-face) 1701 1703 (fontified t) 1703 1706 (fontified t face font-lock-keyword-face) 1706 1707 (fontified t) 1707 1710 (fontified t face font-lock-keyword-face) 1710 1711 (fontified t) 1711 1713 (fontified t face font-lock-constant-face) 1713 1715 (fontified t) 1715 1718 (fontified t face font-lock-keyword-face) 1718 1719 (fontified t) 1719 1726 (fontified t face font-lock-constant-face) 1726 1728 (fontified t) 1728 1734 (fontified t face font-lock-constant-face) 1734 1736 (fontified t) 1736 1742 (fontified t face font-lock-type-face) 1742 1744 (fontified t) 1744 1747 (fontified t face font-lock-keyword-face) 1747 1748 (fontified t) 1748 1755 (fontified t face font-lock-constant-face) 1755 1757 (fontified t) 1757 1762 (fontified t face font-lock-type-face) 1762 1764 (fontified t) 1764 1767 (fontified t face font-lock-keyword-face) 1767 1768 (fontified t) 1768 1776 (fontified t face font-lock-constant-face) 1776 1778 (fontified t) 1778 1786 (fontified t face font-lock-type-face) 1786 1788 (fontified t) 1788 1791 (fontified t face font-lock-keyword-face) 1791 1792 (fontified t) 1792 1798 (fontified t face font-lock-constant-face) 1798 1800 (fontified t) 1800 1813 (fontified t face font-lock-type-face) 1813 1815 (fontified t) 1815 1818 (fontified t face font-lock-keyword-face) 1818 1819 (fontified t) 1819 1823 (fontified t face font-lock-constant-face) 1823 1826 (fontified t) 1826 1831 (fontified t face font-lock-type-face) 1831 1833 (fontified t) 1833 1837 (fontified t face font-lock-type-face) 1837 1840 (fontified t) 1840 1843 (fontified t face font-lock-keyword-face) 1843 1844 (fontified t) 1844 1848 (fontified t face font-lock-constant-face) 1848 1856 (fontified t) 1856 1859 (fontified t face font-lock-keyword-face) 1859 1860 (fontified t) 1860 1864 (fontified t face font-lock-constant-face) 1864 1866 (fontified t) 1866 1872 (fontified t face font-lock-type-face) 1872 1873 (fontified t) 1873 1875 (fontified t face font-lock-keyword-face) 1875 1876 (fontified t) 1876 1886 (fontified t face font-lock-type-face) 1886 1889 (fontified t) 1889 1891 (fontified t face font-lock-keyword-face) 1891 1892 (fontified t) 1892 1896 (fontified t face font-lock-function-name-face) 1896 1905 (fontified t) 1905 1922 (fontified t face font-lock-constant-face) 1922 1937 (fontified t) 1937 1940 (fontified t face font-lock-keyword-face) 1940 1941 (fontified t) 1941 1954 (fontified t face font-lock-variable-name-face) 1954 1957 (fontified t) 1957 1970 (fontified t face font-lock-type-face) 1970 1976 (fontified t) 1976 1984 (fontified t face font-lock-type-face) 1984 1998 (fontified t) 1998 2001 (fontified t face font-lock-keyword-face) 2001 2002 (fontified t) 2002 2019 (fontified t face font-lock-variable-name-face) 2019 2054 (fontified t) 2054 2057 (fontified t face font-lock-keyword-face) 2057 2058 (fontified t) 2058 2074 (fontified t face font-lock-variable-name-face) 2074 2087 (fontified t) 2087 2105 (fontified t) 2535 2543 (fontified t) 2543 2546 (fontified t face font-lock-comment-delimiter-face) 2546 2632 (fontified t face font-lock-comment-face) 2632 2640 (fontified t) 2640 2648 (fontified t face font-lock-constant-face) 2648 2674 (fontified t) 2674 2677 (fontified t face font-lock-comment-delimiter-face) 2677 2763 (fontified t face font-lock-comment-face) 2763 2771 (fontified t) 2771 2779 (fontified t face font-lock-constant-face) 2779 2805 (fontified t) 2805 2808 (fontified t face font-lock-comment-delimiter-face) 2808 2894 (fontified t face font-lock-comment-face) 2894 2902 (fontified t) 2902 2910 (fontified t face font-lock-constant-face) 2910 2930 (fontified t) 2930 2933 (fontified t face font-lock-comment-delimiter-face) 2933 3016 (fontified t face font-lock-comment-face) 3016 3024 (fontified t) 3024 3032 (fontified t face font-lock-constant-face) 3032 3035 (fontified t) 3035 3044 (fontified t) 3044 3052 (fontified t) 3052 3055 (fontified t face font-lock-comment-delimiter-face) 3055 3132 (fontified t face font-lock-comment-face) 3132 3135 (fontified t face font-lock-comment-face) 3135 3143 (fontified t) 3143 3151 (fontified t face font-lock-constant-face) 3151 3172 (fontified t) 3172 3175 (fontified t face font-lock-comment-delimiter-face) 3175 3255 (fontified t face font-lock-comment-face) 3255 3263 (fontified t) 3263 3271 (fontified t face font-lock-constant-face) 3271 3298 (fontified t) 3298 3301 (fontified t face font-lock-comment-delimiter-face) 3301 3382 (fontified t face font-lock-comment-face) 3382 3390 (fontified t) 3390 3398 (fontified t face font-lock-constant-face) 3398 3407 (fontified t) 3407 3412 (fontified t) 3412 3441 (fontified t) 3441 3445 (fontified t face font-lock-constant-face) 3445 3463 (fontified t) 3463 3467 (fontified t face font-lock-keyword-face) 3467 3469 (fontified t) 3469 3477 (fontified t face font-lock-variable-name-face) 3477 3479 (fontified t) 3479 3485 (fontified t face font-lock-type-face) 3485 3487 (fontified t) 3487 3491 (fontified t face font-lock-variable-name-face) 3491 3493 (fontified t) 3493 3497 (fontified t face font-lock-type-face) 3497 3499 (fontified t) 3499 3502 (fontified t face font-lock-variable-name-face) 3502 3504 (fontified t) 3504 3508 (fontified t face font-lock-constant-face) 3508 3510 (fontified t) 3510 3513 (fontified t face font-lock-constant-face) 3513 3515 (fontified t) 3515 3518 (fontified t face font-lock-type-face) 3518 3530 (fontified t) 3530 3533 (fontified t face font-lock-keyword-face) 3533 3534 (fontified t) 3534 3544 (fontified t face font-lock-variable-name-face) 3544 3545 (face font-lock-variable-name-face fontified t) 3545 3548 (fontified t) 3548 3553 (face font-lock-constant-face fontified t) 3553 3555 (fontified t) 3555 3560 (face font-lock-constant-face fontified t) 3560 3562 (fontified t) 3562 3570 (face font-lock-type-face fontified t) 3570 3577 (fontified t) 3577 3589 (fontified t) 3589 3592 (fontified t face font-lock-constant-face) 3592 3594 (fontified t) 3594 3598 (fontified t face font-lock-constant-face) 3598 3600 (fontified t) 3600 3607 (fontified t face font-lock-type-face) 3607 3628 (fontified t) 3628 3631 (fontified t face font-lock-constant-face) 3631 3633 (fontified t) 3633 3637 (fontified t face font-lock-constant-face) 3637 3639 (fontified t) 3639 3647 (fontified t face font-lock-type-face) 3647 3677 (fontified t) 3677 3697 (fontified t) 3697 3701 (fontified t face font-lock-keyword-face) 3701 3708 (fontified t) 3708 3720 (fontified t) 3720 3722 (fontified t face font-lock-keyword-face) 3722 3723 (fontified t) 3723 3726 (fontified t face font-lock-keyword-face) 3726 3727 (fontified t) 3727 3729 (fontified t face font-lock-type-face) 3729 3730 (fontified t) 3730 3735 (fontified t face font-lock-type-face) 3735 3737 (fontified t) 3737 3742 (fontified t face font-lock-type-face) 3742 3743 (fontified t) 3743 3747 (fontified t face font-lock-type-face) 3747 3763 (fontified t) 3763 3867 (fontified t) 3867 3871 (fontified t face font-lock-type-face) 3871 3894 (fontified t) 3894 3898 (fontified t face font-lock-constant-face) 3898 3900 (fontified t) 3900 3903 (fontified t face font-lock-constant-face) 3903 3922 (fontified t) 3922 3929 (fontified t face font-lock-string-face) 3929 3973 (fontified t) 3973 3977 (fontified t face font-lock-constant-face) 3977 3979 (fontified t) 3979 3982 (fontified t face font-lock-constant-face) 3982 4000 (fontified t) 4000 4009 (fontified t face font-lock-string-face) 4009 4054 (fontified t) 4054 4058 (fontified t face font-lock-keyword-face) 4058 4077 (fontified t) 4077 4081 (fontified t face font-lock-type-face) 4081 4082 (fontified t) 4082 4126 (fontified t) 4126 4130 (fontified t face font-lock-constant-face) 4130 4132 (fontified t) 4132 4135 (fontified t face font-lock-constant-face) 4135 4155 (fontified t) 4155 4159 (fontified t face font-lock-type-face) 4159 4179 (fontified t) 4179 4183 (fontified t face font-lock-constant-face) 4183 4185 (fontified t) 4185 4190 (fontified t face font-lock-constant-face) 4190 4192 (fontified t) 4192 4196 (fontified t face font-lock-constant-face) 4196 4205 (fontified t) 4205 4208 (fontified t face font-lock-string-face) 4208 4217 (face font-lock-string-face fontified t) 4217 4219 (fontified t) 4219 4231 (face font-lock-string-face fontified t) 4231 4234 (fontified t) 4234 4247 (fontified t) 4247 4252 (fontified t face font-lock-constant-face) 4252 4263 (fontified t) 4263 4270 (fontified t) 4270 4275 (fontified t) 4275 4277 (fontified t face font-lock-comment-delimiter-face) 4277 4337 (fontified t face font-lock-comment-face) 4337 4341 (fontified t) 4341 4344 (fontified t face font-lock-keyword-face) 4344 4345 (fontified t) 4345 4354 (fontified t face font-lock-variable-name-face) 4354 4357 (fontified t) 4357 4362 (fontified t face font-lock-preprocessor-face) 4362 4363 (fontified t) 4363 4368 (fontified t face font-lock-string-face) 4368 4371 (fontified t) 4371 4375 (fontified t face font-lock-string-face) 4375 4378 (fontified t) 4378 4389 (fontified t face font-lock-string-face) 4389 4404 (fontified t) 4404 4409 (fontified t face font-lock-type-face) 4409 4411 (fontified t) 4411 4417 (fontified t face font-lock-type-face) 4417 4464 (fontified t) 4464 4468 (fontified t face font-lock-type-face) 4468 4495 (fontified t) 4495 4500 (fontified t face font-lock-type-face) 4500 4502 (fontified t) 4502 4508 (fontified t face font-lock-type-face) 4508 4524 (fontified t) 4524 4528 (fontified t face font-lock-constant-face) 4528 4552 (fontified t) 4552 4557 (fontified t face font-lock-constant-face) 4557 4559 (fontified t) 4559 4564 (fontified t face font-lock-type-face) 4564 4582 (fontified t) 4582 4592 (fontified t) 4592 4597 (fontified t face font-lock-constant-face) 4597 4599 (fontified t) 4599 4606 (fontified t face font-lock-type-face) 4606 4621 (fontified t) 4621 4634 (fontified t) 4634 4639 (fontified t face font-lock-constant-face) 4639 4641 (fontified t) 4641 4645 (fontified t face font-lock-type-face) 4645 4673 (fontified t) 4673 4677 (fontified t face font-lock-constant-face) 4677 4717 (fontified t) 4717 4721 (fontified t face font-lock-keyword-face) 4721 4723 (fontified t) 4723 4726 (fontified t face font-lock-keyword-face) 4726 4727 (fontified t) 4727 4731 (fontified t face font-lock-variable-name-face) 4731 4733 (fontified t) 4733 4734 (fontified t face font-lock-type-face) 4734 4737 (face font-lock-type-face fontified t) 4737 4739 (fontified t) 4757 4758 (face font-lock-variable-name-face) 4760 4765 (face font-lock-constant-face) 4767 4770 (face font-lock-type-face) 4770 4773 (face font-lock-type-face) 4793 4794 (face font-lock-variable-name-face) 4796 4801 (face font-lock-constant-face) 4803 4808 (face font-lock-type-face) 4828 4829 (face font-lock-variable-name-face) 4831 4836 (face font-lock-constant-face) 4838 4845 (face font-lock-type-face) 4865 4866 (face font-lock-variable-name-face) 4868 4873 (face font-lock-constant-face) 4875 4879 (face font-lock-type-face) 4899 4901 (face font-lock-variable-name-face) 4903 4907 (face font-lock-constant-face) 4909 4911 (face font-lock-constant-face) 4913 4916 (face font-lock-type-face) 4936 4939 (face font-lock-keyword-face) 4940 4952 (face font-lock-variable-name-face) 4955 4958 (face font-lock-type-face) 4959 4963 (face font-lock-constant-face) 4965 4971 (face font-lock-constant-face) 4980 5009 (face font-lock-string-face) 5029 5032 (face font-lock-keyword-face) 5033 5041 (face font-lock-variable-name-face) 5044 5049 (face font-lock-keyword-face) 5090 5093 (face font-lock-comment-delimiter-face) 5093 5111 (face font-lock-comment-face) 5136 5144 (face font-lock-string-face) 5152 5166 (face font-lock-string-face) 5167 5169 (face font-lock-keyword-face) 5185 5186 (syntax-table #1#) 5187 5194 (face rust-builtin-formatting-macro-face) 5195 5196 (face font-lock-string-face) 5196 5198 (face rust-string-interpolation-face) 5198 5205 (face font-lock-string-face) 5281 5282 (syntax-table #1#) 5356 5357 (syntax-table #1#) 5426 5427 (syntax-table #2#) 5447 5448 (syntax-table #1#) 5494 5495 (syntax-table #2#) 5498 5499 (syntax-table #1#) 5565 5566 (syntax-table #1#) 5853 5854 (syntax-table #1#) 6045 6046 (syntax-table #1#) 6096 6097 (syntax-table #1#) 6213 6214 (syntax-table #1#) 6266 6267 (syntax-table #1#) 6365 6366 (syntax-table #1#)) . 1) (undo-tree-id1437 . -3697) (undo-tree-id1438 . -3697) (undo-tree-id1439 . -2535) (undo-tree-id1440 . -3697) (undo-tree-id1441 . -3697) (undo-tree-id1442 . -3697) (undo-tree-id1443 . -2535) (undo-tree-id1444 . -3697) (undo-tree-id1445 . -3697) (undo-tree-id1446 . -2535) (undo-tree-id1447 . -3697) (undo-tree-id1448 . -3697) (undo-tree-id1449 . -2535) (undo-tree-id1450 . -3697) (undo-tree-id1451 . -3697) (undo-tree-id1452 . -3697) (undo-tree-id1453 . -2535) (undo-tree-id1454 . -3697) (undo-tree-id1455 . -3697) (undo-tree-id1456 . -3697) (undo-tree-id1457 . -2535) (undo-tree-id1458 . -3697) (undo-tree-id1459 . -3697) (undo-tree-id1460 . -2535) (undo-tree-id1461 . -3697) (undo-tree-id1462 . -3697) (undo-tree-id1463 . -2535) (undo-tree-id1464 . -3697) (undo-tree-id1465 . -3697) (undo-tree-id1466 . -2535) (undo-tree-id1467 . -3697) (undo-tree-id1468 . -3697) (undo-tree-id1469 . -3697) (undo-tree-id1470 . -2535) (undo-tree-id1471 . -3697) (undo-tree-id1472 . -3697) (undo-tree-id1473 . -3697) (undo-tree-id1474 . -2535) (undo-tree-id1475 . -3697) (undo-tree-id1476 . -3697) (undo-tree-id1477 . -2535) (undo-tree-id1478 . -3697) (undo-tree-id1479 . -3697) (undo-tree-id1480 . -2535) (undo-tree-id1481 . -3698) (undo-tree-id1482 . -3698) (undo-tree-id1483 . -2535) (undo-tree-id1484 . -3698) (undo-tree-id1485 . -3698) (undo-tree-id1486 . -3698) (undo-tree-id1487 . -2535) (undo-tree-id1488 . -3698) (undo-tree-id1489 . -3698) (undo-tree-id1490 . -3698) (undo-tree-id1491 . -2535) (undo-tree-id1492 . -3698) (undo-tree-id1493 . -3698) (undo-tree-id1494 . -2535) (undo-tree-id1495 . -3698) (undo-tree-id1496 . -3698) (undo-tree-id1497 . -2535) (undo-tree-id1498 . -3675) (undo-tree-id1499 . -3698) (undo-tree-id1500 . -2535) (undo-tree-id1501 . -3675) (undo-tree-id1502 . -3675) (undo-tree-id1503 . -3698) (undo-tree-id1504 . -2535) (undo-tree-id1505 . -3675) (undo-tree-id1506 . -3675) (undo-tree-id1507 . -3698) (undo-tree-id1508 . -2535) (undo-tree-id1509 . -3675) (undo-tree-id1510 . -3698) (undo-tree-id1511 . -2535) (undo-tree-id1512 . -3675) (undo-tree-id1513 . -3698) (undo-tree-id1514 . -2535) (undo-tree-id1515 . -3922) (undo-tree-id1516 . -3923) (undo-tree-id1517 . -3664) (undo-tree-id1518 . -3665) (undo-tree-id1519 . -3660) (undo-tree-id1520 . -3661) (undo-tree-id1521 . -3613) (undo-tree-id1522 . -3614) (undo-tree-id1523 . -3612) (undo-tree-id1524 . -3613) (undo-tree-id1525 . -3575) (undo-tree-id1526 . -3576) (undo-tree-id1527 . -3637) (undo-tree-id1528 . -3675) (undo-tree-id1529 . -2535) (undo-tree-id1530 . -3637) (undo-tree-id1531 . -3637) (undo-tree-id1532 . -3675) (undo-tree-id1533 . -2535) (undo-tree-id1534 . -3637) (undo-tree-id1535 . -3637) (undo-tree-id1536 . -3675) (undo-tree-id1537 . -2535) (undo-tree-id1538 . -2535) (undo-tree-id1539 . -3637) (undo-tree-id1540 . -3637) (undo-tree-id1541 . -3637) (undo-tree-id1542 . -3675) (undo-tree-id1543 . -2535) (undo-tree-id1544 . -3637) (undo-tree-id1545 . -3675) (undo-tree-id1546 . -2535) (undo-tree-id1547 . -3697) (undo-tree-id1548 . -3701) (undo-tree-id1549 . -6673) (undo-tree-id1550 . -6675) (undo-tree-id1551 . -3463) (undo-tree-id1552 . -3467) (undo-tree-id1553 . -3697) (undo-tree-id1554 . -3701) (undo-tree-id1555 . -3459) (undo-tree-id1556 . -3462) (undo-tree-id1557 . -3463) (undo-tree-id1558 . -3467) (undo-tree-id1559 . -3463) (undo-tree-id1560 . -3519) (undo-tree-id1561 . -3459) (undo-tree-id1562 . -3462) (undo-tree-id1563 . -3697) (undo-tree-id1564 . -3705) (undo-tree-id1565 . -3463) (undo-tree-id1566 . -3519) (undo-tree-id1567 . -6673) (undo-tree-id1568 . -6675) (undo-tree-id1569 . -3697) (undo-tree-id1570 . -3705) (undo-tree-id1571 . -3594) (undo-tree-id1572 . -3598) (undo-tree-id1573 . -3633) (undo-tree-id1574 . -3637) (undo-tree-id1575 . -3637) (undo-tree-id1576 . -3637) (undo-tree-id1577 . -2535) (undo-tree-id1578 . -3637) (undo-tree-id1579 . -3637) (undo-tree-id1580 . -2535) (t 23764 64396 990810 46000)) (23764 64409 133665 691000) 0 nil]) ((3819 . 3821) (#("(" 0 1 (fontified nil)) . -3819) (3814 . 3820)) ((#(".poll(" 0 5 (fontified nil) 5 6 (fontified nil)) . 3814) (undo-tree-id1581 . -5) (undo-tree-id1582 . -5) (undo-tree-id1583 . -5) (undo-tree-id1584 . -5) (undo-tree-id1585 . -5) (undo-tree-id1586 . -5) (undo-tree-id1587 . -5) (undo-tree-id1588 . -5) (undo-tree-id1589 . -5) (undo-tree-id1590 . 1) (undo-tree-id1591 . -5) (undo-tree-id1592 . 1) (undo-tree-id1593 . -5) (undo-tree-id1594 . 1) (undo-tree-id1595 . -5) (3819 . 3820) (#("()" 0 1 (fontified t) 1 2 (fontified t)) . 3819) (undo-tree-id1596 . 1) (undo-tree-id1597 . 2) (undo-tree-id1598 . -1) (undo-tree-id1599 . 1) (undo-tree-id1600 . -1) (undo-tree-id1601 . 1) (undo-tree-id1602 . -2)) (23764 64414 835895 465000) 0 nil]) ((#("        let mut event_stream = 
" 0 8 (fontified t) 8 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 15 (fontified t face font-lock-keyword-face) 15 16 (fontified t) 16 28 (fontified t face font-lock-variable-name-face) 28 31 (fontified t) 31 32 (fontified t)) . 3523)) ((3523 . 3555)) (23764 64416 65987 378000) 0 nil]) ((3846 . 3847) (#("                " 0 16 (fontified nil)) . 3846) (undo-tree-id1312 . 16) (undo-tree-id1314 . -16) (undo-tree-id1316 . -16) (undo-tree-id1318 . -16) (undo-tree-id1319 . -16) (undo-tree-id1321 . -16) (#("
" 0 1 (fontified t)) . 3846) (undo-tree-id1322 . 1)) ((3846 . 3847) (3846 . 3862) (#(" " 0 1 (fontified t)) . 3846) (undo-tree-id1603 . 1)) (23764 64416 933044 890000) 0 nil]) ((#("event_stream.poll() " 0 20 (fontified t)) . 3863)) ((3863 . 3883)) (23764 64417 583582 68000) 0 nil]) ((#(";" 0 1 (fontified t rear-nonsticky t)) . 3846)) ((3846 . 3847)) (23764 64418 37644 204000) 0 nil]) ((3796 . 3797) (#("
" 0 1 (fontified t)) . 3796) (undo-tree-id1288 . -1) (undo-tree-id1289 . -1) (undo-tree-id1291 . -1) (undo-tree-id1293 . -1) (undo-tree-id1295 . -1) (undo-tree-id1297 . -1) (undo-tree-id1299 . -1) (undo-tree-id1301 . -1) (undo-tree-id1303 . -1) (undo-tree-id1305 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1310 . -1)) ((3796 . 3797) (#(" " 0 1 (fontified t)) . 3796)) (23764 64418 434257 717000) 0 nil]) ((nil rear-nonsticky nil 3846 . 3847) (3797 . 3847)) ((#("redis_updates_sse.configure_copy(&timeline, user);" 0 49 (fontified nil) 49 50 (fontified nil rear-nonsticky nil)) . 3797) (undo-tree-id1604 . -49) (undo-tree-id1605 . -49) (undo-tree-id1606 . -49) (undo-tree-id1607 . -49) (nil rear-nonsticky t 3846 . 3847)) (23764 64419 672681 208000) 0 nil]) ((3798 . 3814) (#("                " 0 16 (fontified nil)) . 3797) (undo-tree-id1274 . -16) (undo-tree-id1275 . -16) (3797 . 3814) (#(" " 0 1 (fontified nil)) . 3796) (undo-tree-id1277 . -1) (undo-tree-id1279 . -1) (undo-tree-id1281 . -1) (undo-tree-id1283 . -1) (undo-tree-id1285 . -1) (undo-tree-id1287 . -1) (3797 . 3798)) ((#("
" 0 1 (fontified nil)) . 3797) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (3796 . 3797) (#("                
" 0 16 (fontified nil) 16 17 (fontified nil)) . 3797) (undo-tree-id1623 . 1) (undo-tree-id1624 . -16) (undo-tree-id1625 . -16) (3797 . 3813) (#("                " 0 16 (fontified t)) . 3798)) (23764 64420 216863 541000) 0 nil]) ((#("redis_updates_sse.configure_copy(&timeline, user);" 0 50 (fontified t)) . 3554)) ((3554 . 3604)) (23764 64420 593928 569000) 0 nil]) ((#("            // event_stream.filter_map(move |item| {
            //     let payload = item[\"payload\"].clone();
            //     let event = item[\"event\"].clone().to_string();
            //     Some((warp::sse::event(event), warp::sse::data(payload)))
            // }),
" 0 12 (fontified t) 12 15 (fontified t face font-lock-comment-delimiter-face) 15 53 (fontified t face font-lock-comment-face) 53 65 (fontified t) 65 72 (fontified t face font-lock-comment-delimiter-face) 72 111 (fontified t face font-lock-comment-face) 111 123 (fontified t) 123 130 (fontified t face font-lock-comment-delimiter-face) 130 177 (fontified t face font-lock-comment-face) 177 189 (fontified t) 189 196 (fontified t face font-lock-comment-delimiter-face) 196 254 (fontified t face font-lock-comment-face) 254 266 (fontified t) 266 269 (fontified t face font-lock-comment-delimiter-face) 269 273 (fontified t face font-lock-comment-face)) . 4161) (undo-tree-id1161 . -254) (undo-tree-id1162 . -254) (undo-tree-id1163 . -132) (undo-tree-id1164 . -132) (undo-tree-id1165 . -132) (undo-tree-id1166 . -132) (undo-tree-id1167 . -21) (undo-tree-id1168 . -254) (undo-tree-id1169 . -254) (undo-tree-id1170 . -254) 4415) nil (23764 64422 16958 387000) 0 nil]) ((#("        // let event_stream_real = time_stream.map_err(|_| ()).for_each(move |_| {
        //     if let Ok(Async::Ready(Some(json_value))) = event_stream.poll() {
        //         let msg = warp::ws::Message::text(json_value.to_string());
        //         Ok(msg)
        //     } else {
        //         Err(())
        //     }
        // });
" 0 8 (fontified t) 8 11 (fontified t face font-lock-comment-delimiter-face) 11 83 (fontified t face font-lock-comment-face) 83 91 (fontified t) 91 98 (fontified t face font-lock-comment-delimiter-face) 98 134 (fontified t face font-lock-comment-face) 134 164 (fontified t face font-lock-comment-face) 164 172 (fontified t) 172 183 (fontified t face font-lock-comment-delimiter-face) 183 242 (fontified t face font-lock-comment-face) 242 243 (fontified t) 243 250 (fontified t) 250 261 (fontified t face font-lock-comment-delimiter-face) 261 265 (fontified t face font-lock-comment-face) 265 266 (fontified t face font-lock-comment-face) 266 269 (face font-lock-comment-face fontified t) 269 277 (fontified t) 277 284 (fontified t face font-lock-comment-delimiter-face) 284 293 (fontified t face font-lock-comment-face) 293 301 (fontified t) 301 312 (fontified t face font-lock-comment-delimiter-face) 312 320 (fontified t face font-lock-comment-face) 320 328 (fontified t) 328 335 (fontified t face font-lock-comment-delimiter-face) 335 337 (fontified t face font-lock-comment-face) 337 345 (fontified t) 345 348 (fontified t face font-lock-comment-delimiter-face) 348 352 (fontified t face font-lock-comment-face)) . 4126) (undo-tree-id1171 . -337) (undo-tree-id1172 . -337) (undo-tree-id1173 . -337) (t 23764 64223 877765 733000)) nil (23764 64373 164252 919000) 0 nil]) ((#("                println!(\"Foo\");
" 0 16 (fontified t) 16 24 (fontified t face rust-builtin-formatting-macro-face) 24 25 (fontified t) 25 29 (fontified t face font-lock-string-face) 29 30 (fontified t face font-lock-string-face) 30 32 (fontified t) 32 33 (fontified t)) . 3869) (undo-tree-id1137 . -16) (undo-tree-id1138 . 1) (undo-tree-id1139 . -16) (undo-tree-id1140 . -16) (undo-tree-id1141 . -21) (undo-tree-id1142 . -21) (undo-tree-id1143 . -21) (undo-tree-id1144 . -21) (undo-tree-id1145 . -21) (undo-tree-id1146 . -21) (undo-tree-id1147 . -25) (undo-tree-id1148 . -26) 3890 (t 23764 64173 861157 428000)) nil (23764 64223 795001 715000) 0 nil]) ((3900 . 3901)) nil (23764 64173 781010 27000) 0 nil]) ((3895 . 3898) (#("B" 0 1 (fontified t face font-lock-string-face)) . -3895) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -3896) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -3897) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) 3898 (3895 . 3898) (3894 . 3896) (#("\"" 0 1 (fontified nil)) . -3894) (3894 . 3895) (3893 . 3895) (#("(" 0 1 (fontified nil)) . -3893) (3890 . 3894) (3885 . 3890)) nil (23764 64173 781042 144000) 0 nil]) ((#("println" 0 7 (fontified t)) . 3885) (undo-tree-id1118 . -6) (undo-tree-id1119 . -6) (undo-tree-id1120 . -6) (undo-tree-id1121 . -7) (undo-tree-id1122 . -7) (undo-tree-id1123 . -6) (undo-tree-id1124 . -7) (undo-tree-id1125 . -7) (undo-tree-id1126 . -6) (undo-tree-id1127 . -6) (undo-tree-id1128 . -6) (undo-tree-id1129 . -6) (undo-tree-id1130 . -6) (undo-tree-id1131 . -6) (undo-tree-id1132 . -6) (undo-tree-id1133 . -6) (undo-tree-id1134 . -6) (undo-tree-id1135 . -6) (undo-tree-id1136 . -6) 3891) nil (23764 64173 781079 411000) 0 nil]) ((3891 . 3892) (3885 . 3891) (3869 . 3885) (3869 . 3870) (t 23764 64046 334575 541000)) nil (23764 64173 781086 963000) 0 nil] [nil nil ((3890 . 3892) (#("(" 0 1 (fontified nil)) . -3890) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (3886 . 3891) (3885 . 3886) (3869 . 3885) (3869 . 3870) (t 23764 64046 334575 541000)) ((#("
" 0 1 (fontified nil)) . 3869) (undo-tree-id828 . 1) (undo-tree-id829 . -1) (#("                " 0 16 (fontified nil)) . 3869) (undo-tree-id830 . -16) (undo-tree-id831 . -16) (undo-tree-id832 . -16) (undo-tree-id833 . -16) (undo-tree-id834 . -16) (undo-tree-id835 . -16) (undo-tree-id836 . -16) (undo-tree-id837 . -16) (undo-tree-id838 . -16) (undo-tree-id839 . -16) (undo-tree-id840 . -16) (undo-tree-id841 . -16) (undo-tree-id842 . -16) (undo-tree-id843 . -16) (undo-tree-id844 . -16) (undo-tree-id845 . -16) (undo-tree-id846 . -16) (undo-tree-id847 . -16) (undo-tree-id848 . -16) (undo-tree-id849 . -16) (undo-tree-id850 . -16) (undo-tree-id851 . -16) (undo-tree-id852 . -16) (undo-tree-id853 . -16) (undo-tree-id854 . -16) (undo-tree-id855 . -16) (undo-tree-id856 . -16) (undo-tree-id857 . -16) (undo-tree-id858 . -16) (undo-tree-id859 . -16) (undo-tree-id860 . -16) (undo-tree-id861 . -16) (undo-tree-id862 . -16) (undo-tree-id863 . -16) (undo-tree-id864 . -16) (undo-tree-id865 . -16) (undo-tree-id866 . -16) (undo-tree-id867 . -16) (undo-tree-id868 . -16) (undo-tree-id869 . -16) (undo-tree-id870 . -16) (undo-tree-id871 . -16) (undo-tree-id872 . -16) (undo-tree-id873 . -16) (undo-tree-id874 . -16) (undo-tree-id875 . -16) (undo-tree-id876 . -16) (undo-tree-id877 . -16) (undo-tree-id878 . -16) (undo-tree-id879 . -16) (undo-tree-id880 . -16) (undo-tree-id881 . -16) (undo-tree-id882 . -16) (undo-tree-id883 . -16) (undo-tree-id884 . -16) (undo-tree-id885 . -16) (undo-tree-id886 . -16) (undo-tree-id887 . -16) (undo-tree-id888 . -16) (undo-tree-id889 . -16) (undo-tree-id890 . -16) (undo-tree-id891 . -16) (undo-tree-id892 . -16) (undo-tree-id893 . -16) (undo-tree-id894 . -16) (undo-tree-id895 . -16) (undo-tree-id896 . -16) (undo-tree-id897 . -16) (undo-tree-id898 . -16) (undo-tree-id899 . -16) (undo-tree-id900 . -16) (undo-tree-id901 . -16) (undo-tree-id902 . -16) (undo-tree-id903 . -16) (undo-tree-id904 . -16) (undo-tree-id905 . -16) (undo-tree-id906 . -16) (undo-tree-id907 . -16) (undo-tree-id908 . -16) (undo-tree-id909 . -16) (undo-tree-id910 . -16) (undo-tree-id911 . -16) (undo-tree-id912 . -16) (undo-tree-id913 . -16) (undo-tree-id914 . -16) (undo-tree-id915 . -16) (undo-tree-id916 . -16) (undo-tree-id917 . -16) (undo-tree-id918 . -16) (undo-tree-id919 . -16) (#("i" 0 1 (fontified nil face font-lock-preprocessor-face)) . 3885) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (#("nfo!(" 0 4 (fontified nil face font-lock-preprocessor-face) 4 5 (fontified nil)) . 3886) (undo-tree-id1010 . -2) (undo-tree-id1011 . -1) (undo-tree-id1012 . -2) (undo-tree-id1013 . -2) (undo-tree-id1014 . -1) (undo-tree-id1015 . -2) (undo-tree-id1016 . -1) (undo-tree-id1017 . -3) (undo-tree-id1018 . -2) (undo-tree-id1019 . -3) (undo-tree-id1020 . -3) (undo-tree-id1021 . -2) (undo-tree-id1022 . -3) (undo-tree-id1023 . -3) (undo-tree-id1024 . -2) (undo-tree-id1025 . -3) (undo-tree-id1026 . -2) (undo-tree-id1027 . -3) (undo-tree-id1028 . -2) (undo-tree-id1029 . -4) (undo-tree-id1030 . -3) (undo-tree-id1031 . -4) (undo-tree-id1032 . -4) (undo-tree-id1033 . -3) (undo-tree-id1034 . -4) (undo-tree-id1035 . -4) (undo-tree-id1036 . -3) (undo-tree-id1037 . -4) (undo-tree-id1038 . -3) (undo-tree-id1039 . -4) (undo-tree-id1040 . -3) (undo-tree-id1041 . -4) (undo-tree-id1042 . -5) (undo-tree-id1043 . -4) (undo-tree-id1044 . -5) (undo-tree-id1045 . -4) (undo-tree-id1046 . -4) (undo-tree-id1047 . -4) (undo-tree-id1048 . -4) (undo-tree-id1049 . -4) (undo-tree-id1050 . -4) (undo-tree-id1051 . -4) (undo-tree-id1052 . -4) (undo-tree-id1053 . -4) (undo-tree-id1054 . -4) (undo-tree-id1055 . -4) (undo-tree-id1056 . -4) (undo-tree-id1057 . -4) (undo-tree-id1058 . -4) (undo-tree-id1059 . -3) (undo-tree-id1060 . -4) (undo-tree-id1061 . -3) (undo-tree-id1062 . -4) (undo-tree-id1063 . -4) (undo-tree-id1064 . -4) (undo-tree-id1065 . -4) (undo-tree-id1066 . -4) (undo-tree-id1067 . -4) (undo-tree-id1068 . -4) (undo-tree-id1069 . -4) (undo-tree-id1070 . -4) (undo-tree-id1071 . -4) (undo-tree-id1072 . -4) (undo-tree-id1073 . -4) (undo-tree-id1074 . -3) (undo-tree-id1075 . -4) (undo-tree-id1076 . -3) (undo-tree-id1077 . -3) (undo-tree-id1078 . -4) (undo-tree-id1079 . -3) (undo-tree-id1080 . -3) (undo-tree-id1081 . -4) (undo-tree-id1082 . -3) (undo-tree-id1083 . -4) (undo-tree-id1084 . -3) (undo-tree-id1085 . -4) (undo-tree-id1086 . -2) (undo-tree-id1087 . -3) (undo-tree-id1088 . -2) (undo-tree-id1089 . -2) (undo-tree-id1090 . -3) (undo-tree-id1091 . -2) (undo-tree-id1092 . -2) (undo-tree-id1093 . -3) (undo-tree-id1094 . -2) (undo-tree-id1095 . -2) (undo-tree-id1096 . -2) (undo-tree-id1097 . -3) (undo-tree-id1098 . -2) (undo-tree-id1099 . -3) (3890 . 3891) (#("()" 0 1 (fontified t) 1 2 (fontified t)) . 3890) (undo-tree-id1100 . 1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . -1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (undo-tree-id1109 . -2) (undo-tree-id1110 . -1) (undo-tree-id1111 . -2)) (23764 64132 405242 890000) 0 nil]) ((#("                println!(\"Ding\");
" 0 16 (fontified t) 16 24 (fontified t face rust-builtin-formatting-macro-face) 24 25 (fontified t) 25 31 (fontified t face font-lock-string-face) 31 33 (fontified t) 33 34 (fontified t)) . 3869) (undo-tree-id811 . -32) (undo-tree-id812 . 1) (undo-tree-id813 . -32) (undo-tree-id814 . -32) (undo-tree-id815 . -32) (undo-tree-id816 . -32) (undo-tree-id817 . -32) (undo-tree-id818 . -32) (undo-tree-id819 . -32) (undo-tree-id820 . -32) (undo-tree-id821 . -32) (undo-tree-id822 . -32) (undo-tree-id823 . -32) (undo-tree-id824 . -32) (undo-tree-id825 . -32) 3901 (t 23764 63945 964564 669000)) nil (23764 64132 420044 662000) 0 nil]) ((3901 . 3902) (#(")" 0 1 (fontified nil)) . 3901) (3900 . 3901) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 3900) (3895 . 3900) (3894 . 3896) (#("\"" 0 1 (fontified nil)) . -3894) (3894 . 3895) (3893 . 3895) (#("(" 0 1 (fontified nil)) . -3893) (3892 . 3894) (#("@" 0 1 (fontified t)) . -3892) (undo-tree-id805 . -1) (undo-tree-id806 . -1) 3893 (3892 . 3893) (#("@" 0 1 (fontified t)) . -3892) (undo-tree-id807 . -1) (undo-tree-id808 . -1) 3893 (#("()" 0 1 (fontified t) 1 2 (fontified t)) . 3893) (undo-tree-id809 . -1) (undo-tree-id810 . -1) 3894 (3893 . 3895) (#("(" 0 1 (fontified nil)) . -3893) (3885 . 3894) (3869 . 3885) (3869 . 3870) 3890 (t 23764 63799 537882 596000)) nil (23764 63945 879383 851000) 0 nil]) ((1 . 7394) (#("//! Streaming server for Mastodon
//!
//!
//! This server provides live, streaming updates for Mastodon clients.  Specifically, when a server
//! is running this sever, Mastodon clients can use either Server Sent Events or WebSockets to
//! connect to the server with the API described [in the public API
//! documentation](https://docs.joinmastodon.org/api/streaming/)
//!
//! # Notes on data flow
//! * **Client Request → Warp**:
//! Warp filters for valid requests and parses request data. Based on that data, it generates a `User`
//! representing the client that made the request.  The `User` is authenticated, if appropriate.  Warp
//! repeatedly polls the StreamManager for information relevant to the User.
//!
//! * **Warp → StreamManager**:
//! A new `StreamManager` is created for each request.  The `StreamManager` exists to manage concurrent
//! access to the (single) `Receiver`, which it can access behind an `Arc<Mutex>`.  The `StreamManager`
//! polles the `Receiver` for any updates relvant to the current client.  If there are updates, the
//! `StreamManager` filters them with the client's filters and passes any matching updates up to Warp.
//! The `StreamManager` is also responsible for sending `subscribe` commands to Redis (via the
//! `Receiver`) when necessary.
//!
//! * **StreamManger → Receiver**:
//! The Receiver receives data from Redis and stores it in a series of queues (one for each
//! StreamManager). When (asynchronously) polled by the StreamManager, it sends back the  messages
//! relevant to that StreamManager and removes them from the queue.

pub mod error;
pub mod query;
pub mod receiver;
pub mod redis_cmd;
pub mod stream;
pub mod timeline;
pub mod user;
pub mod ws;
use futures::stream::Stream;
use futures::Async;
use receiver::Receiver;
use stream::StreamManager;
use user::{Scope, User};
use warp::path;
use warp::Filter as WarpFilter;

fn main() {
    pretty_env_logger::init();

    let redis_updates = StreamManager::new(Receiver::new());
    let redis_updates_sse = redis_updates.blank_copy();
    let redis_updates_ws = redis_updates.blank_copy();

    let routes = any_of!(
        // GET /api/v1/streaming/user/notification                     [private; notification filter]
        timeline::user_notifications(),
        // GET /api/v1/streaming/user                                  [private; language filter]
        timeline::user(),
        // GET /api/v1/streaming/public/local?only_media=true          [public; language filter]
        timeline::public_local_media(),
        // GET /api/v1/streaming/public?only_media=true                [public; language filter]
        timeline::public_media(),
        // GET /api/v1/streaming/public/local                          [public; language filter]
        timeline::public_local(),
        // GET /api/v1/streaming/public                                [public; language filter]
        timeline::public(),
        // GET /api/v1/streaming/direct                                [private; *no* filter]
        timeline::direct(),
        // GET /api/v1/streaming/hashtag?tag=:hashtag                  [public; no filter]
        timeline::hashtag(),
        // GET /api/v1/streaming/hashtag/local?tag=:hashtag            [public; no filter]
        timeline::hashtag_local(),
        // GET /api/v1/streaming/list?list=:list_id                    [private; no filter]
        timeline::list()
    )
    .untuple_one()
    .and(warp::sse())
    .map(move |timeline: String, user: User, sse: warp::sse::Sse| {
        let mut event_stream = redis_updates_sse.configure_copy(&timeline, user);
        let time_stream = tokio::timer::Interval::new(
            std::time::Instant::now(),
            std::time::Duration::from_millis(100),
        )
        .filter_map(move |_| {
            if let Ok(Async::Ready(Some(json_value))) = event_stream.poll() {
                Some((warp::sse::event(json_value[\"event\"].clone().to_string()), warp::sse::data(json_value[\"payload\"].clone())))
            } else {
                None
            }
        });
        // let event_stream_real = time_stream.map_err(|_| ()).for_each(move |_| {
        //     if let Ok(Async::Ready(Some(json_value))) = event_stream.poll() {
        //         let msg = warp::ws::Message::text(json_value.to_string());
        //         Ok(msg)
        //     } else {
        //         Err(())
        //     }
        // });
        sse.reply(warp::sse::keep(
            // event_stream.filter_map(move |item| {
            //     let payload = item[\"payload\"].clone();
            //     let event = item[\"event\"].clone().to_string();
            //     Some((warp::sse::event(event), warp::sse::data(payload)))
            // }),
            time_stream,
            None,
        ))
    })
    .with(warp::reply::with::header(\"Connection\", \"keep-alive\"))
    .recover(error::handle_errors);

    //let redis_updates_ws = StreamManager::new(Receiver::new());
    let websocket = path!(\"api\" / \"v1\" / \"streaming\")
        .and(Scope::Public.get_access_token())
        .and_then(|token| User::from_access_token(token, Scope::Public))
        .and(warp::query())
        .and(query::Media::to_filter())
        .and(query::Hashtag::to_filter())
        .and(query::List::to_filter())
        .and(warp::ws2())
        .and_then(
            move |mut user: User,
                  q: query::Stream,
                  m: query::Media,
                  h: query::Hashtag,
                  l: query::List,
                  ws: warp::ws::Ws2| {
                let unauthorized = Err(warp::reject::custom(\"Error: Invalid Access Token\"));
                let timeline = match q.stream.as_ref() {
                    // Public endpoints:
                    tl @ \"public\" | tl @ \"public:local\" if m.is_truthy() => format!(\"{}:media\", tl),
                    tl @ \"public:media\" | tl @ \"public:local:media\" => tl.to_string(),
                    tl @ \"public\" | tl @ \"public:local\" => tl.to_string(),
                    // User
                    \"user\" if user.id == -1 => return unauthorized,
                    \"user\" => format!(\"{}\", user.id),
                    \"user:notification\" => {
                        user = user.with_notification_filter();
                        format!(\"{}\", user.id)
                    }
                    // Hashtag endpoints:
                    // TODO: handle missing query
                    tl @ \"hashtag\" | tl @ \"hashtag:local\" => format!(\"{}:{}\", tl, h.tag),
                    // List endpoint:
                    // TODO: handle missing query
                    \"list\" if user.authorized_for_list(l.list).is_err() => return unauthorized,
                    \"list\" => format!(\"list:{}\", l.list),
                    // Direct endpoint:
                    \"direct\" if user.id == -1 => return unauthorized,
                    \"direct\" => \"direct\".to_string(),
                    // Other endpoints don't exist:
                    _ => return Err(warp::reject::custom(\"Error: Nonexistent WebSocket query\")),
                };
                let stream = redis_updates_ws.configure_copy(&timeline, user);

                Ok(ws.on_upgrade(move |socket| ws::send_replies(socket, stream)))
            },
        );

    warp::serve(websocket.or(routes)).run(([127, 0, 0, 1], 4000));
}
" 0 34 (fontified t face font-lock-doc-face) 34 38 (fontified t face font-lock-doc-face) 38 42 (fontified t face font-lock-doc-face) 42 142 (fontified t face font-lock-doc-face) 142 237 (fontified t face font-lock-doc-face) 237 305 (fontified t face font-lock-doc-face) 305 370 (fontified t face font-lock-doc-face) 370 374 (fontified t face font-lock-doc-face) 374 399 (fontified t face font-lock-doc-face) 399 432 (fontified t face font-lock-doc-face) 432 500 (fontified t face font-lock-doc-face) 500 535 (fontified t face font-lock-doc-face) 535 638 (fontified t face font-lock-doc-face) 638 715 (fontified t face font-lock-doc-face) 715 719 (fontified t face font-lock-doc-face) 719 751 (fontified t face font-lock-doc-face) 751 855 (fontified t face font-lock-doc-face) 855 928 (fontified t face font-lock-doc-face) 928 929 (fontified t syntax-table #1# face font-lock-doc-face) 929 934 (fontified t face font-lock-doc-face) 934 935 (fontified t syntax-table #1# face font-lock-doc-face) 935 959 (fontified t face font-lock-doc-face) 959 1035 (fontified t face font-lock-doc-face) 1035 1059 (fontified t face font-lock-doc-face) 1059 1162 (fontified t face font-lock-doc-face) 1162 1257 (fontified t face font-lock-doc-face) 1257 1289 (fontified t face font-lock-doc-face) 1289 1293 (fontified t face font-lock-doc-face) 1293 1328 (fontified t face font-lock-doc-face) 1328 1420 (fontified t face font-lock-doc-face) 1420 1519 (fontified t face font-lock-doc-face) 1519 1559 (fontified t face font-lock-doc-face) 1559 1587 (fontified t face font-lock-doc-face) 1587 1588 (fontified t) 1588 1591 (fontified t face font-lock-keyword-face) 1591 1592 (fontified t) 1592 1595 (fontified t face font-lock-keyword-face) 1595 1596 (fontified t) 1596 1601 (fontified t face font-lock-constant-face) 1601 1603 (fontified t) 1603 1606 (fontified t face font-lock-keyword-face) 1606 1607 (fontified t) 1607 1610 (fontified t face font-lock-keyword-face) 1610 1611 (fontified t) 1611 1616 (fontified t face font-lock-constant-face) 1616 1618 (fontified t) 1618 1621 (fontified t face font-lock-keyword-face) 1621 1622 (fontified t) 1622 1625 (fontified t face font-lock-keyword-face) 1625 1626 (fontified t) 1626 1634 (fontified t face font-lock-constant-face) 1634 1636 (fontified t) 1636 1639 (fontified t face font-lock-keyword-face) 1639 1640 (fontified t) 1640 1643 (fontified t face font-lock-keyword-face) 1643 1644 (fontified t) 1644 1653 (fontified t face font-lock-constant-face) 1653 1655 (fontified t) 1655 1658 (fontified t face font-lock-keyword-face) 1658 1659 (fontified t) 1659 1662 (fontified t face font-lock-keyword-face) 1662 1663 (fontified t) 1663 1669 (fontified t face font-lock-constant-face) 1669 1671 (fontified t) 1671 1674 (fontified t face font-lock-keyword-face) 1674 1675 (fontified t) 1675 1678 (fontified t face font-lock-keyword-face) 1678 1679 (fontified t) 1679 1687 (fontified t face font-lock-constant-face) 1687 1689 (fontified t) 1689 1692 (fontified t face font-lock-keyword-face) 1692 1693 (fontified t) 1693 1696 (fontified t face font-lock-keyword-face) 1696 1697 (fontified t) 1697 1701 (fontified t face font-lock-constant-face) 1701 1703 (fontified t) 1703 1706 (fontified t face font-lock-keyword-face) 1706 1707 (fontified t) 1707 1710 (fontified t face font-lock-keyword-face) 1710 1711 (fontified t) 1711 1713 (fontified t face font-lock-constant-face) 1713 1715 (fontified t) 1715 1718 (fontified t face font-lock-keyword-face) 1718 1719 (fontified t) 1719 1726 (fontified t face font-lock-constant-face) 1726 1728 (fontified t) 1728 1734 (fontified t face font-lock-constant-face) 1734 1736 (fontified t) 1736 1742 (fontified t face font-lock-type-face) 1742 1744 (fontified t) 1744 1747 (fontified t face font-lock-keyword-face) 1747 1748 (fontified t) 1748 1755 (fontified t face font-lock-constant-face) 1755 1757 (fontified t) 1757 1762 (fontified t face font-lock-type-face) 1762 1764 (fontified t) 1764 1767 (fontified t face font-lock-keyword-face) 1767 1768 (fontified t) 1768 1776 (fontified t face font-lock-constant-face) 1776 1778 (fontified t) 1778 1786 (fontified t face font-lock-type-face) 1786 1788 (fontified t) 1788 1791 (fontified t face font-lock-keyword-face) 1791 1792 (fontified t) 1792 1798 (fontified t face font-lock-constant-face) 1798 1800 (fontified t) 1800 1813 (fontified t face font-lock-type-face) 1813 1815 (fontified t) 1815 1818 (fontified t face font-lock-keyword-face) 1818 1819 (fontified t) 1819 1823 (fontified t face font-lock-constant-face) 1823 1826 (fontified t) 1826 1831 (fontified t face font-lock-type-face) 1831 1833 (fontified t) 1833 1837 (fontified t face font-lock-type-face) 1837 1840 (fontified t) 1840 1843 (fontified t face font-lock-keyword-face) 1843 1844 (fontified t) 1844 1848 (fontified t face font-lock-constant-face) 1848 1856 (fontified t) 1856 1859 (fontified t face font-lock-keyword-face) 1859 1860 (fontified t) 1860 1864 (fontified t face font-lock-constant-face) 1864 1866 (fontified t) 1866 1872 (fontified t face font-lock-type-face) 1872 1873 (fontified t) 1873 1875 (fontified t face font-lock-keyword-face) 1875 1876 (fontified t) 1876 1886 (fontified t face font-lock-type-face) 1886 1889 (fontified t) 1889 1891 (fontified t face font-lock-keyword-face) 1891 1892 (fontified t) 1892 1896 (fontified t face font-lock-function-name-face) 1896 1905 (fontified t) 1905 1922 (fontified t face font-lock-constant-face) 1922 1937 (fontified t) 1937 1940 (fontified t face font-lock-keyword-face) 1940 1941 (fontified t) 1941 1954 (fontified t face font-lock-variable-name-face) 1954 1957 (fontified t) 1957 1970 (fontified t face font-lock-type-face) 1970 1976 (fontified t) 1976 1984 (fontified t face font-lock-type-face) 1984 1998 (fontified t) 1998 2001 (fontified t face font-lock-keyword-face) 2001 2002 (fontified t) 2002 2019 (fontified t face font-lock-variable-name-face) 2019 2054 (fontified t) 2054 2057 (fontified t face font-lock-keyword-face) 2057 2058 (fontified t) 2058 2074 (fontified t face font-lock-variable-name-face) 2074 2087 (fontified t) 2087 2105 (fontified t) 2640 2648 (face font-lock-constant-face) 2674 2677 (face font-lock-comment-delimiter-face) 2677 2763 (face font-lock-comment-face) 2771 2779 (face font-lock-constant-face) 2797 2805 (fontified t) 2805 2808 (fontified t face font-lock-comment-delimiter-face) 2808 2894 (fontified t face font-lock-comment-face) 2894 2902 (fontified t) 2902 2910 (fontified t face font-lock-constant-face) 2910 2930 (fontified t) 2930 2933 (fontified t face font-lock-comment-delimiter-face) 2933 3016 (fontified t face font-lock-comment-face) 3016 3024 (fontified t) 3024 3032 (fontified t face font-lock-constant-face) 3032 3052 (fontified t) 3052 3055 (fontified t face font-lock-comment-delimiter-face) 3055 3135 (fontified t face font-lock-comment-face) 3135 3143 (fontified t) 3143 3151 (fontified t face font-lock-constant-face) 3151 3165 (fontified t) 3165 3172 (fontified t) 3172 3175 (fontified t face font-lock-comment-delimiter-face) 3175 3255 (fontified t face font-lock-comment-face) 3255 3263 (fontified t) 3263 3271 (fontified t face font-lock-constant-face) 3271 3298 (fontified t) 3298 3301 (fontified t face font-lock-comment-delimiter-face) 3301 3382 (fontified t face font-lock-comment-face) 3382 3390 (fontified t) 3390 3394 (fontified t face font-lock-constant-face) 3394 3398 (face font-lock-constant-face fontified t) 3398 3407 (fontified t) 3407 3441 (fontified t) 3441 3445 (fontified t face font-lock-constant-face) 3445 3463 (fontified t) 3463 3467 (fontified t face font-lock-keyword-face) 3467 3469 (fontified t) 3469 3477 (fontified t face font-lock-variable-name-face) 3477 3479 (fontified t) 3479 3485 (fontified t face font-lock-type-face) 3485 3487 (fontified t) 3487 3491 (fontified t face font-lock-variable-name-face) 3491 3493 (fontified t) 3493 3497 (fontified t face font-lock-type-face) 3497 3499 (fontified t) 3499 3502 (fontified t face font-lock-variable-name-face) 3502 3504 (fontified t) 3504 3508 (fontified t face font-lock-constant-face) 3508 3510 (fontified t) 3510 3513 (fontified t face font-lock-constant-face) 3513 3515 (fontified t) 3515 3518 (fontified t face font-lock-type-face) 3518 3522 (fontified t) 3522 3530 (fontified t) 3530 3533 (fontified t face font-lock-keyword-face) 3533 3534 (fontified t) 3534 3537 (fontified t face font-lock-keyword-face) 3537 3538 (fontified t) 3538 3550 (fontified t face font-lock-variable-name-face) 3550 3604 (fontified t) 3604 3612 (fontified t) 3612 3615 (fontified t face font-lock-keyword-face) 3615 3616 (fontified t) 3616 3627 (fontified t face font-lock-variable-name-face) 3627 3630 (fontified t) 3630 3635 (fontified t face font-lock-constant-face) 3635 3637 (fontified t) 3637 3642 (fontified t face font-lock-constant-face) 3642 3644 (fontified t) 3644 3652 (fontified t face font-lock-type-face) 3652 3671 (fontified t) 3671 3674 (fontified t face font-lock-constant-face) 3674 3676 (fontified t) 3676 3680 (fontified t face font-lock-constant-face) 3680 3682 (fontified t) 3682 3689 (fontified t face font-lock-type-face) 3689 3710 (fontified t) 3710 3713 (fontified t face font-lock-constant-face) 3713 3715 (fontified t) 3715 3719 (fontified t face font-lock-constant-face) 3719 3721 (fontified t) 3721 3729 (fontified t face font-lock-type-face) 3729 3736 (fontified t) 3736 3749 (fontified t) 3749 3779 (fontified t) 3779 3783 (fontified t face font-lock-keyword-face) 3783 3802 (fontified t) 3802 3804 (fontified t face font-lock-keyword-face) 3804 3805 (fontified t) 3805 3808 (fontified t face font-lock-keyword-face) 3808 3809 (fontified t) 3809 3811 (fontified t face font-lock-type-face) 3811 3812 (fontified t) 3812 3817 (fontified t face font-lock-type-face) 3817 3819 (fontified t) 3819 3824 (fontified t face font-lock-type-face) 3824 3825 (fontified t) 3825 3829 (fontified t face font-lock-type-face) 3829 3868 (fontified t) 3868 3884 (fontified t) 3884 3888 (fontified t face font-lock-type-face) 3888 3890 (fontified t) 3890 3894 (fontified t face font-lock-constant-face) 3894 3896 (fontified t) 3896 3899 (fontified t face font-lock-constant-face) 3899 3917 (fontified t) 3917 3918 (fontified t) 3918 3924 (fontified t face font-lock-string-face) 3924 3925 (fontified t face font-lock-string-face) 3925 3932 (fontified t) 3932 3944 (fontified t) 3944 3946 (fontified t) 3946 3949 (fontified t) 3949 3953 (fontified t face font-lock-constant-face) 3953 3955 (fontified t) 3955 3958 (fontified t face font-lock-constant-face) 3958 3965 (fontified t) 3965 3975 (fontified t) 3975 3976 (fontified t) 3976 3984 (fontified t face font-lock-string-face) 3984 3985 (fontified t face font-lock-string-face) 3985 3992 (fontified t) 3992 3993 (fontified t) 3993 3994 (fontified t) 3994 3998 (fontified t) 3998 4012 (fontified t) 4012 4016 (fontified t face font-lock-keyword-face) 4016 4019 (fontified t) 4019 4035 (fontified t) 4035 4039 (fontified t face font-lock-type-face) 4039 4074 (fontified t) 4074 4077 (fontified t face font-lock-comment-delimiter-face) 4077 4149 (fontified t face font-lock-comment-face) 4149 4150 (fontified t) 4150 4157 (fontified t) 4157 4164 (fontified t face font-lock-comment-delimiter-face) 4164 4230 (fontified t face font-lock-comment-face) 4230 4238 (fontified t) 4238 4249 (fontified t face font-lock-comment-delimiter-face) 4249 4308 (fontified t face font-lock-comment-face) 4308 4316 (fontified t) 4316 4327 (fontified t face font-lock-comment-delimiter-face) 4327 4335 (fontified t face font-lock-comment-face) 4335 4343 (fontified t) 4343 4350 (fontified t face font-lock-comment-delimiter-face) 4350 4359 (fontified t face font-lock-comment-face) 4359 4367 (fontified t) 4367 4378 (fontified t face font-lock-comment-delimiter-face) 4378 4386 (fontified t face font-lock-comment-face) 4386 4394 (fontified t) 4394 4401 (fontified t face font-lock-comment-delimiter-face) 4401 4403 (fontified t face font-lock-comment-face) 4403 4411 (fontified t) 4411 4414 (fontified t face font-lock-comment-delimiter-face) 4414 4418 (fontified t face font-lock-comment-face) 4418 4436 (fontified t) 4436 4440 (fontified t face font-lock-constant-face) 4440 4442 (fontified t) 4442 4445 (fontified t face font-lock-constant-face) 4445 4465 (fontified t) 4465 4468 (fontified t face font-lock-comment-delimiter-face) 4468 4498 (fontified t face font-lock-comment-face) 4498 4506 (face font-lock-comment-face fontified t) 4506 4518 (fontified t) 4518 4525 (fontified t face font-lock-comment-delimiter-face) 4525 4539 (fontified t face font-lock-comment-face) 4539 4564 (fontified t face font-lock-comment-face) 4564 4576 (fontified t) 4576 4583 (fontified t face font-lock-comment-delimiter-face) 4583 4630 (fontified t face font-lock-comment-face) 4630 4642 (fontified t) 4642 4649 (fontified t face font-lock-comment-delimiter-face) 4649 4707 (fontified t face font-lock-comment-face) 4707 4719 (fontified t) 4719 4722 (fontified t face font-lock-comment-delimiter-face) 4722 4726 (fontified t face font-lock-comment-face) 4726 4730 (fontified t) 4730 4751 (fontified t) 4751 4763 (fontified t) 4763 4767 (fontified t face font-lock-type-face) 4767 4797 (fontified t) 4797 4801 (fontified t face font-lock-constant-face) 4801 4803 (fontified t) 4803 4808 (fontified t face font-lock-constant-face) 4808 4810 (fontified t) 4810 4814 (fontified t face font-lock-constant-face) 4814 4823 (fontified t) 4823 4835 (fontified t face font-lock-string-face) 4835 4837 (fontified t) 4837 4849 (fontified t face font-lock-string-face) 4849 4865 (fontified t) 4865 4870 (fontified t face font-lock-constant-face) 4870 4893 (fontified t) 4893 4895 (fontified t face font-lock-comment-delimiter-face) 4895 4955 (fontified t face font-lock-comment-face) 4955 4959 (fontified t) 4959 4962 (fontified t face font-lock-keyword-face) 4962 4963 (fontified t) 4963 4972 (fontified t face font-lock-variable-name-face) 4972 4975 (fontified t) 4975 4980 (fontified t face font-lock-preprocessor-face) 4980 4981 (fontified t) 4981 4986 (fontified t face font-lock-string-face) 4986 4989 (fontified t) 4989 4993 (fontified t face font-lock-string-face) 4993 4996 (fontified t) 4996 5006 (fontified t face font-lock-string-face) 5006 5007 (face font-lock-string-face fontified t) 5007 5009 (fontified t) 5022 5027 (face font-lock-type-face) 5029 5035 (face font-lock-type-face) 5082 5086 (face font-lock-type-face) 5113 5118 (face font-lock-type-face) 5120 5126 (face font-lock-type-face) 5142 5146 (face font-lock-constant-face) 5170 5175 (face font-lock-constant-face) 5177 5182 (face font-lock-type-face) 5210 5215 (face font-lock-constant-face) 5217 5224 (face font-lock-type-face) 5252 5257 (face font-lock-constant-face) 5259 5263 (face font-lock-type-face) 5803 5804 (syntax-table #1#) 5899 5900 (syntax-table #1#) 5974 5975 (syntax-table #1#) 6044 6045 (syntax-table #2#) 6065 6066 (syntax-table #1#) 6112 6113 (syntax-table #2#) 6116 6117 (syntax-table #1#) 6183 6184 (syntax-table #1#) 6471 6472 (syntax-table #1#) 6663 6664 (syntax-table #1#) 6714 6715 (syntax-table #1#) 6831 6832 (syntax-table #1#) 6884 6885 (syntax-table #1#) 6983 6984 (syntax-table #1#)) . 1) (undo-tree-id698 . 3341) (undo-tree-id699 . -3965) (undo-tree-id700 . -3965) (undo-tree-id701 . -3965) (undo-tree-id702 . -3965) (undo-tree-id703 . -3965) (undo-tree-id704 . -3965) (undo-tree-id705 . -3965) (undo-tree-id706 . -3965) (undo-tree-id707 . -3977) (undo-tree-id708 . -3977) (undo-tree-id709 . -2894) (undo-tree-id710 . -3978) (undo-tree-id711 . -3977) (undo-tree-id712 . -2894) (undo-tree-id713 . -3978) (undo-tree-id714 . -2894) (undo-tree-id715 . -3978) (undo-tree-id716 . -3992) (undo-tree-id717 . -3985) (undo-tree-id718 . -3984) (undo-tree-id719 . -2894) (undo-tree-id720 . -4544) (undo-tree-id721 . -4545) (undo-tree-id722 . -3975) (undo-tree-id723 . -3976) (undo-tree-id724 . -3986) (undo-tree-id725 . -3986) (undo-tree-id726 . -2894) (undo-tree-id727 . -3987) (undo-tree-id728 . -3986) (undo-tree-id729 . -2894) (undo-tree-id730 . -3988) (undo-tree-id731 . -3987) (undo-tree-id732 . -2894) (undo-tree-id733 . -3989) (undo-tree-id734 . -3988) (undo-tree-id735 . -2894) (undo-tree-id736 . -3990) (undo-tree-id737 . -3989) (undo-tree-id738 . -2894) (undo-tree-id739 . -3991) (undo-tree-id740 . -3990) (undo-tree-id741 . -2894) (undo-tree-id742 . -3992) (undo-tree-id743 . -3991) (undo-tree-id744 . -2894) (undo-tree-id745 . -3992) (undo-tree-id746 . -3992) (undo-tree-id747 . -3992) (undo-tree-id748 . -3992) (undo-tree-id749 . -3992) (undo-tree-id750 . -3993) (undo-tree-id751 . -3993) (undo-tree-id752 . -3992) (undo-tree-id753 . -2894) (undo-tree-id754 . -3992) (undo-tree-id755 . -3992) (undo-tree-id756 . -2894) (undo-tree-id757 . -4544) (undo-tree-id758 . -4545) (undo-tree-id759 . -3992) (undo-tree-id760 . -3992) (undo-tree-id761 . -2894) (undo-tree-id762 . -4544) (undo-tree-id763 . -4545) (undo-tree-id764 . -4544) (undo-tree-id765 . -4545) (undo-tree-id766 . 3342) (undo-tree-id767 . -3993) (undo-tree-id768 . 3341) (undo-tree-id769 . -3993) (undo-tree-id770 . 3341) (undo-tree-id771 . -3994) 3993) nil (23764 63799 455125 66000) 0 nil]) nil nil (23764 63799 455176 138000) 0 nil] #3# 84795 121 nil)