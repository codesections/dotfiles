"3cf8f717f02d740e380c93630182a75d1612f9ab"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#1=[nil nil ((194 . 198) (193 . 195) (#("\"" 0 1 (fontified nil)) . -193) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (193 . 194) (#(":" 0 1 (fontified t face font-lock-builtin-face)) . -193) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . 1) 194 (187 . 194) (#("l" 0 1 (fontified t face racket-keyword-argument-face)) . -187) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . 1) (#("c" 0 1 (fontified t face racket-keyword-argument-face)) . -188) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . 1) (#("a" 0 1 (fontified t face racket-keyword-argument-face)) . -189) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . 1) 190 (186 . 190) (184 . 186) (t 23728 45806 543137 296000)) nil (23728 46026 498323 126000) 0 nil]) ((319 . 323) (#("root" 0 4 (fontified t face racket-selfeval-face)) . 319)) nil (23728 45806 512161 899000) 0 nil]) ((334 . 338) (#(" " 0 1 (fontified t)) . 334)) nil (23728 45806 512176 727000) 0 nil]) ((306 . 310) (#(" " 0 1 (fontified t)) . 306)) nil (23728 45806 512203 347000) 0 nil]) ((296 . 299) (#(" " 0 1 (fontified t)) . 296) (t 23728 45701 57080 706000)) nil (23728 45806 512210 548000) 0 nil]) ((283 . 287) (#("root" 0 4 (fontified t face font-lock-function-name-face)) . 283) (undo-tree-id1714 . 4)) nil (23728 45701 27569 468000) 0 nil]) ((230 . 231) (t 23728 45632 554145 756000)) nil (23728 45701 27582 229000) 0 nil]) (270) nil (23728 45701 27587 760000) 0 nil] [nil nil ((366 . 367) (t 23728 45468 191777 128000)) ((#("*" 0 1 (fontified t)) . 366) (undo-tree-id1700 . 1) (undo-tree-id1701 . 1) (undo-tree-id1702 . 1) (undo-tree-id1703 . 1) (undo-tree-id1704 . 1) (undo-tree-id1705 . 1) (undo-tree-id1706 . 1) (undo-tree-id1707 . 1) (undo-tree-id1708 . 1) (undo-tree-id1709 . 1) (undo-tree-id1710 . 1) (undo-tree-id1711 . 1) (undo-tree-id1712 . 1) (undo-tree-id1713 . 1) (t 23728 45582 311105 898000)) (23728 45582 280078 157000) 0 nil] [nil nil ((373 . 374) (#(")" 0 1 (fontified t)) . -369) (undo-tree-id1675 . 1) (undo-tree-id1677 . -1) (368 . 370) (#("(" 0 1 (fontified nil face racket-selfeval-face)) . -368) (undo-tree-id1680 . -1) (368 . 369) (t 23728 45238 326488 186000)) ((#("(" 0 1 (fontified nil face racket-selfeval-face)) . 368) (undo-tree-id1681 . 1) (368 . 369) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 368) (undo-tree-id1682 . 2) (undo-tree-id1683 . 2) (undo-tree-id1684 . 2) (undo-tree-id1685 . 2) (undo-tree-id1686 . 2) (undo-tree-id1687 . 2) (undo-tree-id1688 . 2) (undo-tree-id1689 . 2) (undo-tree-id1690 . 2) (undo-tree-id1691 . 2) (undo-tree-id1692 . 2) (undo-tree-id1693 . 2) (undo-tree-id1694 . 2) (undo-tree-id1695 . 2) (undo-tree-id1696 . 2) (undo-tree-id1697 . -1) (369 . 370) (#(")" 0 1 (fontified t)) . 373) (undo-tree-id1698 . 1) (undo-tree-id1699 . -1) (t 23728 45268 332972 628000)) (23728 45268 295127 845000) 0 nil]) ((368 . 372) (#("div" 0 3 (fontified t face racket-selfeval-face)) . 368) (undo-tree-id1667 . -3) (undo-tree-id1668 . -3) (undo-tree-id1669 . -3) (undo-tree-id1670 . -3) (undo-tree-id1671 . -3) (undo-tree-id1672 . -3) (undo-tree-id1673 . 3)) nil (23728 45598 412319 178000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((369 . 374)) ((#("items" 0 5 (fontified t)) . 369) (undo-tree-id1645 . -4) (undo-tree-id1646 . -4) (undo-tree-id1647 . 1) (undo-tree-id1648 . 1) (undo-tree-id1649 . -4) (undo-tree-id1650 . -4) (undo-tree-id1651 . 1) (undo-tree-id1652 . 1) (undo-tree-id1653 . 1) (undo-tree-id1654 . 1) (undo-tree-id1655 . 1) (undo-tree-id1656 . 1) (undo-tree-id1657 . -4) (undo-tree-id1658 . 1) (undo-tree-id1659 . 1) (undo-tree-id1660 . -4) (undo-tree-id1661 . 1) (undo-tree-id1662 . 1) (undo-tree-id1663 . -4) (undo-tree-id1664 . -4) (undo-tree-id1665 . 1) (undo-tree-id1666 . 1) (t 23728 45182 816827 537000)) (23728 45182 679058 295000) 0 nil]) ((#("t" 0 1 (fontified t)) . 369) (undo-tree-id1641 . 1) (undo-tree-id1642 . 1) (undo-tree-id1644 . 1) (t 23728 45171 470230 618000)) ((369 . 370)) (23728 45221 542419 694000) 0 nil]) ((#(" " 0 1 (fontified t)) . 352) (undo-tree-id1613 . 1) (undo-tree-id1615 . 1) (undo-tree-id1617 . 1) (undo-tree-id1619 . 1)) ((352 . 353)) (23728 45221 882620 853000) 0 nil]) ((#("(t)" 0 3 (fontified t)) . 352) (undo-tree-id1621 . 3) (undo-tree-id1623 . 3) (undo-tree-id1625 . -1) (undo-tree-id1627 . 3) (undo-tree-id1629 . 2) (undo-tree-id1631 . 1) (undo-tree-id1633 . -1)) ((352 . 355)) (23728 45222 142862 151000) 0 nil]) ((#(" " 0 1 (fontified t)) . 352) (undo-tree-id1635 . 1) (undo-tree-id1637 . -1)) ((352 . 353)) (23728 45223 100626 332000) 0 nil]) ((#("Î»" 0 1 (fontified t face font-lock-keyword-face)) . 352)) ((352 . 353)) (23728 45223 593646 373000) 0 nil]) ((#(")" 0 1 (rear-nonsticky t fontified nil)) . 377) (undo-tree-id1639 . 1) (undo-tree-id1640 . 1) (#("(" 0 1 (fontified t)) . 352) 358 (t 23728 45021 364500 865000)) ((352 . 353) (377 . 378)) (23728 45223 945094 244000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 375) (undo-tree-id1605 . -1) (undo-tree-id1606 . 1) (374 . 375) (373 . 375) (#("(" 0 1 (fontified nil)) . -373) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (371 . 374) (#("a" 0 1 (fontified t face racket-selfeval-face)) . -371) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (undo-tree-id1611 . 1) 372 (371 . 372) (t 23728 44992 964681 466000)) nil (23728 45224 315430 331000) 0 nil]) ((371 . 373) (t 23728 44973 161474 797000)) nil (23728 44992 825651 952000) 0 nil]) ((#(" " 0 1 (fontified t)) . 371) (undo-tree-id1559 . -1) (undo-tree-id1560 . 1) (undo-tree-id1561 . -1) (undo-tree-id1562 . -1) (undo-tree-id1563 . -1) (undo-tree-id1564 . -1) (undo-tree-id1565 . 1) (undo-tree-id1566 . 1) (undo-tree-id1567 . 1) (undo-tree-id1568 . 1) (undo-tree-id1569 . 1) (undo-tree-id1570 . 1) (undo-tree-id1571 . 1) (undo-tree-id1572 . 1)) nil (23728 44973 77689 570000) 0 nil]) ((#("t" 0 1 (fontified t)) . 372) (undo-tree-id1573 . 1) (undo-tree-id1574 . 1) (undo-tree-id1575 . 1) (undo-tree-id1576 . 1) (undo-tree-id1577 . 1) (undo-tree-id1578 . 1) (undo-tree-id1579 . 1)) nil (23728 44973 77702 841000) 0 nil]) ((368 . 371)) nil (23728 44973 77706 20000) 0 nil]) ((#("()" 0 2 (fontified t)) . 368) (undo-tree-id1580 . -1) (undo-tree-id1581 . -2) (undo-tree-id1582 . -1) (undo-tree-id1583 . -2) (undo-tree-id1584 . -1) (undo-tree-id1585 . -2) (undo-tree-id1586 . -1) (undo-tree-id1587 . -2) (undo-tree-id1588 . -1) (undo-tree-id1589 . -2) (undo-tree-id1590 . -1) (undo-tree-id1591 . -2) (undo-tree-id1592 . -1) (undo-tree-id1593 . 1) (undo-tree-id1594 . -1) (undo-tree-id1595 . 2) (undo-tree-id1596 . 1) (undo-tree-id1597 . 2) (undo-tree-id1598 . -1) (undo-tree-id1599 . 1) (undo-tree-id1600 . -1) (undo-tree-id1601 . 1) (undo-tree-id1602 . -2) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (t 23728 44814 265848 873000)) nil (23728 44973 77733 398000) 0 nil]) ((370 . 372) (#(")" 0 1 (fontified nil)) . 370) (undo-tree-id1522 . -1) (undo-tree-id1523 . 1) (369 . 370) (368 . 370) (#("(" 0 1 (fontified nil)) . -368) (undo-tree-id1524 . -1) (undo-tree-id1525 . -1) (367 . 369) (#("()" 0 2 (fontified t)) . 367) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) 368 (#(")" 0 1 (fontified nil)) . 369) (368 . 369) (367 . 369) (#("(" 0 1 (fontified nil)) . -367) (367 . 368) (360 . 367) (#("string->symbol (format \"(span \\\"~a\\\")\" t)" 0 14 (fontified t face font-lock-builtin-face) 14 16 (fontified t) 16 22 (fontified t face font-lock-builtin-face) 22 23 (fontified t) 23 24 (fontified t face font-lock-string-face) 24 25 (fontified t face font-lock-string-face) 25 29 (fontified t face font-lock-string-face) 29 30 (fontified t face font-lock-string-face) 30 31 (fontified t face font-lock-string-face) 31 34 (fontified t face font-lock-string-face) 34 36 (fontified t face font-lock-string-face) 36 37 (fontified t face font-lock-string-face) 37 38 (fontified t face font-lock-string-face) 38 41 (fontified t)) . 360) (undo-tree-id1528 . -24) (undo-tree-id1529 . 16) (undo-tree-id1530 . -24) (undo-tree-id1531 . 13) (undo-tree-id1532 . 13) (undo-tree-id1533 . -28) (undo-tree-id1534 . -28) (undo-tree-id1535 . 16) (undo-tree-id1536 . 16) (undo-tree-id1537 . -28) (undo-tree-id1538 . -24) (undo-tree-id1539 . -24) (undo-tree-id1540 . 4) (undo-tree-id1541 . 4) (undo-tree-id1542 . -24) (undo-tree-id1543 . -36) (undo-tree-id1544 . -36) (undo-tree-id1545 . 17) (undo-tree-id1546 . 17) (undo-tree-id1547 . -36) (undo-tree-id1548 . -24) (undo-tree-id1549 . -24) (undo-tree-id1550 . 17) (undo-tree-id1551 . 17) (undo-tree-id1552 . 17) (undo-tree-id1553 . 17) (undo-tree-id1554 . -24) (undo-tree-id1555 . -8) (undo-tree-id1556 . -8) (undo-tree-id1557 . 33) (undo-tree-id1558 . 32) 368 (t 23728 44760 202881 211000)) nil (23728 44814 238938 834000) 0 nil]) ((396 . 397) (#(")" 0 1 (fontified t face font-lock-string-face)) . -389) (389 . 390) (#(")" 0 1 (fontified t face font-lock-string-face)) . -385) (384 . 386) (#("(" 0 1 (fontified nil face font-lock-string-face)) . -384) (384 . 385) (t 23728 44726 819777 87000)) nil (23728 44760 178870 810000) 0 nil]) ((#("r" 0 1 (fontified t face font-lock-string-face)) . 395) (undo-tree-id1487 . 1) (undo-tree-id1488 . 1) (undo-tree-id1489 . 1) (undo-tree-id1490 . 1) (undo-tree-id1491 . 1) (undo-tree-id1492 . -1) (undo-tree-id1493 . 1) (undo-tree-id1494 . 1) (undo-tree-id1495 . 1) (undo-tree-id1496 . 1)) nil (23728 44726 685395 936000) 0 nil]) ((#("r" 0 1 (fontified t face font-lock-string-face)) . 395) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (undo-tree-id1501 . -1) (undo-tree-id1502 . 1) (undo-tree-id1503 . 1) (undo-tree-id1504 . 1) (undo-tree-id1505 . 1) (undo-tree-id1506 . 1)) nil (23728 44726 685463 885000) 0 nil]) ((396 . 397) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 396) (undo-tree-id1507 . 1) (undo-tree-id1508 . 1) (undo-tree-id1509 . 1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . 1) (undo-tree-id1516 . 1) (undo-tree-id1517 . -1)) nil (23728 44726 685507 233000) 0 nil]) ((395 . 396) (#("\\" 0 1 (fontified t face font-lock-string-face)) . 395) (undo-tree-id1518 . 1) (undo-tree-id1519 . 1) (undo-tree-id1520 . 1) (undo-tree-id1521 . 1)) nil (23728 44726 685532 393000) 0 nil] [nil nil ((#("\"span \\\"~a\\\"\\\"\"" 0 6 (fontified t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face) 7 10 (fontified t face font-lock-string-face) 10 12 (fontified t face font-lock-string-face) 12 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face)) . 383) (undo-tree-id1331 . -1) (undo-tree-id1332 . 3) (undo-tree-id1333 . -1) (undo-tree-id1334 . 11) (undo-tree-id1335 . 11) (undo-tree-id1336 . -4) (undo-tree-id1337 . -4) (undo-tree-id1338 . 14) (undo-tree-id1339 . 14) (undo-tree-id1340 . -4) (undo-tree-id1341 . -1) (undo-tree-id1342 . -1) (undo-tree-id1343 . 14) (undo-tree-id1344 . 14) (undo-tree-id1345 . 14) (undo-tree-id1346 . 14) (undo-tree-id1347 . -1) (undo-tree-id1348 . -12) (undo-tree-id1349 . -12) (undo-tree-id1350 . -10) (undo-tree-id1351 . -10) (undo-tree-id1352 . -15) (undo-tree-id1353 . 1) (undo-tree-id1354 . 1) (undo-tree-id1355 . 1) (undo-tree-id1356 . 1) (undo-tree-id1357 . 1) (undo-tree-id1358 . 1) (undo-tree-id1359 . -10) (undo-tree-id1360 . -10) (undo-tree-id1361 . -10) (undo-tree-id1362 . -10) (undo-tree-id1363 . -10) (undo-tree-id1364 . -10) (undo-tree-id1365 . -10) (undo-tree-id1366 . -15) (undo-tree-id1367 . -10) (undo-tree-id1368 . -12) (undo-tree-id1369 . -11) (undo-tree-id1370 . -12) (undo-tree-id1371 . 3) (undo-tree-id1372 . 5) (undo-tree-id1373 . -12) (undo-tree-id1374 . -14) (undo-tree-id1375 . -12) (undo-tree-id1376 . -14) (undo-tree-id1377 . -12) (undo-tree-id1378 . -14) (undo-tree-id1379 . -10) (undo-tree-id1380 . -12) (undo-tree-id1381 . -6) (undo-tree-id1382 . -8) (undo-tree-id1383 . -12) (undo-tree-id1384 . -14) (undo-tree-id1385 . -12) (undo-tree-id1386 . -14) (undo-tree-id1387 . 4) (undo-tree-id1388 . 4) (undo-tree-id1389 . 3) (undo-tree-id1390 . 4) (undo-tree-id1391 . -12) (undo-tree-id1392 . -14) (undo-tree-id1393 . -12) (undo-tree-id1394 . -14) (undo-tree-id1395 . -12) (undo-tree-id1396 . -14) (undo-tree-id1397 . -10) (undo-tree-id1398 . -12) (undo-tree-id1399 . -6) (undo-tree-id1400 . -8) (undo-tree-id1401 . -12) (undo-tree-id1402 . -14) (undo-tree-id1403 . -12) (undo-tree-id1404 . -14) (undo-tree-id1405 . -10) (undo-tree-id1406 . -12) (undo-tree-id1407 . -12) (undo-tree-id1408 . -14) (undo-tree-id1409 . -12) (undo-tree-id1410 . -14) (undo-tree-id1411 . -12) (undo-tree-id1412 . -14) (undo-tree-id1413 . -10) (undo-tree-id1414 . -12) (undo-tree-id1415 . -6) (undo-tree-id1416 . -8) (undo-tree-id1417 . -12) (undo-tree-id1418 . -14) (undo-tree-id1419 . -12) (undo-tree-id1420 . -14) (undo-tree-id1421 . -10) (undo-tree-id1422 . -12) (undo-tree-id1423 . -12) (undo-tree-id1424 . -14) (undo-tree-id1425 . -12) (undo-tree-id1426 . -14) (undo-tree-id1427 . -12) (undo-tree-id1428 . -14) (undo-tree-id1429 . -10) (undo-tree-id1430 . -12) (undo-tree-id1431 . -6) (undo-tree-id1432 . -8) (undo-tree-id1433 . -12) (undo-tree-id1434 . -14) (undo-tree-id1435 . -12) (undo-tree-id1436 . -14) (undo-tree-id1437 . 3) (undo-tree-id1438 . 3) (undo-tree-id1439 . -12) (undo-tree-id1440 . -14) (undo-tree-id1441 . -12) (undo-tree-id1442 . -14) (undo-tree-id1443 . -12) (undo-tree-id1444 . -14) (undo-tree-id1445 . -10) (undo-tree-id1446 . -12) (undo-tree-id1447 . -6) (undo-tree-id1448 . -8) (undo-tree-id1449 . -12) (undo-tree-id1450 . -14) (undo-tree-id1451 . -12) (undo-tree-id1452 . -14) (undo-tree-id1453 . 3) (undo-tree-id1454 . -14) (undo-tree-id1455 . -10) (undo-tree-id1456 . -12) (undo-tree-id1457 . -12) (undo-tree-id1458 . -14) (undo-tree-id1459 . -12) (undo-tree-id1460 . -14) (undo-tree-id1461 . -12) (undo-tree-id1462 . -14) (undo-tree-id1463 . -10) (undo-tree-id1464 . -12) (undo-tree-id1465 . -6) (undo-tree-id1466 . -8) (undo-tree-id1467 . -12) (undo-tree-id1468 . -14) (undo-tree-id1469 . -12) (undo-tree-id1470 . -14) (undo-tree-id1471 . -10) (undo-tree-id1472 . -12) (undo-tree-id1473 . -12) (undo-tree-id1474 . -14) (undo-tree-id1475 . -12) (undo-tree-id1476 . -14) (undo-tree-id1477 . -12) (undo-tree-id1478 . -14) (undo-tree-id1479 . -10) (undo-tree-id1480 . -12) (undo-tree-id1481 . -6) (undo-tree-id1482 . -8) (undo-tree-id1483 . -12) (undo-tree-id1484 . -14) (undo-tree-id1485 . -12) (undo-tree-id1486 . -14) 395) ((383 . 398)) (23728 44717 56979 262000) 0 nil] [nil nil ((#("\"span \\\"~a\\\"\\\"\"" 0 6 (fontified t face font-lock-string-face) 6 7 (fontified t face font-lock-string-face) 7 10 (fontified t face font-lock-string-face) 10 12 (fontified t face font-lock-string-face) 12 14 (fontified t face font-lock-string-face) 14 15 (fontified t face font-lock-string-face)) . 383) (undo-tree-id1200 . -1) (undo-tree-id1201 . 3) (undo-tree-id1202 . -1) (undo-tree-id1203 . 11) (undo-tree-id1204 . 11) (undo-tree-id1205 . -4) (undo-tree-id1206 . -4) (undo-tree-id1207 . 14) (undo-tree-id1208 . 14) (undo-tree-id1209 . -4) (undo-tree-id1210 . -1) (undo-tree-id1211 . -1) (undo-tree-id1212 . 14) (undo-tree-id1213 . 14) (undo-tree-id1214 . 14) (undo-tree-id1215 . 14) (undo-tree-id1216 . -1) (undo-tree-id1217 . -12) (undo-tree-id1218 . -12) (undo-tree-id1219 . -10) (undo-tree-id1220 . -10) (undo-tree-id1221 . -15) (undo-tree-id1222 . 1) (undo-tree-id1223 . 1) (undo-tree-id1224 . 1) (undo-tree-id1225 . 1) (undo-tree-id1226 . 1) (undo-tree-id1227 . 1) (undo-tree-id1228 . -10) (undo-tree-id1229 . -10) (undo-tree-id1230 . -10) (undo-tree-id1231 . -10) (undo-tree-id1232 . -10) (undo-tree-id1233 . -10) (undo-tree-id1234 . -10) (undo-tree-id1235 . -15) (undo-tree-id1236 . -10) (undo-tree-id1237 . -12) (undo-tree-id1238 . -11) (undo-tree-id1239 . -12) (undo-tree-id1240 . 3) (undo-tree-id1241 . 5) (undo-tree-id1242 . -12) (undo-tree-id1243 . -14) (undo-tree-id1244 . -12) (undo-tree-id1245 . -14) (undo-tree-id1246 . -12) (undo-tree-id1247 . -14) (undo-tree-id1248 . -10) (undo-tree-id1249 . -12) (undo-tree-id1250 . -6) (undo-tree-id1251 . -8) (undo-tree-id1252 . -12) (undo-tree-id1253 . -14) (undo-tree-id1254 . -12) (undo-tree-id1255 . -14) (undo-tree-id1256 . 4) (undo-tree-id1257 . 4) (undo-tree-id1258 . 3) (undo-tree-id1259 . 4) (undo-tree-id1260 . -12) (undo-tree-id1261 . -14) (undo-tree-id1262 . -12) (undo-tree-id1263 . -14) (undo-tree-id1264 . -12) (undo-tree-id1265 . -14) (undo-tree-id1266 . -10) (undo-tree-id1267 . -12) (undo-tree-id1268 . -6) (undo-tree-id1269 . -8) (undo-tree-id1270 . -12) (undo-tree-id1271 . -14) (undo-tree-id1272 . -12) (undo-tree-id1273 . -14) (undo-tree-id1274 . 3) (undo-tree-id1275 . -14) (undo-tree-id1276 . -10) (undo-tree-id1277 . -12) (undo-tree-id1278 . -12) (undo-tree-id1279 . -14) (undo-tree-id1280 . -12) (undo-tree-id1281 . -14) (undo-tree-id1282 . -12) (undo-tree-id1283 . -14) (undo-tree-id1284 . -10) (undo-tree-id1285 . -12) (undo-tree-id1286 . -6) (undo-tree-id1287 . -8) (undo-tree-id1288 . -12) (undo-tree-id1289 . -14) (undo-tree-id1290 . -12) (undo-tree-id1291 . -14) (undo-tree-id1292 . -10) (undo-tree-id1293 . -12) (undo-tree-id1294 . -12) (undo-tree-id1295 . -14) (undo-tree-id1296 . -12) (undo-tree-id1297 . -14) (undo-tree-id1298 . -12) (undo-tree-id1299 . -14) (undo-tree-id1300 . -10) (undo-tree-id1301 . -12) (undo-tree-id1302 . -6) (undo-tree-id1303 . -8) (undo-tree-id1304 . -12) (undo-tree-id1305 . -14) (undo-tree-id1306 . -12) (undo-tree-id1307 . -14) 395) ((383 . 398)) (23728 44715 601236 341000) 0 nil]) ((393 . 397) (#("\\\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil)) . -393) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . 2) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (394 . 395) (#(" " 0 1 (fontified nil)) . -394) (undo-tree-id1317 . -1) (394 . 395) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -394) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (394 . 395) (#(":" 0 1 (fontified t face font-lock-string-face)) . -394) (undo-tree-id1321 . -1) (undo-tree-id1322 . -1) (undo-tree-id1323 . 1) (undo-tree-id1324 . -1) 395 (393 . 395)) nil (23728 44717 57335 693000) 0 nil]) ((#("\"" 0 1 (fontified nil face font-lock-string-face)) . 394) (undo-tree-id1325 . 1) (undo-tree-id1326 . 1) (undo-tree-id1327 . -1) (undo-tree-id1328 . -1) (393 . 394) (#(" " 0 1 (fontified nil)) . -393) (undo-tree-id1329 . -1) (393 . 394) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -393) (undo-tree-id1330 . -1) (393 . 394)) nil (23728 44715 601282 550000) 0 nil]) ((389 . 390) (388 . 390) (t 23728 44675 666800 545000)) nil (23728 44715 601286 180000) 0 nil]) ((#("'" 0 1 (fontified t face font-lock-string-face)) . 384) (undo-tree-id1198 . 1) (undo-tree-id1199 . 1) (t 23728 44660 823572 79000)) nil (23728 44675 584634 603000) 0 nil]) ((386 . 389) (#("a" 0 1 (fontified t face font-lock-string-face)) . -386) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (undo-tree-id1160 . 1) 387 (385 . 387) (#("l" 0 1 (fontified t face font-lock-string-face)) . -385) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (undo-tree-id1163 . 1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -386) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (undo-tree-id1166 . 1) 387 (384 . 387) (#("l" 0 1 (fontified t face font-lock-string-face)) . -384) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (undo-tree-id1169 . 1) 385 (384 . 385) (#(";" 0 1 (fontified t face font-lock-string-face)) . -384) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (undo-tree-id1172 . 1) 385 (384 . 385) (#("n" 0 1 (fontified t face font-lock-string-face)) . -384) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (undo-tree-id1175 . 1) (undo-tree-id1176 . 1) (undo-tree-id1177 . 1) (undo-tree-id1178 . 1) (undo-tree-id1179 . 1) (undo-tree-id1180 . 1) (#("s" 0 1 (fontified t face font-lock-string-face)) . -385) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . 1) (undo-tree-id1184 . 1) (undo-tree-id1185 . 1) (undo-tree-id1186 . 1) (undo-tree-id1187 . 1) (undo-tree-id1188 . 1) (undo-tree-id1189 . -1) (#(":" 0 1 (fontified t face font-lock-string-face)) . -386) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) (undo-tree-id1192 . 1) (undo-tree-id1193 . 1) (undo-tree-id1194 . 1) (undo-tree-id1195 . 1) (undo-tree-id1196 . 1) (undo-tree-id1197 . 1) 387 (t 23728 44597 947356 941000)) nil (23728 44660 685131 518000) 0 nil]) ((#(" " 0 1 (fontified t)) . 273)) nil (23728 44597 930383 109000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 273) (t 23728 44586 400774 556000)) nil (23728 44597 930388 776000) 0 nil]) ((158 . 159)) nil (23728 44586 366004 660000) 0 nil]) ((242 . 243)) nil (23728 44586 366016 376000) 0 nil]) ((253 . 267) (#("b" 0 1 (fontified t)) . -253) (undo-tree-id1144 . -1) (undo-tree-id1145 . -1) 254 (243 . 254) (242 . 244) (#("(" 0 1 (fontified nil)) . -242) (237 . 243)) nil (23728 44586 366046 515000) 0 nil]) ((#("(film title) `(li ,title)" 0 1 (fontified t) 1 5 (fontified t face font-lock-function-name-face) 5 11 (fontified t) 11 14 (fontified t) 14 24 (fontified t) 24 25 (fontified t)) . 237) (undo-tree-id1146 . 21) (undo-tree-id1147 . 21) (undo-tree-id1148 . -4) (undo-tree-id1149 . 21) (undo-tree-id1150 . 21) (undo-tree-id1151 . -4) (undo-tree-id1152 . -4) (undo-tree-id1153 . -4)) nil (23728 44586 366077 130000) 0 nil]) ((224 . 226) (213 . 224) (#("0" 0 1 (fontified t)) . -213) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) 214 (212 . 214) (#("b" 0 1 (fontified t)) . -212) (undo-tree-id1156 . -1) (undo-tree-id1157 . -1) 213 (202 . 213) (201 . 203) (#("(" 0 1 (fontified nil)) . -201) (199 . 202) (195 . 199)) nil (23728 44586 366103 238000) 0 nil]) ((#("(films . elements) `(ul ,@elements)" 0 1 (fontified t) 1 6 (fontified t face font-lock-function-name-face) 6 17 (fontified t) 17 20 (fontified t) 20 25 (fontified t) 25 34 (fontified t) 34 35 (fontified t)) . 195)) nil (23728 44586 366111 152000) 0 nil]) ((140 . 142) (138 . 140) (118 . 138) (117 . 119) (#("(" 0 1 (fontified nil)) . -117) (117 . 118)) nil (23728 44586 366119 928000) 0 nil]) ((#("`(ul ,@elements)" 0 1 (fontified t) 1 6 (fontified t) 6 15 (fontified t) 15 16 (fontified t)) . 117)) nil (23728 44586 366125 187000) 0 nil]) ((#("elements " 0 8 (fontified t) 8 9 (fontified t)) . 117)) nil (23728 44586 366129 433000) 0 nil]) ((#(". " 0 2 (fontified t)) . 117)) nil (23728 44586 366133 349000) 0 nil] [nil nil ((#(". " 0 2 (fontified t)) . 117) (undo-tree-id1131 . 2) (undo-tree-id1132 . -1)) ((117 . 119)) (23728 44522 770792 327000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 127) (#("(" 0 1 (fontified t)) . -111) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) 112) nil (23728 44522 770941 410000) 0 nil]) ((272 . 273) (#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . -272) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) 273 (271 . 273)) nil (23728 44522 770810 574000) 0 nil]) (393) nil (23728 44522 770813 913000) 0 nil]) ((#("          " 0 10 (fontified nil)) . 393) (undo-tree-id1137 . 10) (undo-tree-id1138 . 10) (undo-tree-id1139 . 10) (#("
" 0 1 (fontified t)) . -393) (undo-tree-id1140 . 1) (undo-tree-id1141 . 1) (undo-tree-id1142 . 1) 326) nil (23728 44522 770825 253000) 0 nil]) ((326 . 327) (#("          " 0 10 (fontified nil)) . 326) (#("
" 0 1 (fontified t)) . -326) 293) nil (23728 44522 770830 265000) 0 nil]) ((293 . 294) (#("  " 0 2 (fontified nil)) . 293) (undo-tree-id1143 . 2) (#("
" 0 1 (fontified t)) . -293) 292 (t 23728 44404 258836 824000)) nil (23728 44522 770836 600000) 0 nil]) ((nil rear-nonsticky nil 404 . 405) (nil fontified nil 362 . 405) (362 . 405) 361) nil (23728 44404 246625 741000) 0 nil]) ((#("decode-paragraphs" 0 17 (fontified t)) . 362) (undo-tree-id1125 . 17) (undo-tree-id1126 . 17) (undo-tree-id1127 . 17) (undo-tree-id1128 . 17) (undo-tree-id1129 . 17) (undo-tree-id1130 . 17) (t 23728 44359 872532 295000)) nil (23728 44404 246646 589000) 0 nil]) ((392 . 393) 362) nil (23728 44359 746511 566000) 0 nil]) ((#("#:exclude-tags '(style script)" 0 14 (fontified t face racket-keyword-argument-face) 14 30 (fontified t)) . 390) 380) nil (23728 44359 746522 767000) 0 nil]) ((#("          #:string-proc (compose1 smart-quotes smart-dashes)
" 0 10 (fontified t) 10 23 (fontified t face racket-keyword-argument-face) 23 25 (fontified t) 25 33 (fontified t face font-lock-builtin-face) 33 61 (fontified t)) . 380)) nil (23728 44359 746529 598000) 0 nil]) ((#("          #:block-txexpr-proc (compose1 hyphenate wrap-hanging-quotes)
" 0 10 (fontified t) 10 29 (fontified t face racket-keyword-argument-face) 29 31 (fontified t) 31 39 (fontified t face font-lock-builtin-face) 39 71 (fontified t)) . 380) (undo-tree-id1081 . -14) (undo-tree-id1082 . -14) 394) nil (23728 44359 746552 687000) 0 nil]) ((66 . 72) (56 . 66)) nil (23728 44359 746558 918000) 0 nil]) ((nil rear-nonsticky nil 537 . 538) (nil fontified nil 255 . 538) (255 . 538)) nil (23728 44359 746564 792000) 0 nil]) ((254 . 255) 254) nil (23728 44359 746570 187000) 0 nil]) ((#(";(define (book title) `(li ,title))
" 0 1 (fontified t face font-lock-comment-delimiter-face) 1 2 (fontified t face font-lock-comment-face) 2 8 (fontified t face font-lock-comment-face) 8 9 (fontified t face font-lock-comment-face) 9 10 (fontified t face font-lock-comment-face) 10 14 (fontified t face font-lock-comment-face) 14 20 (fontified t face font-lock-comment-face) 20 23 (fontified t face font-lock-comment-face) 23 33 (fontified t face font-lock-comment-face) 33 34 (fontified t face font-lock-comment-face) 34 35 (fontified t face font-lock-comment-face) 35 36 (rear-nonsticky t fontified t face font-lock-comment-face)) . 173) (undo-tree-id1083 . 35) (undo-tree-id1084 . 35) (undo-tree-id1085 . 35) (undo-tree-id1086 . 35) (undo-tree-id1087 . 35) (undo-tree-id1088 . 35) (undo-tree-id1089 . -35) (undo-tree-id1090 . -35) (undo-tree-id1091 . -35) (undo-tree-id1092 . -35) (undo-tree-id1093 . -35) (undo-tree-id1094 . -35) (undo-tree-id1095 . -35) (undo-tree-id1096 . -35) (undo-tree-id1097 . -35) (undo-tree-id1098 . -35) (undo-tree-id1099 . -35) (undo-tree-id1100 . -35) (undo-tree-id1101 . -35) (undo-tree-id1102 . -35) (undo-tree-id1103 . -35) (undo-tree-id1104 . -35) (undo-tree-id1105 . -35) (undo-tree-id1106 . -35) (undo-tree-id1107 . -35) (undo-tree-id1108 . -35) (undo-tree-id1109 . -35) (undo-tree-id1110 . 36) (undo-tree-id1111 . 36) (undo-tree-id1112 . -34) (undo-tree-id1113 . -34) 207) nil (23728 44359 746667 465000) 0 nil]) ((#("#:class \"book\" " 0 1 (fontified t face racket-keyword-argument-face) 1 7 (fontified t face racket-keyword-argument-face) 7 8 (fontified t) 8 13 (fontified t face font-lock-string-face) 13 14 (fontified t face font-lock-string-face) 14 15 (fontified t)) . 167) (undo-tree-id1114 . -14) (undo-tree-id1115 . -14) (undo-tree-id1116 . 1) (undo-tree-id1117 . 1) (undo-tree-id1118 . -14) (undo-tree-id1119 . -14) (undo-tree-id1120 . 1) (undo-tree-id1121 . 1) (undo-tree-id1122 . 1) (undo-tree-id1123 . 1) (undo-tree-id1124 . -14) (t 23728 43340 137845 446000)) nil (23728 44359 746706 460000) 0 nil]) ((181 . 182) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 181) (undo-tree-id1077 . 1) (undo-tree-id1078 . -1) (180 . 181) (#(" " 0 1 (fontified nil)) . -180) (180 . 181) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -180) (180 . 181) (#(" " 0 1 (fontified t face font-lock-string-face)) . -180) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) 181 (176 . 181) (175 . 177) (#("\"" 0 1 (fontified nil)) . -175) (167 . 176) (t 23728 43254 258248 292000)) nil (23728 43340 119567 599000) 0 nil]) ((173 . 174)) nil (23728 43254 245425 450000) 0 nil]) (206) nil (23728 43254 245430 818000) 0 nil]) ((168 . 170) (#("em" 0 2 (fontified t face racket-selfeval-face)) . 168) (undo-tree-id1073 . 2)) nil (23728 43254 245440 41000) 0 nil]) ((140 . 144) (#("beaucoup" 0 8 (fontified t face font-lock-variable-name-face)) . 140) (undo-tree-id1074 . -2) (undo-tree-id1075 . -2) (undo-tree-id1076 . 6) 142) nil (23728 43254 245447 232000) 0 nil] [nil nil ((#("beaucoup" 0 8 (fontified t face font-lock-variable-name-face)) . 140) (undo-tree-id1069 . -2) (undo-tree-id1070 . -2) 142) ((140 . 148)) (23728 43242 376906 882000) 0 nil]) ((nil rear-nonsticky nil 175 . 176) (nil fontified nil 132 . 176) (132 . 176)) nil (23728 43242 377140 244000) 0 nil]) ((#("p" 0 1 (fontified t)) . -132) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) 133 (132 . 133) (131 . 132) (t 23728 41657 755085 67000) 98) nil (23728 43242 376937 736000) 0 nil] [nil nil ((nil rear-nonsticky nil 142 . 143) (nil fontified nil 99 . 143) (99 . 143) 98 (t 23728 41657 755085 67000)) ((#("(define beaucoup (default-tag-function 'em))" 0 1 (fontified nil) 1 7 (fontified nil face font-lock-keyword-face) 7 8 (fontified nil) 8 16 (fontified nil face font-lock-variable-name-face) 16 39 (fontified nil) 39 42 (fontified nil face racket-selfeval-face) 42 43 (fontified nil) 43 44 (fontified nil rear-nonsticky nil)) . 99) (undo-tree-id1054 . -43) (undo-tree-id1055 . -43) (undo-tree-id1056 . -43) (undo-tree-id1057 . 1) (undo-tree-id1058 . -42) (undo-tree-id1059 . -43) (undo-tree-id1060 . -17) (undo-tree-id1061 . -18) (undo-tree-id1062 . -1) (undo-tree-id1063 . 44) (undo-tree-id1064 . -1) (undo-tree-id1065 . 43) (undo-tree-id1066 . -43) (undo-tree-id1067 . 1) (undo-tree-id1068 . -44) (nil rear-nonsticky t 142 . 143)) (23728 43230 951457 713000) 0 nil] [nil nil ((#("(define (books . elements) `(ul ,@elements))
(define (book title) `(li ,title))

(define (films . elements) `(ul ,@elements))
(define (film title) `(li ,title))
" 0 1 (fontified t) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t) 9 14 (fontified t face font-lock-function-name-face) 14 25 (fontified t) 25 28 (fontified t) 28 33 (fontified t) 33 42 (fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 45 (rear-nonsticky t fontified t) 45 46 (fontified t) 46 52 (fontified t face font-lock-keyword-face) 52 53 (fontified t) 53 54 (fontified t) 54 58 (fontified t face font-lock-function-name-face) 58 64 (fontified t) 64 67 (fontified t) 67 77 (fontified t) 77 78 (fontified t) 78 79 (fontified t) 79 80 (fontified t rear-nonsticky t) 80 81 (fontified t) 81 82 (fontified t) 82 88 (fontified t face font-lock-keyword-face) 88 89 (fontified t) 89 90 (fontified t) 90 95 (fontified t face font-lock-function-name-face) 95 106 (fontified t) 106 109 (fontified t) 109 114 (fontified t) 114 123 (fontified t) 123 124 (fontified t) 124 125 (fontified t) 125 126 (rear-nonsticky t fontified t) 126 127 (fontified t) 127 133 (fontified t face font-lock-keyword-face) 133 134 (fontified t) 134 135 (fontified t) 135 139 (fontified t face font-lock-function-name-face) 139 145 (fontified t) 145 148 (fontified t) 148 158 (fontified t) 158 159 (fontified t) 159 160 (fontified t) 160 161 (fontified t)) . 87) (undo-tree-id950 . -138) (undo-tree-id951 . -80) (undo-tree-id952 . -160) (undo-tree-id953 . 22) (undo-tree-id954 . -138) (undo-tree-id955 . 160) (undo-tree-id956 . 160) (undo-tree-id957 . -1) (undo-tree-id958 . 160) (undo-tree-id959 . 160) (undo-tree-id960 . -1) (undo-tree-id961 . 116) (undo-tree-id962 . 116) (undo-tree-id963 . -45) (undo-tree-id964 . 116) (undo-tree-id965 . 116) (undo-tree-id966 . 116) (undo-tree-id967 . 116) (undo-tree-id968 . -45) (undo-tree-id969 . -79) (undo-tree-id970 . -79) (undo-tree-id972 . -79) (undo-tree-id973 . -79) (undo-tree-id974 . -79) (undo-tree-id975 . -79) (undo-tree-id976 . -79) (undo-tree-id977 . -79) (undo-tree-id978 . -79) (undo-tree-id979 . -79) (undo-tree-id980 . -79) (undo-tree-id981 . -79) (undo-tree-id982 . -79) (undo-tree-id983 . -79) (undo-tree-id984 . -79) (undo-tree-id985 . -79) (undo-tree-id987 . -79) (undo-tree-id988 . -79) (undo-tree-id989 . -79) (undo-tree-id990 . -79) (undo-tree-id991 . -79) (undo-tree-id992 . -79) (undo-tree-id993 . -79) (undo-tree-id994 . -79) (undo-tree-id995 . -79) (undo-tree-id996 . -79) (undo-tree-id997 . -79) (undo-tree-id998 . -79) (undo-tree-id999 . -79) (undo-tree-id1000 . -79) (undo-tree-id1001 . -79) (undo-tree-id1002 . -79) (undo-tree-id1004 . -70) (undo-tree-id1005 . -12) (undo-tree-id1006 . -138) (undo-tree-id1007 . 23) (undo-tree-id1008 . 23) (undo-tree-id1009 . -160) (undo-tree-id1010 . -138) (undo-tree-id1011 . -138) (undo-tree-id1012 . 23) (undo-tree-id1013 . 23) (undo-tree-id1014 . -138) (undo-tree-id1015 . -138) (undo-tree-id1016 . -138) (undo-tree-id1018 . 23) (undo-tree-id1020 . 23) (undo-tree-id1022 . 23) (undo-tree-id1024 . 23) (undo-tree-id1026 . -138) (undo-tree-id1028 . 23) (undo-tree-id1029 . -138) (undo-tree-id1030 . -138) (undo-tree-id1032 . 23) (undo-tree-id1034 . 23) (undo-tree-id1036 . 68) (undo-tree-id1038 . 81) (undo-tree-id1040 . 104) (undo-tree-id1042 . 149) (undo-tree-id1044 . -12) (undo-tree-id1045 . -138) (undo-tree-id1047 . 149) (undo-tree-id1049 . 104) (undo-tree-id1051 . 81) (undo-tree-id1053 . 68) 225 (t 23728 40883 642933 643000)) ((87 . 248) (t 23728 41059 681898 509000)) (23728 41059 667404 918000) 0 nil]) ((247 . 248) 225) nil (23728 43230 951824 47000) 0 nil]) ((222 . 226) (#("book" 0 4 (fontified t face font-lock-function-name-face)) . 222) (undo-tree-id768 . -1) (undo-tree-id769 . -1) 223) nil (23728 40883 515892 215000) 0 nil]) ((177 . 182) (#("books" 0 5 (fontified t face font-lock-function-name-face)) . 177)) nil (23728 40883 515901 534000) 0 nil]) ((167 . 168)) nil (23728 40883 515906 283000) 0 nil]) ((nil rear-nonsticky nil 166 . 167) (#("
" 0 1 (fontified nil)) . -246) (166 . 247) 154) nil (23728 40883 515912 500000) 0 nil]) ((#("         " 0 9 (fontified nil)) . 56) (#("
" 0 1 (fontified t)) . -56) 34) nil (23728 40883 515923 353000) 0 nil]) ((#("txexpr" 0 6 (fontified t)) . 66) 57) nil (23728 40883 515928 561000) 0 nil]) ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 148) (undo-tree-id770 . 1) (undo-tree-id771 . 1) (undo-tree-id772 . 1) (undo-tree-id773 . 1) (undo-tree-id774 . 1) (undo-tree-id775 . 1)) nil (23728 40883 515949 550000) 0 nil]) ((#("
;(define book `(li))" 0 1 (fontified t face font-lock-comment-face) 1 2 (fontified t face font-lock-comment-delimiter-face) 2 3 (fontified t face font-lock-comment-face) 3 9 (fontified t face font-lock-comment-face) 9 10 (fontified t face font-lock-comment-face) 10 14 (fontified t face font-lock-comment-face) 14 16 (fontified t face font-lock-comment-face) 16 19 (fontified t face font-lock-comment-face) 19 20 (fontified t face font-lock-comment-face) 20 21 (fontified t face font-lock-comment-face)) . 183) (undo-tree-id776 . -21) (undo-tree-id777 . -21) (undo-tree-id778 . -21) (undo-tree-id779 . -21) (undo-tree-id780 . -21) (undo-tree-id781 . -21) (undo-tree-id782 . -18) (undo-tree-id783 . -18) (undo-tree-id784 . -21) (undo-tree-id785 . -21) (undo-tree-id786 . -21) (undo-tree-id787 . -21) (undo-tree-id788 . -21) (undo-tree-id789 . -21) (undo-tree-id790 . -21) (undo-tree-id791 . -21) (undo-tree-id792 . -21) (undo-tree-id793 . -21) (undo-tree-id794 . -21) (undo-tree-id795 . -21) (undo-tree-id796 . -21) (undo-tree-id797 . -21) (undo-tree-id798 . -21) (undo-tree-id799 . -21) (undo-tree-id800 . -21) (undo-tree-id801 . -21) (undo-tree-id802 . -21) (undo-tree-id803 . -21) (undo-tree-id804 . -21) (undo-tree-id805 . -21) (undo-tree-id806 . -21) (undo-tree-id807 . -21) (undo-tree-id808 . -21) (undo-tree-id809 . -21) (undo-tree-id810 . -21) (undo-tree-id811 . -21) (undo-tree-id812 . -21) (undo-tree-id813 . -21) (undo-tree-id814 . -21) (undo-tree-id815 . -21) (undo-tree-id816 . -20) (undo-tree-id817 . -20) 203) nil (23728 40883 516060 70000) 0 nil]) ((#("
" 0 1 (fontified t face font-lock-comment-face)) . -204) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) 205) nil (23728 40883 516175 685000) 0 nil]) ((#("(  (   #:txexpr-tag-proc `(li ,title)))
" 0 1 (fontified t) 1 3 (fontified t) 3 4 (fontified t) 4 7 (fontified t) 7 24 (fontified t face racket-keyword-argument-face) 24 26 (fontified t) 26 36 (fontified t) 36 37 (fontified t) 37 38 (rear-nonsticky t fontified t) 38 39 (fontified t) 39 40 (fontified t)) . 205) (undo-tree-id858 . -30) (undo-tree-id859 . -25) (undo-tree-id860 . -25) (undo-tree-id861 . 9) (undo-tree-id862 . -30) (undo-tree-id863 . 3) (undo-tree-id864 . 3) (undo-tree-id865 . -25) (undo-tree-id866 . -25) (undo-tree-id867 . -4) (undo-tree-id868 . 36) (undo-tree-id869 . 36) (undo-tree-id870 . -4) (undo-tree-id871 . 3) (undo-tree-id872 . 3) (undo-tree-id873 . -4) (undo-tree-id874 . -25) (undo-tree-id875 . 3) (undo-tree-id876 . 3) (undo-tree-id877 . -25) (undo-tree-id878 . -25) (undo-tree-id879 . -25) (undo-tree-id880 . -25) (undo-tree-id881 . -25) (undo-tree-id882 . 36) (undo-tree-id883 . 36) (undo-tree-id884 . -25) (undo-tree-id885 . -4) (undo-tree-id886 . 3) (undo-tree-id887 . 3) (undo-tree-id888 . -4) (undo-tree-id889 . -25) (undo-tree-id890 . -25) (undo-tree-id891 . 39) (undo-tree-id892 . 39) (undo-tree-id893 . -25) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . 39) (undo-tree-id897 . 39) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . 39) (undo-tree-id902 . 36) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . 10) (undo-tree-id913 . 10) (undo-tree-id914 . -1) (undo-tree-id915 . -30) (undo-tree-id916 . -30)) nil (23728 40883 516365 197000) 0 nil]) ((#("   (txexpr 'book '() title)
" 0 3 (fontified t) 3 11 (fontified t) 11 12 (fontified t face racket-selfeval-face) 12 16 (fontified t face racket-selfeval-face) 16 18 (fontified t) 18 26 (fontified t) 26 28 (fontified t)) . 209) (undo-tree-id917 . -8) (undo-tree-id918 . 13) (undo-tree-id919 . 13) (undo-tree-id920 . -15) (undo-tree-id921 . -15) (undo-tree-id922 . 3) (undo-tree-id923 . 3) (undo-tree-id924 . -25) (undo-tree-id925 . -25) (undo-tree-id926 . 28) 205) nil (23728 40883 516406 905000) 0 nil]) ((#("decode
" 0 7 (fontified t)) . 209) (undo-tree-id927 . 2)) nil (23728 40883 516415 572000) 0 nil]) ((#("define (book . title)
" 0 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 8 (fontified t) 8 12 (fontified t face font-lock-function-name-face) 12 15 (fontified t) 15 20 (fontified t) 20 21 (fontified t) 21 22 (fontified t)) . 206) (undo-tree-id928 . 7) (undo-tree-id929 . 7) (undo-tree-id930 . -13) (undo-tree-id931 . -13) (undo-tree-id932 . 8) (undo-tree-id933 . 8) (undo-tree-id934 . -13) (undo-tree-id935 . -14) (undo-tree-id936 . -14) (undo-tree-id937 . 2) (undo-tree-id938 . -14) (undo-tree-id939 . -20) (undo-tree-id940 . -20) (undo-tree-id941 . -20) (undo-tree-id942 . -20) (undo-tree-id943 . -20) (undo-tree-id944 . -20) (undo-tree-id945 . -20) (undo-tree-id946 . -20) (undo-tree-id947 . -20) (undo-tree-id948 . -20) (undo-tree-id949 . -20) 226 (t 23728 40645 51017 916000)) nil (23728 40883 516476 16000) 0 nil]) ((292 . 293)) nil (23728 40645 34457 85000) 0 nil]) ((287 . 288)) nil (23728 40645 34468 494000) 0 nil]) ((289 . 296) (288 . 289) (287 . 289) (#("(" 0 1 (fontified nil)) . -287) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (287 . 288)) nil (23728 40645 34497 310000) 0 nil]) ((#("(Î» (t) (`(li ,title)))" 0 1 (fontified t) 1 2 (fontified t face font-lock-keyword-face) 2 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t) 9 19 (fontified t) 19 20 (fontified t) 20 22 (fontified t)) . 287) (undo-tree-id738 . -8) (undo-tree-id739 . -8) (undo-tree-id740 . 2) (undo-tree-id741 . 2) (undo-tree-id742 . -8) (undo-tree-id743 . -8) (undo-tree-id744 . 2) (undo-tree-id745 . 2) (undo-tree-id746 . -8) (undo-tree-id747 . -8) (undo-tree-id748 . 2) (undo-tree-id749 . 2) (undo-tree-id750 . -8) (undo-tree-id751 . -8) (undo-tree-id752 . -8) (undo-tree-id753 . -8) (undo-tree-id754 . -8) (undo-tree-id755 . -8) (undo-tree-id756 . 4) (undo-tree-id757 . 4) (undo-tree-id758 . -18) (undo-tree-id759 . -18) (undo-tree-id760 . -18) (undo-tree-id761 . 22) (undo-tree-id762 . 22) (undo-tree-id763 . -1) (undo-tree-id764 . 21) (undo-tree-id765 . -21) (undo-tree-id766 . 1) (undo-tree-id767 . -22) (t 23728 40494 161927 26000)) nil (23728 40645 34581 224000) 0 nil] [nil nil ((#("`" 0 1 (fontified t)) . 295) (undo-tree-id735 . 1) (t 23728 40494 161927 26000)) ((295 . 296)) (23728 40521 89909 899000) 0 nil]) ((219 . 221)) nil (23728 40521 90541 856000) 0 nil] [nil nil ((221 . 225) (219 . 221)) ((#("at" 0 2 (fontified nil)) . 219) (undo-tree-id705 . -2) (undo-tree-id706 . -2) (undo-tree-id707 . -2) (undo-tree-id708 . -2) (undo-tree-id709 . -2) (undo-tree-id710 . -2) (undo-tree-id711 . -2) (undo-tree-id712 . -2) (#("rib " 0 4 (fontified t)) . 221) (undo-tree-id713 . -3) (undo-tree-id714 . -3) (undo-tree-id715 . 1) (undo-tree-id716 . 1) (undo-tree-id717 . -3) (undo-tree-id718 . -3) (undo-tree-id719 . 1) (undo-tree-id720 . 1) (undo-tree-id721 . 1) (undo-tree-id722 . 1) (undo-tree-id723 . 1) (undo-tree-id724 . 1) (undo-tree-id725 . -3) (undo-tree-id726 . 1) (undo-tree-id727 . 1) (undo-tree-id728 . -3) (undo-tree-id729 . 1) (undo-tree-id730 . 1) (undo-tree-id731 . -3) (undo-tree-id732 . -3) (undo-tree-id733 . 1) (undo-tree-id734 . 1) (t 23728 40463 725445 281000)) (23728 40463 699345 817000) 0 nil] [nil nil ((222 . 223) (#(")" 0 1 (fontified nil)) . 222) (undo-tree-id557 . -1) (undo-tree-id558 . 1) (221 . 222) (220 . 222) (#("(" 0 1 (fontified nil face racket-selfeval-face)) . -220) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (219 . 221) (t 23728 40413 912415 885000)) ((#("'(" 0 1 (fontified nil) 1 2 (fontified nil face racket-selfeval-face)) . 219) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . 2) (undo-tree-id564 . -1) (undo-tree-id565 . -2) (undo-tree-id566 . -1) (undo-tree-id567 . -2) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . 1) (undo-tree-id616 . -1) (undo-tree-id617 . 1) (undo-tree-id618 . -1) (undo-tree-id619 . 1) (undo-tree-id620 . -1) (220 . 221) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 220) (undo-tree-id621 . -1) (undo-tree-id622 . 1) (undo-tree-id623 . 2) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) (undo-tree-id654 . -1) (undo-tree-id655 . -1) (undo-tree-id656 . -1) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (undo-tree-id663 . -1) (undo-tree-id664 . 1) (undo-tree-id665 . -1) (undo-tree-id666 . 2) (undo-tree-id667 . 1) (undo-tree-id668 . 2) (undo-tree-id669 . -1) (undo-tree-id670 . 1) (undo-tree-id671 . -1) (undo-tree-id672 . 1) (undo-tree-id673 . -1) (#(")" 0 1 (fontified nil)) . 221) (undo-tree-id674 . -1) (undo-tree-id675 . -1) (undo-tree-id676 . -1) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . 1) (undo-tree-id694 . 1) (undo-tree-id695 . 1) (undo-tree-id696 . 1) (undo-tree-id697 . -1) (222 . 223) (#(" " 0 1 (fontified t)) . 222) (undo-tree-id698 . 1) (undo-tree-id699 . 1) (undo-tree-id700 . 1) (undo-tree-id701 . 1) (undo-tree-id702 . 1) (undo-tree-id703 . -1) (undo-tree-id704 . 1) (t 23728 40447 18880 363000)) (23728 40446 994233 821000) 0 nil]) ((297 . 304) (#("," 0 1 (fontified t)) . -297) (undo-tree-id441 . -1) (undo-tree-id442 . -1) (undo-tree-id443 . 1) 298 (295 . 298) (294 . 296) (#("(" 0 1 (fontified nil)) . -294) (undo-tree-id444 . -1) (undo-tree-id445 . -1) (293 . 295) (#("string->symbol (format \"ns:~a\" t)" 0 14 (fontified t face font-lock-builtin-face) 14 16 (fontified t) 16 18 (fontified t face font-lock-builtin-face) 18 22 (fontified t face font-lock-builtin-face) 22 23 (fontified t) 23 24 (fontified t face font-lock-string-face) 24 29 (fontified t face font-lock-string-face) 29 30 (fontified t face font-lock-string-face) 30 32 (fontified t) 32 33 (fontified t)) . 293) (undo-tree-id446 . -18) (undo-tree-id447 . -18) (undo-tree-id448 . 19) (undo-tree-id449 . 20) (undo-tree-id450 . -14) (undo-tree-id451 . -14) (undo-tree-id452 . -14) (undo-tree-id453 . 21) (undo-tree-id454 . 21) (undo-tree-id455 . -24) (undo-tree-id456 . -24) (undo-tree-id457 . 4) (undo-tree-id458 . 4) (undo-tree-id459 . -16) (undo-tree-id460 . -16) (undo-tree-id461 . -24) (undo-tree-id462 . -18) (undo-tree-id463 . -9) (undo-tree-id464 . -9) (undo-tree-id465 . 31) (undo-tree-id466 . 32) (undo-tree-id467 . 30) (undo-tree-id468 . 31) (undo-tree-id469 . 29) (undo-tree-id470 . 31) (undo-tree-id471 . 28) (undo-tree-id472 . 29) (undo-tree-id473 . 27) (undo-tree-id474 . 28) (undo-tree-id475 . 26) (undo-tree-id476 . 27) (undo-tree-id477 . 25) (undo-tree-id478 . 26) (undo-tree-id479 . 24) (undo-tree-id480 . 25) (undo-tree-id481 . 23) (undo-tree-id482 . 24) (undo-tree-id483 . 22) (undo-tree-id484 . 23) (undo-tree-id485 . 21) (undo-tree-id486 . 22) (undo-tree-id487 . 20) (undo-tree-id488 . 21) (undo-tree-id489 . 19) (undo-tree-id490 . 20) (undo-tree-id491 . 18) (undo-tree-id492 . 19) (undo-tree-id493 . 17) (undo-tree-id494 . 18) (undo-tree-id495 . 16) (undo-tree-id496 . 17) (undo-tree-id497 . 15) (undo-tree-id498 . 16) (undo-tree-id499 . 14) (undo-tree-id500 . 15) (undo-tree-id501 . 13) (undo-tree-id502 . 14) (undo-tree-id503 . 12) (undo-tree-id504 . 13) (undo-tree-id505 . 11) (undo-tree-id506 . 12) (undo-tree-id507 . 10) (undo-tree-id508 . 11) (undo-tree-id509 . 9) (undo-tree-id510 . 10) (undo-tree-id511 . 9) (undo-tree-id512 . -26) (undo-tree-id513 . 8) (undo-tree-id514 . 9) (undo-tree-id515 . 7) (undo-tree-id516 . 8) (undo-tree-id517 . 6) (undo-tree-id518 . 7) (undo-tree-id519 . 7) (undo-tree-id520 . 6) (undo-tree-id521 . 8) (undo-tree-id522 . 7) (undo-tree-id523 . 9) (undo-tree-id524 . 8) (undo-tree-id525 . 10) (undo-tree-id526 . 9) (undo-tree-id527 . 11) (undo-tree-id528 . 10) (undo-tree-id529 . 12) (undo-tree-id530 . 11) (undo-tree-id531 . 13) (undo-tree-id532 . 12) (undo-tree-id533 . 14) (undo-tree-id534 . 13) (undo-tree-id535 . 15) (undo-tree-id536 . 14) (undo-tree-id537 . 16) (undo-tree-id538 . 15) (undo-tree-id539 . 17) (undo-tree-id540 . 16) (undo-tree-id541 . 18) (undo-tree-id542 . 17) (undo-tree-id543 . 19) (undo-tree-id544 . 18) (undo-tree-id545 . 20) (undo-tree-id546 . 19) (undo-tree-id547 . 21) (undo-tree-id548 . 20) (undo-tree-id549 . 22) (undo-tree-id550 . 21) (undo-tree-id551 . 23) (undo-tree-id552 . 22) (undo-tree-id553 . 24) (undo-tree-id554 . 23) (undo-tree-id555 . -23) (undo-tree-id556 . -24) 302) nil (23728 40476 535605 533000) 0 nil]) ((263 . 267) (#(" " 0 1 (fontified t)) . 263)) nil (23728 40413 892832 342000) 0 nil]) ((235 . 239) (#(" " 0 1 (fontified t)) . 235) (t 23728 40343 419515 701000)) nil (23728 40413 892839 982000) 0 nil]) ((253 . 259) (#(")" 0 1 (fontified nil)) . 253) (undo-tree-id431 . -1) (undo-tree-id432 . 1) (252 . 253) (251 . 253) (#("(" 0 1 (fontified nil)) . -251) (250 . 252) (#("t" 0 1 (fontified t)) . -250) (undo-tree-id433 . -1) (undo-tree-id434 . -1) 251 (249 . 251)) nil (23728 40343 399485 664000) 0 nil]) ((226 . 228) (311 . 312) (#(")" 0 1 (fontified t)) . -225) (undo-tree-id435 . -1) (undo-tree-id436 . 1) (undo-tree-id437 . 1) (undo-tree-id438 . 1) (#(")" 0 1 (fontified nil)) . 225) (undo-tree-id439 . -1) (undo-tree-id440 . 1) (224 . 225) (214 . 224) (213 . 215) (#("(" 0 1 (fontified nil)) . -213) (206 . 214) (205 . 207) (#("(" 0 1 (fontified nil face font-lock-comment-face)) . -205) (205 . 206) (205 . 206) 272) nil (23728 40343 399527 718000) 0 nil] [nil nil ((nil rear-nonsticky nil 292 . 293) (nil fontified nil 272 . 293) (272 . 293)) ((#("string->symbol (\"li\")" 0 16 (fontified nil) 16 20 (fontified nil face font-lock-string-face) 20 21 (fontified nil rear-nonsticky nil)) . 272) (undo-tree-id412 . -20) (undo-tree-id413 . -20) (undo-tree-id414 . -20) (undo-tree-id415 . 1) (undo-tree-id416 . 21) (undo-tree-id417 . -15) (undo-tree-id418 . -16) (undo-tree-id419 . 1) (undo-tree-id420 . 1) (undo-tree-id421 . 4) (undo-tree-id422 . -19) (undo-tree-id423 . -15) (undo-tree-id424 . -16) (undo-tree-id425 . 6) (undo-tree-id426 . -16) (undo-tree-id427 . 5) (undo-tree-id428 . -20) (undo-tree-id429 . 1) (undo-tree-id430 . -21) (nil rear-nonsticky t 292 . 293)) (23728 40310 808386 783000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((205 . 206) 253) ((#("
" 0 1 (fontified t)) . 205) (undo-tree-id384 . 1) (undo-tree-id385 . 1) (undo-tree-id386 . 1) (undo-tree-id387 . 1)) (23728 40305 855717 762000) 0 nil] [nil ([nil nil ((255 . 257)) ((#("li" 0 2 (fontified t)) . 255) (undo-tree-id370 . -1) (undo-tree-id371 . 1) (undo-tree-id372 . 1) (undo-tree-id373 . -1) (undo-tree-id374 . 1) (undo-tree-id375 . 1) (undo-tree-id376 . 1) (undo-tree-id377 . 1) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (undo-tree-id381 . 1) (undo-tree-id382 . 1) (t 23728 40266 103328 735000)) (23728 40266 73301 800000) 0 nil]) ((#("a" 0 1 (fontified t)) . -254) (undo-tree-id285 . -1) (undo-tree-id286 . -1) 255 (253 . 255)) ((#("`a" 0 1 (fontified nil) 1 2 (fontified nil)) . 253) (undo-tree-id383 . -1) (254 . 255)) (23728 40303 465985 923000) 0 nil]) ((#("string->symbol (\"li\")" 0 14 (fontified t face font-lock-builtin-face) 14 16 (fontified t) 16 17 (fontified t face font-lock-string-face) 17 19 (fontified t face font-lock-string-face) 19 20 (fontified t face font-lock-string-face) 20 21 (fontified t)) . 254) (undo-tree-id288 . -17) (undo-tree-id289 . 4) (undo-tree-id290 . 7) (undo-tree-id291 . 8) (undo-tree-id292 . -14) (undo-tree-id293 . -14) (undo-tree-id294 . -14) (undo-tree-id295 . 9) (undo-tree-id296 . 9) (undo-tree-id297 . -16) (undo-tree-id298 . -16) (undo-tree-id299 . 1) (undo-tree-id300 . 1) (undo-tree-id302 . 4) (undo-tree-id303 . 4) (undo-tree-id304 . -19) (undo-tree-id305 . -16) (undo-tree-id306 . -17) (undo-tree-id308 . 4) (undo-tree-id310 . 4) (undo-tree-id312 . 4) (undo-tree-id314 . 4) (undo-tree-id316 . 4) (undo-tree-id318 . 4) (undo-tree-id320 . -17) (undo-tree-id322 . 4) (undo-tree-id324 . 4) (undo-tree-id326 . 4) (undo-tree-id328 . -16) (undo-tree-id330 . 5) (undo-tree-id332 . 6) (undo-tree-id334 . -16) (undo-tree-id336 . 7) (undo-tree-id338 . 8) (undo-tree-id340 . 9) (undo-tree-id342 . 10) (undo-tree-id344 . 11) (undo-tree-id346 . 12) (undo-tree-id348 . 13) (undo-tree-id350 . 14) (undo-tree-id352 . 15) (undo-tree-id354 . 16) (undo-tree-id356 . 17) (undo-tree-id358 . 18) (undo-tree-id360 . 19) (undo-tree-id362 . 20) (undo-tree-id364 . 21) (undo-tree-id366 . 21) (undo-tree-id368 . -16) (t 23728 40232 123541 307000)) ((254 . 275)) (23728 40305 855812 851000) 0 nil]) ((273 . 274) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -271)) ((271 . 272) (#("\"" 0 1 (fontified t face font-lock-string-face)) . 273)) (23728 40306 212060 419000) 0 nil]) ((270 . 272) (#("\"" 0 1 (fontified nil)) . -270) (270 . 271)) ((#("\"" 0 1 (fontified nil)) . 270) (undo-tree-id388 . 1) (undo-tree-id389 . 1) (undo-tree-id390 . 1) (270 . 271) (#("\"\"" 0 1 (fontified t face font-lock-string-face) 1 2 (fontified t face font-lock-string-face)) . 270) (undo-tree-id391 . -1) (undo-tree-id392 . -1) (undo-tree-id393 . -2) (undo-tree-id394 . -2) (undo-tree-id395 . -1) (undo-tree-id396 . -2) (undo-tree-id397 . 2) (undo-tree-id398 . -1) (undo-tree-id399 . 1) (undo-tree-id400 . -1) (undo-tree-id401 . 1) (undo-tree-id402 . -2)) (23728 40307 169401 136000) 0 nil]) ((#("h" 0 1 (fontified t)) . -271) (undo-tree-id282 . -1) (undo-tree-id283 . -1) 272 (271 . 272) (t 23728 40216 923636 769000)) ((#("h" 0 1 (fontified nil)) . 271) (271 . 272)) (23728 40307 498680 64000) 0 nil]) ((270 . 272)) ((#("li" 0 1 (fontified t) 1 2 (fontified t)) . 270) (undo-tree-id403 . -1) (undo-tree-id404 . -1) (undo-tree-id405 . 2) (undo-tree-id406 . 2) (undo-tree-id407 . -2) (undo-tree-id408 . 2) (undo-tree-id409 . 2) (undo-tree-id410 . 1) (undo-tree-id411 . 2)) (23728 40307 809106 452000) 0 nil]) ((#("format \"ns:~a\" t" 0 6 (fontified t face font-lock-builtin-face) 6 7 (fontified t) 7 8 (fontified t face font-lock-string-face) 8 13 (fontified t face font-lock-string-face) 13 14 (fontified t face font-lock-string-face) 14 16 (fontified t)) . 270) (undo-tree-id265 . -8) (undo-tree-id266 . 3) (undo-tree-id267 . -8) (undo-tree-id268 . -8) (undo-tree-id269 . 3) (undo-tree-id270 . 3) (undo-tree-id272 . 3) (undo-tree-id274 . 3) (undo-tree-id276 . -2) (undo-tree-id277 . -2) (undo-tree-id279 . -10) (undo-tree-id281 . 13) 272) ((270 . 286)) (23728 40308 110379 636000) 0 nil] [nil nil ((278 . 280) (#("ns:~a" 0 5 (fontified t face font-lock-string-face)) . 278) (undo-tree-id225 . 5)) ((278 . 283) (#("li" 0 2 (fontified t face font-lock-string-face)) . 278) (undo-tree-id226 . 1) (undo-tree-id227 . 1) (undo-tree-id228 . -1) (undo-tree-id229 . 1) (undo-tree-id230 . 1) (undo-tree-id231 . 2) (undo-tree-id232 . -2) (undo-tree-id233 . 1) (undo-tree-id234 . 1) (undo-tree-id235 . 1) (undo-tree-id236 . 1) (undo-tree-id237 . -1) (undo-tree-id238 . 1) (undo-tree-id239 . 1) (undo-tree-id240 . -1) (undo-tree-id241 . 1) (undo-tree-id242 . 1) (undo-tree-id243 . 1) (undo-tree-id244 . 1) (undo-tree-id245 . 1) (undo-tree-id246 . 1) (undo-tree-id247 . 1) (undo-tree-id248 . 1) (undo-tree-id249 . 1) (undo-tree-id250 . 1) (undo-tree-id251 . 1) (undo-tree-id252 . 1) (undo-tree-id253 . 1) (undo-tree-id254 . 1) (undo-tree-id255 . -1) (undo-tree-id256 . 1) (undo-tree-id257 . 1) (undo-tree-id258 . -1) (undo-tree-id259 . 1) (undo-tree-id260 . 1) (undo-tree-id261 . -1) (undo-tree-id262 . -1) (undo-tree-id263 . 1) (undo-tree-id264 . 1) (t 23728 40192 337115 679000)) (23728 40192 315298 20000) 0 nil]) ((#(" " 0 1 (fontified t)) . 226)) nil (23728 40310 808550 90000) 0 nil] [nil nil ((230 . 236) (#(")" 0 1 (fontified nil)) . 230) (229 . 230) (228 . 230) (#("(" 0 1 (fontified nil)) . -228) (227 . 229) (#("t" 0 1 (fontified t)) . -227) (undo-tree-id203 . -1) (undo-tree-id204 . -1) 228 (227 . 228)) ((#("t" 0 1 (fontified nil)) . 227) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (227 . 228) (#("'(" 0 1 (fontified nil) 1 2 (fontified nil)) . 227) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (undo-tree-id209 . -1) (undo-tree-id210 . -1) (228 . 229) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 228) (undo-tree-id211 . -1) (undo-tree-id212 . -1) (undo-tree-id213 . -1) (undo-tree-id214 . -1) (#(")" 0 1 (fontified nil)) . 229) (undo-tree-id215 . -1) (undo-tree-id216 . -1) (undo-tree-id217 . -1) (undo-tree-id218 . -1) (230 . 231) (#(" items" 0 6 (fontified t)) . 230) (undo-tree-id219 . -5) (undo-tree-id220 . -5) (undo-tree-id221 . 1) (undo-tree-id222 . 1) (undo-tree-id223 . -1) (undo-tree-id224 . -6)) (23728 40162 598280 417000) 0 nil] [nil nil ((230 . 236) (#(")" 0 1 (fontified nil)) . 230) (229 . 230) (228 . 230) (#("(" 0 1 (fontified nil)) . -228) (228 . 229) (227 . 228)) ((#("'" 0 1 (fontified nil)) . 227) (undo-tree-id177 . -1) (undo-tree-id178 . -1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (#("(" 0 1 (fontified nil)) . 228) (228 . 229) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 228) (undo-tree-id181 . -1) (undo-tree-id182 . -1) (undo-tree-id183 . -1) (undo-tree-id184 . -1) (#(")" 0 1 (fontified nil)) . 229) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) (undo-tree-id188 . -1) (230 . 231) (#(" title" 0 6 (fontified t)) . 230) (undo-tree-id189 . -1) (undo-tree-id190 . -1) (undo-tree-id191 . 1) (undo-tree-id192 . 1) (undo-tree-id193 . -1) (undo-tree-id194 . -6) (undo-tree-id195 . 2) (undo-tree-id196 . 1) (undo-tree-id197 . 3) (undo-tree-id198 . 2) (undo-tree-id199 . 4) (undo-tree-id200 . 3) (undo-tree-id201 . 5) (undo-tree-id202 . 4)) (23728 40151 788387 792000) 0 nil]) ((226 . 227) (t 23728 40035 771305 191000)) nil (23728 40162 599047 861000) 0 nil]) ((221 . 222)) nil (23728 40035 747831 776000) 0 nil]) ((68 . 72) (66 . 68) (56 . 66)) nil (23728 40035 747845 694000) 0 nil]) ((34 . 43) (47 . 48) (#(")" 0 1 (fontified t)) . -33) 16) nil (23728 40035 747854 490000) 0 nil]) ((#("require " 0 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t)) . 35)) nil (23728 40035 747860 823000) 0 nil]) ((#(")" 0 1 (rear-nonsticky t fontified nil)) . 56) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (#("(" 0 1 (fontified t)) . -35) (undo-tree-id175 . -1) (undo-tree-id176 . -1) 36) nil (23728 40035 747890 93000) 0 nil] [nil nil ((34 . 35) (#("
" 0 1 (fontified t rear-nonsticky t)) . -34) (undo-tree-id165 . -1) 15) ((34 . 35) (#(" " 0 1 (fontified t)) . 34) (undo-tree-id171 . 1) (undo-tree-id172 . 1)) (23728 40003 218836 564000) 0 nil]) ((nil rear-nonsticky nil 34 . 35) (#("
" 0 1 (fontified nil)) . -58) (34 . 59) 14) nil (23728 40003 219332 566000) 0 nil]) ((#("(require pollen/decode)
" 0 1 (fontified t) 1 8 (fontified t face font-lock-keyword-face) 8 22 (fontified t) 22 23 (fontified t rear-nonsticky t) 23 24 (fontified t)) . 63) (undo-tree-id166 . -13) (undo-tree-id167 . -13) (undo-tree-id168 . 11) 76) nil (23728 40003 218870 765000) 0 nil]) ((210 . 211) (#(")" 0 1 (fontified t)) . -206) (199 . 206) (198 . 200) (#("(" 0 1 (fontified nil)) . -198) (198 . 199) (#("9" 0 1 (fontified t)) . -198) (undo-tree-id169 . -1) (undo-tree-id170 . -1) 199 (198 . 199)) nil (23728 40003 218891 53000) 0 nil]) ((169 . 170)) nil (23728 40003 218899 73000) 0 nil] [nil nil ((#(";" 0 1 (fontified t face font-lock-comment-delimiter-face)) . 133) (undo-tree-id159 . 1) (undo-tree-id160 . 1) (undo-tree-id161 . 1) (undo-tree-id162 . 1) (undo-tree-id163 . 1) (undo-tree-id164 . 1)) ((133 . 134)) (23728 39939 222785 453000) 0 nil] [nil nil ((182 . 183) (177 . 178) 179 (t 23728 39677 489876 839000)) ((#("(" 0 1 (fontified nil)) . 177) (undo-tree-id149 . 1) (undo-tree-id150 . 1) (undo-tree-id151 . 1) (undo-tree-id152 . 1) (undo-tree-id153 . 1) (undo-tree-id154 . 1) (undo-tree-id155 . 1) (undo-tree-id156 . -1) (#(")" 0 1 (fontified t)) . 182) (undo-tree-id157 . 1) (undo-tree-id158 . -1) (t 23728 39745 42858 663000)) (23728 39745 21975 381000) 0 nil] [nil nil ((#("(define (books . elements) `(ul ,@elements))
;(define (book title) `(li ,title))
(define book `(li))
(decode book #:txexpr-tag-proc (Î» (t) (string->symbol (format \"ns:~a\" t))))" 0 1 (fontified t) 1 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t) 9 14 (fontified t face font-lock-function-name-face) 14 25 (fontified t) 25 28 (fontified t) 28 33 (fontified t) 33 42 (fontified t) 42 43 (fontified t) 43 44 (fontified t) 44 45 (rear-nonsticky t fontified t) 45 46 (fontified t face font-lock-comment-delimiter-face) 46 47 (fontified t face font-lock-comment-face) 47 53 (fontified t face font-lock-comment-face) 53 54 (fontified t face font-lock-comment-face) 54 55 (fontified t face font-lock-comment-face) 55 59 (fontified t face font-lock-comment-face) 59 65 (fontified t face font-lock-comment-face) 65 68 (fontified t face font-lock-comment-face) 68 78 (fontified t face font-lock-comment-face) 78 79 (fontified t face font-lock-comment-face) 79 80 (fontified t face font-lock-comment-face) 80 81 (fontified t face font-lock-comment-face) 81 82 (fontified t) 82 88 (fontified t face font-lock-keyword-face) 88 89 (fontified t) 89 93 (fontified t face font-lock-variable-name-face) 93 95 (fontified t) 95 98 (fontified t) 98 99 (fontified t) 99 100 (fontified t) 100 101 (fontified t) 101 114 (fontified t) 114 131 (fontified t face racket-keyword-argument-face) 131 133 (fontified t) 133 134 (fontified t face font-lock-keyword-face) 134 140 (fontified t) 140 154 (fontified t face font-lock-builtin-face) 154 156 (fontified t) 156 162 (fontified t face font-lock-builtin-face) 162 163 (fontified t) 163 170 (fontified t face font-lock-string-face) 170 175 (fontified t) 175 176 (rear-nonsticky t fontified t)) . 88) (undo-tree-id86 . -97) (undo-tree-id87 . -101) (undo-tree-id88 . -175) (undo-tree-id89 . 78) (undo-tree-id90 . -97) (undo-tree-id91 . -80) (undo-tree-id92 . -80) (undo-tree-id93 . 175) (undo-tree-id94 . 175) (undo-tree-id95 . -1) (undo-tree-id96 . 175) (undo-tree-id97 . 175) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -101) (undo-tree-id102 . 131) (undo-tree-id103 . 131) (undo-tree-id104 . -101) (undo-tree-id105 . -45) (undo-tree-id106 . 131) (undo-tree-id107 . 131) (undo-tree-id108 . 131) (undo-tree-id109 . 131) (undo-tree-id110 . -45) (undo-tree-id111 . -45) (undo-tree-id112 . -45) (undo-tree-id113 . -45) (undo-tree-id114 . 22) (undo-tree-id115 . 23) (undo-tree-id116 . -45) (undo-tree-id117 . -154) (undo-tree-id118 . -154) (undo-tree-id119 . 79) (undo-tree-id120 . 78) (undo-tree-id121 . -154) (undo-tree-id122 . -97) (undo-tree-id123 . -97) (undo-tree-id124 . 79) (undo-tree-id125 . 79) (undo-tree-id126 . 79) (undo-tree-id127 . 79) (undo-tree-id128 . -97) (undo-tree-id129 . -92) (undo-tree-id130 . -92) (undo-tree-id131 . 80) (undo-tree-id132 . 79) (undo-tree-id133 . 81) (undo-tree-id134 . 80) (undo-tree-id135 . -163) (undo-tree-id136 . -164) (undo-tree-id137 . 82) (undo-tree-id138 . 81) (undo-tree-id139 . 83) (undo-tree-id140 . 82) (undo-tree-id141 . 84) (undo-tree-id142 . 83) (undo-tree-id143 . -163) (undo-tree-id144 . -164) (undo-tree-id145 . -163) (undo-tree-id146 . -164) (undo-tree-id147 . -163) (undo-tree-id148 . -164) 180 (t 23728 39677 489876 839000)) ((88 . 264)) (23728 39740 170865 581000) 0 nil]) ((#(" " 0 1 (fontified t)) . -186) (undo-tree-id76 . -1) (undo-tree-id77 . -1) (undo-tree-id78 . 1) (#(":" 0 1 (fontified t face font-lock-builtin-face)) . -187) (undo-tree-id79 . -1) (undo-tree-id80 . -1) (undo-tree-id81 . 1) 188 (187 . 188) (184 . 187) (183 . 185) (#("(" 0 1 (fontified nil)) . -183) (undo-tree-id82 . -1) (undo-tree-id83 . -1) (183 . 184) (182 . 183) (174 . 182) (#("e" 0 1 (fontified t)) . -174) (undo-tree-id84 . -1) (undo-tree-id85 . -1) 175 (170 . 175) (169 . 171) (#("(" 0 1 (fontified nil face font-lock-comment-face)) . -169) (169 . 170) (168 . 169) (t 23728 39573 397075 891000) 133) nil (23728 39939 223014 849000) 0 nil]) ((133 . 134) (t 23728 39508 47403 372000)) nil (23728 39573 388366 446000) 0 nil]) ((243 . 244) 179) nil (23728 39508 31994 657000) 0 nil]) ((176 . 180) (#("tx" 0 2 (fontified t)) . 176) (undo-tree-id70 . -2) (undo-tree-id71 . 2)) nil (23728 39508 32026 561000) 0 nil]) ((nil rear-nonsticky nil 240 . 241) (nil fontified nil 168 . 241) (168 . 241)) nil (23728 39508 32035 966000) 0 nil]) ((167 . 168) 166) nil (23728 39508 32042 95000) 0 nil]) ((#("
(decode book #:txexpr-attrs-proc (Î» (attrs) (cons '[class \"PhD\"] attrs)))" 0 1 (fontified t) 1 14 (fontified t) 14 33 (fontified t face racket-keyword-argument-face) 33 35 (fontified t) 35 36 (fontified t face font-lock-keyword-face) 36 46 (fontified t) 46 50 (fontified t face font-lock-builtin-face) 50 53 (fontified t) 53 58 (fontified t face font-lock-builtin-face) 58 59 (fontified t) 59 64 (fontified t face font-lock-string-face) 64 73 (fontified t) 73 74 (rear-nonsticky t fontified t)) . 167) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -5) (undo-tree-id75 . -5) 172) nil (23728 39508 32057 936000) 0 nil] [nil nil ((241 . 242) 89) ((#("
" 0 1 (fontified t)) . 241) (t 23728 38276 884003 33000)) (23728 38276 861227 199000) 0 nil]) ((#("p" 0 1 (fontified t)) . 63) (undo-tree-id68 . -1) (undo-tree-id69 . -1)) nil (23728 38307 11045 578000) 0 nil]) ((nil rear-nonsticky nil 86 . 87) (nil fontified nil 64 . 87) (64 . 87) 63) nil (23728 38276 861268 436000) 0 nil]) ((63 . 64) (62 . 63) 46) nil (23728 38276 861275 485000) 0 nil] [nil nil ((nil rear-nonsticky nil 69 . 70) (nil fontified nil 47 . 70) (47 . 70) 46) ((#("(require pollen/decode)" 0 1 (fontified nil) 1 8 (fontified nil face font-lock-keyword-face) 8 22 (fontified nil) 22 23 (fontified nil rear-nonsticky nil)) . 47) (undo-tree-id51 . -22) (undo-tree-id52 . 1) (undo-tree-id53 . -22) (undo-tree-id54 . 1) (undo-tree-id55 . -22) (undo-tree-id56 . 1) (undo-tree-id57 . -22) (undo-tree-id58 . -22) (undo-tree-id59 . 1) (undo-tree-id60 . 1) (undo-tree-id61 . -1) (undo-tree-id62 . 23) (undo-tree-id63 . -1) (undo-tree-id64 . 22) (undo-tree-id65 . -22) (undo-tree-id66 . 1) (undo-tree-id67 . -23) (nil rear-nonsticky t 69 . 70)) (23728 38258 606627 98000) 0 nil]) ((152 . 156) (#("tx" 0 2 (fontified t)) . 152) (undo-tree-id49 . -1) (undo-tree-id50 . -1) 153) nil (23728 38258 606763 760000) 0 nil]) ((nil rear-nonsticky nil 214 . 215) (nil fontified nil 144 . 215) (144 . 215) (t 23728 37359 529677 284000)) nil (23728 38258 606642 782000) 0 nil] [nil nil ((nil rear-nonsticky nil 191 . 192) (nil fontified nil 144 . 192) (144 . 192) (t 23728 37359 529677 284000)) ((#("(require pollen/tag)
(provide (all-defined-out))" 0 1 (fontified nil) 1 8 (fontified nil face font-lock-keyword-face) 8 21 (fontified nil) 21 22 (fontified nil) 22 29 (fontified nil face font-lock-keyword-face) 29 31 (fontified nil) 31 46 (fontified nil face font-lock-keyword-face) 46 47 (fontified nil) 47 48 (fontified nil rear-nonsticky nil)) . 144) (undo-tree-id9 . -47) (undo-tree-id10 . 1) (undo-tree-id11 . 48) (undo-tree-id12 . -47) (undo-tree-id13 . 1) (undo-tree-id14 . 48) (undo-tree-id15 . -47) (undo-tree-id16 . 1) (undo-tree-id17 . 48) (undo-tree-id18 . 1) (undo-tree-id19 . 48) (undo-tree-id20 . 1) (undo-tree-id21 . 48) (undo-tree-id22 . -46) (undo-tree-id23 . -47) (undo-tree-id24 . -30) (undo-tree-id25 . -31) (undo-tree-id26 . -21) (undo-tree-id27 . -22) (undo-tree-id28 . 29) (undo-tree-id29 . 1) (undo-tree-id30 . -19) (undo-tree-id31 . 29) (undo-tree-id32 . 1) (undo-tree-id33 . -19) (undo-tree-id34 . 29) (undo-tree-id35 . 1) (undo-tree-id36 . -19) (undo-tree-id37 . -19) (undo-tree-id38 . 29) (undo-tree-id39 . 1) (undo-tree-id40 . 29) (undo-tree-id41 . 1) (undo-tree-id42 . -1) (undo-tree-id43 . 48) (undo-tree-id44 . -1) (undo-tree-id45 . 47) (undo-tree-id46 . -19) (undo-tree-id47 . 29) (undo-tree-id48 . -20) (nil fontified t 152 . 165) (nil fontified t 145 . 152) (nil fontified t 144 . 145) (nil rear-nonsticky t 191 . 192)) (23728 38171 372762 397000) 0 nil]) ((143 . 144) 61) nil (23728 38171 373700 79000) 0 nil]) ((nil rear-nonsticky nil 61 . 62) (nil fontified nil 14 . 62) (14 . 62)) nil (23728 37359 519094 418000) 0 nil]) ((13 . 14) 12) nil (23728 37359 519101 826000) 0 nil]) ((1 . 13) (#("r" 0 1 (fontified t)) . -1) (undo-tree-id7 . -1) (undo-tree-id8 . -1) 2 (1 . 2)) nil (23728 37359 519132 265000) 0 nil]) ((1 . 2) 1) nil (23728 37359 519140 543000) 0 nil]) ((#("â" 0 1 (fontified t)) . 2)) nil (23728 37359 519144 700000) 0 nil]) ((#("â" 0 1 (fontified t)) . 48)) nil (23728 37359 519148 714000) 0 nil]) ((nil rear-nonsticky nil 1 . 2) (#("
" 0 1 (fontified nil)) . 83) (1 . 84) (t . -1)) ((#("
â(define (books . elements) `(ul ,@elements))
â(define (book title) `(li ,title))
" 0 1 (fontified nil rear-nonsticky nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 9 (fontified nil face font-lock-keyword-face) 9 10 (fontified nil) 10 11 (fontified nil) 11 16 (fontified nil face font-lock-function-name-face) 16 27 (fontified nil) 27 30 (fontified nil) 30 35 (fontified nil) 35 44 (fontified nil) 44 45 (fontified nil) 45 46 (fontified nil) 46 47 (rear-nonsticky t fontified nil) 47 48 (fontified nil) 48 49 (fontified nil) 49 55 (fontified nil face font-lock-keyword-face) 55 56 (fontified nil) 56 57 (fontified nil) 57 61 (fontified nil face font-lock-function-name-face) 61 67 (fontified nil) 67 70 (fontified nil) 70 80 (fontified nil) 80 81 (fontified nil) 81 82 (fontified nil) 82 83 (fontified nil)) . 1) (undo-tree-id0 . -1) (undo-tree-id1 . -1) (undo-tree-id2 . -82) (undo-tree-id3 . -1) (undo-tree-id4 . -82) (undo-tree-id5 . 82) (undo-tree-id6 . 83) (83 . 84) (nil rear-nonsticky t 1 . 2)) (23728 37296 729519 235000) 0 nil]) nil nil (23728 37295 186208 154000) 0 nil] #1# 19513 155 nil)