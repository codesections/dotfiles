"a4c57698c078a96e7e3a590d07a85964fae59a64"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#3=[nil nil ((815 . 818) (#("String" 0 6 (fontified t face font-lock-type-face)) . 815) (undo-tree-id13058 . -5) (undo-tree-id13059 . -6)) nil (23740 45820 805183 899000) 0 nil]) ((812 . 813) (#(">" 0 1 (fontified t)) . -806) (undo-tree-id13060 . -1) (805 . 807) (#("<" 0 1 (fontified nil face font-lock-type-face)) . -805) (802 . 806) (t 23740 45775 162443 468000)) nil (23740 45820 805208 222000) 0 nil]) ((810 . 816)) nil (23740 45775 36297 458000) 0 nil]) ((#("Vec<u8>" 0 3 (fontified t face font-lock-type-face) 3 4 (fontified t) 4 6 (fontified t face font-lock-type-face) 6 7 (fontified t)) . 810) (undo-tree-id13049 . -7) (undo-tree-id13050 . -7) (undo-tree-id13051 . -7) (undo-tree-id13052 . -7) (undo-tree-id13053 . -7) (undo-tree-id13054 . -3) (undo-tree-id13055 . -4) (undo-tree-id13056 . -3) (undo-tree-id13057 . -4) (t 23740 45738 332692 451000)) nil (23740 45775 36359 418000) 0 nil]) ((#("                assert_eq!(result, Ok((\"foo\".to_string(), b\"bar\".to_vec())));
" 0 16 (fontified t) 16 26 (fontified t face font-lock-preprocessor-face) 26 30 (fontified t) 30 35 (fontified t) 35 37 (fontified t face font-lock-type-face) 37 39 (fontified t) 39 44 (fontified t face font-lock-string-face) 44 59 (fontified t) 59 62 (fontified t face font-lock-string-face) 62 63 (syntax-table #1=(15) fontified t face font-lock-string-face) 63 64 (fontified t face font-lock-string-face) 64 78 (fontified t)) . 873) (undo-tree-id13033 . -39) (undo-tree-id13034 . -40)) nil (23740 45738 223070 299000) 0 nil]) ((827 . 837) (#("R" 0 1 (fontified t face font-lock-type-face)) . -827) (undo-tree-id13035 . -1) (undo-tree-id13036 . -1) (undo-tree-id13037 . -1) (undo-tree-id13038 . -1) (undo-tree-id13039 . -1) 828 (824 . 828) (820 . 824) (#("()" 0 2 (fontified t)) . 820) (undo-tree-id13040 . -1) (undo-tree-id13041 . -2) (undo-tree-id13042 . 2) (undo-tree-id13043 . -1) (undo-tree-id13044 . 1) (undo-tree-id13045 . -1) (undo-tree-id13046 . 1) (undo-tree-id13047 . -2)) nil (23740 45738 223094 195000) 0 nil]) ((#(")" 0 1 (fontified nil)) . 822) (undo-tree-id13048 . -1) (821 . 822) (820 . 822) (#("(" 0 1 (fontified nil)) . -820) (818 . 821)) nil (23740 45738 223101 567000) 0 nil]) ((815 . 816) (814 . 815) (813 . 815) (#("<" 0 1 (fontified nil face font-lock-type-face)) . -813) (813 . 814)) nil (23740 45738 223105 558000) 0 nil] [nil nil ((814 . 819) (813 . 815) (#("<" 0 1 (fontified nil face font-lock-type-face)) . -813) (813 . 814)) ((#("<" 0 1 (fontified nil face font-lock-type-face)) . 813) (813 . 814) (#("<>" 0 1 (fontified nil) 1 2 (fontified nil)) . 813) (undo-tree-id12985 . 1) (undo-tree-id12986 . -1) (undo-tree-id12987 . -1) (undo-tree-id12988 . -1) (undo-tree-id12989 . -1) (undo-tree-id12990 . -1) (undo-tree-id12991 . -1) (undo-tree-id12992 . -1) (undo-tree-id12993 . -1) (undo-tree-id12994 . -1) (undo-tree-id12995 . -2) (undo-tree-id12996 . -1) (undo-tree-id12997 . -1) (undo-tree-id12998 . -1) (undo-tree-id12999 . -1) (undo-tree-id13000 . -1) (undo-tree-id13001 . -1) (undo-tree-id13002 . -1) (undo-tree-id13003 . -1) (undo-tree-id13004 . -1) (undo-tree-id13005 . -1) (undo-tree-id13006 . -1) (undo-tree-id13007 . -1) (undo-tree-id13008 . -1) (undo-tree-id13009 . -1) (#("Bytes" 0 5 (fontified t face font-lock-type-face)) . 814) (undo-tree-id13010 . -1) (undo-tree-id13011 . -1) (undo-tree-id13012 . -1) (undo-tree-id13013 . -3) (undo-tree-id13014 . -1) (undo-tree-id13015 . -4) (undo-tree-id13016 . -3) (undo-tree-id13017 . -2) (undo-tree-id13018 . -3) (undo-tree-id13019 . -5) (undo-tree-id13020 . -4) (undo-tree-id13021 . -4) (undo-tree-id13022 . -4) (undo-tree-id13023 . -4) (undo-tree-id13024 . -5) (undo-tree-id13025 . -5) (undo-tree-id13026 . -4) (undo-tree-id13027 . -3) (undo-tree-id13028 . -4) (undo-tree-id13029 . -3) (undo-tree-id13030 . -3) (undo-tree-id13031 . -3) (undo-tree-id13032 . -3)) (23740 45680 688137 496000) 0 nil]) ((802 . 813) (801 . 803) (#("(" 0 1 (fontified nil)) . -801) (801 . 802) (#("S" 0 1 (fontified t face font-lock-type-face)) . -801) (undo-tree-id12976 . -1) (undo-tree-id12977 . -1) (undo-tree-id12978 . -1) (undo-tree-id12979 . -1) (undo-tree-id12980 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -802) (undo-tree-id12981 . -1) (undo-tree-id12982 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -803) (undo-tree-id12983 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -804) (undo-tree-id12984 . -1) 805 (801 . 805) (800 . 802) (#("<" 0 1 (fontified nil face font-lock-type-face)) . -800) (792 . 801) (t 23740 45307 155648 546000)) nil (23740 45680 712535 673000) 0 nil] [nil ([nil nil ((#(")" 0 1 (fontified nil)) . 720) (undo-tree-id12962 . -1) (719 . 720) (718 . 720) (#("(" 0 1 (fontified nil)) . -718) (undo-tree-id12963 . -1) (undo-tree-id12964 . -1) (716 . 719)) ((#(": (" 0 2 (fontified nil) 2 3 (fontified nil)) . 716) (undo-tree-id12966 . -2) (undo-tree-id12967 . -1) (undo-tree-id12968 . -2) (undo-tree-id12969 . -3) (undo-tree-id12970 . -3) (undo-tree-id12971 . -2) (718 . 719) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 718) (undo-tree-id12972 . -1) (undo-tree-id12973 . -1) (#(")" 0 1 (fontified nil)) . 719) (undo-tree-id12974 . -1) (720 . 721)) (23740 45642 295863 168000) 0 nil]) ((#("                assert_eq!(result, Ok((\"foo\".to_string(), b\"bar\".to_vec())));
" 0 16 (fontified t) 16 26 (fontified t face font-lock-preprocessor-face) 26 30 (fontified t) 30 35 (fontified t) 35 37 (fontified t face font-lock-type-face) 37 39 (fontified t) 39 44 (fontified t face font-lock-string-face) 44 59 (fontified t) 59 62 (fontified t face font-lock-string-face) 62 63 (syntax-table #1# fontified t face font-lock-string-face) 63 64 (fontified t face font-lock-string-face) 64 78 (fontified t)) . 827) (undo-tree-id12965 . -21) 848 (t 23740 45307 155648 546000)) ((827 . 905)) (23740 45642 396832 857000) 0 nil]) ((817 . 818)) ((#("&" 0 1 (fontified t)) . 817) (undo-tree-id12975 . -1) (t 23740 45307 155648 546000)) (23740 45652 796654 613000) 0 nil]) ((#("h" 0 1 (fontified t)) . 825)) nil (23740 45651 669802 341000) 0 nil]) ((824 . 826) (#(")" 0 1 (fontified nil)) . 824) (817 . 824) (816 . 818) (#("(" 0 1 (fontified nil)) . -816) (812 . 817) (796 . 812) (796 . 797) 815 (t 23740 45245 722745 201000)) nil (23740 45307 111283 603000) 0 nil] [nil ([nil nil ((#("                " 0 16 (fontified t)) . -796) (undo-tree-id12956 . -16) (undo-tree-id12957 . -16) 812 (796 . 812) (796 . 797)) ((#("
" 0 1 (fontified nil)) . 796) (undo-tree-id12959 . 1) (#("                " 0 16 (fontified nil)) . 796) (undo-tree-id12960 . -16) (undo-tree-id12961 . -16) (796 . 812)) (23740 45291 107137 741000) 0 nil]) ((#("                assert_eq!(result, Ok((\"foo\".to_string(), b\"bar\".to_vec())));
" 0 16 (fontified t) 16 26 (fontified t face font-lock-preprocessor-face) 26 30 (fontified t) 30 35 (fontified t) 35 37 (fontified t face font-lock-type-face) 37 39 (fontified t) 39 44 (fontified t face font-lock-string-face) 44 59 (fontified t) 59 62 (fontified t face font-lock-string-face) 62 63 (syntax-table #1# fontified t face font-lock-string-face) 63 64 (fontified t face font-lock-string-face) 64 78 (fontified t)) . 796) (undo-tree-id12958 . -19) 815 (t 23740 45245 722745 201000)) ((796 . 874)) (23740 45291 112564 487000) 0 nil]) ((749 . 750) (743 . 749) (742 . 744) (#("(" 0 1 (fontified nil)) . -742) (738 . 743) (717 . 738) 680) nil (23740 45291 699021 861000) 0 nil]) ((#("                    .and_then(|(con, ())| {
                        redis::cmd(\"MGET\")
                            .arg(&[\"key1\", \"key2\"])
                            .query_async(con)
                            .map(|t| t.1)
                    })
" 0 44 (fontified t) 44 68 (fontified t) 68 73 (fontified t face font-lock-constant-face) 73 79 (fontified t) 79 81 (fontified t face font-lock-string-face) 81 85 (fontified t face font-lock-string-face) 85 87 (fontified t) 87 122 (fontified t) 122 125 (fontified t face font-lock-string-face) 125 128 (fontified t face font-lock-string-face) 128 130 (fontified t) 130 136 (fontified t face font-lock-string-face) 136 139 (fontified t) 139 217 (fontified t) 217 227 (fontified t) 227 250 (fontified t)) . 718) (undo-tree-id12804 . -249) (undo-tree-id12805 . -25) (undo-tree-id12806 . -249) (undo-tree-id12807 . -25) (undo-tree-id12808 . -24) (undo-tree-id12809 . -25) (undo-tree-id12810 . -25) (undo-tree-id12811 . -24) (undo-tree-id12812 . -25) (undo-tree-id12813 . -25) (undo-tree-id12814 . -69) (undo-tree-id12815 . -25) (undo-tree-id12816 . -69) (undo-tree-id12817 . -69) (undo-tree-id12818 . -25) (undo-tree-id12819 . -69) (undo-tree-id12820 . -69) (undo-tree-id12821 . -25) (undo-tree-id12822 . -69) (undo-tree-id12823 . -25) (undo-tree-id12824 . -69) (undo-tree-id12825 . -69) (undo-tree-id12826 . -69) (undo-tree-id12827 . -69) (undo-tree-id12828 . -69) (undo-tree-id12829 . -69) (undo-tree-id12830 . -112) (undo-tree-id12831 . -69) (undo-tree-id12832 . -112) (undo-tree-id12833 . -112) (undo-tree-id12834 . -69) (undo-tree-id12835 . -112) (undo-tree-id12836 . -112) (undo-tree-id12837 . -69) (undo-tree-id12838 . -112) (undo-tree-id12839 . -69) (undo-tree-id12840 . -69) (undo-tree-id12841 . -112) (undo-tree-id12842 . 170) (undo-tree-id12843 . -84) (undo-tree-id12844 . -69) (undo-tree-id12845 . -69) (undo-tree-id12846 . -25) (undo-tree-id12847 . -69) (undo-tree-id12848 . -25) (undo-tree-id12849 . -25) (undo-tree-id12850 . -69) (undo-tree-id12851 . -25) (undo-tree-id12852 . -25) (undo-tree-id12853 . -69) (undo-tree-id12854 . -25) (undo-tree-id12855 . -69) (undo-tree-id12856 . -25) (undo-tree-id12857 . -25) (undo-tree-id12858 . -25) (undo-tree-id12859 . -25) (undo-tree-id12860 . -25) (undo-tree-id12861 . -25) (undo-tree-id12862 . -250) (undo-tree-id12863 . -25) (undo-tree-id12864 . -25) (undo-tree-id12865 . -25) (undo-tree-id12866 . -25) (undo-tree-id12867 . -25) (undo-tree-id12868 . -25) (undo-tree-id12869 . -25) (undo-tree-id12870 . -25) (undo-tree-id12871 . -25) (undo-tree-id12872 . -25) (undo-tree-id12873 . -25) (undo-tree-id12874 . -249) (undo-tree-id12875 . -25) (undo-tree-id12876 . -25) (undo-tree-id12877 . -25) (undo-tree-id12878 . -25) (undo-tree-id12879 . -69) (undo-tree-id12880 . -25) (undo-tree-id12881 . -69) (undo-tree-id12882 . -69) (undo-tree-id12883 . -25) (undo-tree-id12884 . -69) (undo-tree-id12885 . -69) (undo-tree-id12886 . -25) (undo-tree-id12887 . -69) (undo-tree-id12888 . -249) (undo-tree-id12889 . -69) (undo-tree-id12890 . -25) (undo-tree-id12891 . -112) (undo-tree-id12892 . -69) (undo-tree-id12893 . -164) (undo-tree-id12894 . -112) (undo-tree-id12895 . -210) (undo-tree-id12896 . -164) (undo-tree-id12897 . -249) (undo-tree-id12898 . -210) (undo-tree-id12899 . -248) (undo-tree-id12900 . -249) (undo-tree-id12901 . -248) (undo-tree-id12902 . -249) (undo-tree-id12903 . -248) (undo-tree-id12904 . -249) (undo-tree-id12905 . -248) (undo-tree-id12906 . -249) (undo-tree-id12907 . -135) (undo-tree-id12908 . -136) (undo-tree-id12909 . -135) (undo-tree-id12910 . -136) (undo-tree-id12911 . -248) (undo-tree-id12912 . -249) (undo-tree-id12913 . -248) (undo-tree-id12914 . -249) (undo-tree-id12915 . -225) (undo-tree-id12916 . -226) (undo-tree-id12917 . -217) (undo-tree-id12918 . -218) (undo-tree-id12919 . -183) (undo-tree-id12920 . -184) (undo-tree-id12921 . -179) (undo-tree-id12922 . -180) (undo-tree-id12923 . -137) (undo-tree-id12924 . -138) (undo-tree-id12925 . -119) (undo-tree-id12926 . -120) (undo-tree-id12927 . -85) (undo-tree-id12928 . -86) (undo-tree-id12929 . -78) (undo-tree-id12930 . -79) (undo-tree-id12931 . -39) (undo-tree-id12932 . -40) (undo-tree-id12933 . -38) (undo-tree-id12934 . -39) (undo-tree-id12935 . -37) (undo-tree-id12936 . -38) (undo-tree-id12937 . -31) (undo-tree-id12938 . -32) (undo-tree-id12939 . -29) (undo-tree-id12940 . -30) (undo-tree-id12941 . 221) (undo-tree-id12942 . -30) (undo-tree-id12943 . 220) (undo-tree-id12944 . -248) (undo-tree-id12945 . 2) (undo-tree-id12946 . -249) (undo-tree-id12947 . -79) (undo-tree-id12948 . -80) 967) nil (23740 45245 698537 602000) 0 nil]) ((#("                    .and_then(|(con, ())| redis::cmd(\"SET\").arg(&[\"key2\", \"bar\"]).query_async(con))
" 0 31 (fontified t) 31 42 (fontified t) 42 47 (fontified t face font-lock-constant-face) 47 53 (fontified t) 53 58 (fontified t face font-lock-string-face) 58 66 (fontified t) 66 72 (fontified t face font-lock-string-face) 72 74 (fontified t) 74 77 (fontified t face font-lock-string-face) 77 78 (syntax-table #1# fontified t face font-lock-string-face) 78 79 (fontified t face font-lock-string-face) 79 100 (fontified t)) . 718) (undo-tree-id12949 . -20) (undo-tree-id12950 . -20) 738) nil (23740 45245 698554 215000) 0 nil]) ((#("                    .arg(b\"foo\")
" 0 26 (fontified t) 26 31 (fontified t face font-lock-string-face) 31 33 (fontified t)) . 315)) nil (23740 45245 698556 793000) 0 nil]) ((#("                    .arg(\"key1\")
" 0 25 (fontified t) 25 31 (fontified t face font-lock-string-face) 31 33 (fontified t)) . 315) (undo-tree-id12951 . -10) (undo-tree-id12952 . -10) 325) nil (23740 45245 698561 207000) 0 nil]) ((#("                redis::cmd(\"SET\")
" 0 16 (fontified t) 16 21 (fontified t face font-lock-constant-face) 21 27 (fontified t) 27 32 (fontified t face font-lock-string-face) 32 33 (fontified t) 33 34 (fontified t)) . 228) (undo-tree-id12953 . -34) (undo-tree-id12954 . -16) (undo-tree-id12955 . -16) 244) nil (23740 45245 698566 943000) 0 nil]) ((nil rear-nonsticky nil 277 . 278) (#("
" 0 1 (fontified nil)) . -348) (261 . 349) 248) nil (23740 45245 698570 428000) 0 nil]) ((592 . 595)) ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 592) (undo-tree-id11689 . -1) (undo-tree-id11691 . -1) (undo-tree-id11693 . -1) (undo-tree-id11695 . -2) (undo-tree-id11697 . -2) (undo-tree-id11699 . -1) (undo-tree-id11701 . -2) (undo-tree-id11703 . -2) (undo-tree-id11705 . -2) (undo-tree-id11707 . -3) (undo-tree-id11709 . -3) (undo-tree-id11711 . -2) (undo-tree-id11713 . -3) (undo-tree-id11715 . -3) (undo-tree-id11717 . -3) (undo-tree-id11719 . -3) (undo-tree-id11721 . -3) (undo-tree-id11723 . -3) (undo-tree-id11725 . -1) (undo-tree-id11727 . -3) (undo-tree-id11729 . -2) (undo-tree-id11731 . -2) (undo-tree-id11733 . -2) (undo-tree-id11735 . -2) (undo-tree-id11737 . -2) (undo-tree-id11739 . -2) (undo-tree-id11741 . -2) (undo-tree-id11743 . -2) (undo-tree-id11745 . -2) (undo-tree-id11747 . -2)) (23740 45188 868390 958000) 0 nil]) ((571 . 592) (#(" " 0 1 (fontified t face font-lock-comment-face)) . 571)) ((571 . 572) (#("
                    " 0 1 (fontified t face font-lock-comment-face) 1 21 (fontified t)) . 571) (undo-tree-id11749 . -21) (undo-tree-id11751 . -21) (undo-tree-id11752 . -21) (undo-tree-id11754 . -21) (undo-tree-id11756 . -21) (undo-tree-id11758 . -21) (undo-tree-id11760 . -21) (undo-tree-id11762 . -21) (undo-tree-id11764 . -21) (undo-tree-id11766 . -21) (undo-tree-id11768 . -21) (undo-tree-id11770 . -21) (undo-tree-id11772 . -21) (undo-tree-id11774 . -21) (undo-tree-id11776 . -21) (undo-tree-id11778 . -21) (undo-tree-id11780 . -21) (undo-tree-id11782 . -21) (undo-tree-id11784 . -21) (undo-tree-id11786 . -21) (undo-tree-id11788 . -21) (undo-tree-id11790 . -21) (undo-tree-id11792 . -21) (undo-tree-id11794 . -21) (undo-tree-id11796 . -21) (undo-tree-id11798 . -21) (undo-tree-id11800 . -21) (undo-tree-id11802 . -21) (undo-tree-id11804 . -21) (undo-tree-id11806 . -21) (undo-tree-id11808 . -21) (undo-tree-id11810 . -21) (undo-tree-id11812 . -21) (undo-tree-id11814 . -21) (undo-tree-id11816 . -21) (undo-tree-id11818 . -21) (undo-tree-id11820 . -21) (undo-tree-id11822 . -21) (undo-tree-id11824 . -21) (undo-tree-id11826 . -21) (undo-tree-id11828 . -21) (undo-tree-id11830 . -21) (undo-tree-id11832 . -21) (undo-tree-id11834 . -21) (undo-tree-id11836 . -21) (undo-tree-id11838 . -21) (undo-tree-id11840 . -21) (undo-tree-id11842 . -21) (undo-tree-id11843 . -21) (undo-tree-id11844 . -21) (undo-tree-id11846 . -21)) (23740 45188 831489 944000) 0 nil]) ((#("//" 0 2 (fontified t face font-lock-comment-face)) . 547)) ((547 . 549)) (23740 45188 786214 565000) 0 nil]) ((546 . 547) (#("                    " 0 20 (fontified nil)) . 546) (#("
" 0 1 (fontified t face font-lock-comment-face)) . 546)) ((546 . 547) (546 . 566) (#(" " 0 1 (fontified t face font-lock-comment-face)) . 546) (undo-tree-id11848 . -1) (undo-tree-id11850 . -1) (undo-tree-id11852 . -1) (undo-tree-id11853 . -1) (undo-tree-id11855 . -1)) (23740 45188 749155 669000) 0 nil]) ((512 . 515)) ((#("// " 0 3 (fontified t face font-lock-comment-delimiter-face)) . 512)) (23740 45188 705355 302000) 0 nil]) ((491 . 512) (#(" " 0 1 (fontified t face font-lock-comment-face)) . 491)) ((491 . 492) (#("
                    " 0 1 (fontified t face font-lock-comment-face) 1 21 (fontified t)) . 491) (undo-tree-id11857 . -21) (undo-tree-id11859 . -21) (undo-tree-id11861 . -21) (undo-tree-id11862 . -21) (undo-tree-id11863 . -21) (undo-tree-id11865 . -21)) (23740 45188 670646 484000) 0 nil]) ((#("//" 0 2 (fontified t face font-lock-comment-face)) . 454)) ((454 . 456)) (23740 45188 626004 789000) 0 nil]) ((453 . 454) (#("                    " 0 20 (fontified nil)) . 453) (#("
" 0 1 (fontified t face font-lock-comment-face)) . 453)) ((453 . 454) (453 . 473) (#(" " 0 1 (fontified t face font-lock-comment-face)) . 453) (undo-tree-id11867 . -1) (undo-tree-id11869 . -1) (undo-tree-id11871 . -1) (undo-tree-id11872 . -1) (undo-tree-id11874 . -1)) (23740 45188 589179 999000) 0 nil]) ((#("                  " 0 18 (fontified nil)) . 348) (undo-tree-id12795 . -18) (undo-tree-id12796 . -18) (undo-tree-id12797 . -18) (undo-tree-id12798 . -18) (undo-tree-id12799 . -18) (undo-tree-id12800 . -18) (undo-tree-id12801 . -18) (undo-tree-id12802 . -18) (undo-tree-id12803 . -18) (328 . 348)) ((#("                    " 0 20 (fontified nil)) . 328) (348 . 366)) (23740 45188 545343 468000) 0 nil]) ((#("                " 0 16 (fontified nil)) . 346) (328 . 346)) ((#("                  " 0 18 (fontified nil)) . 328) (undo-tree-id11876 . -18) (undo-tree-id11878 . -18) (undo-tree-id11880 . -18) (undo-tree-id11881 . -18) (undo-tree-id11883 . -18) (346 . 362)) (23740 45188 505930 166000) 0 nil]) ((428 . 429) (#("/" 0 1 (fontified nil face font-lock-doc-face)) . 428) (406 . 429) (#(" " 0 1 (fontified nil face font-lock-comment-face)) . 406) (#("    " 0 4 (fontified nil)) . 344) (409 . 410) (t 23740 45064 410700 331000)) ((#("
" 0 1 (fontified nil face font-lock-comment-face)) . 409) (undo-tree-id11885 . -1) (undo-tree-id11887 . -1) (undo-tree-id11889 . -1) (undo-tree-id11891 . -1) (undo-tree-id11893 . -1) (undo-tree-id11895 . -1) (344 . 348) (406 . 407) (#("                    " 0 20 (fontified nil)) . 406) (undo-tree-id11897 . -20) (undo-tree-id11899 . -20) (undo-tree-id11901 . -20) (undo-tree-id11903 . -20) (undo-tree-id11905 . -20) (undo-tree-id11907 . -20) (#("///" 0 2 (fontified nil face font-lock-comment-delimiter-face) 2 3 (fontified nil face font-lock-doc-face)) . 426) (428 . 429) (#(" " 0 1 (fontified t face font-lock-comment-delimiter-face)) . 428)) (23740 45188 475186 798000) 0 nil]) ((1 . 1226) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
tokio::run(connect.and_then(|con| {
    redis::cmd(\"SET\")
        .arg(\"key1\")
        .arg(b\"foo\")
        // `query_async` acts in the same way as `query` but requires the connection to be
        // taken by value as the method returns a `Future` instead of `Result`.
        // This connection will be returned after the future has been completed allowing it to
        // be used again.
        .query_async(con)
        .and_then(|(con, ())| {
            redis::cmd(\"SET\").arg(&[\"key2\", \"bar\"]).query_async(con)
        })
        .and_then(|(con, ())| {
            redis::cmd(\"MGET\")
                .arg(&[\"key1\", \"key2\"])
                .query_async(con)
                .map(|t| t.1)
        })
}).then(|result| {
    assert_eq!(result, Ok((\"foo\".to_string(), b\"bar\".to_vec())));
    Ok(())
}));}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 165 (fontified t) 165 170 (fontified t face font-lock-constant-face) 170 205 (fontified t) 205 210 (fontified t face font-lock-constant-face) 210 216 (fontified t) 216 221 (fontified t face font-lock-string-face) 221 236 (fontified t) 236 242 (fontified t face font-lock-string-face) 242 258 (fontified t) 258 263 (fontified t face font-lock-string-face) 263 273 (fontified t) 273 276 (fontified t face font-lock-comment-delimiter-face) 276 356 (fontified t face font-lock-comment-face) 356 364 (fontified t) 364 367 (fontified t face font-lock-comment-delimiter-face) 367 436 (fontified t face font-lock-comment-face) 436 444 (fontified t) 444 447 (fontified t face font-lock-comment-delimiter-face) 447 500 (fontified t face font-lock-comment-face) 500 531 (fontified t face font-lock-comment-face) 531 539 (fontified t) 539 542 (fontified t face font-lock-comment-delimiter-face) 542 557 (fontified t face font-lock-comment-face) 557 627 (fontified t) 627 632 (fontified t face font-lock-constant-face) 632 638 (fontified t) 638 643 (fontified t face font-lock-string-face) 643 651 (fontified t) 651 657 (fontified t face font-lock-string-face) 657 659 (fontified t) 659 662 (fontified t face font-lock-string-face) 662 663 (fontified t syntax-table #1# face font-lock-string-face) 663 664 (fontified t face font-lock-string-face) 664 665 (fontified t) 665 684 (fontified t) 684 739 (fontified t) 739 744 (fontified t face font-lock-constant-face) 744 750 (fontified t) 750 756 (fontified t face font-lock-string-face) 756 781 (fontified t) 781 787 (fontified t face font-lock-string-face) 787 789 (fontified t) 789 795 (fontified t face font-lock-string-face) 795 896 (fontified t) 896 906 (fontified t face font-lock-preprocessor-face) 906 915 (fontified t) 915 917 (fontified t face font-lock-type-face) 917 919 (fontified t) 919 924 (fontified t face font-lock-string-face) 924 939 (fontified t) 939 942 (fontified t face font-lock-string-face) 942 943 (fontified t syntax-table #1# face font-lock-string-face) 943 944 (fontified t face font-lock-string-face) 944 962 (fontified t) 962 964 (fontified t face font-lock-type-face) 964 969 (fontified t) 969 972 (fontified t) 972 973 (fontified t rear-nonsticky t) 973 975 (fontified t)) . 1) (undo-tree-id12772 . -165) (undo-tree-id12773 . -165) (undo-tree-id12774 . -972) (undo-tree-id12775 . -165) (undo-tree-id12776 . 2) (undo-tree-id12777 . -165) (undo-tree-id12778 . -165) (undo-tree-id12779 . -165) (undo-tree-id12780 . -165) (undo-tree-id12781 . -165) (undo-tree-id12782 . -165) (undo-tree-id12783 . -972) (undo-tree-id12784 . -165) (undo-tree-id12785 . -165) (undo-tree-id12786 . -165) (undo-tree-id12787 . -165) (undo-tree-id12788 . -972) (undo-tree-id12789 . -165) (undo-tree-id12790 . -972) (undo-tree-id12791 . -15) (undo-tree-id12792 . -32) (undo-tree-id12793 . -124) (undo-tree-id12794 . -131)) ((1 . 976) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|con| {
                redis::cmd(\"SET\")
                    .arg(\"key1\")
                    .arg(b\"foo\")
                    // `query_async` acts in the same way as `query` but requires the connection to be
                    // taken by value as the method returns a `Future` instead of `Result`.
                    // This connection will be returned after the future has been completed allowing it to
                    // be used again.
                    .query_async(con)
                    .and_then(|(con, ())| redis::cmd(\"SET\").arg(&[\"key2\", \"bar\"]).query_async(con))
                    .and_then(|(con, ())| {
                        redis::cmd(\"MGET\")
                            .arg(&[\"key1\", \"key2\"])
                            .query_async(con)
                            .map(|t| t.1)
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok((\"foo\".to_string(), b\"bar\".to_vec())));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 243 (fontified t) 243 248 (fontified t face font-lock-constant-face) 248 254 (fontified t) 254 259 (fontified t face font-lock-string-face) 259 286 (fontified t) 286 292 (fontified t face font-lock-string-face) 292 320 (fontified t) 320 325 (fontified t face font-lock-string-face) 325 327 (fontified t) 327 343 (fontified t) 343 347 (fontified t) 347 350 (fontified t face font-lock-comment-delimiter-face) 350 408 (fontified t face font-lock-comment-face) 408 409 (fontified t face font-lock-comment-face) 409 429 (fontified t face font-lock-comment-face) 429 430 (fontified t face font-lock-comment-face) 430 450 (fontified t) 450 452 (fontified t face font-lock-comment-delimiter-face) 452 453 (fontified t face font-lock-comment-delimiter-face) 453 489 (fontified t face font-lock-comment-face) 489 490 (fontified t face font-lock-comment-face) 490 493 (fontified t face font-lock-comment-face) 493 499 (fontified t face font-lock-comment-face) 499 510 (fontified t face font-lock-comment-face) 510 513 (fontified t face font-lock-comment-face) 513 519 (fontified t face font-lock-comment-face) 519 521 (fontified t face font-lock-comment-face) 521 522 (fontified t face font-lock-comment-face) 522 542 (fontified t) 542 544 (fontified t face font-lock-comment-delimiter-face) 544 545 (fontified t face font-lock-comment-delimiter-face) 545 568 (fontified t face font-lock-comment-face) 568 569 (fontified t face font-lock-comment-face) 569 629 (fontified t face font-lock-comment-face) 629 649 (fontified t) 649 652 (fontified t face font-lock-comment-delimiter-face) 652 667 (fontified t face font-lock-comment-face) 667 747 (fontified t) 747 752 (fontified t face font-lock-constant-face) 752 758 (fontified t) 758 763 (fontified t face font-lock-string-face) 763 771 (fontified t) 771 777 (fontified t face font-lock-string-face) 777 779 (fontified t) 779 782 (fontified t face font-lock-string-face) 782 783 (fontified t face font-lock-string-face syntax-table #1#) 783 784 (fontified t face font-lock-string-face) 784 873 (fontified t) 873 878 (fontified t face font-lock-constant-face) 878 884 (fontified t) 884 886 (fontified t face font-lock-string-face) 886 890 (fontified t face font-lock-string-face) 890 892 (fontified t) 892 927 (fontified t) 927 930 (fontified t face font-lock-string-face) 930 933 (fontified t face font-lock-string-face) 933 935 (fontified t) 935 941 (fontified t face font-lock-string-face) 941 944 (fontified t) 944 1022 (fontified t) 1022 1032 (fontified t) 1032 1115 (fontified t) 1115 1125 (fontified t face font-lock-preprocessor-face) 1125 1129 (fontified t) 1129 1134 (fontified t) 1134 1136 (face font-lock-type-face fontified t) 1136 1138 (fontified t) 1138 1143 (face font-lock-string-face fontified t) 1143 1158 (fontified t) 1158 1161 (face font-lock-string-face fontified t) 1161 1162 (face font-lock-string-face fontified t syntax-table #1#) 1162 1163 (face font-lock-string-face fontified t) 1163 1177 (fontified t) 1177 1193 (fontified t) 1193 1195 (fontified t face font-lock-type-face) 1195 1199 (fontified t) 1199 1225 (fontified t)) . 1) (undo-tree-id11908 . -568) (undo-tree-id11909 . 656) (undo-tree-id11910 . -1180) (undo-tree-id11911 . -1180) (undo-tree-id11912 . -1180) (undo-tree-id11913 . -1180) (undo-tree-id11914 . 868) (undo-tree-id11915 . -362) (undo-tree-id11916 . -568) (undo-tree-id11917 . -568) (undo-tree-id11919 . -568) (undo-tree-id11921 . -568) (undo-tree-id11923 . -568) (undo-tree-id11925 . -521) (undo-tree-id11927 . -521) (undo-tree-id11929 . -568) (undo-tree-id11931 . -521) (undo-tree-id11933 . -521) (undo-tree-id11935 . -521) (undo-tree-id11937 . -489) (undo-tree-id11939 . -520) (undo-tree-id11941 . -520) (undo-tree-id11943 . -521) (undo-tree-id11945 . -520) (undo-tree-id11947 . -520) (undo-tree-id11949 . -520) (undo-tree-id11951 . -519) (undo-tree-id11953 . -519) (undo-tree-id11955 . -519) (undo-tree-id11957 . -325) (undo-tree-id11959 . -519) (undo-tree-id11961 . -519) (undo-tree-id11963 . -519) (undo-tree-id11965 . -519) (undo-tree-id11967 . -512) (undo-tree-id11969 . -499) (undo-tree-id11971 . -492) (undo-tree-id11973 . -512) (undo-tree-id11975 . -512) (undo-tree-id11977 . -519) (undo-tree-id11979 . -489) (undo-tree-id11981 . -489) (undo-tree-id11983 . -520) (undo-tree-id11985 . -489) (undo-tree-id11987 . -489) (undo-tree-id11989 . -489) (undo-tree-id11991 . -489) (undo-tree-id11993 . -489) (undo-tree-id11995 . -489) (undo-tree-id11997 . -489) (undo-tree-id11999 . -489) (undo-tree-id12001 . -489) (undo-tree-id12003 . -429) (undo-tree-id12005 . -429) (undo-tree-id12007 . -489) (undo-tree-id12009 . -429) (undo-tree-id12011 . -429) (undo-tree-id12013 . -429) (undo-tree-id12015 . -408) (undo-tree-id12017 . -408) (undo-tree-id12019 . -429) (undo-tree-id12021 . -408) (undo-tree-id12023 . -408) (undo-tree-id12025 . -408) (undo-tree-id12027 . -327) (undo-tree-id12029 . -327) (undo-tree-id12031 . -408) (undo-tree-id12033 . -327) (undo-tree-id12035 . -327) (undo-tree-id12037 . -327) (undo-tree-id12039 . -353) (undo-tree-id12041 . -353) (undo-tree-id12043 . -327) (undo-tree-id12045 . -353) (undo-tree-id12047 . -353) (undo-tree-id12049 . -353) (undo-tree-id12051 . -408) (undo-tree-id12053 . -408) (undo-tree-id12055 . -353) (undo-tree-id12057 . -408) (undo-tree-id12059 . -408) (undo-tree-id12060 . -408) (undo-tree-id12062 . -353) (undo-tree-id12064 . -353) (t 23740 45064 410700 331000)) (23740 45188 436257 135000) 0 nil]) ((nil rear-nonsticky nil 973 . 974) (nil fontified nil 166 . 171) (nil fontified nil 171 . 206) (nil fontified nil 206 . 211) (nil fontified nil 211 . 217) (nil fontified nil 217 . 222) (nil fontified nil 222 . 237) (nil fontified nil 237 . 243) (nil fontified nil 243 . 259) (nil fontified nil 259 . 264) (nil fontified nil 264 . 274) (nil fontified nil 274 . 277) (nil fontified nil 277 . 357) (nil fontified nil 357 . 365) (nil fontified nil 365 . 368) (nil fontified nil 368 . 437) (nil fontified nil 437 . 445) (nil fontified nil 445 . 448) (nil fontified nil 448 . 501) (nil fontified nil 501 . 532) (nil fontified nil 532 . 540) (nil fontified nil 540 . 543) (nil fontified nil 543 . 558) (nil fontified nil 558 . 628) (nil fontified nil 628 . 633) (nil fontified nil 633 . 639) (nil fontified nil 639 . 644) (nil fontified nil 644 . 652) (nil fontified nil 652 . 658) (nil fontified nil 658 . 660) (nil fontified nil 660 . 663) (nil fontified nil 663 . 664) (nil fontified nil 664 . 665) (nil fontified nil 665 . 666) (nil fontified nil 666 . 685) (nil fontified nil 685 . 740) (nil fontified nil 740 . 745) (nil fontified nil 745 . 751) (nil fontified nil 751 . 757) (nil fontified nil 757 . 782) (nil fontified nil 782 . 788) (nil fontified nil 788 . 790) (nil fontified nil 790 . 796) (nil fontified nil 796 . 897) (nil fontified nil 897 . 907) (nil fontified nil 907 . 916) (nil fontified nil 916 . 918) (nil fontified nil 918 . 920) (nil fontified nil 920 . 925) (nil fontified nil 925 . 940) (nil fontified nil 940 . 943) (nil fontified nil 943 . 944) (nil fontified nil 944 . 945) (nil fontified nil 945 . 963) (nil fontified nil 963 . 965) (nil fontified nil 965 . 970) (166 . 974) (#("    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection.read_response().and_then(|res| {
                            let value = res.1;
                            println!(\"{:?}\", value);
                            println!(\"dong\");
                            Ok(())
                        })
                    })
                    .and_then(|res| res)
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                println!(\"ding\");
                Ok(())
            }),
    );
" 0 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 85 (fontified t) 85 90 (fontified t face font-lock-constant-face) 90 96 (fontified t) 96 107 (fontified t face font-lock-string-face) 107 134 (fontified t) 134 154 (fontified t face font-lock-string-face) 154 345 (fontified t) 345 347 (fontified t) 347 350 (fontified t face font-lock-keyword-face) 350 351 (fontified t) 351 356 (fontified t face font-lock-variable-name-face) 356 366 (fontified t) 366 394 (fontified t) 394 402 (fontified t face rust-builtin-formatting-macro-face) 402 403 (fontified t) 403 404 (fontified t face font-lock-string-face) 404 408 (fontified t face rust-string-interpolation-face) 408 409 (fontified t face font-lock-string-face) 409 447 (fontified t) 447 455 (fontified t face rust-builtin-formatting-macro-face) 455 456 (fontified t) 456 462 (fontified t face font-lock-string-face) 462 493 (fontified t) 493 495 (fontified t face font-lock-type-face) 495 500 (fontified t) 500 527 (fontified t) 527 549 (fontified t) 549 651 (fontified t) 651 661 (fontified t face font-lock-preprocessor-face) 661 670 (fontified t) 670 672 (fontified t face font-lock-type-face) 672 695 (fontified t) 695 703 (fontified t face rust-builtin-formatting-macro-face) 703 704 (fontified t) 704 710 (fontified t face font-lock-string-face) 710 729 (fontified t) 729 731 (fontified t face font-lock-type-face) 731 759 (fontified t)) . 166) (undo-tree-id12208 . -134) (undo-tree-id12209 . -69) (undo-tree-id12210 . 603) (undo-tree-id12211 . -134) (undo-tree-id12212 . -94) (undo-tree-id12213 . -177) (undo-tree-id12214 . -188) (undo-tree-id12215 . -177) (undo-tree-id12216 . -188) (undo-tree-id12217 . -752) (undo-tree-id12218 . -759) (undo-tree-id12219 . -752) (undo-tree-id12220 . -752) (undo-tree-id12221 . -759) (undo-tree-id12222 . -752) (undo-tree-id12223 . -759) (undo-tree-id12224 . -736) (undo-tree-id12225 . -752) (undo-tree-id12226 . -736) (undo-tree-id12227 . -736) (undo-tree-id12228 . -752) (undo-tree-id12229 . -736) (undo-tree-id12230 . -736) (undo-tree-id12231 . -752) (undo-tree-id12232 . -736) (undo-tree-id12233 . -752) (undo-tree-id12234 . -736) (undo-tree-id12235 . -752) (undo-tree-id12236 . -713) (undo-tree-id12237 . -736) (undo-tree-id12238 . -713) (undo-tree-id12239 . -713) (undo-tree-id12240 . -736) (undo-tree-id12241 . -713) (undo-tree-id12242 . -713) (undo-tree-id12243 . -736) (undo-tree-id12244 . -713) (undo-tree-id12245 . -736) (undo-tree-id12246 . -713) (undo-tree-id12247 . -736) (undo-tree-id12248 . -679) (undo-tree-id12249 . -713) (undo-tree-id12250 . -679) (undo-tree-id12251 . -679) (undo-tree-id12252 . -713) (undo-tree-id12253 . -679) (undo-tree-id12254 . -679) (undo-tree-id12255 . -713) (undo-tree-id12256 . -679) (undo-tree-id12257 . -713) (undo-tree-id12258 . -679) (undo-tree-id12259 . -713) (undo-tree-id12260 . -635) (undo-tree-id12261 . -679) (undo-tree-id12262 . -635) (undo-tree-id12263 . -635) (undo-tree-id12264 . -679) (undo-tree-id12265 . -635) (undo-tree-id12266 . -635) (undo-tree-id12267 . -679) (undo-tree-id12268 . -635) (undo-tree-id12269 . -679) (undo-tree-id12270 . -635) (undo-tree-id12271 . -679) (undo-tree-id12272 . -606) (undo-tree-id12273 . -635) (undo-tree-id12274 . -606) (undo-tree-id12275 . -606) (undo-tree-id12276 . -635) (undo-tree-id12277 . -606) (undo-tree-id12278 . -606) (undo-tree-id12279 . -635) (undo-tree-id12280 . -606) (undo-tree-id12281 . -635) (undo-tree-id12282 . -606) (undo-tree-id12283 . -635) (undo-tree-id12284 . -591) (undo-tree-id12285 . -606) (undo-tree-id12286 . -591) (undo-tree-id12287 . -591) (undo-tree-id12288 . -606) (undo-tree-id12289 . -591) (undo-tree-id12290 . -591) (undo-tree-id12291 . -606) (undo-tree-id12292 . -591) (undo-tree-id12293 . -606) (undo-tree-id12294 . -591) (undo-tree-id12295 . -606) (undo-tree-id12296 . -550) (undo-tree-id12297 . -591) (undo-tree-id12298 . -550) (undo-tree-id12299 . -550) (undo-tree-id12300 . -591) (undo-tree-id12301 . -550) (undo-tree-id12302 . -550) (undo-tree-id12303 . -591) (undo-tree-id12304 . -550) (undo-tree-id12305 . -591) (undo-tree-id12306 . -550) (undo-tree-id12307 . -591) (undo-tree-id12308 . -527) (undo-tree-id12309 . -550) (undo-tree-id12310 . -527) (undo-tree-id12311 . -527) (undo-tree-id12312 . -550) (undo-tree-id12313 . -527) (undo-tree-id12314 . -527) (undo-tree-id12315 . -550) (undo-tree-id12316 . -527) (undo-tree-id12317 . -550) (undo-tree-id12318 . -527) (undo-tree-id12319 . -550) (undo-tree-id12320 . -500) (undo-tree-id12321 . -527) (undo-tree-id12322 . -500) (undo-tree-id12323 . -500) (undo-tree-id12324 . -527) (undo-tree-id12325 . -500) (undo-tree-id12326 . -500) (undo-tree-id12327 . -527) (undo-tree-id12328 . -500) (undo-tree-id12329 . -527) (undo-tree-id12330 . -500) (undo-tree-id12331 . -527) (undo-tree-id12332 . -465) (undo-tree-id12333 . -500) (undo-tree-id12334 . -465) (undo-tree-id12335 . -465) (undo-tree-id12336 . -500) (undo-tree-id12337 . -465) (undo-tree-id12338 . -465) (undo-tree-id12339 . -500) (undo-tree-id12340 . -465) (undo-tree-id12341 . -500) (undo-tree-id12342 . -465) (undo-tree-id12343 . -500) (undo-tree-id12344 . -419) (undo-tree-id12345 . -465) (undo-tree-id12346 . -419) (undo-tree-id12347 . -419) (undo-tree-id12348 . -465) (undo-tree-id12349 . -419) (undo-tree-id12350 . -419) (undo-tree-id12351 . -465) (undo-tree-id12352 . -419) (undo-tree-id12353 . -465) (undo-tree-id12354 . -419) (undo-tree-id12355 . -465) (undo-tree-id12356 . -366) (undo-tree-id12357 . -419) (undo-tree-id12358 . -366) (undo-tree-id12359 . -366) (undo-tree-id12360 . -419) (undo-tree-id12361 . -366) (undo-tree-id12362 . -366) (undo-tree-id12363 . -419) (undo-tree-id12364 . -366) (undo-tree-id12365 . -419) (undo-tree-id12366 . -366) (undo-tree-id12367 . -419) (undo-tree-id12368 . -319) (undo-tree-id12369 . -366) (undo-tree-id12370 . -319) (undo-tree-id12371 . -319) (undo-tree-id12372 . -366) (undo-tree-id12373 . -319) (undo-tree-id12374 . -319) (undo-tree-id12375 . -366) (undo-tree-id12376 . -319) (undo-tree-id12377 . -366) (undo-tree-id12378 . -319) (undo-tree-id12379 . -366) (undo-tree-id12380 . -251) (undo-tree-id12381 . -319) (undo-tree-id12382 . -251) (undo-tree-id12383 . -251) (undo-tree-id12384 . -319) (undo-tree-id12385 . -251) (undo-tree-id12386 . -251) (undo-tree-id12387 . -319) (undo-tree-id12388 . -251) (undo-tree-id12389 . -319) (undo-tree-id12390 . -251) (undo-tree-id12391 . -319) (undo-tree-id12392 . -201) (undo-tree-id12393 . -251) (undo-tree-id12394 . -201) (undo-tree-id12395 . -201) (undo-tree-id12396 . -251) (undo-tree-id12397 . -201) (undo-tree-id12398 . -201) (undo-tree-id12399 . -251) (undo-tree-id12400 . -201) (undo-tree-id12401 . -251) (undo-tree-id12402 . -201) (undo-tree-id12403 . -251) (undo-tree-id12404 . -156) (undo-tree-id12405 . -201) (undo-tree-id12406 . -156) (undo-tree-id12407 . -156) (undo-tree-id12408 . -201) (undo-tree-id12409 . -156) (undo-tree-id12410 . -156) (undo-tree-id12411 . -201) (undo-tree-id12412 . -156) (undo-tree-id12413 . -201) (undo-tree-id12414 . -156) (undo-tree-id12415 . -201) (undo-tree-id12416 . -109) (undo-tree-id12417 . -156) (undo-tree-id12418 . -109) (undo-tree-id12419 . -109) (undo-tree-id12420 . -156) (undo-tree-id12421 . -109) (undo-tree-id12422 . -109) (undo-tree-id12423 . -156) (undo-tree-id12424 . -109) (undo-tree-id12425 . -156) (undo-tree-id12426 . -109) (undo-tree-id12427 . -156) (undo-tree-id12428 . -110) (undo-tree-id12429 . -109) (undo-tree-id12430 . -110) (undo-tree-id12431 . -110) (undo-tree-id12432 . -109) (undo-tree-id12433 . -110) (undo-tree-id12434 . -110) (undo-tree-id12435 . -109) (undo-tree-id12436 . -110) (undo-tree-id12437 . -109) (undo-tree-id12438 . -110) (undo-tree-id12439 . -109) (undo-tree-id12440 . -111) (undo-tree-id12441 . -110) (undo-tree-id12442 . -111) (undo-tree-id12443 . -111) (undo-tree-id12444 . -110) (undo-tree-id12445 . -111) (undo-tree-id12446 . -111) (undo-tree-id12447 . -110) (undo-tree-id12448 . -111) (undo-tree-id12449 . -110) (undo-tree-id12450 . -111) (undo-tree-id12451 . -110) (undo-tree-id12452 . -112) (undo-tree-id12453 . -111) (undo-tree-id12454 . -112) (undo-tree-id12455 . -112) (undo-tree-id12456 . -111) (undo-tree-id12457 . -112) (undo-tree-id12458 . -112) (undo-tree-id12459 . -111) (undo-tree-id12460 . -112) (undo-tree-id12461 . -111) (undo-tree-id12462 . -112) (undo-tree-id12463 . -111) (undo-tree-id12464 . -113) (undo-tree-id12465 . -112) (undo-tree-id12466 . -113) (undo-tree-id12467 . -113) (undo-tree-id12468 . -112) (undo-tree-id12469 . -113) (undo-tree-id12470 . -113) (undo-tree-id12471 . -112) (undo-tree-id12472 . -113) (undo-tree-id12473 . -112) (undo-tree-id12474 . -113) (undo-tree-id12475 . -112) (undo-tree-id12476 . -114) (undo-tree-id12477 . -113) (undo-tree-id12478 . -114) (undo-tree-id12479 . -114) (undo-tree-id12480 . -113) (undo-tree-id12481 . -114) (undo-tree-id12482 . -114) (undo-tree-id12483 . -113) (undo-tree-id12484 . -114) (undo-tree-id12485 . -113) (undo-tree-id12486 . -114) (undo-tree-id12487 . -113) (undo-tree-id12488 . -115) (undo-tree-id12489 . -114) (undo-tree-id12490 . -115) (undo-tree-id12491 . -115) (undo-tree-id12492 . -114) (undo-tree-id12493 . -115) (undo-tree-id12494 . -115) (undo-tree-id12495 . -114) (undo-tree-id12496 . -115) (undo-tree-id12497 . -114) (undo-tree-id12498 . -115) (undo-tree-id12499 . -114) (undo-tree-id12500 . -116) (undo-tree-id12501 . -115) (undo-tree-id12502 . -116) (undo-tree-id12503 . -116) (undo-tree-id12504 . -115) (undo-tree-id12505 . -116) (undo-tree-id12506 . -116) (undo-tree-id12507 . -115) (undo-tree-id12508 . -116) (undo-tree-id12509 . -115) (undo-tree-id12510 . -116) (undo-tree-id12511 . -115) (undo-tree-id12512 . -117) (undo-tree-id12513 . -116) (undo-tree-id12514 . -117) (undo-tree-id12515 . -117) (undo-tree-id12516 . -116) (undo-tree-id12517 . -117) (undo-tree-id12518 . -117) (undo-tree-id12519 . -116) (undo-tree-id12520 . -117) (undo-tree-id12521 . -116) (undo-tree-id12522 . -117) (undo-tree-id12523 . -116) (undo-tree-id12524 . -118) (undo-tree-id12525 . -117) (undo-tree-id12526 . -118) (undo-tree-id12527 . -118) (undo-tree-id12528 . -117) (undo-tree-id12529 . -118) (undo-tree-id12530 . -118) (undo-tree-id12531 . -117) (undo-tree-id12532 . -118) (undo-tree-id12533 . -117) (undo-tree-id12534 . -118) (undo-tree-id12535 . -117) (undo-tree-id12536 . -119) (undo-tree-id12537 . -118) (undo-tree-id12538 . -119) (undo-tree-id12539 . -119) (undo-tree-id12540 . -118) (undo-tree-id12541 . -119) (undo-tree-id12542 . -119) (undo-tree-id12543 . -118) (undo-tree-id12544 . -119) (undo-tree-id12545 . -118) (undo-tree-id12546 . -119) (undo-tree-id12547 . -118) (undo-tree-id12548 . -120) (undo-tree-id12549 . -119) (undo-tree-id12550 . -120) (undo-tree-id12551 . -120) (undo-tree-id12552 . -119) (undo-tree-id12553 . -120) (undo-tree-id12554 . -120) (undo-tree-id12555 . -119) (undo-tree-id12556 . -120) (undo-tree-id12557 . -119) (undo-tree-id12558 . -120) (undo-tree-id12559 . -119) (undo-tree-id12560 . -121) (undo-tree-id12561 . -120) (undo-tree-id12562 . -121) (undo-tree-id12563 . -121) (undo-tree-id12564 . -120) (undo-tree-id12565 . -121) (undo-tree-id12566 . -121) (undo-tree-id12567 . -120) (undo-tree-id12568 . -121) (undo-tree-id12569 . -120) (undo-tree-id12570 . -121) (undo-tree-id12571 . -120) (undo-tree-id12572 . -122) (undo-tree-id12573 . -121) (undo-tree-id12574 . -122) (undo-tree-id12575 . -122) (undo-tree-id12576 . -121) (undo-tree-id12577 . -122) (undo-tree-id12578 . -122) (undo-tree-id12579 . -121) (undo-tree-id12580 . -122) (undo-tree-id12581 . -121) (undo-tree-id12582 . -122) (undo-tree-id12583 . -121) (undo-tree-id12584 . -123) (undo-tree-id12585 . -122) (undo-tree-id12586 . -123) (undo-tree-id12587 . -123) (undo-tree-id12588 . -122) (undo-tree-id12589 . -123) (undo-tree-id12590 . -123) (undo-tree-id12591 . -122) (undo-tree-id12592 . -123) (undo-tree-id12593 . -122) (undo-tree-id12594 . -123) (undo-tree-id12595 . -122) (undo-tree-id12596 . -124) (undo-tree-id12597 . -123) (undo-tree-id12598 . -124) (undo-tree-id12599 . -124) (undo-tree-id12600 . -123) (undo-tree-id12601 . -124) (undo-tree-id12602 . -124) (undo-tree-id12603 . -123) (undo-tree-id12604 . -124) (undo-tree-id12605 . -123) (undo-tree-id12606 . -124) (undo-tree-id12607 . -123) (undo-tree-id12608 . -125) (undo-tree-id12609 . -124) (undo-tree-id12610 . -125) (undo-tree-id12611 . -125) (undo-tree-id12612 . -124) (undo-tree-id12613 . -125) (undo-tree-id12614 . -125) (undo-tree-id12615 . -124) (undo-tree-id12616 . -125) (undo-tree-id12617 . -124) (undo-tree-id12618 . -125) (undo-tree-id12619 . -124) (undo-tree-id12620 . -126) (undo-tree-id12621 . -125) (undo-tree-id12622 . -126) (undo-tree-id12623 . -126) (undo-tree-id12624 . -125) (undo-tree-id12625 . -126) (undo-tree-id12626 . -126) (undo-tree-id12627 . -125) (undo-tree-id12628 . -126) (undo-tree-id12629 . -125) (undo-tree-id12630 . -126) (undo-tree-id12631 . -125) (undo-tree-id12632 . -127) (undo-tree-id12633 . -126) (undo-tree-id12634 . -127) (undo-tree-id12635 . -127) (undo-tree-id12636 . -126) (undo-tree-id12637 . -127) (undo-tree-id12638 . -127) (undo-tree-id12639 . -126) (undo-tree-id12640 . -127) (undo-tree-id12641 . -126) (undo-tree-id12642 . -127) (undo-tree-id12643 . -126) (undo-tree-id12644 . -128) (undo-tree-id12645 . -127) (undo-tree-id12646 . -128) (undo-tree-id12647 . -128) (undo-tree-id12648 . -127) (undo-tree-id12649 . -128) (undo-tree-id12650 . -128) (undo-tree-id12651 . -127) (undo-tree-id12652 . -128) (undo-tree-id12653 . -127) (undo-tree-id12654 . -128) (undo-tree-id12655 . -127) (undo-tree-id12656 . -129) (undo-tree-id12657 . -128) (undo-tree-id12658 . -129) (undo-tree-id12659 . -129) (undo-tree-id12660 . -128) (undo-tree-id12661 . -129) (undo-tree-id12662 . -129) (undo-tree-id12663 . -128) (undo-tree-id12664 . -129) (undo-tree-id12665 . -128) (undo-tree-id12666 . -129) (undo-tree-id12667 . -128) (undo-tree-id12668 . -130) (undo-tree-id12669 . -129) (undo-tree-id12670 . -130) (undo-tree-id12671 . -130) (undo-tree-id12672 . -129) (undo-tree-id12673 . -130) (undo-tree-id12674 . -130) (undo-tree-id12675 . -129) (undo-tree-id12676 . -130) (undo-tree-id12677 . -129) (undo-tree-id12678 . -130) (undo-tree-id12679 . -129) (undo-tree-id12680 . -131) (undo-tree-id12681 . -130) (undo-tree-id12682 . -131) (undo-tree-id12683 . -131) (undo-tree-id12684 . -130) (undo-tree-id12685 . -131) (undo-tree-id12686 . -131) (undo-tree-id12687 . -130) (undo-tree-id12688 . -131) (undo-tree-id12689 . -130) (undo-tree-id12690 . -131) (undo-tree-id12691 . -130) (undo-tree-id12692 . -132) (undo-tree-id12693 . -131) (undo-tree-id12694 . -132) (undo-tree-id12695 . -132) (undo-tree-id12696 . -131) (undo-tree-id12697 . -132) (undo-tree-id12698 . -132) (undo-tree-id12699 . -131) (undo-tree-id12700 . -132) (undo-tree-id12701 . -131) (undo-tree-id12702 . -132) (undo-tree-id12703 . -131) (undo-tree-id12704 . -133) (undo-tree-id12705 . -132) (undo-tree-id12706 . -133) (undo-tree-id12707 . -133) (undo-tree-id12708 . -132) (undo-tree-id12709 . -133) (undo-tree-id12710 . -133) (undo-tree-id12711 . -132) (undo-tree-id12712 . -133) (undo-tree-id12713 . -132) (undo-tree-id12714 . -133) (undo-tree-id12715 . -132) (undo-tree-id12716 . -134) (undo-tree-id12717 . -133) (undo-tree-id12718 . -134) (undo-tree-id12719 . -134) (undo-tree-id12720 . -133) (undo-tree-id12721 . -134) (undo-tree-id12722 . -134) (undo-tree-id12723 . -133) (undo-tree-id12724 . -134) (undo-tree-id12725 . -133) (undo-tree-id12726 . -134) (undo-tree-id12727 . -133) (undo-tree-id12728 . -134) (undo-tree-id12729 . -134) (undo-tree-id12730 . -134) (undo-tree-id12731 . -134) (undo-tree-id12732 . -134) (undo-tree-id12733 . -134) (undo-tree-id12734 . -134) (undo-tree-id12735 . -134) (undo-tree-id12736 . -134) (undo-tree-id12737 . -134) (undo-tree-id12738 . -134) (undo-tree-id12739 . -134) (undo-tree-id12740 . -94) (undo-tree-id12741 . -134) (undo-tree-id12742 . -94) (undo-tree-id12743 . -94) (undo-tree-id12744 . -134) (undo-tree-id12745 . -94) (undo-tree-id12746 . -94) (undo-tree-id12747 . -134) (undo-tree-id12748 . -94) (undo-tree-id12749 . -134) (undo-tree-id12750 . -94) (undo-tree-id12751 . -134) (undo-tree-id12752 . -92) (undo-tree-id12753 . -95) (undo-tree-id12754 . -94) (undo-tree-id12755 . -94) (undo-tree-id12756 . -94) (undo-tree-id12757 . -94) (undo-tree-id12758 . -94) (undo-tree-id12759 . -94) (undo-tree-id12760 . -94) (undo-tree-id12761 . -94) (undo-tree-id12762 . -94) (undo-tree-id12763 . -94) (undo-tree-id12764 . -94) (undo-tree-id12765 . -94) (undo-tree-id12766 . -94) (undo-tree-id12767 . -94) (undo-tree-id12768 . -94) (undo-tree-id12769 . -94) (undo-tree-id12770 . -94) (undo-tree-id12771 . -94)) ((166 . 925) (#("tokio::run(connect.and_then(|con| {
    redis::cmd(\"SET\")
        .arg(\"key1\")
        .arg(b\"foo\")
        // `query_async` acts in the same way as `query` but requires the connection to be
        // taken by value as the method returns a `Future` instead of `Result`.
        // This connection will be returned after the future has been completed allowing it to
        // be used again.
        .query_async(con)
        .and_then(|(con, ())| {
            redis::cmd(\"SET\").arg(&[\"key2\", \"bar\"]).query_async(con)
        })
        .and_then(|(con, ())| {
            redis::cmd(\"MGET\")
                .arg(&[\"key1\", \"key2\"])
                .query_async(con)
                .map(|t| t.1)
        })
}).then(|result| {
    assert_eq!(result, Ok((\"foo\".to_string(), b\"bar\".to_vec())));
    Ok(())
}));" 0 5 (fontified nil face font-lock-constant-face) 5 40 (fontified nil) 40 45 (fontified nil face font-lock-constant-face) 45 51 (fontified nil) 51 56 (fontified nil face font-lock-string-face) 56 71 (fontified nil) 71 77 (fontified nil face font-lock-string-face) 77 93 (fontified nil) 93 98 (fontified nil face font-lock-string-face) 98 108 (fontified nil) 108 111 (fontified nil face font-lock-comment-delimiter-face) 111 191 (fontified nil face font-lock-comment-face) 191 199 (fontified nil) 199 202 (fontified nil face font-lock-comment-delimiter-face) 202 271 (fontified nil face font-lock-comment-face) 271 279 (fontified nil) 279 282 (fontified nil face font-lock-comment-delimiter-face) 282 335 (fontified nil face font-lock-comment-face) 335 366 (fontified nil face font-lock-comment-face) 366 374 (fontified nil) 374 377 (fontified nil face font-lock-comment-delimiter-face) 377 392 (fontified nil face font-lock-comment-face) 392 462 (fontified nil) 462 467 (fontified nil face font-lock-constant-face) 467 473 (fontified nil) 473 478 (fontified nil face font-lock-string-face) 478 486 (fontified nil) 486 492 (fontified nil face font-lock-string-face) 492 494 (fontified nil) 494 497 (fontified nil face font-lock-string-face) 497 498 (fontified nil syntax-table #1# face font-lock-string-face) 498 499 (fontified nil face font-lock-string-face) 499 500 (fontified nil) 500 519 (fontified nil) 519 574 (fontified nil) 574 579 (fontified nil face font-lock-constant-face) 579 585 (fontified nil) 585 591 (fontified nil face font-lock-string-face) 591 616 (fontified nil) 616 622 (fontified nil face font-lock-string-face) 622 624 (fontified nil) 624 630 (fontified nil face font-lock-string-face) 630 731 (fontified nil) 731 741 (fontified nil face font-lock-preprocessor-face) 741 750 (fontified nil) 750 752 (fontified nil face font-lock-type-face) 752 754 (fontified nil) 754 759 (fontified nil face font-lock-string-face) 759 774 (fontified nil) 774 777 (fontified nil face font-lock-string-face) 777 778 (fontified nil syntax-table #1# face font-lock-string-face) 778 779 (fontified nil face font-lock-string-face) 779 797 (fontified nil) 797 799 (fontified nil face font-lock-type-face) 799 804 (fontified nil) 804 807 (fontified nil) 807 808 (fontified nil rear-nonsticky nil)) . 166) (undo-tree-id12065 . -807) (undo-tree-id12067 . -807) (undo-tree-id12069 . -807) (undo-tree-id12071 . -807) (undo-tree-id12073 . -807) (undo-tree-id12074 . -807) (undo-tree-id12075 . -807) (undo-tree-id12077 . -807) (undo-tree-id12079 . -807) (undo-tree-id12081 . -807) (undo-tree-id12083 . -807) (undo-tree-id12085 . -807) (undo-tree-id12087 . -807) (undo-tree-id12089 . -779) (undo-tree-id12091 . -779) (undo-tree-id12093 . -807) (undo-tree-id12095 . -807) (undo-tree-id12097 . -806) (undo-tree-id12099 . -803) (undo-tree-id12101 . -802) (undo-tree-id12103 . -801) (undo-tree-id12105 . -800) (undo-tree-id12107 . -791) (undo-tree-id12109 . -790) (undo-tree-id12111 . -789) (undo-tree-id12113 . -788) (undo-tree-id12115 . -787) (undo-tree-id12117 . -771) (undo-tree-id12119 . -770) (undo-tree-id12121 . -754) (undo-tree-id12123 . -753) (undo-tree-id12125 . -742) (undo-tree-id12127 . -716) (undo-tree-id12129 . -710) (undo-tree-id12131 . -707) (undo-tree-id12133 . -696) (undo-tree-id12135 . -688) (undo-tree-id12137 . -666) (undo-tree-id12139 . -662) (undo-tree-id12141 . -632) (undo-tree-id12143 . -614) (undo-tree-id12145 . -592) (undo-tree-id12147 . -585) (undo-tree-id12149 . -558) (undo-tree-id12151 . -557) (undo-tree-id12153 . -556) (undo-tree-id12155 . -550) (undo-tree-id12157 . -548) (undo-tree-id12159 . -529) (undo-tree-id12161 . -518) (undo-tree-id12163 . -514) (undo-tree-id12165 . -501) (undo-tree-id12167 . -484) (undo-tree-id12169 . -479) (undo-tree-id12171 . -473) (undo-tree-id12173 . -446) (undo-tree-id12175 . -445) (undo-tree-id12177 . -444) (undo-tree-id12179 . -438) (undo-tree-id12181 . -436) (undo-tree-id12183 . -417) (undo-tree-id12185 . -413) (undo-tree-id12187 . -99) (undo-tree-id12189 . -92) (undo-tree-id12191 . -78) (undo-tree-id12193 . -71) (undo-tree-id12195 . -57) (undo-tree-id12197 . -51) (undo-tree-id12199 . -28) (undo-tree-id12201 . -11) (undo-tree-id12203 . -11) (undo-tree-id12205 . -806) (undo-tree-id12207 . -807) (nil fontified t 965 . 970) (nil fontified t 963 . 965) (nil fontified t 945 . 963) (nil fontified t 944 . 945) (nil fontified t 943 . 944) (nil fontified t 940 . 943) (nil fontified t 925 . 940) (nil fontified t 920 . 925) (nil fontified t 918 . 920) (nil fontified t 916 . 918) (nil fontified t 907 . 916) (nil fontified t 897 . 907) (nil fontified t 796 . 897) (nil fontified t 790 . 796) (nil fontified t 788 . 790) (nil fontified t 782 . 788) (nil fontified t 757 . 782) (nil fontified t 751 . 757) (nil fontified t 745 . 751) (nil fontified t 740 . 745) (nil fontified t 685 . 740) (nil fontified t 666 . 685) (nil fontified t 665 . 666) (nil fontified t 664 . 665) (nil fontified t 663 . 664) (nil fontified t 660 . 663) (nil fontified t 658 . 660) (nil fontified t 652 . 658) (nil fontified t 644 . 652) (nil fontified t 639 . 644) (nil fontified t 633 . 639) (nil fontified t 628 . 633) (nil fontified t 558 . 628) (nil fontified t 543 . 558) (nil fontified t 540 . 543) (nil fontified t 532 . 540) (nil fontified t 501 . 532) (nil fontified t 448 . 501) (nil fontified t 445 . 448) (nil fontified t 437 . 445) (nil fontified t 368 . 437) (nil fontified t 365 . 368) (nil fontified t 357 . 365) (nil fontified t 277 . 357) (nil fontified t 274 . 277) (nil fontified t 264 . 274) (nil fontified t 259 . 264) (nil fontified t 243 . 259) (nil fontified t 237 . 243) (nil fontified t 222 . 237) (nil fontified t 217 . 222) (nil fontified t 211 . 217) (nil fontified t 206 . 211) (nil fontified t 171 . 206) (nil fontified t 166 . 171) (nil rear-nonsticky t 973 . 974)) (23740 45187 868924 120000) 0 nil]) ((1 . 927) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection
                            .read_response()
                            .and_then(|res| {
                                let value = res.1;
                                println!(\"{:?}\", value);
                                println!(\"dong\");
                                Ok(())
                            })
                           
                    }).and_then(|res| res)
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                println!(\"ding\");
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 416 (fontified t) 416 450 (fontified t) 450 574 (fontified t) 574 577 (fontified t face font-lock-keyword-face) 577 578 (fontified t) 578 583 (fontified t face font-lock-variable-name-face) 583 593 (fontified t) 593 625 (fontified t) 625 626 (fontified t face rust-builtin-formatting-macro-face) 626 633 (fontified t face rust-builtin-formatting-macro-face) 633 634 (fontified t) 634 635 (fontified t face font-lock-string-face) 635 639 (fontified t face rust-string-interpolation-face) 639 640 (fontified t face font-lock-string-face) 640 649 (fontified t) 649 650 (fontified t) 650 682 (fontified t) 682 690 (fontified t face rust-builtin-formatting-macro-face) 690 691 (fontified t) 691 696 (fontified t face font-lock-string-face) 696 697 (fontified t face font-lock-string-face) 697 699 (fontified t) 699 700 (fontified t) 700 732 (fontified t) 732 734 (fontified t face font-lock-type-face) 734 739 (fontified t) 739 769 (fontified t) 769 770 (fontified t) 770 797 (fontified t) 797 798 (fontified t) 798 829 (fontified t) 829 839 (fontified t) 839 840 (fontified t) 840 841 (fontified t) 841 885 (fontified t) 885 901 (fontified t) 901 911 (fontified t face font-lock-preprocessor-face) 911 920 (fontified t) 920 922 (fontified t face font-lock-type-face) 922 928 (fontified t) 928 929 (fontified t) 929 945 (fontified t) 945 953 (fontified t face rust-builtin-formatting-macro-face) 953 954 (fontified t) 954 959 (fontified t face font-lock-string-face) 959 960 (fontified t face font-lock-string-face) 960 962 (fontified t) 962 963 (fontified t) 963 979 (fontified t) 979 980 (fontified t face font-lock-type-face) 980 981 (fontified t face font-lock-type-face) 981 986 (fontified t) 986 1011 (fontified t)) . 1) (undo-tree-id10770 . -626) (undo-tree-id10771 . -626) (undo-tree-id10772 . -626) (undo-tree-id10773 . 172) (undo-tree-id10774 . -698) (undo-tree-id10775 . -698) (undo-tree-id10776 . -698) (undo-tree-id10777 . -698) (undo-tree-id10778 . -444) (undo-tree-id10779 . -479) (undo-tree-id10780 . -905) (undo-tree-id10781 . -906) (undo-tree-id10782 . -829) (undo-tree-id10783 . -829) (undo-tree-id10784 . -829) (undo-tree-id10785 . -829) (undo-tree-id10786 . -829) (undo-tree-id10787 . -829) (undo-tree-id10788 . -829) (undo-tree-id10789 . -830) (undo-tree-id10790 . -829) (undo-tree-id10791 . -830) (undo-tree-id10792 . -830) (undo-tree-id10793 . -829) (undo-tree-id10794 . -830) (undo-tree-id10795 . -830) (undo-tree-id10796 . -829) (undo-tree-id10797 . -830) (undo-tree-id10798 . -829) (undo-tree-id10799 . -830) (undo-tree-id10800 . -829) (undo-tree-id10801 . -831) (undo-tree-id10802 . -830) (undo-tree-id10803 . -831) (undo-tree-id10804 . -831) (undo-tree-id10805 . -830) (undo-tree-id10806 . -831) (undo-tree-id10807 . -831) (undo-tree-id10808 . -830) (undo-tree-id10809 . -831) (undo-tree-id10810 . -830) (undo-tree-id10811 . -831) (undo-tree-id10812 . -830) (undo-tree-id10813 . -831) (undo-tree-id10814 . -831) (undo-tree-id10815 . -831) (undo-tree-id10816 . -831) (undo-tree-id10817 . -831) (undo-tree-id10818 . -831) (undo-tree-id10819 . -831) (undo-tree-id10820 . -840) (undo-tree-id10821 . -831) (undo-tree-id10822 . -831) (undo-tree-id10823 . -831) (undo-tree-id10824 . -831) (undo-tree-id10825 . -831) (undo-tree-id10826 . -831) (undo-tree-id10827 . -831) (undo-tree-id10828 . -831) (undo-tree-id10829 . -832) (undo-tree-id10830 . -831) (undo-tree-id10831 . -832) (undo-tree-id10832 . -832) (undo-tree-id10833 . -831) (undo-tree-id10834 . -832) (undo-tree-id10835 . -832) (undo-tree-id10836 . -831) (undo-tree-id10837 . -832) (undo-tree-id10838 . -831) (undo-tree-id10839 . -832) (undo-tree-id10840 . -831) (undo-tree-id10841 . -833) (undo-tree-id10842 . -832) (undo-tree-id10843 . -833) (undo-tree-id10844 . -833) (undo-tree-id10845 . -832) (undo-tree-id10846 . -833) (undo-tree-id10847 . -833) (undo-tree-id10848 . -832) (undo-tree-id10849 . -833) (undo-tree-id10850 . -832) (undo-tree-id10851 . -833) (undo-tree-id10852 . -832) (undo-tree-id10853 . -834) (undo-tree-id10854 . -833) (undo-tree-id10855 . -834) (undo-tree-id10856 . -834) (undo-tree-id10857 . -833) (undo-tree-id10858 . -834) (undo-tree-id10859 . -834) (undo-tree-id10860 . -833) (undo-tree-id10861 . -834) (undo-tree-id10862 . -833) (undo-tree-id10863 . -834) (undo-tree-id10864 . -833) (undo-tree-id10865 . -835) (undo-tree-id10866 . -834) (undo-tree-id10867 . -835) (undo-tree-id10868 . -835) (undo-tree-id10869 . -834) (undo-tree-id10870 . -835) (undo-tree-id10871 . -835) (undo-tree-id10872 . -834) (undo-tree-id10873 . -835) (undo-tree-id10874 . -834) (undo-tree-id10875 . -835) (undo-tree-id10876 . -834) (undo-tree-id10877 . -836) (undo-tree-id10878 . -835) (undo-tree-id10879 . -836) (undo-tree-id10880 . -836) (undo-tree-id10881 . -835) (undo-tree-id10882 . -836) (undo-tree-id10883 . -836) (undo-tree-id10884 . -835) (undo-tree-id10885 . -836) (undo-tree-id10886 . -835) (undo-tree-id10887 . -836) (undo-tree-id10888 . -835) (undo-tree-id10889 . -834) (undo-tree-id10890 . -835) (undo-tree-id10891 . -835) (undo-tree-id10892 . -836) (undo-tree-id10893 . -837) (undo-tree-id10894 . -836) (undo-tree-id10895 . -837) (undo-tree-id10896 . -837) (undo-tree-id10897 . -836) (undo-tree-id10898 . -837) (undo-tree-id10899 . -837) (undo-tree-id10900 . -836) (undo-tree-id10901 . -837) (undo-tree-id10902 . -836) (undo-tree-id10903 . -837) (undo-tree-id10904 . -836) (undo-tree-id10905 . -838) (undo-tree-id10906 . -837) (undo-tree-id10907 . -838) (undo-tree-id10908 . -838) (undo-tree-id10909 . -837) (undo-tree-id10910 . -838) (undo-tree-id10911 . -838) (undo-tree-id10912 . -837) (undo-tree-id10913 . -838) (undo-tree-id10914 . -837) (undo-tree-id10915 . -838) (undo-tree-id10916 . -837) (undo-tree-id10917 . -836) (undo-tree-id10918 . -837) (undo-tree-id10919 . -836) (undo-tree-id10920 . -837) (undo-tree-id10921 . -839) (undo-tree-id10922 . -838) (undo-tree-id10923 . -839) (undo-tree-id10924 . -839) (undo-tree-id10925 . -838) (undo-tree-id10926 . -839) (undo-tree-id10927 . -839) (undo-tree-id10928 . -838) (undo-tree-id10929 . -839) (undo-tree-id10930 . -838) (undo-tree-id10931 . -839) (undo-tree-id10932 . -838) (undo-tree-id10933 . -836) (undo-tree-id10934 . -838) (undo-tree-id10935 . -342) (undo-tree-id10936 . -353) (undo-tree-id10937 . -838) (undo-tree-id10938 . -838) (undo-tree-id10939 . -838) (undo-tree-id10940 . -838) (undo-tree-id10941 . -838) (undo-tree-id10942 . -838) (undo-tree-id10943 . -838) (undo-tree-id10944 . -838) (undo-tree-id10945 . -838) (undo-tree-id10946 . -838) (undo-tree-id10947 . -838) (undo-tree-id10948 . -838) (undo-tree-id10949 . -342) (undo-tree-id10950 . -353) (undo-tree-id10951 . -342) (undo-tree-id10952 . -353) (undo-tree-id10953 . -796) (undo-tree-id10954 . -838) (undo-tree-id10955 . -796) (undo-tree-id10956 . -796) (undo-tree-id10957 . -838) (undo-tree-id10958 . -796) (undo-tree-id10959 . -796) (undo-tree-id10960 . -838) (undo-tree-id10961 . -796) (undo-tree-id10962 . -796) (undo-tree-id10963 . -796) (undo-tree-id10964 . -838) (undo-tree-id10965 . -796) (undo-tree-id10966 . -838) 797) nil (23740 45178 924394 470000) 0 nil]) ((831 . 840) (830 . 832) (#("(" 0 1 (fontified nil)) . -830) (830 . 831) (#("|" 0 1 (fontified t)) . -830) (undo-tree-id10967 . -1) (undo-tree-id10968 . -1) 831 (830 . 831) (#("()" 0 1 (fontified t) 1 2 (fontified t)) . 830) (undo-tree-id10969 . -1) (undo-tree-id10970 . -1) 831 (830 . 832) (#("(" 0 1 (fontified nil)) . -830) (830 . 831) (#(" " 0 1 (fontified t)) . -830) (undo-tree-id10971 . -1) (undo-tree-id10972 . -1) 831 (827 . 831) (#("e" 0 1 (fontified t)) . -827) (undo-tree-id10973 . -1) (undo-tree-id10974 . -1) 828 (821 . 828)) nil (23740 41472 205422 532000) 0 nil]) ((#("?" 0 1 (fontified t face rust-question-mark-face)) . 770)) nil (23740 41472 205438 497000) 0 nil]) ((#("                        result
" 0 31 (fontified t)) . 800) (undo-tree-id10975 . -29) (undo-tree-id10976 . -29) 829) nil (23740 41472 205453 786000) 0 nil]) ((770 . 771)) nil (23740 41472 205460 428000) 0 nil]) ((#(" .poll();" 0 8 (fontified t) 8 9 (fontified t)) . 798) (t 23740 41345 681841 140000)) nil (23740 41472 205466 553000) 0 nil]) ((699 . 700)) nil (23740 41345 637151 251000) 0 nil]) ((694 . 697) (693 . 694) (692 . 694) (#("\"" 0 1 (fontified nil)) . -692) (692 . 693) (691 . 693) (#("(" 0 1 (fontified nil)) . -691) (683 . 692) (650 . 683) (t 23740 41325 295279 326000) 626) nil (23740 41345 637177 825000) 0 nil] [nil nil ((nil rear-nonsticky nil 633 . 634) (nil fontified nil 627 . 634) (627 . 634) 626 (t 23740 41325 295279 326000)) ((#("let  = " 0 6 (fontified nil) 6 7 (fontified nil rear-nonsticky nil)) . 627) (undo-tree-id10761 . -6) (undo-tree-id10762 . -6) (undo-tree-id10763 . -6) (undo-tree-id10764 . -6) (undo-tree-id10765 . -6) (undo-tree-id10766 . -3) (undo-tree-id10767 . -7) (undo-tree-id10768 . -7) (undo-tree-id10769 . -3) (nil rear-nonsticky t 633 . 634)) (23740 41337 724009 893000) 0 nil]) ((932 . 933)) nil (23740 41337 736517 336000) 0 nil]) ((926 . 930) (925 . 927) (#("\"" 0 1 (fontified nil)) . -925) (925 . 926) (924 . 926) (#("(" 0 1 (fontified nil)) . -924) (924 . 925) (#("*" 0 1 (fontified t)) . -924) (undo-tree-id10760 . -1) 925 (916 . 925) (899 . 916) (t 23740 41251 298991 644000) 891) nil (23740 41325 179835 602000) 0 nil] [nil nil ((761 . 763) (#("(" 0 1 (fontified nil)) . -761) (undo-tree-id10732 . -1) (undo-tree-id10733 . -1) (756 . 762) (t 23740 41251 298991 644000)) ((#(".poll(" 0 5 (fontified nil) 5 6 (fontified nil)) . 756) (undo-tree-id10734 . -3) (undo-tree-id10735 . -4) (undo-tree-id10736 . -3) (undo-tree-id10737 . -5) (undo-tree-id10738 . -4) (undo-tree-id10739 . -5) (undo-tree-id10740 . -6) (undo-tree-id10741 . -5) (undo-tree-id10742 . -6) (undo-tree-id10743 . -5) (undo-tree-id10744 . -5) (undo-tree-id10745 . -5) (undo-tree-id10746 . -5) (undo-tree-id10747 . -1) (undo-tree-id10748 . -5) (undo-tree-id10749 . -1) (undo-tree-id10750 . -5) (undo-tree-id10751 . -5) (undo-tree-id10752 . -5) (undo-tree-id10753 . -4) (undo-tree-id10754 . -5) (undo-tree-id10755 . -3) (undo-tree-id10756 . -4) (761 . 762) (#("()" 0 1 (fontified t) 1 2 (fontified t)) . 761) (undo-tree-id10757 . 1) (undo-tree-id10758 . -1) (undo-tree-id10759 . -1)) (23740 41274 787152 945000) 0 nil]) ((1 . 948) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection.read_response().and_then(|res| {
                            let value = res.1;
                            println!(\"{:?}\", value);
                            Ok(())
                        }).poll();
                        result
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 47 (fontified t) 47 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 416 (fontified t) 416 440 (fontified t) 440 484 (fontified t) 484 500 (fontified t) 500 512 (fontified t) 512 515 (fontified t face font-lock-keyword-face) 515 516 (fontified t) 516 521 (fontified t face font-lock-variable-name-face) 521 531 (fontified t) 531 540 (fontified t) 540 559 (fontified t) 559 567 (fontified t face rust-builtin-formatting-macro-face) 567 568 (fontified t) 568 569 (fontified t face font-lock-string-face) 569 573 (fontified t face rust-string-interpolation-face) 573 574 (fontified t face font-lock-string-face) 574 583 (fontified t) 583 584 (fontified t) 584 612 (fontified t) 612 614 (fontified t face font-lock-type-face) 614 619 (fontified t) 619 650 (fontified t) 650 651 (fontified t) 651 652 (fontified t) 652 654 (fontified t) 654 768 (fontified t) 768 778 (fontified t face font-lock-preprocessor-face) 778 787 (fontified t) 787 789 (fontified t face font-lock-type-face) 789 812 (fontified t) 812 814 (fontified t face font-lock-type-face) 814 842 (fontified t) 842 843 (fontified t) 843 844 (fontified t)) . 1) (undo-tree-id10406 . 193) (undo-tree-id10407 . -440) (undo-tree-id10408 . -440) (undo-tree-id10409 . -440) (undo-tree-id10410 . -646) (undo-tree-id10411 . -653) (undo-tree-id10412 . -647) (undo-tree-id10413 . -646) (undo-tree-id10414 . -647) (undo-tree-id10415 . -647) (undo-tree-id10416 . -646) (undo-tree-id10417 . -647) (undo-tree-id10418 . -646) (undo-tree-id10419 . -648) (undo-tree-id10420 . -647) (undo-tree-id10421 . -648) (undo-tree-id10422 . -648) (undo-tree-id10423 . -647) (undo-tree-id10424 . -648) (undo-tree-id10425 . -648) (undo-tree-id10426 . -647) (undo-tree-id10427 . -648) (undo-tree-id10428 . -647) (undo-tree-id10429 . -648) (undo-tree-id10430 . -647) (undo-tree-id10431 . -646) (undo-tree-id10432 . -647) (undo-tree-id10433 . -648) (undo-tree-id10434 . -648) (undo-tree-id10435 . -648) (undo-tree-id10436 . -648) (undo-tree-id10437 . -648) (undo-tree-id10438 . -648) (undo-tree-id10439 . -648) (undo-tree-id10440 . -648) (undo-tree-id10441 . -648) (undo-tree-id10442 . -648) (undo-tree-id10443 . -648) (undo-tree-id10444 . -648) (undo-tree-id10445 . -648) (undo-tree-id10446 . -648) (undo-tree-id10447 . -648) (undo-tree-id10448 . -648) (undo-tree-id10449 . -648) (undo-tree-id10450 . -648) (undo-tree-id10451 . -648) (undo-tree-id10452 . -648) (undo-tree-id10453 . -648) (undo-tree-id10454 . -648) (undo-tree-id10455 . -648) (undo-tree-id10456 . -648) (undo-tree-id10457 . -648) (undo-tree-id10458 . -648) (undo-tree-id10459 . -648) (undo-tree-id10460 . -648) (undo-tree-id10461 . -648) (undo-tree-id10462 . -648) (undo-tree-id10463 . -648) (undo-tree-id10464 . -648) (undo-tree-id10465 . -648) (undo-tree-id10466 . -648) (undo-tree-id10467 . -648) (undo-tree-id10468 . -648) (undo-tree-id10469 . -648) (undo-tree-id10470 . -648) (undo-tree-id10471 . -648) (undo-tree-id10472 . -648) (undo-tree-id10473 . -648) (undo-tree-id10474 . -648) (undo-tree-id10475 . -648) (undo-tree-id10476 . -648) (undo-tree-id10477 . -648) (undo-tree-id10478 . -648) (undo-tree-id10479 . -648) (undo-tree-id10480 . -648) (undo-tree-id10481 . -646) (undo-tree-id10482 . -654) (undo-tree-id10483 . -646) (undo-tree-id10484 . -653) (undo-tree-id10485 . -649) (undo-tree-id10486 . -648) (undo-tree-id10487 . -649) (undo-tree-id10488 . -649) (undo-tree-id10489 . -648) (undo-tree-id10490 . -649) (undo-tree-id10491 . -649) (undo-tree-id10492 . -648) (undo-tree-id10493 . -649) (undo-tree-id10494 . -648) (undo-tree-id10495 . -649) (undo-tree-id10496 . -648) (undo-tree-id10497 . -650) (undo-tree-id10498 . -649) (undo-tree-id10499 . -650) (undo-tree-id10500 . -650) (undo-tree-id10501 . -649) (undo-tree-id10502 . -650) (undo-tree-id10503 . -650) (undo-tree-id10504 . -649) (undo-tree-id10505 . -650) (undo-tree-id10506 . -649) (undo-tree-id10507 . -650) (undo-tree-id10508 . -649) (undo-tree-id10509 . -650) (undo-tree-id10510 . -650) (undo-tree-id10511 . -650) (undo-tree-id10512 . -650) (undo-tree-id10513 . -650) (undo-tree-id10514 . -651) (undo-tree-id10515 . -651) (undo-tree-id10516 . -650) (undo-tree-id10517 . -651) (undo-tree-id10518 . -651) (undo-tree-id10519 . -650) (undo-tree-id10520 . -651) (undo-tree-id10521 . -651) (undo-tree-id10522 . -650) (undo-tree-id10523 . -651) (undo-tree-id10524 . -650) (undo-tree-id10525 . -651) (undo-tree-id10526 . -650) (undo-tree-id10527 . -646) (undo-tree-id10528 . -650) (undo-tree-id10529 . -651) (undo-tree-id10530 . -651) (undo-tree-id10531 . -651) (undo-tree-id10532 . -651) (undo-tree-id10533 . -651) (undo-tree-id10534 . -651) (undo-tree-id10535 . -705) (undo-tree-id10536 . -706) (undo-tree-id10537 . -650) (undo-tree-id10538 . -651) (undo-tree-id10539 . -414) (undo-tree-id10540 . -415) (undo-tree-id10541 . -651) (undo-tree-id10542 . -652) (undo-tree-id10543 . -440) (undo-tree-id10544 . -653) (undo-tree-id10545 . -651) (undo-tree-id10546 . -651) (undo-tree-id10547 . -650) (undo-tree-id10548 . -650) (undo-tree-id10549 . -650) (undo-tree-id10550 . -650) (undo-tree-id10551 . -650) (undo-tree-id10552 . -650) (undo-tree-id10553 . -650) (undo-tree-id10554 . -650) (undo-tree-id10555 . -650) (undo-tree-id10556 . -650) (undo-tree-id10557 . -650) (undo-tree-id10558 . -650) (undo-tree-id10559 . -650) (undo-tree-id10560 . -650) (undo-tree-id10561 . -650) (undo-tree-id10562 . -650) (undo-tree-id10563 . -440) (undo-tree-id10564 . -450) (undo-tree-id10565 . -440) (undo-tree-id10566 . -653) (undo-tree-id10567 . -649) (undo-tree-id10568 . -650) (undo-tree-id10569 . -649) (undo-tree-id10570 . -649) (undo-tree-id10571 . -650) (undo-tree-id10572 . -649) (undo-tree-id10573 . -649) (undo-tree-id10574 . -650) (undo-tree-id10575 . -649) (undo-tree-id10576 . -650) (undo-tree-id10577 . -649) (undo-tree-id10578 . -650) (undo-tree-id10579 . -648) (undo-tree-id10580 . -649) (undo-tree-id10581 . -648) (undo-tree-id10582 . -648) (undo-tree-id10583 . -649) (undo-tree-id10584 . -648) (undo-tree-id10585 . -648) (undo-tree-id10586 . -649) (undo-tree-id10587 . -648) (undo-tree-id10588 . -649) (undo-tree-id10589 . -648) (undo-tree-id10590 . -649) (undo-tree-id10591 . -648) (undo-tree-id10592 . -648) (undo-tree-id10593 . -648) (undo-tree-id10594 . -648) (undo-tree-id10595 . -613) (undo-tree-id10596 . -648) (undo-tree-id10597 . -613) (undo-tree-id10598 . -613) (undo-tree-id10599 . -648) (undo-tree-id10600 . -613) (undo-tree-id10601 . -613) (undo-tree-id10602 . -648) (undo-tree-id10603 . -613) (undo-tree-id10604 . -648) (undo-tree-id10605 . -613) (undo-tree-id10606 . -648) (undo-tree-id10607 . -560) (undo-tree-id10608 . -613) (undo-tree-id10609 . -560) (undo-tree-id10610 . -560) (undo-tree-id10611 . -613) (undo-tree-id10612 . -560) (undo-tree-id10613 . -560) (undo-tree-id10614 . -613) (undo-tree-id10615 . -560) (undo-tree-id10616 . -613) (undo-tree-id10617 . -560) (undo-tree-id10618 . -613) (undo-tree-id10619 . -513) (undo-tree-id10620 . -560) (undo-tree-id10621 . -513) (undo-tree-id10622 . -513) (undo-tree-id10623 . -560) (undo-tree-id10624 . -513) (undo-tree-id10625 . -513) (undo-tree-id10626 . -560) (undo-tree-id10627 . -513) (undo-tree-id10628 . -560) (undo-tree-id10629 . -513) (undo-tree-id10630 . -560) (undo-tree-id10631 . -445) (undo-tree-id10632 . -513) (undo-tree-id10633 . -445) (undo-tree-id10634 . -445) (undo-tree-id10635 . -513) (undo-tree-id10636 . -445) (undo-tree-id10637 . -445) (undo-tree-id10638 . -513) (undo-tree-id10639 . -445) (undo-tree-id10640 . -445) (undo-tree-id10641 . -445) (undo-tree-id10642 . -513) (undo-tree-id10643 . -445) (undo-tree-id10644 . -513) (undo-tree-id10645 . -393) (undo-tree-id10646 . -403) (undo-tree-id10647 . -440) (undo-tree-id10648 . -450) (undo-tree-id10649 . -445) (undo-tree-id10650 . -445) (undo-tree-id10651 . -445) (undo-tree-id10652 . -445) (undo-tree-id10653 . -445) (undo-tree-id10654 . -445) (undo-tree-id10655 . -445) (undo-tree-id10656 . -445) (undo-tree-id10657 . -445) (undo-tree-id10658 . -445) (undo-tree-id10659 . -445) (undo-tree-id10660 . -445) (undo-tree-id10661 . -445) (undo-tree-id10662 . -445) (undo-tree-id10663 . -445) (undo-tree-id10664 . -445) (undo-tree-id10665 . -445) (undo-tree-id10666 . -445) (undo-tree-id10667 . -445) (undo-tree-id10668 . -445) (undo-tree-id10669 . -445) (undo-tree-id10670 . -445) (undo-tree-id10671 . -445) (undo-tree-id10672 . -445) (undo-tree-id10673 . -445) (undo-tree-id10674 . -445) (undo-tree-id10675 . -445) (undo-tree-id10676 . -445) 446) nil (23740 41274 792507 374000) 0 nil]) ((651 . 653) (#("(" 0 1 (fontified nil)) . -651) (undo-tree-id10677 . -1) (undo-tree-id10678 . -1) (649 . 652) (#("o" 0 1 (fontified t)) . -649) (undo-tree-id10679 . -1) (undo-tree-id10680 . -1) (undo-tree-id10681 . -1) (undo-tree-id10682 . -1) (undo-tree-id10683 . -1) (undo-tree-id10684 . -1) (undo-tree-id10685 . -1) (undo-tree-id10686 . -1) (undo-tree-id10687 . -1) (undo-tree-id10688 . -1) (undo-tree-id10689 . -1) (undo-tree-id10690 . -1) (undo-tree-id10691 . -1) (undo-tree-id10692 . -1) (undo-tree-id10693 . -1) (undo-tree-id10694 . -1) (undo-tree-id10695 . -1) (undo-tree-id10696 . -1) (undo-tree-id10697 . -1) (undo-tree-id10698 . -1) (undo-tree-id10699 . -1) (undo-tree-id10700 . -1) (undo-tree-id10701 . -1) (undo-tree-id10702 . -1) (undo-tree-id10703 . -1) (undo-tree-id10704 . -1) (undo-tree-id10705 . -1) (undo-tree-id10706 . -1) (undo-tree-id10707 . -1) (undo-tree-id10708 . -1) (undo-tree-id10709 . -1) (undo-tree-id10710 . -1) (undo-tree-id10711 . -1) (#("l" 0 1 (fontified t)) . -650) (undo-tree-id10712 . -1) (undo-tree-id10713 . -1) (undo-tree-id10714 . -1) (undo-tree-id10715 . -1) (undo-tree-id10716 . -1) (undo-tree-id10717 . -1) (undo-tree-id10718 . -1) (undo-tree-id10719 . -1) (undo-tree-id10720 . -1) 651 (647 . 651) (#("o" 0 1 (fontified t)) . -647) (undo-tree-id10721 . -1) (undo-tree-id10722 . -1) 648 (646 . 648)) nil (23740 41251 185363 444000) 0 nil]) ((#("let  = " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 7 (fontified t)) . 441) (undo-tree-id10723 . -5) (undo-tree-id10724 . -6) (undo-tree-id10725 . -5) (undo-tree-id10726 . -6) (undo-tree-id10727 . -5) (undo-tree-id10728 . -6) (undo-tree-id10729 . -1) (undo-tree-id10730 . -1) (undo-tree-id10731 . -1)) nil (23740 41251 185405 637000) 0 nil] [nil nil ((845 . 846) (36 . 37) 446) ((#("s" 0 1 (fontified t)) . 36) (#("s" 0 1 (fontified t)) . 845)) (23740 41220 643407 776000) 0 nil]) ((#("res" 0 3 (fontified t face font-lock-variable-name-face)) . 445) (undo-tree-id10364 . -3) (undo-tree-id10365 . -3) (undo-tree-id10366 . -1) (undo-tree-id10367 . -1) (undo-tree-id10368 . -1) (undo-tree-id10369 . -1) (undo-tree-id10370 . -1) (undo-tree-id10371 . -1) (undo-tree-id10372 . -1) (undo-tree-id10373 . -1) (undo-tree-id10374 . -1) (undo-tree-id10375 . -1) (undo-tree-id10376 . -1) (undo-tree-id10377 . -1) (undo-tree-id10378 . -1) (undo-tree-id10379 . -1) (undo-tree-id10380 . -1) (undo-tree-id10381 . -1) (undo-tree-id10382 . -1) (undo-tree-id10383 . -1) (undo-tree-id10384 . -1) (undo-tree-id10385 . -1) (undo-tree-id10386 . -1) (undo-tree-id10387 . -1) (undo-tree-id10388 . -1) (undo-tree-id10389 . -1) (undo-tree-id10390 . -1) (undo-tree-id10391 . -1) (undo-tree-id10392 . -1) (undo-tree-id10393 . -1) (undo-tree-id10394 . -1) (undo-tree-id10395 . -1) (undo-tree-id10396 . -1) (undo-tree-id10397 . -1) (undo-tree-id10398 . -1) (undo-tree-id10399 . -1) (undo-tree-id10400 . -1) (undo-tree-id10401 . -1) (undo-tree-id10402 . -1) (undo-tree-id10403 . -1) (undo-tree-id10404 . -1) (undo-tree-id10405 . -1) 446 (t 23740 41146 136191 760000)) nil (23740 41220 648239 575000) 0 nil] [nil nil ((#("let res = " 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 7 (fontified t face font-lock-variable-name-face) 7 10 (fontified t)) . 441) (undo-tree-id10363 . -7) (t 23740 41131 632931 447000)) ((441 . 451) (t 23740 41138 886228 280000)) (23740 41138 843416 825000) 0 nil]) ((1 . 848) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        let res = connection.read_response().and_then(|res| {

                            let value = res.1;
                            println!(\"{:?}\", value);
                            Ok(())
                        });
                        result
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 416 (fontified t) 416 440 (fontified t) 440 443 (fontified t face font-lock-keyword-face) 443 444 (fontified t) 444 447 (fontified t face font-lock-variable-name-face) 447 493 (fontified t) 493 494 (fontified t) 494 495 (fontified t) 495 523 (fontified t) 523 526 (fontified t face font-lock-keyword-face) 526 527 (fontified t) 527 532 (fontified t face font-lock-variable-name-face) 532 541 (fontified t) 541 542 (fontified t) 542 570 (fontified t) 570 578 (fontified t face rust-builtin-formatting-macro-face) 578 579 (fontified t) 579 580 (fontified t face font-lock-string-face) 580 584 (fontified t face rust-string-interpolation-face) 584 585 (fontified t face font-lock-string-face) 585 592 (fontified t) 592 594 (fontified t) 594 595 (fontified t) 595 623 (fontified t) 623 625 (fontified t face font-lock-type-face) 625 626 (fontified t) 626 627 (fontified t) 627 628 (fontified t) 628 629 (fontified t) 629 630 (fontified t) 630 658 (fontified t) 658 772 (fontified t) 772 782 (fontified t face font-lock-preprocessor-face) 782 791 (fontified t) 791 793 (fontified t face font-lock-type-face) 793 816 (fontified t) 816 818 (fontified t face font-lock-type-face) 818 848 (fontified t)) . 1) (undo-tree-id10181 . -630) (undo-tree-id10182 . -630) (undo-tree-id10183 . 218) (undo-tree-id10184 . -630) (undo-tree-id10185 . -630) (undo-tree-id10186 . 254) (undo-tree-id10187 . -530) (undo-tree-id10188 . -529) (undo-tree-id10189 . -535) (undo-tree-id10190 . -534) (undo-tree-id10191 . -623) (undo-tree-id10192 . -625) (undo-tree-id10193 . -587) (undo-tree-id10194 . -588) (undo-tree-id10195 . -477) (undo-tree-id10196 . -485) (undo-tree-id10197 . -623) (undo-tree-id10198 . -625) (undo-tree-id10199 . -587) (undo-tree-id10200 . -588) (undo-tree-id10201 . -595) (undo-tree-id10202 . -596) (undo-tree-id10203 . -623) (undo-tree-id10204 . -625) (undo-tree-id10205 . -587) (undo-tree-id10206 . -595) (undo-tree-id10207 . -477) (undo-tree-id10208 . -485) (undo-tree-id10209 . -593) (undo-tree-id10210 . -595) (undo-tree-id10211 . -623) (undo-tree-id10212 . -625) (undo-tree-id10213 . -587) (undo-tree-id10214 . -593) (undo-tree-id10215 . -589) (undo-tree-id10216 . -593) (undo-tree-id10217 . -623) (undo-tree-id10218 . -625) (undo-tree-id10219 . -587) (undo-tree-id10220 . -589) (undo-tree-id10221 . -477) (undo-tree-id10222 . -485) (undo-tree-id10223 . -592) (undo-tree-id10224 . -591) (undo-tree-id10225 . -592) (undo-tree-id10226 . -592) (undo-tree-id10227 . -591) (undo-tree-id10228 . -592) (undo-tree-id10229 . -591) (undo-tree-id10230 . -589) (undo-tree-id10231 . -592) (undo-tree-id10232 . -623) (undo-tree-id10233 . -625) (undo-tree-id10234 . -587) (undo-tree-id10235 . -589) (undo-tree-id10236 . -477) (undo-tree-id10237 . -485) (undo-tree-id10238 . -590) (undo-tree-id10239 . -592) (undo-tree-id10240 . -623) (undo-tree-id10241 . -625) (undo-tree-id10242 . -587) (undo-tree-id10243 . -590) (undo-tree-id10244 . -578) (undo-tree-id10245 . -579) (undo-tree-id10246 . -593) (undo-tree-id10247 . -593) (undo-tree-id10248 . -593) (undo-tree-id10249 . -593) (undo-tree-id10250 . -593) (undo-tree-id10251 . -593) (undo-tree-id10252 . -592) (undo-tree-id10253 . -593) (undo-tree-id10254 . -623) (undo-tree-id10255 . -625) (undo-tree-id10256 . -477) (undo-tree-id10257 . -485) (undo-tree-id10258 . -593) (undo-tree-id10259 . -593) (undo-tree-id10260 . -593) (undo-tree-id10261 . -593) (undo-tree-id10262 . -593) (undo-tree-id10263 . -593) (undo-tree-id10264 . -593) (undo-tree-id10265 . -593) (undo-tree-id10266 . -593) (undo-tree-id10267 . -593) (undo-tree-id10268 . -593) (undo-tree-id10269 . -593) (undo-tree-id10270 . -594) (undo-tree-id10271 . -593) (undo-tree-id10272 . -594) (undo-tree-id10273 . -593) (undo-tree-id10274 . -594) (undo-tree-id10275 . -593) (undo-tree-id10276 . -594) (undo-tree-id10277 . -593) (undo-tree-id10278 . -592) (undo-tree-id10279 . -593) (undo-tree-id10280 . -623) (undo-tree-id10281 . -625) (undo-tree-id10282 . -477) (undo-tree-id10283 . -485) (undo-tree-id10284 . -593) (undo-tree-id10285 . -593) (undo-tree-id10286 . -593) (undo-tree-id10287 . -593) (undo-tree-id10288 . -593) (undo-tree-id10289 . -593) (undo-tree-id10290 . -593) (undo-tree-id10291 . -593) (undo-tree-id10292 . -593) (undo-tree-id10293 . -593) (undo-tree-id10294 . -593) (undo-tree-id10295 . -593) (undo-tree-id10296 . -593) (undo-tree-id10297 . -593) (undo-tree-id10298 . -592) (undo-tree-id10299 . -593) (undo-tree-id10300 . -592) (undo-tree-id10301 . -593) (undo-tree-id10302 . -592) (undo-tree-id10303 . -593) (undo-tree-id10304 . -592) (undo-tree-id10305 . -593) (undo-tree-id10306 . -584) (undo-tree-id10307 . -585) (undo-tree-id10308 . -584) (undo-tree-id10309 . -585) (undo-tree-id10310 . -592) (undo-tree-id10311 . -593) (undo-tree-id10312 . -592) (undo-tree-id10313 . -593) (undo-tree-id10314 . -578) (undo-tree-id10315 . -579) (undo-tree-id10316 . -444) (undo-tree-id10317 . -447) (undo-tree-id10318 . -444) (undo-tree-id10319 . -447) (undo-tree-id10320 . -592) (undo-tree-id10321 . -593) (undo-tree-id10322 . -592) (undo-tree-id10323 . -593) (undo-tree-id10324 . -592) (undo-tree-id10325 . -593) (undo-tree-id10326 . -592) (undo-tree-id10327 . -593) (undo-tree-id10328 . -584) (undo-tree-id10329 . -585) (undo-tree-id10330 . -584) (undo-tree-id10331 . -585) (undo-tree-id10332 . -592) (undo-tree-id10333 . -593) (undo-tree-id10334 . -592) (undo-tree-id10335 . -593) (undo-tree-id10336 . -578) (undo-tree-id10337 . -579) (undo-tree-id10338 . 270) (undo-tree-id10339 . -579) (undo-tree-id10340 . 269) (undo-tree-id10341 . -592) (undo-tree-id10342 . 256) (undo-tree-id10343 . -593) 594) nil (23740 41144 882688 892000) 0 nil]) ((594 . 595) (#(")" 0 1 (fontified nil)) . 594) (undo-tree-id10344 . -1) (undo-tree-id10345 . -1) (undo-tree-id10346 . -1) (593 . 594) (#(" " 0 1 (fontified nil)) . -593) (593 . 594) (#(")" 0 1 (fontified nil)) . -593) (589 . 594) (#("s" 0 1 (fontified t)) . -589) (undo-tree-id10347 . -1) (undo-tree-id10348 . -1) 590 (589 . 590) (#("s" 0 1 (fontified t)) . -589) (undo-tree-id10349 . -1) (undo-tree-id10350 . -1) (undo-tree-id10351 . -1) (#("l" 0 1 (fontified t)) . -590) (undo-tree-id10352 . -1) (undo-tree-id10353 . -1) (#("u" 0 1 (fontified t)) . -591) (undo-tree-id10354 . -1) (undo-tree-id10355 . -1) (#("r" 0 1 (fontified t)) . -592) (undo-tree-id10356 . -1) (undo-tree-id10357 . -1) 593 (586 . 593) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 586) (585 . 586) (#(" " 0 1 (fontified nil)) . -585) (585 . 586) (#("\"" 0 1 (fontified nil face rust-string-interpolation-face)) . -585) (585 . 586) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 585) (582 . 585) (581 . 583) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -581) (581 . 582) (#(":" 0 1 (fontified t face font-lock-string-face)) . -581) (undo-tree-id10358 . -1) (undo-tree-id10359 . -1) 582 (581 . 582) (580 . 582) (#("\"" 0 1 (fontified nil)) . -580) (580 . 581) (579 . 581) (#("(" 0 1 (fontified nil)) . -579) (571 . 580) (542 . 571) 527) nil (23740 41131 509221 441000) 0 nil]) ((574 . 576) (#("(" 0 1 (fontified nil)) . -574) (574 . 575) (573 . 575) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -573) (571 . 574) (542 . 571) 496) nil (23740 41131 509242 256000) 0 nil]) ((#("                            " 0 28 (fontified t)) . -495) (undo-tree-id10360 . -28) (undo-tree-id10361 . -28) 523 (494 . 523) (t 23740 41088 379815 17000) 480) nil (23740 41131 509254 155000) 0 nil] [nil nil ((#("                            " 0 28 (fontified t)) . -495) (undo-tree-id10153 . -28) (undo-tree-id10154 . -28) (undo-tree-id10155 . -28) (undo-tree-id10156 . -28) (undo-tree-id10157 . -28) (undo-tree-id10158 . -28) (undo-tree-id10159 . -28) (undo-tree-id10160 . -28) 523 (494 . 523) (t 23740 41088 379815 17000) 480) ((#("
                            " 0 1 (fontified t) 1 29 (fontified nil)) . 494) (undo-tree-id10161 . -29) (undo-tree-id10162 . -29) (undo-tree-id10163 . -29) (undo-tree-id10164 . -29) (undo-tree-id10165 . -29) (undo-tree-id10166 . -29) (undo-tree-id10167 . -1) (undo-tree-id10168 . -1) (undo-tree-id10169 . -1) (undo-tree-id10170 . -1) (undo-tree-id10171 . -1) (undo-tree-id10172 . -1) (undo-tree-id10173 . -1) (undo-tree-id10174 . -1) (undo-tree-id10175 . -29) (undo-tree-id10176 . -29) (undo-tree-id10177 . -1) (undo-tree-id10178 . -1) (undo-tree-id10179 . -1) (undo-tree-id10180 . -1) (495 . 523)) (23740 41105 499825 948000) 0 nil]) ((540 . 541) (t 23740 41083 389839 948000)) nil (23740 41105 503971 917000) 0 nil]) ((#("                            if let Ok(tup) = res {
                                println!(\"{:?}\", tup.1);
                            }
" 0 6 (fontified t) 6 28 (fontified t) 28 30 (fontified t face font-lock-keyword-face) 30 31 (fontified t) 31 34 (fontified t face font-lock-keyword-face) 34 35 (fontified t) 35 37 (fontified t face font-lock-type-face) 37 49 (fontified t) 49 51 (fontified t) 51 83 (fontified t) 83 91 (fontified t face rust-builtin-formatting-macro-face) 91 92 (fontified t) 92 93 (fontified t face font-lock-string-face) 93 97 (fontified t face rust-string-interpolation-face) 97 98 (fontified t face font-lock-string-face) 98 100 (fontified t) 100 103 (fontified t) 103 108 (fontified t) 108 138 (fontified t)) . 541) (undo-tree-id10056 . -137) (undo-tree-id10057 . -31) (undo-tree-id10058 . -137) (undo-tree-id10059 . -28) (undo-tree-id10060 . -30) (undo-tree-id10061 . -28) (undo-tree-id10062 . -30) (undo-tree-id10063 . -28) (undo-tree-id10064 . -30) (undo-tree-id10065 . -28) (undo-tree-id10066 . -30) (undo-tree-id10067 . -28) (undo-tree-id10068 . -30) (undo-tree-id10069 . -31) (undo-tree-id10070 . -31) (undo-tree-id10071 . -31) (undo-tree-id10072 . -31) (undo-tree-id10073 . -31) (undo-tree-id10074 . -31) (undo-tree-id10075 . -31) (undo-tree-id10076 . -28) (undo-tree-id10077 . -30) (undo-tree-id10078 . -28) (undo-tree-id10079 . -30) (undo-tree-id10080 . -138) (undo-tree-id10081 . -31) (undo-tree-id10082 . -31) (undo-tree-id10083 . -31) (undo-tree-id10084 . -31) (undo-tree-id10085 . -31) (undo-tree-id10086 . -31) (undo-tree-id10087 . -31) (undo-tree-id10088 . -31) (undo-tree-id10089 . -31) (undo-tree-id10090 . -31) (undo-tree-id10091 . -31) (undo-tree-id10092 . -137) (undo-tree-id10093 . -31) (undo-tree-id10094 . -31) (undo-tree-id10095 . -82) (undo-tree-id10096 . -31) (undo-tree-id10097 . -82) (undo-tree-id10098 . -82) (undo-tree-id10099 . -31) (undo-tree-id10100 . -82) (undo-tree-id10101 . -82) (undo-tree-id10102 . -31) (undo-tree-id10103 . -82) (undo-tree-id10104 . -31) (undo-tree-id10105 . -82) (undo-tree-id10106 . -31) (undo-tree-id10107 . -137) (undo-tree-id10108 . -82) (undo-tree-id10109 . -137) (undo-tree-id10110 . -137) (undo-tree-id10111 . -82) (undo-tree-id10112 . -137) (undo-tree-id10113 . -137) (undo-tree-id10114 . -82) (undo-tree-id10115 . -137) (undo-tree-id10116 . -137) (undo-tree-id10117 . -137) (undo-tree-id10118 . -82) (undo-tree-id10119 . -137) (undo-tree-id10120 . -82) (undo-tree-id10121 . -136) (undo-tree-id10122 . -137) (undo-tree-id10123 . -136) (undo-tree-id10124 . -137) (undo-tree-id10125 . -136) (undo-tree-id10126 . -137) (undo-tree-id10127 . -136) (undo-tree-id10128 . -137) (undo-tree-id10129 . -97) (undo-tree-id10130 . -98) (undo-tree-id10131 . -97) (undo-tree-id10132 . -98) (undo-tree-id10133 . -136) (undo-tree-id10134 . -137) (undo-tree-id10135 . -136) (undo-tree-id10136 . -137) (undo-tree-id10137 . -96) (undo-tree-id10138 . -97) (undo-tree-id10139 . -93) (undo-tree-id10140 . -94) (undo-tree-id10141 . -49) (undo-tree-id10142 . -50) (undo-tree-id10143 . 89) (undo-tree-id10144 . -50) (undo-tree-id10145 . 88) (undo-tree-id10146 . -136) (undo-tree-id10147 . 2) (undo-tree-id10148 . -137) (undo-tree-id10149 . -92) (undo-tree-id10150 . -93) (undo-tree-id10151 . -92) (undo-tree-id10152 . -93) 678) nil (23740 41083 275712 237000) 0 nil]) ((523 . 527)) nil (23740 41083 275724 391000) 0 nil]) ((523 . 531)) nil (23740 41083 275726 280000) 0 nil]) (527) nil (23740 41083 275727 907000) 0 nil]) ((523 . 528) (494 . 523) 453) nil (23740 41083 275730 436000) 0 nil] [nil ([nil ([nil ([nil nil ((#("a" 0 1 (fontified t)) . -478) (undo-tree-id9910 . -1) (undo-tree-id9911 . -1) (#("n" 0 1 (fontified t)) . -479) (undo-tree-id9912 . -1) (undo-tree-id9913 . -1) (#("d" 0 1 (fontified t)) . -480) (undo-tree-id9914 . -1) (undo-tree-id9915 . -1) 481 (#("_" 0 1 (fontified t)) . 481) (t 23740 41044 853365 215000)) ((478 . 482) (t 23740 41052 843325 516000)) (23740 41052 814127 894000) 0 nil]) ((1 . 766) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        let res = connection.read_response().and_then(|res| {
                            {
                                println!(\"{:?}\", res.1);
                            }
                        });
                        result
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 416 (fontified t) 416 440 (fontified t) 440 443 (fontified t face font-lock-keyword-face) 443 444 (fontified t) 444 447 (fontified t face font-lock-variable-name-face) 447 493 (fontified t) 493 494 (fontified t) 494 522 (fontified t) 522 524 (fontified t) 524 556 (fontified t) 556 564 (fontified t face rust-builtin-formatting-macro-face) 564 565 (fontified t) 565 566 (fontified t face font-lock-string-face) 566 570 (fontified t face rust-string-interpolation-face) 570 571 (fontified t face font-lock-string-face) 571 581 (fontified t) 581 753 (fontified t) 753 763 (fontified t face font-lock-preprocessor-face) 763 772 (fontified t) 772 774 (fontified t face font-lock-type-face) 774 797 (fontified t) 797 799 (fontified t face font-lock-type-face) 799 829 (fontified t)) . 1) (undo-tree-id9760 . 253) (undo-tree-id9762 . -571) (undo-tree-id9764 . -572) (undo-tree-id9766 . -572) (undo-tree-id9768 . -573) (undo-tree-id9770 . -573) (undo-tree-id9772 . -572) (undo-tree-id9774 . -573) (undo-tree-id9776 . -573) (undo-tree-id9778 . -573) (undo-tree-id9780 . -573) (undo-tree-id9782 . -573) (undo-tree-id9784 . -573) (undo-tree-id9786 . -573) (undo-tree-id9788 . -573) (undo-tree-id9790 . -573) (undo-tree-id9792 . -574) (undo-tree-id9794 . -574) (undo-tree-id9796 . -573) (undo-tree-id9798 . -574) (undo-tree-id9800 . -574) (undo-tree-id9802 . -574) (undo-tree-id9804 . -575) (undo-tree-id9806 . -575) (undo-tree-id9808 . -574) (undo-tree-id9810 . -575) (undo-tree-id9812 . -575) (undo-tree-id9814 . -575) (undo-tree-id9816 . -573) (undo-tree-id9818 . -477) (undo-tree-id9820 . -573) (undo-tree-id9822 . -576) (undo-tree-id9824 . -576) (undo-tree-id9826 . -575) (undo-tree-id9828 . -576) (undo-tree-id9830 . -576) (undo-tree-id9832 . -576) (undo-tree-id9834 . -573) (undo-tree-id9836 . -477) (undo-tree-id9838 . -575) (undo-tree-id9840 . -575) (undo-tree-id9842 . -575) (undo-tree-id9844 . -575) (undo-tree-id9846 . -575) (undo-tree-id9848 . -575) (undo-tree-id9850 . -522) (undo-tree-id9852 . -522) (undo-tree-id9854 . -575) (undo-tree-id9856 . -522) (undo-tree-id9858 . -522) (undo-tree-id9860 . -522) (undo-tree-id9862 . -477) (undo-tree-id9864 . -477) (undo-tree-id9866 . -565) (undo-tree-id9868 . -575) (undo-tree-id9870 . -575) (undo-tree-id9872 . -522) (undo-tree-id9874 . -575) (undo-tree-id9876 . -575) (undo-tree-id9877 . -575) (undo-tree-id9879 . -522) (undo-tree-id9881 . -522) (undo-tree-id9883 . -490) (undo-tree-id9885 . -576) (undo-tree-id9887 . -575) (undo-tree-id9889 . -575) (undo-tree-id9891 . -575) (undo-tree-id9893 . -575) (undo-tree-id9895 . -575) (undo-tree-id9897 . -575) (undo-tree-id9899 . -575) (undo-tree-id9901 . -575) (undo-tree-id9903 . -575) (undo-tree-id9905 . -575) 576) ((1 . 830) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        let res = connection.read_response().and_then(|res| {
                            println!(\"{:?}\", res.1);
                        });
                        result
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 416 (fontified t) 416 440 (fontified t) 440 443 (fontified t face font-lock-keyword-face) 443 444 (fontified t) 444 447 (fontified t face font-lock-variable-name-face) 447 477 (fontified t) 477 478 (fontified t) 478 479 (fontified t) 479 480 (fontified t) 480 481 (fontified t) 481 494 (fontified t) 494 510 (fontified t) 510 522 (fontified t) 522 530 (fontified t face rust-builtin-formatting-macro-face) 530 531 (fontified t) 531 532 (fontified t face font-lock-string-face) 532 536 (fontified t face rust-string-interpolation-face) 536 537 (fontified t face font-lock-string-face) 537 547 (fontified t) 547 574 (fontified t) 574 689 (fontified t) 689 699 (fontified t face font-lock-preprocessor-face) 699 708 (fontified t) 708 710 (fontified t face font-lock-type-face) 710 733 (fontified t) 733 735 (fontified t face font-lock-type-face) 735 765 (fontified t)) . 1) (undo-tree-id9916 . 284) (undo-tree-id9917 . -477) (undo-tree-id9918 . -485) (undo-tree-id9919 . -543) (undo-tree-id9920 . -544) (undo-tree-id9921 . -543) (undo-tree-id9922 . -544) (undo-tree-id9923 . -477) (undo-tree-id9924 . -485) (undo-tree-id9925 . -482) (undo-tree-id9926 . -477) (undo-tree-id9927 . -482) (undo-tree-id9928 . -482) (undo-tree-id9929 . -477) (undo-tree-id9930 . -482) (undo-tree-id9931 . -477) (undo-tree-id9932 . -545) (undo-tree-id9933 . -482) (undo-tree-id9934 . -545) (undo-tree-id9935 . -545) (undo-tree-id9936 . -482) (undo-tree-id9937 . -545) (undo-tree-id9938 . -545) (undo-tree-id9939 . -482) (undo-tree-id9940 . -545) (undo-tree-id9941 . -482) (undo-tree-id9942 . -545) (undo-tree-id9943 . -482) (undo-tree-id9944 . -544) (undo-tree-id9945 . -545) (undo-tree-id9946 . -544) (undo-tree-id9947 . -545) (undo-tree-id9948 . -544) (undo-tree-id9949 . -545) (undo-tree-id9950 . -544) (undo-tree-id9951 . -545) (undo-tree-id9952 . -536) (undo-tree-id9953 . -537) (undo-tree-id9954 . -536) (undo-tree-id9955 . -537) (undo-tree-id9956 . -544) (undo-tree-id9957 . -545) (undo-tree-id9958 . -544) (undo-tree-id9959 . -545) (undo-tree-id9960 . -530) (undo-tree-id9961 . -531) (undo-tree-id9962 . -544) (undo-tree-id9963 . -545) (undo-tree-id9964 . -544) (undo-tree-id9965 . -544) (undo-tree-id9966 . -545) (undo-tree-id9967 . -544) (undo-tree-id9968 . -544) (undo-tree-id9969 . -545) (undo-tree-id9970 . -544) (undo-tree-id9971 . -545) (undo-tree-id9972 . -544) (undo-tree-id9973 . -545) (undo-tree-id9974 . -530) (undo-tree-id9975 . -531) (undo-tree-id9976 . -543) (undo-tree-id9977 . -544) (undo-tree-id9978 . -543) (undo-tree-id9979 . -543) (undo-tree-id9980 . -544) (undo-tree-id9981 . -543) (undo-tree-id9982 . -543) (undo-tree-id9983 . -544) (undo-tree-id9984 . -543) (undo-tree-id9985 . -544) (undo-tree-id9986 . -543) (undo-tree-id9987 . -544) (undo-tree-id9988 . -543) (undo-tree-id9989 . -543) (undo-tree-id9990 . -543) (undo-tree-id9991 . -543) (undo-tree-id9992 . -543) (undo-tree-id9993 . -543) (undo-tree-id9994 . -543) (undo-tree-id9995 . -543) (undo-tree-id9996 . -465) (undo-tree-id9997 . -543) (undo-tree-id9998 . -465) (undo-tree-id9999 . -465) (undo-tree-id10000 . -543) (undo-tree-id10001 . -465) (undo-tree-id10002 . -465) (undo-tree-id10003 . -543) (undo-tree-id10004 . -465) (undo-tree-id10005 . -543) (undo-tree-id10006 . -465) (undo-tree-id10007 . -543) (undo-tree-id10008 . -461) (undo-tree-id10009 . -474) (undo-tree-id10010 . -465) (undo-tree-id10011 . -465) (undo-tree-id10012 . -465) (undo-tree-id10013 . -465) (undo-tree-id10014 . -480) (undo-tree-id10015 . -465) (undo-tree-id10016 . -480) (undo-tree-id10017 . -480) (undo-tree-id10018 . -465) (undo-tree-id10019 . -480) (undo-tree-id10020 . -480) (undo-tree-id10021 . -465) (undo-tree-id10022 . -480) (undo-tree-id10023 . -480) (undo-tree-id10024 . -480) (undo-tree-id10025 . -465) (undo-tree-id10026 . -480) (undo-tree-id10027 . -465)) (23740 41059 738848 662000) 0 nil]) ((575 . 577) (574 . 575) (#("tup" 0 3 (fontified t)) . 574) (undo-tree-id9907 . -3)) ((574 . 577) (#("r" 0 1 (fontified nil)) . 574) (undo-tree-id10028 . -1) (undo-tree-id10029 . -1) (undo-tree-id10030 . -1) (undo-tree-id10031 . -1) (undo-tree-id10032 . -1) (undo-tree-id10033 . -1) (undo-tree-id10034 . -1) (undo-tree-id10035 . -1) (undo-tree-id10036 . -1) (undo-tree-id10037 . -1) (undo-tree-id10038 . -1) (undo-tree-id10039 . -1) (undo-tree-id10040 . -1) (undo-tree-id10041 . -1) (#("es" 0 2 (fontified t)) . 575) (undo-tree-id10042 . -1) (undo-tree-id10043 . -1) (undo-tree-id10044 . -1) (undo-tree-id10045 . -1) (undo-tree-id10046 . -1) (undo-tree-id10047 . -1) (undo-tree-id10048 . -1) (undo-tree-id10049 . -1) (undo-tree-id10050 . -1) (undo-tree-id10051 . -1) (undo-tree-id10052 . -1) (undo-tree-id10053 . -1) (undo-tree-id10054 . -1) (undo-tree-id10055 . -1)) (23740 41060 112722 518000) 0 nil]) ((#("if let Ok(tup) = res " 0 2 (fontified t face font-lock-keyword-face) 2 3 (fontified t) 3 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 9 (fontified t face font-lock-type-face) 9 21 (fontified t)) . 523) (undo-tree-id9908 . -18) (undo-tree-id9909 . -18) 541 (t 23740 41022 450142 929000)) ((523 . 544)) (23740 41061 190462 142000) 0 nil]) ((1 . 851) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        let res = connection.read_response().and_then(|res| {
                        if let Ok(tup) = res {
                            println!(\"{:?}\", tup.1);
                        }
                        });
                        result
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 416 (fontified t) 416 440 (fontified t) 440 443 (fontified t face font-lock-keyword-face) 443 444 (fontified t) 444 447 (fontified t face font-lock-variable-name-face) 447 450 (fontified t) 450 460 (fontified t) 460 485 (fontified t) 485 492 (fontified t) 492 493 (fontified t) 493 494 (fontified t) 494 517 (fontified t) 517 518 (rear-nonsticky t fontified t) 518 520 (fontified t face font-lock-keyword-face) 520 521 (fontified t) 521 524 (fontified t face font-lock-keyword-face) 524 525 (fontified t) 525 527 (fontified t face font-lock-type-face) 527 539 (fontified t) 539 540 (fontified t) 540 541 (fontified t) 541 569 (fontified t) 569 577 (fontified t face rust-builtin-formatting-macro-face) 577 578 (fontified t) 578 579 (fontified t face font-lock-string-face) 579 583 (fontified t face rust-string-interpolation-face) 583 584 (fontified t face font-lock-string-face) 584 591 (fontified t) 591 593 (fontified t) 593 594 (fontified t) 594 618 (fontified t) 618 619 (fontified t) 619 620 (fontified t) 620 644 (fontified t) 644 645 (fontified t) 645 647 (fontified t) 647 648 (fontified t) 648 679 (fontified t) 679 762 (fontified t) 762 772 (fontified t face font-lock-preprocessor-face) 772 781 (fontified t) 781 783 (fontified t face font-lock-type-face) 783 806 (fontified t) 806 808 (fontified t face font-lock-type-face) 808 838 (fontified t)) . 1) (undo-tree-id9548 . -619) (undo-tree-id9549 . -494) (undo-tree-id9550 . -619) (undo-tree-id9551 . -648) (undo-tree-id9552 . 190) (undo-tree-id9553 . -648) (undo-tree-id9554 . -648) (undo-tree-id9555 . 353) (undo-tree-id9556 . -648) (undo-tree-id9557 . -477) (undo-tree-id9558 . -477) (undo-tree-id9559 . -477) (undo-tree-id9560 . -477) (undo-tree-id9561 . -477) (undo-tree-id9562 . -477) (undo-tree-id9563 . -477) (undo-tree-id9564 . -477) (undo-tree-id9565 . -477) (undo-tree-id9566 . -477) (undo-tree-id9567 . -477) (undo-tree-id9568 . -477) (undo-tree-id9569 . -477) (undo-tree-id9570 . -477) (undo-tree-id9571 . -477) (undo-tree-id9572 . -477) (undo-tree-id9573 . -477) (undo-tree-id9574 . -477) (undo-tree-id9575 . -477) (undo-tree-id9576 . -477) (undo-tree-id9577 . -477) (undo-tree-id9578 . -477) (undo-tree-id9579 . -477) (undo-tree-id9580 . -477) (undo-tree-id9581 . -477) (undo-tree-id9582 . -477) (undo-tree-id9583 . -477) (undo-tree-id9584 . -730) (undo-tree-id9585 . -734) (undo-tree-id9586 . -477) (undo-tree-id9587 . -477) (undo-tree-id9588 . -477) (undo-tree-id9589 . -477) (undo-tree-id9590 . -477) (undo-tree-id9591 . -477) (undo-tree-id9592 . -477) (undo-tree-id9593 . -477) (undo-tree-id9594 . -477) (undo-tree-id9595 . -477) (undo-tree-id9596 . -477) (undo-tree-id9597 . -477) (undo-tree-id9598 . -477) (undo-tree-id9599 . -477) (undo-tree-id9600 . -477) (undo-tree-id9601 . -477) (undo-tree-id9602 . -477) (undo-tree-id9603 . -477) (undo-tree-id9604 . -477) (undo-tree-id9605 . -477) (undo-tree-id9606 . -477) (undo-tree-id9607 . -477) (undo-tree-id9608 . -477) (undo-tree-id9609 . -486) (undo-tree-id9610 . -477) (undo-tree-id9611 . -478) (undo-tree-id9612 . -477) (undo-tree-id9613 . -479) (undo-tree-id9614 . -481) (undo-tree-id9615 . -480) (undo-tree-id9616 . -481) (undo-tree-id9617 . -480) (undo-tree-id9618 . -477) (undo-tree-id9619 . -480) (undo-tree-id9620 . -477) (undo-tree-id9621 . -481) (undo-tree-id9622 . -482) (undo-tree-id9623 . -481) (undo-tree-id9624 . -482) (undo-tree-id9625 . -482) (undo-tree-id9626 . -481) (undo-tree-id9627 . -482) (undo-tree-id9628 . -482) (undo-tree-id9629 . -481) (undo-tree-id9630 . -482) (undo-tree-id9631 . -481) (undo-tree-id9632 . -482) (undo-tree-id9633 . -481) (undo-tree-id9634 . -483) (undo-tree-id9635 . -482) (undo-tree-id9636 . -483) (undo-tree-id9637 . -483) (undo-tree-id9638 . -482) (undo-tree-id9639 . -483) (undo-tree-id9640 . -483) (undo-tree-id9641 . -482) (undo-tree-id9642 . -483) (undo-tree-id9643 . -482) (undo-tree-id9644 . -483) (undo-tree-id9645 . -482) (undo-tree-id9646 . -477) (undo-tree-id9647 . -482) (undo-tree-id9648 . -484) (undo-tree-id9649 . -483) (undo-tree-id9650 . -484) (undo-tree-id9651 . -484) (undo-tree-id9652 . -483) (undo-tree-id9653 . -484) (undo-tree-id9654 . -484) (undo-tree-id9655 . -483) (undo-tree-id9656 . -484) (undo-tree-id9657 . -483) (undo-tree-id9658 . -484) (undo-tree-id9659 . -483) (undo-tree-id9660 . -485) (undo-tree-id9661 . -484) (undo-tree-id9662 . -485) (undo-tree-id9663 . -485) (undo-tree-id9664 . -484) (undo-tree-id9665 . -485) (undo-tree-id9666 . -485) (undo-tree-id9667 . -484) (undo-tree-id9668 . -485) (undo-tree-id9669 . -484) (undo-tree-id9670 . -485) (undo-tree-id9671 . -484) (undo-tree-id9672 . -484) (undo-tree-id9673 . -484) (undo-tree-id9674 . -484) (undo-tree-id9675 . -484) (undo-tree-id9676 . -484) (undo-tree-id9677 . -484) (undo-tree-id9678 . -484) (undo-tree-id9679 . -484) (undo-tree-id9680 . -484) (undo-tree-id9681 . -484) (undo-tree-id9682 . -484) (undo-tree-id9683 . -484) (undo-tree-id9684 . -484) (undo-tree-id9685 . -484) (undo-tree-id9686 . -535) (undo-tree-id9687 . -538) (undo-tree-id9688 . -525) (undo-tree-id9689 . -527) (undo-tree-id9690 . -525) (undo-tree-id9691 . -532) (undo-tree-id9692 . -535) (undo-tree-id9693 . -538) 485) nil (23740 41061 565970 904000) 0 nil]) ((483 . 486) (478 . 483) (#("then" 0 4 (fontified t)) . 478) (undo-tree-id9694 . -4) (undo-tree-id9695 . -4) (undo-tree-id9696 . -4) (undo-tree-id9697 . -1) (undo-tree-id9698 . -1) (undo-tree-id9699 . -1) (undo-tree-id9700 . -1) (undo-tree-id9701 . -1) (undo-tree-id9702 . -1) (undo-tree-id9703 . -1) (undo-tree-id9704 . -2) (undo-tree-id9705 . -1) (undo-tree-id9706 . -2) (undo-tree-id9707 . -2) (undo-tree-id9708 . -1) (undo-tree-id9709 . -2) (undo-tree-id9710 . -2) (undo-tree-id9711 . -1) (undo-tree-id9712 . -2) (undo-tree-id9713 . -2) (undo-tree-id9714 . -2) (undo-tree-id9715 . -1) (undo-tree-id9716 . -2) (undo-tree-id9717 . -1) (undo-tree-id9718 . -2) (undo-tree-id9719 . -2) (undo-tree-id9720 . -2) (undo-tree-id9721 . -2) (undo-tree-id9722 . -2) (undo-tree-id9723 . -2) (undo-tree-id9724 . -2) (undo-tree-id9725 . -2) (undo-tree-id9726 . -4) (undo-tree-id9727 . -2) (undo-tree-id9728 . -2) (undo-tree-id9729 . -2) (undo-tree-id9730 . -2) (undo-tree-id9731 . -2) (undo-tree-id9732 . -2) (undo-tree-id9733 . -2) (undo-tree-id9734 . -2) (undo-tree-id9735 . -2) (undo-tree-id9736 . -2) (undo-tree-id9737 . -2) (undo-tree-id9738 . -2) (undo-tree-id9739 . -2) (undo-tree-id9740 . -2) (undo-tree-id9741 . -2) (undo-tree-id9742 . -2) (undo-tree-id9743 . -2) (undo-tree-id9744 . -2) (undo-tree-id9745 . -2) (undo-tree-id9746 . -2) 480) nil (23740 41022 421522 510000) 0 nil]) ((577 . 579)) nil (23740 41022 421529 190000) 0 nil]) ((641 . 642)) nil (23740 41022 421530 789000) 0 nil]) ((nil rear-nonsticky nil 514 . 515) (#("
" 0 1 (fontified nil)) . -614) (490 . 615) 440) nil (23740 41022 421533 801000) 0 nil]) ((490 . 515) (489 . 491) (#("{" 0 1 (fontified nil)) . -489) (483 . 490) (482 . 484) (#("(" 0 1 (fontified nil)) . -482) (477 . 483) (#("/" 0 1 (fontified t)) . -477) (undo-tree-id9747 . -1) (undo-tree-id9748 . -1) 478 (477 . 478) (#(";" 0 1 (fontified t)) . -477) (undo-tree-id9749 . -1) (undo-tree-id9750 . -1) 478) nil (23740 41022 421544 302000) 0 nil]) ((#("                        if let Ok(tup) = res {
                            println!(\"{}\", tup.1);
                        }
" 0 24 (fontified t) 24 26 (fontified t face font-lock-keyword-face) 26 27 (fontified t) 27 30 (fontified t face font-lock-keyword-face) 30 31 (fontified t) 31 33 (fontified t face font-lock-type-face) 33 45 (fontified t) 45 46 (fontified t) 46 47 (fontified t) 47 75 (fontified t) 75 83 (fontified t face rust-builtin-formatting-macro-face) 83 84 (fontified t) 84 85 (fontified t face font-lock-string-face) 85 87 (fontified t face rust-string-interpolation-face) 87 88 (fontified t face font-lock-string-face) 88 95 (fontified t) 95 97 (fontified t) 97 98 (fontified t) 98 122 (fontified t) 122 123 (fontified t) 123 124 (fontified t)) . 479) (undo-tree-id9751 . -123) (undo-tree-id9752 . -32) (undo-tree-id9753 . -123) (undo-tree-id9754 . 27) (undo-tree-id9755 . -94) (undo-tree-id9756 . -32) (undo-tree-id9757 . -123) (undo-tree-id9758 . -123) (undo-tree-id9759 . -123) 602 (t 23740 40977 587030 690000)) nil (23740 41022 421558 129000) 0 nil]) ((575 . 576)) nil (23740 40977 479885 32000) 0 nil]) ((572 . 574) (#("1" 0 1 (fontified t)) . -572) (undo-tree-id9542 . -1) (undo-tree-id9543 . -1) 573 (572 . 573) (567 . 572) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 567) (566 . 567) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 566) (565 . 566) (564 . 566) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -564) (564 . 565) (563 . 565) (#("\"" 0 1 (fontified nil)) . -563) (563 . 564) (562 . 564) (#("(" 0 1 (fontified nil)) . -562) (555 . 563) (#("i" 0 1 (fontified t)) . -555) (undo-tree-id9544 . -1) (undo-tree-id9545 . -1) 556 (554 . 556) (525 . 554) 502) nil (23740 40977 479907 195000) 0 nil]) ((525 . 550) (524 . 526) (#("{" 0 1 (fontified nil)) . -524) (517 . 525) (#(")" 0 1 (fontified nil)) . 517) (513 . 517) (512 . 514) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -512) (510 . 513)) nil (23740 40977 479915 506000) 0 nil]) ((447 . 448) (445 . 447) (#("tup" 0 3 (fontified t face font-lock-variable-name-face)) . 445) (undo-tree-id9546 . -2) (undo-tree-id9547 . -2) 447) nil (23740 40977 479921 549000) 0 nil]) ((506 . 510) (503 . 506) (478 . 503) 450) nil (23740 40977 479924 514000) 0 nil]) ((445 . 451) (441 . 445) (t 23740 40903 104060 283000)) nil (23740 40977 479926 705000) 0 nil]) ((1 . 659) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection.read_response();
                        result})
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 274 (fontified t) 274 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 321 (fontified t) 321 366 (fontified t) 366 414 (fontified t) 414 415 (fontified t) 415 416 (fontified t) 416 464 (fontified t) 464 466 (fontified t) 466 467 (fontified t) 467 468 (fontified t) 468 492 (fontified t) 492 498 (fontified t) 498 499 (fontified t) 499 501 (fontified t) 501 561 (fontified t) 561 571 (fontified t face font-lock-preprocessor-face) 571 580 (fontified t) 580 582 (fontified t face font-lock-type-face) 582 584 (fontified t) 584 589 (fontified t) 589 595 (fontified t) 595 605 (fontified t) 605 607 (fontified t face font-lock-type-face) 607 612 (fontified t) 612 635 (fontified t) 635 636 (rear-nonsticky t fontified t) 636 637 (fontified t)) . 1) (undo-tree-id9462 . -499) (undo-tree-id9463 . -635) (undo-tree-id9464 . -635) (undo-tree-id9465 . 637) (undo-tree-id9466 . 171) (undo-tree-id9467 . -317) (undo-tree-id9468 . -317) (undo-tree-id9469 . -317) (undo-tree-id9470 . -317) (undo-tree-id9471 . -499) (undo-tree-id9472 . -499) (undo-tree-id9473 . -499) (undo-tree-id9474 . -499) (undo-tree-id9475 . -499) (undo-tree-id9476 . -317) (undo-tree-id9477 . -499) (undo-tree-id9478 . -499) (undo-tree-id9479 . -466) (undo-tree-id9480 . -466) (undo-tree-id9481 . -466) (undo-tree-id9482 . -466) (undo-tree-id9483 . -466) (undo-tree-id9484 . -466) (undo-tree-id9485 . -466) (undo-tree-id9486 . -466) (undo-tree-id9487 . -466) (undo-tree-id9488 . -466) (undo-tree-id9489 . -466) (undo-tree-id9490 . -466) (undo-tree-id9491 . -466) (undo-tree-id9492 . -466) (undo-tree-id9493 . -466) (undo-tree-id9494 . -466) (undo-tree-id9495 . -466) (undo-tree-id9496 . -466) (undo-tree-id9497 . -466) (undo-tree-id9498 . -466) (undo-tree-id9499 . -466) (undo-tree-id9500 . -465) (undo-tree-id9501 . -466) (undo-tree-id9502 . -465) (undo-tree-id9503 . -466) (undo-tree-id9504 . -465) (undo-tree-id9505 . -466) (undo-tree-id9506 . -465) (undo-tree-id9507 . -466) (undo-tree-id9508 . -318) (undo-tree-id9509 . -319) (undo-tree-id9510 . -318) (undo-tree-id9511 . -319) (undo-tree-id9512 . -465) (undo-tree-id9513 . -466) (undo-tree-id9514 . -465) (undo-tree-id9515 . -466) (undo-tree-id9516 . -464) (undo-tree-id9517 . -465) (undo-tree-id9518 . -465) (undo-tree-id9519 . -466) (undo-tree-id9520 . -465) (undo-tree-id9521 . -466) (undo-tree-id9522 . -465) (undo-tree-id9523 . -466) (undo-tree-id9524 . -465) (undo-tree-id9525 . -466) (undo-tree-id9526 . -318) (undo-tree-id9527 . -319) (undo-tree-id9528 . -318) (undo-tree-id9529 . -319) (undo-tree-id9530 . -465) (undo-tree-id9531 . -466) (undo-tree-id9532 . -465) (undo-tree-id9533 . -466) (undo-tree-id9534 . -464) (undo-tree-id9535 . -465) (undo-tree-id9536 . 173) (undo-tree-id9537 . -465) (undo-tree-id9538 . 172) (undo-tree-id9539 . -465) (undo-tree-id9540 . 172) (undo-tree-id9541 . -466) 467) nil (23740 40902 993565 123000) 0 nil] [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil nil ((1 . 689) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection.read_response().then(|result| match result {
                            Ok(result_tuple) => {
                                println!(\"{:?}\", result_tuple.1);
                                result_tuple.0
                            }
                            Err(err) => panic!(\"nope\"),
                        })
                    })
            })
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 481 (fontified t) 481 486 (fontified t face font-lock-keyword-face) 486 510 (fontified t) 510 524 (fontified t) 524 526 (fontified t face font-lock-type-face) 526 542 (fontified t) 542 543 (fontified t syntax-table #2=(1)) 543 546 (fontified t) 546 578 (fontified t) 578 586 (fontified t face rust-builtin-formatting-macro-face) 586 587 (fontified t) 587 588 (fontified t face font-lock-string-face) 588 592 (fontified t face rust-string-interpolation-face) 592 593 (fontified t face font-lock-string-face) 593 689 (fontified t) 689 717 (fontified t) 717 720 (fontified t face font-lock-type-face) 720 727 (fontified t) 727 728 (syntax-table #2# fontified t) 728 729 (fontified t) 729 735 (fontified t face font-lock-preprocessor-face) 735 736 (fontified t) 736 742 (fontified t face font-lock-string-face) 742 744 (fontified t) 744 810 (fontified t) 810 817 (fontified t) 817 819 (fontified t)) . 1) (undo-tree-id7602 . -810) (undo-tree-id7603 . -810) (undo-tree-id7604 . 9) (undo-tree-id7605 . -810) (undo-tree-id7606 . -810) (undo-tree-id7607 . -810) (undo-tree-id7608 . -810) (undo-tree-id7610 . -810) (undo-tree-id7612 . -810) (undo-tree-id7614 . -810) (undo-tree-id7616 . -810) (undo-tree-id7618 . -810) (undo-tree-id7620 . -810) (undo-tree-id7622 . -810) (undo-tree-id7624 . -810) (undo-tree-id7626 . -810) (undo-tree-id7628 . -169) (undo-tree-id7630 . -169) (undo-tree-id7632 . -250) (undo-tree-id7634 . -467) (undo-tree-id7636 . -467) (undo-tree-id7638 . -250) (undo-tree-id7640 . -169) (undo-tree-id7642 . -169) (undo-tree-id7644 . -795) (undo-tree-id7646 . -795) (undo-tree-id7648 . -810) (undo-tree-id7650 . -795) (undo-tree-id7652 . -795) (undo-tree-id7653 . -795) (undo-tree-id7655 . -810) (undo-tree-id7657 . -810) 796) ((1 . 820) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(connect.and_then(|connection| {
        redis::cmd(\"SUBSCRIBE\")
            .arg(\"timeline:hashtag:a\")
            .query_async(connection)
            .map(|(connection, result)| {
                connection.read_response().then(|result| match result {
                    Ok(result_tuple) => {
                        println!(\"{:?}\", result_tuple.1);
                        result_tuple.0
                    }
                    Err(err) => panic!(\"nope\"),
                })
            })
    }));
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 220 (fontified t) 220 225 (fontified t face font-lock-constant-face) 225 231 (fontified t) 231 242 (fontified t face font-lock-string-face) 242 261 (fontified t) 261 281 (fontified t face font-lock-string-face) 281 419 (fontified t) 419 424 (fontified t face font-lock-keyword-face) 424 454 (fontified t) 454 456 (fontified t face font-lock-type-face) 456 472 (fontified t) 472 473 (fontified t syntax-table #2#) 473 500 (fontified t) 500 508 (fontified t face rust-builtin-formatting-macro-face) 508 509 (fontified t) 509 510 (fontified t face font-lock-string-face) 510 514 (fontified t face rust-string-interpolation-face) 514 515 (fontified t face font-lock-string-face) 515 534 (fontified t) 534 615 (fontified t) 615 618 (fontified t face font-lock-type-face) 618 625 (fontified t) 625 626 (fontified t syntax-table #2#) 626 627 (fontified t) 627 633 (fontified t face font-lock-preprocessor-face) 633 634 (fontified t) 634 640 (fontified t face font-lock-string-face) 640 677 (fontified t) 677 685 (fontified t) 685 688 (fontified t)) . 1) (undo-tree-id7686 . -677) (undo-tree-id7687 . -677) (undo-tree-id7688 . -677) (undo-tree-id7689 . -677) (undo-tree-id7690 . -405) (undo-tree-id7691 . -409) (undo-tree-id7692 . -220) (undo-tree-id7693 . -676) (undo-tree-id7694 . -169) (undo-tree-id7695 . -179) (undo-tree-id7696 . -169) (undo-tree-id7697 . -179) (undo-tree-id7698 . -169) (undo-tree-id7699 . -174) (undo-tree-id7700 . -169) (undo-tree-id7701 . -174) (undo-tree-id7702 . -220) (undo-tree-id7703 . -225) (undo-tree-id7704 . -405) (undo-tree-id7705 . -409) (undo-tree-id7706 . -405) (undo-tree-id7707 . -409) (undo-tree-id7708 . -220) (undo-tree-id7709 . -676) (undo-tree-id7710 . -169) (undo-tree-id7711 . -179) (undo-tree-id7712 . -169) (undo-tree-id7713 . -179) (undo-tree-id7714 . -662) (undo-tree-id7715 . -677) (undo-tree-id7716 . -662) (undo-tree-id7717 . -662) (undo-tree-id7718 . -677) (undo-tree-id7719 . -662) (undo-tree-id7720 . -662) (undo-tree-id7721 . -677) (undo-tree-id7722 . -662) (undo-tree-id7723 . -677) (undo-tree-id7724 . -662) (undo-tree-id7725 . -677) (undo-tree-id7726 . -643) (undo-tree-id7727 . -662) (undo-tree-id7728 . -643) (undo-tree-id7729 . -643) (undo-tree-id7730 . -662) (undo-tree-id7731 . -643) (undo-tree-id7732 . -643) (undo-tree-id7733 . -662) (undo-tree-id7734 . -643) (undo-tree-id7735 . -662) (undo-tree-id7736 . -643) (undo-tree-id7737 . -662) (undo-tree-id7738 . -595) (undo-tree-id7739 . -643) (undo-tree-id7740 . -595) (undo-tree-id7741 . -595) (undo-tree-id7742 . -643) (undo-tree-id7743 . -595) (undo-tree-id7744 . -595) (undo-tree-id7745 . -643) (undo-tree-id7746 . -595) (undo-tree-id7747 . -643) (undo-tree-id7748 . -595) (undo-tree-id7749 . -643) (undo-tree-id7750 . -573) (undo-tree-id7751 . -595) (undo-tree-id7752 . -573) (undo-tree-id7753 . -573) (undo-tree-id7754 . -595) (undo-tree-id7755 . -573) (undo-tree-id7756 . -573) (undo-tree-id7757 . -595) (undo-tree-id7758 . -573) (undo-tree-id7759 . -595) (undo-tree-id7760 . -573) (undo-tree-id7761 . -595) (undo-tree-id7762 . -534) (undo-tree-id7763 . -573) (undo-tree-id7764 . -534) (undo-tree-id7765 . -534) (undo-tree-id7766 . -573) (undo-tree-id7767 . -534) (undo-tree-id7768 . -534) (undo-tree-id7769 . -573) (undo-tree-id7770 . -534) (undo-tree-id7771 . -573) (undo-tree-id7772 . -534) (undo-tree-id7773 . -573) (undo-tree-id7774 . -476) (undo-tree-id7775 . -534) (undo-tree-id7776 . -476) (undo-tree-id7777 . -476) (undo-tree-id7778 . -534) (undo-tree-id7779 . -476) (undo-tree-id7780 . -476) (undo-tree-id7781 . -534) (undo-tree-id7782 . -476) (undo-tree-id7783 . -534) (undo-tree-id7784 . -476) (undo-tree-id7785 . -534) (undo-tree-id7786 . -434) (undo-tree-id7787 . -476) (undo-tree-id7788 . -434) (undo-tree-id7789 . -434) (undo-tree-id7790 . -476) (undo-tree-id7791 . -434) (undo-tree-id7792 . -434) (undo-tree-id7793 . -476) (undo-tree-id7794 . -434) (undo-tree-id7795 . -476) (undo-tree-id7796 . -434) (undo-tree-id7797 . -476) (undo-tree-id7798 . -362) (undo-tree-id7799 . -434) (undo-tree-id7800 . -362) (undo-tree-id7801 . -362) (undo-tree-id7802 . -434) (undo-tree-id7803 . -362) (undo-tree-id7804 . -362) (undo-tree-id7805 . -434) (undo-tree-id7806 . -362) (undo-tree-id7807 . -434) (undo-tree-id7808 . -362) (undo-tree-id7809 . -434) (undo-tree-id7810 . -320) (undo-tree-id7811 . -362) (undo-tree-id7812 . -320) (undo-tree-id7813 . -320) (undo-tree-id7814 . -362) (undo-tree-id7815 . -320) (undo-tree-id7816 . -320) (undo-tree-id7817 . -362) (undo-tree-id7818 . -320) (undo-tree-id7819 . -362) (undo-tree-id7820 . -320) (undo-tree-id7821 . -362) (undo-tree-id7822 . -283) (undo-tree-id7823 . -320) (undo-tree-id7824 . -283) (undo-tree-id7825 . -283) (undo-tree-id7826 . -320) (undo-tree-id7827 . -283) (undo-tree-id7828 . -283) (undo-tree-id7829 . -320) (undo-tree-id7830 . -283) (undo-tree-id7831 . -320) (undo-tree-id7832 . -283) (undo-tree-id7833 . -320) (undo-tree-id7834 . -244) (undo-tree-id7835 . -283) (undo-tree-id7836 . -244) (undo-tree-id7837 . -244) (undo-tree-id7838 . -283) (undo-tree-id7839 . -244) (undo-tree-id7840 . -244) (undo-tree-id7841 . -283) (undo-tree-id7842 . -244) (undo-tree-id7843 . -283) (undo-tree-id7844 . -244) (undo-tree-id7845 . -283) (undo-tree-id7846 . -212) (undo-tree-id7847 . -244) (undo-tree-id7848 . -212) (undo-tree-id7849 . -212) (undo-tree-id7850 . -244) (undo-tree-id7851 . -212) (undo-tree-id7852 . -212) (undo-tree-id7853 . -244) (undo-tree-id7854 . -212) (undo-tree-id7855 . -244) (undo-tree-id7856 . -212) (undo-tree-id7857 . -244) (undo-tree-id7858 . -165) (undo-tree-id7859 . -212) (undo-tree-id7860 . -165) (undo-tree-id7861 . -165) (undo-tree-id7862 . -212) (undo-tree-id7863 . -165) (undo-tree-id7864 . -165) (undo-tree-id7865 . -212) (undo-tree-id7866 . -165) (undo-tree-id7867 . -212) (undo-tree-id7868 . -165) (undo-tree-id7869 . -212) (undo-tree-id7870 . -212) (undo-tree-id7871 . -165) (undo-tree-id7872 . -212) (undo-tree-id7873 . -212) (undo-tree-id7874 . -165) (undo-tree-id7875 . -212) (undo-tree-id7876 . -212) (undo-tree-id7877 . -165) (undo-tree-id7878 . -212) (undo-tree-id7879 . -165) (undo-tree-id7880 . -212) (undo-tree-id7881 . -165) (undo-tree-id7882 . -213) (undo-tree-id7883 . -212) (undo-tree-id7884 . -213) (undo-tree-id7885 . -213) (undo-tree-id7886 . -212) (undo-tree-id7887 . -213) (undo-tree-id7888 . -213) (undo-tree-id7889 . -212) (undo-tree-id7890 . -213) (undo-tree-id7891 . -212) (undo-tree-id7892 . -213) (undo-tree-id7893 . -212) (undo-tree-id7894 . -214) (undo-tree-id7895 . -213) (undo-tree-id7896 . -214) (undo-tree-id7897 . -214) (undo-tree-id7898 . -213) (undo-tree-id7899 . -214) (undo-tree-id7900 . -214) (undo-tree-id7901 . -213) (undo-tree-id7902 . -214) (undo-tree-id7903 . -213) (undo-tree-id7904 . -214) (undo-tree-id7905 . -213) (undo-tree-id7906 . -215) (undo-tree-id7907 . -214) (undo-tree-id7908 . -215) (undo-tree-id7909 . -215) (undo-tree-id7910 . -214) (undo-tree-id7911 . -215) (undo-tree-id7912 . -215) (undo-tree-id7913 . -214) (undo-tree-id7914 . -215) (undo-tree-id7915 . -214) (undo-tree-id7916 . -215) (undo-tree-id7917 . -214) (undo-tree-id7918 . -216) (undo-tree-id7919 . -215) (undo-tree-id7920 . -216) (undo-tree-id7921 . -216) (undo-tree-id7922 . -215) (undo-tree-id7923 . -216) (undo-tree-id7924 . -216) (undo-tree-id7925 . -215) (undo-tree-id7926 . -216) (undo-tree-id7927 . -215) (undo-tree-id7928 . -216) (undo-tree-id7929 . -215) (undo-tree-id7930 . -217) (undo-tree-id7931 . -216) (undo-tree-id7932 . -217) (undo-tree-id7933 . -217) (undo-tree-id7934 . -216) (undo-tree-id7935 . -217) (undo-tree-id7936 . -217) (undo-tree-id7937 . -216) (undo-tree-id7938 . -217) (undo-tree-id7939 . -216) (undo-tree-id7940 . -217) (undo-tree-id7941 . -216) (undo-tree-id7942 . -218) (undo-tree-id7943 . -217) (undo-tree-id7944 . -218) (undo-tree-id7945 . -218) (undo-tree-id7946 . -217) (undo-tree-id7947 . -218) (undo-tree-id7948 . -218) (undo-tree-id7949 . -217) (undo-tree-id7950 . -218) (undo-tree-id7951 . -217) (undo-tree-id7952 . -218) (undo-tree-id7953 . -217) (undo-tree-id7954 . -219) (undo-tree-id7955 . -218) (undo-tree-id7956 . -219) (undo-tree-id7957 . -219) (undo-tree-id7958 . -218) (undo-tree-id7959 . -219) (undo-tree-id7960 . -219) (undo-tree-id7961 . -218) (undo-tree-id7962 . -219) (undo-tree-id7963 . -218) (undo-tree-id7964 . -219) (undo-tree-id7965 . -218) (undo-tree-id7966 . -220) (undo-tree-id7967 . -219) (undo-tree-id7968 . -220) (undo-tree-id7969 . -220) (undo-tree-id7970 . -219) (undo-tree-id7971 . -220) (undo-tree-id7972 . -220) (undo-tree-id7973 . -219) (undo-tree-id7974 . -220) (undo-tree-id7975 . -219) (undo-tree-id7976 . -220) (undo-tree-id7977 . -219) (undo-tree-id7978 . -221) (undo-tree-id7979 . -220) (undo-tree-id7980 . -221) (undo-tree-id7981 . -221) (undo-tree-id7982 . -220) (undo-tree-id7983 . -221) (undo-tree-id7984 . -221) (undo-tree-id7985 . -220) (undo-tree-id7986 . -221) (undo-tree-id7987 . -221) (undo-tree-id7988 . -221) (undo-tree-id7989 . -220) (undo-tree-id7990 . -221) (undo-tree-id7991 . -220) (undo-tree-id7992 . -4) (undo-tree-id7993 . -9) (undo-tree-id7994 . -64) (undo-tree-id7995 . -69) (undo-tree-id7996 . -220) (undo-tree-id7997 . -225) (undo-tree-id7998 . -221) (undo-tree-id7999 . -221) (undo-tree-id8000 . -221) (undo-tree-id8001 . -221) (undo-tree-id8002 . -221) (undo-tree-id8003 . -221) (undo-tree-id8004 . -221) (undo-tree-id8005 . -221) (undo-tree-id8006 . -221) (undo-tree-id8007 . -221) (undo-tree-id8008 . -221) (undo-tree-id8009 . -221) (t 23740 40869 904220 220000)) (23740 40869 875655 319000) 0 nil]) ((#("            .then(|result| {
                }),
" 0 29 (fontified t) 29 45 (fontified t) 45 49 (fontified t)) . 811) (undo-tree-id7658 . -41) (undo-tree-id7659 . -12) (undo-tree-id7660 . -41) (undo-tree-id7661 . -45) (undo-tree-id7662 . -45) (undo-tree-id7664 . -17) (undo-tree-id7666 . -17) (undo-tree-id7668 . -12) (undo-tree-id7669 . -41) (undo-tree-id7671 . -12) (undo-tree-id7673 . -41) (undo-tree-id7674 . -41) (undo-tree-id7676 . -12) (undo-tree-id7678 . -12) 852) ((811 . 860)) (23740 40877 355389 446000) 0 nil]) ((#("assert_eq!(result, Ok(()));
                Ok(())
            " 0 10 (fontified t face font-lock-preprocessor-face) 10 19 (fontified t) 19 21 (fontified t face font-lock-type-face) 21 44 (fontified t) 44 46 (fontified t face font-lock-type-face) 46 63 (fontified t)) . 856) (undo-tree-id7679 . -63) (undo-tree-id7680 . -63) (undo-tree-id7681 . -3) (undo-tree-id7682 . -4) (undo-tree-id7683 . -63) (undo-tree-id7684 . -63) (undo-tree-id7685 . -63) 919 (t 23740 40831 597736 548000)) ((856 . 919)) (23740 40877 559299 600000) 0 nil]) ((1 . 932) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection.read_response().then(|result| match result {
                            Ok(result_tuple) => {
                                println!(\"{:?}\", result_tuple.1);
                                result_tuple.0
                            }
                            Err(err) => panic!(\"nope\")
                        })
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 366 (fontified t) 366 415 (fontified t) 415 416 (fontified t) 416 481 (fontified t) 481 486 (fontified t face font-lock-keyword-face) 486 496 (fontified t) 496 500 (fontified t) 500 510 (fontified t) 510 524 (fontified t) 524 526 (fontified t face font-lock-type-face) 526 542 (fontified t) 542 543 (fontified t syntax-table #2#) 543 546 (fontified t) 546 578 (fontified t) 578 586 (fontified t face rust-builtin-formatting-macro-face) 586 587 (fontified t) 587 588 (fontified t face font-lock-string-face) 588 592 (fontified t face rust-string-interpolation-face) 592 593 (fontified t face font-lock-string-face) 593 611 (fontified t) 611 612 (fontified t) 612 644 (fontified t) 644 658 (fontified t) 658 659 (fontified t) 659 689 (fontified t) 689 717 (fontified t) 717 720 (fontified t face font-lock-type-face) 720 727 (fontified t) 727 728 (fontified t syntax-table #2#) 728 729 (fontified t) 729 735 (fontified t face font-lock-preprocessor-face) 735 736 (fontified t) 736 741 (fontified t face font-lock-string-face) 741 742 (fontified t face font-lock-string-face) 742 743 (fontified t) 743 744 (fontified t) 744 771 (fontified t) 771 793 (fontified t) 793 794 (fontified t) 794 808 (fontified t) 808 809 (fontified t) 809 820 (fontified t) 820 824 (fontified t) 824 838 (fontified t) 838 854 (fontified t) 854 864 (fontified t face font-lock-preprocessor-face) 864 865 (fontified t) 865 871 (fontified t) 871 873 (fontified t) 873 875 (fontified t face font-lock-type-face) 875 882 (fontified t) 882 898 (fontified t) 898 900 (fontified t face font-lock-type-face) 900 905 (fontified t) 905 920 (fontified t) 920 921 (fontified t) 921 928 (fontified t) 928 930 (fontified t)) . 1) (undo-tree-id7356 . -744) (undo-tree-id7357 . -416) (undo-tree-id7358 . 159) (undo-tree-id7359 . -416) (undo-tree-id7360 . -744) (undo-tree-id7361 . 189) (undo-tree-id7362 . -858) (undo-tree-id7363 . -857) (undo-tree-id7364 . -859) (undo-tree-id7365 . -862) (undo-tree-id7366 . -859) (undo-tree-id7367 . -859) (undo-tree-id7369 . -644) (undo-tree-id7371 . -644) (undo-tree-id7373 . -644) (undo-tree-id7374 . -740) (undo-tree-id7376 . -729) (undo-tree-id7378 . -729) (undo-tree-id7380 . -729) (undo-tree-id7382 . -729) (undo-tree-id7384 . -729) (undo-tree-id7386 . -729) (undo-tree-id7388 . -729) (undo-tree-id7390 . -729) (undo-tree-id7392 . -729) (undo-tree-id7394 . -729) (undo-tree-id7396 . -729) (undo-tree-id7398 . -729) (undo-tree-id7400 . -729) (undo-tree-id7402 . -735) (undo-tree-id7404 . -735) (undo-tree-id7406 . -736) (undo-tree-id7408 . -736) (undo-tree-id7410 . -736) (undo-tree-id7412 . -736) (undo-tree-id7414 . -737) (undo-tree-id7416 . -736) (undo-tree-id7418 . -467) (undo-tree-id7420 . -250) (undo-tree-id7422 . -854) (undo-tree-id7424 . -854) (undo-tree-id7426 . -854) (undo-tree-id7428 . -854) (undo-tree-id7430 . -854) (undo-tree-id7432 . -854) (undo-tree-id7434 . -250) (undo-tree-id7436 . -854) (undo-tree-id7438 . -854) (undo-tree-id7440 . -854) (undo-tree-id7442 . -854) (undo-tree-id7444 . -854) (undo-tree-id7446 . -854) (undo-tree-id7448 . -738) (undo-tree-id7450 . -467) (undo-tree-id7452 . -250) (undo-tree-id7454 . -854) (undo-tree-id7456 . -854) (undo-tree-id7458 . -854) (undo-tree-id7460 . -854) (undo-tree-id7462 . -854) (undo-tree-id7464 . -854) (undo-tree-id7466 . -739) (undo-tree-id7468 . -467) (undo-tree-id7470 . -250) (undo-tree-id7472 . -854) (undo-tree-id7474 . -854) (undo-tree-id7476 . -854) (undo-tree-id7478 . -854) (undo-tree-id7480 . -854) (undo-tree-id7482 . -854) (undo-tree-id7484 . -740) (undo-tree-id7486 . -467) (undo-tree-id7488 . -250) (undo-tree-id7490 . -854) (undo-tree-id7492 . -854) (undo-tree-id7494 . -854) (undo-tree-id7496 . -854) (undo-tree-id7498 . -854) (undo-tree-id7500 . -854) (undo-tree-id7502 . -250) (undo-tree-id7504 . -854) (undo-tree-id7506 . -854) (undo-tree-id7508 . -854) (undo-tree-id7510 . -854) (undo-tree-id7512 . -854) (undo-tree-id7514 . -854) (undo-tree-id7516 . -741) (undo-tree-id7518 . -467) (undo-tree-id7520 . -250) (undo-tree-id7522 . -854) (undo-tree-id7524 . -854) (undo-tree-id7526 . -854) (undo-tree-id7528 . -854) (undo-tree-id7530 . -854) (undo-tree-id7532 . -854) (undo-tree-id7534 . -740) (undo-tree-id7536 . -854) (undo-tree-id7538 . -854) (undo-tree-id7540 . -854) (undo-tree-id7542 . -854) (undo-tree-id7544 . -854) (undo-tree-id7546 . -854) (undo-tree-id7548 . -250) (undo-tree-id7550 . -467) (undo-tree-id7552 . -467) (undo-tree-id7554 . -250) (undo-tree-id7556 . -854) (undo-tree-id7558 . -854) (undo-tree-id7560 . -854) (undo-tree-id7562 . -854) (undo-tree-id7564 . -854) (undo-tree-id7566 . -854) 741) ((1 . 931) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection.read_response().then(|result| match result {
                            Ok(result_tuple) => {
                                println!(\"{:?}\", result_tuple.1);
                                result_tuple.0
                            }
                            Err(err) => panic!(\"nope\"),
                        })
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 481 (fontified t) 481 486 (fontified t face font-lock-keyword-face) 486 500 (fontified t) 500 510 (fontified t) 510 524 (fontified t) 524 526 (fontified t face font-lock-type-face) 526 542 (fontified t) 542 543 (fontified t syntax-table #2#) 543 546 (fontified t) 546 578 (fontified t) 578 586 (fontified t face rust-builtin-formatting-macro-face) 586 587 (fontified t) 587 588 (fontified t face font-lock-string-face) 588 592 (fontified t face rust-string-interpolation-face) 592 593 (fontified t face font-lock-string-face) 593 689 (fontified t) 689 717 (fontified t) 717 720 (fontified t face font-lock-type-face) 720 727 (fontified t) 727 728 (fontified t syntax-table #2#) 728 729 (fontified t) 729 735 (fontified t face font-lock-preprocessor-face) 735 736 (fontified t) 736 742 (fontified t face font-lock-string-face) 742 744 (fontified t) 744 810 (fontified t) 810 839 (fontified t) 839 855 (fontified t) 855 865 (fontified t face font-lock-preprocessor-face) 865 874 (fontified t) 874 876 (fontified t face font-lock-type-face) 876 899 (fontified t) 899 901 (fontified t face font-lock-type-face) 901 918 (fontified t) 918 922 (fontified t) 922 929 (fontified t) 929 931 (fontified t)) . 1) (undo-tree-id8010 . -851) (undo-tree-id8011 . -810) (undo-tree-id8012 . 9) (undo-tree-id8013 . -822) (undo-tree-id8014 . -851) (undo-tree-id8015 . -858) (undo-tree-id8016 . -859) (undo-tree-id8017 . -795) (undo-tree-id8018 . -795) (undo-tree-id8019 . -795) (undo-tree-id8020 . -795) (undo-tree-id8021 . -795) (undo-tree-id8022 . -795) (undo-tree-id8023 . -795) (undo-tree-id8024 . -795) (undo-tree-id8025 . -795) (undo-tree-id8026 . -795) (undo-tree-id8027 . -795) (undo-tree-id8028 . -795) (undo-tree-id8029 . -795) (undo-tree-id8030 . -795) (undo-tree-id8031 . -795) (undo-tree-id8032 . -795) (undo-tree-id8033 . -467) (undo-tree-id8034 . -471) (undo-tree-id8035 . -250) (undo-tree-id8036 . -794) (undo-tree-id8037 . -169) (undo-tree-id8038 . -179) (undo-tree-id8039 . -169) (undo-tree-id8040 . -179) (undo-tree-id8041 . -851) (undo-tree-id8042 . -795) (undo-tree-id8043 . -851) (undo-tree-id8044 . -851) (undo-tree-id8045 . -795) (undo-tree-id8046 . -851) (undo-tree-id8047 . -851) (undo-tree-id8048 . -795) (undo-tree-id8049 . -851) (undo-tree-id8050 . -795) (undo-tree-id8051 . -851) (undo-tree-id8052 . -795) (undo-tree-id8053 . -918) (undo-tree-id8054 . -851) (undo-tree-id8055 . -918) (undo-tree-id8056 . -918) (undo-tree-id8057 . -851) (undo-tree-id8058 . -918) (undo-tree-id8059 . -918) (undo-tree-id8060 . -851) (undo-tree-id8061 . -918) (undo-tree-id8062 . -918) (undo-tree-id8063 . -918) (undo-tree-id8064 . -851) (undo-tree-id8065 . -918) (undo-tree-id8066 . -851) (undo-tree-id8067 . -169) (undo-tree-id8068 . -174) (undo-tree-id8069 . -823) (undo-tree-id8070 . -827) (undo-tree-id8071 . -169) (undo-tree-id8072 . -174) (undo-tree-id8073 . -169) (undo-tree-id8074 . -174) (undo-tree-id8075 . -250) (undo-tree-id8076 . -255) (undo-tree-id8077 . -467) (undo-tree-id8078 . -471) (undo-tree-id8079 . -467) (undo-tree-id8080 . -471) (undo-tree-id8081 . -250) (undo-tree-id8082 . -794) (undo-tree-id8083 . -169) (undo-tree-id8084 . -179) (undo-tree-id8085 . -169) (undo-tree-id8086 . -179) (undo-tree-id8087 . -823) (undo-tree-id8088 . -827) (undo-tree-id8089 . -169) (undo-tree-id8090 . -179) (undo-tree-id8091 . -837) (undo-tree-id8092 . -838) (undo-tree-id8093 . 94) (undo-tree-id8094 . -838) (undo-tree-id8095 . 93) (undo-tree-id8096 . -918) (undo-tree-id8097 . 13) (undo-tree-id8098 . -919)) (23740 40877 742707 996000) 0 nil]) ((741 . 742) (738 . 741) (737 . 739) (#("\"" 0 1 (fontified nil)) . -737) (undo-tree-id7569 . -1) (737 . 738) (736 . 738) (#("(" 0 1 (fontified nil)) . -736) (undo-tree-id7571 . -1) (730 . 737) (#("Err(err)," 0 3 (fontified t face font-lock-type-face) 3 9 (fontified t)) . 730) (undo-tree-id7573 . -8) (undo-tree-id7575 . -7) (undo-tree-id7577 . -3) (undo-tree-id7579 . -7) (undo-tree-id7581 . -3) (undo-tree-id7583 . -7) (undo-tree-id7585 . -3) (undo-tree-id7587 . -7) (undo-tree-id7589 . -3) (undo-tree-id7591 . -7) (undo-tree-id7593 . -3) (undo-tree-id7595 . -7) (undo-tree-id7597 . -3) (undo-tree-id7599 . -3)) ((730 . 739) (#("panic!(" 0 6 (fontified nil face font-lock-preprocessor-face) 6 7 (fontified nil)) . 730) (undo-tree-id8099 . -6) (undo-tree-id8100 . -6) (undo-tree-id8101 . -6) (undo-tree-id8102 . -6) (undo-tree-id8103 . -6) (undo-tree-id8104 . -6) (undo-tree-id8105 . -6) (undo-tree-id8106 . -6) (undo-tree-id8107 . -6) (undo-tree-id8108 . -6) (undo-tree-id8109 . -6) (undo-tree-id8110 . -6) (undo-tree-id8111 . -6) (undo-tree-id8112 . -6) (736 . 737) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 736) (undo-tree-id8113 . 1) (undo-tree-id8114 . -1) (undo-tree-id8115 . -1) (undo-tree-id8116 . -1) (undo-tree-id8117 . -1) (undo-tree-id8118 . -1) (undo-tree-id8119 . -1) (undo-tree-id8120 . -1) (undo-tree-id8121 . -1) (undo-tree-id8122 . -1) (undo-tree-id8123 . -1) (undo-tree-id8124 . -1) (undo-tree-id8125 . -1) (undo-tree-id8126 . -1) (undo-tree-id8127 . -1) (#("\"" 0 1 (fontified nil)) . 737) (737 . 738) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 737) (undo-tree-id8128 . 1) (undo-tree-id8129 . -1) (undo-tree-id8130 . -1) (undo-tree-id8131 . -1) (undo-tree-id8132 . -1) (undo-tree-id8133 . -1) (undo-tree-id8134 . -1) (undo-tree-id8135 . -1) (undo-tree-id8136 . -1) (undo-tree-id8137 . -1) (undo-tree-id8138 . -1) (undo-tree-id8139 . -1) (undo-tree-id8140 . -1) (undo-tree-id8141 . -1) (undo-tree-id8142 . -1) (#("nop" 0 3 (fontified nil face font-lock-string-face)) . 738) (undo-tree-id8143 . -3) (undo-tree-id8144 . -3) (undo-tree-id8145 . -3) (undo-tree-id8146 . -3) (undo-tree-id8147 . -3) (undo-tree-id8148 . -3) (undo-tree-id8149 . -3) (undo-tree-id8150 . -3) (undo-tree-id8151 . -3) (undo-tree-id8152 . -3) (undo-tree-id8153 . -3) (undo-tree-id8154 . -3) (undo-tree-id8155 . -3) (undo-tree-id8156 . -3) (#("e" 0 1 (fontified t face font-lock-string-face)) . 741)) (23740 40877 952617 391000) 0 nil]) ((658 . 659) (657 . 658) (645 . 657) (#("result" 0 6 (fontified t)) . -645) (undo-tree-id7601 . -6) 651 (645 . 651) (#("Ok(result_tuple.0)" 0 2 (fontified t face font-lock-type-face) 2 3 (fontified t) 3 17 (fontified t) 17 18 (fontified t)) . 645)) ((645 . 663) (#("result" 0 6 (fontified nil)) . 645) (645 . 651) (#("result_tuple" 0 12 (fontified nil)) . 645) (#("." 0 1 (fontified nil)) . 657) (#("0" 0 1 (fontified t)) . 658)) (23740 40878 161787 448000) 0 nil] [nil ([nil ([nil ([nil ([nil nil ((1 . 483) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| result)
            })
            .then(|result| {
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 422 (fontified t) 422 436 (fontified t) 436 466 (fontified t) 466 482 (fontified t) 482 484 (fontified t face font-lock-type-face) 484 489 (fontified t) 489 514 (fontified t)) . 1) (undo-tree-id6845 . -435) (undo-tree-id6847 . -379) (undo-tree-id6849 . -379) (undo-tree-id6851 . -334) (undo-tree-id6853 . -334) (undo-tree-id6855 . -379) (undo-tree-id6857 . -334) (undo-tree-id6859 . -334) (undo-tree-id6861 . -334) (undo-tree-id6863 . -379) (undo-tree-id6865 . -379) (undo-tree-id6867 . -334) (undo-tree-id6869 . -379) (undo-tree-id6871 . -379) (undo-tree-id6873 . -379) (undo-tree-id6875 . -435) (undo-tree-id6877 . -435) (undo-tree-id6879 . -379) (undo-tree-id6881 . -435) (undo-tree-id6883 . -435) (undo-tree-id6885 . -435) (undo-tree-id6887 . -420) (undo-tree-id6889 . -411) (undo-tree-id6891 . -392) (undo-tree-id6893 . -390) (undo-tree-id6895 . -364) (undo-tree-id6897 . -353) (undo-tree-id6899 . -319) (undo-tree-id6901 . -298) (undo-tree-id6903 . -272) (undo-tree-id6905 . -260) (undo-tree-id6907 . -218) (undo-tree-id6909 . -450) (undo-tree-id6911 . -450) (undo-tree-id6913 . -435) (undo-tree-id6915 . -450) (undo-tree-id6917 . -450) (undo-tree-id6919 . -450) (undo-tree-id6921 . -466) (undo-tree-id6923 . -466) (undo-tree-id6925 . -450) (undo-tree-id6927 . -466) (undo-tree-id6929 . -466) (undo-tree-id6931 . -466) (undo-tree-id6933 . -466) (undo-tree-id6934 . -466) (undo-tree-id6935 . -466) (undo-tree-id6937 . -466) (undo-tree-id6939 . -466) (undo-tree-id6941 . -466) (undo-tree-id6942 . -466) (undo-tree-id6943 . -466) (undo-tree-id6944 . -466) (undo-tree-id6945 . -466) (undo-tree-id6946 . -466) (undo-tree-id6947 . -342) (undo-tree-id6948 . -353) (undo-tree-id6950 . -353) 467) ((1 . 515) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| result)
            })
            .then(|result| Ok(())),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 464 (fontified t) 464 466 (fontified t face font-lock-type-face) 466 473 (fontified t) 473 479 (fontified t) 479 482 (fontified t)) . 1) (undo-tree-id6960 . -473) (undo-tree-id6961 . -479) (undo-tree-id6962 . -10) (undo-tree-id6963 . -473) (undo-tree-id6964 . -473) (undo-tree-id6965 . -473) (undo-tree-id6966 . -473) (undo-tree-id6967 . -473) (undo-tree-id6968 . -473) (undo-tree-id6969 . -473) (undo-tree-id6970 . -342) (undo-tree-id6971 . -353) (undo-tree-id6972 . -342) (undo-tree-id6973 . -353) (undo-tree-id6974 . -342) (undo-tree-id6975 . -353) (undo-tree-id6976 . -437) (undo-tree-id6977 . -473) (undo-tree-id6978 . -437) (undo-tree-id6979 . -437) (undo-tree-id6980 . -473) (undo-tree-id6981 . -437) (undo-tree-id6982 . -437) (undo-tree-id6983 . -473) (undo-tree-id6984 . -437) (undo-tree-id6985 . -473) (undo-tree-id6986 . -437) (undo-tree-id6987 . -473) (undo-tree-id6988 . -422) (undo-tree-id6989 . -437) (undo-tree-id6990 . -422) (undo-tree-id6991 . -422) (undo-tree-id6992 . -437) (undo-tree-id6993 . -422) (undo-tree-id6994 . -422) (undo-tree-id6995 . -437) (undo-tree-id6996 . -422) (undo-tree-id6997 . -437) (undo-tree-id6998 . -422) (undo-tree-id6999 . -437) (undo-tree-id7000 . -366) (undo-tree-id7001 . -422) (undo-tree-id7002 . -366) (undo-tree-id7003 . -366) (undo-tree-id7004 . -422) (undo-tree-id7005 . -366) (undo-tree-id7006 . -366) (undo-tree-id7007 . -422) (undo-tree-id7008 . -366) (undo-tree-id7009 . -422) (undo-tree-id7010 . -366) (undo-tree-id7011 . -422) (undo-tree-id7012 . -321) (undo-tree-id7013 . -366) (undo-tree-id7014 . -321) (undo-tree-id7015 . -321) (undo-tree-id7016 . -366) (undo-tree-id7017 . -321) (undo-tree-id7018 . -321) (undo-tree-id7019 . -366) (undo-tree-id7020 . -321) (undo-tree-id7021 . -366) (undo-tree-id7022 . -321) (undo-tree-id7023 . -366) (undo-tree-id7024 . -322) (undo-tree-id7025 . -321) (undo-tree-id7026 . -322) (undo-tree-id7027 . -322) (undo-tree-id7028 . -321) (undo-tree-id7029 . -322) (undo-tree-id7030 . -322) (undo-tree-id7031 . -321) (undo-tree-id7032 . -322) (undo-tree-id7033 . -321) (undo-tree-id7034 . -322) (undo-tree-id7035 . -321) (undo-tree-id7036 . -323) (undo-tree-id7037 . -322) (undo-tree-id7038 . -323) (undo-tree-id7039 . -323) (undo-tree-id7040 . -322) (undo-tree-id7041 . -323) (undo-tree-id7042 . -323) (undo-tree-id7043 . -322) (undo-tree-id7044 . -323) (undo-tree-id7045 . -322) (undo-tree-id7046 . -323) (undo-tree-id7047 . -322) (undo-tree-id7048 . -324) (undo-tree-id7049 . -323) (undo-tree-id7050 . -324) (undo-tree-id7051 . -324) (undo-tree-id7052 . -323) (undo-tree-id7053 . -324) (undo-tree-id7054 . -324) (undo-tree-id7055 . -323) (undo-tree-id7056 . -324) (undo-tree-id7057 . -323) (undo-tree-id7058 . -324) (undo-tree-id7059 . -323) (undo-tree-id7060 . -325) (undo-tree-id7061 . -324) (undo-tree-id7062 . -325) (undo-tree-id7063 . -325) (undo-tree-id7064 . -324) (undo-tree-id7065 . -325) (undo-tree-id7066 . -325) (undo-tree-id7067 . -324) (undo-tree-id7068 . -325) (undo-tree-id7069 . -324) (undo-tree-id7070 . -325) (undo-tree-id7071 . -324) (undo-tree-id7072 . -326) (undo-tree-id7073 . -325) (undo-tree-id7074 . -326) (undo-tree-id7075 . -326) (undo-tree-id7076 . -325) (undo-tree-id7077 . -326) (undo-tree-id7078 . -326) (undo-tree-id7079 . -325) (undo-tree-id7080 . -326) (undo-tree-id7081 . -325) (undo-tree-id7082 . -326) (undo-tree-id7083 . -325) (undo-tree-id7084 . -327) (undo-tree-id7085 . -326) (undo-tree-id7086 . -327) (undo-tree-id7087 . -327) (undo-tree-id7088 . -326) (undo-tree-id7089 . -327) (undo-tree-id7090 . -327) (undo-tree-id7091 . -326) (undo-tree-id7092 . -327) (undo-tree-id7093 . -326) (undo-tree-id7094 . -327) (undo-tree-id7095 . -326) (undo-tree-id7096 . -328) (undo-tree-id7097 . -327) (undo-tree-id7098 . -328) (undo-tree-id7099 . -328) (undo-tree-id7100 . -327) (undo-tree-id7101 . -328) (undo-tree-id7102 . -328) (undo-tree-id7103 . -327) (undo-tree-id7104 . -328) (undo-tree-id7105 . -327) (undo-tree-id7106 . -328) (undo-tree-id7107 . -327) (undo-tree-id7108 . -329) (undo-tree-id7109 . -328) (undo-tree-id7110 . -329) (undo-tree-id7111 . -329) (undo-tree-id7112 . -328) (undo-tree-id7113 . -329) (undo-tree-id7114 . -329) (undo-tree-id7115 . -328) (undo-tree-id7116 . -329) (undo-tree-id7117 . -328) (undo-tree-id7118 . -329) (undo-tree-id7119 . -328) (undo-tree-id7120 . -330) (undo-tree-id7121 . -329) (undo-tree-id7122 . -330) (undo-tree-id7123 . -330) (undo-tree-id7124 . -329) (undo-tree-id7125 . -330) (undo-tree-id7126 . -330) (undo-tree-id7127 . -329) (undo-tree-id7128 . -330) (undo-tree-id7129 . -329) (undo-tree-id7130 . -330) (undo-tree-id7131 . -329) (undo-tree-id7132 . -331) (undo-tree-id7133 . -330) (undo-tree-id7134 . -331) (undo-tree-id7135 . -331) (undo-tree-id7136 . -330) (undo-tree-id7137 . -331) (undo-tree-id7138 . -331) (undo-tree-id7139 . -330) (undo-tree-id7140 . -331) (undo-tree-id7141 . -330) (undo-tree-id7142 . -331) (undo-tree-id7143 . -330) (undo-tree-id7144 . -332) (undo-tree-id7145 . -331) (undo-tree-id7146 . -332) (undo-tree-id7147 . -332) (undo-tree-id7148 . -331) (undo-tree-id7149 . -332) (undo-tree-id7150 . -332) (undo-tree-id7151 . -331) (undo-tree-id7152 . -332) (undo-tree-id7153 . -331) (undo-tree-id7154 . -332) (undo-tree-id7155 . -331) (undo-tree-id7156 . -333) (undo-tree-id7157 . -332) (undo-tree-id7158 . -333) (undo-tree-id7159 . -333) (undo-tree-id7160 . -332) (undo-tree-id7161 . -333) (undo-tree-id7162 . -333) (undo-tree-id7163 . -332) (undo-tree-id7164 . -333) (undo-tree-id7165 . -332) (undo-tree-id7166 . -333) (undo-tree-id7167 . -332) (undo-tree-id7168 . -334) (undo-tree-id7169 . -333) (undo-tree-id7170 . -334) (undo-tree-id7171 . -334) (undo-tree-id7172 . -333) (undo-tree-id7173 . -334) (undo-tree-id7174 . -334) (undo-tree-id7175 . -333) (undo-tree-id7176 . -334) (undo-tree-id7177 . -333) (undo-tree-id7178 . -334) (undo-tree-id7179 . -333) (undo-tree-id7180 . -335) (undo-tree-id7181 . -334) (undo-tree-id7182 . -335) (undo-tree-id7183 . -335) (undo-tree-id7184 . -334) (undo-tree-id7185 . -335) (undo-tree-id7186 . -335) (undo-tree-id7187 . -334) (undo-tree-id7188 . -335) (undo-tree-id7189 . -334) (undo-tree-id7190 . -335) (undo-tree-id7191 . -334) (undo-tree-id7192 . -336) (undo-tree-id7193 . -335) (undo-tree-id7194 . -336) (undo-tree-id7195 . -336) (undo-tree-id7196 . -335) (undo-tree-id7197 . -336) (undo-tree-id7198 . -336) (undo-tree-id7199 . -335) (undo-tree-id7200 . -336) (undo-tree-id7201 . -335) (undo-tree-id7202 . -336) (undo-tree-id7203 . -335) (undo-tree-id7204 . -337) (undo-tree-id7205 . -336) (undo-tree-id7206 . -337) (undo-tree-id7207 . -337) (undo-tree-id7208 . -336) (undo-tree-id7209 . -337) (undo-tree-id7210 . -337) (undo-tree-id7211 . -336) (undo-tree-id7212 . -337) (undo-tree-id7213 . -336) (undo-tree-id7214 . -337) (undo-tree-id7215 . -336) (undo-tree-id7216 . -338) (undo-tree-id7217 . -337) (undo-tree-id7218 . -338) (undo-tree-id7219 . -338) (undo-tree-id7220 . -337) (undo-tree-id7221 . -338) (undo-tree-id7222 . -338) (undo-tree-id7223 . -337) (undo-tree-id7224 . -338) (undo-tree-id7225 . -337) (undo-tree-id7226 . -338) (undo-tree-id7227 . -337) (undo-tree-id7228 . -339) (undo-tree-id7229 . -338) (undo-tree-id7230 . -339) (undo-tree-id7231 . -339) (undo-tree-id7232 . -338) (undo-tree-id7233 . -339) (undo-tree-id7234 . -339) (undo-tree-id7235 . -338) (undo-tree-id7236 . -339) (undo-tree-id7237 . -338) (undo-tree-id7238 . -339) (undo-tree-id7239 . -338) (undo-tree-id7240 . -340) (undo-tree-id7241 . -339) (undo-tree-id7242 . -340) (undo-tree-id7243 . -340) (undo-tree-id7244 . -339) (undo-tree-id7245 . -340) (undo-tree-id7246 . -340) (undo-tree-id7247 . -339) (undo-tree-id7248 . -340) (undo-tree-id7249 . -339) (undo-tree-id7250 . -340) (undo-tree-id7251 . -339) (undo-tree-id7252 . -341) (undo-tree-id7253 . -340) (undo-tree-id7254 . -341) (undo-tree-id7255 . -341) (undo-tree-id7256 . -340) (undo-tree-id7257 . -341) (undo-tree-id7258 . -341) (undo-tree-id7259 . -340) (undo-tree-id7260 . -341) (undo-tree-id7261 . -340) (undo-tree-id7262 . -341) (undo-tree-id7263 . -340) (undo-tree-id7264 . -342) (undo-tree-id7265 . -341) (undo-tree-id7266 . -342) (undo-tree-id7267 . -342) (undo-tree-id7268 . -341) (undo-tree-id7269 . -342) (undo-tree-id7270 . -342) (undo-tree-id7271 . -341) (undo-tree-id7272 . -342) (undo-tree-id7273 . -341) (undo-tree-id7274 . -342) (undo-tree-id7275 . -341) (undo-tree-id7276 . -343) (undo-tree-id7277 . -342) (undo-tree-id7278 . -343) (undo-tree-id7279 . -343) (undo-tree-id7280 . -342) (undo-tree-id7281 . -343) (undo-tree-id7282 . -343) (undo-tree-id7283 . -342) (undo-tree-id7284 . -343) (undo-tree-id7285 . -342) (undo-tree-id7286 . -343) (undo-tree-id7287 . -342) (undo-tree-id7288 . -344) (undo-tree-id7289 . -343) (undo-tree-id7290 . -344) (undo-tree-id7291 . -344) (undo-tree-id7292 . -343) (undo-tree-id7293 . -344) (undo-tree-id7294 . -344) (undo-tree-id7295 . -343) (undo-tree-id7296 . -344) (undo-tree-id7297 . -344) (undo-tree-id7298 . -344) (undo-tree-id7299 . -343) (undo-tree-id7300 . -344) (undo-tree-id7301 . -343) (undo-tree-id7302 . -344) (undo-tree-id7303 . -344) (undo-tree-id7304 . -344) (undo-tree-id7305 . -344) (undo-tree-id7306 . -344) (undo-tree-id7307 . -344) (undo-tree-id7308 . -344) (undo-tree-id7309 . -344) (t 23740 40777 121327 30000)) (23740 40777 13339 486000) 0 nil]) ((#("                assert_eq!(result, Ok(()));
" 0 16 (fontified t) 16 26 (fontified t face font-lock-preprocessor-face) 26 35 (fontified t) 35 37 (fontified t face font-lock-type-face) 37 44 (fontified t)) . 467) (undo-tree-id6952 . -13) (undo-tree-id6954 . -13) (undo-tree-id6956 . -13) (undo-tree-id6957 . -13) (undo-tree-id6959 . -13) 480 (t 23740 40771 974684 452000)) ((467 . 511)) (23740 40786 299141 668000) 0 nil]) ((1 . 559) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        result
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 366 (fontified t) 366 415 (fontified t) 415 416 (fontified t) 416 446 (fontified t) 446 447 (fontified t) 447 469 (fontified t) 469 470 (fontified t) 470 484 (fontified t) 484 485 (fontified t) 485 496 (fontified t) 496 514 (fontified t) 514 530 (fontified t) 530 540 (fontified t face font-lock-preprocessor-face) 540 541 (fontified t) 541 547 (fontified t) 547 549 (fontified t) 549 551 (fontified t face font-lock-type-face) 551 558 (fontified t) 558 574 (fontified t) 574 576 (fontified t face font-lock-type-face) 576 581 (fontified t) 581 596 (fontified t) 596 597 (fontified t) 597 604 (fontified t) 604 606 (fontified t)) . 1) (undo-tree-id6595 . -416) (undo-tree-id6596 . -416) (undo-tree-id6597 . 159) (undo-tree-id6598 . -416) (undo-tree-id6599 . -416) (undo-tree-id6600 . 160) (undo-tree-id6601 . -534) (undo-tree-id6602 . -533) (undo-tree-id6603 . -535) (undo-tree-id6604 . -538) (undo-tree-id6605 . -535) (undo-tree-id6606 . -535) (undo-tree-id6608 . -416) (undo-tree-id6610 . -416) (undo-tree-id6612 . -416) (undo-tree-id6614 . -416) (undo-tree-id6616 . -416) (undo-tree-id6618 . -416) (undo-tree-id6620 . -416) (undo-tree-id6622 . -416) (undo-tree-id6624 . -416) (undo-tree-id6626 . -416) (undo-tree-id6628 . -416) (undo-tree-id6630 . -416) (undo-tree-id6632 . -416) (undo-tree-id6634 . -416) (undo-tree-id6636 . -416) (undo-tree-id6638 . -416) (undo-tree-id6640 . -416) (undo-tree-id6642 . -416) (undo-tree-id6644 . -416) (undo-tree-id6646 . -416) (undo-tree-id6648 . -416) (undo-tree-id6650 . -416) (undo-tree-id6652 . -416) (undo-tree-id6654 . -416) (undo-tree-id6656 . -416) (undo-tree-id6658 . -416) (undo-tree-id6660 . -416) (undo-tree-id6662 . -416) (undo-tree-id6664 . -416) (undo-tree-id6666 . -416) (undo-tree-id6668 . -416) (undo-tree-id6670 . -416) (undo-tree-id6672 . -416) (undo-tree-id6674 . -416) (undo-tree-id6676 . -416) (undo-tree-id6678 . -416) (undo-tree-id6680 . -416) (undo-tree-id6682 . -416) (undo-tree-id6684 . -353) (undo-tree-id6686 . -441) (undo-tree-id6688 . -442) (undo-tree-id6690 . -442) (undo-tree-id6692 . -440) (undo-tree-id6694 . -440) (undo-tree-id6696 . -443) (undo-tree-id6698 . -443) (undo-tree-id6700 . -442) (undo-tree-id6702 . -443) (undo-tree-id6704 . -443) (undo-tree-id6706 . -443) (undo-tree-id6708 . -444) (undo-tree-id6710 . -444) (undo-tree-id6712 . -443) (undo-tree-id6714 . -444) (undo-tree-id6716 . -444) (undo-tree-id6718 . -444) (undo-tree-id6720 . -445) (undo-tree-id6722 . -445) (undo-tree-id6724 . -444) (undo-tree-id6726 . -445) (undo-tree-id6728 . -445) (undo-tree-id6730 . -445) (undo-tree-id6732 . -446) (undo-tree-id6734 . -446) (undo-tree-id6736 . -445) (undo-tree-id6738 . -446) (undo-tree-id6740 . -446) (undo-tree-id6742 . -446) (undo-tree-id6744 . -445) (undo-tree-id6746 . -445) (undo-tree-id6748 . -445) (undo-tree-id6750 . -445) (undo-tree-id6752 . -445) (undo-tree-id6753 . -445) (undo-tree-id6755 . -445) (undo-tree-id6757 . -445) (undo-tree-id6759 . -403) (undo-tree-id6761 . -403) 446) ((1 . 607) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| result)
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 422 (fontified t) 422 436 (fontified t) 436 466 (fontified t) 466 482 (fontified t) 482 492 (fontified t face font-lock-preprocessor-face) 492 501 (fontified t) 501 503 (fontified t face font-lock-type-face) 503 510 (fontified t) 510 526 (fontified t) 526 528 (fontified t face font-lock-type-face) 528 533 (fontified t) 533 544 (fontified t) 544 549 (fontified t) 549 558 (fontified t)) . 1) (undo-tree-id7310 . -466) (undo-tree-id7311 . -466) (undo-tree-id7312 . -466) (undo-tree-id7313 . -466) (undo-tree-id7314 . -466) (undo-tree-id7315 . -466) (undo-tree-id7316 . -466) (undo-tree-id7317 . -466) (undo-tree-id7318 . -466) (undo-tree-id7319 . -466) (undo-tree-id7320 . -466) (undo-tree-id7321 . -466) (undo-tree-id7322 . -466) (undo-tree-id7323 . -466) (undo-tree-id7324 . -466) (undo-tree-id7325 . -466) (undo-tree-id7326 . -466) (undo-tree-id7327 . -466) (undo-tree-id7328 . -466) (undo-tree-id7329 . -466) (undo-tree-id7330 . -466) (undo-tree-id7331 . -479) (undo-tree-id7332 . -479) (undo-tree-id7333 . -479) (undo-tree-id7334 . -479) (undo-tree-id7335 . -479) (undo-tree-id7336 . -479) (undo-tree-id7337 . -479) (undo-tree-id7338 . -479) (undo-tree-id7339 . -479) (undo-tree-id7340 . -479) (undo-tree-id7341 . -479) (undo-tree-id7342 . -479) (undo-tree-id7343 . -393) (undo-tree-id7344 . -403) (undo-tree-id7345 . -393) (undo-tree-id7346 . -403)) (23740 40786 980191 91000) 0 nil]) ((441 . 447) (417 . 441) (417 . 418)) ((#("
" 0 1 (fontified nil)) . 417) (undo-tree-id7347 . 1) (#("                        " 0 24 (fontified nil)) . 417) (undo-tree-id7348 . -24) (undo-tree-id7349 . -24) (undo-tree-id7350 . -24) (undo-tree-id7351 . -24) (#("result" 0 6 (fontified t)) . 441) (undo-tree-id7352 . -5) (undo-tree-id7353 . -5) (undo-tree-id7354 . -5) (undo-tree-id7355 . -5)) (23740 40794 901593 690000) 0 nil]) ((#("                        connection.read_response().then(|result| match result {
                            Ok(result_tuple) => {
                                println!(\"{:?}\", result_tuple.1);
                                Ok(result_tuple.0)
                            }
                            Err(err) => Err(err),
                        })
" 0 65 (fontified t) 65 70 (fontified t face font-lock-keyword-face) 70 80 (fontified t) 80 84 (fontified t) 84 94 (fontified t) 94 108 (fontified t) 108 110 (fontified t face font-lock-type-face) 110 126 (fontified t) 126 127 (fontified t syntax-table #2#) 127 130 (fontified t) 130 162 (fontified t) 162 170 (fontified t face rust-builtin-formatting-macro-face) 170 171 (fontified t) 171 172 (fontified t face font-lock-string-face) 172 176 (fontified t face rust-string-interpolation-face) 176 177 (fontified t face font-lock-string-face) 177 195 (fontified t) 195 196 (fontified t) 196 228 (fontified t) 228 230 (fontified t face font-lock-type-face) 230 231 (fontified t) 231 245 (fontified t) 245 246 (fontified t) 246 247 (fontified t) 247 305 (fontified t) 305 308 (fontified t face font-lock-type-face) 308 315 (fontified t) 315 316 (fontified t syntax-table #2#) 316 317 (fontified t) 317 320 (fontified t face font-lock-type-face) 320 354 (fontified t)) . 417) (undo-tree-id6762 . -327) (undo-tree-id6763 . -327) (undo-tree-id6765 . -80) (undo-tree-id6767 . -354) (undo-tree-id6768 . -327) (undo-tree-id6770 . -80) (undo-tree-id6772 . -80) (undo-tree-id6774 . -80) (undo-tree-id6776 . -130) (undo-tree-id6778 . -130) (undo-tree-id6780 . -80) (undo-tree-id6782 . -130) (undo-tree-id6784 . -130) (undo-tree-id6786 . -130) (undo-tree-id6788 . -196) (undo-tree-id6790 . -196) (undo-tree-id6792 . -130) (undo-tree-id6794 . -196) (undo-tree-id6796 . -196) (undo-tree-id6798 . -196) (undo-tree-id6800 . -247) (undo-tree-id6802 . -247) (undo-tree-id6804 . -196) (undo-tree-id6806 . -247) (undo-tree-id6808 . -247) (undo-tree-id6810 . -247) (undo-tree-id6812 . -277) (undo-tree-id6814 . -277) (undo-tree-id6816 . -247) (undo-tree-id6818 . -277) (undo-tree-id6820 . -277) (undo-tree-id6822 . -277) (undo-tree-id6824 . -327) (undo-tree-id6826 . -327) (undo-tree-id6828 . -277) (undo-tree-id6830 . -327) (undo-tree-id6832 . -327) (undo-tree-id6833 . -327) (undo-tree-id6835 . -277) (undo-tree-id6837 . -277) (undo-tree-id6839 . -172) (undo-tree-id6841 . -172) (undo-tree-id6843 . -321) 744) ((417 . 771)) (23740 40795 282409 390000) 0 nil]) ((1 . 930) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection.read_response().then(|result| match result {
                            Ok(result_tuple) => {println!(\"{:?}\", result_tuple.1);
                                                 Ok(result_tuple.0)},
                            Err(err) => Err(err),
                        })
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 481 (fontified t) 481 486 (fontified t face font-lock-keyword-face) 486 496 (fontified t) 496 500 (fontified t) 500 510 (fontified t) 510 524 (fontified t) 524 526 (fontified t face font-lock-type-face) 526 542 (fontified t) 542 543 (fontified t syntax-table #2#) 543 544 (fontified t) 544 545 (fontified t) 545 552 (fontified t face rust-builtin-formatting-macro-face) 552 553 (fontified t face rust-builtin-formatting-macro-face) 553 554 (fontified t) 554 555 (fontified t face font-lock-string-face) 555 559 (fontified t face rust-string-interpolation-face) 559 560 (fontified t face font-lock-string-face) 560 577 (fontified t) 577 578 (fontified t) 578 579 (fontified t) 579 628 (fontified t) 628 630 (fontified t face font-lock-type-face) 630 631 (fontified t) 631 643 (fontified t) 643 645 (fontified t) 645 646 (fontified t) 646 647 (fontified t) 647 649 (fontified t) 649 677 (fontified t) 677 680 (fontified t face font-lock-type-face) 680 687 (fontified t) 687 688 (fontified t syntax-table #2#) 688 689 (fontified t) 689 692 (fontified t face font-lock-type-face) 692 698 (fontified t) 698 809 (fontified t) 809 819 (fontified t face font-lock-preprocessor-face) 819 828 (fontified t) 828 830 (fontified t face font-lock-type-face) 830 853 (fontified t) 853 855 (fontified t face font-lock-type-face) 855 885 (fontified t)) . 1) (undo-tree-id6450 . 240) (undo-tree-id6452 . -544) (undo-tree-id6454 . -544) (undo-tree-id6456 . -481) (undo-tree-id6458 . -689) (undo-tree-id6460 . -577) (undo-tree-id6462 . -577) (undo-tree-id6464 . -577) (undo-tree-id6466 . -577) (undo-tree-id6468 . -724) (undo-tree-id6470 . -697) (undo-tree-id6472 . -559) (undo-tree-id6474 . -556) (undo-tree-id6476 . -545) (undo-tree-id6478 . -577) (undo-tree-id6480 . -631) (undo-tree-id6482 . -631) (undo-tree-id6484 . -577) (undo-tree-id6485 . -631) (undo-tree-id6486 . -631) (undo-tree-id6488 . -577) (undo-tree-id6490 . -577) (undo-tree-id6492 . -674) (undo-tree-id6494 . -627) (undo-tree-id6496 . -818) (undo-tree-id6498 . -818) (undo-tree-id6500 . -818) (undo-tree-id6502 . -818) (undo-tree-id6504 . -818) (undo-tree-id6506 . -818) (undo-tree-id6508 . -818) (undo-tree-id6510 . -608) (undo-tree-id6512 . -545) (undo-tree-id6514 . -610) (undo-tree-id6516 . -611) (undo-tree-id6518 . -611) (undo-tree-id6520 . -610) (undo-tree-id6522 . -545) (undo-tree-id6524 . -611) (undo-tree-id6526 . -836) (undo-tree-id6528 . -836) (undo-tree-id6530 . -836) (undo-tree-id6532 . -836) (undo-tree-id6534 . -836) (undo-tree-id6536 . -836) (undo-tree-id6538 . -836)) ((1 . 886) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection.read_response().then(|result| match result {
                            Ok(result_tuple) => {
                                println!(\"{:?}\", result_tuple.1);
                                Ok(result_tuple.0)
                            }
                            Err(err) => Err(err),
                        })
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 366 (fontified t) 366 415 (fontified t) 415 416 (fontified t) 416 481 (fontified t) 481 486 (fontified t face font-lock-keyword-face) 486 496 (fontified t) 496 500 (fontified t) 500 510 (fontified t) 510 524 (fontified t) 524 526 (fontified t face font-lock-type-face) 526 542 (fontified t) 542 543 (fontified t syntax-table #2#) 543 546 (fontified t) 546 578 (fontified t) 578 586 (fontified t face rust-builtin-formatting-macro-face) 586 587 (fontified t) 587 588 (fontified t face font-lock-string-face) 588 592 (fontified t face rust-string-interpolation-face) 592 593 (fontified t face font-lock-string-face) 593 611 (fontified t) 611 612 (fontified t) 612 644 (fontified t) 644 646 (fontified t face font-lock-type-face) 646 647 (fontified t) 647 661 (fontified t) 661 662 (fontified t) 662 663 (fontified t) 663 693 (fontified t) 693 721 (fontified t) 721 724 (fontified t face font-lock-type-face) 724 731 (fontified t) 731 732 (fontified t syntax-table #2#) 732 733 (fontified t) 733 736 (fontified t face font-lock-type-face) 736 742 (fontified t) 742 743 (fontified t) 743 770 (fontified t) 770 792 (fontified t) 792 793 (fontified t) 793 807 (fontified t) 807 808 (fontified t) 808 819 (fontified t) 819 823 (fontified t) 823 837 (fontified t) 837 853 (fontified t) 853 863 (fontified t face font-lock-preprocessor-face) 863 864 (fontified t) 864 870 (fontified t) 870 872 (fontified t) 872 874 (fontified t face font-lock-type-face) 874 881 (fontified t) 881 897 (fontified t) 897 899 (fontified t face font-lock-type-face) 899 904 (fontified t) 904 919 (fontified t) 919 920 (fontified t) 920 927 (fontified t) 927 929 (fontified t)) . 1) (undo-tree-id8157 . -743) (undo-tree-id8158 . -416) (undo-tree-id8159 . 159) (undo-tree-id8160 . -416) (undo-tree-id8161 . -743) (undo-tree-id8162 . 187) (undo-tree-id8163 . -857) (undo-tree-id8164 . -856) (undo-tree-id8165 . -858) (undo-tree-id8166 . -861) (undo-tree-id8167 . -858) (undo-tree-id8168 . -858) (undo-tree-id8169 . -467) (undo-tree-id8170 . -471) (undo-tree-id8171 . -250) (undo-tree-id8172 . -792) (undo-tree-id8173 . -853) (undo-tree-id8174 . -880) (undo-tree-id8175 . -853) (undo-tree-id8176 . -880) (undo-tree-id8177 . -853) (undo-tree-id8178 . -880) (undo-tree-id8179 . -853) (undo-tree-id8180 . -880) (undo-tree-id8181 . -853) (undo-tree-id8182 . -880) (undo-tree-id8183 . -853) (undo-tree-id8184 . -880) (undo-tree-id8185 . -733) (undo-tree-id8186 . -733) (undo-tree-id8187 . -733) (undo-tree-id8188 . -733) (undo-tree-id8189 . -733) (undo-tree-id8190 . -733) (undo-tree-id8191 . -733) (undo-tree-id8192 . -733) (undo-tree-id8193 . -733) (undo-tree-id8194 . -733) (undo-tree-id8195 . -733) (undo-tree-id8196 . -733) (undo-tree-id8197 . -733) (undo-tree-id8198 . -467) (undo-tree-id8199 . -471) (undo-tree-id8200 . -250) (undo-tree-id8201 . -792) (undo-tree-id8202 . -853) (undo-tree-id8203 . -880) (undo-tree-id8204 . -853) (undo-tree-id8205 . -880) (undo-tree-id8206 . -853) (undo-tree-id8207 . -880) (undo-tree-id8208 . -853) (undo-tree-id8209 . -880) (undo-tree-id8210 . -853) (undo-tree-id8211 . -880) (undo-tree-id8212 . -853) (undo-tree-id8213 . -880) (undo-tree-id8214 . -481) (undo-tree-id8215 . -768) (undo-tree-id8216 . -733) (undo-tree-id8217 . -741) (undo-tree-id8218 . -733) (undo-tree-id8219 . -733) (undo-tree-id8220 . -644) (undo-tree-id8221 . -733) (undo-tree-id8222 . -644) (undo-tree-id8223 . -644) (undo-tree-id8224 . -733) (undo-tree-id8225 . -644) (undo-tree-id8226 . -644) (undo-tree-id8227 . -733) (undo-tree-id8228 . -644) (undo-tree-id8229 . -644) (undo-tree-id8230 . -644) (undo-tree-id8231 . -733) (undo-tree-id8232 . -644) (undo-tree-id8233 . -733) (undo-tree-id8234 . -644) (undo-tree-id8235 . -733) (undo-tree-id8236 . -644) (undo-tree-id8237 . -733) (undo-tree-id8238 . -733) (undo-tree-id8239 . -736) (undo-tree-id8240 . -481) (undo-tree-id8241 . -486) (undo-tree-id8242 . -481) (undo-tree-id8243 . -768) (undo-tree-id8244 . -733) (undo-tree-id8245 . -741)) (23740 40878 512955 668000) 0 nil]) ((632 . 646) (#("result_t" 0 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil)) . 632) (639 . 640) (580 . 629) (#("                            " 0 28 (fontified nil)) . 580) (611 . 618) (610 . 612) (#("(" 0 1 (fontified nil face font-lock-type-face)) . 610) (608 . 611) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 608) (608 . 610) (#("(" 0 1 (fontified nil)) . 608) (578 . 609)) ((#(";
                            (" 0 1 (fontified t) 1 2 (fontified t) 2 30 (fontified nil) 30 31 (fontified nil)) . 578) (undo-tree-id8246 . -30) (undo-tree-id8247 . -30) (undo-tree-id8248 . -30) (undo-tree-id8249 . -30) (undo-tree-id8250 . -30) (608 . 609) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 608) (608 . 610) (#("Ok(" 0 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face)) . 608) (undo-tree-id8251 . -2) (undo-tree-id8252 . -2) (undo-tree-id8253 . -2) (undo-tree-id8254 . -2) (undo-tree-id8255 . -2) (610 . 611) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 610) (undo-tree-id8256 . 1) (undo-tree-id8257 . -1) (undo-tree-id8258 . -1) (undo-tree-id8259 . -1) (undo-tree-id8260 . -1) (undo-tree-id8261 . -1) (#("result_" 0 6 (fontified nil) 6 7 (fontified nil)) . 611) (580 . 608) (#("                                                 " 0 49 (fontified nil)) . 580) (#("t" 0 1 (fontified nil)) . 639) (632 . 640) (#("result_tuple.0" 0 12 (fontified t) 12 14 (fontified t)) . 632)) (23740 40878 808190 70000) 0 nil]) ((578 . 579) (#("}" 0 1 (fontified nil)) . 553) (553 . 554) (#("}" 0 1 (fontified nil)) . 546) (545 . 547) (#("{" 0 1 (fontified nil)) . 545) (545 . 546)) ((#("{" 0 1 (fontified nil)) . 545) (undo-tree-id8262 . 1) (545 . 546) (#("{}" 0 1 (fontified nil) 1 2 (fontified nil)) . 545) (undo-tree-id8263 . -1) (undo-tree-id8264 . 2) (undo-tree-id8265 . -1) (546 . 547) (#("}" 0 1 (fontified nil)) . 553) (553 . 554) (#("}" 0 1 (fontified t)) . 578) (undo-tree-id8266 . 1) (undo-tree-id8267 . 1) (undo-tree-id8268 . -1)) (23740 40879 288735 451000) 0 nil]) ((1 . 815) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection.read_response().then(|result| match result {
                            Ok(result_tuple) => println!(\"{:?}\", result_tuple.1),
                            Err(err) => Err(err)
                        })
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 481 (fontified t) 481 486 (fontified t face font-lock-keyword-face) 486 496 (fontified t) 496 500 (fontified t) 500 524 (fontified t) 524 526 (fontified t face font-lock-type-face) 526 542 (fontified t) 542 543 (fontified t syntax-table #2#) 543 544 (fontified t) 544 552 (fontified t face rust-builtin-formatting-macro-face) 552 553 (fontified t) 553 554 (fontified t face font-lock-string-face) 554 558 (fontified t face rust-string-interpolation-face) 558 559 (fontified t face font-lock-string-face) 559 566 (fontified t) 566 577 (fontified t) 577 578 (fontified t) 578 606 (fontified t) 606 609 (fontified t face font-lock-type-face) 609 613 (fontified t) 613 614 (fontified t) 614 616 (fontified t) 616 617 (fontified t syntax-table #2#) 617 618 (fontified t) 618 621 (fontified t face font-lock-type-face) 621 622 (fontified t) 622 625 (fontified t) 625 626 (fontified t) 626 627 (fontified t) 627 692 (fontified t) 692 737 (fontified t) 737 747 (fontified t face font-lock-preprocessor-face) 747 756 (fontified t) 756 758 (fontified t face font-lock-type-face) 758 781 (fontified t) 781 783 (fontified t face font-lock-type-face) 783 788 (fontified t) 788 803 (fontified t) 803 804 (fontified t) 804 811 (fontified t) 811 813 (fontified t)) . 1) (undo-tree-id6381 . -803) (undo-tree-id6382 . -566) (undo-tree-id6383 . -566) (undo-tree-id6384 . -692) (undo-tree-id6385 . 9) (undo-tree-id6386 . -719) (undo-tree-id6387 . -803) (undo-tree-id6388 . 188) (undo-tree-id6390 . -622) (undo-tree-id6392 . -622) (undo-tree-id6394 . -622) (undo-tree-id6396 . -621) (undo-tree-id6398 . -622) (undo-tree-id6400 . -622) (undo-tree-id6402 . -622) (undo-tree-id6404 . -622) (undo-tree-id6406 . -622) (undo-tree-id6408 . -622) (undo-tree-id6410 . -622) (undo-tree-id6412 . -622) (undo-tree-id6414 . -622) (undo-tree-id6416 . -622) (undo-tree-id6418 . -622) (undo-tree-id6420 . -622) (undo-tree-id6422 . -621) (undo-tree-id6424 . -622) (undo-tree-id6426 . -622) (undo-tree-id6428 . -624) (undo-tree-id6430 . -622) (undo-tree-id6432 . -622) (undo-tree-id6433 . -622) (undo-tree-id6435 . -624) (undo-tree-id6437 . -624) (undo-tree-id6439 . -621) (undo-tree-id6441 . -486) (undo-tree-id6443 . -621) (undo-tree-id6445 . -623) (undo-tree-id6447 . -652) (undo-tree-id6449 . -623)) ((1 . 814) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection.read_response().then(|result| match result {
                            Ok(result_tuple) => println!(\"{:?}\", result_tuple.1),
                            Err(err) => Err(err),
                        })
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 481 (fontified t) 481 486 (fontified t face font-lock-keyword-face) 486 496 (fontified t) 496 500 (fontified t) 500 510 (fontified t) 510 524 (fontified t) 524 526 (fontified t face font-lock-type-face) 526 542 (fontified t) 542 543 (fontified t syntax-table #2#) 543 544 (fontified t) 544 551 (fontified t face rust-builtin-formatting-macro-face) 551 552 (fontified t face rust-builtin-formatting-macro-face) 552 553 (fontified t) 553 554 (fontified t face font-lock-string-face) 554 558 (fontified t face rust-string-interpolation-face) 558 559 (fontified t face font-lock-string-face) 559 576 (fontified t) 576 578 (fontified t) 578 606 (fontified t) 606 609 (fontified t face font-lock-type-face) 609 616 (fontified t) 616 617 (fontified t syntax-table #2#) 617 618 (fontified t) 618 621 (fontified t face font-lock-type-face) 621 627 (fontified t) 627 738 (fontified t) 738 748 (fontified t face font-lock-preprocessor-face) 748 757 (fontified t) 757 759 (fontified t face font-lock-type-face) 759 782 (fontified t) 782 784 (fontified t face font-lock-type-face) 784 814 (fontified t)) . 1) (undo-tree-id8269 . 238) (undo-tree-id8270 . -576) (undo-tree-id8271 . -576) (undo-tree-id8272 . -576) (undo-tree-id8273 . -576) (undo-tree-id8274 . -576) (undo-tree-id8275 . -805) (undo-tree-id8276 . -814) (undo-tree-id8277 . -805) (undo-tree-id8278 . -814) (undo-tree-id8279 . -805) (undo-tree-id8280 . -814) (undo-tree-id8281 . -805) (undo-tree-id8282 . -814) (undo-tree-id8283 . -738) (undo-tree-id8284 . -765) (undo-tree-id8285 . -738) (undo-tree-id8286 . -765) (undo-tree-id8287 . -738) (undo-tree-id8288 . -765) (undo-tree-id8289 . -738) (undo-tree-id8290 . -765) (undo-tree-id8291 . -576) (undo-tree-id8292 . -576) (undo-tree-id8293 . -576) (undo-tree-id8294 . -576) (undo-tree-id8295 . -576) (undo-tree-id8296 . -576) (undo-tree-id8297 . -576) (undo-tree-id8298 . -557) (undo-tree-id8299 . -558) (undo-tree-id8300 . -554) (undo-tree-id8301 . -555) (undo-tree-id8302 . -544) (undo-tree-id8303 . -544) (undo-tree-id8304 . -627) (undo-tree-id8305 . -631) (undo-tree-id8306 . -782) (undo-tree-id8307 . -809) (undo-tree-id8308 . -782) (undo-tree-id8309 . -809) (undo-tree-id8310 . -782) (undo-tree-id8311 . -809) (undo-tree-id8312 . -481) (undo-tree-id8313 . -653) (undo-tree-id8314 . -618) (undo-tree-id8315 . -626) (undo-tree-id8316 . -544) (undo-tree-id8317 . -576) (undo-tree-id8318 . -544) (undo-tree-id8319 . -544) (undo-tree-id8320 . -576) (undo-tree-id8321 . -544) (undo-tree-id8322 . -544) (undo-tree-id8323 . -576) (undo-tree-id8324 . -544) (undo-tree-id8325 . -544) (undo-tree-id8326 . -544) (undo-tree-id8327 . -576) (undo-tree-id8328 . -544) (undo-tree-id8329 . -576) (undo-tree-id8330 . -618) (undo-tree-id8331 . -621) (undo-tree-id8332 . -481) (undo-tree-id8333 . -486) (undo-tree-id8334 . -618) (undo-tree-id8335 . -621) (undo-tree-id8336 . -481) (undo-tree-id8337 . -486) (undo-tree-id8338 . -481) (undo-tree-id8339 . -653) (undo-tree-id8340 . -618) (undo-tree-id8341 . -626) (undo-tree-id8342 . -481) (undo-tree-id8343 . -653) (undo-tree-id8344 . -618) (undo-tree-id8345 . -626)) (23740 40879 623796 8000) 0 nil]) ((623 . 626)) ((#("err" 0 3 (fontified t)) . 623)) (23740 40880 16460 278000) 0 nil]) ((#("()" 0 1 (fontified t) 1 2 (fontified t)) . 623) (undo-tree-id6376 . -1) (undo-tree-id6378 . -1) (undo-tree-id6380 . -2)) ((623 . 625)) (23740 40880 406380 528000) 0 nil]) ((611 . 614) (610 . 612) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -610) (610 . 611) (#(")" 0 1 (fontified nil)) . -610) (610 . 611) (#(" " 0 1 (fontified nil)) . -610) (610 . 611) (#(")" 0 1 (fontified nil face font-lock-type-face)) . -610) (610 . 611) (#("e" 0 1 (fontified t face font-lock-type-face)) . -610) (undo-tree-id2855 . -1) (undo-tree-id2856 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -611) (undo-tree-id2857 . -1) (undo-tree-id2858 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -612) (undo-tree-id2859 . -1) (undo-tree-id2860 . -1) 613 (610 . 613) (#(")" 0 1 (fontified nil)) . -610) (610 . 611) (#(" " 0 1 (fontified nil)) . -610) (610 . 611) (#(")" 0 1 (fontified nil face font-lock-type-face)) . -610) (608 . 611) (#("e" 0 1 (fontified t face font-lock-type-face)) . -608) (undo-tree-id2861 . -1) (undo-tree-id2862 . -1) 609 (607 . 609) (#("_" 0 1 (fontified t)) . 607) (undo-tree-id2864 . -1)) ((607 . 608) (#("Ee" 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face)) . 607) (608 . 609) (#("rr)" 0 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face)) . 608) (610 . 611) (#(" " 0 1 (fontified nil)) . 610) (610 . 611) (#(")" 0 1 (fontified nil)) . 610) (610 . 611) (#("err" 0 1 (fontified nil face font-lock-type-face) 1 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face)) . 610) (610 . 613) (#(")" 0 1 (fontified nil face font-lock-type-face)) . 610) (610 . 611) (#(" " 0 1 (fontified nil)) . 610) (610 . 611) (#(")" 0 1 (fontified nil)) . 610) (610 . 611) (#("(" 0 1 (fontified nil face font-lock-type-face)) . 610) (610 . 611) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 610) (#("err" 0 3 (fontified t)) . 611)) (23740 40880 779277 603000) 0 nil]) ((607 . 608) (#("Err" 0 3 (fontified t face font-lock-type-face)) . 607) (undo-tree-id2363 . -1) (undo-tree-id2364 . -1) 608) ((607 . 610) (#("_" 0 1 (fontified t)) . 607)) (23740 40881 217806 51000) 0 nil]) ((618 . 620) (#("(" 0 1 (fontified nil)) . -618) (618 . 619) (617 . 619) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -617) (612 . 618) (#(" " 0 1 (fontified nil)) . -612) (612 . 613) (#(">" 0 1 (fontified nil syntax-table #2#)) . -612) (607 . 613) (#("-" 0 1 (fontified t)) . -607) (undo-tree-id2365 . -1) (undo-tree-id2366 . -1) 608 (607 . 608) (#("_" 0 1 (fontified t)) . -607) (undo-tree-id2367 . -1) (undo-tree-id2368 . -1) (#(" " 0 1 (fontified t)) . -608) (undo-tree-id2369 . -1) (undo-tree-id2370 . -1) (#("=" 0 1 (fontified t)) . -609) (undo-tree-id2371 . -1) (undo-tree-id2372 . -1) (#("?" 0 1 (fontified t face rust-question-mark-face)) . -610) (undo-tree-id2373 . -1) (undo-tree-id2374 . -1) (#(" " 0 1 (fontified t)) . -611) (undo-tree-id2375 . -1) (undo-tree-id2376 . -1) 612 (607 . 612) (578 . 607) 566) ((#("
                            " 0 1 (fontified t) 1 29 (fontified nil)) . 578) (undo-tree-id8346 . -29) (undo-tree-id8347 . -29) (undo-tree-id8348 . -29) (undo-tree-id8349 . -29) (undo-tree-id8350 . -29) (undo-tree-id8351 . -29) (undo-tree-id8352 . -29) (undo-tree-id8353 . -29) (undo-tree-id8354 . -29) (undo-tree-id8355 . -29) (undo-tree-id8356 . -29) (undo-tree-id8357 . -29) (undo-tree-id8358 . -29) (undo-tree-id8359 . -29) (undo-tree-id8360 . -29) (undo-tree-id8361 . -29) (undo-tree-id8362 . -29) (undo-tree-id8363 . -29) (undo-tree-id8364 . -29) (undo-tree-id8365 . -29) (undo-tree-id8366 . -29) (undo-tree-id8367 . -29) (undo-tree-id8368 . -29) (undo-tree-id8369 . -29) (undo-tree-id8370 . -29) (undo-tree-id8371 . -29) (undo-tree-id8372 . -29) (undo-tree-id8373 . -29) (undo-tree-id8374 . -29) (undo-tree-id8375 . -29) (undo-tree-id8376 . -29) (undo-tree-id8377 . -29) (undo-tree-id8378 . -29) (undo-tree-id8379 . -29) (undo-tree-id8380 . -29) (undo-tree-id8381 . -29) (undo-tree-id8382 . -29) (undo-tree-id8383 . -29) (undo-tree-id8384 . -29) (undo-tree-id8385 . -29) (undo-tree-id8386 . -29) (undo-tree-id8387 . -29) (undo-tree-id8388 . -29) (undo-tree-id8389 . -29) (undo-tree-id8390 . -29) (undo-tree-id8391 . -29) (undo-tree-id8392 . -29) (undo-tree-id8393 . -29) (undo-tree-id8394 . -29) (undo-tree-id8395 . -29) (undo-tree-id8396 . -29) (undo-tree-id8397 . -29) (undo-tree-id8398 . -29) (undo-tree-id8399 . -29) (undo-tree-id8400 . -29) (undo-tree-id8401 . -29) (undo-tree-id8402 . -29) (undo-tree-id8403 . -29) (undo-tree-id8404 . -29) (undo-tree-id8405 . -29) (undo-tree-id8406 . -29) (undo-tree-id8407 . -29) (undo-tree-id8408 . -29) (#("_ =? " 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil face rust-question-mark-face) 4 5 (fontified nil)) . 607) (undo-tree-id8409 . -5) (undo-tree-id8410 . -5) (607 . 612) (#("-" 0 1 (fontified nil)) . 607) (undo-tree-id8411 . -1) (undo-tree-id8412 . -1) (607 . 608) (#("Err =>" 0 3 (fontified nil face font-lock-type-face) 3 5 (fontified nil) 5 6 (fontified nil syntax-table #2#)) . 607) (undo-tree-id8413 . -5) (undo-tree-id8414 . -5) (undo-tree-id8415 . -5) (undo-tree-id8416 . -5) (undo-tree-id8417 . -5) (undo-tree-id8418 . -5) (undo-tree-id8419 . -5) (undo-tree-id8420 . -5) (undo-tree-id8421 . -5) (undo-tree-id8422 . -5) (undo-tree-id8423 . -5) (undo-tree-id8424 . -5) (undo-tree-id8425 . -5) (undo-tree-id8426 . -5) (undo-tree-id8427 . -5) (undo-tree-id8428 . -5) (undo-tree-id8429 . -5) (undo-tree-id8430 . -1) (undo-tree-id8431 . -1) (undo-tree-id8432 . -1) (undo-tree-id8433 . -1) (undo-tree-id8434 . -1) (undo-tree-id8435 . -1) (undo-tree-id8436 . -1) (undo-tree-id8437 . -1) (undo-tree-id8438 . -1) (undo-tree-id8439 . -1) (undo-tree-id8440 . -1) (undo-tree-id8441 . -1) (undo-tree-id8442 . -1) (undo-tree-id8443 . -1) (undo-tree-id8444 . -1) (undo-tree-id8445 . -1) (undo-tree-id8446 . -1) (undo-tree-id8447 . -1) (undo-tree-id8448 . -5) (undo-tree-id8449 . -5) (undo-tree-id8450 . -3) (undo-tree-id8451 . -5) (undo-tree-id8452 . -5) (undo-tree-id8453 . -3) (undo-tree-id8454 . -3) (undo-tree-id8455 . -1) (undo-tree-id8456 . -1) (undo-tree-id8457 . -1) (undo-tree-id8458 . -1) (undo-tree-id8459 . -1) (undo-tree-id8460 . -3) (undo-tree-id8461 . -3) (undo-tree-id8462 . -3) (612 . 613) (#(" " 0 1 (fontified nil)) . 612) (612 . 613) (#("> Err(" 0 1 (fontified nil syntax-table #2#) 1 2 (fontified nil) 2 5 (fontified nil face font-lock-type-face) 5 6 (fontified nil face font-lock-type-face)) . 612) (undo-tree-id8463 . -2) (undo-tree-id8464 . -5) (undo-tree-id8465 . -2) (undo-tree-id8466 . -5) (undo-tree-id8467 . -2) (undo-tree-id8468 . -2) (undo-tree-id8469 . -5) (undo-tree-id8470 . -2) (undo-tree-id8471 . -5) (undo-tree-id8472 . -5) (undo-tree-id8473 . -5) (undo-tree-id8474 . -5) (undo-tree-id8475 . -5) (undo-tree-id8476 . -5) (undo-tree-id8477 . -5) (undo-tree-id8478 . -5) (undo-tree-id8479 . -5) (undo-tree-id8480 . -5) (undo-tree-id8481 . -5) (undo-tree-id8482 . -5) (undo-tree-id8483 . -5) (undo-tree-id8484 . -5) (undo-tree-id8485 . -2) (undo-tree-id8486 . -5) (undo-tree-id8487 . -3) (undo-tree-id8488 . -2) (undo-tree-id8489 . -5) (undo-tree-id8490 . -2) (undo-tree-id8491 . -5) (undo-tree-id8492 . -2) (undo-tree-id8493 . -5) (undo-tree-id8494 . -2) (undo-tree-id8495 . -5) (undo-tree-id8496 . -2) (undo-tree-id8497 . -5) (617 . 618) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 617) (undo-tree-id8498 . 1) (undo-tree-id8499 . -2) (undo-tree-id8500 . -2) (undo-tree-id8501 . -2) (undo-tree-id8502 . -2) (undo-tree-id8503 . -1) (undo-tree-id8504 . -1) (undo-tree-id8505 . -1) (undo-tree-id8506 . -1) (undo-tree-id8507 . -1) (undo-tree-id8508 . -1) (undo-tree-id8509 . -1) (undo-tree-id8510 . -1) (undo-tree-id8511 . -1) (undo-tree-id8512 . -1) (undo-tree-id8513 . -1) (undo-tree-id8514 . -1) (undo-tree-id8515 . -2) (undo-tree-id8516 . -1) (undo-tree-id8517 . -2) (undo-tree-id8518 . -2) (#("(" 0 1 (fontified nil)) . 618) (618 . 619) (#("()" 0 1 (fontified t) 1 2 (fontified t)) . 618)) (23740 40881 616715 486000) 0 nil]) ((556 . 558) (t 23740 40109 567298 579000)) ((#(":?" 0 2 (fontified t face rust-string-interpolation-face)) . 556)) (23740 40881 996818 251000) 0 nil]) ((1 . 763) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| connection.read_response().then(|result| match result {
                    Ok(result_tuple) => println!(\"{}\", result_tuple.1)}))
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 366 (fontified t) 366 455 (fontified t) 455 460 (fontified t face font-lock-keyword-face) 460 468 (fontified t) 468 470 (fontified t) 470 490 (fontified t) 490 492 (fontified t face font-lock-type-face) 492 505 (fontified t) 505 508 (fontified t) 508 509 (fontified t syntax-table #2#) 509 510 (fontified t) 510 518 (fontified t face rust-builtin-formatting-macro-face) 518 519 (fontified t) 519 520 (fontified t face font-lock-string-face) 520 522 (fontified t face rust-string-interpolation-face) 522 523 (fontified t face font-lock-string-face) 523 539 (fontified t) 539 540 (fontified t) 540 541 (fontified t) 541 544 (fontified t) 544 559 (fontified t) 559 587 (fontified t) 587 604 (fontified t) 604 614 (fontified t face font-lock-preprocessor-face) 614 623 (fontified t) 623 625 (fontified t face font-lock-type-face) 625 648 (fontified t) 648 650 (fontified t face font-lock-type-face) 650 680 (fontified t)) . 1) (undo-tree-id2187 . -447) (undo-tree-id2188 . 141) (undo-tree-id2189 . -447) (undo-tree-id2190 . -446) (undo-tree-id2191 . -447) (undo-tree-id2192 . -447) (undo-tree-id2193 . -447) (undo-tree-id2194 . -447) (undo-tree-id2196 . -531) (undo-tree-id2198 . -445) (undo-tree-id2200 . -543) (undo-tree-id2202 . -631) (undo-tree-id2204 . -631) (undo-tree-id2206 . -631) (undo-tree-id2208 . -631) (undo-tree-id2210 . -631) (undo-tree-id2212 . -531) (undo-tree-id2214 . -445) (undo-tree-id2216 . -542) (undo-tree-id2218 . -631) (undo-tree-id2220 . -631) (undo-tree-id2222 . -631) (undo-tree-id2224 . -631) (undo-tree-id2226 . -631) (undo-tree-id2228 . -532) (undo-tree-id2230 . -533) (undo-tree-id2232 . -534) (undo-tree-id2234 . -537) (undo-tree-id2236 . -445) (undo-tree-id2238 . -543) (undo-tree-id2240 . -631) (undo-tree-id2242 . -631) (undo-tree-id2244 . -631) (undo-tree-id2246 . -631) (undo-tree-id2248 . -631) (undo-tree-id2250 . -537) (undo-tree-id2252 . -538) (undo-tree-id2254 . -538) (undo-tree-id2256 . -539) (undo-tree-id2258 . -539) (undo-tree-id2260 . -538) (undo-tree-id2262 . -539) (undo-tree-id2264 . -539) (undo-tree-id2266 . -539) (undo-tree-id2268 . -537) (undo-tree-id2270 . -525) (undo-tree-id2272 . -441) (undo-tree-id2274 . -250) (undo-tree-id2276 . -604) (undo-tree-id2278 . -604) (undo-tree-id2280 . -604) (undo-tree-id2282 . -604) (undo-tree-id2284 . -604) (undo-tree-id2286 . -604) (undo-tree-id2288 . -604) (undo-tree-id2290 . -604) (undo-tree-id2292 . -604) (undo-tree-id2294 . -604) (undo-tree-id2296 . -250) (undo-tree-id2298 . -441) (undo-tree-id2300 . -525) (undo-tree-id2302 . -525) (undo-tree-id2304 . -441) (undo-tree-id2306 . -250) (undo-tree-id2308 . -604) (undo-tree-id2310 . -604) (undo-tree-id2312 . -604) (undo-tree-id2314 . -604) (undo-tree-id2316 . -604) (undo-tree-id2318 . -538) (undo-tree-id2320 . -538) (undo-tree-id2322 . -538) (undo-tree-id2324 . -538) (undo-tree-id2326 . -538) (undo-tree-id2327 . -538) (undo-tree-id2329 . -538) (undo-tree-id2331 . -538) 539) ((1 . 681) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection.read_response().then(|result| match result {
                            Ok(result_tuple) => println!(\"{}\", result_tuple.1),
                        })
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 481 (fontified t) 481 486 (fontified t face font-lock-keyword-face) 486 496 (fontified t) 496 500 (fontified t) 500 524 (fontified t) 524 526 (fontified t face font-lock-type-face) 526 542 (fontified t) 542 543 (fontified t syntax-table #2#) 543 544 (fontified t) 544 552 (fontified t face rust-builtin-formatting-macro-face) 552 553 (fontified t) 553 554 (fontified t face font-lock-string-face) 554 556 (fontified t face rust-string-interpolation-face) 556 557 (fontified t face font-lock-string-face) 557 564 (fontified t) 564 575 (fontified t) 575 576 (fontified t) 576 641 (fontified t) 641 686 (fontified t) 686 696 (fontified t face font-lock-preprocessor-face) 696 705 (fontified t) 705 707 (fontified t face font-lock-type-face) 707 730 (fontified t) 730 732 (fontified t face font-lock-type-face) 732 737 (fontified t) 737 752 (fontified t) 752 753 (fontified t) 753 760 (fontified t) 760 762 (fontified t)) . 1) (undo-tree-id8519 . -752) (undo-tree-id8520 . -564) (undo-tree-id8521 . -564) (undo-tree-id8522 . -641) (undo-tree-id8523 . 9) (undo-tree-id8524 . -668) (undo-tree-id8525 . -752) (undo-tree-id8526 . 187) (undo-tree-id8527 . -481) (undo-tree-id8528 . -601) (undo-tree-id8529 . -481) (undo-tree-id8530 . -601) (undo-tree-id8531 . -481) (undo-tree-id8532 . -601) (undo-tree-id8533 . -575) (undo-tree-id8534 . -578) (undo-tree-id8535 . -481) (undo-tree-id8536 . -601) (undo-tree-id8537 . -575) (undo-tree-id8538 . -575) (undo-tree-id8539 . -575) (undo-tree-id8540 . -575) (undo-tree-id8541 . -575) (undo-tree-id8542 . -575) (undo-tree-id8543 . -575) (undo-tree-id8544 . -575) (undo-tree-id8545 . -575) (undo-tree-id8546 . -575) (undo-tree-id8547 . -575) (undo-tree-id8548 . -575) (undo-tree-id8549 . -575) (undo-tree-id8550 . -575) (undo-tree-id8551 . -575) (undo-tree-id8552 . -575) (undo-tree-id8553 . -575) (undo-tree-id8554 . -575) (undo-tree-id8555 . -575) (undo-tree-id8556 . -481) (undo-tree-id8557 . -601) (undo-tree-id8558 . -575) (undo-tree-id8559 . -582) (undo-tree-id8560 . -575) (undo-tree-id8561 . -575) (undo-tree-id8562 . -575) (undo-tree-id8563 . -575) (undo-tree-id8564 . -575) (undo-tree-id8565 . -575) (undo-tree-id8566 . -481) (undo-tree-id8567 . -601) (undo-tree-id8568 . -575) (undo-tree-id8569 . -579) (undo-tree-id8570 . -481) (undo-tree-id8571 . -601) (undo-tree-id8572 . -575) (undo-tree-id8573 . -576) (undo-tree-id8574 . -575) (undo-tree-id8575 . -575) (undo-tree-id8576 . -481) (undo-tree-id8577 . -601) (undo-tree-id8578 . -575) (undo-tree-id8579 . -575) (undo-tree-id8580 . -575) (undo-tree-id8581 . -575) (undo-tree-id8582 . -575) (undo-tree-id8583 . -575) (undo-tree-id8584 . -575) (undo-tree-id8585 . -575) (undo-tree-id8586 . -575) (undo-tree-id8587 . -575) (undo-tree-id8588 . -575) (undo-tree-id8589 . -575) (undo-tree-id8590 . -575) (undo-tree-id8591 . -575) (undo-tree-id8592 . -575) (undo-tree-id8593 . -575) (undo-tree-id8594 . -575) (undo-tree-id8595 . -575) (undo-tree-id8596 . -575) (undo-tree-id8597 . -575) (undo-tree-id8598 . -467) (undo-tree-id8599 . -471) (undo-tree-id8600 . -250) (undo-tree-id8601 . -625) (undo-tree-id8602 . -686) (undo-tree-id8603 . -713) (undo-tree-id8604 . -686) (undo-tree-id8605 . -713) (undo-tree-id8606 . -686) (undo-tree-id8607 . -713) (undo-tree-id8608 . -686) (undo-tree-id8609 . -713) (undo-tree-id8610 . -686) (undo-tree-id8611 . -713) (undo-tree-id8612 . -10) (undo-tree-id8613 . -563) (undo-tree-id8614 . -575) (undo-tree-id8615 . -563) (undo-tree-id8616 . -575) (undo-tree-id8617 . -563) (undo-tree-id8618 . -575) (undo-tree-id8619 . -563) (undo-tree-id8620 . -563) (undo-tree-id8621 . -563) (undo-tree-id8622 . -563) (undo-tree-id8623 . -563) (undo-tree-id8624 . -563) (undo-tree-id8625 . -563) (undo-tree-id8626 . -563) (undo-tree-id8627 . -563) (undo-tree-id8628 . -563) (undo-tree-id8629 . -563) (undo-tree-id8630 . -563) (undo-tree-id8631 . -563) (undo-tree-id8632 . -563) (undo-tree-id8633 . -563) (undo-tree-id8634 . -563) (undo-tree-id8635 . -604) (undo-tree-id8636 . -607) (undo-tree-id8637 . -10) (undo-tree-id8638 . -611) (undo-tree-id8639 . -618) (undo-tree-id8640 . -604) (undo-tree-id8641 . -607) (undo-tree-id8642 . -611) (undo-tree-id8643 . -614) (undo-tree-id8644 . -604) (undo-tree-id8645 . -607) (undo-tree-id8646 . -10) (undo-tree-id8647 . -481) (undo-tree-id8648 . -628) (undo-tree-id8649 . -611) (undo-tree-id8650 . -614) (undo-tree-id8651 . -555) (undo-tree-id8652 . -563) (undo-tree-id8653 . -555) (undo-tree-id8654 . -555) (undo-tree-id8655 . -563) (undo-tree-id8656 . -555) (undo-tree-id8657 . -555) (undo-tree-id8658 . -563) (undo-tree-id8659 . -555) (undo-tree-id8660 . -555) (undo-tree-id8661 . -555) (undo-tree-id8662 . -563) (undo-tree-id8663 . -555) (undo-tree-id8664 . -563) (undo-tree-id8665 . -686) (undo-tree-id8666 . -695) (undo-tree-id8667 . -686) (undo-tree-id8668 . -695) (undo-tree-id8669 . -686) (undo-tree-id8670 . -695) (undo-tree-id8671 . -686) (undo-tree-id8672 . -695) (undo-tree-id8673 . -686) (undo-tree-id8674 . -695) (undo-tree-id8675 . -250) (undo-tree-id8676 . -255) (undo-tree-id8677 . -467) (undo-tree-id8678 . -471) (undo-tree-id8679 . -467) (undo-tree-id8680 . -471) (undo-tree-id8681 . -250) (undo-tree-id8682 . -625) (undo-tree-id8683 . -686) (undo-tree-id8684 . -713) (undo-tree-id8685 . -686) (undo-tree-id8686 . -713) (undo-tree-id8687 . -686) (undo-tree-id8688 . -713) (undo-tree-id8689 . -686) (undo-tree-id8690 . -713) (undo-tree-id8691 . -686) (undo-tree-id8692 . -713) (undo-tree-id8693 . -556) (undo-tree-id8694 . -557) (undo-tree-id8695 . -554) (undo-tree-id8696 . -555) (undo-tree-id8697 . 208) (undo-tree-id8698 . -555) (undo-tree-id8699 . 207) (undo-tree-id8700 . -555) (undo-tree-id8701 . 207) (undo-tree-id8702 . -556)) (23740 40882 366680 348000) 0 nil]) ((534 . 540) (532 . 534) (#("." 0 1 (fontified t)) . -532) (undo-tree-id2332 . -1) (undo-tree-id2333 . -1) 533 (530 . 533) (#("t" 0 1 (fontified t)) . -530) (undo-tree-id2334 . -1) (undo-tree-id2335 . -1) 531 (524 . 531) (#(" " 0 1 (fontified t)) . -524) (undo-tree-id2336 . -1) (undo-tree-id2337 . -1) (#("r" 0 1 (fontified t)) . -525) (undo-tree-id2338 . -1) (undo-tree-id2339 . -1) 526 (524 . 526) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 524) (523 . 524) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 523) (522 . 523) (521 . 523) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -521) (521 . 522) (520 . 522) (#("\"" 0 1 (fontified nil)) . -520) (520 . 521) (519 . 521) (#("(" 0 1 (fontified nil)) . -519) (519 . 520) (513 . 519) (#("e" 0 1 (fontified t)) . -513) (undo-tree-id2340 . -1) (undo-tree-id2341 . -1) 514 (509 . 514) (#(" " 0 1 (fontified nil)) . -509) (509 . 510) (#(">" 0 1 (fontified nil syntax-table #2#)) . -509) (507 . 510) (#(")" 0 1 (fontified nil)) . 507) (506 . 507) (#(" " 0 1 (fontified nil)) . -506) (506 . 507) (#(")" 0 1 (fontified nil)) . -506) (506 . 507) (494 . 506) (#("v" 0 1 (fontified t)) . -494) (undo-tree-id2342 . -1) (undo-tree-id2343 . -1) (#("a" 0 1 (fontified t)) . -495) (undo-tree-id2344 . -1) (undo-tree-id2345 . -1) (#("l" 0 1 (fontified t)) . -496) (undo-tree-id2346 . -1) (undo-tree-id2347 . -1) (#("u" 0 1 (fontified t)) . -497) (undo-tree-id2348 . -1) (undo-tree-id2349 . -1) (#("e" 0 1 (fontified t)) . -498) (undo-tree-id2350 . -1) (undo-tree-id2351 . -1) 499 (494 . 499) (493 . 495) (#("(" 0 1 (fontified nil face font-lock-type-face)) . -493) (491 . 494) (470 . 491) (469 . 471) (#("{" 0 1 (fontified nil)) . -469) (456 . 470)) ((#("match result {" 0 5 (fontified nil face font-lock-keyword-face) 5 13 (fontified nil) 13 14 (fontified nil)) . 456) (undo-tree-id8703 . -13) (undo-tree-id8704 . -13) (undo-tree-id8705 . -13) (undo-tree-id8706 . -13) (undo-tree-id8707 . -13) (undo-tree-id8708 . -13) (undo-tree-id8709 . -13) (undo-tree-id8710 . -13) (undo-tree-id8711 . -13) (undo-tree-id8712 . -13) (undo-tree-id8713 . -13) (469 . 470) (#("{}" 0 1 (fontified nil) 1 2 (fontified nil)) . 469) (undo-tree-id8714 . 1) (undo-tree-id8715 . -1) (undo-tree-id8716 . -1) (undo-tree-id8717 . -1) (undo-tree-id8718 . -1) (undo-tree-id8719 . -1) (undo-tree-id8720 . -1) (undo-tree-id8721 . -1) (undo-tree-id8722 . -1) (undo-tree-id8723 . -1) (undo-tree-id8724 . -1) (undo-tree-id8725 . -1) (#("
                    " 0 1 (fontified t) 1 21 (fontified nil)) . 470) (undo-tree-id8726 . -21) (undo-tree-id8727 . -21) (undo-tree-id8728 . -21) (undo-tree-id8729 . -21) (undo-tree-id8730 . -21) (undo-tree-id8731 . -21) (undo-tree-id8732 . -21) (undo-tree-id8733 . -21) (undo-tree-id8734 . -21) (undo-tree-id8735 . -21) (undo-tree-id8736 . -21) (#("Ok(" 0 2 (fontified nil face font-lock-type-face) 2 3 (fontified nil face font-lock-type-face)) . 491) (undo-tree-id8737 . -2) (undo-tree-id8738 . -2) (undo-tree-id8739 . -2) (undo-tree-id8740 . -2) (undo-tree-id8741 . -2) (undo-tree-id8742 . -2) (undo-tree-id8743 . -2) (undo-tree-id8744 . -2) (undo-tree-id8745 . -2) (undo-tree-id8746 . -2) (undo-tree-id8747 . -2) (493 . 494) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 493) (undo-tree-id8748 . -1) (undo-tree-id8749 . -1) (undo-tree-id8750 . -1) (undo-tree-id8751 . -1) (undo-tree-id8752 . -1) (undo-tree-id8753 . -1) (undo-tree-id8754 . -1) (undo-tree-id8755 . -1) (undo-tree-id8756 . -1) (undo-tree-id8757 . -1) (undo-tree-id8758 . -1) (#("value" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil) 3 4 (fontified nil) 4 5 (fontified nil)) . 494) (undo-tree-id8759 . -5) (undo-tree-id8760 . -5) (494 . 499) (#("result_tuple" 0 7 (fontified nil) 7 12 (fontified nil)) . 494) (undo-tree-id8761 . -12) (undo-tree-id8762 . -12) (undo-tree-id8763 . -12) (undo-tree-id8764 . -12) (undo-tree-id8765 . -12) (undo-tree-id8766 . -12) (undo-tree-id8767 . -12) (undo-tree-id8768 . -12) (undo-tree-id8769 . -12) (undo-tree-id8770 . -12) (undo-tree-id8771 . -12) (#(")" 0 1 (fontified nil)) . 506) (506 . 507) (#(" " 0 1 (fontified nil)) . 506) (506 . 507) (#(")" 0 1 (fontified nil)) . 506) (undo-tree-id8772 . -1) (undo-tree-id8773 . -1) (undo-tree-id8774 . -1) (undo-tree-id8775 . -1) (undo-tree-id8776 . -1) (undo-tree-id8777 . -1) (undo-tree-id8778 . -1) (undo-tree-id8779 . -1) (undo-tree-id8780 . -1) (undo-tree-id8781 . -1) (undo-tree-id8782 . -1) (507 . 508) (#(" =>" 0 2 (fontified nil) 2 3 (fontified nil syntax-table #2#)) . 507) (undo-tree-id8783 . -2) (undo-tree-id8784 . -2) (undo-tree-id8785 . -2) (undo-tree-id8786 . -2) (undo-tree-id8787 . -2) (undo-tree-id8788 . -2) (undo-tree-id8789 . -2) (undo-tree-id8790 . -2) (undo-tree-id8791 . -2) (undo-tree-id8792 . -2) (undo-tree-id8793 . -2) (509 . 510) (#(" " 0 1 (fontified nil)) . 509) (509 . 510) (#("> pre" 0 1 (fontified nil syntax-table #2#) 1 2 (fontified nil) 2 4 (fontified nil face rust-builtin-formatting-macro-face) 4 5 (fontified nil)) . 509) (undo-tree-id8794 . -4) (undo-tree-id8795 . -4) (undo-tree-id8796 . -4) (undo-tree-id8797 . -5) (undo-tree-id8798 . -5) (undo-tree-id8799 . -4) (undo-tree-id8800 . -4) (undo-tree-id8801 . -4) (undo-tree-id8802 . -4) (undo-tree-id8803 . -4) (undo-tree-id8804 . -4) (513 . 514) (#("intln!" 0 6 (fontified nil face rust-builtin-formatting-macro-face)) . 513) (undo-tree-id8805 . -6) (undo-tree-id8806 . -6) (undo-tree-id8807 . -6) (undo-tree-id8808 . -6) (undo-tree-id8809 . -6) (undo-tree-id8810 . -6) (undo-tree-id8811 . -6) (undo-tree-id8812 . -6) (undo-tree-id8813 . -6) (undo-tree-id8814 . -6) (undo-tree-id8815 . -6) (#("(" 0 1 (fontified nil)) . 519) (519 . 520) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 519) (undo-tree-id8816 . 1) (undo-tree-id8817 . -1) (undo-tree-id8818 . -1) (undo-tree-id8819 . -1) (undo-tree-id8820 . -1) (undo-tree-id8821 . -1) (undo-tree-id8822 . -1) (undo-tree-id8823 . -1) (undo-tree-id8824 . -1) (undo-tree-id8825 . -1) (undo-tree-id8826 . -1) (undo-tree-id8827 . -1) (#("\"" 0 1 (fontified nil)) . 520) (520 . 521) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 520) (undo-tree-id8828 . -1) (undo-tree-id8829 . -1) (undo-tree-id8830 . -1) (undo-tree-id8831 . -1) (undo-tree-id8832 . -1) (undo-tree-id8833 . -1) (undo-tree-id8834 . -1) (undo-tree-id8835 . -1) (undo-tree-id8836 . -1) (undo-tree-id8837 . -1) (undo-tree-id8838 . -1) (#("{" 0 1 (fontified nil face font-lock-string-face)) . 521) (521 . 522) (#("{}" 0 1 (fontified nil face rust-string-interpolation-face) 1 2 (fontified nil face rust-string-interpolation-face)) . 521) (undo-tree-id8839 . -1) (undo-tree-id8840 . -1) (undo-tree-id8841 . -1) (undo-tree-id8842 . -1) (undo-tree-id8843 . -1) (undo-tree-id8844 . -1) (undo-tree-id8845 . -1) (undo-tree-id8846 . -1) (undo-tree-id8847 . -1) (undo-tree-id8848 . -1) (undo-tree-id8849 . -1) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 522) (undo-tree-id8850 . -1) (undo-tree-id8851 . -1) (undo-tree-id8852 . -1) (undo-tree-id8853 . -1) (undo-tree-id8854 . -1) (undo-tree-id8855 . -1) (undo-tree-id8856 . -1) (undo-tree-id8857 . -1) (undo-tree-id8858 . -1) (undo-tree-id8859 . -1) (undo-tree-id8860 . -1) (523 . 524) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 523) (undo-tree-id8861 . -1) (undo-tree-id8862 . -1) (undo-tree-id8863 . -1) (undo-tree-id8864 . -1) (undo-tree-id8865 . -1) (undo-tree-id8866 . -1) (undo-tree-id8867 . -1) (undo-tree-id8868 . -1) (undo-tree-id8869 . -1) (undo-tree-id8870 . -1) (undo-tree-id8871 . -1) (524 . 525) (#(" r" 0 1 (fontified nil) 1 2 (fontified nil)) . 524) (undo-tree-id8872 . -2) (undo-tree-id8873 . -2) (524 . 526) (#(", resut" 0 6 (fontified nil) 6 7 (fontified nil)) . 524) (undo-tree-id8874 . -6) (undo-tree-id8875 . -6) (undo-tree-id8876 . -6) (undo-tree-id8877 . -7) (undo-tree-id8878 . -7) (undo-tree-id8879 . -6) (undo-tree-id8880 . -6) (undo-tree-id8881 . -6) (undo-tree-id8882 . -6) (undo-tree-id8883 . -2) (undo-tree-id8884 . -6) (530 . 531) (#("lt." 0 2 (fontified nil) 2 3 (fontified nil)) . 530) (undo-tree-id8885 . -2) (undo-tree-id8886 . -2) (undo-tree-id8887 . -2) (undo-tree-id8888 . -3) (undo-tree-id8889 . -3) (undo-tree-id8890 . -2) (undo-tree-id8891 . -2) (undo-tree-id8892 . -2) (undo-tree-id8893 . -2) (undo-tree-id8894 . -2) (532 . 533) (#("_t" 0 2 (fontified nil)) . 532) (undo-tree-id8895 . -2) (undo-tree-id8896 . -2) (undo-tree-id8897 . -2) (undo-tree-id8898 . -2) (undo-tree-id8899 . -2) (undo-tree-id8900 . -2) (undo-tree-id8901 . -2) (undo-tree-id8902 . -2) (undo-tree-id8903 . -2) (undo-tree-id8904 . -2) (#("uple.1" 0 6 (fontified t)) . 534) (undo-tree-id8905 . -5) (undo-tree-id8906 . -5) (undo-tree-id8907 . -5) (undo-tree-id8908 . -5) (undo-tree-id8909 . -5) (undo-tree-id8910 . -5) (undo-tree-id8911 . -5) (undo-tree-id8912 . -5) (undo-tree-id8913 . -5) (undo-tree-id8914 . -4)) (23740 40882 704385 886000) 0 nil]) ((#("a" 0 1 (fontified t)) . 456) (undo-tree-id2353 . -1)) ((456 . 457)) (23740 40884 914480 949000) 0 nil]) ((448 . 454) (#("a" 0 1 (fontified t)) . 448) (t 23740 40038 734152 369000)) ((448 . 449) (#("result" 0 6 (fontified t)) . 448)) (23740 40886 243772 124000) 0 nil]) ((1 . 591) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection
                            .read_response().then(|a| a)
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 416 (fontified t) 416 450 (fontified t) 450 451 (fontified t) 451 500 (fontified t) 500 506 (fontified t) 506 507 (fontified t) 507 508 (fontified t) 508 512 (fontified t) 512 531 (fontified t) 531 591 (fontified t) 591 601 (fontified t face font-lock-preprocessor-face) 601 610 (fontified t) 610 612 (fontified t face font-lock-type-face) 612 635 (fontified t) 635 637 (fontified t face font-lock-type-face) 637 667 (fontified t)) . 1) (undo-tree-id1809 . -508) (undo-tree-id1810 . -508) (undo-tree-id1811 . 159) (undo-tree-id1812 . -508) (undo-tree-id1813 . -508) (undo-tree-id1814 . 161) (undo-tree-id1815 . -485) (undo-tree-id1816 . -485) (undo-tree-id1817 . -508) (undo-tree-id1818 . -485) (undo-tree-id1819 . -485) (undo-tree-id1821 . -505) (undo-tree-id1823 . -506) (undo-tree-id1825 . -506) (undo-tree-id1827 . -505) (undo-tree-id1829 . -505) (undo-tree-id1831 . -505) (undo-tree-id1833 . -505) (undo-tree-id1835 . -505) (undo-tree-id1837 . -505) (undo-tree-id1839 . -504) (undo-tree-id1841 . -504) (undo-tree-id1843 . -505) (undo-tree-id1845 . -504) (undo-tree-id1847 . -504) (undo-tree-id1849 . -504) (undo-tree-id1851 . -503) (undo-tree-id1853 . -503) (undo-tree-id1855 . -504) (undo-tree-id1857 . -503) (undo-tree-id1859 . -503) (undo-tree-id1861 . -503) (undo-tree-id1863 . -502) (undo-tree-id1865 . -502) (undo-tree-id1867 . -503) (undo-tree-id1869 . -502) (undo-tree-id1871 . -502) (undo-tree-id1873 . -502) (undo-tree-id1875 . -501) (undo-tree-id1877 . -501) (undo-tree-id1879 . -502) (undo-tree-id1881 . -501) (undo-tree-id1883 . -501) (undo-tree-id1885 . -501) (undo-tree-id1887 . -500) (undo-tree-id1889 . -500) (undo-tree-id1891 . -501) (undo-tree-id1893 . -500) (undo-tree-id1895 . -500) (undo-tree-id1897 . -500) (undo-tree-id1899 . -499) (undo-tree-id1901 . -499) (undo-tree-id1903 . -500) (undo-tree-id1905 . -499) (undo-tree-id1907 . -499) (undo-tree-id1909 . -499) (undo-tree-id1911 . -498) (undo-tree-id1913 . -498) (undo-tree-id1915 . -499) (undo-tree-id1917 . -498) (undo-tree-id1919 . -498) (undo-tree-id1921 . -498) (undo-tree-id1923 . -498) (undo-tree-id1925 . -498) (undo-tree-id1927 . -498) (undo-tree-id1929 . -498) (undo-tree-id1931 . -498) (undo-tree-id1933 . -498) (undo-tree-id1935 . -498) (undo-tree-id1937 . -498) (undo-tree-id1939 . -498) (undo-tree-id1941 . -498) (undo-tree-id1943 . -497) (undo-tree-id1945 . -497) (undo-tree-id1947 . -498) (undo-tree-id1949 . -497) (undo-tree-id1951 . -497) (undo-tree-id1953 . -497) (undo-tree-id1955 . -497) (undo-tree-id1957 . -497) (undo-tree-id1959 . -497) (undo-tree-id1961 . -497) (undo-tree-id1963 . -496) (undo-tree-id1965 . -496) (undo-tree-id1967 . -497) (undo-tree-id1969 . -496) (undo-tree-id1971 . -496) (undo-tree-id1973 . -496) (undo-tree-id1975 . -496) (undo-tree-id1977 . -496) (undo-tree-id1979 . -496) (undo-tree-id1981 . -496) (undo-tree-id1983 . -496) (undo-tree-id1985 . -496) (undo-tree-id1987 . -496) (undo-tree-id1989 . -496) (undo-tree-id1991 . -496) (undo-tree-id1993 . -496) (undo-tree-id1995 . -496) (undo-tree-id1997 . -496) (undo-tree-id1999 . -496) (undo-tree-id2001 . -496) (undo-tree-id2003 . -496) (undo-tree-id2005 . -496) (undo-tree-id2007 . -496) (undo-tree-id2009 . -496) (undo-tree-id2011 . -496) (undo-tree-id2013 . -496) (undo-tree-id2015 . -496) (undo-tree-id2017 . -496) (undo-tree-id2019 . -496) (undo-tree-id2021 . -496) (undo-tree-id2023 . -496) (undo-tree-id2025 . -496) (undo-tree-id2027 . -496) (undo-tree-id2029 . -496) (undo-tree-id2031 . -496) (undo-tree-id2033 . -496) (undo-tree-id2035 . -496) (undo-tree-id2037 . -496) (undo-tree-id2039 . -496) (undo-tree-id2041 . -496) (undo-tree-id2043 . -496) (undo-tree-id2045 . -496) (undo-tree-id2047 . -496) (undo-tree-id2049 . -496) (undo-tree-id2051 . -496) (undo-tree-id2053 . -496) (undo-tree-id2055 . -496) (undo-tree-id2057 . -496) (undo-tree-id2059 . -496) (undo-tree-id2061 . -496) (undo-tree-id2063 . -496) (undo-tree-id2065 . -496) (undo-tree-id2067 . -496) (undo-tree-id2069 . -496) (undo-tree-id2071 . -591) (undo-tree-id2073 . -591) (undo-tree-id2075 . -591) (undo-tree-id2077 . -591) (undo-tree-id2079 . -591) (undo-tree-id2081 . -591) (undo-tree-id2083 . -591) (undo-tree-id2085 . -591) (undo-tree-id2087 . -497) (undo-tree-id2089 . -497) (undo-tree-id2091 . -496) (undo-tree-id2093 . -497) (undo-tree-id2095 . -497) (undo-tree-id2097 . -497) (undo-tree-id2099 . -498) (undo-tree-id2101 . -498) (undo-tree-id2103 . -497) (undo-tree-id2105 . -498) (undo-tree-id2107 . -498) (undo-tree-id2108 . -498) (undo-tree-id2110 . -497) (undo-tree-id2112 . -497) (undo-tree-id2114 . -563) (undo-tree-id2116 . -500) (undo-tree-id2118 . -498) (undo-tree-id2120 . -498) (undo-tree-id2122 . -498) (undo-tree-id2124 . -498) (undo-tree-id2126 . -498) (undo-tree-id2128 . -498) (undo-tree-id2130 . -498) (undo-tree-id2132 . -498) (undo-tree-id2134 . -498) 499) ((1 . 668) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| connection.read_response().then(|a| a))
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 366 (fontified t) 366 447 (fontified t) 447 448 (fontified t) 448 450 (fontified t) 450 451 (fontified t) 451 454 (fontified t) 454 469 (fontified t) 469 497 (fontified t) 497 514 (fontified t) 514 524 (fontified t face font-lock-preprocessor-face) 524 533 (fontified t) 533 535 (fontified t face font-lock-type-face) 535 558 (fontified t) 558 560 (fontified t face font-lock-type-face) 560 590 (fontified t)) . 1) (undo-tree-id8915 . -447) (undo-tree-id8916 . 139) (undo-tree-id8917 . -447) (undo-tree-id8918 . -446) (undo-tree-id8919 . -447) (undo-tree-id8920 . -447) (undo-tree-id8921 . -447) (undo-tree-id8922 . -447) (undo-tree-id8923 . -450) (undo-tree-id8924 . -450) (undo-tree-id8925 . -450) (undo-tree-id8926 . -450) (undo-tree-id8927 . -450) (undo-tree-id8928 . -450) (undo-tree-id8929 . -450) (undo-tree-id8930 . -450) (undo-tree-id8931 . -450) (undo-tree-id8932 . -450) (undo-tree-id8933 . -450) (undo-tree-id8934 . -450) (undo-tree-id8935 . -450) (undo-tree-id8936 . -450) (undo-tree-id8937 . -450) (undo-tree-id8938 . -450) (undo-tree-id8939 . -450) (undo-tree-id8940 . -450) (undo-tree-id8941 . -450) (undo-tree-id8942 . -445) (undo-tree-id8943 . -446) (undo-tree-id8944 . -450) (undo-tree-id8945 . -450) (undo-tree-id8946 . -450) (undo-tree-id8947 . -450) (undo-tree-id8948 . -450) (undo-tree-id8949 . -450) (undo-tree-id8950 . -450) (undo-tree-id8951 . -450) (undo-tree-id8952 . -450) (undo-tree-id8953 . -452) (undo-tree-id8954 . -450) (undo-tree-id8955 . -450) (undo-tree-id8956 . -450) (undo-tree-id8957 . -450) (undo-tree-id8958 . -450) (undo-tree-id8959 . -450) (undo-tree-id8960 . -450) (undo-tree-id8961 . -450) (undo-tree-id8962 . -450) (undo-tree-id8963 . -450) (undo-tree-id8964 . -450) (undo-tree-id8965 . -450) (undo-tree-id8966 . -450) (undo-tree-id8967 . -450) (undo-tree-id8968 . -450) (undo-tree-id8969 . -450) (undo-tree-id8970 . -447) (undo-tree-id8971 . -450) (undo-tree-id8972 . -447) (undo-tree-id8973 . -447) (undo-tree-id8974 . -450) (undo-tree-id8975 . -447) (undo-tree-id8976 . -447) (undo-tree-id8977 . -450) (undo-tree-id8978 . -447) (undo-tree-id8979 . -447) (undo-tree-id8980 . -447) (undo-tree-id8981 . -450) (undo-tree-id8982 . -447) (undo-tree-id8983 . -450) (undo-tree-id8984 . -514) (undo-tree-id8985 . -523) (undo-tree-id8986 . -514) (undo-tree-id8987 . -523) (undo-tree-id8988 . -514) (undo-tree-id8989 . -523) (undo-tree-id8990 . -514) (undo-tree-id8991 . -523) (undo-tree-id8992 . -453) (undo-tree-id8993 . -454) (undo-tree-id8994 . -455) (undo-tree-id8995 . -456) (undo-tree-id8996 . -514) (undo-tree-id8997 . -541) (undo-tree-id8998 . -514) (undo-tree-id8999 . -541) (undo-tree-id9000 . -514) (undo-tree-id9001 . -541) (undo-tree-id9002 . -514) (undo-tree-id9003 . -541)) (23740 40886 592054 775000) 0 nil]) ((#("and_" 0 4 (fontified t)) . 497) (undo-tree-id2136 . -4) (undo-tree-id2138 . -4) (undo-tree-id2140 . -4) (undo-tree-id2142 . -3) (undo-tree-id2144 . -3) (undo-tree-id2146 . -4) (undo-tree-id2148 . -3) (undo-tree-id2150 . -3) (undo-tree-id2152 . -3) (undo-tree-id2154 . -2) (undo-tree-id2156 . -2) (undo-tree-id2158 . -3) (undo-tree-id2160 . -2) (undo-tree-id2162 . -2) (undo-tree-id2164 . -2) (undo-tree-id2166 . -1) (undo-tree-id2168 . -1) (undo-tree-id2170 . -2) (undo-tree-id2172 . -1) (undo-tree-id2174 . -1) (undo-tree-id2176 . -1) (undo-tree-id2178 . -1) (undo-tree-id2180 . -1) (undo-tree-id2182 . -1)) ((497 . 501)) (23740 40886 897201 763000) 0 nil]) ((506 . 511) (505 . 507) (#("(" 0 1 (fontified nil)) . -505) (502 . 506) (#("e" 0 1 (fontified t)) . -502) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (#("h" 0 1 (fontified t)) . -503) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) 504 (496 . 504)) ((#(".and_teh" 0 1 (fontified nil) 1 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil)) . 496) (undo-tree-id9004 . -6) (undo-tree-id9005 . -6) (undo-tree-id9006 . -6) (undo-tree-id9007 . -6) (undo-tree-id9008 . -6) (undo-tree-id9009 . -6) (undo-tree-id9010 . -6) (undo-tree-id9011 . -6) (undo-tree-id9012 . -6) (undo-tree-id9013 . -6) (undo-tree-id9014 . -6) (undo-tree-id9015 . -6) (undo-tree-id9016 . -1) (undo-tree-id9017 . -6) (undo-tree-id9018 . -1) (undo-tree-id9019 . -1) (undo-tree-id9020 . -6) (undo-tree-id9021 . -1) (undo-tree-id9022 . -1) (undo-tree-id9023 . -6) (undo-tree-id9024 . -1) (undo-tree-id9025 . -1) (undo-tree-id9026 . -1) (undo-tree-id9027 . -6) (undo-tree-id9028 . -1) (undo-tree-id9029 . -6) (502 . 504) (#("hen(" 0 3 (fontified nil) 3 4 (fontified nil)) . 502) (undo-tree-id9030 . -1) (undo-tree-id9031 . -1) (undo-tree-id9032 . -1) (undo-tree-id9033 . -1) (undo-tree-id9034 . -1) (undo-tree-id9035 . -1) (undo-tree-id9036 . -1) (undo-tree-id9037 . -1) (undo-tree-id9038 . -1) (undo-tree-id9039 . -1) (undo-tree-id9040 . -1) (undo-tree-id9041 . -1) (undo-tree-id9042 . -1) (undo-tree-id9043 . -1) (undo-tree-id9044 . -1) (undo-tree-id9045 . -1) (undo-tree-id9046 . -1) (505 . 506) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 505) (undo-tree-id9047 . 1) (#("|a| a" 0 5 (fontified t)) . 506)) (23740 40888 339656 74000) 0 nil]) ((#("                            .map(|item| println!(\"{:?}\", item));
                        result
" 0 29 (fontified t) 29 32 (fontified t) 32 40 (fontified t) 40 48 (fontified t face rust-builtin-formatting-macro-face) 48 49 (fontified t) 49 50 (fontified t face font-lock-string-face) 50 54 (fontified t face rust-string-interpolation-face) 54 55 (fontified t face font-lock-string-face) 55 65 (fontified t) 65 96 (fontified t)) . 497) (undo-tree-id1276 . -95) (undo-tree-id1277 . -34) (undo-tree-id1278 . -95) (undo-tree-id1279 . 64) (undo-tree-id1281 . -30) (undo-tree-id1283 . -61) (undo-tree-id1285 . -61) (undo-tree-id1287 . -61) (undo-tree-id1288 . -34) (undo-tree-id1290 . -34) (undo-tree-id1292 . -34) (undo-tree-id1294 . -34) (undo-tree-id1296 . -34) (undo-tree-id1298 . -34) (undo-tree-id1300 . -34) (undo-tree-id1302 . -34) (undo-tree-id1304 . -34) (undo-tree-id1306 . -57) (undo-tree-id1308 . -34) (undo-tree-id1310 . -34) (undo-tree-id1312 . -96) (undo-tree-id1314 . -34) (undo-tree-id1316 . -34) (undo-tree-id1318 . -34) (undo-tree-id1320 . -34) (undo-tree-id1322 . -34) (undo-tree-id1323 . -34) (undo-tree-id1324 . -95) (undo-tree-id1326 . -34) (undo-tree-id1328 . -34) (undo-tree-id1330 . -95) (undo-tree-id1332 . -95) (undo-tree-id1334 . -34) (undo-tree-id1335 . -95) (undo-tree-id1336 . -95) (undo-tree-id1338 . -34) (undo-tree-id1340 . -34) (undo-tree-id1342 . -50) 592) ((497 . 593)) (23740 40888 632216 420000) 0 nil]) ((1 . 752) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection.read_response().map(|item| println!(\"{:?}\", item));
                        result
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 416 (fontified t) 416 478 (fontified t) 478 486 (fontified t face rust-builtin-formatting-macro-face) 486 487 (fontified t) 487 488 (fontified t face font-lock-string-face) 488 492 (fontified t face rust-string-interpolation-face) 492 493 (fontified t face font-lock-string-face) 493 495 (fontified t) 495 503 (fontified t) 503 518 (fontified t) 518 534 (fontified t) 534 557 (fontified t) 557 571 (fontified t) 571 617 (fontified t) 617 627 (fontified t face font-lock-preprocessor-face) 627 636 (fontified t) 636 638 (fontified t face font-lock-type-face) 638 661 (fontified t) 661 663 (fontified t face font-lock-type-face) 663 693 (fontified t)) . 1) (undo-tree-id613 . 202) (undo-tree-id615 . -494) (undo-tree-id617 . -494) (undo-tree-id619 . -494) (undo-tree-id621 . -494) (undo-tree-id623 . -494) (undo-tree-id625 . -494) (undo-tree-id627 . -494) (undo-tree-id629 . -494) (undo-tree-id631 . -494) (undo-tree-id633 . -414) (undo-tree-id635 . -414) (undo-tree-id637 . -494) (undo-tree-id639 . -414) (undo-tree-id641 . -414) (undo-tree-id643 . -414) (undo-tree-id645 . -487) (undo-tree-id647 . -494) (undo-tree-id649 . -494) (undo-tree-id651 . -414) (undo-tree-id653 . -494) (undo-tree-id655 . -494) (undo-tree-id657 . -494) (undo-tree-id659 . -495) (undo-tree-id661 . -495) (undo-tree-id663 . -494) (undo-tree-id665 . -495) (undo-tree-id667 . -495) (undo-tree-id669 . -495) (undo-tree-id671 . -495) (undo-tree-id673 . -495) (undo-tree-id675 . -495) (undo-tree-id677 . -495) (undo-tree-id679 . -495) (undo-tree-id681 . -495) (undo-tree-id683 . -494) (undo-tree-id685 . -494) (undo-tree-id687 . -495) (undo-tree-id689 . -494) (undo-tree-id691 . -494) (undo-tree-id693 . -494) (undo-tree-id695 . -494) (undo-tree-id697 . -494) (undo-tree-id699 . -493) (undo-tree-id701 . -493) (undo-tree-id703 . -494) (undo-tree-id705 . -493) (undo-tree-id707 . -493) (undo-tree-id709 . -493) (undo-tree-id711 . -492) (undo-tree-id713 . -492) (undo-tree-id715 . -492) (undo-tree-id717 . -493) (undo-tree-id719 . -492) (undo-tree-id721 . -492) (undo-tree-id723 . -492) (undo-tree-id725 . -489) (undo-tree-id727 . -489) (undo-tree-id729 . -492) (undo-tree-id731 . -489) (undo-tree-id733 . -489) (undo-tree-id735 . -489) (undo-tree-id737 . -492) (undo-tree-id739 . -488) (undo-tree-id741 . -489) (undo-tree-id743 . -489) (undo-tree-id745 . -489) (undo-tree-id747 . -489) (undo-tree-id749 . -489) (undo-tree-id751 . -489) (undo-tree-id753 . -490) (undo-tree-id755 . -490) (undo-tree-id757 . -489) (undo-tree-id759 . -490) (undo-tree-id761 . -490) (undo-tree-id763 . -490) (undo-tree-id765 . -495) (undo-tree-id767 . -491) (undo-tree-id769 . -491) (undo-tree-id771 . -490) (undo-tree-id773 . -491) (undo-tree-id775 . -491) (undo-tree-id777 . -491) (undo-tree-id779 . -495) (undo-tree-id781 . -495) (undo-tree-id783 . -490) (undo-tree-id785 . -490) (undo-tree-id787 . -490) (undo-tree-id789 . -490) (undo-tree-id791 . -490) (undo-tree-id792 . -490) (undo-tree-id794 . -490) (undo-tree-id796 . -490) 491) ((1 . 694) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection
                            .read_response()
                            .map(|item| println!(\"{:?}\", item));
                        result
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 416 (fontified t) 416 450 (fontified t) 450 451 (fontified t) 451 495 (fontified t) 495 496 (fontified t) 496 525 (fontified t) 525 528 (fontified t) 528 536 (fontified t) 536 544 (fontified t face rust-builtin-formatting-macro-face) 544 545 (fontified t) 545 546 (fontified t face font-lock-string-face) 546 550 (fontified t face rust-string-interpolation-face) 550 551 (fontified t face font-lock-string-face) 551 561 (fontified t) 561 591 (fontified t) 591 592 (fontified t) 592 596 (fontified t) 596 615 (fontified t) 615 675 (fontified t) 675 685 (fontified t face font-lock-preprocessor-face) 685 694 (fontified t) 694 696 (fontified t face font-lock-type-face) 696 719 (fontified t) 719 721 (fontified t face font-lock-type-face) 721 751 (fontified t)) . 1) (undo-tree-id9048 . -591) (undo-tree-id9049 . -496) (undo-tree-id9050 . 159) (undo-tree-id9051 . -530) (undo-tree-id9052 . -591) (undo-tree-id9053 . 256) (undo-tree-id9054 . -485) (undo-tree-id9055 . -485) (undo-tree-id9056 . -530) (undo-tree-id9057 . -485) (undo-tree-id9058 . -485) (undo-tree-id9059 . -495) (undo-tree-id9060 . -495) (undo-tree-id9061 . -495) (undo-tree-id9062 . -495) (undo-tree-id9063 . -495) (undo-tree-id9064 . -495) (undo-tree-id9065 . -495) (undo-tree-id9066 . -495) (undo-tree-id9067 . -495) (undo-tree-id9068 . -495) (undo-tree-id9069 . -495) (undo-tree-id9070 . -495) (undo-tree-id9071 . -675) (undo-tree-id9072 . -702) (undo-tree-id9073 . -675) (undo-tree-id9074 . -702) (undo-tree-id9075 . -675) (undo-tree-id9076 . -702) (undo-tree-id9077 . -675) (undo-tree-id9078 . -702) (undo-tree-id9079 . -495) (undo-tree-id9080 . -495) (undo-tree-id9081 . -495) (undo-tree-id9082 . -495) (undo-tree-id9083 . -495) (undo-tree-id9084 . -495) (undo-tree-id9085 . -495) (undo-tree-id9086 . -495) (undo-tree-id9087 . -495) (undo-tree-id9088 . -495) (undo-tree-id9089 . -495) (undo-tree-id9090 . -495) (undo-tree-id9091 . -451) (undo-tree-id9092 . -495) (undo-tree-id9093 . -494) (undo-tree-id9094 . -495) (undo-tree-id9095 . -494) (undo-tree-id9096 . -494) (undo-tree-id9097 . -495) (undo-tree-id9098 . -494) (undo-tree-id9099 . -494) (undo-tree-id9100 . -495) (undo-tree-id9101 . -494) (undo-tree-id9102 . -495) (undo-tree-id9103 . -494) (undo-tree-id9104 . -495) (undo-tree-id9105 . -496) (undo-tree-id9106 . -600) (undo-tree-id9107 . -250) (undo-tree-id9108 . -614) (undo-tree-id9109 . -675) (undo-tree-id9110 . -702) (undo-tree-id9111 . -675) (undo-tree-id9112 . -702) (undo-tree-id9113 . -675) (undo-tree-id9114 . -702) (undo-tree-id9115 . -675) (undo-tree-id9116 . -702) (undo-tree-id9117 . -675) (undo-tree-id9118 . -702) (undo-tree-id9119 . -675) (undo-tree-id9120 . -702) (undo-tree-id9121 . -493) (undo-tree-id9122 . -494) (undo-tree-id9123 . -561) (undo-tree-id9124 . -591) (undo-tree-id9125 . -590) (undo-tree-id9126 . -494) (undo-tree-id9127 . -590) (undo-tree-id9128 . -590) (undo-tree-id9129 . -494) (undo-tree-id9130 . -590) (undo-tree-id9131 . -590) (undo-tree-id9132 . -494) (undo-tree-id9133 . -590) (undo-tree-id9134 . -590) (undo-tree-id9135 . -590) (undo-tree-id9136 . -494) (undo-tree-id9137 . -590) (undo-tree-id9138 . -494) (undo-tree-id9139 . -496) (undo-tree-id9140 . -504) (undo-tree-id9141 . -631) (undo-tree-id9142 . -658) (undo-tree-id9143 . -631) (undo-tree-id9144 . -658) (undo-tree-id9145 . -631) (undo-tree-id9146 . -658) (undo-tree-id9147 . -631) (undo-tree-id9148 . -658) (undo-tree-id9149 . -553) (undo-tree-id9150 . -557) (undo-tree-id9151 . -553) (undo-tree-id9152 . -557)) (23740 40888 830803 245000) 0 nil]) ((490 . 492) (t 23740 39469 46188 583000)) ((#(":?" 0 2 (fontified t face rust-string-interpolation-face)) . 490) (undo-tree-id9153 . -1) (undo-tree-id9154 . -1) (undo-tree-id9155 . -1) (undo-tree-id9156 . -1) (undo-tree-id9157 . -1) (undo-tree-id9158 . -1) (undo-tree-id9159 . -1) (undo-tree-id9160 . -1) (undo-tree-id9161 . -1)) (23740 40889 709185 18000) 0 nil]) ((492 . 494) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 492) (undo-tree-id606 . -1) (491 . 492) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 491) (490 . 491) (489 . 491) (#("{" 0 1 (fontified nil face font-lock-string-face)) . -489) (undo-tree-id609 . -1) (489 . 490) (488 . 490) (#("\"" 0 1 (fontified nil)) . -488) (undo-tree-id612 . -1) (488 . 489) (t 23740 39459 532913 246000)) ((#("\"" 0 1 (fontified nil)) . 488) (undo-tree-id9162 . 1) (undo-tree-id9163 . 1) (undo-tree-id9164 . 1) (488 . 489) (#("\"\"" 0 1 (fontified nil face font-lock-string-face) 1 2 (fontified nil face font-lock-string-face)) . 488) (undo-tree-id9165 . 1) (undo-tree-id9166 . -1) (undo-tree-id9167 . -1) (undo-tree-id9168 . -1) (undo-tree-id9169 . -1) (undo-tree-id9170 . -1) (undo-tree-id9171 . -1) (undo-tree-id9172 . -1) (undo-tree-id9173 . -1) (undo-tree-id9174 . -1) (undo-tree-id9175 . -1) (undo-tree-id9176 . -1) (undo-tree-id9177 . -1) (undo-tree-id9178 . -1) (undo-tree-id9179 . -1) (undo-tree-id9180 . -1) (undo-tree-id9181 . -1) (undo-tree-id9182 . -1) (undo-tree-id9183 . -1) (undo-tree-id9184 . -1) (undo-tree-id9185 . -1) (undo-tree-id9186 . -1) (undo-tree-id9187 . -1) (undo-tree-id9188 . -1) (undo-tree-id9189 . -1) (undo-tree-id9190 . -1) (undo-tree-id9191 . 1) (undo-tree-id9192 . -1) (undo-tree-id9193 . 1) (undo-tree-id9194 . -1) (undo-tree-id9195 . 1) (undo-tree-id9196 . -1) (undo-tree-id9197 . -1) (undo-tree-id9198 . -1) (#("{" 0 1 (fontified nil face font-lock-string-face)) . 489) (undo-tree-id9199 . 1) (undo-tree-id9200 . 1) (undo-tree-id9201 . 1) (489 . 490) (#("{}" 0 1 (fontified nil face rust-string-interpolation-face) 1 2 (fontified nil face rust-string-interpolation-face)) . 489) (undo-tree-id9202 . 1) (undo-tree-id9203 . -1) (undo-tree-id9204 . -1) (undo-tree-id9205 . -1) (undo-tree-id9206 . -1) (undo-tree-id9207 . -1) (undo-tree-id9208 . -1) (undo-tree-id9209 . -1) (undo-tree-id9210 . -1) (undo-tree-id9211 . -1) (undo-tree-id9212 . -1) (undo-tree-id9213 . -1) (undo-tree-id9214 . -1) (undo-tree-id9215 . -1) (undo-tree-id9216 . -1) (undo-tree-id9217 . -1) (undo-tree-id9218 . -1) (undo-tree-id9219 . -1) (undo-tree-id9220 . -1) (undo-tree-id9221 . -1) (undo-tree-id9222 . -1) (undo-tree-id9223 . -1) (undo-tree-id9224 . -1) (undo-tree-id9225 . -1) (undo-tree-id9226 . -1) (undo-tree-id9227 . 2) (undo-tree-id9228 . -1) (undo-tree-id9229 . 1) (undo-tree-id9230 . -1) (undo-tree-id9231 . 1) (undo-tree-id9232 . -1) (undo-tree-id9233 . -1) (undo-tree-id9234 . -1) (#("}" 0 1 (fontified nil face rust-string-interpolation-face)) . 490) (undo-tree-id9235 . 1) (undo-tree-id9236 . -1) (undo-tree-id9237 . -1) (undo-tree-id9238 . 1) (undo-tree-id9239 . 1) (undo-tree-id9240 . -1) (undo-tree-id9241 . -1) (undo-tree-id9242 . -1) (491 . 492) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 491) (undo-tree-id9243 . -1) (undo-tree-id9244 . -1) (undo-tree-id9245 . -1) (492 . 493) (#(", " 0 2 (fontified t)) . 492) (undo-tree-id9246 . -2) (undo-tree-id9247 . -2)) (23740 40890 675100 585000) 0 nil]) ((1 . 686) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection
                            .read_response()
                            
                            .map(|item| println!(item));
                        result
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 416 (fontified t) 416 450 (fontified t) 450 496 (fontified t) 496 524 (fontified t) 524 525 (fontified t) 525 565 (fontified t) 565 573 (fontified t face rust-builtin-formatting-macro-face) 573 582 (fontified t) 582 696 (fontified t) 696 706 (fontified t face font-lock-preprocessor-face) 706 715 (fontified t) 715 717 (fontified t face font-lock-type-face) 717 740 (fontified t) 740 742 (fontified t face font-lock-type-face) 742 772 (fontified t)) . 1) (undo-tree-id520 . 215) (undo-tree-id522 . -578) (undo-tree-id524 . -553) (undo-tree-id526 . -554) (undo-tree-id528 . -554) (undo-tree-id530 . -554) (undo-tree-id532 . -554) (undo-tree-id534 . -554) (undo-tree-id536 . -554) (undo-tree-id538 . -554) (undo-tree-id540 . -554) (undo-tree-id542 . -554) (undo-tree-id544 . -555) (undo-tree-id546 . -555) (undo-tree-id548 . -554) (undo-tree-id550 . -555) (undo-tree-id552 . -555) (undo-tree-id554 . -555) (undo-tree-id556 . -574) (undo-tree-id558 . -554) (undo-tree-id560 . -556) (undo-tree-id562 . -556) (undo-tree-id564 . -555) (undo-tree-id566 . -556) (undo-tree-id568 . -556) (undo-tree-id570 . -556) (undo-tree-id572 . -557) (undo-tree-id574 . -557) (undo-tree-id576 . -556) (undo-tree-id578 . -557) (undo-tree-id580 . -557) (undo-tree-id582 . -557) (undo-tree-id584 . -556) (undo-tree-id586 . -556) (undo-tree-id588 . -556) (undo-tree-id590 . -556) (undo-tree-id592 . -556) (undo-tree-id593 . -556) (undo-tree-id595 . -556) (undo-tree-id597 . -556) (undo-tree-id599 . -578) (undo-tree-id601 . -578) 557) ((1 . 773) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection.read_response().map(|item| println!(item));
                        result
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 416 (fontified t) 416 478 (fontified t) 478 486 (fontified t face rust-builtin-formatting-macro-face) 486 487 (fontified t) 487 492 (fontified t) 492 495 (fontified t) 495 510 (fontified t) 510 526 (fontified t) 526 549 (fontified t) 549 563 (fontified t) 563 609 (fontified t) 609 619 (fontified t face font-lock-preprocessor-face) 619 628 (fontified t) 628 630 (fontified t face font-lock-type-face) 630 653 (fontified t) 653 655 (fontified t face font-lock-type-face) 655 685 (fontified t)) . 1) (undo-tree-id9248 . 198) (undo-tree-id9249 . -487) (undo-tree-id9250 . -487) (undo-tree-id9251 . -487) (undo-tree-id9252 . -487) (undo-tree-id9253 . -487) (undo-tree-id9254 . -487) (undo-tree-id9255 . -487) (undo-tree-id9256 . -487) (undo-tree-id9257 . -487) (undo-tree-id9258 . -487) (undo-tree-id9259 . -487) (undo-tree-id9260 . -487) (undo-tree-id9261 . -487) (undo-tree-id9262 . -487) (undo-tree-id9263 . -487) (undo-tree-id9264 . -487) (undo-tree-id9265 . -487) (undo-tree-id9266 . -487) (undo-tree-id9267 . -487) (undo-tree-id9268 . -487) (undo-tree-id9269 . -487) (undo-tree-id9270 . -487) (undo-tree-id9271 . -487) (undo-tree-id9272 . -487) (undo-tree-id9273 . -491) (undo-tree-id9274 . -487) (undo-tree-id9275 . -487) (undo-tree-id9276 . -487) (undo-tree-id9277 . -487) (undo-tree-id9278 . -487) (undo-tree-id9279 . -487) (undo-tree-id9280 . -487) (undo-tree-id9281 . -487) (undo-tree-id9282 . -487) (undo-tree-id9283 . -487) (undo-tree-id9284 . -487) (undo-tree-id9285 . -487) (undo-tree-id9286 . -487) (undo-tree-id9287 . -487) (undo-tree-id9288 . -487) (undo-tree-id9289 . -491) (undo-tree-id9290 . -487) (undo-tree-id9291 . -491) (undo-tree-id9292 . -487) (undo-tree-id9293 . -491) (undo-tree-id9294 . -487) (undo-tree-id9295 . -487) (undo-tree-id9296 . -487) (undo-tree-id9297 . -487) (undo-tree-id9298 . -487) (undo-tree-id9299 . -487) (undo-tree-id9300 . -487) (undo-tree-id9301 . -495) (undo-tree-id9302 . -488) (undo-tree-id9303 . -490) (undo-tree-id9304 . -487) (undo-tree-id9305 . -491) (undo-tree-id9306 . -487) (undo-tree-id9307 . -487)) (23740 40890 999935 974000) 0 nil]) ((555 . 558) (#("_each" 0 5 (fontified t)) . 555) (undo-tree-id602 . 5) (undo-tree-id604 . -5)) ((555 . 560) (#("map" 0 3 (fontified t)) . 555) (undo-tree-id9308 . -2) (undo-tree-id9309 . -2) (undo-tree-id9310 . -2) (undo-tree-id9311 . -2) (undo-tree-id9312 . -2) (undo-tree-id9313 . -2) (undo-tree-id9314 . -2) (undo-tree-id9315 . -2) (undo-tree-id9316 . -2) (undo-tree-id9317 . -2) (undo-tree-id9318 . -2) (undo-tree-id9319 . -2) (undo-tree-id9320 . -2) (undo-tree-id9321 . -2) (undo-tree-id9322 . -2) (undo-tree-id9323 . -2) (undo-tree-id9324 . -2) (undo-tree-id9325 . -2)) (23740 40891 305416 763000) 0 nil]) ((#("for" 0 3 (fontified t)) . 555)) ((555 . 558)) (23740 40892 568600 646000) 0 nil]) ((#(".iter()" 0 7 (fontified t)) . 525) (t 23740 39446 469659 574000)) ((525 . 532)) (23740 40892 894397 904000) 0 nil]) ((1 . 785) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection.read_response().iter().for_each(|item| println!(item));
                        result})
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 274 (fontified t) 274 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 321 (fontified t) 321 366 (fontified t) 366 414 (fontified t) 414 415 (fontified t) 415 416 (fontified t) 416 464 (fontified t) 464 471 (fontified t) 471 472 (fontified t) 472 473 (fontified t) 473 474 (fontified t) 474 482 (fontified t) 482 490 (fontified t) 490 498 (fontified t face rust-builtin-formatting-macro-face) 498 503 (fontified t) 503 504 (fontified t) 504 505 (fontified t) 505 506 (fontified t) 506 507 (fontified t) 507 531 (fontified t) 531 537 (fontified t) 537 538 (fontified t) 538 540 (fontified t) 540 600 (fontified t) 600 610 (fontified t face font-lock-preprocessor-face) 610 619 (fontified t) 619 621 (fontified t face font-lock-type-face) 621 623 (fontified t) 623 628 (fontified t) 628 634 (fontified t) 634 644 (fontified t) 644 646 (fontified t face font-lock-type-face) 646 651 (fontified t) 651 674 (fontified t) 674 675 (rear-nonsticky t fontified t) 675 676 (fontified t)) . 1) (undo-tree-id196 . -538) (undo-tree-id197 . -674) (undo-tree-id198 . -674) (undo-tree-id199 . 676) (undo-tree-id200 . 204) (undo-tree-id201 . -317) (undo-tree-id202 . -317) (undo-tree-id203 . -317) (undo-tree-id204 . -317) (undo-tree-id205 . -538) (undo-tree-id206 . -538) (undo-tree-id207 . -538) (undo-tree-id208 . -538) (undo-tree-id209 . -538) (undo-tree-id210 . -317) (undo-tree-id211 . -538) (undo-tree-id212 . -538) (undo-tree-id214 . -471) (undo-tree-id216 . -471) (undo-tree-id218 . -471) (undo-tree-id220 . -471) (undo-tree-id222 . -471) (undo-tree-id224 . -471) (undo-tree-id226 . -471) (undo-tree-id228 . -471) (undo-tree-id230 . -471) (undo-tree-id232 . -471) (undo-tree-id234 . -471) (undo-tree-id236 . -471) (undo-tree-id238 . -471) (undo-tree-id240 . -471) (undo-tree-id242 . -471) (undo-tree-id244 . -471) (undo-tree-id246 . -471) (undo-tree-id248 . -471) (undo-tree-id250 . -471) (undo-tree-id252 . -471) (undo-tree-id254 . -471) (undo-tree-id256 . -471) (undo-tree-id258 . -471) (undo-tree-id260 . -471) (undo-tree-id262 . -471) (undo-tree-id264 . -471) (undo-tree-id266 . -471) (undo-tree-id268 . -471) (undo-tree-id270 . -471) (undo-tree-id272 . -471) (undo-tree-id274 . -471) (undo-tree-id276 . -471) (undo-tree-id278 . -471) (undo-tree-id280 . -471) (undo-tree-id282 . -471) (undo-tree-id284 . -471) (undo-tree-id286 . -471) (undo-tree-id288 . -471) (undo-tree-id290 . -471) (undo-tree-id292 . -471) (undo-tree-id294 . -471) (undo-tree-id296 . -471) (undo-tree-id298 . -472) (undo-tree-id300 . -472) (undo-tree-id302 . -471) (undo-tree-id304 . -472) (undo-tree-id306 . -472) (undo-tree-id308 . -472) (undo-tree-id310 . -471) (undo-tree-id312 . -471) (undo-tree-id314 . -471) (undo-tree-id316 . -471) (undo-tree-id318 . -471) (undo-tree-id319 . -471) (undo-tree-id321 . -471) (undo-tree-id323 . -471) (undo-tree-id325 . -471) (undo-tree-id327 . -503) (undo-tree-id329 . -503) (undo-tree-id331 . -471) (undo-tree-id333 . -472) (undo-tree-id335 . -472) (undo-tree-id337 . -473) 472) ((1 . 677) (#("use redis;
use tokio::prelude::*;

fn main() {
    let client = redis::Client::open(\"redis://127.0.0.1/\").unwrap();
    let connect = client.get_async_connection();
    tokio::run(
        connect
            .and_then(|connection| {
                redis::cmd(\"SUBSCRIBE\")
                    .arg(\"timeline:hashtag:a\")
                    .query_async(connection)
                    .map(|(connection, result)| {
                        connection
                            .read_response()
                            .iter()
                            .for_each(|item| println!(item));
                        result
                    })
            })
            .then(|result| {
                assert_eq!(result, Ok(()));
                Ok(())
            }),
    );
}
" 0 3 (fontified t face font-lock-keyword-face) 3 4 (fontified t) 4 9 (fontified t face font-lock-constant-face) 9 10 (fontified t) 10 11 (fontified t) 11 14 (fontified t face font-lock-keyword-face) 14 15 (fontified t) 15 20 (fontified t face font-lock-constant-face) 20 22 (fontified t) 22 29 (fontified t face font-lock-constant-face) 29 35 (fontified t) 35 37 (fontified t face font-lock-keyword-face) 37 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 51 (fontified t) 51 54 (fontified t face font-lock-keyword-face) 54 55 (fontified t) 55 61 (fontified t face font-lock-variable-name-face) 61 64 (fontified t) 64 69 (fontified t face font-lock-constant-face) 69 71 (fontified t) 71 77 (fontified t face font-lock-type-face) 77 84 (fontified t) 84 104 (fontified t face font-lock-string-face) 104 120 (fontified t) 120 123 (fontified t face font-lock-keyword-face) 123 124 (fontified t) 124 131 (fontified t face font-lock-variable-name-face) 131 169 (fontified t) 169 174 (fontified t face font-lock-constant-face) 174 250 (fontified t) 250 255 (fontified t face font-lock-constant-face) 255 261 (fontified t) 261 272 (fontified t face font-lock-string-face) 272 299 (fontified t) 299 319 (fontified t face font-lock-string-face) 319 416 (fontified t) 416 450 (fontified t) 450 496 (fontified t) 496 500 (fontified t) 500 524 (fontified t) 524 531 (fontified t) 531 532 (fontified t) 532 561 (fontified t) 561 564 (fontified t) 564 569 (fontified t) 569 577 (fontified t) 577 585 (fontified t face rust-builtin-formatting-macro-face) 585 594 (fontified t) 594 708 (fontified t) 708 718 (fontified t face font-lock-preprocessor-face) 718 727 (fontified t) 727 729 (fontified t face font-lock-type-face) 729 752 (fontified t) 752 754 (fontified t face font-lock-type-face) 754 784 (fontified t)) . 1) (undo-tree-id9326 . 220) (undo-tree-id9327 . -561) (undo-tree-id9328 . -561) (undo-tree-id9329 . -561) (undo-tree-id9330 . -561) (undo-tree-id9331 . -561) (undo-tree-id9332 . -561) (undo-tree-id9333 . -561) (undo-tree-id9334 . -561) (undo-tree-id9335 . -561) (undo-tree-id9336 . -561) (undo-tree-id9337 . -561) (undo-tree-id9338 . -561) (undo-tree-id9339 . -561) (undo-tree-id9340 . -561) (undo-tree-id9341 . -561) (undo-tree-id9342 . -561) (undo-tree-id9343 . -561) (undo-tree-id9344 . -561) (undo-tree-id9345 . -561) (undo-tree-id9346 . -561) (undo-tree-id9347 . -561) (undo-tree-id9348 . -561) (undo-tree-id9349 . -561) (undo-tree-id9350 . -561) (undo-tree-id9351 . -561) (undo-tree-id9352 . -561) (undo-tree-id9353 . -561) (undo-tree-id9354 . -561) (undo-tree-id9355 . -561) (undo-tree-id9356 . -561) (undo-tree-id9357 . -561) (undo-tree-id9358 . -561) (undo-tree-id9359 . -561) (undo-tree-id9360 . -561) (undo-tree-id9361 . -561) (undo-tree-id9362 . -565) (undo-tree-id9363 . -586) (undo-tree-id9364 . -590) (undo-tree-id9365 . -561) (undo-tree-id9366 . -569) (undo-tree-id9367 . -561) (undo-tree-id9368 . -561) (undo-tree-id9369 . -561) (undo-tree-id9370 . -561) (undo-tree-id9371 . -561) (undo-tree-id9372 . -561) (undo-tree-id9373 . -561) (undo-tree-id9374 . -561) (undo-tree-id9375 . -561) (undo-tree-id9376 . -561) (undo-tree-id9377 . -561) (undo-tree-id9378 . -561) (undo-tree-id9379 . -561) (undo-tree-id9380 . -561) (undo-tree-id9381 . -561) (undo-tree-id9382 . -561) (undo-tree-id9383 . -561) (undo-tree-id9384 . -561) (undo-tree-id9385 . -561) (undo-tree-id9386 . -569) (undo-tree-id9387 . -586) (undo-tree-id9388 . -590) (undo-tree-id9389 . -561) (undo-tree-id9390 . -569) (undo-tree-id9391 . -577) (undo-tree-id9392 . -584) (undo-tree-id9393 . -561) (undo-tree-id9394 . -561) (undo-tree-id9395 . -561) (undo-tree-id9396 . -561) (undo-tree-id9397 . -561) (undo-tree-id9398 . -561) (undo-tree-id9399 . -583) (undo-tree-id9400 . -587) (undo-tree-id9401 . -561) (undo-tree-id9402 . -566) (undo-tree-id9403 . -586) (undo-tree-id9404 . -590) (undo-tree-id9405 . -561) (undo-tree-id9406 . -569) (undo-tree-id9407 . -561) (undo-tree-id9408 . -561) (undo-tree-id9409 . -524) (undo-tree-id9410 . -561) (undo-tree-id9411 . -524) (undo-tree-id9412 . -524) (undo-tree-id9413 . -561) (undo-tree-id9414 . -524) (undo-tree-id9415 . -524) (undo-tree-id9416 . -561) (undo-tree-id9417 . -524) (undo-tree-id9418 . -524) (undo-tree-id9419 . -524) (undo-tree-id9420 . -561) (undo-tree-id9421 . -524) (undo-tree-id9422 . -561) (undo-tree-id9423 . -524) (undo-tree-id9424 . -561) (undo-tree-id9425 . -524) (undo-tree-id9426 . -561)) (23740 40893 203320 134000) 0 nil]) ((472 . 474) (#("(" 0 1 (fontified nil)) . -472) (undo-tree-id339 . -1) (472 . 473) (#("a" 0 1 (fontified t)) . -472) (undo-tree-id341 . -1) (undo-tree-id343 . -1) (undo-tree-id345 . -1) (undo-tree-id347 . -1) (undo-tree-id349 . -1) (undo-tree-id351 . -1) (undo-tree-id353 . -1) (undo-tree-id355 . -1) (undo-tree-id357 . -1) (undo-tree-id359 . -1) (undo-tree-id361 . -1) (undo-tree-id363 . -1) (undo-tree-id365 . -1) (undo-tree-id367 . -1) (undo-tree-id369 . -1) (undo-tree-id371 . -1) (undo-tree-id373 . -1) (undo-tree-id375 . -1) (undo-tree-id377 . -1) (undo-tree-id379 . -1) (undo-tree-id381 . -1) (undo-tree-id383 . -1) (undo-tree-id385 . -1) (undo-tree-id387 . -1) (undo-tree-id389 . -1) (undo-tree-id391 . -1) (undo-tree-id393 . -1) (undo-tree-id395 . -1) (undo-tree-id397 . -1) (undo-tree-id399 . -1) (undo-tree-id401 . -1) (undo-tree-id403 . -1) (undo-tree-id405 . -1) (undo-tree-id407 . -1) (undo-tree-id408 . -1) (undo-tree-id410 . -1) (undo-tree-id412 . -1) (#("t" 0 1 (fontified t)) . -473) (undo-tree-id414 . -1) (undo-tree-id416 . -1) (undo-tree-id418 . -1) (undo-tree-id420 . -1) (undo-tree-id422 . -1) (undo-tree-id424 . -1) (undo-tree-id426 . -1) (undo-tree-id428 . -1) (undo-tree-id430 . -1) (undo-tree-id432 . -1) (undo-tree-id434 . -1) (undo-tree-id436 . -1) (undo-tree-id438 . -1) (undo-tree-id440 . -1) (undo-tree-id442 . -1) (undo-tree-id444 . -1) (undo-tree-id446 . -1) (undo-tree-id448 . -1) (undo-tree-id450 . -1) (undo-tree-id452 . -1) (undo-tree-id454 . -1) (undo-tree-id456 . -1) (undo-tree-id458 . -1) (undo-tree-id460 . -1) (undo-tree-id462 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id467 . -1) (undo-tree-id469 . -1) (#("o" 0 1 (fontified t)) . -474) (undo-tree-id471 . -1) (undo-tree-id473 . -1) (undo-tree-id475 . -1) (undo-tree-id477 . -1) (undo-tree-id479 . -1) (undo-tree-id481 . -1) (undo-tree-id483 . -1) (undo-tree-id485 . -1) (undo-tree-id487 . -1) (undo-tree-id489 . -1) (undo-tree-id491 . -1) (undo-tree-id493 . -1) (undo-tree-id495 . -1) (undo-tree-id497 . -1) (undo-tree-id499 . -1) (undo-tree-id500 . -1) (undo-tree-id502 . -1) (undo-tree-id504 . -1) (#("r" 0 1 (fontified t)) . -475) (undo-tree-id506 . -1) (undo-tree-id508 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id513 . -1) (undo-tree-id515 . -1) 476 (467 . 476)) ((#(".iterator" 0 5 (fontified nil) 5 6 (fontified nil) 6 7 (fontified nil) 7 8 (fontified nil) 8 9 (fontified nil)) . 467) (undo-tree-id9427 . -5) (undo-tree-id9428 . -5) (undo-tree-id9429 . -5) (undo-tree-id9430 . -5) (undo-tree-id9431 . -5) (undo-tree-id9432 . -5) (undo-tree-id9433 . -5) (undo-tree-id9434 . -5) (undo-tree-id9435 . -9) (undo-tree-id9436 . -9) (undo-tree-id9437 . -5) (undo-tree-id9438 . -5) (undo-tree-id9439 . -5) (undo-tree-id9440 . -5) (undo-tree-id9441 . 4) (undo-tree-id9442 . -5) (undo-tree-id9443 . 4) (undo-tree-id9444 . -5) (undo-tree-id9445 . 4) (undo-tree-id9446 . -5) (472 . 476) (#("(" 0 1 (fontified nil)) . 472) (undo-tree-id9447 . 1) (undo-tree-id9448 . 1) (undo-tree-id9449 . 1) (472 . 473) (#("()" 0 1 (fontified t) 1 2 (fontified t)) . 472) (undo-tree-id9450 . 1) (undo-tree-id9451 . 2) (undo-tree-id9452 . -1) (undo-tree-id9453 . 1) (undo-tree-id9454 . -1) (undo-tree-id9455 . 1) (undo-tree-id9456 . -2)) (23740 40893 490261 43000) 0 nil]) ((493 . 497) (492 . 494) (#("(" 0 1 (fontified nil)) . -492) (483 . 493) (477 . 483) (476 . 478) (#("(" 0 1 (fontified nil)) . -476) (467 . 477)) ((#(".for_each(" 0 1 (fontified nil) 1 9 (fontified nil) 9 10 (fontified nil)) . 467) (undo-tree-id9457 . 10) (undo-tree-id9458 . -1) (undo-tree-id9459 . -9) (undo-tree-id9460 . -1) (undo-tree-id9461 . -5) (476 . 477) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 476) (#("|item|" 0 6 (fontified nil)) . 477) (#(" println!(" 0 1 (fontified nil) 1 9 (fontified nil face rust-builtin-formatting-macro-face) 9 10 (fontified nil)) . 483) (492 . 493) (#("()" 0 1 (fontified nil) 1 2 (fontified nil)) . 492) (#("item" 0 1 (fontified t) 1 4 (fontified t)) . 493)) (23740 40894 16792 571000) 0 nil]) nil nil (23740 40894 525145 950000) 0 nil] #3# 83006 123 nil)