"50c1a6e48269314fb4d0f36fcf362443b0dc3caa"
#s(undo-tree [nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil ([nil (#2=[nil nil ((#("
" 0 1 (fontified t)) . 397) (undo-tree-id300 . 1)) nil (23742 28496 578372 241000) 0 nil]) ((#("        " 0 8 (fontified t)) . -397) (undo-tree-id301 . -8) (undo-tree-id302 . -8) (undo-tree-id303 . -8) 405 (396 . 405) (t 23742 28411 926878 829000) 360) nil (23742 28496 578381 210000) 0 nil]) ((313 . 317) (#(" " 0 1 (fontified nil)) . -313) (313 . 314) (#(">" 0 1 (fontified nil syntax-table #1=(1))) . -313) (310 . 314) (302 . 310) (302 . 303) 314 (t 23742 28397 456981 616000)) nil (23742 28411 914036 941000) 0 nil]) ((#("-" 0 1 (fontified t)) . 413) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (t 23742 28384 563739 932000)) nil (23742 28397 444299 692000) 0 nil]) ((430 . 431) (#("5" 0 1 (fontified t)) . 430) (undo-tree-id296 . -1) (undo-tree-id297 . -1)) nil (23742 28384 551136 547000) 0 nil]) ((408 . 416) (405 . 408) (400 . 405) 399) nil (23742 28384 551142 568000) 0 nil]) ((#("-" 0 1 (fontified t)) . 414) (t 23742 28359 843915 814000)) nil (23742 28384 551145 334000) 0 nil]) ((#("        _ => unreachable!(),
" 0 11 (fontified t) 11 12 (fontified t syntax-table #1#) 12 13 (fontified t) 13 25 (fontified t face font-lock-preprocessor-face) 25 28 (fontified t) 28 29 (fontified t)) . 381) (undo-tree-id289 . -18) (undo-tree-id290 . -18) (undo-tree-id291 . -18) (undo-tree-id292 . -10) (undo-tree-id293 . -12) (undo-tree-id294 . -10) (undo-tree-id295 . -12) 399) nil (23742 28359 829094 680000) 0 nil]) ((282 . 283) (#("i" 0 1 (fontified t face font-lock-type-face)) . 282)) nil (23742 28359 829109 305000) 0 nil]) ((274 . 275) (#("i" 0 1 (fontified t face font-lock-type-face)) . 274) (t 23742 28301 320999 800000)) nil (23742 28359 829116 829000) 0 nil]) ((443 . 444) (#("i" 0 1 (fontified t)) . -443) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) 444 (443 . 444) (t 23742 28288 554424 346000)) nil (23742 28301 308934 806000) 0 nil]) ((408 . 409) (#(";" 0 1 (fontified t)) . -408) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (undo-tree-id279 . -1) 409 (408 . 409) (#(")" 0 1 (fontified nil)) . 408) (407 . 408) (406 . 408) (#("(" 0 1 (fontified nil)) . -406) (394 . 407) (#("!" 0 1 (fontified t)) . -394) (undo-tree-id280 . -1) (undo-tree-id281 . -1) (#("u" 0 1 (fontified t)) . -395) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (#("n" 0 1 (fontified t)) . -396) (undo-tree-id284 . -1) (undo-tree-id285 . -1) 397 (392 . 397) (#(" " 0 1 (fontified nil)) . -392) (392 . 393) (#(">" 0 1 (fontified nil syntax-table #1#)) . -392) (390 . 393) (389 . 390) (380 . 389) (t 23742 28250 621362 411000) 342) nil (23742 28288 540129 21000) 0 nil]) ((349 . 353) (#(" " 0 1 (fontified nil)) . -349) (349 . 350) (#(">" 0 1 (fontified nil syntax-table #1#)) . -349) (349 . 350) (344 . 349) (t 23742 28065 872694 461000)) nil (23742 28250 611400 351000) 0 nil]) ((403 . 404)) nil (23742 28065 861213 126000) 0 nil]) ((#("v" 0 1 (fontified t)) . -403) (undo-tree-id266 . -1) (undo-tree-id267 . -1) 404) nil (23742 28065 861227 814000) 0 nil]) ((403 . 404)) nil (23742 28065 861231 361000) 0 nil]) ((#("f" 0 1 (fontified t)) . -403) (undo-tree-id268 . -1) (undo-tree-id269 . -1) 404) nil (23742 28065 861236 540000) 0 nil]) ((403 . 404)) nil (23742 28065 861238 965000) 0 nil]) ((402 . 403)) nil (23742 28065 861241 71000) 0 nil]) ((#("ac" 0 2 (fontified t)) . 402) (undo-tree-id270 . -2) (undo-tree-id271 . -2) (undo-tree-id272 . -2) (undo-tree-id273 . -2) (undo-tree-id274 . -1) (undo-tree-id275 . -2) (undo-tree-id276 . -1) (t 23742 28052 912788 636000)) nil (23742 28065 861253 485000) 0 nil]) ((1 . 412) (#("// snippet of code @ 2019-04-22 21:37:45

// === Rust Playground ===
// This snippet is in: ~/.emacs.d/rust-playground/at-2019-04-22-213742/

// Execute the snippet: C-c C-c
// Delete the snippet completely: C-c k
// Toggle between main.rs and Cargo.toml: C-c b

fn fib(n: i32) -> i32 {
    match n {
        1 => 1,
        2 => 2,
        n => fib(n - 1) + fib(n - 2)
    }
}
fn main() {
    dbg!(fac(5));
}
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 40 (fontified t face font-lock-comment-face) 40 41 (fontified t face font-lock-comment-face) 41 42 (fontified t) 42 45 (fontified t face font-lock-comment-delimiter-face) 45 69 (fontified t face font-lock-comment-face) 69 72 (fontified t face font-lock-comment-delimiter-face) 72 141 (fontified t face font-lock-comment-face) 141 142 (fontified t) 142 145 (fontified t face font-lock-comment-delimiter-face) 145 174 (fontified t face font-lock-comment-face) 174 177 (fontified t face font-lock-comment-delimiter-face) 177 214 (fontified t face font-lock-comment-face) 214 217 (fontified t face font-lock-comment-delimiter-face) 217 262 (fontified t face font-lock-comment-face) 262 263 (fontified t) 263 265 (fontified t face font-lock-keyword-face) 265 266 (fontified t) 266 269 (fontified t face font-lock-function-name-face) 269 270 (fontified t) 270 271 (fontified t face font-lock-variable-name-face) 271 273 (fontified t) 273 276 (fontified t face font-lock-type-face) 276 279 (fontified t) 279 280 (fontified t syntax-table #1#) 280 281 (fontified t) 281 284 (fontified t face font-lock-type-face) 284 287 (fontified t) 287 291 (fontified t) 291 296 (fontified t face font-lock-keyword-face) 296 301 (fontified t) 301 312 (fontified t) 312 313 (syntax-table #1# fontified t) 313 316 (fontified t) 316 317 (fontified t) 317 328 (fontified t) 328 329 (fontified t syntax-table #1#) 329 333 (fontified t) 333 344 (fontified t) 344 345 (fontified t syntax-table #1#) 345 349 (fontified t) 349 355 (fontified t) 355 362 (fontified t) 362 368 (fontified t) 368 369 (fontified t) 369 370 (fontified t) 370 378 (fontified t) 378 380 (fontified t face font-lock-keyword-face) 380 381 (fontified t) 381 385 (fontified t face font-lock-function-name-face) 385 390 (fontified t) 390 394 (fontified t) 394 398 (fontified t face font-lock-preprocessor-face) 398 399 (fontified t) 399 402 (fontified t) 402 405 (fontified t) 405 406 (fontified t) 406 407 (fontified t) 407 408 (fontified t) 408 410 (fontified t)) . 1) (undo-tree-id179 . 42) (undo-tree-id180 . -398) (undo-tree-id181 . -399) (undo-tree-id182 . -399) (undo-tree-id183 . -399) (undo-tree-id184 . -399) (undo-tree-id185 . -398) (undo-tree-id186 . -398) (undo-tree-id187 . -398) (undo-tree-id188 . -398) (undo-tree-id189 . -398) (undo-tree-id190 . -374) (undo-tree-id191 . -374) (undo-tree-id192 . -374) (undo-tree-id193 . -374) (undo-tree-id194 . -374) (undo-tree-id195 . -374) (undo-tree-id196 . -374) (undo-tree-id197 . -374) (undo-tree-id198 . -367) (undo-tree-id199 . -346) (undo-tree-id200 . -355) (undo-tree-id201 . -354) (undo-tree-id202 . -349) (undo-tree-id203 . -350) (undo-tree-id204 . -356) (undo-tree-id205 . -356) (undo-tree-id206 . -356) (undo-tree-id207 . -356) (undo-tree-id208 . -356) (undo-tree-id209 . -356) (undo-tree-id210 . -355) (undo-tree-id211 . -356) (undo-tree-id212 . -355) (undo-tree-id213 . -356) (undo-tree-id214 . -355) (undo-tree-id215 . -356) (undo-tree-id216 . -355) (undo-tree-id217 . -356) (undo-tree-id218 . -355) (undo-tree-id219 . -356) (undo-tree-id220 . -355) (undo-tree-id221 . -356) (undo-tree-id222 . -349) (undo-tree-id223 . -350) (undo-tree-id224 . -357) (undo-tree-id225 . -356) (undo-tree-id226 . -358) (undo-tree-id227 . -357) (undo-tree-id228 . -359) (undo-tree-id229 . -358) (undo-tree-id230 . -360) (undo-tree-id231 . -359) (undo-tree-id232 . -361) (undo-tree-id233 . -360) (undo-tree-id234 . -362) (undo-tree-id235 . -361) (undo-tree-id236 . -362) (undo-tree-id237 . -362) (undo-tree-id238 . -362) (undo-tree-id239 . -362) (undo-tree-id240 . -362) (undo-tree-id241 . -363) (undo-tree-id242 . -363) (undo-tree-id243 . -362) (undo-tree-id244 . -364) (undo-tree-id245 . -363) (undo-tree-id246 . -365) (undo-tree-id247 . -364) (undo-tree-id248 . -366) (undo-tree-id249 . -365) (undo-tree-id250 . -367) (undo-tree-id251 . -366) (undo-tree-id252 . -368) (undo-tree-id253 . -367) (undo-tree-id254 . -367) (undo-tree-id255 . -367) 368) nil (23742 28052 895038 845000) 0 nil]) ((364 . 369) (363 . 365) (#("(" 0 1 (fontified nil)) . -363) (undo-tree-id256 . -1) (undo-tree-id257 . -1) (357 . 364) (#("," 0 1 (fontified t)) . -357) (undo-tree-id258 . -1) (undo-tree-id259 . -1) 358 (357 . 358) (#(")" 0 1 (fontified nil)) . 357) (356 . 357) (#(" " 0 1 (fontified nil)) . -356) (356 . 357) (#(")" 0 1 (fontified nil)) . -356) (356 . 357) (351 . 356) (#("2" 0 1 (fontified t)) . -351) (undo-tree-id260 . -1) 352 (351 . 352) (350 . 352) (#("(" 0 1 (fontified nil)) . -350) (347 . 351) (#("1" 0 1 (fontified t)) . -347) (undo-tree-id261 . -1) (#(" " 0 1 (fontified t)) . -348) (undo-tree-id262 . -1) 349 (347 . 349) (#("n * fac(n - 1)," 0 15 (fontified t)) . 347) (undo-tree-id263 . -1)) nil (23742 28052 895089 124000) 0 nil]) ((329 . 333) (#(" " 0 1 (fontified nil)) . -329) (329 . 330) (#(">" 0 1 (fontified nil syntax-table #1#)) . -329) (327 . 330) (326 . 327) (317 . 326) 310) nil (23742 28052 895104 961000) 0 nil]) ((268 . 270) (#("un" 0 2 (fontified t face font-lock-function-name-face)) . 268)) nil (23742 28052 895110 214000) 0 nil]) ((#("c" 0 1 (fontified t face font-lock-function-name-face)) . -270) (undo-tree-id264 . -1) 271 (267 . 271) (#("fac" 0 3 (fontified t face font-lock-function-name-face)) . 267) (undo-tree-id265 . -1) 268 (t 23742 27938 803622 938000)) nil (23742 28052 895120 244000) 0 nil]) ((382 . 383) (#(")" 0 1 (fontified t)) . -379) (379 . 380) (#(")" 0 1 (fontified t)) . -376) (375 . 377) (#("(" 0 1 (fontified nil)) . -375) (371 . 376) (t 23742 27903 970546 325000)) nil (23742 27938 790479 308000) 0 nil]) ((1 . 381) (#("// snippet of code @ 2019-04-22 21:37:45

// === Rust Playground ===
// This snippet is in: ~/.emacs.d/rust-playground/at-2019-04-22-213742/

// Execute the snippet: C-c C-c
// Delete the snippet completely: C-c k
// Toggle between main.rs and Cargo.toml: C-c b

    fn fac(n: i32) -> i32 {
        match n {
            1 => 1,
            n => n * fac(n - 1),
        }
    }
fn main() {
    fac(5);
}
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 40 (fontified t face font-lock-comment-face) 40 41 (fontified t face font-lock-comment-face) 41 42 (fontified t) 42 45 (fontified t face font-lock-comment-delimiter-face) 45 69 (fontified t face font-lock-comment-face) 69 72 (fontified t face font-lock-comment-delimiter-face) 72 141 (fontified t face font-lock-comment-face) 141 142 (fontified t) 142 145 (fontified t face font-lock-comment-delimiter-face) 145 174 (fontified t face font-lock-comment-face) 174 177 (fontified t face font-lock-comment-delimiter-face) 177 214 (fontified t face font-lock-comment-face) 214 217 (fontified t face font-lock-comment-delimiter-face) 217 262 (fontified t face font-lock-comment-face) 262 263 (fontified t) 263 266 (fontified t) 266 267 (fontified t rear-nonsticky t) 267 269 (fontified t face font-lock-keyword-face) 269 270 (fontified t) 270 273 (fontified t face font-lock-function-name-face) 273 274 (fontified t) 274 275 (fontified t face font-lock-variable-name-face) 275 277 (fontified t) 277 280 (fontified t face font-lock-type-face) 280 283 (fontified t) 283 284 (fontified t syntax-table #1#) 284 285 (fontified t) 285 288 (fontified t face font-lock-type-face) 288 299 (fontified t) 299 304 (fontified t face font-lock-keyword-face) 304 324 (fontified t) 324 325 (fontified t syntax-table #1#) 325 329 (fontified t) 329 344 (fontified t) 344 345 (fontified t syntax-table #1#) 345 361 (fontified t) 361 377 (fontified t) 377 378 (fontified t) 378 380 (fontified t face font-lock-keyword-face) 380 381 (fontified t) 381 385 (fontified t face font-lock-function-name-face) 385 389 (fontified t) 389 390 (fontified t) 390 397 (fontified t) 397 401 (fontified t) 401 402 (fontified t) 402 404 (fontified t)) . 1) (undo-tree-id48 . 3) (undo-tree-id49 . -377) (undo-tree-id50 . -402) (undo-tree-id51 . -402) (undo-tree-id52 . -402) (undo-tree-id53 . -402) (undo-tree-id54 . -402) (undo-tree-id55 . -402) (undo-tree-id56 . -394) (undo-tree-id57 . -402) (undo-tree-id58 . 2) (undo-tree-id59 . -402) (undo-tree-id60 . -402) (undo-tree-id61 . -402) (undo-tree-id62 . -402) (undo-tree-id63 . -402) (undo-tree-id64 . -402) (undo-tree-id65 . -402) (undo-tree-id66 . -402) (undo-tree-id67 . -402) (undo-tree-id68 . -402) (undo-tree-id69 . -402) (undo-tree-id70 . -402) (undo-tree-id71 . -402) (undo-tree-id72 . -402) (undo-tree-id73 . -402) (undo-tree-id74 . -402) (undo-tree-id75 . -402) (undo-tree-id76 . -402) (undo-tree-id77 . -402) (undo-tree-id78 . -402) (undo-tree-id79 . -402) (undo-tree-id80 . -402) (undo-tree-id81 . -402) (undo-tree-id82 . -402) (undo-tree-id83 . -402) (undo-tree-id84 . -402) (undo-tree-id85 . -402) (undo-tree-id86 . -402) (undo-tree-id87 . -402) (undo-tree-id88 . -402) (undo-tree-id89 . -263) (undo-tree-id90 . -377) (undo-tree-id91 . -397) (undo-tree-id92 . -397) (undo-tree-id93 . -399) (undo-tree-id94 . -398) (undo-tree-id95 . -400) (undo-tree-id96 . -400) (undo-tree-id97 . -401) (undo-tree-id98 . -400) (undo-tree-id99 . -400) (undo-tree-id100 . -400) (undo-tree-id101 . -399) (undo-tree-id102 . -400) (undo-tree-id103 . -399) (undo-tree-id104 . -400) (undo-tree-id105 . -399) (undo-tree-id106 . -400) (undo-tree-id107 . -399) (undo-tree-id108 . -400) (undo-tree-id109 . -399) (undo-tree-id110 . -400) (undo-tree-id111 . -399) (undo-tree-id112 . -400) (undo-tree-id113 . -397) (undo-tree-id114 . -398) (undo-tree-id115 . -399) (undo-tree-id116 . -400) (undo-tree-id117 . -397) (undo-tree-id118 . -398) (undo-tree-id119 . -398) (undo-tree-id120 . -399) (undo-tree-id121 . -397) (undo-tree-id122 . -398) (undo-tree-id123 . -396) (undo-tree-id124 . -397) (undo-tree-id125 . -395) (undo-tree-id126 . -396) (undo-tree-id127 . -394) (undo-tree-id128 . -395) 395) nil (23742 27903 951037 776000) 0 nil]) ((401 . 402) (#(")" 0 1 (fontified nil)) . 401) (undo-tree-id129 . -1) (399 . 401) (398 . 400) (#("(" 0 1 (fontified nil)) . -398) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (395 . 399) (390 . 395) 383) nil (23742 27903 951056 163000) 0 nil]) ((nil rear-nonsticky nil 267 . 268) (#("
" 0 1 (fontified nil)) . -378) (263 . 379)) nil (23742 27903 951060 621000) 0 nil]) ((#("    fn fac(n: i32) -> i32 {
        match n {
            1 => 1,
            n => n * fac(n - 1),
        }
    }
" 0 4 (fontified t) 4 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 10 (fontified t face font-lock-function-name-face) 10 11 (fontified t) 11 12 (fontified t face font-lock-variable-name-face) 12 14 (fontified t) 14 17 (fontified t face font-lock-type-face) 17 20 (fontified t) 20 21 (fontified t syntax-table #1#) 21 22 (fontified t) 22 25 (fontified t face font-lock-type-face) 25 36 (fontified t) 36 41 (fontified t face font-lock-keyword-face) 41 61 (fontified t) 61 62 (fontified t syntax-table #1#) 62 66 (fontified t) 66 81 (fontified t) 81 82 (syntax-table #1# fontified t) 82 98 (fontified t) 98 115 (fontified t)) . 276) (undo-tree-id132 . -114) (undo-tree-id133 . -95) (undo-tree-id134 . -95) (undo-tree-id135 . -95) (undo-tree-id136 . -95) (undo-tree-id137 . -95) (undo-tree-id138 . -95) (undo-tree-id139 . -114) (undo-tree-id140 . -26) (undo-tree-id141 . -114) (undo-tree-id142 . -115) (undo-tree-id143 . -26) (undo-tree-id144 . -114) (undo-tree-id145 . -108) (undo-tree-id146 . -92) (undo-tree-id147 . -107) (undo-tree-id148 . -108) (undo-tree-id149 . -44) (undo-tree-id150 . -45) (undo-tree-id151 . -114) (undo-tree-id152 . -108) (undo-tree-id153 . -113) (undo-tree-id154 . -114) (undo-tree-id155 . -113) (undo-tree-id156 . -114) (undo-tree-id157 . -113) (undo-tree-id158 . -114) (undo-tree-id159 . -113) (undo-tree-id160 . -114) (undo-tree-id161 . -113) (undo-tree-id162 . -114) (undo-tree-id163 . -113) (undo-tree-id164 . -114) (undo-tree-id165 . -107) (undo-tree-id166 . -108) (undo-tree-id167 . -44) (undo-tree-id168 . -45) (undo-tree-id169 . -26) (undo-tree-id170 . -27) (undo-tree-id171 . 89) (undo-tree-id172 . -27) (undo-tree-id173 . 88) (undo-tree-id174 . -113) (undo-tree-id175 . 2) (undo-tree-id176 . -114) (undo-tree-id177 . -19) (undo-tree-id178 . -21) 390 (t 23742 27882 30708 570000)) nil (23742 27903 951140 365000) 0 nil]) ((1 . 393) (#("// snippet of code @ 2019-04-22 21:37:45

// === Rust Playground ===
// This snippet is in: ~/.emacs.d/rust-playground/at-2019-04-22-213742/

// Execute the snippet: C-c C-c
// Delete the snippet completely: C-c k
// Toggle between main.rs and Cargo.toml: C-c b

fn main() {
    fn fac(n: i32) -> i32 {
        match n {
            1 => 1,
            n => n * fac(n - 1)
        }

    }
    
}
" 0 3 (fontified t face font-lock-comment-delimiter-face) 3 41 (fontified t face font-lock-comment-face) 41 42 (fontified t) 42 45 (fontified t face font-lock-comment-delimiter-face) 45 69 (fontified t face font-lock-comment-face) 69 72 (fontified t face font-lock-comment-delimiter-face) 72 141 (fontified t face font-lock-comment-face) 141 142 (fontified t) 142 145 (fontified t face font-lock-comment-delimiter-face) 145 174 (fontified t face font-lock-comment-face) 174 177 (fontified t face font-lock-comment-delimiter-face) 177 214 (fontified t face font-lock-comment-face) 214 217 (fontified t face font-lock-comment-delimiter-face) 217 262 (fontified t face font-lock-comment-face) 262 263 (fontified t) 263 265 (fontified t face font-lock-keyword-face) 265 266 (fontified t) 266 270 (fontified t face font-lock-function-name-face) 270 275 (fontified t) 275 279 (fontified t) 279 281 (fontified t face font-lock-keyword-face) 281 282 (fontified t) 282 285 (fontified t face font-lock-function-name-face) 285 286 (fontified t) 286 287 (fontified t face font-lock-variable-name-face) 287 289 (fontified t) 289 292 (fontified t face font-lock-type-face) 292 294 (fontified t) 294 295 (fontified t) 295 296 (fontified t syntax-table #1#) 296 297 (fontified t) 297 300 (fontified t face font-lock-type-face) 300 301 (fontified t) 301 302 (fontified t) 302 303 (fontified t) 303 311 (fontified t) 311 316 (fontified t face font-lock-keyword-face) 316 319 (fontified t) 319 320 (fontified t) 320 321 (fontified t) 321 336 (fontified t) 336 337 (fontified t syntax-table #1#) 337 341 (fontified t) 341 356 (fontified t) 356 357 (fontified t syntax-table #1#) 357 365 (fontified t) 365 371 (fontified t) 371 372 (fontified t) 372 373 (fontified t) 373 381 (fontified t) 381 382 (fontified t) 382 383 (fontified t) 383 384 (fontified t) 384 388 (fontified t) 388 389 (fontified t) 389 390 (fontified t) 390 394 (fontified t) 394 395 (fontified t) 395 396 (fontified nil) 396 397 (fontified nil)) . 1) (undo-tree-id0 . 26) (undo-tree-id1 . -370) (undo-tree-id2 . -370) (undo-tree-id3 . -370) (undo-tree-id4 . -370) (undo-tree-id5 . -370) (undo-tree-id6 . -370) (undo-tree-id7 . -370) (undo-tree-id8 . -370) (undo-tree-id9 . -370) (undo-tree-id10 . -370) (undo-tree-id11 . -370) (undo-tree-id12 . -370) (undo-tree-id13 . -370) (undo-tree-id14 . -370) (undo-tree-id15 . -370) (undo-tree-id16 . -370) (undo-tree-id17 . -370) (undo-tree-id18 . -370) (undo-tree-id19 . -370) (undo-tree-id20 . -370) (undo-tree-id21 . -370) (undo-tree-id22 . -370) (undo-tree-id23 . -370) (undo-tree-id24 . -370) (undo-tree-id25 . -370) (undo-tree-id26 . -370) (undo-tree-id27 . -370) (undo-tree-id28 . -370) (397 . 398) 371) nil (23742 27882 20000 856000) 0 nil]) ((370 . 372) (#("1" 0 1 (fontified t)) . -370) (undo-tree-id29 . -1) 371 (367 . 371) (366 . 368) (#("(" 0 1 (fontified nil)) . -366) (363 . 367) (#("d" 0 1 (fontified t)) . -363) (undo-tree-id30 . -1) (#("a" 0 1 (fontified t)) . -364) (undo-tree-id31 . -1) 365 (359 . 365) (357 . 359) (#(" " 0 1 (fontified nil)) . -357) (357 . 358) (#(">" 0 1 (fontified nil syntax-table #1#)) . -357) (356 . 358) (#("-" 0 1 (fontified t)) . -356) (undo-tree-id32 . -1) 357 (354 . 357) (#("x" 0 1 (fontified t)) . -354) (undo-tree-id33 . -1) 355 (354 . 355) (#("n" 0 1 (fontified t)) . -354) (undo-tree-id34 . -1) (#(" " 0 1 (fontified t)) . -355) (undo-tree-id35 . -1) 356 (354 . 356) (341 . 354) (337 . 341) (#(" " 0 1 (fontified nil)) . -337) (337 . 338) (#(">" 0 1 (fontified nil syntax-table #1#)) . -337) (335 . 338) (334 . 335) (321 . 334) 311) nil (23742 27882 20055 901000) 0 nil]) ((321 . 330) (320 . 322) (#("{" 0 1 (fontified nil)) . -320) (320 . 321) (312 . 320) (303 . 312) 295) nil (23742 27882 20076 397000) 0 nil]) ((295 . 296) (#("i" 0 1 (fontified t)) . 295) (295 . 296) (#("=" 0 1 (fontified t)) . 295)) nil (23742 27882 20100 283000) 0 nil]) ((#("        " 0 8 (fontified t)) . -304) (undo-tree-id36 . -8) 312 (303 . 312) 279) nil (23742 27882 20108 317000) 0 nil]) ((303 . 308) (302 . 304) (#("{" 0 1 (fontified nil)) . -302) (296 . 303) (#(" " 0 1 (fontified nil)) . -296) (296 . 297) (#(">" 0 1 (fontified nil syntax-table #1#)) . -296) (294 . 297) (#(")" 0 1 (fontified nil)) . 294) (293 . 294) (#(" " 0 1 (fontified nil)) . -293) (293 . 294) (#(")" 0 1 (fontified nil face font-lock-type-face)) . -293) (288 . 294) (#(" " 0 1 (fontified t)) . -288) (undo-tree-id37 . -1) 289 (287 . 289) (#("N" 0 1 (fontified t face font-lock-type-face)) . -287) (undo-tree-id38 . -1) (#(":" 0 1 (fontified t)) . -288) (undo-tree-id39 . -1) (#(" " 0 1 (fontified t)) . -289) (undo-tree-id40 . -1) (#("i" 0 1 (fontified t)) . -290) (undo-tree-id41 . -1) 291 (287 . 291) (#("1" 0 1 (fontified t)) . -287) (undo-tree-id42 . -1) 288 (287 . 288) (286 . 288) (#("(" 0 1 (fontified nil face font-lock-function-name-face)) . -286) (280 . 287) (276 . 280) (276 . 277)) nil (23742 27882 20144 68000) 0 nil]) ((#("    
" 0 5 (fontified t)) . 276) (undo-tree-id43 . -5) (undo-tree-id44 . -3) 279) nil (23742 27882 20160 338000) 0 nil]) ((#("k" 0 1 (fontified t)) . -285) (undo-tree-id45 . -1) 286 (285 . 286) (281 . 285) (281 . 282) (#("    println!(\"Results:\")
" 0 4 (fontified t) 4 12 (fontified t face rust-builtin-formatting-macro-face) 12 13 (fontified t) 13 23 (fontified t face font-lock-string-face) 23 25 (fontified t)) . 281) (undo-tree-id46 . -3) (undo-tree-id47 . -3) 284) nil (23742 27882 20173 579000) 0 nil]) ((264 . 307) (215 . 218) (175 . 178) (143 . 146) (70 . 73) (43 . 46) (1 . 4) (1 . 246)) nil (23742 27882 20182 240000) 0 nil]) nil nil (23742 27882 20185 615000) 0 nil] #2# 5899 39 nil)